{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ThreeChart.js","webpack:///webpack/bootstrap 78dbd4b5273eed6036e9","webpack:///./index.ts","webpack:///./src/index.ts","webpack:///./src/ChartView.ts","webpack:///./src/Plugin.ts","webpack:///./src/Utils.ts","webpack:///./src/deps/deps.ts","webpack:///./~/three/examples/js/libs/stats.min.js","webpack:///./~/is-plain-object/index.js","webpack:///./~/isobject/index.js","webpack:///./~/eventemitter2/lib/eventemitter2.js","webpack:///./src/polyfills/es6-promise.js","webpack:///./~/css-element-queries/src/ResizeSensor.js","webpack:///./src/EventEmmiter.ts","webpack:///./src/Chart.ts","webpack:///./src/Trend.ts","webpack:///./src/TrendSegmentsManager.ts","webpack:///./src/TrendsManager.ts","webpack:///./src/Screen.ts","webpack:///./src/AxisMarks.ts","webpack:///./src/interfaces.ts","webpack:///./src/Widget.ts","webpack:///./src/widgets/AxisWidget.ts","webpack:///./src/widgets/GridWidget.ts","webpack:///./src/widgets/TrendsGradientWidget.ts","webpack:///./src/widgets/TrendsWidget.ts","webpack:///./src/Color.ts","webpack:///./src/widgets/TrendsLineWidget.ts","webpack:///./src/widgets/TrendsCandleWidget.ts","webpack:///./src/deps/index.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","__export","hasOwnProperty","Plugin_1","PerspectiveCamera","THREE","Chart_1","Widget_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsGradientWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","deps_1","ChartView","state","$container","pluginsAndWidgets","_this","widgets","REVISION","Utils","error","style","getComputedStyle","width","parseInt","height","plugins","filter","pluginOrWidget","ChartPlugin","Chart","zoomThrottled","throttle","zoomValue","origin","zoom","init","prototype","_a","data","w","h","showStats","autoRender","scene","Scene","isStopped","enabled","renderer","renderers","antialias","alpha","setSize","setPixelRatio","devicePixelRatio","setClearColor","backgroundColor","backgroundOpacity","appendChild","domElement","$el","display","stats","Stats","setupCamera","initWidgets","bindEvents","renderLoop","preinstalledWidgetsClasses","constructor","preinstalledWidgets","customWidgets","forEach","ChartWidget","push","pluginWidgetClasses","providedWidgets","apply","concat","map","WidgetClass","widget","setupChartState","onReadyHandler","add","getObject3D","isDestroyed","begin","render","fpsLimit","fps","delay_1","setTimeout","requestAnimationFrame","end","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","getTrend","trendName","setState","controls","addEventListener","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","options","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","autoScroll","oldTrendsMaxX","prevState","computedData","trends","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","xAxis","range","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","Math","min","max","autoScrollIsEnabled","then","window","CanvasRenderer","WebGLRenderer","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsGradientWidget","EventEmmiter_1","DEFAULT_CONFIG","installPluginWidgets","config","initialState","deepMerge","name","NAME","chartState","ee","EventEmitter","bindEvent","onInitialStateApplied","onInitialStateAppliedHandler","onReady","onDestroy","onDestroyHandler","onPluginsStateChange","changedPluginsStates","onStateChanged","getOptions","pluginsState","changedState","removeAllListeners","args","_i","arguments","length","Array","isArray","unsubscriber","deepmerge","target","src","mergeArrays","array","dst","i","indexOf","Object","keys","key","obj1","obj2","deepCopy","obj","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","floor","intStr","toString","lengthDiff","repeat","afterPointDigitsCount","afterPointStr","split","substr","createTexture","fn","canvas","document","createElement","ctx","getContext","texture","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","console","warn","getUid","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","random","copyProps","srcObject","dstObject","props","excludeProps","isPlainObject","TweenLite","TweenMax","EE2","es6_promise_1","Promise","a","dom","k","d","children","l","cssText","g","performance","Date","now","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","round","u","n","q","b","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","isObject","isObjectObject","o","ctor","prot","val","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_isArray","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","searchListenerTree","handlers","type","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","**","growListenerTree","listener","slice","shift","warned","trace","setMaxListeners","event","once","many","ttl","Error","off","_origin","on","emit","_all","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","listenersAny","EventEmitter2","element","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","expand","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","el","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","eventName","subscribe","listenersCount","Vector3","Trend_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","AXIS_RANGE_TYPE","ALL","from","to","padding","start","margin","dataType","AXIS_DATA_TYPE","NUMBER","grid","minSizePx","marks","color","yAxis","RELATIVE_END","animations","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","scrollSpeed","scrollEase","Linear","easeNone","autoScrollSpeed","autoScrollEase","trendDefaultState","TREND_TYPE","LINE","maxSegmentLength","lineWidth","lineColor","hasBackground","hasBeacon","settingsForTypes","CANDLE","minSegmentLengthInPx","maxSegmentLengthInPx","eventEmitterMaxListeners","maxVisibleSegments","isReady","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","xAxisMarks","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","initListeners","onChange","onTrendChange","onZoom","newState","eventData","silent","stateData","newStateObj","changedProps","trendsData","trendOptions","newStateContainsData","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","zeroVal","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","maxLength","rangeLessThenMinValue","minLength","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","abs","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","currentRange","nextRange","newScroll","resolve","animationTime","zoomToRange","scrollToEnd","endXVal","getPointOnXAxis","xVal","getPointOnYAxis","yVal","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","TrendSegmentsManager_1","EVENTS","PREPEND_REQUEST","Trend","minYVal","maxYVal","dataset","prepareData","segmentsManager","TrendSegmentsManager","checkForPrependRequest","changedOptions","getCalculatedOptions","appendData","rawData","getData","updatedTrendData","changeData","prependData","allData","newData_1","item","statePatch","fromX","toX","filteredData","data_1","getFirstItem","getLastItem","setOptions","onPrependRequest","onDataChange","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","reject","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","trend","segmentsById","segments","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getSegment","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","segmentLength","currentSegmentLengthInPx","Number","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","firstDisplayedSegmentInd","lastDisplayedSegmentInd","displayedRangeChanged","getSegmentsForXValues","values","valueInd","value","lastValueInd","results","segment","hasValue","startXVal","getNext","valueInPoint","onAnimationFrame","onRebuild","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","unshift","needRebuildSegments","trendData","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","complete","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","getPrev","prevPoint","getFrameVal","getFramePoint","frameVal","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getEnabledTrends","enabledTrends","allTrends","firstTrendData","getExtremumYVal","extremumIsMax","compareFn","trends_1","trendYValues","dataItem","NaN","onSegmentsRebuilded","_loop_1","this_1","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","transform","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","__extends","__","create","AXIS_MARK_DEFAULT_OPTIONS","showValue","stickToEdges","title","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","getItem","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","_super","unbindList","chart","unbindEvent","widgetName","Mesh","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","traverse","beginPath","strokeStyle","material","MeshBasicMaterial","side","FrontSide","transparent","axisMesh","PlaneGeometry","axisOptions","axisGridParams","getGridParamsForAxis","geometry","parameters","image","clearRect","edgeOffset","segmentsCount","step","pxVal","textAlign","DATE","getDateStr","stroke","closePath","gridParams","sec","hour","day","tf","getHours","getMinutes","getSeconds","LineSegments","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","Geometry","LineBasicMaterial","linewidth","opacity","xLinesCount","yLinesCount","vertices","lineSegments","setZ","frustumCulled","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","scale","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","TrendsWidget_1","Color_1","getTrendWidgetClass","TrendGradient","TrendsWidget","visibleSegmentsCnt","segmentsIds","Uint16Array","initGradient","updateSegments","widgetIsEnabled","gradient","faces","Face3","ChartColor","scaleXFactor","scaleYFactor","currentScale","onSegmentsAnimate","trendSegmentsManager","includes","setupSegmentVertices","segmentInd","prevVisibleSegmentsCnt","segmentsToProcessCnt","segmentState","gradientSegmentInd","topLeft","bottomLeft","bottomRight","topRight","screenHeightVal","startX","toLocalX","startY","toLocalY","endX","endY","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","WidgetConstructor","widgetObject","getObjectByName","unbind","parseColor","cache","replace","exec","isNaN","colorStr","rgba","hexStr","rgbaStr","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","segmentIsNotDisplayed","destroySegment","setupSegment","pop","lineStartVertex","lineEndVertex","toLocalVec","vec","Line","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","initObject","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight"],"mappings":"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","file":"ThreeChart.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(1));\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(2));\r\n\t__export(__webpack_require__(19));\r\n\t__export(__webpack_require__(18));\r\n\t__export(__webpack_require__(17));\r\n\t__export(__webpack_require__(13));\r\n\t__export(__webpack_require__(14));\r\n\t__export(__webpack_require__(15));\r\n\t__export(__webpack_require__(16));\r\n\t__export(__webpack_require__(4));\r\n\t__export(__webpack_require__(20));\r\n\t__export(__webpack_require__(3));\r\n\t__export(__webpack_require__(25));\r\n\t__export(__webpack_require__(24));\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t// deps must be always on top\r\n\tvar Plugin_1 = __webpack_require__(3);\r\n\t__webpack_require__(5);\r\n\tvar PerspectiveCamera = THREE.PerspectiveCamera;\r\n\tvar Chart_1 = __webpack_require__(13);\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar AxisWidget_1 = __webpack_require__(21);\r\n\tvar GridWidget_1 = __webpack_require__(22);\r\n\tvar TrendsGradientWidget_1 = __webpack_require__(23);\r\n\tvar TrendsLineWidget_1 = __webpack_require__(26);\r\n\tvar TrendsCandleWidget_1 = __webpack_require__(27);\r\n\tvar deps_1 = __webpack_require__(28);\r\n\tvar ChartView = (function () {\r\n\t    function ChartView(state, $container, pluginsAndWidgets) {\r\n\t        var _this = this;\r\n\t        if (pluginsAndWidgets === void 0) { pluginsAndWidgets = []; }\r\n\t        this.widgets = [];\r\n\t        if (!THREE || !THREE.REVISION)\r\n\t            Utils_1.Utils.error('three.js not found');\r\n\t        if (!$container) {\r\n\t            Utils_1.Utils.error('$el must be set');\r\n\t        }\r\n\t        // calculate chart size\r\n\t        var style = getComputedStyle($container);\r\n\t        state.width = parseInt(style.width);\r\n\t        state.height = parseInt(style.height);\r\n\t        var plugins = pluginsAndWidgets.filter(function (pluginOrWidget) { return pluginOrWidget instanceof Plugin_1.ChartPlugin; });\r\n\t        this.state = new Chart_1.Chart(state, plugins);\r\n\t        this.pluginsAndWidgets = pluginsAndWidgets;\r\n\t        this.zoomThrottled = Utils_1.Utils.throttle(function (zoomValue, origin) { return _this.zoom(zoomValue, origin); }, 200);\r\n\t        this.$container = $container;\r\n\t        this.init($container);\r\n\t    }\r\n\t    ;\r\n\t    ChartView.prototype.init = function ($container) {\r\n\t        var state = this.state;\r\n\t        var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\r\n\t        this.scene = new THREE.Scene();\r\n\t        this.isStopped = !autoRender.enabled;\r\n\t        var renderer = this.renderer = new ChartView.renderers[this.state.data.renderer]({\r\n\t            antialias: true,\r\n\t            alpha: true\r\n\t        });\r\n\t        renderer.setSize(w, h);\r\n\t        renderer.setPixelRatio(ChartView.devicePixelRatio);\r\n\t        renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\r\n\t        $container.appendChild(renderer.domElement);\r\n\t        this.$el = renderer.domElement;\r\n\t        this.$el.style.display = 'block';\r\n\t        if (showStats) {\r\n\t            this.stats = new Stats();\r\n\t            $container.appendChild(this.stats.domElement);\r\n\t        }\r\n\t        this.setupCamera();\r\n\t        this.initWidgets();\r\n\t        this.bindEvents();\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\r\n\t     */\r\n\t    ChartView.prototype.initWidgets = function () {\r\n\t        var _this = this;\r\n\t        var preinstalledWidgetsClasses = this.constructor.preinstalledWidgets;\r\n\t        var customWidgets = [];\r\n\t        this.pluginsAndWidgets.forEach(function (pluginOrWidget) {\r\n\t            if (pluginOrWidget instanceof Widget_1.ChartWidget) {\r\n\t                customWidgets.push(pluginOrWidget);\r\n\t                return;\r\n\t            }\r\n\t            if (!(pluginOrWidget instanceof Plugin_1.ChartPlugin))\r\n\t                return;\r\n\t            var pluginWidgetClasses = pluginOrWidget.constructor.providedWidgets;\r\n\t            preinstalledWidgetsClasses.push.apply(preinstalledWidgetsClasses, pluginWidgetClasses);\r\n\t        });\r\n\t        this.widgets = customWidgets.concat(preinstalledWidgetsClasses.map(function (WidgetClass) { return new WidgetClass(); }));\r\n\t        this.widgets.forEach(function (widget) {\r\n\t            widget.setupChartState(_this.state);\r\n\t            widget.onReadyHandler();\r\n\t            _this.scene.add(widget.getObject3D());\r\n\t        });\r\n\t    };\r\n\t    ChartView.prototype.renderLoop = function () {\r\n\t        var _this = this;\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        this.stats && this.stats.begin();\r\n\t        this.render();\r\n\t        if (this.isStopped)\r\n\t            return;\r\n\t        var fpsLimit = this.state.data.autoRender.fps;\r\n\t        if (fpsLimit) {\r\n\t            var delay_1 = 1000 / fpsLimit;\r\n\t            setTimeout(function () { return requestAnimationFrame(function () { return _this.renderLoop(); }); }, delay_1);\r\n\t        }\r\n\t        else {\r\n\t            requestAnimationFrame(function () { return _this.renderLoop(); });\r\n\t        }\r\n\t        this.stats && this.stats.end();\r\n\t    };\r\n\t    ChartView.prototype.render = function () {\r\n\t        this.renderer.render(this.scene, this.camera);\r\n\t    };\r\n\t    ChartView.prototype.stop = function () {\r\n\t        this.isStopped = true;\r\n\t    };\r\n\t    ChartView.prototype.run = function () {\r\n\t        this.isStopped = false;\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * call to destroy chart an init garbage collection\r\n\t     */\r\n\t    ChartView.prototype.destroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.stop();\r\n\t        this.state.destroy();\r\n\t        this.unbindEvents();\r\n\t        // WARNING! undocumented method for free webgl context\r\n\t        try {\r\n\t            this.renderer.forceContextLoss();\r\n\t        }\r\n\t        catch (wtf) {\r\n\t        }\r\n\t        this.renderer.context = null;\r\n\t        this.renderer.domElement = null;\r\n\t        this.renderer = null;\r\n\t    };\r\n\t    ChartView.prototype.getState = function () {\r\n\t        return this.state.data;\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.getTrend\r\n\t     */\r\n\t    ChartView.prototype.getTrend = function (trendName) {\r\n\t        return this.state.getTrend(trendName);\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.setState\r\n\t     */\r\n\t    ChartView.prototype.setState = function (state) {\r\n\t        return this.state.setState(state);\r\n\t    };\r\n\t    ChartView.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var $el = this.$el;\r\n\t        if (this.state.data.controls.enabled) {\r\n\t            $el.addEventListener('mousewheel', function (ev) {\r\n\t                _this.onMouseWheel(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousemove', function (ev) {\r\n\t                _this.onMouseMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousedown', function (ev) { return _this.onMouseDown(ev); });\r\n\t            $el.addEventListener('mouseup', function (ev) { return _this.onMouseUp(ev); });\r\n\t            $el.addEventListener('touchmove', function (ev) {\r\n\t                _this.onTouchMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('touchend', function (ev) {\r\n\t                _this.onTouchEnd(ev);\r\n\t            });\r\n\t        }\r\n\t        if (this.state.data.autoResize) {\r\n\t            this.resizeSensor = new deps_1.ResizeSensor(this.$container, function () {\r\n\t                _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\r\n\t            });\r\n\t        }\r\n\t        this.unsubscribers = [\r\n\t            this.state.onTrendsChange(function () { return _this.autoscroll(); }),\r\n\t            this.state.screen.onTransformationFrame(function (options) { return _this.onScreenTransformHandler(options); }),\r\n\t            this.state.onResize(function (options) { return _this.onChartResize(); })\r\n\t        ];\r\n\t    };\r\n\t    ChartView.prototype.unbindEvents = function () {\r\n\t        // TODO: unbind events correctly\r\n\t        try {\r\n\t            this.resizeSensor && this.resizeSensor.detach();\r\n\t        }\r\n\t        catch (e) {\r\n\t        }\r\n\t        this.$el.remove();\r\n\t        this.unsubscribers.forEach(function (unsubscribe) { return unsubscribe(); });\r\n\t    };\r\n\t    ChartView.prototype.setupCamera = function () {\r\n\t        var camSettings = this.state.screen.getCameraSettings();\r\n\t        if (!this.camera) {\r\n\t            this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\r\n\t            this.scene.add(this.camera);\r\n\t        }\r\n\t        else {\r\n\t            this.camera.fov = camSettings.FOV;\r\n\t            this.camera.aspect = camSettings.aspect;\r\n\t            this.camera.far = camSettings.far;\r\n\t            this.camera.near = camSettings.near;\r\n\t            this.camera.updateProjectionMatrix();\r\n\t        }\r\n\t        this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\r\n\t        this.cameraInitialPosition = this.camera.position.clone();\r\n\t        this.onScreenTransformHandler(this.state.screen.options);\r\n\t    };\r\n\t    ChartView.prototype.onScreenTransformHandler = function (options) {\r\n\t        if (options.scrollX != void 0) {\r\n\t            var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\r\n\t            // scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setX(scrollX_1);\r\n\t        }\r\n\t        if (options.scrollY != void 0) {\r\n\t            var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\r\n\t            // scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setY(scrollY_1);\r\n\t        }\r\n\t    };\r\n\t    ChartView.prototype.autoscroll = function () {\r\n\t        var state = this.state;\r\n\t        if (!state.data.autoScroll)\r\n\t            return;\r\n\t        var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\r\n\t        var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\r\n\t        if (trendsMaxXDelta > 0) {\r\n\t            var maxVisibleX = this.state.screen.getScreenRightVal();\r\n\t            var paddingRightX = this.state.getPaddingRight();\r\n\t            var currentScroll = state.data.xAxis.range.scroll;\r\n\t            if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\r\n\t                return;\r\n\t            }\r\n\t            var scrollDelta = trendsMaxXDelta;\r\n\t            this.setState({ xAxis: { range: { scroll: currentScroll + scrollDelta } } });\r\n\t        }\r\n\t    };\r\n\t    ChartView.prototype.onScrollStop = function () {\r\n\t        // var tendsXMax = this.state.data.computedData.trends.maxX;\r\n\t        // var paddingRightX = this.state.getPaddingRight();\r\n\t        // if (tendsXMax < paddingRightX) {\r\n\t        // \tthis.state.scrollToEnd();\r\n\t        // }\r\n\t    };\r\n\t    ChartView.prototype.onMouseDown = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t    };\r\n\t    ChartView.prototype.onMouseUp = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartView.prototype.onMouseMove = function (ev) {\r\n\t        if (this.state.data.cursor.dragMode) {\r\n\t            this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t        }\r\n\t    };\r\n\t    ChartView.prototype.onMouseWheel = function (ev) {\r\n\t        ev.stopPropagation();\r\n\t        ev.preventDefault();\r\n\t        var zoomOrigin = ev.layerX / this.state.data.width;\r\n\t        var zoomValue = 1 + ev.wheelDeltaY * 0.001;\r\n\t        this.zoom(zoomValue, zoomOrigin);\r\n\t    };\r\n\t    ChartView.prototype.onTouchMove = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY } });\r\n\t    };\r\n\t    ChartView.prototype.onTouchEnd = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartView.prototype.onChartContainerResizeHandler = function (width, height) {\r\n\t        this.setState({ width: width, height: height });\r\n\t    };\r\n\t    ChartView.prototype.onChartResize = function () {\r\n\t        var _a = this.state.data, width = _a.width, height = _a.height;\r\n\t        this.renderer.setSize(width, height);\r\n\t        this.setupCamera();\r\n\t    };\r\n\t    ChartView.prototype.zoom = function (zoomValue, zoomOrigin) {\r\n\t        var _this = this;\r\n\t        var MAX_ZOOM_VALUE = 1.5;\r\n\t        var MIN_ZOOM_VALUE = 0.7;\r\n\t        zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\r\n\t        zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\r\n\t        var autoScrollIsEnabled = this.state.data.autoScroll;\r\n\t        if (autoScrollIsEnabled)\r\n\t            this.state.setState({ autoScroll: false });\r\n\t        this.state.zoom(zoomValue, zoomOrigin).then(function () {\r\n\t            if (autoScrollIsEnabled)\r\n\t                _this.setState({ autoScroll: true });\r\n\t        });\r\n\t    };\r\n\t    ChartView.devicePixelRatio = window.devicePixelRatio;\r\n\t    ChartView.preinstalledWidgets = [];\r\n\t    ChartView.renderers = {\r\n\t        CanvasRenderer: THREE.CanvasRenderer,\r\n\t        WebGLRenderer: THREE.WebGLRenderer\r\n\t    };\r\n\t    return ChartView;\r\n\t}());\r\n\texports.ChartView = ChartView;\r\n\t// install built-in widgets\r\n\tChartView.preinstalledWidgets = [\r\n\t    TrendsLineWidget_1.TrendsLineWidget,\r\n\t    TrendsCandleWidget_1.TrendsCandlesWidget,\r\n\t    AxisWidget_1.AxisWidget,\r\n\t    GridWidget_1.GridWidget,\r\n\t    TrendsGradientWidget_1.TrendsGradientWidget\r\n\t];\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\texports.DEFAULT_CONFIG = {\r\n\t    installPluginWidgets: true\r\n\t};\r\n\t/**\r\n\t * base class for all plugins\r\n\t * NAME is mandatory\r\n\t */\r\n\tvar ChartPlugin = (function () {\r\n\t    function ChartPlugin(options, config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        this.unsubscribers = [];\r\n\t        this.initialState = options;\r\n\t        this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\r\n\t        this.name = this.constructor.NAME;\r\n\t        if (!this.name)\r\n\t            Utils_1.Utils.error('Unnamed plugin detected');\r\n\t    }\r\n\t    ChartPlugin.prototype.setupChartState = function (chartState) {\r\n\t        var _this = this;\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvent(this.chartState.onInitialStateApplied(function (initialState) { return _this.onInitialStateAppliedHandler(initialState); }), this.chartState.onReady(function () { return _this.onReadyHandler(); }), this.chartState.onDestroy(function () { return _this.onDestroyHandler(); }), this.chartState.onPluginsStateChange(function (changedPluginsStates) { return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]); }));\r\n\t    };\r\n\t    ChartPlugin.prototype.getOptions = function () {\r\n\t        return this.chartState.data.pluginsState[this.name];\r\n\t    };\r\n\t    ChartPlugin.prototype.onInitialStateAppliedHandler = function (initialState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onReadyHandler = function () {\r\n\t    };\r\n\t    ChartPlugin.prototype.onStateChanged = function (changedState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t    };\r\n\t    ChartPlugin.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unsubscribers = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unsubscribers.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unsubscribers.push.apply(unsubscribers, (args));\r\n\t        }\r\n\t        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartPlugin.prototype.unbindEvents = function () {\r\n\t        this.unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); });\r\n\t        this.unsubscribers.length = 0;\r\n\t    };\r\n\t    ChartPlugin.NAME = '';\r\n\t    ChartPlugin.providedWidgets = [];\r\n\t    return ChartPlugin;\r\n\t}());\r\n\texports.ChartPlugin = ChartPlugin;\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tfunction deepmerge(target, src, mergeArrays) {\r\n\t    if (mergeArrays === void 0) { mergeArrays = true; }\r\n\t    var array = Array.isArray(src);\r\n\t    var dst = array && [] || {};\r\n\t    if (array) {\r\n\t        target = target || [];\r\n\t        if (mergeArrays) {\r\n\t            dst = dst.concat(target);\r\n\t        }\r\n\t        src.forEach(function (e, i) {\r\n\t            if (typeof dst[i] === 'undefined') {\r\n\t                dst[i] = e;\r\n\t            }\r\n\t            else if (typeof e === 'object') {\r\n\t                dst[i] = deepmerge(target[i], e, mergeArrays);\r\n\t            }\r\n\t            else {\r\n\t                if (target.indexOf(e) === -1) {\r\n\t                    dst.push(e);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    else {\r\n\t        if (target && typeof target === 'object') {\r\n\t            Object.keys(target).forEach(function (key) {\r\n\t                dst[key] = target[key];\r\n\t            });\r\n\t        }\r\n\t        Object.keys(src).forEach(function (key) {\r\n\t            if (typeof src[key] !== 'object' || !src[key]) {\r\n\t                dst[key] = src[key];\r\n\t            }\r\n\t            else {\r\n\t                if (!target[key]) {\r\n\t                    dst[key] = src[key];\r\n\t                }\r\n\t                else {\r\n\t                    dst[key] = deepmerge(target[key], src[key], mergeArrays);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    return dst;\r\n\t}\r\n\t/**\r\n\t * project utils static class\r\n\t */\r\n\tvar Utils = (function () {\r\n\t    function Utils() {\r\n\t    }\r\n\t    /**\r\n\t     * deepMerge based on https://www.npmjs.com/package/deepmerge\r\n\t     */\r\n\t    Utils.deepMerge = function (obj1, obj2, mergeArrays) {\r\n\t        return deepmerge(obj1, obj2, mergeArrays);\r\n\t    };\r\n\t    /**\r\n\t     * deepCopy based on JSON.stringify function\r\n\t     * @deprecated\r\n\t     */\r\n\t    Utils.deepCopy = function (obj) {\r\n\t        // TODO: use deepMerge function to copy\r\n\t        return JSON.parse(JSON.stringify(obj));\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * @example\r\n\t     * // returns \"000015\"\r\n\t     * Utils.toFixed(15, 6);\r\n\t     */\r\n\t    Utils.toFixed = function (num, digitsCount) {\r\n\t        var maxDigits = 15;\r\n\t        var result = '';\r\n\t        var intVal = Math.floor(num);\r\n\t        var intStr = intVal.toString();\r\n\t        var lengthDiff = digitsCount - intStr.length;\r\n\t        if (lengthDiff > 0) {\r\n\t            result = '0'.repeat(lengthDiff) + intStr;\r\n\t        }\r\n\t        else {\r\n\t            result = intStr;\r\n\t        }\r\n\t        var afterPointDigitsCount = maxDigits - intStr.length;\r\n\t        var afterPointStr = num.toString().split('.')[1];\r\n\t        if (afterPointStr) {\r\n\t            result += '.' + afterPointStr.substr(0, afterPointDigitsCount);\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    Utils.bindEvent = function () {\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createTexture = function (width, height, fn) {\r\n\t        var canvas = document.createElement('canvas');\r\n\t        canvas.width = width;\r\n\t        canvas.height = height;\r\n\t        var ctx = canvas.getContext('2d');\r\n\t        fn(ctx);\r\n\t        var texture = new THREE.Texture(canvas);\r\n\t        texture.needsUpdate = true;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context with NearestFilter\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createPixelPerfectTexture = function (width, height, fn) {\r\n\t        var texture = this.createTexture(width, height, fn);\r\n\t        // texture.magFilter = THREE.NearestFilter;\r\n\t        texture.minFilter = THREE.NearestFilter;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.error = function (msg) {\r\n\t        console.error('Chart error: ' + msg);\r\n\t        throw 'Chart: ' + msg;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.warn = function (msg) {\r\n\t        console.warn('Chart warning: ' + msg);\r\n\t    };\r\n\t    /**\r\n\t     * @returns new unique id\r\n\t     */\r\n\t    Utils.getUid = function () {\r\n\t        return this.currentId++;\r\n\t    };\r\n\t    /**\r\n\t     * @returns distance between numbers\r\n\t     */\r\n\t    Utils.getDistance = function (num1, num2) {\r\n\t        return Math.max(num1, num2) - Math.min(num1, num2);\r\n\t    };\r\n\t    Utils.binarySearchClosestInd = function (arr, num, key) {\r\n\t        var mid;\r\n\t        var lo = 0;\r\n\t        var hi = arr.length - 1;\r\n\t        while (hi - lo > 1) {\r\n\t            mid = Math.floor((lo + hi) / 2);\r\n\t            if (arr[mid][key] < num) {\r\n\t                lo = mid;\r\n\t            }\r\n\t            else {\r\n\t                hi = mid;\r\n\t            }\r\n\t        }\r\n\t        if (num - arr[lo][key] <= arr[hi][key] - num) {\r\n\t            return lo;\r\n\t        }\r\n\t        return hi;\r\n\t    };\r\n\t    Utils.binarySearchClosest = function (arr, num, key) {\r\n\t        var ind = this.binarySearchClosestInd(arr, num, key);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.rectsIntersect = function (r1, r2) {\r\n\t        var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\r\n\t        var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\r\n\t        var _a = [left1 + width1, left2 + width2, top1 + height1, top2 + height2], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\r\n\t        return !(left2 > right1 ||\r\n\t            right2 < left1 ||\r\n\t            top2 > bottom1 ||\r\n\t            bottom2 < top1);\r\n\t    };\r\n\t    Utils.throttle = function (func, ms) {\r\n\t        var isThrottled = false, savedArgs, savedThis;\r\n\t        function wrapper() {\r\n\t            if (isThrottled) {\r\n\t                savedArgs = arguments;\r\n\t                savedThis = this;\r\n\t                return;\r\n\t            }\r\n\t            func.apply(this, arguments); // (1)\r\n\t            isThrottled = true;\r\n\t            setTimeout(function () {\r\n\t                isThrottled = false; // (3)\r\n\t                if (savedArgs) {\r\n\t                    wrapper.apply(savedThis, savedArgs);\r\n\t                    savedArgs = savedThis = null;\r\n\t                }\r\n\t            }, ms);\r\n\t        }\r\n\t        return wrapper;\r\n\t    };\r\n\t    Utils.msToTimeString = function (timestamp) {\r\n\t        var h = Math.floor(timestamp / 360000);\r\n\t        var m = Math.floor(timestamp / 60000);\r\n\t        var s = Math.floor(timestamp / 1000);\r\n\t        return h + ':' + m + ':' + s;\r\n\t    };\r\n\t    Utils.getRandomItem = function (arr) {\r\n\t        var ind = Math.floor(Math.random() * arr.length);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.copyProps = function (srcObject, dstObject, props, excludeProps) {\r\n\t        if (excludeProps === void 0) { excludeProps = []; }\r\n\t        for (var key in props) {\r\n\t            if (excludeProps.indexOf(key) !== -1)\r\n\t                continue;\r\n\t            if (srcObject[key] == void 0)\r\n\t                continue;\r\n\t            if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\r\n\t                this.copyProps(srcObject[key], dstObject[key], props[key]);\r\n\t            }\r\n\t            else {\r\n\t                dstObject[key] = this.deepCopy(srcObject[key]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Utils.currentId = 1;\r\n\t    return Utils;\r\n\t}());\r\n\texports.Utils = Utils;\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"./ResizeSensor.ts\" />\r\n\t\"use strict\";\r\n\twindow.TweenLite = TweenMax;\r\n\twindow.Stats = __webpack_require__(6);\r\n\t// require('gsap/src/uncompressed/easing/EasePack.js');\r\n\t// require('three/examples/js/renderers/CanvasRenderer.js');\r\n\t// require('three/examples/js/renderers/Projector.js');\r\n\texports.isPlainObject = __webpack_require__(7);\r\n\texports.EE2 = __webpack_require__(9);\r\n\tvar es6_promise_1 = __webpack_require__(10);\r\n\texports.Promise = es6_promise_1.Promise;\r\n\texports.ResizeSensor = __webpack_require__(11);\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// stats.js - http://github.com/mrdoob/stats.js\n\tvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\n\tif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\n\tStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\n\tv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tvar isObject = __webpack_require__(8);\n\t\n\tfunction isObjectObject(o) {\n\t  return isObject(o) === true\n\t    && Object.prototype.toString.call(o) === '[object Object]';\n\t}\n\t\n\tmodule.exports = function isPlainObject(o) {\n\t  var ctor,prot;\n\t  \n\t  if (isObjectObject(o) === false) return false;\n\t  \n\t  // If has modified constructor\n\t  ctor = o.constructor;\n\t  if (typeof ctor !== 'function') return false;\n\t  \n\t  // If has modified prototype\n\t  prot = ctor.prototype;\n\t  if (isObjectObject(prot) === false) return false;\n\t  \n\t  // If constructor does not have an Object-specific method\n\t  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n\t    return false;\n\t  }\n\t  \n\t  // Most likely a plain Object\n\t  return true;\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tmodule.exports = function isObject(val) {\n\t  return val != null && typeof val === 'object'\n\t    && !Array.isArray(val);\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * EventEmitter2\n\t * https://github.com/hij1nx/EventEmitter2\n\t *\n\t * Copyright (c) 2013 hij1nx\n\t * Licensed under the MIT license.\n\t */\n\t;!function(undefined) {\n\t\n\t  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t    return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t  };\n\t  var defaultMaxListeners = 10;\n\t\n\t  function init() {\n\t    this._events = {};\n\t    if (this._conf) {\n\t      configure.call(this, this._conf);\n\t    }\n\t  }\n\t\n\t  function configure(conf) {\n\t    if (conf) {\n\t\n\t      this._conf = conf;\n\t\n\t      conf.delimiter && (this.delimiter = conf.delimiter);\n\t      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t      conf.wildcard && (this.wildcard = conf.wildcard);\n\t      conf.newListener && (this.newListener = conf.newListener);\n\t\n\t      if (this.wildcard) {\n\t        this.listenerTree = {};\n\t      }\n\t    }\n\t  }\n\t\n\t  function EventEmitter(conf) {\n\t    this._events = {};\n\t    this.newListener = false;\n\t    configure.call(this, conf);\n\t  }\n\t\n\t  //\n\t  // Attention, function return type now is array, always !\n\t  // It has zero elements if no any matches found and one or more\n\t  // elements (leafs) if there are matches\n\t  //\n\t  function searchListenerTree(handlers, type, tree, i) {\n\t    if (!tree) {\n\t      return [];\n\t    }\n\t    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n\t        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n\t    if (i === typeLength && tree._listeners) {\n\t      //\n\t      // If at the end of the event(s) list and the tree has listeners\n\t      // invoke those listeners.\n\t      //\n\t      if (typeof tree._listeners === 'function') {\n\t        handlers && handlers.push(tree._listeners);\n\t        return [tree];\n\t      } else {\n\t        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t          handlers && handlers.push(tree._listeners[leaf]);\n\t        }\n\t        return [tree];\n\t      }\n\t    }\n\t\n\t    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n\t      //\n\t      // If the event emitted is '*' at this part\n\t      // or there is a concrete match at this patch\n\t      //\n\t      if (currentType === '*') {\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n\t          }\n\t        }\n\t        return listeners;\n\t      } else if(currentType === '**') {\n\t        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n\t        if(endReached && tree._listeners) {\n\t          // The next element has a _listeners, add it to the handlers.\n\t          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t        }\n\t\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            if(branch === '*' || branch === '**') {\n\t              if(tree[branch]._listeners && !endReached) {\n\t                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t              }\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            } else if(branch === nextType) {\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n\t            } else {\n\t              // No match on this one, shift into the tree but not in the type array.\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            }\n\t          }\n\t        }\n\t        return listeners;\n\t      }\n\t\n\t      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n\t    }\n\t\n\t    xTree = tree['*'];\n\t    if (xTree) {\n\t      //\n\t      // If the listener tree will allow any match for this part,\n\t      // then recursively explore all branches of the tree\n\t      //\n\t      searchListenerTree(handlers, type, xTree, i+1);\n\t    }\n\t\n\t    xxTree = tree['**'];\n\t    if(xxTree) {\n\t      if(i < typeLength) {\n\t        if(xxTree._listeners) {\n\t          // If we have a listener on a '**', it will catch all, so add its handler.\n\t          searchListenerTree(handlers, type, xxTree, typeLength);\n\t        }\n\t\n\t        // Build arrays of matching next branches and others.\n\t        for(branch in xxTree) {\n\t          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n\t            if(branch === nextType) {\n\t              // We know the next element will match, so jump twice.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+2);\n\t            } else if(branch === currentType) {\n\t              // Current node matches, move into the tree.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+1);\n\t            } else {\n\t              isolatedBranch = {};\n\t              isolatedBranch[branch] = xxTree[branch];\n\t              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n\t            }\n\t          }\n\t        }\n\t      } else if(xxTree._listeners) {\n\t        // We have reached the end and still on a '**'\n\t        searchListenerTree(handlers, type, xxTree, typeLength);\n\t      } else if(xxTree['*'] && xxTree['*']._listeners) {\n\t        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n\t      }\n\t    }\n\t\n\t    return listeners;\n\t  }\n\t\n\t  function growListenerTree(type, listener) {\n\t\n\t    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t\n\t    //\n\t    // Looks for two consecutive '**', if so, don't add the event at all.\n\t    //\n\t    for(var i = 0, len = type.length; i+1 < len; i++) {\n\t      if(type[i] === '**' && type[i+1] === '**') {\n\t        return;\n\t      }\n\t    }\n\t\n\t    var tree = this.listenerTree;\n\t    var name = type.shift();\n\t\n\t    while (name) {\n\t\n\t      if (!tree[name]) {\n\t        tree[name] = {};\n\t      }\n\t\n\t      tree = tree[name];\n\t\n\t      if (type.length === 0) {\n\t\n\t        if (!tree._listeners) {\n\t          tree._listeners = listener;\n\t        }\n\t        else if(typeof tree._listeners === 'function') {\n\t          tree._listeners = [tree._listeners, listener];\n\t        }\n\t        else if (isArray(tree._listeners)) {\n\t\n\t          tree._listeners.push(listener);\n\t\n\t          if (!tree._listeners.warned) {\n\t\n\t            var m = defaultMaxListeners;\n\t\n\t            if (typeof this._events.maxListeners !== 'undefined') {\n\t              m = this._events.maxListeners;\n\t            }\n\t\n\t            if (m > 0 && tree._listeners.length > m) {\n\t\n\t              tree._listeners.warned = true;\n\t              console.error('(node) warning: possible EventEmitter memory ' +\n\t                            'leak detected. %d listeners added. ' +\n\t                            'Use emitter.setMaxListeners() to increase limit.',\n\t                            tree._listeners.length);\n\t              console.trace();\n\t            }\n\t          }\n\t        }\n\t        return true;\n\t      }\n\t      name = type.shift();\n\t    }\n\t    return true;\n\t  }\n\t\n\t  // By default EventEmitters will print a warning if more than\n\t  // 10 listeners are added to it. This is a useful default which\n\t  // helps finding memory leaks.\n\t  //\n\t  // Obviously not all Emitters should be limited to 10. This function allows\n\t  // that to be increased. Set to zero for unlimited.\n\t\n\t  EventEmitter.prototype.delimiter = '.';\n\t\n\t  EventEmitter.prototype.setMaxListeners = function(n) {\n\t    this._events || init.call(this);\n\t    this._events.maxListeners = n;\n\t    if (!this._conf) this._conf = {};\n\t    this._conf.maxListeners = n;\n\t  };\n\t\n\t  EventEmitter.prototype.event = '';\n\t\n\t  EventEmitter.prototype.once = function(event, fn) {\n\t    this.many(event, 1, fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.many = function(event, ttl, fn) {\n\t    var self = this;\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('many only accepts instances of Function');\n\t    }\n\t\n\t    function listener() {\n\t      if (--ttl === 0) {\n\t        self.off(event, listener);\n\t      }\n\t      fn.apply(this, arguments);\n\t    }\n\t\n\t    listener._origin = fn;\n\t\n\t    this.on(event, listener);\n\t\n\t    return self;\n\t  };\n\t\n\t  EventEmitter.prototype.emit = function() {\n\t\n\t    this._events || init.call(this);\n\t\n\t    var type = arguments[0];\n\t\n\t    if (type === 'newListener' && !this.newListener) {\n\t      if (!this._events.newListener) { return false; }\n\t    }\n\t\n\t    // Loop through the *_all* functions and invoke them.\n\t    if (this._all) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t      for (i = 0, l = this._all.length; i < l; i++) {\n\t        this.event = type;\n\t        this._all[i].apply(this, args);\n\t      }\n\t    }\n\t\n\t    // If there is no 'error' event listener then throw.\n\t    if (type === 'error') {\n\t\n\t      if (!this._all &&\n\t        !this._events.error &&\n\t        !(this.wildcard && this.listenerTree.error)) {\n\t\n\t        if (arguments[1] instanceof Error) {\n\t          throw arguments[1]; // Unhandled 'error' event\n\t        } else {\n\t          throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t        }\n\t        return false;\n\t      }\n\t    }\n\t\n\t    var handler;\n\t\n\t    if(this.wildcard) {\n\t      handler = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      handler = this._events[type];\n\t    }\n\t\n\t    if (typeof handler === 'function') {\n\t      this.event = type;\n\t      if (arguments.length === 1) {\n\t        handler.call(this);\n\t      }\n\t      else if (arguments.length > 1)\n\t        switch (arguments.length) {\n\t          case 2:\n\t            handler.call(this, arguments[1]);\n\t            break;\n\t          case 3:\n\t            handler.call(this, arguments[1], arguments[2]);\n\t            break;\n\t          // slower\n\t          default:\n\t            var l = arguments.length;\n\t            var args = new Array(l - 1);\n\t            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t            handler.apply(this, args);\n\t        }\n\t      return true;\n\t    }\n\t    else if (handler) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t\n\t      var listeners = handler.slice();\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        this.event = type;\n\t        listeners[i].apply(this, args);\n\t      }\n\t      return (listeners.length > 0) || !!this._all;\n\t    }\n\t    else {\n\t      return !!this._all;\n\t    }\n\t\n\t  };\n\t\n\t  EventEmitter.prototype.on = function(type, listener) {\n\t\n\t    if (typeof type === 'function') {\n\t      this.onAny(type);\n\t      return this;\n\t    }\n\t\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('on only accepts instances of Function');\n\t    }\n\t    this._events || init.call(this);\n\t\n\t    // To avoid recursion in the case that type == \"newListeners\"! Before\n\t    // adding it to the listeners, first emit \"newListeners\".\n\t    this.emit('newListener', type, listener);\n\t\n\t    if(this.wildcard) {\n\t      growListenerTree.call(this, type, listener);\n\t      return this;\n\t    }\n\t\n\t    if (!this._events[type]) {\n\t      // Optimize the case of one listener. Don't need the extra array object.\n\t      this._events[type] = listener;\n\t    }\n\t    else if(typeof this._events[type] === 'function') {\n\t      // Adding the second element, need to change to array.\n\t      this._events[type] = [this._events[type], listener];\n\t    }\n\t    else if (isArray(this._events[type])) {\n\t      // If we've already got an array, just append.\n\t      this._events[type].push(listener);\n\t\n\t      // Check for listener leak\n\t      if (!this._events[type].warned) {\n\t\n\t        var m = defaultMaxListeners;\n\t\n\t        if (typeof this._events.maxListeners !== 'undefined') {\n\t          m = this._events.maxListeners;\n\t        }\n\t\n\t        if (m > 0 && this._events[type].length > m) {\n\t\n\t          this._events[type].warned = true;\n\t          console.error('(node) warning: possible EventEmitter memory ' +\n\t                        'leak detected. %d listeners added. ' +\n\t                        'Use emitter.setMaxListeners() to increase limit.',\n\t                        this._events[type].length);\n\t          console.trace();\n\t        }\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.onAny = function(fn) {\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('onAny only accepts instances of Function');\n\t    }\n\t\n\t    if(!this._all) {\n\t      this._all = [];\n\t    }\n\t\n\t    // Add the function to the event listener collection.\n\t    this._all.push(fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  EventEmitter.prototype.off = function(type, listener) {\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('removeListener only takes instances of Function');\n\t    }\n\t\n\t    var handlers,leafs=[];\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      // does not use listeners(), so no side effect of creating _events[type]\n\t      if (!this._events[type]) return this;\n\t      handlers = this._events[type];\n\t      leafs.push({_listeners:handlers});\n\t    }\n\t\n\t    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t      var leaf = leafs[iLeaf];\n\t      handlers = leaf._listeners;\n\t      if (isArray(handlers)) {\n\t\n\t        var position = -1;\n\t\n\t        for (var i = 0, length = handlers.length; i < length; i++) {\n\t          if (handlers[i] === listener ||\n\t            (handlers[i].listener && handlers[i].listener === listener) ||\n\t            (handlers[i]._origin && handlers[i]._origin === listener)) {\n\t            position = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (position < 0) {\n\t          continue;\n\t        }\n\t\n\t        if(this.wildcard) {\n\t          leaf._listeners.splice(position, 1);\n\t        }\n\t        else {\n\t          this._events[type].splice(position, 1);\n\t        }\n\t\n\t        if (handlers.length === 0) {\n\t          if(this.wildcard) {\n\t            delete leaf._listeners;\n\t          }\n\t          else {\n\t            delete this._events[type];\n\t          }\n\t        }\n\t        return this;\n\t      }\n\t      else if (handlers === listener ||\n\t        (handlers.listener && handlers.listener === listener) ||\n\t        (handlers._origin && handlers._origin === listener)) {\n\t        if(this.wildcard) {\n\t          delete leaf._listeners;\n\t        }\n\t        else {\n\t          delete this._events[type];\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.offAny = function(fn) {\n\t    var i = 0, l = 0, fns;\n\t    if (fn && this._all && this._all.length > 0) {\n\t      fns = this._all;\n\t      for(i = 0, l = fns.length; i < l; i++) {\n\t        if(fn === fns[i]) {\n\t          fns.splice(i, 1);\n\t          return this;\n\t        }\n\t      }\n\t    } else {\n\t      this._all = [];\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t\n\t  EventEmitter.prototype.removeAllListeners = function(type) {\n\t    if (arguments.length === 0) {\n\t      !this._events || init.call(this);\n\t      return this;\n\t    }\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t\n\t      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t        var leaf = leafs[iLeaf];\n\t        leaf._listeners = null;\n\t      }\n\t    }\n\t    else {\n\t      if (!this._events[type]) return this;\n\t      this._events[type] = null;\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.listeners = function(type) {\n\t    if(this.wildcard) {\n\t      var handlers = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t      return handlers;\n\t    }\n\t\n\t    this._events || init.call(this);\n\t\n\t    if (!this._events[type]) this._events[type] = [];\n\t    if (!isArray(this._events[type])) {\n\t      this._events[type] = [this._events[type]];\n\t    }\n\t    return this._events[type];\n\t  };\n\t\n\t  EventEmitter.prototype.listenersAny = function() {\n\t\n\t    if(this._all) {\n\t      return this._all;\n\t    }\n\t    else {\n\t      return [];\n\t    }\n\t\n\t  };\n\t\n\t  if (true) {\n\t     // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return EventEmitter;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    // CommonJS\n\t    exports.EventEmitter2 = EventEmitter;\n\t  }\n\t  else {\n\t    // Browser global.\n\t    window.EventEmitter2 = EventEmitter;\n\t  }\n\t}();\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {Promise: window['Promise']}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n\t * directory of this distribution and at\n\t * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n\t */\n\t;\n\t(function() {\n\t\n\t    /**\n\t     * Class for dimension change detection.\n\t     *\n\t     * @param {Element|Element[]|Elements|jQuery} element\n\t     * @param {Function} callback\n\t     *\n\t     * @constructor\n\t     */\n\t    var ResizeSensor = function(element, callback) {\n\t        /**\n\t         *\n\t         * @constructor\n\t         */\n\t        function EventQueue() {\n\t            this.q = [];\n\t            this.add = function(ev) {\n\t                this.q.push(ev);\n\t            };\n\t\n\t            var i, j;\n\t            this.call = function() {\n\t                for (i = 0, j = this.q.length; i < j; i++) {\n\t                    this.q[i].call();\n\t                }\n\t            };\n\t        }\n\t\n\t        /**\n\t         * @param {HTMLElement} element\n\t         * @param {String}      prop\n\t         * @returns {String|Number}\n\t         */\n\t        function getComputedStyle(element, prop) {\n\t            if (element.currentStyle) {\n\t                return element.currentStyle[prop];\n\t            } else if (window.getComputedStyle) {\n\t                return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t            } else {\n\t                return element.style[prop];\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @param {Function}    resized\n\t         */\n\t        function attachResizeEvent(element, resized) {\n\t            if (!element.resizedAttached) {\n\t                element.resizedAttached = new EventQueue();\n\t                element.resizedAttached.add(resized);\n\t            } else if (element.resizedAttached) {\n\t                element.resizedAttached.add(resized);\n\t                return;\n\t            }\n\t\n\t            element.resizeSensor = document.createElement('div');\n\t            element.resizeSensor.className = 'resize-sensor';\n\t            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n\t            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\t\n\t            element.resizeSensor.style.cssText = style;\n\t            element.resizeSensor.innerHTML =\n\t                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + '\"></div>' +\n\t                '</div>' +\n\t                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n\t                '</div>';\n\t            element.appendChild(element.resizeSensor);\n\t\n\t            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n\t                element.style.position = 'relative';\n\t            }\n\t\n\t            var expand = element.resizeSensor.childNodes[0];\n\t            var expandChild = expand.childNodes[0];\n\t            var shrink = element.resizeSensor.childNodes[1];\n\t            var shrinkChild = shrink.childNodes[0];\n\t\n\t            var lastWidth, lastHeight;\n\t\n\t            var reset = function() {\n\t                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n\t                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n\t                expand.scrollLeft = expand.scrollWidth;\n\t                expand.scrollTop = expand.scrollHeight;\n\t                shrink.scrollLeft = shrink.scrollWidth;\n\t                shrink.scrollTop = shrink.scrollHeight;\n\t                lastWidth = element.offsetWidth;\n\t                lastHeight = element.offsetHeight;\n\t            };\n\t\n\t            reset();\n\t\n\t            var changed = function() {\n\t                if (element.resizedAttached) {\n\t                    element.resizedAttached.call();\n\t                }\n\t            };\n\t\n\t            var addEvent = function(el, name, cb) {\n\t                if (el.attachEvent) {\n\t                    el.attachEvent('on' + name, cb);\n\t                } else {\n\t                    el.addEventListener(name, cb);\n\t                }\n\t            };\n\t\n\t            var onScroll = function() {\n\t              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                  changed();\n\t              }\n\t              reset();\n\t            };\n\t\n\t            addEvent(expand, 'scroll', onScroll);\n\t            addEvent(shrink, 'scroll', onScroll);\n\t        }\n\t\n\t        var elementType = Object.prototype.toString.call(element);\n\t        var isCollectionTyped = ('[object Array]' === elementType\n\t            || ('[object NodeList]' === elementType)\n\t            || ('[object HTMLCollection]' === elementType)\n\t            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n\t            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n\t        );\n\t\n\t        if (isCollectionTyped) {\n\t            var i = 0, j = element.length;\n\t            for (; i < j; i++) {\n\t                attachResizeEvent(element[i], callback);\n\t            }\n\t        } else {\n\t            attachResizeEvent(element, callback);\n\t        }\n\t\n\t        this.detach = function() {\n\t            if (isCollectionTyped) {\n\t                var i = 0, j = element.length;\n\t                for (; i < j; i++) {\n\t                    ResizeSensor.detach(element[i]);\n\t                }\n\t            } else {\n\t                ResizeSensor.detach(element);\n\t            }\n\t        };\n\t    };\n\t\n\t    ResizeSensor.detach = function(element) {\n\t        if (element.resizeSensor) {\n\t            element.removeChild(element.resizeSensor);\n\t            delete element.resizeSensor;\n\t            delete element.resizedAttached;\n\t        }\n\t    };\n\t\n\t    // make available to common module loader\n\t    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t        module.exports = ResizeSensor;\n\t    }\n\t    else {\n\t        window.ResizeSensor = ResizeSensor;\n\t    }\n\t\n\t})();\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(5);\r\n\t/**\r\n\t * this class uses as proxy for EventEmitter2\r\n\t */\r\n\tvar EventEmitter = (function () {\r\n\t    function EventEmitter() {\r\n\t        this.ee = new deps_1.EE2();\r\n\t    }\r\n\t    EventEmitter.prototype.emit = function (eventName) {\r\n\t        var args = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            args[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        (_a = this.ee).emit.apply(_a, [eventName].concat(args));\r\n\t        var _a;\r\n\t    };\r\n\t    EventEmitter.prototype.on = function (eventName, callback) {\r\n\t        return this.ee.on(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.off = function (eventName, callback) {\r\n\t        return this.ee.off(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.subscribe = function (eventName, callback) {\r\n\t        var _this = this;\r\n\t        this.on(eventName, callback);\r\n\t        return function () { return _this.off(eventName, callback); };\r\n\t    };\r\n\t    EventEmitter.prototype.setMaxListeners = function (listenersCount) {\r\n\t        this.ee.setMaxListeners(listenersCount);\r\n\t    };\r\n\t    EventEmitter.prototype.removeAllListeners = function (eventName) {\r\n\t        this.ee.removeAllListeners(eventName);\r\n\t    };\r\n\t    return EventEmitter;\r\n\t}());\r\n\texports.EventEmitter = EventEmitter;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendsManager_1 = __webpack_require__(16);\r\n\tvar Screen_1 = __webpack_require__(17);\r\n\tvar AxisMarks_1 = __webpack_require__(18);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tvar CHART_STATE_EVENTS = {\r\n\t    INITIAL_STATE_APPLIED: 'initialStateApplied',\r\n\t    READY: 'ready',\r\n\t    DESTROY: 'destroy',\r\n\t    CHANGE: 'change',\r\n\t    TREND_CHANGE: 'trendChange',\r\n\t    TRENDS_CHANGE: 'trendsChange',\r\n\t    ZOOM: 'zoom',\r\n\t    RESIZE: 'resize',\r\n\t    SCROLL: 'scroll',\r\n\t    SCROLL_STOP: 'scrollStop',\r\n\t    PLUGINS_STATE_CHANGED: 'pluginsStateChanged'\r\n\t};\r\n\t/**\r\n\t *  all state changes caused only by Chart.setState method\r\n\t */\r\n\tvar Chart = (function () {\r\n\t    function Chart(initialState, plugins) {\r\n\t        if (plugins === void 0) { plugins = []; }\r\n\t        this.data = {\r\n\t            prevState: {},\r\n\t            zoom: 0,\r\n\t            xAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.ALL,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    scroll: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 0, end: 5 },\r\n\t                    margin: { start: 0, end: 5 }\r\n\t                },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                grid: { enabled: true, minSizePx: 100 },\r\n\t                autoScroll: true,\r\n\t                marks: [],\r\n\t                color: '#5273bd'\r\n\t            },\r\n\t            yAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 5, end: 5 },\r\n\t                    margin: { start: 5, end: 5 },\r\n\t                },\r\n\t                grid: { enabled: true, minSizePx: 50 },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                marks: [],\r\n\t                color: '#5273bd'\r\n\t            },\r\n\t            animations: {\r\n\t                enabled: true,\r\n\t                trendChangeSpeed: 0.5,\r\n\t                trendChangeEase: void 0,\r\n\t                zoomSpeed: 0.25,\r\n\t                zoomEase: void 0,\r\n\t                scrollSpeed: 0.5,\r\n\t                scrollEase: Linear.easeNone,\r\n\t                autoScrollSpeed: 1,\r\n\t                autoScrollEase: Linear.easeNone,\r\n\t            },\r\n\t            autoRender: { enabled: true, fps: 0 },\r\n\t            autoResize: true,\r\n\t            renderer: 'WebGLRenderer',\r\n\t            autoScroll: true,\r\n\t            controls: { enabled: true },\r\n\t            trendDefaultState: {\r\n\t                enabled: true,\r\n\t                type: Trend_1.TREND_TYPE.LINE,\r\n\t                data: [],\r\n\t                maxSegmentLength: 1000,\r\n\t                lineWidth: 2,\r\n\t                lineColor: 0xFFFFFF,\r\n\t                hasBackground: false,\r\n\t                backgroundColor: 'rgba(#5273BD, 0.15)',\r\n\t                hasBeacon: false,\r\n\t                settingsForTypes: {\r\n\t                    CANDLE: {\r\n\t                        minSegmentLengthInPx: 20,\r\n\t                        maxSegmentLengthInPx: 40,\r\n\t                    },\r\n\t                    LINE: {\r\n\t                        minSegmentLengthInPx: 2,\r\n\t                        maxSegmentLengthInPx: 10,\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            cursor: {\r\n\t                dragMode: false,\r\n\t                x: 0,\r\n\t                y: 0\r\n\t            },\r\n\t            font: {\r\n\t                s: '11px Arial',\r\n\t                m: '12px Arial',\r\n\t                l: '13px Arial'\r\n\t            },\r\n\t            backgroundColor: 0x000000,\r\n\t            backgroundOpacity: 1,\r\n\t            showStats: false,\r\n\t            pluginsState: {},\r\n\t            eventEmitterMaxListeners: 20,\r\n\t            maxVisibleSegments: 1280\r\n\t        };\r\n\t        this.plugins = {};\r\n\t        /**\r\n\t         * true then chart was initialized and ready to use\r\n\t         */\r\n\t        this.isReady = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\r\n\t        this.data = Utils_1.Utils.deepMerge(this.data, initialState);\r\n\t        this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\r\n\t        initialState.trends = this.trendsManager.calculatedOptions;\r\n\t        initialState = this.installPlugins(plugins, initialState);\r\n\t        this.setState(initialState);\r\n\t        this.setState({ computedData: this.getComputedData() });\r\n\t        this.savePrevState();\r\n\t        this.screen = new Screen_1.Screen(this);\r\n\t        this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\r\n\t        this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\r\n\t        this.initListeners();\r\n\t        // message to other modules that Chart.data is ready for use\r\n\t        this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\r\n\t        // message to other modules that Chart is ready for use\r\n\t        this.isReady = true;\r\n\t        this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\r\n\t    }\r\n\t    /**\r\n\t     * destroy state, use ChartView.destroy to completely destroy chart\r\n\t     */\r\n\t    Chart.prototype.destroy = function () {\r\n\t        this.ee.emit(CHART_STATE_EVENTS.DESTROY);\r\n\t        this.ee.removeAllListeners();\r\n\t        this.data = {};\r\n\t    };\r\n\t    Chart.prototype.onDestroy = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\r\n\t    };\r\n\t    Chart.prototype.onInitialStateApplied = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\r\n\t    };\r\n\t    Chart.prototype.onReady = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\r\n\t    };\r\n\t    Chart.prototype.onChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendsChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onScrollStop = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\r\n\t    };\r\n\t    Chart.prototype.onScroll = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\r\n\t    };\r\n\t    Chart.prototype.onZoom = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\r\n\t    };\r\n\t    Chart.prototype.onResize = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\r\n\t    };\r\n\t    Chart.prototype.onPluginsStateChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\r\n\t    };\r\n\t    Chart.prototype.getTrend = function (trendName) {\r\n\t        return this.trendsManager.getTrend(trendName);\r\n\t    };\r\n\t    Chart.prototype.setState = function (newState, eventData, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var stateData = this.data;\r\n\t        var newStateObj = newState;\r\n\t        var changedProps = {};\r\n\t        for (var key in newStateObj) {\r\n\t            if (stateData[key] !== newStateObj[key]) {\r\n\t                changedProps[key] = newStateObj[key];\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(changedProps);\r\n\t        // temporary remove trends data from newState by performance reasons\r\n\t        var trendsData = {};\r\n\t        if (newState.trends)\r\n\t            for (var trendName in newState.trends) {\r\n\t                var trendOptions = newState.trends[trendName];\r\n\t                if (trendOptions.data)\r\n\t                    trendsData[trendName] = trendOptions.data;\r\n\t                delete trendOptions.data;\r\n\t            }\r\n\t        var newStateContainsData = Object.keys(trendsData).length > 0;\r\n\t        this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\r\n\t        // return data to state\r\n\t        if (newStateContainsData)\r\n\t            for (var trendName in trendsData) {\r\n\t                this.data.trends[trendName].data = trendsData[trendName];\r\n\t            }\r\n\t        if (silent)\r\n\t            return;\r\n\t        // recalculate all dynamic state props\r\n\t        var recalculateResult = this.recalculateState(changedProps);\r\n\t        changedProps = recalculateResult.changedProps;\r\n\t        this.emitChangedStateEvents(changedProps, eventData);\r\n\t    };\r\n\t    /**\r\n\t     * recalculate all computed state props\r\n\t     */\r\n\t    Chart.prototype.recalculateState = function (changedProps) {\r\n\t        var data = this.data;\r\n\t        var patch = {};\r\n\t        var actualData = Utils_1.Utils.deepMerge({}, data);\r\n\t        // recalculate scroll position by changed cursor options\r\n\t        var cursorOptions = changedProps.cursor;\r\n\t        var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\r\n\t        if (isMouseDrag) {\r\n\t            var oldX = data.prevState.cursor.x;\r\n\t            var currentX = cursorOptions.x;\r\n\t            var currentScroll = data.xAxis.range.scroll;\r\n\t            var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\r\n\t            patch.xAxis = { range: { scroll: currentScroll + deltaXVal } };\r\n\t            actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: patch.xAxis });\r\n\t        }\r\n\t        var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\r\n\t        var scrollXChanged = false;\r\n\t        var needToRecalculateXAxis = (isMouseDrag ||\r\n\t            chartWasResized ||\r\n\t            (changedProps.xAxis && (changedProps.xAxis.range)) ||\r\n\t            this.data.xAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateXAxis) {\r\n\t            var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\r\n\t            if (xAxisPatch) {\r\n\t                scrollXChanged = true;\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { xAxis: xAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: xAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        // recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\r\n\t        var needToRecalculateYAxis = (chartWasResized ||\r\n\t            (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END ||\r\n\t                data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO ||\r\n\t                data.yAxis.range.isMirrorMode) &&\r\n\t                (scrollXChanged || changedProps.trends || changedProps.yAxis) ||\r\n\t            this.data.yAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateYAxis) {\r\n\t            var yAxisPatch = this.recalculateYAxis(actualData);\r\n\t            if (yAxisPatch) {\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { yAxis: yAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { yAxis: yAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(patch);\r\n\t        var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\r\n\t        patch.computedData = this.getComputedData(allChangedProps);\r\n\t        this.savePrevState(patch);\r\n\t        this.data = Utils_1.Utils.deepMerge(this.data, patch);\r\n\t        return { changedProps: allChangedProps, patch: patch };\r\n\t    };\r\n\t    Chart.prototype.getComputedData = function (changedProps) {\r\n\t        var computeAll = !changedProps;\r\n\t        var computedData = {};\r\n\t        if (computeAll || changedProps.trends && this.trendsManager) {\r\n\t            computedData.trends = {\r\n\t                maxXVal: this.trendsManager.getEndXVal(),\r\n\t                minXVal: this.trendsManager.getStartXVal()\r\n\t            };\r\n\t        }\r\n\t        return computedData;\r\n\t    };\r\n\t    Chart.prototype.savePrevState = function (changedProps) {\r\n\t        if (!changedProps)\r\n\t            changedProps = this.data;\r\n\t        var prevState = this.data.prevState;\r\n\t        // prevent to store prev trend data by performance reasons\r\n\t        Utils_1.Utils.copyProps(this.data, prevState, changedProps, ['trends']);\r\n\t    };\r\n\t    Chart.prototype.emitChangedStateEvents = function (changedProps, eventData) {\r\n\t        var prevState = this.data.prevState;\r\n\t        // emit common change event\r\n\t        this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\r\n\t        // emit event for each changed state property\r\n\t        for (var key in changedProps) {\r\n\t            this.ee.emit(key + 'Change', changedProps[key], eventData);\r\n\t        }\r\n\t        if (!this.isReady)\r\n\t            return;\r\n\t        // emit special events based on changed state\r\n\t        var scrollStopEventNeeded = (changedProps.cursor &&\r\n\t            changedProps.cursor.dragMode === false &&\r\n\t            prevState.cursor.dragMode === true);\r\n\t        scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\r\n\t        var scrollChangeEventsNeeded = (changedProps.xAxis &&\r\n\t            changedProps.xAxis.range &&\r\n\t            changedProps.xAxis.range.scroll !== void 0);\r\n\t        scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\r\n\t        var zoomEventsNeeded = ((changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\r\n\t            (changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom));\r\n\t        zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\r\n\t        var resizeEventNeeded = (changedProps.width || changedProps.height);\r\n\t        resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\r\n\t        var pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\r\n\t        pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\r\n\t    };\r\n\t    /**\r\n\t     * init plugins and save plugins options in initialState\r\n\t     */\r\n\t    Chart.prototype.installPlugins = function (plugins, initialState) {\r\n\t        var _this = this;\r\n\t        initialState.pluginsState = {};\r\n\t        plugins.forEach(function (plugin) {\r\n\t            var PluginClass = plugin.constructor;\r\n\t            var pluginName = PluginClass.NAME;\r\n\t            initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\r\n\t            _this.plugins[pluginName] = plugin;\r\n\t            plugin.setupChartState(_this);\r\n\t        });\r\n\t        return initialState;\r\n\t    };\r\n\t    /**\r\n\t     * returns plugin instance by plugin name\r\n\t     * @example\r\n\t     */\r\n\t    Chart.prototype.getPlugin = function (pluginName) {\r\n\t        return this.plugins[pluginName];\r\n\t    };\r\n\t    Chart.prototype.initListeners = function () {\r\n\t        var _this = this;\r\n\t        this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function (changedTrends, newData) {\r\n\t            _this.handleTrendsChange(changedTrends, newData);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.handleTrendsChange = function (changedTrends, newData) {\r\n\t        for (var trendName in changedTrends) {\r\n\t            this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\r\n\t        }\r\n\t    };\r\n\t    Chart.prototype.recalculateXAxis = function (actualData, changedProps) {\r\n\t        var axisRange = actualData.xAxis.range;\r\n\t        var patch = { range: {} };\r\n\t        var isInitialize = axisRange.zeroVal == void 0;\r\n\t        var zeroVal, scaleFactor;\r\n\t        var zoom = axisRange.zoom;\r\n\t        if (axisRange.isMirrorMode) {\r\n\t            Utils_1.Utils.error('range.isMirrorMode available only for yAxis.range');\r\n\t        }\r\n\t        if (isInitialize) {\r\n\t            zeroVal = axisRange.from;\r\n\t            scaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t        }\r\n\t        else {\r\n\t            zeroVal = axisRange.zeroVal;\r\n\t            scaleFactor = axisRange.scaleFactor;\r\n\t            // recalculate range.zoom and range.scroll then range.from or range.to was changed\r\n\t            if (changedProps.xAxis &&\r\n\t                (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\r\n\t                if (changedProps.xAxis.range.zoom) {\r\n\t                    Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\r\n\t                }\r\n\t                var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t                patch.range.scroll = axisRange.from - zeroVal;\r\n\t                patch.range.zoom = currentScaleFactor / scaleFactor;\r\n\t                return patch;\r\n\t            }\r\n\t        }\r\n\t        // recalculate range.from and range.to then range.zoom or range.scroll was changed\r\n\t        do {\r\n\t            var from = zeroVal + axisRange.scroll;\r\n\t            var to = from + actualData.width / (scaleFactor * zoom);\r\n\t            var rangeLength = to - from;\r\n\t            var needToRecalculateZoom = false;\r\n\t            var rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\r\n\t            var rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\r\n\t            needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\r\n\t            if (needToRecalculateZoom) {\r\n\t                var fixScale = rangeLength > axisRange.maxLength ?\r\n\t                    rangeLength / axisRange.maxLength :\r\n\t                    rangeLength / axisRange.minLength;\r\n\t                var zoom = zoom * fixScale;\r\n\t                patch.range.zoom = zoom;\r\n\t            }\r\n\t        } while (needToRecalculateZoom);\r\n\t        patch.range.from = from;\r\n\t        patch.range.to = to;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.recalculateYAxis = function (actualData) {\r\n\t        var patch = { range: {} };\r\n\t        var yAxisRange = actualData.yAxis.range;\r\n\t        var isInitialize = yAxisRange.scaleFactor == void 0;\r\n\t        var trends = this.trendsManager;\r\n\t        var trendsEndXVal = trends.getEndXVal();\r\n\t        var trendsStartXVal = trends.getStartXVal();\r\n\t        var xRange = actualData.xAxis.range;\r\n\t        var xFrom = xRange.from, xTo = xRange.to;\r\n\t        var xRangeLength = xTo - xFrom;\r\n\t        var zeroVal, scaleFactor, scroll, zoom, needToZoom;\r\n\t        // check situation when chart was scrolled behind trends end or before trends start\r\n\t        if (xTo > trendsEndXVal) {\r\n\t            xTo = trendsEndXVal;\r\n\t            xFrom = xTo - xRangeLength;\r\n\t        }\r\n\t        else if (xFrom < trendsStartXVal) {\r\n\t            xFrom = trendsStartXVal;\r\n\t            xTo = xFrom + xRangeLength;\r\n\t        }\r\n\t        var maxY = trends.getMaxYVal(xFrom, xTo);\r\n\t        var minY = trends.getMinYVal(xFrom, xTo);\r\n\t        var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\r\n\t        if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\r\n\t            if (trendLastY > maxY)\r\n\t                maxY = trendLastY;\r\n\t            if (trendLastY < minY)\r\n\t                minY = trendLastY;\r\n\t        }\r\n\t        if (yAxisRange.isMirrorMode) {\r\n\t            if (yAxisRange.zeroVal == void 0)\r\n\t                Utils_1.Utils.error('range.zeroVal must be set when range.isMirrorMode');\r\n\t            var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\r\n\t            var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\r\n\t            var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\r\n\t            maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\r\n\t            minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\r\n\t        }\r\n\t        var margin = yAxisRange.margin;\r\n\t        var padding = {\r\n\t            start: yAxisRange.padding.start + margin.start,\r\n\t            end: yAxisRange.padding.end + margin.end\r\n\t        };\r\n\t        if (padding.end + padding.start >= actualData.height) {\r\n\t            Utils_1.Utils.warn('Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly');\r\n\t        }\r\n\t        var rangeLength = maxY - minY;\r\n\t        var paddingTopInPercents = padding.end / actualData.height;\r\n\t        var paddingBottomInPercents = padding.start / actualData.height;\r\n\t        var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\r\n\t        var visibleRangeLength = rangeLength / rangeLengthInPercents;\r\n\t        var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\r\n\t        var toVal = maxY + visibleRangeLength * paddingTopInPercents;\r\n\t        if (isInitialize) {\r\n\t            zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\r\n\t            scaleFactor = actualData.height / (toVal - fromVal);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t            needToZoom = true;\r\n\t        }\r\n\t        else {\r\n\t            scaleFactor = yAxisRange.scaleFactor;\r\n\t            zeroVal = yAxisRange.zeroVal;\r\n\t            var maxScreenY = Math.round(this.getScreenYByValue(maxY));\r\n\t            var minScreenY = Math.round(this.getScreenYByValue(minY));\r\n\t            needToZoom = (maxScreenY > actualData.height - margin.end ||\r\n\t                maxScreenY < actualData.height - padding.end ||\r\n\t                minScreenY < margin.start ||\r\n\t                minScreenY > padding.start);\r\n\t        }\r\n\t        if (!needToZoom)\r\n\t            return null;\r\n\t        scroll = fromVal - zeroVal;\r\n\t        zoom = (actualData.height / (toVal - fromVal)) / scaleFactor;\r\n\t        var currentAxisRange = this.data.yAxis.range;\r\n\t        if (currentAxisRange.from !== fromVal)\r\n\t            patch.range.from = fromVal;\r\n\t        if (currentAxisRange.to !== toVal)\r\n\t            patch.range.to = toVal;\r\n\t        if (currentAxisRange.scroll !== scroll)\r\n\t            patch.range.scroll = scroll;\r\n\t        if (currentAxisRange.zoom !== zoom)\r\n\t            patch.range.zoom = zoom;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.zoom = function (zoomValue, origin) {\r\n\t        var _this = this;\r\n\t        if (origin === void 0) { origin = 0.5; }\r\n\t        var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\r\n\t        var newZoom = zoom * zoomValue;\r\n\t        var currentRange = this.data.width / (scaleFactor * zoom);\r\n\t        var nextRange = this.data.width / (scaleFactor * newZoom);\r\n\t        var newScroll = scroll + (currentRange - nextRange) * origin;\r\n\t        this.setState({ xAxis: { range: { zoom: newZoom, scroll: newScroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.zoomToRange = function (range, origin) {\r\n\t        var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\r\n\t        var currentRange = this.data.width / (scaleFactor * zoom);\r\n\t        return this.zoom(currentRange / range, origin);\r\n\t    };\r\n\t    Chart.prototype.scrollToEnd = function () {\r\n\t        var _this = this;\r\n\t        var state = this.data;\r\n\t        var endXVal = this.trendsManager.getEndXVal();\r\n\t        var range = state.xAxis.range;\r\n\t        var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\r\n\t        this.setState({ xAxis: { range: { scroll: scroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to xVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to yVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Chart.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns x value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenX = function (x) {\r\n\t        var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenY = function (y) {\r\n\t        var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen x value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenYByValue = function (yVal) {\r\n\t        var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByYAxis(yVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Chart.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    Chart.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    Chart.prototype.getScreenLeftVal = function () {\r\n\t        return this.getValueByScreenX(0);\r\n\t    };\r\n\t    Chart.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.data.width);\r\n\t    };\r\n\t    Chart.prototype.getPaddingRight = function () {\r\n\t        return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\r\n\t    };\r\n\t    return Chart;\r\n\t}());\r\n\texports.Chart = Chart;\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendSegmentsManager_1 = __webpack_require__(15);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tvar EVENTS = {\r\n\t    CHANGE: 'Change',\r\n\t    PREPEND_REQUEST: 'prependRequest'\r\n\t};\r\n\t(function (TREND_TYPE) {\r\n\t    TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\r\n\t    TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\r\n\t})(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\r\n\tvar TREND_TYPE = exports.TREND_TYPE;\r\n\tvar Trend = (function () {\r\n\t    function Trend(chartState, trendName, initialState) {\r\n\t        this.minXVal = Infinity;\r\n\t        this.minYVal = Infinity;\r\n\t        this.maxXVal = -Infinity;\r\n\t        this.maxYVal = -Infinity;\r\n\t        var options = initialState.trends[trendName];\r\n\t        this.name = trendName;\r\n\t        this.chartState = chartState;\r\n\t        this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.data.trendDefaultState, options);\r\n\t        this.calculatedOptions.name = trendName;\r\n\t        if (options.dataset)\r\n\t            this.calculatedOptions.data = Trend.prepareData(options.dataset);\r\n\t        this.calculatedOptions.dataset = [];\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    Trend.prototype.onInitialStateApplied = function () {\r\n\t        this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\r\n\t    };\r\n\t    Trend.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var chartState = this.chartState;\r\n\t        chartState.onInitialStateApplied(function () { return _this.onInitialStateApplied(); });\r\n\t        chartState.onScrollStop(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onZoom(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onTrendChange(function (trendName, changedOptions, newData) { return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData); });\r\n\t        chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    Trend.prototype.getCalculatedOptions = function () {\r\n\t        return this.calculatedOptions;\r\n\t    };\r\n\t    Trend.prototype.appendData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData());\r\n\t        var updatedTrendData = options.data.concat(newData);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.prependData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData(), true);\r\n\t        var updatedTrendData = newData.concat(options.data);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.changeData = function (allData, newData) {\r\n\t        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\r\n\t            var item = newData_1[_i];\r\n\t            if (item.xVal < this.minXVal)\r\n\t                this.minXVal = item.xVal;\r\n\t            if (item.xVal > this.maxXVal)\r\n\t                this.maxXVal = item.xVal;\r\n\t            if (item.yVal < this.minYVal)\r\n\t                this.minYVal = item.yVal;\r\n\t            if (item.yVal > this.maxYVal)\r\n\t                this.maxYVal = item.yVal;\r\n\t        }\r\n\t        var options = this.getOptions();\r\n\t        var statePatch = { trends: (_a = {}, _a[options.name] = { data: allData }, _a) };\r\n\t        this.chartState.setState(statePatch, newData);\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.getData = function (fromX, toX) {\r\n\t        var data = this.getOptions().data;\r\n\t        if (fromX == void 0 && toX == void 0)\r\n\t            return data;\r\n\t        fromX = fromX !== void 0 ? fromX : data[0].xVal;\r\n\t        toX = toX !== void 0 ? toX : data[data.length].xVal;\r\n\t        var filteredData = [];\r\n\t        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\r\n\t            var item = data_1[_i];\r\n\t            if (item.xVal < fromX)\r\n\t                continue;\r\n\t            if (item.xVal > toX)\r\n\t                break;\r\n\t            filteredData.push(item);\r\n\t        }\r\n\t        return filteredData;\r\n\t    };\r\n\t    Trend.prototype.getFirstItem = function () {\r\n\t        return this.getOptions().data[0];\r\n\t    };\r\n\t    Trend.prototype.getLastItem = function () {\r\n\t        var data = this.getOptions().data;\r\n\t        return data[data.length - 1];\r\n\t    };\r\n\t    Trend.prototype.getOptions = function () {\r\n\t        return this.chartState.data.trends[this.name];\r\n\t    };\r\n\t    Trend.prototype.setOptions = function (options) {\r\n\t        this.chartState.setState({ trends: (_a = {}, _a[this.name] = options, _a) });\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.onPrependRequest = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.PREPEND_REQUEST, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for Chart.onTrendChange\r\n\t     */\r\n\t    Trend.prototype.onChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.CHANGE, cb);\r\n\t        return function () { _this.ee.off(EVENTS.CHANGE, cb); };\r\n\t    };\r\n\t    Trend.prototype.onDataChange = function (cb) {\r\n\t        var _this = this;\r\n\t        var onChangeCb = function (changedOptions, newData) {\r\n\t            if (newData)\r\n\t                cb(newData);\r\n\t        };\r\n\t        this.ee.on(EVENTS.CHANGE, onChangeCb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.CHANGE, onChangeCb);\r\n\t        };\r\n\t    };\r\n\t    Trend.prototype.checkForPrependRequest = function () {\r\n\t        var _this = this;\r\n\t        if (this.prependRequest)\r\n\t            return;\r\n\t        var chartState = this.chartState;\r\n\t        var minXVal = chartState.data.computedData.trends.minXVal;\r\n\t        var minScreenX = chartState.getScreenXByValue(minXVal);\r\n\t        var needToRequest = minScreenX > 0;\r\n\t        var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var requestedDataLength = to - from;\r\n\t        if (!needToRequest)\r\n\t            return;\r\n\t        this.prependRequest = new deps_1.Promise(function (resolve, reject) {\r\n\t            _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\r\n\t        });\r\n\t        this.prependRequest.then(function (newData) {\r\n\t            _this.prependData(newData);\r\n\t            _this.prependRequest = null;\r\n\t        }, function () {\r\n\t            _this.prependRequest = null;\r\n\t        });\r\n\t    };\r\n\t    Trend.prepareData = function (newData, currentData, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var data = [];\r\n\t        if (typeof newData[0] == 'number') {\r\n\t            currentData = currentData || [];\r\n\t            var initialItem = void 0;\r\n\t            var xVal = void 0;\r\n\t            if (isPrepend) {\r\n\t                initialItem = currentData[0];\r\n\t                xVal = initialItem.xVal - newData.length;\r\n\t            }\r\n\t            else {\r\n\t                initialItem = currentData[currentData.length - 1];\r\n\t                xVal = initialItem ? initialItem.xVal + 1 : 0;\r\n\t            }\r\n\t            for (var _i = 0, _a = newData; _i < _a.length; _i++) {\r\n\t                var yVal = _a[_i];\r\n\t                data.push({ xVal: xVal, yVal: yVal, id: Utils_1.Utils.getUid() });\r\n\t                xVal++;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            data = newData;\r\n\t        }\r\n\t        return data;\r\n\t    };\r\n\t    return Trend;\r\n\t}());\r\n\texports.Trend = Trend;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar MAX_ANIMATED_SEGMENTS = 100;\r\n\tvar EVENTS = {\r\n\t    REBUILD: 'rebuild',\r\n\t    DISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\r\n\t    ANIMATION_FRAME: 'animationFrame'\r\n\t};\r\n\t/**\r\n\t *  Class helps to display and animate trends segments\r\n\t */\r\n\tvar TrendSegmentsManager = (function () {\r\n\t    function TrendSegmentsManager(chartState, trend) {\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.segmentsLength = 0;\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForPrepend = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.trend = trend;\r\n\t        this.maxSegmentLength = trend.getOptions().maxSegmentLength;\r\n\t        this.tryToRebuildSegments();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendSegmentsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.trend.onChange(function (changedOptions, newData) { return _this.onTrendChangeHandler(changedOptions, newData); });\r\n\t        this.chartState.onZoom(function () { return _this.onZoomHandler(); });\r\n\t        this.chartState.onScroll(function () { return _this.recalculateDisplayedRange(); });\r\n\t        this.chartState.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.appendAnimation && this.appendAnimation.kill();\r\n\t        this.prependAnimation && this.prependAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onZoomHandler = function () {\r\n\t        var segmentsRebuilded = this.tryToRebuildSegments();\r\n\t        if (!segmentsRebuilded) {\r\n\t            this.recalculateDisplayedRange();\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onTrendChangeHandler = function (changedOptions, newData) {\r\n\t        var needToRebuildSegments = (changedOptions.type != void 0 ||\r\n\t            changedOptions.maxSegmentLength != void 0);\r\n\t        if (needToRebuildSegments) {\r\n\t            this.tryToRebuildSegments(true);\r\n\t            return;\r\n\t        }\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var data = this.trend.getData();\r\n\t        var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t        isAppend ? this.appendData(newData) : this.prependData(newData);\r\n\t        this.recalculateDisplayedRange();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getSegment = function (id) {\r\n\t        return this.segmentsById[id];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getEndSegment = function () {\r\n\t        return this.segmentsById[this.endSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getStartSegment = function () {\r\n\t        return this.segmentsById[this.startSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.tryToRebuildSegments = function (force) {\r\n\t        if (force === void 0) { force = false; }\r\n\t        var options = this.trend.getOptions();\r\n\t        var trendTypeName = Trend_1.TREND_TYPE[options.type];\r\n\t        var trendTypesSettings = options.settingsForTypes;\r\n\t        var trendTypeSettings = trendTypesSettings[trendTypeName];\r\n\t        var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\r\n\t        var needToRebuild = this.segments.length === 0 || force;\r\n\t        var segmentLength = this.maxSegmentLength;\r\n\t        // call toFixed(2) to prevent floating segment error compare\r\n\t        var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\r\n\t        var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\r\n\t        if (currentSegmentLengthInPx < minSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\r\n\t        }\r\n\t        else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\r\n\t        }\r\n\t        if (!needToRebuild)\r\n\t            return false;\r\n\t        this.maxSegmentLength = segmentLength;\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.segmentsLength = 0;\r\n\t        this.stopAllAnimations();\r\n\t        this.appendData(null, true);\r\n\t        this.recalculateDisplayedRange(true);\r\n\t        this.ee.emit(EVENTS.REBUILD);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.stopAllAnimations = function () {\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        if (this.prependAnimation)\r\n\t            this.prependAnimation.kill();\r\n\t        if (this.appendAnimation)\r\n\t            this.appendAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.recalculateDisplayedRange = function (segmentsAreRebuilded) {\r\n\t        if (segmentsAreRebuilded === void 0) { segmentsAreRebuilded = false; }\r\n\t        var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\r\n\t        var displayedRange = to - from;\r\n\t        this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\r\n\t        this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\r\n\t        this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\r\n\t        this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\r\n\t        if (segmentsAreRebuilded)\r\n\t            return;\r\n\t        var displayedRangeChanged = (firstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\r\n\t            lastDisplayedSegment.id !== this.lastDisplayedSegment.id);\r\n\t        if (displayedRangeChanged)\r\n\t            this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\r\n\t    };\r\n\t    // getSegments(fromX?: number, toX?: number): TrendSegment[] {\r\n\t    // \tvar segments = this.segments;\r\n\t    // \tif (fromX == void 0 && toX == void 0) return segments;\r\n\t    // \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\r\n\t    // \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\r\n\t    // \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\r\n\t    // \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\r\n\t    // \treturn segments.slice(startSegmentInd, endSegmentInd);\r\n\t    // }\r\n\t    /**\r\n\t     * returns array of segments for values array\r\n\t     * values must be sorted!\r\n\t     */\r\n\t    TrendSegmentsManager.prototype.getSegmentsForXValues = function (values) {\r\n\t        var valueInd = 0;\r\n\t        var value = values[valueInd];\r\n\t        var lastValueInd = values.length - 1;\r\n\t        var results = [];\r\n\t        var segment = this.getStartSegment();\r\n\t        if (!segment.hasValue)\r\n\t            return [];\r\n\t        while (segment) {\r\n\t            while (value < segment.startXVal) {\r\n\t                results.push(void 0);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            while (value > segment.endXVal) {\r\n\t                segment = segment.getNext();\r\n\t                if (!segment)\r\n\t                    break;\r\n\t            }\r\n\t            var valueInPoint = (segment.startXVal == value || segment.endXVal == value ||\r\n\t                (segment.startXVal < value && segment.endXVal > value));\r\n\t            if (valueInPoint) {\r\n\t                results.push(segment);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            if (valueInd > lastValueInd)\r\n\t                break;\r\n\t        }\r\n\t        return results;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrame = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onRebuild = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.REBUILD, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDisplayedRangeChanged = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocateNextSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var prevSegment = this.segmentsById[this.endSegmentId];\r\n\t        if (prevSegment && prevSegment.hasValue) {\r\n\t            prevSegment.nextId = id;\r\n\t            segment.prevId = prevSegment.id;\r\n\t        }\r\n\t        this.endSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.push(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocatePrevSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var nextSegment = this.segmentsById[this.startSegmentId];\r\n\t        if (nextSegment && nextSegment.hasValue) {\r\n\t            nextSegment.prevId = id;\r\n\t            segment.nextId = nextSegment.id;\r\n\t        }\r\n\t        this.startSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.unshift(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.appendData = function (newData, needRebuildSegments) {\r\n\t        // WARNING: bottleneck method!\r\n\t        if (needRebuildSegments === void 0) { needRebuildSegments = false; }\r\n\t        // var t1 = performance.now();\r\n\t        var trendData = this.trend.getData();\r\n\t        if (needRebuildSegments) {\r\n\t            newData = trendData;\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t        }\r\n\t        var startItemInd = trendData.length - newData.length;\r\n\t        var segment = this.getEndSegment() || this.allocateNextSegment();\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        var itemInd = 0;\r\n\t        while (itemInd < newData.length) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.appendItem(item);\r\n\t            var isLastItem = itemInd == newData.length - 1;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd++;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForAppend.length > 0) {\r\n\t                    segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\r\n\t                    segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForAppend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocateNextSegment();\r\n\t            var prevItem = trendData[startItemInd + itemInd - 1];\r\n\t            segment.appendItem(prevItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.data.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        // var t2 = performance.now();\r\n\t        // console.log(t2 - t1);\r\n\t        // do not create animation if segments was rebuilded\r\n\t        if (needRebuildSegments) {\r\n\t            for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\r\n\t                var segmentId = _a[_i];\r\n\t                var segment_1 = this.segmentsById[segmentId];\r\n\t                segment_1.currentAnimationState = segment_1.createAnimationState();\r\n\t            }\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t            return;\r\n\t        }\r\n\t        if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time);\r\n\t    };\r\n\t    // TODO: refactor duplicated code from appendData\r\n\t    TrendSegmentsManager.prototype.prependData = function (newData) {\r\n\t        var trendData = this.trend.getData();\r\n\t        var segment = this.getStartSegment() || this.segmentsById[0];\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var itemInd = newData.length - 1;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        while (itemInd >= 0) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.prependItem(item);\r\n\t            var isLastItem = itemInd == 0;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd--;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForPrepend.length > 0) {\r\n\t                    segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\r\n\t                    segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForPrepend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocatePrevSegment();\r\n\t            var nextItem = trendData[itemInd + 1];\r\n\t            segment.prependItem(nextItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.data.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time, true);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.animate = function (time, isPrepend) {\r\n\t        var _this = this;\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\r\n\t        if ((animation && animation.isActive()) || time == 0) {\r\n\t            if (animation)\r\n\t                animation.kill();\r\n\t            this.onAnimationFrameHandler(1, isPrepend);\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            return;\r\n\t        }\r\n\t        var animationsOptions = this.chartState.data.animations;\r\n\t        var ease = animationsOptions.trendChangeEase;\r\n\t        var objectToAnimate = { animationValue: 0 };\r\n\t        animation = TweenLite.to(objectToAnimate, time, { animationValue: 1, ease: ease });\r\n\t        animation.eventCallback('onUpdate', function () { return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend); });\r\n\t        animation.eventCallback('onComplete', function () {\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            _this.appendAnimation = null;\r\n\t        });\r\n\t        if (isPrepend) {\r\n\t            this.prependAnimation = animation;\r\n\t        }\r\n\t        else {\r\n\t            this.appendAnimation = animation;\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrameHandler = function (coefficient, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\r\n\t            var segmentId = animatedSegmentsIds_1[_i];\r\n\t            var segment = this.segmentsById[segmentId];\r\n\t            for (var key in segment.targetAnimationState) {\r\n\t                var targetValue = segment.targetAnimationState[key];\r\n\t                var initialValue = segment.initialAnimationState[key];\r\n\t                var currentValue = initialValue + (targetValue - initialValue) * coefficient;\r\n\t                segment.currentAnimationState[key] = currentValue;\r\n\t            }\r\n\t        }\r\n\t        this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\r\n\t        this.ee.emit(EVENTS.ANIMATION_FRAME, this);\r\n\t    };\r\n\t    return TrendSegmentsManager;\r\n\t}());\r\n\texports.TrendSegmentsManager = TrendSegmentsManager;\r\n\tvar TrendSegment = (function () {\r\n\t    function TrendSegment(trendPoints, id) {\r\n\t        this.isCompleted = false;\r\n\t        this.items = [];\r\n\t        this.initialAnimationState = {};\r\n\t        this.targetAnimationState = {};\r\n\t        this.currentAnimationState = {};\r\n\t        this.trendSegments = trendPoints;\r\n\t        this.id = id;\r\n\t        this.maxLength = trendPoints.maxSegmentLength;\r\n\t    }\r\n\t    TrendSegment.prototype.createAnimationState = function () {\r\n\t        var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\r\n\t        return {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal,\r\n\t            startXVal: startXVal,\r\n\t            startYVal: startYVal,\r\n\t            endXVal: endXVal,\r\n\t            endYVal: endYVal,\r\n\t            maxYVal: maxYVal,\r\n\t            minYVal: minYVal,\r\n\t            maxLength: maxLength\r\n\t        };\r\n\t    };\r\n\t    ;\r\n\t    TrendSegment.prototype.appendItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.push(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var startXVal = items[0].xVal;\r\n\t        if (item.xVal - startXVal > this.maxLength)\r\n\t            return false;\r\n\t        items.push(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.prependItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.unshift(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var endXVal = items[items.length - 1].xVal;\r\n\t        if (endXVal - item.xVal > this.maxLength)\r\n\t            return false;\r\n\t        items.unshift(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.complete = function () {\r\n\t        this.isCompleted = true;\r\n\t        this.recalculateItems();\r\n\t        this.items = []; // free memory for completed ranges\r\n\t    };\r\n\t    TrendSegment.prototype.recalculateItems = function () {\r\n\t        var items = this.items;\r\n\t        var itemsLength = items.length;\r\n\t        if (itemsLength === 0)\r\n\t            Utils_1.Utils.error('Unable to create TrendSegment without TrendItems');\r\n\t        var endItem = items[itemsLength - 1];\r\n\t        var endXVal = endItem.xVal, endYVal = endItem.yVal;\r\n\t        var startXVal, startYVal;\r\n\t        var startItem = items[0];\r\n\t        startXVal = startItem.xVal;\r\n\t        startYVal = startItem.yVal;\r\n\t        var minX = Math.min(startXVal, endXVal);\r\n\t        var maxX = Math.max(startXVal, endXVal);\r\n\t        var middleXVal = minX + (maxX - minX) / 2;\r\n\t        var minY = Math.min(startYVal, endYVal);\r\n\t        var maxY = Math.max(startYVal, endYVal);\r\n\t        var middleYVal = minY + (maxY - minY) / 2;\r\n\t        var yVals = items.map(function (item) { return item.yVal; });\r\n\t        this.startXVal = startXVal;\r\n\t        this.startYVal = startYVal;\r\n\t        this.endXVal = endXVal;\r\n\t        this.endYVal = endYVal;\r\n\t        this.xVal = middleXVal;\r\n\t        this.yVal = middleYVal;\r\n\t        this.maxYVal = Math.max.apply(Math, yVals);\r\n\t        this.minYVal = Math.min.apply(Math, yVals);\r\n\t        if (!this.currentAnimationState)\r\n\t            this.currentAnimationState = this.createAnimationState();\r\n\t    };\r\n\t    TrendSegment.prototype.getNext = function () {\r\n\t        var nextPoint = this.trendSegments.segmentsById[this.nextId];\r\n\t        return nextPoint && nextPoint.hasValue ? nextPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getPrev = function () {\r\n\t        var prevPoint = this.trendSegments.segmentsById[this.prevId];\r\n\t        return prevPoint && prevPoint.hasValue ? prevPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getFrameVal = function () {\r\n\t        var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\r\n\t        return new Vector3(xVal, yVal, 0);\r\n\t    };\r\n\t    TrendSegment.prototype.getFramePoint = function () {\r\n\t        var frameVal = this.getFrameVal();\r\n\t        return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\r\n\t    };\r\n\t    return TrendSegment;\r\n\t}());\r\n\texports.TrendSegment = TrendSegment;\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar EVENTS = {\r\n\t    SEGMENTS_REBUILDED: 'segmentsRebuilded'\r\n\t};\r\n\t/**\r\n\t * Trends manager\r\n\t */\r\n\tvar TrendsManager = (function () {\r\n\t    function TrendsManager(state, initialState) {\r\n\t        this.trends = {};\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.chartState = state;\r\n\t        var trendsCalculatedOptions = {};\r\n\t        for (var trendName in initialState.trends) {\r\n\t            var trend = this.createTrend(state, trendName, initialState);\r\n\t            trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\r\n\t        }\r\n\t        this.calculatedOptions = trendsCalculatedOptions;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendsManager.prototype.getTrend = function (trendName) {\r\n\t        return this.trends[trendName];\r\n\t    };\r\n\t    TrendsManager.prototype.getEnabledTrends = function () {\r\n\t        var enabledTrends = [];\r\n\t        var allTrends = this.trends;\r\n\t        for (var trendName in allTrends) {\r\n\t            var trend = allTrends[trendName];\r\n\t            trend.getOptions().enabled && enabledTrends.push(trend);\r\n\t        }\r\n\t        return enabledTrends;\r\n\t    };\r\n\t    TrendsManager.prototype.getStartXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        return trends[0].getData()[0].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getEndXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var firstTrendData = trends[0].getData();\r\n\t        return firstTrendData[firstTrendData.length - 1].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getExtremumYVal = function (extremumIsMax, fromX, toX) {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var compareFn;\r\n\t        var result;\r\n\t        if (extremumIsMax) {\r\n\t            result = -Infinity;\r\n\t            compareFn = Math.max;\r\n\t        }\r\n\t        else {\r\n\t            result = Infinity;\r\n\t            compareFn = Math.min;\r\n\t        }\r\n\t        for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\r\n\t            var trend = trends_1[_i];\r\n\t            var trendData = trend.getData(fromX, toX);\r\n\t            var trendYValues = trendData.map(function (dataItem) { return dataItem.yVal; });\r\n\t            result = compareFn.apply(void 0, [result].concat(trendYValues));\r\n\t        }\r\n\t        if (result == Infinity || result == -Infinity)\r\n\t            result = NaN;\r\n\t        return result;\r\n\t    };\r\n\t    TrendsManager.prototype.getMaxYVal = function (fromX, toX) { return this.getExtremumYVal(true, fromX, toX); };\r\n\t    TrendsManager.prototype.getMinYVal = function (fromX, toX) { return this.getExtremumYVal(false, fromX, toX); };\r\n\t    TrendsManager.prototype.onSegmentsRebuilded = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\r\n\t    };\r\n\t    TrendsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onInitialStateApplied(function () { return _this.onInitialStateAppliedHandler(); });\r\n\t    };\r\n\t    TrendsManager.prototype.onInitialStateAppliedHandler = function () {\r\n\t        var _this = this;\r\n\t        var _loop_1 = function(trendName) {\r\n\t            this_1.trends[trendName].segmentsManager.onRebuild(function () { return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName); });\r\n\t        };\r\n\t        var this_1 = this;\r\n\t        for (var trendName in this.trends) {\r\n\t            _loop_1(trendName);\r\n\t        }\r\n\t    };\r\n\t    TrendsManager.prototype.createTrend = function (state, trendName, initialState) {\r\n\t        var trend = new Trend_1.Trend(state, trendName, initialState);\r\n\t        this.trends[trendName] = trend;\r\n\t        return trend;\r\n\t    };\r\n\t    return TrendsManager;\r\n\t}());\r\n\texports.TrendsManager = TrendsManager;\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\t/**\r\n\t * manage camera, and contains methods for transforming pixels to values\r\n\t */\r\n\tvar Screen = (function () {\r\n\t    function Screen(chartState) {\r\n\t        this.options = { scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1 };\r\n\t        this.currentScrollX = { x: 0 };\r\n\t        this.currentScrollY = { y: 0 };\r\n\t        this.currentZoomX = { val: 1 };\r\n\t        this.currentZoomY = { val: 1 };\r\n\t        this.chartState = chartState;\r\n\t        var _a = chartState.data, w = _a.width, h = _a.height;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.transform({\r\n\t            scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\r\n\t            zoomY: 1\r\n\t        });\r\n\t        this.bindEvents();\r\n\t        //camera.position.z = 1500;\r\n\t    }\r\n\t    Screen.prototype.getCameraSettings = function () {\r\n\t        var _a = this.chartState.data, w = _a.width, h = _a.height;\r\n\t        // settings for pixel-perfect camera\r\n\t        var FOV = 75;\r\n\t        var vFOV = FOV * (Math.PI / 180);\r\n\t        return {\r\n\t            FOV: FOV,\r\n\t            aspect: w / h,\r\n\t            near: 0.1,\r\n\t            far: 5000,\r\n\t            z: h / (2 * Math.tan(vFOV / 2)),\r\n\t            // move 0,0 to left-bottom corner\r\n\t            x: w / 2,\r\n\t            y: h / 2\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onZoomFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'zoomFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onScrollFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'scrollFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onTransformationFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'transformationFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.cameraIsMoving = function () {\r\n\t        return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() ||\r\n\t            this.zoomXAnimation && this.zoomXAnimation.isActive());\r\n\t    };\r\n\t    Screen.prototype.transform = function (options, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\r\n\t        if (scrollX != void 0)\r\n\t            this.options.scrollX = scrollX;\r\n\t        if (scrollY != void 0)\r\n\t            this.options.scrollY = scrollY;\r\n\t        if (zoomX != void 0)\r\n\t            this.options.zoomX = zoomX;\r\n\t        if (zoomY != void 0)\r\n\t            this.options.zoomY = zoomY;\r\n\t        if (scrollX != void 0 || zoomX) {\r\n\t            options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\r\n\t            this.options.scrollXVal = options.scrollXVal;\r\n\t        }\r\n\t        if (scrollY != void 0 || zoomY) {\r\n\t            options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\r\n\t            this.options.scrollYVal = options.scrollYVal;\r\n\t        }\r\n\t        if (silent)\r\n\t            return;\r\n\t        this.ee.emit('transformationFrame', options);\r\n\t        if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\r\n\t            this.ee.emit('scrollFrame', options);\r\n\t        }\r\n\t        if (options.zoomX != void 0 || options.zoomY != void 0) {\r\n\t            this.ee.emit('zoomFrame', options);\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        // handle scroll and zoom\r\n\t        state.onChange(function (changedProps) {\r\n\t            if (changedProps.xAxis && changedProps.xAxis.range) {\r\n\t                if (changedProps.xAxis.range.scroll != void 0)\r\n\t                    _this.onScrollXHandler(changedProps);\r\n\t                if (changedProps.xAxis.range.zoom)\r\n\t                    _this.onZoomXHandler();\r\n\t            }\r\n\t            if (changedProps.yAxis && changedProps.yAxis.range) {\r\n\t                if (changedProps.yAxis.range.scroll != void 0)\r\n\t                    _this.onScrollYHandler();\r\n\t                if (changedProps.yAxis.range.zoom)\r\n\t                    _this.onZoomYHandler();\r\n\t            }\r\n\t        });\r\n\t        state.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    Screen.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.scrollXAnimation && this.scrollXAnimation.kill();\r\n\t        this.scrollYAnimation && this.scrollYAnimation.kill();\r\n\t        this.zoomXAnimation && this.zoomXAnimation.kill();\r\n\t        this.zoomYAnimation && this.zoomYAnimation.kill();\r\n\t    };\r\n\t    Screen.prototype.onScrollXHandler = function (changedProps) {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var isDragMode = state.data.cursor.dragMode;\r\n\t        var animations = state.data.animations;\r\n\t        var canAnimate = animations.enabled && !isDragMode;\r\n\t        var zoomXChanged = changedProps.xAxis.range.zoom;\r\n\t        var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\r\n\t        var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\r\n\t        var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\r\n\t        if (this.scrollXAnimation)\r\n\t            this.scrollXAnimation.pause();\r\n\t        var range = state.data.xAxis.range;\r\n\t        var targetX = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollX.x = this.options.scrollX;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollX: _this.currentScrollX.x });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\r\n\t                x: targetX, ease: ease\r\n\t            });\r\n\t            this.scrollXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollX.x = targetX;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onScrollYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.data.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        if (this.scrollYAnimation)\r\n\t            this.scrollYAnimation.pause();\r\n\t        var range = state.data.yAxis.range;\r\n\t        var targetY = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollY.y = this.options.scrollY;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollY: _this.currentScrollY.y });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\r\n\t                y: targetY, ease: animations.zoomEase\r\n\t            });\r\n\t            this.scrollYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollY.y = targetY;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomXHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.data.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.data.xAxis.range.zoom;\r\n\t        if (this.zoomXAnimation)\r\n\t            this.zoomXAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomX: _this.currentZoomX.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomX.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.data.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.data.yAxis.range.zoom;\r\n\t        if (this.zoomYAnimation)\r\n\t            this.zoomYAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomY: _this.currentZoomY.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomY.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomX;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomY;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Screen.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollX value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenX = function (x) {\r\n\t        return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollY value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenY = function (y) {\r\n\t        return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    //\r\n\t    /**\r\n\t     *  returns screen scrollX value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    // /**\r\n\t    //  *  returns screen scrollY value by screen scrollY coordinate\r\n\t    //  */\r\n\t    // getScreenYByValue(scrollYVal: number): number {\r\n\t    // \tvar {scroll, zeroVal} = this.data.yAxis.range;\r\n\t    // \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\r\n\t    // }\r\n\t    //\r\n\t    //\r\n\t    /**\r\n\t     * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Screen.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenY = function (screenY) {\r\n\t        return this.getPointOnYAxis(this.getValueByScreenY(screenY));\r\n\t    };\r\n\t    Screen.prototype.getTop = function () {\r\n\t        return this.getPointByScreenY(this.chartState.data.height);\r\n\t    };\r\n\t    Screen.prototype.getBottom = function () {\r\n\t        return this.getPointByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getLeft = function () {\r\n\t        return this.getPointByScreenX(0);\r\n\t    };\r\n\t    Screen.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.chartState.data.width);\r\n\t    };\r\n\t    Screen.prototype.getTopVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.data.height);\r\n\t    };\r\n\t    Screen.prototype.getBottomVal = function () {\r\n\t        return this.getValueByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getCenterYVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.data.height / 2);\r\n\t    };\r\n\t    return Screen;\r\n\t}());\r\n\texports.Screen = Screen;\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar AXIS_MARK_DEFAULT_OPTIONS = {\r\n\t    type: 'simple',\r\n\t    lineWidth: 1,\r\n\t    value: 0,\r\n\t    showValue: false,\r\n\t    stickToEdges: false,\r\n\t    lineColor: '#FFFFFF',\r\n\t    title: ''\r\n\t};\r\n\tvar AxisMarks = (function () {\r\n\t    function AxisMarks(chartState, axisType) {\r\n\t        this.items = {};\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.axisType = axisType;\r\n\t        var marks = this.items;\r\n\t        var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\r\n\t        for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\r\n\t            var options = axisMarksOptions_1[_i];\r\n\t            var axisMark = void 0;\r\n\t            options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\r\n\t            // set mark name\r\n\t            if (!options.name)\r\n\t                options.name = Utils_1.Utils.getUid().toString();\r\n\t            if (marks[options.name])\r\n\t                Utils_1.Utils.error('duplicated mark name ' + options.name);\r\n\t            // create mark instance based on type option\r\n\t            if (options.type == 'timeleft') {\r\n\t                axisMark = new AxisTimeleftMark(chartState, axisType, options);\r\n\t            }\r\n\t            else {\r\n\t                axisMark = new AxisMark(chartState, axisType, options);\r\n\t            }\r\n\t            marks[options.name] = axisMark;\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarks.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, newData);\r\n\t        });\r\n\t        this.chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    AxisMarks.prototype.onTrendChange = function (trendName, newData) {\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var startVal = newData[0].xVal;\r\n\t        var endVal = newData[newData.length - 1].xVal;\r\n\t        var marks = this.items;\r\n\t        for (var markName in marks) {\r\n\t            var mark = marks[markName];\r\n\t            var markVal = mark.options.value;\r\n\t            var markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\r\n\t            if (markWasCrossed)\r\n\t                this.ee.emit('markCrossed', trendName, newData);\r\n\t        }\r\n\t    };\r\n\t    AxisMarks.prototype.getItems = function () {\r\n\t        return this.items;\r\n\t    };\r\n\t    AxisMarks.prototype.getItem = function (markName) {\r\n\t        return this.items[markName];\r\n\t    };\r\n\t    return AxisMarks;\r\n\t}());\r\n\texports.AxisMarks = AxisMarks;\r\n\tvar AxisMark = (function () {\r\n\t    function AxisMark(chartState, axisType, options) {\r\n\t        this.renderOnTrendsChange = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.options = options;\r\n\t        this.axisType = axisType;\r\n\t        this.chartState = chartState;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMark.prototype.bindEvents = function () { };\r\n\t    AxisMark.prototype.setOptions = function (newOptions) {\r\n\t        var value = this.options.value;\r\n\t        this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\r\n\t        if (this.options.value !== value)\r\n\t            this.ee.emit('valueChange');\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisMark.prototype.getDisplayedVal = function () {\r\n\t        var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\r\n\t        return String(displayedValue !== void 0 ? displayedValue : value);\r\n\t    };\r\n\t    AxisMark.prototype.onMarkCrossed = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('markCrossed', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('markCrossed', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('valueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('valueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onDisplayedValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('onDisplayedValueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('onDisplayedValueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.typeName = 'simple';\r\n\t    return AxisMark;\r\n\t}());\r\n\texports.AxisMark = AxisMark;\r\n\tvar AxisTimeleftMark = (function (_super) {\r\n\t    __extends(AxisTimeleftMark, _super);\r\n\t    function AxisTimeleftMark() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.renderOnTrendsChange = true;\r\n\t    }\r\n\t    AxisTimeleftMark.prototype.getDisplayedVal = function () {\r\n\t        var markVal = this.options.value;\r\n\t        var maxXVal = this.chartState.data.computedData.trends.maxXVal;\r\n\t        var time = markVal - maxXVal;\r\n\t        if (time < 0)\r\n\t            time = 0;\r\n\t        return Utils_1.Utils.msToTimeString(time);\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.onTrendsChange = function () {\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisTimeleftMark.typeName = 'timeleft';\r\n\t    return AxisTimeleftMark;\r\n\t}(AxisMark));\r\n\texports.AxisTimeleftMark = AxisTimeleftMark;\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t(function (AXIS_RANGE_TYPE) {\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\"; // TODO: AXIS_RANGE_TYPE.ALL\r\n\t})(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\r\n\tvar AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\r\n\t;\r\n\t(function (AXIS_TYPE) {\r\n\t    AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\r\n\t    AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\r\n\t})(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\r\n\tvar AXIS_TYPE = exports.AXIS_TYPE;\r\n\t(function (AXIS_DATA_TYPE) {\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\r\n\t})(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\r\n\tvar AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * base class for all widgets\r\n\t * each widget must have widgetName static property\r\n\t */\r\n\tvar ChartWidget = (function () {\r\n\t    function ChartWidget() {\r\n\t        this.unbindList = [];\r\n\t    }\r\n\t    ChartWidget.prototype.setupChartState = function (chartState) {\r\n\t        this.chart = chartState;\r\n\t    };\r\n\t    ChartWidget.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unbindList = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unbindList.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unbindList.push.apply(unbindList, (args));\r\n\t        }\r\n\t        (_a = this.unbindList).push.apply(_a, unbindList);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartWidget.prototype.unbindEvents = function () {\r\n\t        this.unbindList.forEach(function (unbindEvent) { return unbindEvent(); });\r\n\t        this.unbindList.length = 0;\r\n\t    };\r\n\t    ChartWidget.widgetName = '';\r\n\t    return ChartWidget;\r\n\t}());\r\n\texports.ChartWidget = ChartWidget;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar GridWidget_1 = __webpack_require__(22);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\t/**\r\n\t * widget for drawing axis\r\n\t */\r\n\tvar AxisWidget = (function (_super) {\r\n\t    __extends(AxisWidget, _super);\r\n\t    function AxisWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    AxisWidget.prototype.onReadyHandler = function () {\r\n\t        var _this = this;\r\n\t        this.object3D = new Object3D();\r\n\t        this.axisXObject = new Object3D();\r\n\t        this.axisYObject = new Object3D();\r\n\t        this.object3D.add(this.axisXObject);\r\n\t        this.object3D.add(this.axisYObject);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        // canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\r\n\t        this.updateAxisXRequest = Utils_1.Utils.throttle(function () { return _this.updateAxis(interfaces_1.AXIS_TYPE.X); }, 1000);\r\n\t        this.onScrollChange(this.chart.screen.options.scrollX, this.chart.screen.options.scrollY);\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        this.bindEvent(state.screen.onTransformationFrame(function (options) {\r\n\t            _this.onScrollChange(options.scrollX, options.scrollY);\r\n\t        }), state.screen.onZoomFrame(function (options) { _this.onZoomFrame(options); }), state.onDestroy(function () { return _this.onDestroy(); }), state.onResize(function () { return _this.onResize(); }));\r\n\t    };\r\n\t    AxisWidget.prototype.onDestroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.unbindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.onScrollChange = function (x, y) {\r\n\t        if (y != void 0) {\r\n\t            this.axisYObject.position.y = y;\r\n\t            this.axisXObject.position.y = y;\r\n\t        }\r\n\t        if (x != void 0) {\r\n\t            this.axisYObject.position.x = x;\r\n\t            this.updateAxisXRequest();\r\n\t        }\r\n\t    };\r\n\t    AxisWidget.prototype.onResize = function () {\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t    };\r\n\t    AxisWidget.prototype.setupAxis = function (orientation) {\r\n\t        var _this = this;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.data, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var canvasWidth = 0, canvasHeight = 0;\r\n\t        // clean meshes\r\n\t        if (isXAxis) {\r\n\t            this.axisXObject.traverse(function (obj) { return _this.axisXObject.remove(obj); });\r\n\t            canvasWidth = visibleWidth * 3;\r\n\t            canvasHeight = 50;\r\n\t        }\r\n\t        else {\r\n\t            this.axisYObject.traverse(function (obj) { return _this.axisYObject.remove(obj); });\r\n\t            canvasWidth = 50;\r\n\t            canvasHeight = visibleHeight * 3;\r\n\t        }\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.font = \"10px Arial\";\r\n\t            ctx.fillStyle = \"rgba(255,255,255,0.5)\";\r\n\t            ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisXObject.add(axisMesh);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisYObject.add(axisMesh);\r\n\t        }\r\n\t        this.updateAxis(orientation);\r\n\t    };\r\n\t    AxisWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisWidget.prototype.updateAxis = function (orientation) {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.data, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var _b = this.chart.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\r\n\t        var axisOptions;\r\n\t        var axisMesh;\r\n\t        var axisGridParams;\r\n\t        if (isXAxis) {\r\n\t            axisMesh = this.axisXObject.children[0];\r\n\t            axisOptions = this.chart.data.xAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh = this.axisYObject.children[0];\r\n\t            axisOptions = this.chart.data.yAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\r\n\t        }\r\n\t        var geometry = axisMesh.geometry;\r\n\t        var canvasWidth = geometry.parameters.width;\r\n\t        var canvasHeight = geometry.parameters.height;\r\n\t        var texture = axisMesh.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\r\n\t        }\r\n\t        // TODO: draw text and lines in different loops\r\n\t        var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\r\n\t        var startVal = axisGridParams.start - edgeOffset;\r\n\t        var endVal = axisGridParams.end + edgeOffset;\r\n\t        ctx.beginPath();\r\n\t        for (var val = startVal; val <= endVal; val += axisGridParams.step) {\r\n\t            var displayedValue = '';\r\n\t            if (isXAxis) {\r\n\t                var pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\r\n\t                ctx.textAlign = \"center\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(pxVal + 0.5, canvasHeight);\r\n\t                // ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\r\n\t                if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\r\n\t                    displayedValue = AxisWidget.getDateStr(val, axisGridParams);\r\n\t                }\r\n\t                else {\r\n\t                    displayedValue = Number(val.toFixed(14)).toString();\r\n\t                }\r\n\t                ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\r\n\t            }\r\n\t            else {\r\n\t                var pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\r\n\t                ctx.textAlign = \"right\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(canvasWidth, pxVal + 0.5);\r\n\t                // ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\r\n\t                displayedValue = Number(val.toFixed(14)).toString();\r\n\t                ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\r\n\t            }\r\n\t            ctx.stroke();\r\n\t        }\r\n\t        // uncomment to preview canvas borders\r\n\t        // ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t        ctx.stroke();\r\n\t        ctx.closePath();\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisWidget.prototype.onZoomFrame = function (options) {\r\n\t        if (options.zoomX) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        }\r\n\t        if (options.zoomY) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        }\r\n\t    };\r\n\t    // private temporaryHideAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar timeoutId = setTimeout(() => {\r\n\t    // \t\t\tthis.showAxis(orientation);\r\n\t    // \t}, 200);\r\n\t    //\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tclearTimeout(this.showAxisXTimeout);\r\n\t    // \t\tthis.showAxisXTimeout =\ttimeoutId;\r\n\t    // \t} else {\r\n\t    // \t\tclearTimeout(this.showAxisYTimeout);\r\n\t    // \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tthis.showAxisYTimeout = timeoutId;\r\n\t    // \t}\r\n\t    // }\r\n\t    // private showAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar material: MeshBasicMaterial;\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t} else {\r\n\t    // \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t}\r\n\t    // \tthis.updateAxis(orientation);\r\n\t    // \tTweenLite.to(material, 0.3, {opacity: 1});\r\n\t    // }\r\n\t    AxisWidget.getDateStr = function (timestamp, gridParams) {\r\n\t        var sec = 1000;\r\n\t        var min = sec * 60;\r\n\t        var hour = min * 60;\r\n\t        var day = hour * 60;\r\n\t        var step = gridParams.step;\r\n\t        var d = new Date(timestamp);\r\n\t        var tf = function (num) { return Utils_1.Utils.toFixed(num, 2); };\r\n\t        return tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\r\n\t    };\r\n\t    AxisWidget.widgetName = 'Axis';\r\n\t    return AxisWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisWidget = AxisWidget;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\t/**\r\n\t * widget for drawing chart grid\r\n\t */\r\n\tvar GridWidget = (function (_super) {\r\n\t    __extends(GridWidget, _super);\r\n\t    function GridWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    GridWidget.prototype.onReadyHandler = function () {\r\n\t        var _a = this.chart.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        this.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\r\n\t        this.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\r\n\t        this.initGrid();\r\n\t        this.updateGrid();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    GridWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        // grid is bigger then screen, so it's no need to update it on each scroll event\r\n\t        var updateGridThrottled = Utils_1.Utils.throttle(function () { return _this.updateGrid(); }, 1000);\r\n\t        this.bindEvent(this.chart.onScroll(function () { return updateGridThrottled(); }), this.chart.screen.onZoomFrame(function (options) {\r\n\t            updateGridThrottled();\r\n\t            _this.onZoomFrame(options);\r\n\t        }), this.chart.onDestroy(function () {\r\n\t            _this.isDestroyed = true;\r\n\t            _this.unbindEvents();\r\n\t        }), this.chart.onResize(function () {\r\n\t            _this.updateGrid();\r\n\t        }));\r\n\t    };\r\n\t    GridWidget.prototype.initGrid = function () {\r\n\t        var geometry = new THREE.Geometry();\r\n\t        var material = new THREE.LineBasicMaterial({ linewidth: 1, opacity: 0.1, transparent: true });\r\n\t        var xLinesCount = this.gridSizeH;\r\n\t        var yLinesCount = this.gridSizeV;\r\n\t        while (xLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        while (yLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        this.lineSegments = new LineSegments(geometry, material);\r\n\t        this.lineSegments.position.setZ(-1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t    };\r\n\t    GridWidget.prototype.updateGrid = function () {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var _a = this.chart.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\r\n\t        var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\r\n\t        var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\r\n\t        var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\r\n\t        var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\r\n\t        var gridScrollXVal = scrollXInSegments * axisXGrid.step;\r\n\t        var gridScrollYVal = scrollYInSegments * axisYGrid.step;\r\n\t        var startXVal = axisXGrid.start + gridScrollXVal;\r\n\t        var startYVal = axisYGrid.start + gridScrollYVal;\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var vertices = geometry.vertices;\r\n\t        var lineInd = 0;\r\n\t        for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\r\n\t            var value = startXVal + i * axisXGrid.step;\r\n\t            var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\r\n\t            var value = startYVal + i * axisYGrid.step;\r\n\t            var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\r\n\t    };\r\n\t    GridWidget.prototype.getHorizontalLineSegment = function (yVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\r\n\t        var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\r\n\t        return [\r\n\t            new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0),\r\n\t            new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.getVerticalLineSegment = function (xVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\r\n\t        var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\r\n\t        return [\r\n\t            new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0),\r\n\t            new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.onZoomFrame = function (options) {\r\n\t        var _a = this.chart.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        if (options.zoomX)\r\n\t            this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\r\n\t    };\r\n\t    // TODO: move this code to core\r\n\t    GridWidget.getGridParamsForAxis = function (axisOptions, axisWidth, zoom) {\r\n\t        var axisRange = axisOptions.range;\r\n\t        var from = axisRange.from;\r\n\t        var to = axisRange.to;\r\n\t        var axisLength = to - from;\r\n\t        var gridStep = 0;\r\n\t        var gridStepInPixels = 0;\r\n\t        var minGridStepInPixels = axisOptions.grid.minSizePx;\r\n\t        var axisLengthStr = String(axisLength);\r\n\t        var axisLengthPointPosition = axisLengthStr.indexOf('.');\r\n\t        var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\r\n\t        var gridStepFound = false;\r\n\t        var digitPos = 0;\r\n\t        while (!gridStepFound) {\r\n\t            var power = intPartLength - digitPos - 1;\r\n\t            var multiplier = (Math.pow(10, power) || 1);\r\n\t            var dividers = [1, 2, 5];\r\n\t            for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\r\n\t                var nextGridStep = multiplier / dividers[dividerInd];\r\n\t                var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\r\n\t                if (nextGridStepInPixels >= minGridStepInPixels) {\r\n\t                    gridStep = nextGridStep;\r\n\t                    gridStepInPixels = nextGridStepInPixels;\r\n\t                }\r\n\t                else {\r\n\t                    gridStepFound = true;\r\n\t                    if (gridStep === 0) {\r\n\t                        gridStep = nextGridStep;\r\n\t                        gridStepInPixels = nextGridStepInPixels;\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (!gridStepFound)\r\n\t                digitPos++;\r\n\t        }\r\n\t        var gridStart = Math.floor(from / gridStep) * gridStep;\r\n\t        var gridEnd = Math.floor(to / gridStep) * gridStep;\r\n\t        return {\r\n\t            start: gridStart,\r\n\t            end: gridEnd,\r\n\t            step: gridStep,\r\n\t            stepInPx: gridStepInPixels,\r\n\t            length: gridEnd - gridStart,\r\n\t            segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\r\n\t        };\r\n\t    };\r\n\t    GridWidget.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    GridWidget.widgetName = 'Grid';\r\n\t    return GridWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.GridWidget = GridWidget;\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendsWidget_1 = __webpack_require__(24);\r\n\tvar Color_1 = __webpack_require__(25);\r\n\tvar TrendsGradientWidget = (function (_super) {\r\n\t    __extends(TrendsGradientWidget, _super);\r\n\t    function TrendsGradientWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsGradientWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendGradient;\r\n\t    };\r\n\t    TrendsGradientWidget.widgetName = \"TrendsGradient\";\r\n\t    return TrendsGradientWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsGradientWidget = TrendsGradientWidget;\r\n\tvar TrendGradient = (function (_super) {\r\n\t    __extends(TrendGradient, _super);\r\n\t    function TrendGradient(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        this.visibleSegmentsCnt = 0;\r\n\t        this.trend = chartState.trendsManager.getTrend(trendName);\r\n\t        this.segmentsIds = new Uint16Array(chartState.data.maxVisibleSegments);\r\n\t        this.initGradient();\r\n\t        this.updateSegments();\r\n\t    }\r\n\t    TrendGradient.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.hasBackground;\r\n\t    };\r\n\t    TrendGradient.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            // TODO: optimize updateSegments for onDisplayedRangeChanged\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.chart.onZoom(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendGradient.prototype.getObject3D = function () {\r\n\t        return this.gradient;\r\n\t    };\r\n\t    TrendGradient.prototype.initGradient = function () {\r\n\t        var geometry = new Geometry();\r\n\t        for (var i = 0; i < this.segmentsIds.length; i++) {\r\n\t            geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\r\n\t            var ind = i * 4;\r\n\t            // gradient segment scheme\r\n\t            //\r\n\t            // vert0 +---+ vert3\r\n\t            //       |\\  |\r\n\t            // face1 | \\ | face2\r\n\t            // \t     |  \\|\r\n\t            // vert1 +---+ vert2\r\n\t            geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\r\n\t        }\r\n\t        var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\r\n\t        this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color: color.value, transparent: true, opacity: color.a }));\r\n\t        var _a = this.chart.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.gradient.frustumCulled = false;\r\n\t    };\r\n\t    TrendGradient.prototype.onZoomFrame = function (options) {\r\n\t        var state = this.chart.data;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        var currentScale = this.gradient.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendGradient.prototype.onSegmentsAnimate = function (trendSegmentsManager) {\r\n\t        var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\r\n\t        for (var i = 0; i < this.visibleSegmentsCnt; i++) {\r\n\t            var segmentId = this.segmentsIds[i];\r\n\t            if (!animatedSegmentsIds.includes(segmentId))\r\n\t                continue;\r\n\t            this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\r\n\t        }\r\n\t        this.gradient.geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendGradient.prototype.updateSegments = function () {\r\n\t        var geometry = this.gradient.geometry;\r\n\t        var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\r\n\t        var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\r\n\t        this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\r\n\t        var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\r\n\t        if (segmentsToProcessCnt > this.segmentsIds.length) {\r\n\t            Utils_1.Utils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\r\n\t        }\r\n\t        // setup visible segments and collapse invisible\r\n\t        for (var i = 0; i <= segmentsToProcessCnt; i++) {\r\n\t            if (segmentInd <= lastDisplayedSegmentInd) {\r\n\t                var segment = trendSegments[segmentInd];\r\n\t                this.setupSegmentVertices(i, segment.currentAnimationState);\r\n\t                this.segmentsIds[i] = segment.id;\r\n\t                segmentInd++;\r\n\t            }\r\n\t            else {\r\n\t                this.setupSegmentVertices(i);\r\n\t            }\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    /**\r\n\t     * setup gradient segment by segmentState\r\n\t     * if segmentState is undefined, then collapse vertices to 0,0,0\r\n\t     */\r\n\t    TrendGradient.prototype.setupSegmentVertices = function (segmentInd, segmentState) {\r\n\t        var gradientSegmentInd = segmentInd * 4;\r\n\t        var vertices = this.gradient.geometry.vertices;\r\n\t        var topLeft = vertices[gradientSegmentInd];\r\n\t        var bottomLeft = vertices[gradientSegmentInd + 1];\r\n\t        var bottomRight = vertices[gradientSegmentInd + 2];\r\n\t        var topRight = vertices[gradientSegmentInd + 3];\r\n\t        var screenHeightVal = Math.max(this.chart.pxToValueByYAxis(this.chart.data.height), this.chart.screen.pxToValueByYAxis(this.chart.data.height));\r\n\t        if (segmentState) {\r\n\t            var startX = this.toLocalX(segmentState.startXVal);\r\n\t            var startY = this.toLocalY(segmentState.startYVal);\r\n\t            var endX = this.toLocalX(segmentState.endXVal);\r\n\t            var endY = this.toLocalY(segmentState.endYVal);\r\n\t            topLeft.set(startX, startY, 0);\r\n\t            topRight.set(endX, endY, 0);\r\n\t            bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\r\n\t            bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\r\n\t        }\r\n\t        else {\r\n\t            topLeft.set(0, 0, 0);\r\n\t            topRight.set(0, 0, 0);\r\n\t            bottomLeft.set(0, 0, 0);\r\n\t            bottomRight.set(0, 0, 0);\r\n\t        }\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.data.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.data.yAxis.range.zeroVal;\r\n\t    };\r\n\t    return TrendGradient;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendGradient = TrendGradient;\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Object3D = THREE.Object3D;\r\n\t/**\r\n\t * abstract manager class for all trends widgets\r\n\t */\r\n\tvar TrendsWidget = (function (_super) {\r\n\t    __extends(TrendsWidget, _super);\r\n\t    function TrendsWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.widgets = {};\r\n\t    }\r\n\t    TrendsWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        this.onTrendsChange();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    TrendsWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        state.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t        state.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, changedOptions, newData);\r\n\t        });\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendsChange = function () {\r\n\t        var trendsOptions = this.chart.data.trends;\r\n\t        var TrendWidgetClass = this.getTrendWidgetClass();\r\n\t        for (var trendName in trendsOptions) {\r\n\t            var trendOptions = trendsOptions[trendName];\r\n\t            var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\r\n\t            if (widgetCanBeEnabled && !this.widgets[trendName]) {\r\n\t                this.createTrendWidget(trendName);\r\n\t            }\r\n\t            else if (!widgetCanBeEnabled && this.widgets[trendName]) {\r\n\t                this.destroyTrendWidget(trendName);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendChange = function (trendName, changedOptions, newData) {\r\n\t        var widget = this.widgets[trendName];\r\n\t        if (!widget)\r\n\t            return;\r\n\t        widget.onTrendChange(changedOptions);\r\n\t        if (newData) {\r\n\t            var data = this.chart.getTrend(trendName).getData();\r\n\t            var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t            isAppend ? widget.appendData(newData) : widget.prependData(newData);\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendsWidget.prototype.createTrendWidget = function (trendName) {\r\n\t        var WidgetConstructor = this.getTrendWidgetClass();\r\n\t        var widget = new WidgetConstructor(this.chart, trendName);\r\n\t        this.widgets[trendName] = widget;\r\n\t        var widgetObject = widget.getObject3D();\r\n\t        widgetObject.name = trendName;\r\n\t        this.object3D.add(widget.getObject3D());\r\n\t    };\r\n\t    TrendsWidget.prototype.destroyTrendWidget = function (trendName) {\r\n\t        this.widgets[trendName].onDestroy();\r\n\t        delete this.widgets[trendName];\r\n\t        var widgetObject = this.object3D.getObjectByName(trendName);\r\n\t        this.object3D.remove(widgetObject);\r\n\t    };\r\n\t    return TrendsWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.TrendsWidget = TrendsWidget;\r\n\t/**\r\n\t * based class for all trends widgets\r\n\t */\r\n\tvar TrendWidget = (function () {\r\n\t    function TrendWidget(chart, trendName) {\r\n\t        this.chart = chart;\r\n\t        this.trendName = trendName;\r\n\t        this.unbindList = [];\r\n\t        this.trend = chart.trendsManager.getTrend(trendName);\r\n\t        this.chart = chart;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendWidget.widgetIsEnabled = function (trendOptions, chart) {\r\n\t        return trendOptions.enabled;\r\n\t    };\r\n\t    TrendWidget.prototype.appendData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.prependData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.onTrendChange = function (changedOptions) { };\r\n\t    TrendWidget.prototype.onDestroy = function () {\r\n\t        for (var _i = 0, _a = this.unbindList; _i < _a.length; _i++) {\r\n\t            var unsubscriber = _a[_i];\r\n\t            unsubscriber();\r\n\t        }\r\n\t    };\r\n\t    TrendWidget.prototype.onSegmentsAnimate = function (segments) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoomFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onTransformationFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoom = function () {\r\n\t    };\r\n\t    TrendWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function (trendPoints) { return _this.onSegmentsAnimate(trendPoints); }));\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function (options) { return _this.onTransformationFrame(options); }));\r\n\t        this.bindEvent(this.chart.screen.onZoomFrame(function (options) { return _this.onZoomFrame(options); }));\r\n\t        this.bindEvent(this.chart.onZoom(function () { return _this.onZoom(); }));\r\n\t    };\r\n\t    ;\r\n\t    TrendWidget.prototype.bindEvent = function (unbind) {\r\n\t        this.unbindList.push(unbind);\r\n\t    };\r\n\t    return TrendWidget;\r\n\t}());\r\n\texports.TrendWidget = TrendWidget;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar ChartColor = (function () {\r\n\t    function ChartColor(color) {\r\n\t        this.set(color);\r\n\t    }\r\n\t    /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\r\n\t    /**\r\n\t     * Parse hex/rgb{a} color syntax.\r\n\t     * @input string\r\n\t     * @returns array [r,g,b{,o}]\r\n\t     */\r\n\t    ChartColor.parseColor = function (color) {\r\n\t        var cache, p = parseInt // Use p as a byte saving reference to parseInt\r\n\t        , color = color.replace(/\\s\\s*/g, ''); //var\r\n\t        // Checks for 6 digit hex and converts string to integer\r\n\t        if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\r\n\t        else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\r\n\t            cache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\r\n\t        else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\r\n\t        else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3], +cache[4]];\r\n\t        else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3]];\r\n\t        else\r\n\t            throw Error(color + ' is not supported by parseColor');\r\n\t        // Performs RGBA conversion by default\r\n\t        isNaN(cache[3]) && (cache[3] = 1);\r\n\t        return cache;\r\n\t        // Adds or removes 4th value based on rgba support\r\n\t        // Support is flipped twice to prevent erros if\r\n\t        // it's not defined\r\n\t        //return cache.slice(0,3 + !!$.support.rgba);\r\n\t    };\r\n\t    ChartColor.prototype.set = function (color) {\r\n\t        if (typeof color == 'number')\r\n\t            color = '#' + color.toString(16);\r\n\t        var colorStr = color;\r\n\t        var rgba = ChartColor.parseColor(colorStr);\r\n\t        this.r = rgba[0];\r\n\t        this.g = rgba[1];\r\n\t        this.b = rgba[2];\r\n\t        this.a = rgba[3];\r\n\t        this.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\r\n\t        this.hexStr = '#' + this.value.toString(16);\r\n\t        this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\r\n\t    };\r\n\t    return ChartColor;\r\n\t}());\r\n\texports.ChartColor = ChartColor;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar TrendsWidget_1 = __webpack_require__(24);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\t/**\r\n\t * widget for drawing trends lines\r\n\t */\r\n\tvar TrendsLineWidget = (function (_super) {\r\n\t    __extends(TrendsLineWidget, _super);\r\n\t    function TrendsLineWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsLineWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendLine;\r\n\t    };\r\n\t    TrendsLineWidget.widgetName = \"TrendsLine\";\r\n\t    return TrendsLineWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsLineWidget = TrendsLineWidget;\r\n\tvar TrendLine = (function (_super) {\r\n\t    __extends(TrendLine, _super);\r\n\t    function TrendLine(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        // contains indexes of free segments\r\n\t        this.freeSegmentsInds = [];\r\n\t        // contains segments to display\r\n\t        this.displayedSegments = {};\r\n\t        var options = this.trend.getOptions();\r\n\t        this.material = new LineBasicMaterial({ color: options.lineColor, linewidth: options.lineWidth });\r\n\t        this.initLine();\r\n\t    }\r\n\t    TrendLine.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\r\n\t    };\r\n\t    TrendLine.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    TrendLine.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroySegments();\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendLine.prototype.initLine = function () {\r\n\t        var geometry = new Geometry();\r\n\t        var _a = this.chart.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.lineSegments = new LineSegments(geometry, this.material);\r\n\t        this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t        for (var i = 0; i < this.chart.data.maxVisibleSegments; i++) {\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t            this.freeSegmentsInds.push(i);\r\n\t        }\r\n\t        this.vertices = geometry.vertices;\r\n\t        this.setupSegments();\r\n\t    };\r\n\t    TrendLine.prototype.setupSegments = function () {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.displayedSegments) {\r\n\t            var lineSegment = this.displayedSegments[segmentId];\r\n\t            var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroySegment(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupSegment(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.setupSegment = function (segmentId, segmentState) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        if (!lineSegment) {\r\n\t            if (this.freeSegmentsInds.length == 0)\r\n\t                Utils_1.Utils.error('Max allocated segments reached');\r\n\t            var ind = this.freeSegmentsInds.pop();\r\n\t            lineSegment = this.displayedSegments[segmentId] = { segmentId: segmentId, ind: ind };\r\n\t        }\r\n\t        var segmentInd = lineSegment.ind;\r\n\t        var lineStartVertex = this.vertices[segmentInd * 2];\r\n\t        var lineEndVertex = this.vertices[segmentInd * 2 + 1];\r\n\t        lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\r\n\t        lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\r\n\t    };\r\n\t    TrendLine.prototype.destroySegments = function () {\r\n\t        for (var segmentId in this.displayedSegments)\r\n\t            this.destroySegment(Number(segmentId));\r\n\t    };\r\n\t    TrendLine.prototype.destroySegment = function (segmentId) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        var lineStartVertex = this.vertices[lineSegment.ind * 2];\r\n\t        var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\r\n\t        lineStartVertex.set(0, 0, 0);\r\n\t        lineEndVertex.set(0, 0, 0);\r\n\t        delete this.displayedSegments[segmentId];\r\n\t        this.freeSegmentsInds.push(lineSegment.ind);\r\n\t    };\r\n\t    TrendLine.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.lineSegments.scale;\r\n\t        var state = this.chart.data;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendLine.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.displayedSegments[segmentId])\r\n\t                continue;\r\n\t            this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.data.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.data.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendLine;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendLine = TrendLine;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar TrendsWidget_1 = __webpack_require__(24);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Line = THREE.Line;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar PlaneGeometry = THREE.PlaneGeometry;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar RISE_COLOR = 0x2CAC40;\r\n\tvar FALL_COLOR = 0xEE5533;\r\n\tvar MARGIN_PERCENT = 0.3;\r\n\tvar MAX_CANDLES = 100;\r\n\t/**\r\n\t * widget for drawing trends candles\r\n\t */\r\n\tvar TrendsCandlesWidget = (function (_super) {\r\n\t    __extends(TrendsCandlesWidget, _super);\r\n\t    function TrendsCandlesWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsCandlesWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendCandlesWidget;\r\n\t    };\r\n\t    TrendsCandlesWidget.widgetName = \"TrendsCandles\";\r\n\t    return TrendsCandlesWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsCandlesWidget = TrendsCandlesWidget;\r\n\tvar TrendCandlesWidget = (function (_super) {\r\n\t    __extends(TrendCandlesWidget, _super);\r\n\t    function TrendCandlesWidget(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        // contains indexes of free candles\r\n\t        this.freeCandlesInds = [];\r\n\t        this.candlesPool = [];\r\n\t        this.candles = {};\r\n\t        this.initObject();\r\n\t    }\r\n\t    TrendCandlesWidget.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroyCandles();\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.initObject = function () {\r\n\t        var stateData = this.chart.data;\r\n\t        var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.scaleXFactor = scaleXFactor;\r\n\t        this.scaleYFactor = scaleYFactor;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.object3D.frustumCulled = false;\r\n\t        for (var i = 0; i < MAX_CANDLES; i++)\r\n\t            this.freeCandlesInds.push(i);\r\n\t        this.setupCandles();\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.setupCandles = function () {\r\n\t        // remove invisible\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.candles) {\r\n\t            var segment_1 = this.candles[segmentId].segment;\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroyCandle(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupCandle(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandles = function () {\r\n\t        for (var segmentId in this.candles)\r\n\t            this.destroyCandle(Number(segmentId));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandle = function (segmentId) {\r\n\t        var candle = this.candles[segmentId];\r\n\t        this.object3D.remove(candle.getObject3D());\r\n\t        delete this.candles[segmentId];\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.object3D.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(this.scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(this.scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.candles[segmentId])\r\n\t                continue;\r\n\t            var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\r\n\t            this.setupCandle(segmentId, segmentState);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * create or modify candle\r\n\t     */\r\n\t    TrendCandlesWidget.prototype.setupCandle = function (candleId, segmentState) {\r\n\t        var candleInd = candleId % MAX_CANDLES;\r\n\t        // get candle from candlesPool to avoid creating new Objects by performance reasons\r\n\t        var candle = this.candlesPool[candleInd];\r\n\t        if (!candle) {\r\n\t            candle = this.candlesPool[candleInd] = new CandleWidget();\r\n\t        }\r\n\t        if (!this.candles[candleId]) {\r\n\t            this.candles[candleId] = candle;\r\n\t            this.object3D.add(candle.getObject3D());\r\n\t        }\r\n\t        candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\r\n\t        candle.setSegment(segmentState);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.data.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.data.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendCandlesWidget;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendCandlesWidget = TrendCandlesWidget;\r\n\tvar CandleWidget = (function () {\r\n\t    function CandleWidget() {\r\n\t        this.initObject();\r\n\t    }\r\n\t    CandleWidget.prototype.getObject3D = function () {\r\n\t        return this.rect;\r\n\t    };\r\n\t    CandleWidget.prototype.setSegment = function (segment) {\r\n\t        this.segment = segment;\r\n\t        var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\r\n\t        // update rect\r\n\t        var geometry = this.rect.geometry;\r\n\t        var material = this.rect.material;\r\n\t        var width = segment.endXVal - segment.startXVal;\r\n\t        width -= width * MARGIN_PERCENT;\r\n\t        var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\r\n\t        var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\r\n\t        leftTop.set(-width / 2, height / 2, 0);\r\n\t        rightTop.set(width / 2, height / 2, 0);\r\n\t        leftBottom.set(-width / 2, -height / 2, 0);\r\n\t        rightBottom.set(width / 2, -height / 2, 0);\r\n\t        // prevent to draw bars with height < 1px\r\n\t        if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\r\n\t            leftBottom.setY(leftBottom.y + 1);\r\n\t            rightBottom.setY(rightBottom.y + 1);\r\n\t        }\r\n\t        material.color.set(color);\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        // update lines\r\n\t        var vLineGeometry = this.vLine.geometry;\r\n\t        var vLineMaterial = this.vLine.material;\r\n\t        var lineTop = segment.maxYVal - segment.yVal;\r\n\t        var lineBottom = segment.minYVal - segment.yVal;\r\n\t        vLineGeometry.vertices[0].set(0, lineTop, 0);\r\n\t        vLineGeometry.vertices[1].set(0, lineBottom, 0);\r\n\t        vLineMaterial.color.set(color);\r\n\t        vLineGeometry.verticesNeedUpdate = true;\r\n\t        var hLineGeometry = this.hLine.geometry;\r\n\t        var hLineMaterial = this.hLine.material;\r\n\t        var lineLeft = (-width) / 2;\r\n\t        var lineRight = width / 2;\r\n\t        hLineGeometry.vertices[0].set(lineLeft, 0, 0);\r\n\t        hLineGeometry.vertices[1].set(lineRight, 0, 0);\r\n\t        hLineMaterial.color.set(color);\r\n\t        hLineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    CandleWidget.prototype.initObject = function () {\r\n\t        this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\r\n\t        var vLineGeometry = new Geometry();\r\n\t        var hLineGeometry = new Geometry();\r\n\t        vLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        hLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        this.vLine = new Line(vLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.hLine = new Line(hLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.rect.add(this.vLine);\r\n\t        this.rect.add(this.hLine);\r\n\t    };\r\n\t    return CandleWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(5));\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ThreeChart.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 78dbd4b5273eed6036e9\n **/","export * from './src/index';\n\n\n/** WEBPACK FOOTER **\n ** ./index.ts\n **/","export * from './ChartView';\nexport * from './interfaces';\nexport * from './AxisMarks';\nexport * from './Screen';\nexport * from './Chart';\nexport * from './Trend';\nexport * from './TrendSegmentsManager';\nexport * from './TrendsManager';\nexport * from './Utils';\nexport * from './Widget';\nexport * from './Plugin';\nexport * from './Color';\nexport * from './widgets/TrendsWidget';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.ts\n **/","// deps must be always on top\nimport { ChartPlugin } from './Plugin';\nrequire('./deps/deps');\n\nimport { Trend } from \"./Trend\";\nimport Vector3 = THREE.Vector3;\nimport PerspectiveCamera = THREE.PerspectiveCamera;\nimport Scene = THREE.Scene;\nimport Renderer = THREE.Renderer;\nimport WebGLRenderer = THREE.WebGLRenderer;\nimport Object3D = THREE.Object3D;\nimport { Chart, IChartState } from \"./Chart\";\nimport { ChartWidget, IChartWidgetConstructor } from \"./Widget\";\nimport { Utils } from \"./Utils\";\nimport { IScreenTransformOptions } from \"./Screen\";\nimport { AxisWidget } from \"./widgets/AxisWidget\";\nimport { GridWidget } from \"./widgets/GridWidget\";\nimport { TrendsGradientWidget } from \"./widgets/TrendsGradientWidget\";\nimport { TrendsLineWidget } from \"./widgets/TrendsLineWidget\";\nimport { TrendsCandlesWidget } from './widgets/TrendsCandleWidget';\nimport { ResizeSensor, ResizeSensorType } from './deps';\nimport OrthographicCamera = THREE.OrthographicCamera;\n\n\nexport class ChartView {\n\n\tstatic devicePixelRatio = window.devicePixelRatio;\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [];\n\tstatic renderers: {[rendererName: string]: any} = {\n\t\tCanvasRenderer: (THREE as any).CanvasRenderer,\n\t\tWebGLRenderer: THREE.WebGLRenderer\n\t};\n\n\tstate: Chart;\n\tisStopped: boolean;\n\tisDestroyed: boolean;\n\tprivate $container: Element;\n\tprivate $el: HTMLElement;\n\tprivate renderer: Renderer;\n\tprivate scene: Scene;\n\tprivate camera: PerspectiveCamera;\n\tprivate cameraInitialPosition: Vector3;\n\tprivate widgets: Array<ChartWidget> = [];\n\tprivate stats: Stats;\n\tprivate zoomThrottled: Function;\n\tprivate unsubscribers: Function[];\n\tprivate resizeSensor: ResizeSensorType;\n\tprivate pluginsAndWidgets: Array<ChartPlugin | ChartWidget>;\n\n\tconstructor(state: IChartState, $container: Element, pluginsAndWidgets: Array<ChartPlugin | ChartWidget> = []) {\n\n\t\tif (!THREE || !THREE.REVISION) Utils.error('three.js not found');\n\n\t\tif (!$container) {\n\t\t\tUtils.error('$el must be set');\n\t\t}\n\t\t// calculate chart size\n\t\tlet style = getComputedStyle($container);\n\t\tstate.width = parseInt(style.width);\n\t\tstate.height = parseInt(style.height);\n\n\t\tlet plugins = pluginsAndWidgets.filter(pluginOrWidget => pluginOrWidget instanceof ChartPlugin) as ChartPlugin[];\n\n\t\tthis.state = new Chart(state, plugins);\n\t\tthis.pluginsAndWidgets = pluginsAndWidgets;\n\t\tthis.zoomThrottled = Utils.throttle((zoomValue: number, origin: number) => this.zoom(zoomValue, origin), 200);\n\t\tthis.$container = $container;\n\t\tthis.init($container);\n\t};\n\n\tprivate init($container: Element) {\n\t\tvar state = this.state;\n\t\tvar {width: w, height: h, showStats, autoRender} = state.data;\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.isStopped = !autoRender.enabled;\n\n\t\tvar renderer = this.renderer = new (ChartView.renderers[this.state.data.renderer] as any)({\n\t\t\tantialias: true,\n\t\t\talpha: true\n\t\t});\n\t\trenderer.setSize(w, h);\n\t\trenderer.setPixelRatio(ChartView.devicePixelRatio);\n\t\trenderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n\t\t$container.appendChild(renderer.domElement);\n\t\tthis.$el = renderer.domElement;\n\t\tthis.$el.style.display = 'block';\n\n\t\tif (showStats) {\n\t\t\tthis.stats = new Stats();\n\t\t\t$container.appendChild(this.stats.domElement);\n\t\t}\n\n\t\tthis.setupCamera();\n\t\tthis.initWidgets();\n\t\tthis.bindEvents();\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\n\t */\n\tprivate initWidgets() {\n\t\tlet preinstalledWidgetsClasses = (this.constructor as typeof ChartView).preinstalledWidgets;\n\t\tlet customWidgets: ChartWidget[] = [];\n\n\t\tthis.pluginsAndWidgets.forEach(pluginOrWidget => {\n\t\t\tif (pluginOrWidget instanceof ChartWidget) {\n\t\t\t\tcustomWidgets.push(pluginOrWidget);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!(pluginOrWidget instanceof ChartPlugin)) return;\n\t\t\tlet pluginWidgetClasses = (pluginOrWidget.constructor as typeof ChartPlugin).providedWidgets;\n\t\t\tpreinstalledWidgetsClasses.push(...pluginWidgetClasses);\n\t\t});\n\n\t\tthis.widgets = customWidgets.concat(\n\t\t\tpreinstalledWidgetsClasses.map((WidgetClass: IChartWidgetConstructor) => new WidgetClass())\n\t\t);\n\n\t\tthis.widgets.forEach(widget => {\n\t\t\twidget.setupChartState(this.state);\n\t\t\twidget.onReadyHandler();\n\t\t\tthis.scene.add(widget.getObject3D());\n\t\t});\n\t}\n\n\tprivate renderLoop() {\n\t\tif (this.isDestroyed) return;\n\t\tthis.stats && this.stats.begin();\n\t\tthis.render();\n\t\tif (this.isStopped) return;\n\t\tvar fpsLimit = this.state.data.autoRender.fps;\n\n\t\tif (fpsLimit) {\n\t\t\tlet delay = 1000 / fpsLimit;\n\t\t\tsetTimeout(() => requestAnimationFrame(() => this.renderLoop()), delay);\n\t\t} else {\n\t\t\trequestAnimationFrame(() => this.renderLoop());\n\t\t}\n\t\tthis.stats && this.stats.end();\n\t}\n\n\trender() {\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n\n\tstop() {\n\t\tthis.isStopped = true;\n\t}\n\n\trun() {\n\t\tthis.isStopped = false;\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * call to destroy chart an init garbage collection\n\t */\n\tdestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.stop();\n\t\tthis.state.destroy();\n\t\tthis.unbindEvents();\n\t\t// WARNING! undocumented method for free webgl context\n\t\ttry {\n\t\t\t(this.renderer as any).forceContextLoss();\n\t\t} catch (wtf) {\n\t\t\t// sometimes with many chart instances forceContextLoss not working\n\t\t}\n\t\t(this.renderer as any).context = null;\n\t\tthis.renderer.domElement = null;\n\t\tthis.renderer = null;\n\t}\n\n\tgetState(): IChartState {\n\t\treturn this.state.data\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.getTrend\n\t */\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.state.getTrend(trendName);\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.setState\n\t */\n\tsetState(state: IChartState) {\n\t\treturn this.state.setState(state);\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar $el = this.$el;\n\t\tif (this.state.data.controls.enabled) {\n\t\t\t$el.addEventListener('mousewheel', (ev: MouseWheelEvent) => {\n\t\t\t\tthis.onMouseWheel(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousemove', (ev: MouseEvent) => {\n\t\t\t\tthis.onMouseMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousedown', (ev: MouseEvent) => this.onMouseDown(ev));\n\t\t\t$el.addEventListener('mouseup', (ev: MouseEvent) => this.onMouseUp(ev));\n\t\t\t$el.addEventListener('touchmove', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('touchend', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchEnd(ev)\n\t\t\t});\n\t\t}\n\t\tif (this.state.data.autoResize) {\n\t\t\tthis.resizeSensor = new ResizeSensor(this.$container, () => {\n\t\t\t\tthis.onChartContainerResizeHandler(this.$container.clientWidth, this.$container.clientHeight);\n\t\t\t});\n\t\t}\n\n\t\tthis.unsubscribers = [\n\t\t\tthis.state.onTrendsChange(() => this.autoscroll()),\n\t\t\tthis.state.screen.onTransformationFrame((options) => this.onScreenTransformHandler(options)),\n\t\t\tthis.state.onResize((options) => this.onChartResize())\n\t\t];\n\t}\n\n\tprivate unbindEvents() {\n\t\t// TODO: unbind events correctly\n\t\ttry {\n\t\t\tthis.resizeSensor && this.resizeSensor.detach();\n\t\t} catch (e) {\n\t\t\t// ups.. somebody already removed resizeSensor childNode\n\t\t\t// detected in angular2 apps\n\t\t}\n\t\tthis.$el.remove();\n\t\tthis.unsubscribers.forEach(unsubscribe => unsubscribe());\n\t}\n\n\tprivate setupCamera() {\n\t\tlet camSettings = this.state.screen.getCameraSettings();\n\t\tif (!this.camera) {\n\t\t\tthis.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t\t\tthis.scene.add(this.camera);\n\t\t} else {\n\t\t\tthis.camera.fov = camSettings.FOV;\n\t\t\tthis.camera.aspect = camSettings.aspect;\n\t\t\tthis.camera.far = camSettings.far;\n\t\t\tthis.camera.near = camSettings.near;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\t\tthis.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t\tthis.cameraInitialPosition = this.camera.position.clone();\n\t\tthis.onScreenTransformHandler(this.state.screen.options);\n\t}\n\n\tprivate onScreenTransformHandler(options: IScreenTransformOptions) {\n\t\tif (options.scrollX != void 0) {\n\t\t\tlet scrollX = this.cameraInitialPosition.x + options.scrollX;\n\t\t\t// scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setX(scrollX);\n\t\t}\n\t\tif (options.scrollY != void 0) {\n\t\t\tlet scrollY = this.cameraInitialPosition.y + options.scrollY;\n\t\t\t// scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setY(scrollY);\n\t\t}\n\t}\n\n\tprivate autoscroll() {\n\t\tvar state = this.state;\n\t\tif (!state.data.autoScroll) return;\n\t\tvar oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n\t\tvar trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n\t\tif (trendsMaxXDelta > 0) {\n\t\t\tvar maxVisibleX = this.state.screen.getScreenRightVal();\n\t\t\tvar paddingRightX = this.state.getPaddingRight();\n\t\t\tvar currentScroll = state.data.xAxis.range.scroll;\n\t\t\tif (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar scrollDelta = trendsMaxXDelta;\n\t\t\tthis.setState({xAxis: {range: {scroll: currentScroll + scrollDelta}}});\n\t\t}\n\t}\n\n\tprivate onScrollStop() {\n\t\t// var tendsXMax = this.state.data.computedData.trends.maxX;\n\t\t// var paddingRightX = this.state.getPaddingRight();\n\t\t// if (tendsXMax < paddingRightX) {\n\t\t// \tthis.state.scrollToEnd();\n\t\t// }\n\t}\n\n\tprivate onMouseDown(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t}\n\n\tprivate onMouseUp(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onMouseMove(ev: MouseEvent) {\n\t\tif (this.state.data.cursor.dragMode) {\n\t\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t\t}\n\t}\n\n\tprivate onMouseWheel(ev: MouseWheelEvent) {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t\tlet zoomOrigin = ev.layerX / this.state.data.width;\n\t\tlet zoomValue = 1 + ev.wheelDeltaY * 0.001;\n\t\tthis.zoom(zoomValue, zoomOrigin);\n\t}\n\n\tprivate onTouchMove(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY}});\n\t}\n\n\tprivate onTouchEnd(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onChartContainerResizeHandler(width: number, height: number) {\n\t\tthis.setState({width, height});\n\t}\n\n\tprivate onChartResize() {\n\t\tlet {width, height} = this.state.data;\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.setupCamera();\n\t}\n\n\tprivate zoom(zoomValue: number, zoomOrigin: number) {\n\t\tconst MAX_ZOOM_VALUE = 1.5;\n\t\tconst MIN_ZOOM_VALUE = 0.7;\n\t\tzoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t\tzoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t\tlet autoScrollIsEnabled = this.state.data.autoScroll;\n\t\tif (autoScrollIsEnabled) this.state.setState({autoScroll: false});\n\t\tthis.state.zoom(zoomValue, zoomOrigin).then(() => {\n\t\t\tif (autoScrollIsEnabled) this.setState({autoScroll: true});\n\t\t});\n\t}\n\n\n}\n\n// install built-in widgets\nChartView.preinstalledWidgets = [\n\tTrendsLineWidget,\n\tTrendsCandlesWidget,\n\tAxisWidget,\n\tGridWidget,\n\tTrendsGradientWidget\n];\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ChartView.ts\n **/","import { Chart, IChartState } from \"./Chart\";\nimport { Utils } from './Utils';\nimport { EventEmitter } from './EventEmmiter';\nimport { ChartWidget } from './Widget';\n\nexport interface IChartPluginState {\n}\n\nexport interface IChartPluginConfig {\n\tinstallPluginWidgets?: boolean;\n}\n\nexport const DEFAULT_CONFIG: IChartPluginConfig = {\n\tinstallPluginWidgets: true\n};\n\n/**\n * base class for all plugins\n * NAME is mandatory\n */\nexport abstract class ChartPlugin {\n\tstatic NAME: string = '';\n\tstatic providedWidgets: typeof ChartWidget[] = [];\n\n\tinitialState: IChartPluginState;\n\tconfig: IChartPluginConfig;\n\tname: string;\n\tprotected chartState: Chart;\n\tprotected unsubscribers: Function[] = [];\n\tprotected ee: EventEmitter;\n\n\tconstructor (options?: IChartPluginState, config: IChartPluginConfig = {}) {\n\t\tthis.initialState = options;\n\t\tthis.config = Utils.deepMerge(DEFAULT_CONFIG, config);\n\t\tthis.name = (this.constructor as typeof ChartPlugin).NAME;\n\t\tif (!this.name) Utils.error('Unnamed plugin detected');\n\t}\n\n\tsetupChartState(chartState: Chart) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvent(\n\t\t\tthis.chartState.onInitialStateApplied(initialState => this.onInitialStateAppliedHandler(initialState)),\n\t\t\tthis.chartState.onReady(() => this.onReadyHandler()),\n\t\t\tthis.chartState.onDestroy(() => this.onDestroyHandler()),\n\t\t\tthis.chartState.onPluginsStateChange(changedPluginsStates => changedPluginsStates[this.name] && this.onStateChanged(changedPluginsStates[this.name]))\n\t\t)\n\t}\n\n\tgetOptions(): IChartPluginState {\n\t\treturn this.chartState.data.pluginsState[this.name];\n\t}\n\n\tprotected onInitialStateAppliedHandler(initialState: IChartState) {\n\t}\n\n\tprotected onReadyHandler() {\n\t}\n\n\tprotected onStateChanged(changedState: IChartPluginState) {\n\t}\n\n\tprotected onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t}\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unsubscribers: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunsubscribers.push(args[0] as Function);\n\t\t} else {\n\t\t\tunsubscribers.push(...args as Function[]);\n\t\t}\n\t\tthis.unsubscribers.push(...unsubscribers);\n\t}\n\n\n\tprotected unbindEvents() {\n\t\tthis.unsubscribers.forEach(unsubscriber => unsubscriber());\n\t\tthis.unsubscribers.length = 0;\n\t}\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Plugin.ts\n **/","import Texture = THREE.Texture;\nimport Color = THREE.Color;\nimport { TIteralable, IIteralable } from \"./interfaces\";\nimport { isPlainObject } from './deps/deps';\n\nfunction deepmerge(target: any, src: any, mergeArrays = true) {\n\tvar array = Array.isArray(src);\n\tvar dst: any = array && [] || {};\n\n\tif (array) {\n\t\ttarget = target || [];\n\t\tif (mergeArrays) {\n\t\t\tdst = dst.concat(target);\n\t\t}\n\t\tsrc.forEach(function(e: any, i: any) {\n\t\t\tif (typeof dst[i] === 'undefined') {\n\t\t\t\tdst[i] = e;\n\t\t\t} else if (typeof e === 'object') {\n\t\t\t\tdst[i] = deepmerge(target[i], e, mergeArrays);\n\t\t\t} else {\n\t\t\t\tif (target.indexOf(e) === -1) {\n\t\t\t\t\tdst.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tif (target && typeof target === 'object') {\n\t\t\tObject.keys(target).forEach(function (key) {\n\t\t\t\tdst[key] = target[key];\n\t\t\t})\n\t\t}\n\t\tObject.keys(src).forEach(function (key) {\n\t\t\tif (typeof src[key] !== 'object' || !src[key]) {\n\t\t\t\tdst[key] = src[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t} else {\n\t\t\t\t\tdst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn dst;\n}\n\n\n\nexport declare type TUid = number;\n\n/**\n * project utils static class\n */\nexport class Utils {\n\n\tprivate static currentId: TUid = 1;\n\n\t/**\n\t * deepMerge based on https://www.npmjs.com/package/deepmerge\n\t */\n\tstatic deepMerge<T> (obj1: T, obj2: T, mergeArrays?: boolean) {\n\t\treturn deepmerge(obj1, obj2, mergeArrays) as T;\n\t}\n\n\t/**\n\t * deepCopy based on JSON.stringify function\n\t * @deprecated\n\t */\n\tstatic deepCopy<T> (obj: T) {\n\t\t// TODO: use deepMerge function to copy\n\t\treturn JSON.parse(JSON.stringify(obj)) as T;\n\t}\n\n\t/**\n\t *\n\t * @example\n\t * // returns \"000015\"\n\t * Utils.toFixed(15, 6);\n\t */\n\tstatic toFixed(num: number, digitsCount: number): string {\n\t\tvar maxDigits = 15;\n\t\tvar result = '';\n\t\tvar intVal = Math.floor(num);\n\t\tvar intStr = intVal.toString();\n\t\tvar lengthDiff = digitsCount - intStr.length;\n\t\tif (lengthDiff > 0 ) {\n\t\t\tresult = (<any>'0').repeat(lengthDiff) + intStr;\n\t\t} else {\n\t\t\tresult = intStr;\n\t\t}\n\t\tvar afterPointDigitsCount = maxDigits - intStr.length;\n\t\tvar afterPointStr = num.toString().split('.')[1];\n\t\tif (afterPointStr) {\n\t\t\tresult += '.' + afterPointStr.substr(0, afterPointDigitsCount);\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic bindEvent() {\n\n\t}\n\n\t/**\n\t * generate texture from canvas context\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture {\n\t\tvar canvas: HTMLCanvasElement = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tvar ctx = canvas.getContext('2d');\n\t\tfn(ctx);\n\t\tvar texture = new THREE.Texture(canvas);\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * generate texture from canvas context with NearestFilter\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createPixelPerfectTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture{\n\t\tvar texture = this.createTexture(width, height, fn);\n\t\t// texture.magFilter = THREE.NearestFilter;\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic error(msg: string) {\n\t\tconsole.error('Chart error: ' + msg);\n\t\tthrow 'Chart: ' + msg;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic warn(msg: string) {\n\t\tconsole.warn('Chart warning: ' + msg);\n\t}\n\n\t/**\n\t * @returns new unique id\n\t */\n\tstatic getUid(): TUid {\n\t\treturn this.currentId++;\n\t}\n\n\t/**\n\t * @returns distance between numbers\n\t */\n\tstatic getDistance(num1: number, num2: number) {\n\t\treturn Math.max(num1, num2) - Math.min(num1, num2);\n\t}\n\n\tstatic binarySearchClosestInd(arr: IIteralable[], num: number, key: string): number {\n\t\tvar mid: number;\n\t\tvar lo = 0;\n\t\tvar hi = arr.length - 1;\n\t\twhile (hi - lo > 1) {\n\t\t\tmid = Math.floor ((lo + hi) / 2);\n\t\t\tif (arr[mid][key] < num) {\n\t\t\t\tlo = mid;\n\t\t\t} else {\n\t\t\t\thi = mid;\n\t\t\t}\n\t\t}\n\t\tif (num - arr[lo][key] <= arr[hi][key] - num) {\n\t\t\treturn lo;\n\t\t}\n\t\treturn hi;\n\t}\n\t\n\tstatic binarySearchClosest<ArrayItem>(arr: ArrayItem[], num: number, key: string): ArrayItem {\n\t\tlet ind = this.binarySearchClosestInd(arr, num, key);\n\t\treturn arr[ind];\n\t}\n\n\n\tstatic rectsIntersect(r1: number[], r2: number[]) {\n\t\tlet [left1, top1, width1, height1] = r1;\n\t\tlet [left2, top2, width2, height2] = r2;\n\t\tlet [right1, right2, bottom1, bottom2] = [left1 + width1, left2 + width2, top1 + height1, top2 + height2];\n\t\treturn !(left2 > right1 ||\n\t\t\tright2 < left1 ||\n\t\t\ttop2 > bottom1 ||\n\t\t\tbottom2 < top1\n\t\t);\n\t}\n\n\n\tstatic throttle(func: Function, ms: number) {\n\n\t\tvar isThrottled = false,\n\t\t\tsavedArgs: any,\n\t\t\tsavedThis: any;\n\n\t\tfunction wrapper() {\n\n\t\t\tif (isThrottled) { // (2)\n\t\t\t\tsavedArgs = arguments;\n\t\t\t\tsavedThis = this;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunc.apply(this, arguments); // (1)\n\n\t\t\tisThrottled = true;\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tisThrottled = false; // (3)\n\t\t\t\tif (savedArgs) {\n\t\t\t\t\twrapper.apply(savedThis, savedArgs);\n\t\t\t\t\tsavedArgs = savedThis = null;\n\t\t\t\t}\n\t\t\t}, ms);\n\t\t}\n\n\t\treturn wrapper;\n\t}\n\n\tstatic msToTimeString(timestamp: number) {\n\t\tvar h = Math.floor(timestamp / 360000);\n\t\tvar m =  Math.floor(timestamp / 60000);\n\t\tvar s =  Math.floor(timestamp / 1000);\n\t\treturn h + ':' + m + ':' + s;\n\t}\n\t\n\tstatic getRandomItem<T>(arr: Array<T>): T {\n\t\tvar ind = Math.floor(Math.random() * arr.length);\n\t\treturn arr[ind];\n\t}\n\n\tstatic copyProps(srcObject: TIteralable, dstObject: TIteralable, props: TIteralable, excludeProps: string[] = []) {\n\t\tfor (var key in props) {\n\t\t\tif (excludeProps.indexOf(key) !== -1) continue;\n\t\t\tif (srcObject[key] == void 0) continue;\n\t\t\tif (isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t\t\t\tthis.copyProps(srcObject[key], dstObject[key], props[key])\n\t\t\t} else {\n\t\t\t\tdstObject[key] = this.deepCopy(srcObject[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Utils.ts\n **/","/// <reference path=\"./ResizeSensor.ts\" />\n\n// TODO: think about different bundles\n\nimport { ResizeSensorType } from './ResizeSensor';\n(<any>window).TweenLite = TweenMax;\n(<any>window).Stats = require('three/examples/js/libs/stats.min');\n\n// require('gsap/src/uncompressed/easing/EasePack.js');\n// require('three/examples/js/renderers/CanvasRenderer.js');\n// require('three/examples/js/renderers/Projector.js');\nexport const isPlainObject = require('is-plain-object') as Function;\nexport const EE2 = require('eventemitter2') as typeof EventEmitter2;\n\n\nexport { Promise } from '../polyfills/es6-promise';\n\nexport * from './ResizeSensor';\nexport const ResizeSensor = require('css-element-queries/src/ResizeSensor') as ResizeSensorType;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/deps.ts\n **/","// stats.js - http://github.com/mrdoob/stats.js\nvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\nif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\nStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\nv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/examples/js/libs/stats.min.js\n ** module id = 6\n ** module chunks = 0 1\n **/","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nmodule.exports = function isPlainObject(o) {\n  var ctor,prot;\n  \n  if (isObjectObject(o) === false) return false;\n  \n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n  \n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n  \n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n  \n  // Most likely a plain Object\n  return true;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/is-plain-object/index.js\n ** module id = 7\n ** module chunks = 0 1\n **/","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isObject(val) {\n  return val != null && typeof val === 'object'\n    && !Array.isArray(val);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/isobject/index.js\n ** module id = 8\n ** module chunks = 0 1\n **/","/*!\n * EventEmitter2\n * https://github.com/hij1nx/EventEmitter2\n *\n * Copyright (c) 2013 hij1nx\n * Licensed under the MIT license.\n */\n;!function(undefined) {\n\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = {};\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n\n      this._conf = conf;\n\n      conf.delimiter && (this.delimiter = conf.delimiter);\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this.newListener = conf.newListener);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this.newListener = false;\n    configure.call(this, conf);\n  }\n\n  //\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return [];\n    }\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n    if (i === typeLength && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return [tree];\n      } else {\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n        return [tree];\n      }\n    }\n\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (currentType === '*') {\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n          }\n        }\n        return listeners;\n      } else if(currentType === '**') {\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n        if(endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n        }\n\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            if(branch === '*' || branch === '**') {\n              if(tree[branch]._listeners && !endReached) {\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n              }\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            } else if(branch === nextType) {\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            }\n          }\n        }\n        return listeners;\n      }\n\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n    }\n\n    xTree = tree['*'];\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i+1);\n    }\n\n    xxTree = tree['**'];\n    if(xxTree) {\n      if(i < typeLength) {\n        if(xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength);\n        }\n\n        // Build arrays of matching next branches and others.\n        for(branch in xxTree) {\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n            if(branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\n            } else if(branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n            }\n          }\n        }\n      } else if(xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength);\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener) {\n\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n    //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n    for(var i = 0, len = type.length; i+1 < len; i++) {\n      if(type[i] === '**' && type[i+1] === '**') {\n        return;\n      }\n    }\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n\n      if (!tree[name]) {\n        tree[name] = {};\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        }\n        else if(typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        }\n        else if (isArray(tree._listeners)) {\n\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n\n            var m = defaultMaxListeners;\n\n            if (typeof this._events.maxListeners !== 'undefined') {\n              m = this._events.maxListeners;\n            }\n\n            if (m > 0 && tree._listeners.length > m) {\n\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' +\n                            'leak detected. %d listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit.',\n                            tree._listeners.length);\n              console.trace();\n            }\n          }\n        }\n        return true;\n      }\n      name = type.shift();\n    }\n    return true;\n  }\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n    if (!this._conf) this._conf = {};\n    this._conf.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n\n    this.on(event, listener);\n\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function() {\n\n    this._events || init.call(this);\n\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) { return false; }\n    }\n\n    // Loop through the *_all* functions and invoke them.\n    if (this._all) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        this._all[i].apply(this, args);\n      }\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n\n      if (!this._all &&\n        !this._events.error &&\n        !(this.wildcard && this.listenerTree.error)) {\n\n        if (arguments[1] instanceof Error) {\n          throw arguments[1]; // Unhandled 'error' event\n        } else {\n          throw new Error(\"Uncaught, unspecified 'error' event.\");\n        }\n        return false;\n      }\n    }\n\n    var handler;\n\n    if(this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    }\n    else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      if (arguments.length === 1) {\n        handler.call(this);\n      }\n      else if (arguments.length > 1)\n        switch (arguments.length) {\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n          // slower\n          default:\n            var l = arguments.length;\n            var args = new Array(l - 1);\n            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n            handler.apply(this, args);\n        }\n      return true;\n    }\n    else if (handler) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        this.event = type;\n        listeners[i].apply(this, args);\n      }\n      return (listeners.length > 0) || !!this._all;\n    }\n    else {\n      return !!this._all;\n    }\n\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n\n    if (typeof type === 'function') {\n      this.onAny(type);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n    this._events || init.call(this);\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    this.emit('newListener', type, listener);\n\n    if(this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    }\n    else if(typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n    else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n      // Check for listener leak\n      if (!this._events[type].warned) {\n\n        var m = defaultMaxListeners;\n\n        if (typeof this._events.maxListeners !== 'undefined') {\n          m = this._events.maxListeners;\n        }\n\n        if (m > 0 && this._events[type].length > m) {\n\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' +\n                        'leak detected. %d listeners added. ' +\n                        'Use emitter.setMaxListeners() to increase limit.',\n                        this._events[type].length);\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if(!this._all) {\n      this._all = [];\n    }\n\n    // Add the function to the event listener collection.\n    this._all.push(fn);\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,leafs=[];\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n    }\n    else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({_listeners:handlers});\n    }\n\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n      if (isArray(handlers)) {\n\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener ||\n            (handlers[i].listener && handlers[i].listener === listener) ||\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if(this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        }\n        else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if(this.wildcard) {\n            delete leaf._listeners;\n          }\n          else {\n            delete this._events[type];\n          }\n        }\n        return this;\n      }\n      else if (handlers === listener ||\n        (handlers.listener && handlers.listener === listener) ||\n        (handlers._origin && handlers._origin === listener)) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function(type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n        var leaf = leafs[iLeaf];\n        leaf._listeners = null;\n      }\n    }\n    else {\n      if (!this._events[type]) return this;\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function(type) {\n    if(this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n\n    if (!this._events[type]) this._events[type] = [];\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  if (typeof define === 'function' && define.amd) {\n     // AMD. Register as an anonymous module.\n    define(function() {\n      return EventEmitter;\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    exports.EventEmitter2 = EventEmitter;\n  }\n  else {\n    // Browser global.\n    window.EventEmitter2 = EventEmitter;\n  }\n}();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/eventemitter2/lib/eventemitter2.js\n ** module id = 9\n ** module chunks = 0 1\n **/","module.exports = {Promise: window['Promise']}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/polyfills/es6-promise.js\n ** module id = 10\n ** module chunks = 0 1\n **/","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var shrinkChild = shrink.childNodes[0];\n\n            var lastWidth, lastHeight;\n\n            var reset = function() {\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n                expand.scrollLeft = expand.scrollWidth;\n                expand.scrollTop = expand.scrollHeight;\n                shrink.scrollLeft = shrink.scrollWidth;\n                shrink.scrollTop = shrink.scrollHeight;\n                lastWidth = element.offsetWidth;\n                lastHeight = element.offsetHeight;\n            };\n\n            reset();\n\n            var changed = function() {\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            var onScroll = function() {\n              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                  changed();\n              }\n              reset();\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        var elementType = Object.prototype.toString.call(element);\n        var isCollectionTyped = ('[object Array]' === elementType\n            || ('[object NodeList]' === elementType)\n            || ('[object HTMLCollection]' === elementType)\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n        );\n\n        if (isCollectionTyped) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n\n        this.detach = function() {\n            if (isCollectionTyped) {\n                var i = 0, j = element.length;\n                for (; i < j; i++) {\n                    ResizeSensor.detach(element[i]);\n                }\n            } else {\n                ResizeSensor.detach(element);\n            }\n        };\n    };\n\n    ResizeSensor.detach = function(element) {\n        if (element.resizeSensor) {\n            element.removeChild(element.resizeSensor);\n            delete element.resizeSensor;\n            delete element.resizedAttached;\n        }\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ResizeSensor;\n    }\n    else {\n        window.ResizeSensor = ResizeSensor;\n    }\n\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-element-queries/src/ResizeSensor.js\n ** module id = 11\n ** module chunks = 0 1\n **/","import {EE2} from './deps/deps';\n\n/**\n * this class uses as proxy for EventEmitter2\n */\nexport class EventEmitter {\n\tprivate ee: EventEmitter2;\n\tconstructor() {\n\t\tthis.ee = new EE2();\n\t}\n\temit(eventName: string, ...args: any[]) {\n\t\tthis.ee.emit(eventName, ...args)\n\t}\n\ton(eventName: string, callback: Function) {\n\t\treturn this.ee.on(eventName, callback)\n\t}\n\toff(eventName: string, callback: Function) {\n\t\treturn this.ee.off(eventName, callback);\n\t}\n\tsubscribe(eventName: string, callback: Function): Function {\n\t\tthis.on(eventName, callback);\n\t\treturn () => this.off(eventName, callback);\n\t}\n\tsetMaxListeners(listenersCount: number) {\n\t\tthis.ee.setMaxListeners(listenersCount);\n\t}\n\tremoveAllListeners(eventName?: string) {\n\t\tthis.ee.removeAllListeners(eventName);\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventEmmiter.ts\n **/","import Vector3 = THREE.Vector3;\nimport { ITrendOptions, Trend, ITrendData, TREND_TYPE } from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Utils} from './Utils';\nimport {TrendsManager, ITrendsOptions} from \"./TrendsManager\";\nimport {Screen} from \"./Screen\";\nimport {AxisMarks} from \"./AxisMarks\";\nimport {\n\tAXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions, IAnimationsOptions, AXIS_RANGE_TYPE\n} from \"./interfaces\";\nimport { Promise } from './deps/deps';\nimport { ChartPlugin } from './Plugin';\n\n\ninterface IRecalculatedStateResult {\n\tchangedProps: IChartState,\n\tpatch: IChartState\n}\n\nconst CHART_STATE_EVENTS = {\n\tINITIAL_STATE_APPLIED: 'initialStateApplied',\n\tREADY: 'ready',\n\tDESTROY: 'destroy',\n\tCHANGE: 'change',\n\tTREND_CHANGE: 'trendChange',\n\tTRENDS_CHANGE: 'trendsChange',\n\tZOOM: 'zoom',\n\tRESIZE: 'resize',\n\tSCROLL: 'scroll',\n\tSCROLL_STOP: 'scrollStop',\n\tPLUGINS_STATE_CHANGED: 'pluginsStateChanged'\n};\n\n/**\n * readonly computed state data\n * calculated after recalculateState() call\n * contains cached values\n */\nexport interface IChartStateComputedData {\n\ttrends?: {\n\t\tmaxXVal: number,\n\t\tminXVal: number\n\t}\n}\n\nexport interface IChartState {\n\tprevState?: IChartState,\n\twidth?: number;\n\theight?: number;\n\tzoom?: number;\n\txAxis?: IAxisOptions,\n\tyAxis?: IAxisOptions,\n\tanimations?: IAnimationsOptions,\n\ttrends?: ITrendsOptions,\n\ttrendDefaultState?: ITrendOptions;\n\tcursor?: {\n\t\tdragMode?: boolean,\n\t\tx?: number,\n\t\ty?: number\n\t},\n\n\t/**\n\t * use fps = 0 for no limits\n\t */\n\tautoRender?: {enabled?: boolean, fps?: number};\n\n\t/**\n\t * by default 'WebGLRenderer'\n\t * also available 'CanvasRenderer'\n\t */\n\trenderer?: 'WebGLRenderer' | 'CanvasRenderer';\n\tfont?: {s?: string, m?: string, l?:string}\n\n\n\t/**\n\t * buffer size for displayed segments\n\t * used by widgets\n\t */\n\tmaxVisibleSegments?: number;\n\tautoResize?: boolean;\n\tcontrols?: {enabled: boolean};\n\tautoScroll?: boolean;\n\tshowStats?: boolean;\n\tbackgroundColor?: number;\n\tbackgroundOpacity?: number;\n\tcomputedData?: IChartStateComputedData,\n\tpluginsState?: {[pluginName: string]: any};\n\teventEmitterMaxListeners?: number;\n}\n\n/**\n *  all state changes caused only by Chart.setState method\n */\nexport class Chart {\n\n\tdata: IChartState = {\n\t\tprevState: {},\n\t\tzoom: 0,\n\t\txAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.ALL,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tscroll: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 0, end: 5},\n\t\t\t\tmargin: {start: 0, end: 5}\n\t\t\t},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tgrid: {enabled: true, minSizePx:  100},\n\t\t\tautoScroll: true,\n\t\t\tmarks: [],\n\t\t\tcolor: '#5273bd'\n\t\t},\n\t\tyAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.RELATIVE_END,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 5, end: 5},\n\t\t\t\tmargin: {start: 5, end: 5},\n\t\t\t},\n\t\t\tgrid: {enabled: true, minSizePx:  50},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tmarks: [],\n\t\t\tcolor: '#5273bd'\n\t\t},\n\t\tanimations: {\n\t\t\tenabled: true,\n\t\t\ttrendChangeSpeed: 0.5,\n\t\t\ttrendChangeEase: void 0,\n\t\t\tzoomSpeed: 0.25,\n\t\t\tzoomEase:  void 0,\n\t\t\tscrollSpeed: 0.5,\n\t\t\tscrollEase: Linear.easeNone,\n\t\t\tautoScrollSpeed: 1,\n\t\t\tautoScrollEase: Linear.easeNone,\n\t\t},\n\t\tautoRender: {enabled: true, fps: 0},\n\t\tautoResize: true,\n\t\trenderer: 'WebGLRenderer',\n\t\tautoScroll: true,\n\t\tcontrols: {enabled: true},\n\t\ttrendDefaultState: {\n\t\t\tenabled: true,\n\t\t\ttype: TREND_TYPE.LINE,\n\t\t\tdata: [],\n\t\t\tmaxSegmentLength: 1000,\n\t\t\tlineWidth: 2,\n\t\t\tlineColor: 0xFFFFFF,\n\t\t\thasBackground: false,\n\t\t\tbackgroundColor: 'rgba(#5273BD, 0.15)',\n\t\t\thasBeacon: false,\n\t\t\tsettingsForTypes: {\n\t\t\t\tCANDLE: {\n\t\t\t\t\tminSegmentLengthInPx: 20,\n\t\t\t\t\tmaxSegmentLengthInPx: 40,\n\t\t\t\t},\n\t\t\t\tLINE: {\n\t\t\t\t\tminSegmentLengthInPx: 2,\n\t\t\t\t\tmaxSegmentLengthInPx: 10,\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcursor: {\n\t\t\tdragMode: false,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\tfont: {\n\t\t\ts: '11px Arial',\n\t\t\tm: '12px Arial',\n\t\t\tl: '13px Arial'\n\t\t},\n\t\tbackgroundColor: 0x000000,\n\t\tbackgroundOpacity: 1,\n\t\tshowStats: false,\n\t\tpluginsState: {},\n\t\teventEmitterMaxListeners: 20,\n\t\tmaxVisibleSegments: 1280\n\t};\n\tplugins: {[pluginName: string]: ChartPlugin} = {};\n\ttrendsManager: TrendsManager;\n\tscreen: Screen;\n\txAxisMarks: AxisMarks;\n\tyAxisMarks: AxisMarks;\n\n\t/**\n\t * true then chart was initialized and ready to use\n\t */\n\tisReady = false;\n\n\n\tprivate ee: EventEmitter;\n\n\tconstructor(\n\t\tinitialState: IChartState,\n\t\tplugins: ChartPlugin[] = []\n\t) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n\n\t\tthis.data = Utils.deepMerge(this.data, initialState);\n\t\tthis.trendsManager = new TrendsManager(this, initialState);\n\t\tinitialState.trends = this.trendsManager.calculatedOptions;\n\t\tinitialState = this.installPlugins(plugins, initialState);\n\t\tthis.setState(initialState);\n\t\tthis.setState({computedData: this.getComputedData()});\n\t\tthis.savePrevState();\n\n\t\tthis.screen = new Screen(this);\n\t\tthis.xAxisMarks = new AxisMarks(this, AXIS_TYPE.X);\n\t\tthis.yAxisMarks = new AxisMarks(this, AXIS_TYPE.Y);\n\t\tthis.initListeners();\n\t\t\n\t\t// message to other modules that Chart.data is ready for use\n\t\tthis.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\n\t\t// message to other modules that Chart is ready for use\n\t\tthis.isReady = true;\n\t\tthis.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t}\n\n\t/**\n\t * destroy state, use ChartView.destroy to completely destroy chart\n\t */\n\tdestroy() {\n\t\tthis.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t\tthis.ee.removeAllListeners();\n\t\tthis.data = {};\n\t}\n\n\tonDestroy(cb: Function) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t}\n\n\tonInitialStateApplied(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t}\n\n\tonReady(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t}\n\n\tonChange(cb: (changedProps: IChartState) => void ) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t}\n\n\tonTrendChange(cb: (trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t}\n\n\tonTrendsChange(cb: (trendsOptions: ITrendsOptions) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t}\n\n\tonScrollStop(cb: () => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t}\n\n\tonScroll(cb: (scrollOptions: {deltaX: number}) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t}\n\n\tonZoom(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t}\n\n\tonResize(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t}\n\n\tonPluginsStateChange(cb: (changedPluginsStates: {[pluginName: string]: Plugin}) => any) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t}\n\t\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.trendsManager.getTrend(trendName);\n\t}\n\n\tsetState(newState: IChartState, eventData?: any, silent = false) {\n\t\tlet stateData = this.data as {[key: string]: any};\n\t\tlet newStateObj = newState as {[key: string]: any};\n\n\t\tvar changedProps: {[key: string]: any} = {};\n\t\tfor (let key in newStateObj) {\n\t\t\tif (stateData[key] !== newStateObj[key]) {\n\t\t\t\tchangedProps[key] = newStateObj[key] as any;\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(changedProps as IChartState);\n\n\n\t\t// temporary remove trends data from newState by performance reasons\n\t\tlet trendsData: {[trendName: string]: ITrendData} = {};\n\t\tif (newState.trends) for (let trendName in newState.trends) {\n\t\t\tlet trendOptions = newState.trends[trendName];\n\t\t\tif (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t\t\tdelete trendOptions.data;\n\t\t}\n\t\tlet newStateContainsData = Object.keys(trendsData).length > 0;\n\t\t\n\n\t\tthis.data = Utils.deepMerge(this.data, newState, false);\n\n\t\t// return data to state\n\t\tif (newStateContainsData) for (let trendName in trendsData) {\n\t\t\tthis.data.trends[trendName].data = trendsData[trendName];\n\t\t}\n\n\t\tif (silent) return;\n\n\t\t// recalculate all dynamic state props\n\t\tvar recalculateResult = this.recalculateState(changedProps);\n\t\tchangedProps = recalculateResult.changedProps;\n\t\t\n\t\tthis.emitChangedStateEvents(changedProps, eventData);\n\n\t}\n\n\t/**\n\t * recalculate all computed state props\n\t */\n\tprivate recalculateState(changedProps?: IChartState): IRecalculatedStateResult {\n\t\tvar data = this.data;\n\t\tvar patch: IChartState = {};\n\t\tvar actualData = Utils.deepMerge({}, data);\n\n\t\t// recalculate scroll position by changed cursor options\n\t\tvar cursorOptions = changedProps.cursor;\n\t\tvar isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t\tif (isMouseDrag) {\n\t\t\tvar oldX = data.prevState.cursor.x;\n\t\t\tvar currentX =  cursorOptions.x;\n\t\t\tvar currentScroll = data.xAxis.range.scroll;\n\t\t\tvar deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t\t\tpatch.xAxis = {range: {scroll: currentScroll + deltaXVal}};\n\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: patch.xAxis} as IChartState)\n\t\t}\n\n\t\tlet chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\n\t\tlet scrollXChanged = false;\n\t\tlet needToRecalculateXAxis = (\n\t\t\tisMouseDrag ||\n\t\t\tchartWasResized ||\n\t\t\t(changedProps.xAxis && (changedProps.xAxis.range)) ||\n\t\t\tthis.data.xAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateXAxis) {\n\t\t\tlet xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t\t\tif (xAxisPatch) {\n\t\t\t\tscrollXChanged = true;\n\t\t\t\tpatch = Utils.deepMerge(patch, {xAxis: xAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: xAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\n\n\t\t// recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\n\t\tlet needToRecalculateYAxis = (\n\t\t\tchartWasResized ||\n\t\t\t(\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.RELATIVE_END ||\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.AUTO ||\n\t\t\t\tdata.yAxis.range.isMirrorMode\n\t\t\t) &&\n\t\t\t(scrollXChanged || changedProps.trends || changedProps.yAxis) ||\n\t\t\tthis.data.yAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateYAxis){\n\t\t\tlet yAxisPatch = this.recalculateYAxis(actualData);\n\t\t\tif (yAxisPatch) {\n\t\t\t\tpatch = Utils.deepMerge(patch, {yAxis: yAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {yAxis: yAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(patch);\n\t\tlet allChangedProps = Utils.deepMerge(changedProps, patch);\n\t\tpatch.computedData = this.getComputedData(allChangedProps);\n\t\tthis.savePrevState(patch);\n\t\tthis.data = Utils.deepMerge(this.data, patch);\n\t\treturn {changedProps: allChangedProps, patch: patch}\n\t}\n\n\tprivate getComputedData(changedProps?: IChartState): IChartStateComputedData {\n\t\tvar computeAll = !changedProps;\n\t\tvar computedData: IChartStateComputedData = {};\n\n\t\tif (computeAll || changedProps.trends && this.trendsManager) {\n\t\t\tcomputedData.trends = {\n\t\t\t\tmaxXVal: this.trendsManager.getEndXVal(),\n\t\t\t\tminXVal: this.trendsManager.getStartXVal()\n\t\t\t}\n\t\t}\n\t\treturn computedData;\n\t}\n\n\tprivate savePrevState(changedProps?: IChartState) {\n\t\tif (!changedProps) changedProps = this.data;\n\t\tvar prevState = this.data.prevState;\n\n\t\t// prevent to store prev trend data by performance reasons\n\t\tUtils.copyProps(this.data, prevState, changedProps, ['trends']);\n\n\t}\n\n\tprivate emitChangedStateEvents(changedProps: IChartState, eventData: any) {\n\t\tvar prevState = this.data.prevState;\n\n\t\t// emit common change event\n\t\tthis.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\n\t\t// emit event for each changed state property\n\t\tfor (let key in changedProps) {\n\t\t\tthis.ee.emit(key + 'Change', (changedProps as {[key: string]: any})[key], eventData);\n\t\t}\n\n\t\tif (!this.isReady) return;\n\n\t\t// emit special events based on changed state\n\t\tlet scrollStopEventNeeded = (\n\t\t\tchangedProps.cursor &&\n\t\t\tchangedProps.cursor.dragMode === false &&\n\t\t\tprevState.cursor.dragMode === true\n\t\t);\n\t\tscrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\n\t\tlet scrollChangeEventsNeeded = (\n\t\t\tchangedProps.xAxis &&\n\t\t\tchangedProps.xAxis.range &&\n\t\t\tchangedProps.xAxis.range.scroll !== void 0\n\t\t);\n\t\tscrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\n\t\tlet zoomEventsNeeded = (\n\t\t\t(changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\n\t\t\t(changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom)\n\t\t);\n\t\tzoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\n\t\tlet resizeEventNeeded = (changedProps.width || changedProps.height);\n\t\tresizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\n\t\tlet pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\n\t\tpluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t}\n\n\n\t/**\n\t * init plugins and save plugins options in initialState\n\t */\n\tprivate installPlugins(plugins: ChartPlugin[], initialState: IChartState): IChartState {\n\t\tinitialState.pluginsState = {};\n\t\tplugins.forEach(plugin => {\n\t\t\tlet PluginClass = plugin.constructor as typeof ChartPlugin;\n\t\t\tlet pluginName = PluginClass.NAME;\n\t\t\tinitialState.pluginsState[pluginName] = Utils.deepMerge({}, plugin.initialState);\n\t\t\tthis.plugins[pluginName] = plugin;\n\t\t\tplugin.setupChartState(this);\n\t\t});\n\t\treturn initialState;\n\t}\n\n\n\t/**\n\t * returns plugin instance by plugin name\n\t * @example\n\t */\n\tgetPlugin(pluginName: string): ChartPlugin {\n\t\treturn this.plugins[pluginName];\n\t}\n\n\n\tprivate initListeners() {\n\t\tthis.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, (changedTrends: ITrendsOptions, newData: ITrendData) => {\n\t\t\tthis.handleTrendsChange(changedTrends, newData)\n\t\t});\n\t}\n\n\tprivate handleTrendsChange(changedTrends: ITrendsOptions, newData: ITrendData) {\n\t\tfor (let trendName in changedTrends) {\n\t\t\tthis.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t\t}\n\t}\n\n\tprivate recalculateXAxis(actualData: IChartState, changedProps: IChartState): IAxisOptions {\n\t\tvar axisRange = actualData.xAxis.range;\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar isInitialize = axisRange.zeroVal == void 0;\n\t\tvar zeroVal: number, scaleFactor: number;\n\t\tvar zoom = axisRange.zoom;\n\n\t\tif (axisRange.isMirrorMode) {\n\t\t\tUtils.error('range.isMirrorMode available only for yAxis.range');\n\t\t}\n\n\t\tif (isInitialize) {\n\t\t\tzeroVal = axisRange.from;\n\t\t\tscaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t} else {\n\t\t\tzeroVal = axisRange.zeroVal;\n\t\t\tscaleFactor = axisRange.scaleFactor;\n\n\t\t\t// recalculate range.zoom and range.scroll then range.from or range.to was changed\n\t\t\tif (\n\t\t\t\tchangedProps.xAxis &&\n\t\t\t\t(changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)\n\t\t\t) {\n\t\t\t\tif (changedProps.xAxis.range.zoom) {\n\t\t\t\t\tUtils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t\t\t\t}\n\t\t\t\tlet currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\t\tpatch.range.scroll = axisRange.from - zeroVal;\n\t\t\t\tpatch.range.zoom = currentScaleFactor / scaleFactor;\n\t\t\t\treturn patch;\n\t\t\t}\n\t\t}\n\n\n\t\t// recalculate range.from and range.to then range.zoom or range.scroll was changed\n\t\tdo {\n\t\t\tvar from = zeroVal + axisRange.scroll;\n\t\t\tvar to = from + actualData.width / (scaleFactor * zoom);\n\t\t\tvar rangeLength = to - from;\n\t\t\tvar needToRecalculateZoom = false;\n\t\t\tvar rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\n\t\t\tvar rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\n\t\t\tneedToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t\t\tif (needToRecalculateZoom) {\n\t\t\t\tvar fixScale = rangeLength > axisRange.maxLength ?\n\t\t\t\t\trangeLength / axisRange.maxLength :\n\t\t\t\t\trangeLength / axisRange.minLength;\n\t\t\t\tvar zoom = zoom * fixScale;\n\t\t\t\tpatch.range.zoom = zoom;\n\t\t\t}\n\t\t} while (needToRecalculateZoom);\n\n\t\tpatch.range.from = from;\n\t\tpatch.range.to = to;\n\t\treturn patch;\n\t}\n\n\n\tprivate recalculateYAxis(actualData: IChartState): IAxisOptions {\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar yAxisRange = actualData.yAxis.range;\n\t\tvar isInitialize = yAxisRange.scaleFactor == void 0;\n\t\tvar trends = this.trendsManager;\n\t\tvar trendsEndXVal = trends.getEndXVal();\n\t\tvar trendsStartXVal = trends.getStartXVal();\n\t\tvar xRange = actualData.xAxis.range;\n\t\tvar {from: xFrom, to: xTo} = xRange;\n\t\tvar xRangeLength = xTo - xFrom;\n\t\tvar zeroVal: number, scaleFactor: number, scroll: number, zoom: number, needToZoom: boolean;\n\n\t\t// check situation when chart was scrolled behind trends end or before trends start\n\t\tif (xTo > trendsEndXVal) {\n\t\t\txTo = trendsEndXVal;\n\t\t\txFrom = xTo - xRangeLength;\n\t\t} else if (xFrom < trendsStartXVal) {\n\t\t\txFrom = trendsStartXVal;\n\t\t\txTo = xFrom + xRangeLength;\n\t\t}\n\n\t\tvar maxY = trends.getMaxYVal(xFrom, xTo);\n\t\tvar minY = trends.getMinYVal(xFrom, xTo);\n\n\t\tvar trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t\tif (yAxisRange.type == AXIS_RANGE_TYPE.RELATIVE_END) {\n\t\t\tif (trendLastY > maxY) maxY = trendLastY;\n\t\t\tif (trendLastY < minY) minY = trendLastY;\n\t\t}\n\n\t\tif (yAxisRange.isMirrorMode) {\n\t\t\tif (yAxisRange.zeroVal == void 0) Utils.error('range.zeroVal must be set when range.isMirrorMode');\n\t\t\tlet distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t\t\tlet distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t\t\tlet maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t\t\tmaxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t\t\tminY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t\t}\n\t\tlet margin = yAxisRange.margin;\n\t\tlet padding = {\n\t\t\tstart: yAxisRange.padding.start + margin.start,\n\t\t\tend: yAxisRange.padding.end + margin.end\n\t\t};\n\n\t\tif (padding.end + padding.start >= actualData.height) {\n\t\t\tUtils.warn('Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly');\n\t\t}\n\n\t\tlet rangeLength = maxY - minY;\n\t\tlet paddingTopInPercents = padding.end / actualData.height;\n\t\tlet paddingBottomInPercents = padding.start / actualData.height;\n\t\tlet rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t\tlet visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t\tlet fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t\tlet toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t\t\n\t\tif (isInitialize) {\n\t\t\tzeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t\t\tscaleFactor = actualData.height / (toVal - fromVal);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t\tneedToZoom = true;\n\t\t} else {\n\t\t\tscaleFactor = yAxisRange.scaleFactor;\n\t\t\tzeroVal = yAxisRange.zeroVal;\n\n\t\t\tlet maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t\t\tlet minScreenY = Math.round(this.getScreenYByValue(minY));\n\t\t\tneedToZoom = (\n\t\t\t\tmaxScreenY > actualData.height - margin.end ||\n\t\t\t\tmaxScreenY < actualData.height - padding.end ||\n\t\t\t\tminScreenY < margin.start ||\n\t\t\t\tminScreenY > padding.start\n\t\t\t);\n\t\t}\n\n\t\tif (!needToZoom) return null;\n\n\t\tscroll = fromVal - zeroVal;\n\t\tzoom = (actualData.height / (toVal - fromVal)) / scaleFactor ;\n\n\t\tvar currentAxisRange = this.data.yAxis.range;\n\t\tif (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t\tif (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t\tif (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t\tif (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t\t\n\t\treturn patch;\n\t}\n\n\tzoom(zoomValue: number, origin = 0.5): Promise<void> {\n\t\tlet {zoom, scroll, scaleFactor} = this.data.xAxis.range;\n\t\tlet newZoom = zoom * zoomValue;\n\t\tlet currentRange = this.data.width / (scaleFactor * zoom);\n\t\tlet nextRange = this.data.width / (scaleFactor * newZoom);\n\t\tlet newScroll = scroll + (currentRange - nextRange) * origin;\n\t\tthis.setState({xAxis: {range: {zoom: newZoom, scroll: newScroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.data.animations.enabled ? this.data.animations.zoomSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\t\n\tzoomToRange(range: number, origin?: number): Promise<void> {\n\t\tvar {scaleFactor, zoom} = this.data.xAxis.range;\n\t\tlet currentRange = this.data.width / (scaleFactor * zoom);\n\t\treturn this.zoom(currentRange / range, origin);\n\t}\n\n\tscrollToEnd(): Promise<void> {\n\t\tlet state = this.data;\n\t\tlet endXVal = this.trendsManager.getEndXVal();\n\t\tlet range = state.xAxis.range;\n\t\tvar scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t\tthis.setState({xAxis: {range: {scroll: scroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.data.animations.enabled ? this.data.animations.scrollSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to xVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.data.xAxis.range;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to yVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.data.yAxis.range;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n\t}\n\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  returns x value by screen x coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\tvar {zeroVal, scroll} = this.data.xAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  returns y value by screen y coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\tvar {zeroVal, scroll} = this.data.yAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByYAxis(y);\n\t}\n\n\n\t/**\n\t *  returns screen x value by screen y coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.data.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t/**\n\t *  returns screen y value by screen y coordinate\n\t */\n\tgetScreenYByValue(yVal: number): number {\n\t\tvar {scroll, zeroVal} = this.data.yAxis.range;\n\t\treturn this.valueToPxByYAxis(yVal - zeroVal - scroll)\n\t}\n\n\n\t/**\n\t * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\n\n\tgetScreenLeftVal() {\n\t\treturn this.getValueByScreenX(0);\n\t}\n\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.data.width);\n\t}\n\n\n\tgetPaddingRight(): number {\n\t\treturn this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Chart.ts\n **/","import {Chart, IChartState} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {TrendSegmentsManager} from \"./TrendSegmentsManager\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Promise} from './deps/deps';\nimport { TChartColor } from './Color';\n\nexport interface IPrependPromiseExecutor {\n\t(requestedDataLength: number, resolve: (data: TTrendRawData) => void, reject: () => void): void;\n}\nconst EVENTS = {\n\tCHANGE: 'Change',\n\tPREPEND_REQUEST: 'prependRequest'\n};\nexport enum TREND_TYPE {LINE, CANDLE}\nexport type TTrendRawData = ITrendData | number[];\nexport interface ITrendItem {xVal: number, yVal: number, id?: number}\nexport interface ITrendData extends Array<ITrendItem>{}\nexport interface ITrendTypeSettings {\n\tminSegmentLengthInPx?: number;\n\tmaxSegmentLengthInPx?: number;\n}\nexport interface ITrendOptions {\n\tenabled?: boolean,\n\tdata?: ITrendData\n\tdataset?: ITrendData | number[];\n\tname?: string;\n\ttype?: TREND_TYPE;\n\tlineWidth?: number;\n\tlineColor?: TChartColor;\n\tbackgroundColor?: TChartColor;\n\thasIndicator?: boolean;\n\thasBackground?: boolean;\n\thasBeacon?: boolean;\n\tmaxSegmentLength?: number;\n\tsettingsForTypes?: {\n\t\tCANDLE?: ITrendTypeSettings,\n\t\tLINE?: ITrendTypeSettings\n\t}\n}\n\nexport class Trend {\n\tname: string;\n\tsegmentsManager: TrendSegmentsManager;\n\tminXVal = Infinity;\n\tminYVal = Infinity;\n\tmaxXVal = -Infinity;\n\tmaxYVal = -Infinity;\n\tprivate chartState: Chart;\n\tprivate calculatedOptions: ITrendOptions;\n\tprivate prependRequest: Promise<TTrendRawData>;\n\tprivate ee: EventEmitter;\n\t\n\tconstructor(chartState: Chart, trendName: string, initialState: IChartState) {\n\t\tvar options = initialState.trends[trendName];\n\t\tthis.name = trendName;\n\t\tthis.chartState = chartState;\n\t\tthis.calculatedOptions = Utils.deepMerge(this.chartState.data.trendDefaultState, options);\n\t\tthis.calculatedOptions.name = trendName;\n\t\tif (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t\tthis.calculatedOptions.dataset = [];\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvents();\n\t}\n\n\tprivate onInitialStateApplied() {\n\t\tthis.segmentsManager = new TrendSegmentsManager(this.chartState, this);\n\t}\n\n\tprivate bindEvents() {\n\t\tvar chartState = this.chartState;\n\t\tchartState.onInitialStateApplied(() => this.onInitialStateApplied());\n\t\tchartState.onScrollStop(() => this.checkForPrependRequest());\n\t\tchartState.onZoom(() => this.checkForPrependRequest());\n\t\tchartState.onTrendChange((trendName, changedOptions, newData) => this.ee.emit(EVENTS.CHANGE, changedOptions, newData));\n\t\tchartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tgetCalculatedOptions() {\n\t\treturn this.calculatedOptions;\n\t}\n\n\tappendData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData());\n\t\tvar updatedTrendData = options.data.concat(newData);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprependData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData(), true);\n\t\tvar updatedTrendData = newData.concat(options.data);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprivate changeData(allData: ITrendData, newData: ITrendData) {\n\t\tfor (let item of newData) {\n\t\t\tif (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t\t\tif (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t\t\tif (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t\t\tif (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t\t}\n\t\tvar options = this.getOptions();\n\t\tvar statePatch: IChartState = {trends: {[options.name]: {data: allData}}};\n\t\tthis.chartState.setState(statePatch, newData);\n\t}\n\t\n\tgetData(fromX?: number, toX?: number): ITrendData {\n\t\tvar data = this.getOptions().data;\n\t\tif (fromX == void 0 && toX == void 0) return data;\n\n\t\tfromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t\ttoX = toX !== void 0 ? toX : data[data.length].xVal;\n\t\tvar filteredData: ITrendData = [];\n\t\tfor (let item of data) {\n\t\t\tif (item.xVal < fromX) continue;\n\t\t\tif (item.xVal > toX) break;\n\t\t\tfilteredData.push(item)\n\t\t}\n\t\treturn filteredData;\n\t}\n\n\tgetFirstItem(): ITrendItem {\n\t\treturn this.getOptions().data[0];\n\t}\n\t\n\tgetLastItem(): ITrendItem {\n\t\tvar data = this.getOptions().data;\n\t\treturn data[data.length - 1];\n\t}\n\n\tgetOptions() {\n\t\treturn this.chartState.data.trends[this.name]\n\t}\n\n\tsetOptions(options: ITrendOptions) {\n\t\tthis.chartState.setState({trends: {[this.name]: options}});\n\t}\n\n\tonPrependRequest(cb: IPrependPromiseExecutor): Function {\n\t\tthis.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t\t}\n\t}\n\n\t/**\n\t * shortcut for Chart.onTrendChange\n\t */\n\tonChange(cb: (changedOptions: ITrendOptions, newData: ITrendData) => void): Function {\n\t\tthis.ee.on(EVENTS.CHANGE, cb);\n\t\treturn () => { this.ee.off(EVENTS.CHANGE, cb);}\n\t}\n\n\tonDataChange(cb: (newData: ITrendData) => void): Function {\n\t\tvar onChangeCb = (changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tif (newData) cb(newData);\n\t\t};\n\t\tthis.ee.on(EVENTS.CHANGE, onChangeCb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.CHANGE, onChangeCb);\n\t\t}\n\t}\n\n\tprivate checkForPrependRequest() {\n\t\tif (this.prependRequest) return;\n\t\tvar chartState = this.chartState;\n\t\tvar minXVal = chartState.data.computedData.trends.minXVal;\n\t\tvar minScreenX = chartState.getScreenXByValue(minXVal);\n\t\tvar needToRequest = minScreenX > 0;\n\t\tvar {from, to} = chartState.data.xAxis.range;\n\t\tvar requestedDataLength = to - from;\n\t\tif (!needToRequest) return;\n\t\t\n\t\tthis.prependRequest = new Promise<TTrendRawData>((resolve: Function, reject: Function) => {\n\t\t\tthis.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t\t});\n\n\t\tthis.prependRequest.then((newData: TTrendRawData) => {\n\t\t\tthis.prependData(newData);\n\t\t\tthis.prependRequest = null;\n\t\t}, () => {\n\t\t\tthis.prependRequest = null;\n\t\t})\n\t\n\t}\n\n\tstatic prepareData (newData: TTrendRawData, currentData?: ITrendData, isPrepend = false): ITrendData {\n\t\tvar data: ITrendData = [];\n\t\tif (typeof newData[0] == 'number') {\n\t\t\tcurrentData = currentData || [];\n\t\t\tlet initialItem: ITrendItem;\n\t\t\tlet xVal: number;\n\t\t\tif (isPrepend) {\n\t\t\t\tinitialItem = currentData[0];\n\t\t\t\txVal = initialItem.xVal - newData.length;\n\t\t\t} else {\n\t\t\t\tinitialItem = currentData[currentData.length - 1];\n\t\t\t\txVal = initialItem ? initialItem.xVal + 1 : 0;\n\t\t\t}\n\t\t\tfor (let yVal of newData as number[]) {\n\t\t\t\tdata.push({xVal: xVal, yVal: yVal, id: Utils.getUid()});\n\t\t\t\txVal++;\n\t\t\t}\n\t\t} else {\n\t\t\tdata = newData as ITrendData;\n\t\t}\n\t\treturn data;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Trend.ts\n **/","import { IIteralable } from \"./interfaces\";\nimport { EventEmitter } from './EventEmmiter';\nimport { Chart } from \"./Chart\";\nimport Vector3 = THREE.Vector3;\nimport { ITrendData, ITrendOptions, ITrendItem, Trend, TREND_TYPE, ITrendTypeSettings } from \"./Trend\";\nimport { Utils } from \"./Utils\";\n\nconst MAX_ANIMATED_SEGMENTS = 100;\nconst EVENTS = {\n\tREBUILD: 'rebuild',\n\tDISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\n\tANIMATION_FRAME: 'animationFrame'\n};\n\n/**\n *  Class helps to display and animate trends segments\n */\nexport class TrendSegmentsManager {\n\tsegmentsById: {[id: string]: TrendSegment} = {};\n\tsegments: TrendSegment[] = [];\n\tchartState: Chart;\n\tanimatedSegmentsIds: number[] = [];\n\tmaxSegmentLength: number;\n\tsegmentsLength = 0;\n\tfirstDisplayedSegmentInd: number;\n\tfirstDisplayedSegment: TrendSegment;\n\tlastDisplayedSegmentInd: number;\n\tlastDisplayedSegment: TrendSegment;\n\tprivate appendAnimation: TweenLite;\n\tprivate prependAnimation: TweenLite;\n\tprivate animatedSegmentsForAppend: number[] = [];\n\tprivate animatedSegmentsForPrepend: number[] = [];\n\tprivate nextEmptyId = 0;\n\tprivate startSegmentId = 0;\n\tprivate endSegmentId = 0;\n\tprivate trend: Trend;\n\tprivate ee: EventEmitter;\n\n\tconstructor (chartState: Chart, trend: Trend) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.trend = trend;\n\t\tthis.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t\tthis.tryToRebuildSegments();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.trend.onChange((changedOptions, newData) => this.onTrendChangeHandler(changedOptions, newData));\n\t\tthis.chartState.onZoom(() => this.onZoomHandler());\n\t\tthis.chartState.onScroll(() => this.recalculateDisplayedRange());\n\t\tthis.chartState.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.appendAnimation && this.appendAnimation.kill();\n\t\tthis.prependAnimation && this.prependAnimation.kill();\n\t}\n\n\tprivate onZoomHandler() {\n\t\tlet segmentsRebuilded = this.tryToRebuildSegments();\n\t\tif (!segmentsRebuilded) {\n\t\t\tthis.recalculateDisplayedRange()\n\t\t}\n\t}\n\n\tprivate onTrendChangeHandler(changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar needToRebuildSegments = (\n\t\t\tchangedOptions.type != void 0 ||\n\t\t\tchangedOptions.maxSegmentLength != void 0\n\t\t);\n\n\n\t\tif (needToRebuildSegments) {\n\t\t\tthis.tryToRebuildSegments(true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!newData) return;\n\n\t\tvar data = this.trend.getData();\n\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\tisAppend ? this.appendData(newData) : this.prependData(newData);\n\t\tthis.recalculateDisplayedRange();\n\t}\n\n\tgetSegment(id: number) {\n\t\treturn this.segmentsById[id];\n\t}\n\n\tgetEndSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.endSegmentId];\n\t}\n\n\tgetStartSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.startSegmentId];\n\t}\n\t\n\tprivate tryToRebuildSegments(force = false): boolean {\n\t\tlet options = this.trend.getOptions();\n\t\tlet trendTypeName = TREND_TYPE[options.type] as string;\n\t\tlet trendTypesSettings =  options.settingsForTypes as IIteralable;\n\t\tlet trendTypeSettings = trendTypesSettings[trendTypeName] as ITrendTypeSettings;\n\t\tlet {\n\t\t\tminSegmentLengthInPx,\n\t\t\tmaxSegmentLengthInPx\n\t\t} = trendTypeSettings;\n\n\t\tlet needToRebuild = this.segments.length === 0 || force;\n\t\tlet segmentLength = this.maxSegmentLength;\n\n\t\t// call toFixed(2) to prevent floating segment error compare\n\t\tlet currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t\tlet currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\n\t\tif (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t\t} else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t\t}\n\n\t\tif (!needToRebuild) return false;\n\n\t\tthis.maxSegmentLength = segmentLength;\n\t\tthis.segmentsById = {};\n\t\tthis.segments = [];\n\t\tthis.nextEmptyId = 0;\n\t\tthis.startSegmentId = 0;\n\t\tthis.endSegmentId = 0;\n\t\tthis.segmentsLength = 0;\n\t\tthis.stopAllAnimations();\n\t\tthis.appendData(null, true);\n\t\tthis.recalculateDisplayedRange(true);\n\t\tthis.ee.emit(EVENTS.REBUILD);\n\t}\n\n\tprivate stopAllAnimations() {\n\t\tthis.animatedSegmentsIds = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tif (this.prependAnimation) this.prependAnimation.kill();\n\t\tif (this.appendAnimation) this.appendAnimation.kill();\n\t}\n\t\n\tprivate recalculateDisplayedRange(segmentsAreRebuilded = false) {\n\t\tvar {from, to} = this.chartState.data.xAxis.range;\n\t\tvar {firstDisplayedSegment, lastDisplayedSegment} = this;\n\t\tvar displayedRange = to - from;\n\n\t\tthis.firstDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\n\t\tthis.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n\t\tthis.lastDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\n\t\tthis.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n\t\tif (segmentsAreRebuilded) return;\n\n\t\tvar displayedRangeChanged = (\n\t\t\tfirstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\n\t\t\tlastDisplayedSegment.id !== this.lastDisplayedSegment.id\n\t\t);\n\t\tif (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t}\n\n\t// getSegments(fromX?: number, toX?: number): TrendSegment[] {\n\t// \tvar segments = this.segments;\n\t// \tif (fromX == void 0 && toX == void 0) return segments;\n\t// \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\n\t// \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\n\t// \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\n\t// \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\n\t// \treturn segments.slice(startSegmentInd, endSegmentInd);\n\t// }\n\n\t/**\n\t * returns array of segments for values array\n\t * values must be sorted!\n\t */\n\tgetSegmentsForXValues(values: number[]): TrendSegment[] {\n\t\tvar valueInd = 0;\n\t\tvar value = values[valueInd];\n\t\tvar lastValueInd = values.length - 1;\n\t\tvar results: TrendSegment[] = [];\n\t\tvar segment = this.getStartSegment();\n\t\tif (!segment.hasValue) return [];\n\t\twhile (segment) {\n\t\t\n\t\t\twhile (value < segment.startXVal) {\n\t\t\t\tresults.push(void 0);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\n\t\t\twhile (value > segment.endXVal) {\n\t\t\t\tsegment = segment.getNext();\n\t\t\t\tif (!segment) break;\n\t\t\t}\n\t\t\n\t\t\tvar valueInPoint = (\n\t\t\t\tsegment.startXVal == value || segment.endXVal == value ||\n\t\t\t\t(segment.startXVal < value && segment.endXVal > value)\n\t\t\t);\n\t\t\tif (valueInPoint) {\n\t\t\t\tresults.push(segment);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\tif (valueInd > lastValueInd) break;\n\t\t}\n\t\treturn results;\n\t}\n\n\tonAnimationFrame(cb: (animationState: TrendSegmentsManager) => void): Function {\n\t\treturn this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t}\n\n\tonRebuild(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.REBUILD, cb);\n\t}\n\n\tonDisplayedRangeChanged(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t}\n\t\n\tallocateNextSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar prevSegment = this.segmentsById[this.endSegmentId];\n\t\tif (prevSegment && prevSegment.hasValue) {\n\t\t\tprevSegment.nextId = id;\n\t\t\tsegment.prevId = prevSegment.id;\n\t\t}\n\t\tthis.endSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.push(segment);\n\t\treturn segment;\n\t}\n\n\tallocatePrevSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar nextSegment = this.segmentsById[this.startSegmentId];\n\t\tif (nextSegment && nextSegment.hasValue) {\n\t\t\tnextSegment.prevId = id;\n\t\t\tsegment.nextId = nextSegment.id;\n\t\t}\n\t\tthis.startSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.unshift(segment);\n\t\treturn segment;\n\t}\n\n\tprivate appendData(newData: ITrendData, needRebuildSegments = false) {\n\n\t\t// WARNING: bottleneck method!\n\n\t\t// var t1 = performance.now();\n\t\tvar trendData = this.trend.getData();\n\t\tif (needRebuildSegments) {\n\t\t\tnewData = trendData;\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t}\n\n\t\tvar startItemInd = trendData.length - newData.length;\n\t\tvar segment = this.getEndSegment() || this.allocateNextSegment();\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\tvar itemInd = 0;\n\t\twhile (itemInd < newData.length) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.appendItem(item);\n\t\t\tlet isLastItem = itemInd == newData.length - 1;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd++;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForAppend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t\t\t\t\tsegment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForAppend.push(id);\n\n\t\t\t}\n\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocateNextSegment();\n\t\t\tlet prevItem = trendData[startItemInd + itemInd - 1];\n\t\t\tsegment.appendItem(prevItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.data.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\t// var t2 = performance.now();\n\t\t// console.log(t2 - t1);\n\n\t\t// do not create animation if segments was rebuilded\n\t\tif (needRebuildSegments) {\n\t\t\tfor (let segmentId of this.animatedSegmentsForAppend) {\n\t\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\t\tsegment.currentAnimationState = segment.createAnimationState();\n\t\t\t}\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t\treturn;\n\t\t}\n\t\tif (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time);\n\t}\n\n\n\t// TODO: refactor duplicated code from appendData\n\tprivate prependData(newData: ITrendData) {\n\t\tvar trendData = this.trend.getData();\n\t\tvar segment = this.getStartSegment() || this.segmentsById[0];\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar itemInd = newData.length - 1;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\twhile (itemInd >= 0) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.prependItem(item);\n\t\t\tlet isLastItem = itemInd == 0;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd--;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForPrepend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t\t\t\t\tsegment.initialAnimationState.endYVal =  initialAnimationState.startYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForPrepend.push(id);\n\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocatePrevSegment();\n\t\t\tlet nextItem = trendData[itemInd + 1];\n\t\t\tsegment.prependItem(nextItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.data.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\tif (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time, true);\n\t}\n\n\tprivate animate(time: number, isPrepend = false) {\n\n\t\tvar animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tvar animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\n\t\tif ((animation && animation.isActive()) || time == 0) {\n\t\t\tif (animation) animation.kill();\n\t\t\tthis.onAnimationFrameHandler(1, isPrepend);\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar animationsOptions = this.chartState.data.animations;\n\t\tvar ease = animationsOptions.trendChangeEase;\n\t\tvar objectToAnimate = {animationValue: 0};\n\t\tanimation = TweenLite.to(objectToAnimate, time, {animationValue: 1, ease});\n\t\tanimation.eventCallback('onUpdate', () => this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend));\n\t\tanimation.eventCallback('onComplete', () => {\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\tthis.appendAnimation = null;\n\t\t});\n\n\t\tif (isPrepend) {\n\t\t\tthis.prependAnimation = animation;\n\t\t} else {\n\t\t\tthis.appendAnimation = animation;\n\t\t}\n\t}\n\n\tprivate onAnimationFrameHandler(coefficient: number, isPrepend = false) {\n\t\tlet animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tfor (let segmentId of animatedSegmentsIds) {\n\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\tfor (let key in segment.targetAnimationState) {\n\t\t\t\tlet targetValue = segment.targetAnimationState[key] as number;\n\t\t\t\tlet initialValue = segment.initialAnimationState[key] as number;\n\t\t\t\tlet currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t\t\t\tsegment.currentAnimationState[key] = currentValue;\n\t\t\t}\n\t\t}\n\t\tthis.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t\tthis.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t}\n\n}\n\nexport interface ITrendSegmentState extends IIteralable {\n\txVal?: number;\n\tyVal?: number;\n\tstartXVal?: number;\n\tstartYVal?: number;\n\tendXVal?: number;\n\tendYVal?: number;\n\tmaxYVal?: number;\n\tminYVal?: number;\n\tmaxLength?: number;\n}\n\nexport class TrendSegment implements ITrendSegmentState {\n\tid: number;\n\tprevId: number;\n\tnextId: number;\n\thasValue: boolean;\n\txVal: number;\n\tyVal: number;\n\tstartXVal: number;\n\tstartYVal: number;\n\tendXVal: number;\n\tendYVal: number;\n\tmaxYVal: number;\n\tminYVal: number;\n\tisCompleted = false;\n\tmaxLength: number;\n\titems: ITrendItem[] = [];\n\n\tinitialAnimationState: ITrendSegmentState = {};\n\ttargetAnimationState: ITrendSegmentState = {};\n\tcurrentAnimationState: ITrendSegmentState = {};\n\n\tprivate trendSegments: TrendSegmentsManager;\n\t\n\tconstructor(trendPoints: TrendSegmentsManager, id: number) {\n\t\tthis.trendSegments = trendPoints;\n\t\tthis.id = id;\n\t\tthis.maxLength = trendPoints.maxSegmentLength;\n\t}\n\n\tcreateAnimationState(): ITrendSegmentState {\n\t\tvar {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t} = this;\n\t\treturn {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t}\n\t};\n\t\n\tappendItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.push(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar startXVal = items[0].xVal;\n\t\tif (item.xVal - startXVal > this.maxLength) return false;\n\t\titems.push(item);\n\t\treturn true;\n\t}\n\n\tprependItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.unshift(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar endXVal = items[items.length - 1].xVal;\n\t\tif (endXVal - item.xVal > this.maxLength) return false;\n\t\titems.unshift(item);\n\t\treturn true;\n\t}\n\n\tcomplete() {\n\t\tthis.isCompleted = true;\n\t\tthis.recalculateItems();\n\t\tthis.items = []; // free memory for completed ranges\n\t}\n\n\trecalculateItems() {\n\t\tlet items = this.items;\n\t\tlet itemsLength = items.length;\n\t\tif (itemsLength === 0) Utils.error('Unable to create TrendSegment without TrendItems');\n\t\tlet endItem = items[itemsLength - 1];\n\t\tlet {xVal: endXVal, yVal: endYVal} = endItem;\n\t\tlet startXVal: number, startYVal: number;\n\n\n\t\tlet startItem = items[0];\n\t\tstartXVal = startItem.xVal;\n\t\tstartYVal = startItem.yVal;\n\n\t\tlet minX = Math.min(startXVal, endXVal);\n\t\tlet maxX = Math.max(startXVal, endXVal);\n\t\tlet middleXVal = minX + (maxX - minX) / 2;\n\n\t\tlet minY = Math.min(startYVal, endYVal);\n\t\tlet maxY = Math.max(startYVal, endYVal);\n\t\tlet middleYVal = minY + (maxY - minY) / 2;\n\n\t\tlet yVals = items.map(item => item.yVal);\n\n\t\tthis.startXVal = startXVal;\n\t\tthis.startYVal = startYVal;\n\t\tthis.endXVal = endXVal;\n\t\tthis.endYVal = endYVal;\n\t\tthis.xVal = middleXVal;\n\t\tthis.yVal = middleYVal;\n\t\tthis.maxYVal = Math.max(...yVals);\n\t\tthis.minYVal = Math.min(...yVals);\n\t\tif (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t}\n\n\tgetNext() {\n\t\tvar nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t\treturn nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t}\n\n\tgetPrev() {\n\t\tvar prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t\treturn prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t}\n\t\n\tgetFrameVal(): Vector3 {\n\t\tlet {xVal, yVal} = this.createAnimationState();\n\t\treturn new Vector3(xVal, yVal, 0);\n\t}\n\n\tgetFramePoint(): Vector3 {\n\t\tvar frameVal = this.getFrameVal();\n\t\treturn this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendSegmentsManager.ts\n **/","\nimport {Trend, ITrendOptions} from \"./Trend\";\nimport {Chart, IChartState} from \"./Chart\";\nimport { EventEmitter } from './EventEmmiter';\n\nexport interface ITrendsOptions {\n\t[trendName: string]: ITrendOptions;\n}\n\nconst EVENTS = {\n\tSEGMENTS_REBUILDED: 'segmentsRebuilded'\n};\n\n/**\n * Trends manager\n */\nexport class TrendsManager {\n\ttrends: {[name: string]: Trend} = {};\n\tcalculatedOptions: ITrendsOptions;\n\tprivate ee = new EventEmitter();\n\tprivate chartState: Chart;\n\t\n\tconstructor(state: Chart, initialState: IChartState) {\n\t\tthis.chartState = state;\n\t\tvar trendsCalculatedOptions: ITrendsOptions = {};\n\t\tfor (let trendName in initialState.trends) {\n\t\t\tlet trend = this.createTrend(state, trendName, initialState);\n\t\t\ttrendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t\t}\n\t\tthis.calculatedOptions = trendsCalculatedOptions;\n\t\tthis.bindEvents();\n\t}\n\n\tgetTrend(trendName: string) {\n\t\treturn this.trends[trendName];\n\t}\n\t\n\tgetEnabledTrends(): Trend[] {\n\t\tvar enabledTrends: Trend[] = [];\n\t\tvar allTrends = this.trends;\n\t\tfor (let trendName in allTrends) {\n\t\t\tlet trend = allTrends[trendName];\n\t\t\ttrend.getOptions().enabled && enabledTrends.push(trend);\n\t\t}\n\t\treturn enabledTrends;\n\t}\n\n\n\tgetStartXVal() {\n\t\tvar trends = this.getEnabledTrends();\n\t\treturn trends[0].getData()[0].xVal;\n\t}\n\n\n\tgetEndXVal(): number {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar firstTrendData = trends[0].getData();\n\t\treturn firstTrendData[firstTrendData.length - 1].xVal;\n\t}\n\t\n\t\n\tgetExtremumYVal(extremumIsMax: boolean, fromX?: number, toX?: number) {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar compareFn: Function;\n\t\tvar result: number;\n\t\tif (extremumIsMax) {\n\t\t\tresult = -Infinity;\n\t\t\tcompareFn = Math.max;\n\t\t} else {\n\t\t\tresult = Infinity;\n\t\t\tcompareFn = Math.min;\n\t\t}\n\t\tfor (let trend of trends) {\n\t\t\tvar trendData = trend.getData(fromX, toX);\n\t\t\tvar trendYValues = trendData.map((dataItem) => dataItem.yVal);\n\t\t\tresult = compareFn(result, ...trendYValues);\n\t\t}\n\t\tif (result == Infinity || result == -Infinity) result = NaN;\n\t\treturn result;\n\t}\n\n\tgetMaxYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(true, fromX, toX)}\n\tgetMinYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(false, fromX, toX)}\n\n\tonSegmentsRebuilded(cb: (trendName: string) => any) {\n\t\treturn this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t}\n\n\tprivate bindEvents() {\n\t\tthis.chartState.onInitialStateApplied(() => this.onInitialStateAppliedHandler());\n\t}\n\n\tprivate onInitialStateAppliedHandler() {\n\t\tfor (let trendName in this.trends) {\n\t\t\tthis.trends[trendName].segmentsManager.onRebuild(() => this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName));\n\t\t}\n\t}\n\n\tprivate createTrend(state: Chart, trendName: string, initialState: IChartState): Trend {\n\t\tlet trend = new Trend(state, trendName, initialState);\n\t\tthis.trends[trendName] = trend;\n\t\treturn trend;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendsManager.ts\n **/","import PerspectiveCamera = THREE.PerspectiveCamera;\nimport Vector3 = THREE.Vector3;\nimport {Chart, IChartState} from \"./Chart\";\nimport forestgreen = THREE.ColorKeywords.forestgreen;\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IScreenTransformOptions {\n\tscrollXVal?: number,\n\tscrollYVal?: number,\n\tscrollX?: number,\n\tscrollY?: number,\n\tzoomX?: number,\n\tzoomY?: number\n}\n\n/**\n * manage camera, and contains methods for transforming pixels to values\n */\nexport class Screen {\n\toptions: IScreenTransformOptions = {scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1};\n\tprivate chartState: Chart;\n\tprivate scrollXAnimation: TweenLite;\n\tprivate scrollYAnimation: TweenLite;\n\tprivate zoomXAnimation: TweenLite;\n\tprivate zoomYAnimation: TweenLite;\n\tprivate currentScrollX = {x: 0};\n\tprivate currentScrollY = {y: 0};\n\tprivate currentZoomX = {val: 1};\n\tprivate currentZoomY = {val: 1};\n\tprivate ee: EventEmitter;\n\n\tconstructor(chartState: Chart) {\n\t\tthis.chartState = chartState;\n\t\tvar {width: w, height: h} = chartState.data;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.transform({\n\t\t\tscrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n\t\t\tzoomY: 1\n\t\t});\n\t\tthis.bindEvents();\n\n\t\t//camera.position.z = 1500;\n\t}\n\t\n\tgetCameraSettings() {\n\n\t\tvar {width: w, height: h} = this.chartState.data;\n\n\t\t// settings for pixel-perfect camera\n\t\tvar FOV = 75;\n\t\tvar vFOV = FOV * (Math.PI / 180);\n\t\t\n\t\treturn {\n\t\t\tFOV: FOV,\n\t\t\taspect: w / h,\n\t\t\tnear: 0.1,\n\t\t\tfar: 5000,\n\t\t\tz: h / (2 * Math.tan(vFOV / 2) ),\n\n\t\t\t// move 0,0 to left-bottom corner\n\t\t\tx: w / 2,\n\t\t\ty: h / 2\n\t\t}\n\t}\n\n\tonZoomFrame(cb: (zoomX: number, zoomY: number) => void): Function {\n\t\tvar eventName = 'zoomFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonScrollFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'scrollFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonTransformationFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'transformationFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tcameraIsMoving(): boolean {\n\t\treturn !!(\n\t\t\tthis.scrollXAnimation && this.scrollXAnimation.isActive() ||\n\t\t\t\tthis.zoomXAnimation && this.zoomXAnimation.isActive()\n\t\t);\n\t}\n\n\tprivate transform (options: IScreenTransformOptions, silent = false) {\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = options;\n\t\t\n\t\tif (scrollX != void 0) this.options.scrollX = scrollX;\n\t\tif (scrollY != void 0) this.options.scrollY = scrollY;\n\t\tif (zoomX != void 0) this.options.zoomX = zoomX;\n\t\tif (zoomY != void 0) this.options.zoomY = zoomY;\n\n\t\tif (scrollX != void 0 || zoomX) {\n\t\t\toptions.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t\t\tthis.options.scrollXVal = options.scrollXVal;\n\t\t}\n\n\t\tif (scrollY != void 0 || zoomY) {\n\t\t\toptions.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t\t\tthis.options.scrollYVal = options.scrollYVal;\n\t\t}\n\n\t\tif (silent) return;\n\n\t\tthis.ee.emit('transformationFrame', options);\n\t\t\n\t\tif (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t\t\tthis.ee.emit('scrollFrame', options);\n\t\t}\n\t\t\n\t\tif (options.zoomX != void 0 || options.zoomY != void 0) {\n\t\t\tthis.ee.emit('zoomFrame', options);\n\t\t}\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar state = this.chartState;\n\n\t\t// handle scroll and zoom\n\t\tstate.onChange((changedProps) => {\n\t\t\tif (changedProps.xAxis && changedProps.xAxis.range) {\n\t\t\t\tif (changedProps.xAxis.range.scroll != void 0) this.onScrollXHandler(changedProps);\n\t\t\t\tif (changedProps.xAxis.range.zoom) this.onZoomXHandler();\n\t\t\t}\n\t\t\tif (changedProps.yAxis && changedProps.yAxis.range){\n\t\t\t\tif (changedProps.yAxis.range.scroll != void 0) this.onScrollYHandler();\n\t\t\t\tif (changedProps.yAxis.range.zoom) this.onZoomYHandler();\n\t\t\t}\n\t\t});\n\t\tstate.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.scrollXAnimation && this.scrollXAnimation.kill();\n\t\tthis.scrollYAnimation && this.scrollYAnimation.kill();\n\t\tthis.zoomXAnimation && this.zoomXAnimation.kill();\n\t\tthis.zoomYAnimation && this.zoomYAnimation.kill();\n\t}\n\n\tprivate onScrollXHandler(changedProps: IChartState) {\n\t\tvar state = this.chartState;\n\t\tvar isDragMode = state.data.cursor.dragMode;\n\t\tvar animations =  state.data.animations;\n\t\tvar canAnimate = animations.enabled && !isDragMode;\n\t\tvar zoomXChanged = changedProps.xAxis.range.zoom;\n\t\tvar isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n\t\tvar time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t\tvar ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t\tif (this.scrollXAnimation) this.scrollXAnimation.pause();\n\n\t\tvar range = state.data.xAxis.range;\n\t\tvar targetX = range.scroll * range.scaleFactor * range.zoom;\n\t\tthis.currentScrollX.x = this.options.scrollX;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollX: this.currentScrollX.x});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t\t\t\tx: targetX, ease: ease\n\t\t\t});\n\t\t\tthis.scrollXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollX.x = targetX;\n\t\t\tcb();\n\t\t}\n\n\t}\n\n\tprivate onScrollYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.data.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tif (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t\tvar range = state.data.yAxis.range;\n\t\tvar targetY = range.scroll * range.scaleFactor * range.zoom;\n\n\t\tthis.currentScrollY.y = this.options.scrollY;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollY: this.currentScrollY.y});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t\t\t\ty: targetY, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.scrollYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollY.y = targetY;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomXHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.data.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.data.xAxis.range.zoom;\n\t\tif (this.zoomXAnimation) this.zoomXAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomX: this.currentZoomX.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomX.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.data.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.data.yAxis.range.zoom;\n\t\tif (this.zoomYAnimation) this.zoomYAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomY: this.currentZoomY.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomY.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zeroVal} = this.chartState.data.xAxis.range;\n\t\tvar zoom = this.options.zoomX;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zeroVal} =  this.chartState.data.yAxis.range;\n\t\tvar zoom = this.options.zoomY;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\n\t */\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\t\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n\t}\n\t\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n\t}\n\n\n\t/**\n\t *  returns scrollX value by screen scrollX coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\treturn this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t}\n\t\n\t\n\t/**\n\t *  returns scrollY value by screen scrollY coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\treturn this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t}\n\t\n\t//\n\t/**\n\t *  returns screen scrollX value by screen scrollY coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.chartState.data.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t// /**\n\t//  *  returns screen scrollY value by screen scrollY coordinate\n\t//  */\n\t// getScreenYByValue(scrollYVal: number): number {\n\t// \tvar {scroll, zeroVal} = this.data.yAxis.range;\n\t// \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\n\t// }\n\t//\n\t//\n\t/**\n\t * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\t/**\n\t * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\n\t */\n\tgetPointByScreenY(screenY: number): number {\n\t\treturn this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t}\n\n\tgetTop(): number {\n\t\treturn this.getPointByScreenY(this.chartState.data.height);\n\t}\n\t\n\tgetBottom(): number {\n\t\treturn this.getPointByScreenY(0);\n\t}\n\n\tgetLeft(): number {\n\t\treturn this.getPointByScreenX(0);\n\t}\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.chartState.data.width);\n\t}\n\n\tgetTopVal() {\n\t\treturn this.getValueByScreenY(this.chartState.data.height);\n\t}\n\t\n\tgetBottomVal() {\n\t\treturn this.getValueByScreenY(0);\n\t}\n\n\tgetCenterYVal() {\n\t\treturn this.getValueByScreenY(this.chartState.data.height / 2);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Screen.ts\n **/","\nimport {Chart} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {AXIS_TYPE} from \"./interfaces\";\nimport {ITrendData, ITrendOptions} from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IAxisMarkUpdateOptions {\n\tvalue: number,\n\tdisplayedValue?: string\n}\n\nexport interface IAxisMarkOptions extends IAxisMarkUpdateOptions {\n\tname?: string;\n\ttitle?: string;\n\ttype?: string;\n\tlineColor?: string;\n\tlineWidth?: number;\n\tshowValue?: boolean;\n\tstickToEdges?: boolean;\n}\n\nconst AXIS_MARK_DEFAULT_OPTIONS: IAxisMarkOptions = {\n\ttype: 'simple',\n\tlineWidth: 1,\n\tvalue: 0,\n\tshowValue: false,\n\tstickToEdges: false,\n\tlineColor: '#FFFFFF',\n\ttitle: ''\n};\n\nexport class AxisMarks {\n\tprivate chartState: Chart;\n\tprivate axisType: AXIS_TYPE;\n\tprivate ee: EventEmitter;\n\tprivate items: {[name: string]: AxisMark} = {};\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.axisType = axisType;\n\t\tvar marks = this.items;\n\t\tvar axisMarksOptions = axisType == AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n\t\t\n\t\tfor (let options of axisMarksOptions) {\n\t\t\tlet axisMark: AxisMark;\n\t\t\toptions = Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t\t\t\n\t\t\t// set mark name\n\t\t\tif (!options.name) options.name = Utils.getUid().toString();\n\t\t\tif (marks[options.name]) Utils.error('duplicated mark name ' + options.name);\n\t\t\t\n\t\t\t// create mark instance based on type option\n\t\t\tif (options.type == 'timeleft') {\n\t\t\t\taxisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t\t\t} else {\n\t\t\t\taxisMark = new AxisMark(chartState, axisType, options);\n\t\t\t}\n\t\t\tmarks[options.name] = axisMark;\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, newData)\n\t\t});\n\t\tthis.chartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tprivate onTrendChange(trendName: string, newData: ITrendData) {\n\t\tif (!newData) return;\n\t\tvar startVal = newData[0].xVal;\n\t\tvar endVal = newData[newData.length - 1].xVal;\n\t\tvar marks = this.items;\n\n\t\tfor (let markName in marks) {\n\t\t\tlet mark = marks[markName];\n\t\t\tlet markVal = mark.options.value;\n\t\t\tlet markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\n\t\t\tif (markWasCrossed) this.ee.emit('markCrossed', trendName, newData);\n\t\t}\n\t}\n\n\n\tgetItems() {\n\t\treturn this.items;\n\t}\n\t\n\tgetItem(markName: string) {\n\t\treturn this.items[markName];\n\t}\n\n}\n\nexport class AxisMark {\n\tstatic typeName = 'simple';\n\toptions: IAxisMarkOptions;\n\taxisType: AXIS_TYPE;\n\tprotected chartState: Chart;\n\tprotected renderOnTrendsChange = false;\n\tprotected ee: EventEmitter;\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE, options: IAxisMarkOptions) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.options = options;\n\t\tthis.axisType = axisType;\n\t\tthis.chartState = chartState;\n\t\tthis.bindEvents();\n\t}\n\t\n\tprotected bindEvents() {}\n\n\tsetOptions(newOptions: IAxisMarkUpdateOptions) {\n\t\tvar value = this.options.value;\n\t\tthis.options = Utils.deepMerge(this.options, newOptions);\n\t\tif (this.options.value !== value) this.ee.emit('valueChange');\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n\n\tgetDisplayedVal(): string {\n\t\tlet {value, displayedValue} = this.options;\n\t\treturn String(displayedValue !== void 0 ? displayedValue : value);\n\t}\n\n\tonMarkCrossed(cb: (trendName: string, newData: ITrendData) => void): Function {\n\t\tthis.ee.on('markCrossed', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('markCrossed', cb);\n\t\t}\n\t}\n\n\tonValueChange(cb: () => void) {\n\t\tthis.ee.on('valueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('valueChange', cb);\n\t\t}\n\t}\n\n\tonDisplayedValueChange(cb: () => void) {\n\t\tthis.ee.on('onDisplayedValueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('onDisplayedValueChange', cb);\n\t\t}\n\t}\n}\n\nexport class AxisTimeleftMark extends AxisMark {\n\tstatic typeName = 'timeleft';\n\tprotected renderOnTrendsChange = true;\n\t\n\tgetDisplayedVal(): string {\n\t\tvar markVal = this.options.value;\n\t\tvar maxXVal = this.chartState.data.computedData.trends.maxXVal;\n\t\tvar time = markVal - maxXVal;\n\t\tif (time < 0) time = 0;\n\t\treturn Utils.msToTimeString(time);\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendsChange(() => this.onTrendsChange());\n\t}\n\n\tprotected onTrendsChange() {\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AxisMarks.ts\n **/","\n\n/**\n * defines how axis range will be calculated\n * FIXED - directly use range.from and range.to value\n * AUTO - automatically sets range.from and range.to by visible part of opposite axis\n * RELATIVE_END - same as AUTO, but trend end always present in range\n * ALL - automatically sets range.from and range.to by all values of opposite axis\n *\n */\nimport {IAxisMarkOptions} from \"./AxisMarks\";\nimport {TChartColor} from \"./Color\";\nexport enum AXIS_RANGE_TYPE {\n\tFIXED,\n\tRELATIVE_END,\n\tAUTO,\n\tALL // TODO: AXIS_RANGE_TYPE.ALL\n}\n\n/**\n * Animation ease type\n */\nexport declare type TEase = Ease | Linear;\n\nexport declare type TIteralable = {[key: string]: any};\nexport interface IIteralable {[key: string]: any};\n\nexport enum AXIS_TYPE {X, Y}\n\nexport interface IAxisRange {\n\ttype?: AXIS_RANGE_TYPE,\n\tfrom?: number,\n\tto?: number,\n\tzoom?: number,\n\tscroll?: number,\n\n\t/**\n\t * Mode only for Y axis. When true displayed center of Y axis never changed. To use set range.zeroVal as center value.\n\t */\n\tisMirrorMode?: boolean,\n\n\tpadding?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmargin?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmaxLength?: number;\n\tminLength?: number;\n\n\t/**\n\t * value in world center coordinate\n\t */\n\tzeroVal?: number,\n\n\t/**\n\t * ratio between 1 pixel and 1 value for zoom = 1\n\t */\n\tscaleFactor?: number,\n}\n\nexport enum AXIS_DATA_TYPE {NUMBER, DATE}\n\nexport interface IAxisOptions {\n\trange?: IAxisRange;\n\tdataType?: AXIS_DATA_TYPE;\n\tautoScroll?: boolean;\n\tmarks?: IAxisMarkOptions[];\n\tgrid?: IGridOptions;\n\tcolor?: TChartColor;\n}\n\nexport interface IGridOptions {\n\tenabled: boolean;\n\tminSizePx?: number;\n}\n\nexport interface IAnimationsOptions {\n\tenabled?: boolean,\n\ttrendChangeSpeed?: number,\n\ttrendChangeEase?: TEase,\n\tscrollSpeed?: number,\n\tscrollEase?: TEase,\n\tautoScrollSpeed?: number,\n\tautoScrollEase?: TEase,\n\tzoomSpeed?: number,\n\tzoomEase?: TEase,\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/interfaces.ts\n **/","import {Chart} from \"./Chart\";\nimport Object3D = THREE.Object3D;\n\nexport interface IChartWidgetConstructor {\n\tnew (): ChartWidget;\n\twidgetName: string;\n}\n\n/**\n * base class for all widgets\n * each widget must have widgetName static property\n */\nexport abstract class ChartWidget {\n\tstatic widgetName = '';\n\tprotected chart: Chart;\n\tprivate unbindList: Function[] = [];\n\n\n\tsetupChartState(chartState: Chart) {\n\t\tthis.chart = chartState;\n\t}\n\n\tabstract onReadyHandler(): any;\n\tabstract getObject3D(): Object3D;\n\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unbindList: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunbindList.push(args[0] as Function);\n\t\t} else {\n\t\t\tunbindList.push(...args as Function[]);\n\t\t}\n\t\tthis.unbindList.push(...unbindList);\n\t}\n\tprotected unbindEvents() {\n\t\tthis.unbindList.forEach(unbindEvent => unbindEvent());\n\t\tthis.unbindList.length = 0;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Widget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport UVMapping = THREE.UVMapping;\nimport GridHelper = THREE.GridHelper;\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport {GridWidget, IGridParamsForAxis} from \"./GridWidget\";\nimport {Utils} from \"../Utils\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {AXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions} from \"../interfaces\";\n\n/**\n * widget for drawing axis\n */\nexport class AxisWidget extends ChartWidget {\n\tstatic widgetName = 'Axis';\n\tprivate isDestroyed = false;\n\tprivate object3D: Object3D;\n\tprivate axisXObject: Object3D;\n\tprivate axisYObject: Object3D;\n\tprivate updateAxisXRequest: () => void;\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.axisXObject = new Object3D();\n\t\tthis.axisYObject = new Object3D();\n\t\tthis.object3D.add(this.axisXObject);\n\t\tthis.object3D.add(this.axisYObject);\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\n\t\t// canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\n\t\tthis.updateAxisXRequest = Utils.throttle(() => this.updateAxis(AXIS_TYPE.X), 1000);\n\n\t\tthis.onScrollChange(\n\t\t\tthis.chart.screen.options.scrollX,\n\t\t\tthis.chart.screen.options.scrollY\n\t\t);\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\tvar state = this.chart;\n\n\t\tthis.bindEvent(\n\t\t\tstate.screen.onTransformationFrame((options) => {\n\t\t\t\tthis.onScrollChange(options.scrollX, options.scrollY);\n\t\t\t}),\n\t\t\tstate.screen.onZoomFrame((options) => {this.onZoomFrame(options)}),\n\t\t\tstate.onDestroy(() => this.onDestroy()),\n\t\t\tstate.onResize(() => this.onResize())\n\t\t);\n\t}\n\n\tprivate onDestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.unbindEvents();\n\t}\n\n\tprivate onScrollChange(x: number, y: number) {\n\n\t\tif (y != void 0) {\n\t\t\tthis.axisYObject.position.y = y;\n\t\t\tthis.axisXObject.position.y = y;\n\t\t}\n\n\t\tif (x != void 0) {\n\t\t\tthis.axisYObject.position.x = x;\n\t\t\tthis.updateAxisXRequest();\n\t\t}\n\n\t}\n\n\tprivate onResize() {\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\t}\n\n\tprivate setupAxis(orientation: AXIS_TYPE) {\n\n\t\tlet isXAxis = orientation == AXIS_TYPE.X;\n\t\tlet {width: visibleWidth, height: visibleHeight} = this.chart.data;\n\t\tlet canvasWidth = 0, canvasHeight = 0;\n\n\t\t// clean meshes\n\t\tif (isXAxis) {\n\t\t\tthis.axisXObject.traverse(obj => this.axisXObject.remove(obj));\n\t\t\tcanvasWidth = visibleWidth * 3;\n\t\t\tcanvasHeight = 50;\n\t\t} else {\n\t\t\tthis.axisYObject.traverse(obj => this.axisYObject.remove(obj));\n\t\t\tcanvasWidth = 50;\n\t\t\tcanvasHeight = visibleHeight * 3;\n\t\t}\n\n\t\tvar texture = Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, (ctx) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.font = \"10px Arial\";\n\t\t\tctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t\t\tctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n\t\t});\n\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tvar axisMesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(canvasWidth, canvasHeight),\n\t\t\tmaterial\n\t\t);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisXObject.add(axisMesh);\n\t\t} else {\n\t\t\taxisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisYObject.add(axisMesh);\n\t\t}\n\n\t\tthis.updateAxis(orientation);\n\n\t}\n\t\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate updateAxis(orientation: AXIS_TYPE) {\n\t\tif (this.isDestroyed) return;\n\t\tvar isXAxis = orientation == AXIS_TYPE.X;\n\t\tvar {width: visibleWidth, height: visibleHeight} = this.chart.data;\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = this.chart.screen.options;\n\t\tvar axisOptions: IAxisOptions;\n\t\tvar axisMesh: Mesh;\n\t\tvar axisGridParams: IGridParamsForAxis;\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh = this.axisXObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.data.xAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t\t} else {\n\t\t\taxisMesh = this.axisYObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.data.yAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t\t}\n\n\t\tvar geometry = axisMesh.geometry as PlaneGeometry;\n\t\tvar canvasWidth = geometry.parameters.width;\n\t\tvar canvasHeight = geometry.parameters.height;\n\t\tvar texture = (axisMesh.material as MeshBasicMaterial).map;\n\t\tvar ctx = texture.image.getContext('2d');\n\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t\t}\n\n\n\t\t// TODO: draw text and lines in different loops\n\t\tvar edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t\tvar startVal = axisGridParams.start  - edgeOffset;\n\t\tvar endVal = axisGridParams.end + edgeOffset;\n\n\t\tctx.beginPath();\n\t\tfor (let val = startVal; val <= endVal; val += axisGridParams.step) {\n\t\t\tlet displayedValue = '';\n\t\t\tif (isXAxis) {\n\t\t\t\tlet pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(pxVal + 0.5, canvasHeight);\n\t\t\t\t// ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\n\t\t\t\tif (axisOptions.dataType == AXIS_DATA_TYPE.DATE) {\n\t\t\t\t\tdisplayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t\t\t\t} else {\n\t\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\t}\n\n\t\t\t\tctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t\t\t} else {\n\t\t\t\tlet pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\n\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(canvasWidth, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\n\n\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\tctx.fillText(displayedValue, canvasWidth - 15 , pxVal + 3);\n\n\t\t\t\t// uncomment for left-side axis\n\t\t\t\t// ctx.moveTo(0, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(5, pxVal + 0.5);\n\t\t\t\t// ctx.fillText(Number(val.toFixed(14)).toString(), 15 , pxVal + 3);\n\t\t\t}\n\t\t\tctx.stroke();\n\t\t}\n\t\t// uncomment to preview canvas borders\n\t\t// ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tif (options.zoomX) {\n\t\t\tthis.updateAxis(AXIS_TYPE.X);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.H)\n\t\t}\n\t\tif (options.zoomY) {\n\t\t\tthis.updateAxis(AXIS_TYPE.Y);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.V)\n\t\t}\n\t}\n\n\t// private temporaryHideAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar timeoutId = setTimeout(() => {\n\t// \t\t\tthis.showAxis(orientation);\n\t// \t}, 200);\n\t//\n\t// \tif (isXAxis) {\n\t// \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tclearTimeout(this.showAxisXTimeout);\n\t// \t\tthis.showAxisXTimeout =\ttimeoutId;\n\t// \t} else {\n\t// \t\tclearTimeout(this.showAxisYTimeout);\n\t// \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tthis.showAxisYTimeout = timeoutId;\n\t// \t}\n\t// }\n\n\t// private showAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar material: MeshBasicMaterial;\n\t// \tif (isXAxis) {\n\t// \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t} else {\n\t// \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t}\n\t// \tthis.updateAxis(orientation);\n\t// \tTweenLite.to(material, 0.3, {opacity: 1});\n\t// }\n\n\tstatic getDateStr(timestamp: number, gridParams: IGridParamsForAxis): string {\n\t\tvar sec = 1000;\n\t\tvar min = sec * 60;\n\t\tvar hour = min * 60;\n\t\tvar day = hour * 60;\n\t\tvar step = gridParams.step;\n\t\tvar d = new Date(timestamp);\n\t\tvar tf = (num: number) => Utils.toFixed(num, 2);\n\t\treturn tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport {ChartWidget} from \"../Widget\";\nimport LineSegments = THREE.LineSegments;\nimport {Utils} from \"../Utils\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {IAxisOptions} from \"../interfaces\";\n\nexport interface IGridParamsForAxis {\n\tstart: number,\n\tend: number,\n\tstep: number,\n\tstepInPx: number,\n\tlength: number,\n\tsegmentsCount: number\n}\n\n/**\n * widget for drawing chart grid\n */\nexport class GridWidget extends ChartWidget{\n\tstatic widgetName = 'Grid';\n\tprivate lineSegments: LineSegments;\n\tprivate gridSizeH: number;\n\tprivate gridSizeV: number;\n\tprivate isDestroyed = false;\n\n\tonReadyHandler() {\n\t\tvar {width, height, xAxis, yAxis} = this.chart.data;\n\t\tthis.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\n\t\tthis.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\n\t\tthis.initGrid();\n\t\tthis.updateGrid();\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\t// grid is bigger then screen, so it's no need to update it on each scroll event\n\t\tlet updateGridThrottled = Utils.throttle(() => this.updateGrid(), 1000);\n\t\tthis.bindEvent(this.chart.onScroll(() => updateGridThrottled()),\n\t\t\tthis.chart.screen.onZoomFrame((options) => {\n\t\t\t\tupdateGridThrottled();\n\t\t\t\tthis.onZoomFrame(options);\n\t\t\t}),\n\t\t\tthis.chart.onDestroy(() => {\n\t\t\t\tthis.isDestroyed = true;\n\t\t\t\tthis.unbindEvents();\n\t\t\t}),\n\t\t\tthis.chart.onResize(() => {\n\t\t\t\tthis.updateGrid();\n\t\t\t})\n\t\t);\n\n\t}\n\n\tprivate initGrid() {\n\t\tvar geometry = new THREE.Geometry();\n\t\tvar material = new THREE.LineBasicMaterial( { linewidth: 1, opacity: 0.1, transparent: true});\n\t\tvar xLinesCount = this.gridSizeH;\n\t\tvar yLinesCount = this.gridSizeV;\n\t\twhile (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\twhile (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\tthis.lineSegments = new LineSegments(geometry, material);\n\t\tthis.lineSegments.position.setZ(-1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t}\n\n\tprivate updateGrid() {\n\t\tif (this.isDestroyed) return;\n\t\tvar {yAxis, xAxis, width, height} = this.chart.data;\n\t\tvar axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t\tvar axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t\tvar scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t\tvar scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t\tvar gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t\tvar gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t\tvar startXVal = axisXGrid.start + gridScrollXVal;\n\t\tvar startYVal = axisYGrid.start + gridScrollYVal;\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tvar vertices = geometry.vertices;\n\t\tvar lineInd = 0;\n\n\t\tfor (let i =  -this.gridSizeH / 3; i < this.gridSizeH * 2/3; i++) {\n\t\t\tlet value = startXVal + i * axisXGrid.step;\n\t\t\tlet lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tfor (let i =  -this.gridSizeV / 3; i < this.gridSizeV * 2/3; i++) {\n\t\t\tlet value = startYVal + i * axisYGrid.step;\n\t\t\tlet lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\tthis.lineSegments.scale.set(\n\t\t\txAxis.range.scaleFactor * xAxis.range.zoom,\n\t\t\tyAxis.range.scaleFactor * yAxis.range.zoom,\n\t\t\t1\n\t\t)\n\t}\n\n\tprivate getHorizontalLineSegment(yVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n\t\tvar widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n\t\treturn [\n\t\t\tnew THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0 ),\n\t\t\tnew THREE.Vector3( -widthVal + scrollXVal, localYVal, 0 )\n\t\t];\n\t}\n\n\tprivate getVerticalLineSegment(xVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n\t\tvar heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n\t\treturn [\n\t\t\tnew THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0 ),\n\t\t\tnew THREE.Vector3(localXVal, -heightVal + scrollYVal, 0 )\n\t\t];\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar {xAxis, yAxis} = this.chart.data;\n\t\tif (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t\tif (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t}\n\n\n\t// TODO: move this code to core\n\tstatic getGridParamsForAxis(axisOptions: IAxisOptions, axisWidth: number, zoom: number): IGridParamsForAxis {\n\t\tlet axisRange = axisOptions.range;\n\t\tlet from = axisRange.from;\n\t\tlet to = axisRange.to;\n\t\tlet axisLength = to - from;\n\t\tlet gridStep = 0;\n\t\tlet gridStepInPixels = 0;\n\t\tlet minGridStepInPixels = axisOptions.grid.minSizePx;\n\t\tlet axisLengthStr = String(axisLength);\n\t\tlet axisLengthPointPosition = axisLengthStr.indexOf('.');\n\t\tlet intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\n\t\tlet gridStepFound = false;\n\t\tlet digitPos = 0;\n\t\twhile (!gridStepFound) {\n\n\t\t\tlet power = intPartLength - digitPos - 1;\n\t\t\tlet multiplier = (Math.pow(10, power) || 1);\n\t\t\tlet dividers = [1, 2, 5];\n\t\t\tfor (let dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t\t\t\tlet nextGridStep = multiplier / dividers[dividerInd];\n\t\t\t\tlet nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t\t\t\tif (nextGridStepInPixels >= minGridStepInPixels) {\n\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t} else {\n\t\t\t\t\tgridStepFound = true;\n\t\t\t\t\tif (gridStep === 0) {\n\t\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!gridStepFound) digitPos++\n\n\t\t}\n\n\t\tvar gridStart = Math.floor(from / gridStep) * gridStep;\n\t\tvar gridEnd = Math.floor(to / gridStep) * gridStep;\n\n\t\treturn {\n\t\t\tstart: gridStart,\n\t\t\tend: gridEnd,\n\t\t\tstep: gridStep,\n\t\t\tstepInPx: gridStepInPixels,\n\t\t\tlength: gridEnd - gridStart,\n\t\t\tsegmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t\t}\n\t}\n\t\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/GridWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {ITrendOptions} from \"../Trend\";\nimport {Utils} from \"../Utils\";\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport { ChartColor } from '../Color';\n\nexport class TrendsGradientWidget extends TrendsWidget<TrendGradient> {\n\tstatic widgetName = \"TrendsGradient\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendGradient;\n\t}\n}\n\n\nexport class TrendGradient extends TrendWidget {\n\tprivate gradient: Mesh;\n\tprivate visibleSegmentsCnt = 0;\n\tprivate segmentsIds: Uint16Array;\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.hasBackground;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.trend = chartState.trendsManager.getTrend(trendName);\n\t\tthis.segmentsIds = new Uint16Array(chartState.data.maxVisibleSegments)\n\t\tthis.initGradient();\n\t\tthis.updateSegments();\n\t}\n\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\t// TODO: optimize updateSegments for onDisplayedRangeChanged\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.chart.onZoom(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t}\n\n\n\tgetObject3D(): Object3D {\n\t\treturn this.gradient;\n\t}\n\n\n\tinitGradient() {\n\t\tlet geometry = new Geometry();\n\n\n\t\tfor (let i = 0; i < this.segmentsIds.length; i++) {\n\t\t\tgeometry.vertices.push(\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3()\n\t\t\t);\n\t\t\tlet ind = i * 4;\n\n\t\t\t// gradient segment scheme\n\t\t\t//\n\t\t\t// vert0 +---+ vert3\n\t\t\t//       |\\  |\n\t\t\t// face1 | \\ | face2\n\t\t\t// \t     |  \\|\n\t\t\t// vert1 +---+ vert2\n\n\t\t\tgeometry.faces.push(\n\t\t\t\tnew THREE.Face3( ind, ind + 1, ind + 2 ),\n\t\t\t\tnew THREE.Face3( ind + 3, ind, ind + 2 )\n\t\t\t);\n\t\t}\n\n\t\tlet color = new ChartColor(this.trend.getOptions().backgroundColor);\n\t\tthis.gradient = new THREE.Mesh(\n\t\t\tgeometry,\n\t\t\tnew THREE.MeshBasicMaterial( {color: color.value, transparent: true, opacity: color.a} )\n\t\t);\n\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.data.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.data.yAxis.range;\n\t\tthis.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.gradient.frustumCulled = false;\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tlet state = this.chart.data;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tvar currentScale = this.gradient.scale;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegmentsManager: TrendSegmentsManager) {\n\t\tlet animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n\t\tfor (let i = 0; i < this.visibleSegmentsCnt; i++) {\n\t\t\tlet segmentId = this.segmentsIds[i];\n\t\t\tif (!animatedSegmentsIds.includes(segmentId)) continue;\n\t\t\tthis.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n\t\t}\n\t\t(this.gradient.geometry as PlaneGeometry).verticesNeedUpdate = true;\n\t}\n\n\n\tprivate updateSegments() {\n\t\tlet geometry = this.gradient.geometry as PlaneGeometry;\n\t\tlet {\n\t\t\tsegments: trendSegments,\n\t\t\tfirstDisplayedSegmentInd: segmentInd,\n\t\t\tlastDisplayedSegmentInd\n\t\t} = this.trend.segmentsManager;\n\t\tlet prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n\t\tthis.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n\t\tlet segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n\n\t\tif (segmentsToProcessCnt > this.segmentsIds.length) {\n\t\t\tUtils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\n\t\t}\n\n\t\t// setup visible segments and collapse invisible\n\t\tfor (let i = 0; i <= segmentsToProcessCnt; i++) {\n\t\t\tif (segmentInd <= lastDisplayedSegmentInd) {\n\t\t\t\tlet segment = trendSegments[segmentInd];\n\t\t\t\tthis.setupSegmentVertices(i, segment.currentAnimationState);\n\t\t\t\tthis.segmentsIds[i] = segment.id;\n\t\t\t\tsegmentInd++;\n\t\t\t} else {\n\t\t\t\tthis.setupSegmentVertices(i);\n\t\t\t}\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\t/**\n\t * setup gradient segment by segmentState\n\t * if segmentState is undefined, then collapse vertices to 0,0,0\n\t */\n\tprivate setupSegmentVertices(segmentInd: number, segmentState?: ITrendSegmentState) {\n\t\tlet gradientSegmentInd = segmentInd * 4;\n\t\tlet vertices = (this.gradient.geometry as PlaneGeometry).vertices;\n\t\tlet\ttopLeft = vertices[gradientSegmentInd];\n\t\tlet\tbottomLeft = vertices[gradientSegmentInd + 1];\n\t\tlet\tbottomRight = vertices[gradientSegmentInd + 2];\n\t\tlet\ttopRight = vertices[gradientSegmentInd + 3];\n\t\tlet screenHeightVal = Math.max(\n\t\t\tthis.chart.pxToValueByYAxis(this.chart.data.height),\n\t\t\tthis.chart.screen.pxToValueByYAxis(this.chart.data.height)\n\t\t);\n\n\t\tif (segmentState) {\n\t\t\tlet startX = this.toLocalX(segmentState.startXVal);\n\t\t\tlet startY = this.toLocalY(segmentState.startYVal);\n\t\t\tlet endX = this.toLocalX(segmentState.endXVal);\n\t\t\tlet endY = this.toLocalY(segmentState.endYVal);\n\t\t\ttopLeft.set(startX, startY, 0);\n\t\t\ttopRight.set(endX, endY, 0);\n\t\t\tbottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n\t\t\tbottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n\t\t} else {\n\t\t\ttopLeft.set(0, 0, 0);\n\t\t\ttopRight.set(0, 0, 0);\n\t\t\tbottomLeft.set(0, 0, 0);\n\t\t\tbottomRight.set(0, 0, 0);\n\t\t}\n\n\t}\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.data.xAxis.range.zeroVal;\n\t}\n\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.data.yAxis.range.zeroVal;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsGradientWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport {ITrendOptions, ITrendData, Trend} from \"../Trend\";\nimport Vector2 = THREE.Vector2;\nimport Vector3 = THREE.Vector3;\nimport {TrendSegmentsManager} from \"../TrendSegmentsManager\";\nimport {IScreenTransformOptions} from \"../Screen\";\n\n\nexport interface ITrendWidgetClass<TrendWidgetType> {\n\tnew (chart: Chart, trendName: string): TrendWidgetType;\n\twidgetIsEnabled(trendOptions: ITrendOptions, chart: Chart): boolean;\n}\n\n/**\n * abstract manager class for all trends widgets\n */\nexport abstract class TrendsWidget<TrendWidgetType extends TrendWidget> extends ChartWidget {\n\tprotected abstract getTrendWidgetClass(): ITrendWidgetClass<TrendWidgetType>;\n\tprotected object3D: Object3D;\n\tprotected widgets: {[trendName: string]: TrendWidgetType} = {};\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.onTrendsChange();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tvar state = this.chart;\n\t\tstate.onTrendsChange(() => this.onTrendsChange());\n\t\tstate.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, changedOptions, newData)\n\t\t});\n\t}\n\n\tprotected onTrendsChange() {\n\t\tvar trendsOptions = this.chart.data.trends;\n\t\tvar TrendWidgetClass = this.getTrendWidgetClass();\n\t\tfor (let trendName in trendsOptions) {\n\t\t\tlet trendOptions = trendsOptions[trendName];\n\t\t\tlet widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\n\t\t\tif (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t\t\t\tthis.createTrendWidget(trendName);\n\t\t\t} else if (!widgetCanBeEnabled && this.widgets[trendName]){\n\t\t\t\tthis.destroyTrendWidget(trendName);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTrendChange(trendName: string, changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar widget = this.widgets[trendName];\n\t\tif (!widget) return;\n\t\twidget.onTrendChange(changedOptions);\n\t\tif (newData) {\n\t\t\tvar data = this.chart.getTrend(trendName).getData();\n\t\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\t\tisAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t\t}\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate createTrendWidget(trendName: string) {\n\t\tvar WidgetConstructor = this.getTrendWidgetClass();\n\t\tvar widget = new WidgetConstructor(this.chart, trendName);\n\t\tthis.widgets[trendName] = widget;\n\t\tvar widgetObject = widget.getObject3D();\n\t\twidgetObject.name = trendName;\n\t\tthis.object3D.add(widget.getObject3D());\n\t}\n\n\tprivate destroyTrendWidget(trendName: string) {\n\t\tthis.widgets[trendName].onDestroy();\n\t\tdelete this.widgets[trendName];\n\t\tvar widgetObject = this.object3D.getObjectByName(trendName);\n\t\tthis.object3D.remove(widgetObject);\n\t}\n}\n\n/**\n * based class for all trends widgets\n */\nexport abstract class TrendWidget {\n\tprotected trend: Trend;\n\tprotected unbindList: Function[] = [];\n\n\tconstructor (protected chart: Chart, protected trendName: string) {\n\t\tthis.trend = chart.trendsManager.getTrend(trendName);\n\t\tthis.chart = chart;\n\t\tthis.bindEvents();\n\t}\n\tabstract getObject3D(): Object3D;\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions, chart: Chart) {\n\t\treturn trendOptions.enabled;\n\t}\n\tappendData(newData: ITrendData) {};\n\tprependData(newData: ITrendData) {};\n\tonTrendChange(changedOptions?: ITrendOptions) {}\n\tonDestroy() {\n\t\tfor (let unsubscriber of this.unbindList) {\n\t\t\tunsubscriber();\n\t\t}\n\t}\n\tprotected onSegmentsAnimate(segments: TrendSegmentsManager) {\n\t}\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onTransformationFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onZoom() {\n\t}\n\n\n\tprotected bindEvents() {\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onAnimationFrame(\n\t\t\t(trendPoints: TrendSegmentsManager) => this.onSegmentsAnimate(trendPoints)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.screen.onTransformationFrame(\n\t\t\t(options) => this.onTransformationFrame(options)\n\t\t));\n\t\t\n\t\tthis.bindEvent(this.chart.screen.onZoomFrame(\n\t\t\t(options) => this.onZoomFrame(options)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.onZoom(() => this.onZoom()));\n\t};\n\n\tprotected bindEvent(unbind: Function) {\n\t\tthis.unbindList.push(unbind);\n\t}\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsWidget.ts\n **/","export declare type TChartColor = string | number;\n\n\nexport class ChartColor {\n\n\t/**!\n\t * @preserve $.parseColor\n\t * Copyright 2011 THEtheChad Elliott\n\t * Released under the MIT and GPL licenses.\n\t */\n\t/**\n\t * Parse hex/rgb{a} color syntax.\n\t * @input string\n\t * @returns array [r,g,b{,o}]\n\t */\n\tstatic parseColor(color: string): number[] {\n\n\t\tvar cache: any\n\t\t\t, p = parseInt // Use p as a byte saving reference to parseInt\n\t\t\t, color = color.replace(/\\s\\s*/g, '') // Remove all spaces\n\t\t\t;//var\n\n\t\t// Checks for 6 digit hex and converts string to integer\n\t\tif (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\n\n\t\t// Checks for 3 digit hex and converts string to integer\n\t\telse if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\n\t\t\tcache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\n\n\n\t\t// Checks for 6 digit hex with alpha and converts string to integer\n\t\telse if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\n\n\t\t// Checks for rgba and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3], +cache[4]];\n\n\t\t// Checks for rgb and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3]];\n\n\t\t// Otherwise throw an exception to make debugging easier\n\t\telse throw Error(color + ' is not supported by parseColor');\n\n\t\t// Performs RGBA conversion by default\n\t\tisNaN(cache[3]) && (cache[3] = 1);\n\t\treturn cache;\n\t\t// Adds or removes 4th value based on rgba support\n\t\t// Support is flipped twice to prevent erros if\n\t\t// it's not defined\n\t\t//return cache.slice(0,3 + !!$.support.rgba);\n\t}\n\n\tr: number;\n\tg: number;\n\tb: number;\n\ta: number;\n\tvalue: number;\n\thexStr: string;\n\trgbaStr: string;\n\n\tconstructor (color: TChartColor) {\n\t\tthis.set(color);\n\t}\n\n\tset(color: TChartColor) {\n\t\tif (typeof color == 'number') color = '#' + (color as number).toString(16);\n\t\tlet colorStr = color as string;\n\t\tlet rgba = ChartColor.parseColor(colorStr);\n\t\tthis.r = rgba[0];\n\t\tthis.g = rgba[1];\n\t\tthis.b = rgba[2];\n\t\tthis.a = rgba[3];\n\t\tthis.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\n\t\tthis.hexStr = '#' + this.value.toString(16);\n\t\tthis.rgbaStr = `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Color.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport { TrendSegmentsManager, ITrendSegmentState } from \"../TrendSegmentsManager\";\nimport LineSegments = THREE.LineSegments;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ITrendOptions, TREND_TYPE } from '../Trend';\nimport { Utils } from '../Utils';\n\n\n/**\n * widget for drawing trends lines\n */\nexport class TrendsLineWidget extends TrendsWidget<TrendLine> {\n\tstatic widgetName = \"TrendsLine\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendLine;\n\t}\n}\n\ninterface ILineSegment {\n\tind: number,\n\tsegmentId: number\n}\n\nexport class TrendLine extends TrendWidget {\n\tprivate material: LineBasicMaterial;\n\tprivate lineSegments: LineSegments;\n\tprivate vertices: Vector3[];\n\n\t// contains indexes of free segments\n\tprivate freeSegmentsInds: number[] = [];\n\n\t// contains segments to display\n\tprivate displayedSegments: {[segmentId: number]: ILineSegment} = {};\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.LINE;\n\t}\n\t\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tvar options = this.trend.getOptions();\n\t\tthis.material = new LineBasicMaterial( { color: options.lineColor, linewidth: options.lineWidth } );\n\t\tthis.initLine();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroySegments();\n\t\t\tthis.setupSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupSegments();\n\t\t}));\n\t}\n\t\n\tprivate initLine() {\n\t\tlet geometry = new Geometry();\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.data.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.data.yAxis.range;\n\t\tthis.lineSegments = new LineSegments(geometry, this.material);\n\t\tthis.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t\tfor (let i = 0; i < this.chart.data.maxVisibleSegments; i++) {\n\t\t\tgeometry.vertices.push(new  Vector3(), new Vector3());\n\t\t\tthis.freeSegmentsInds.push(i);\n\t\t}\n\t\tthis.vertices = geometry.vertices;\n\t\tthis.setupSegments();\n\t}\n\n\tprivate setupSegments() {\n\t\tlet geometry = this.lineSegments.geometry as Geometry;\n\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.displayedSegments) {\n\t\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\t\tlet segment = this.trend.segmentsManager.segments[lineSegment.segmentId];\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupSegment(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate setupSegment(segmentId: number, segmentState: ITrendSegmentState) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tif (!lineSegment) {\n\t\t\tif (this.freeSegmentsInds.length == 0) Utils.error('Max allocated segments reached');\n\t\t\tlet ind = this.freeSegmentsInds.pop();\n\t\t\tlineSegment = this.displayedSegments[segmentId] = {segmentId, ind};\n\t\t}\n\t\tlet segmentInd = lineSegment.ind;\n\t\tlet lineStartVertex = this.vertices[segmentInd * 2];\n\t\tlet lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t\tlineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t\tlineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t}\n\n\tprivate destroySegments() {\n\t\tfor (let segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t}\n\n\tprivate destroySegment(segmentId: number) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tlet lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t\tlet lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t\tlineStartVertex.set(0, 0, 0);\n\t\tlineEndVertex.set(0, 0, 0);\n\t\tdelete this.displayedSegments[segmentId];\n\t\tthis.freeSegmentsInds.push(lineSegment.ind);\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.lineSegments.scale;\n\t\tlet state = this.chart.data;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.displayedSegments[segmentId]) continue;\n\t\t\tthis.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.data.xAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.data.yAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsLineWidget.ts\n **/","\n\nimport { TrendsWidget, TrendWidget } from './TrendsWidget';\nimport { Chart } from '../Chart';\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport Vector3 = THREE.Vector3;\nimport Mesh = THREE.Mesh;\nimport Line = THREE.Line;\nimport BoxGeometry = THREE.BoxGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { TREND_TYPE, ITrendOptions } from '../Trend';\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport remove = THREE.Cache.remove;\nimport { Utils } from '../Utils';\n\n\nconst RISE_COLOR = 0x2CAC40;\nconst FALL_COLOR = 0xEE5533;\nconst MARGIN_PERCENT = 0.3;\nconst MAX_CANDLES = 100;\n\n/**\n * widget for drawing trends candles\n */\nexport class TrendsCandlesWidget extends TrendsWidget<TrendCandlesWidget> {\n\tstatic widgetName = \"TrendsCandles\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendCandlesWidget;\n\t}\n}\n\n\nexport class TrendCandlesWidget extends TrendWidget {\n\tprivate scaleXFactor: number;\n\tprivate scaleYFactor: number;\n\tprivate object3D: Object3D;\n\t\n\t// contains indexes of free candles\n\tprivate freeCandlesInds: number[] = [];\n\tprivate candlesPool: CandleWidget[] = [];\n\tprivate candles: {[segmentId: number]: CandleWidget} = {};\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.CANDLE;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.initObject();\n\t}\n\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroyCandles();\n\t\t\tthis.setupCandles();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupCandles();\n\t\t}));\n\t}\n\t\n\tprivate initObject() {\n\t\tlet stateData = this.chart.data;\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = stateData.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = stateData.yAxis.range;\n\t\tthis.scaleXFactor = scaleXFactor;\n\t\tthis.scaleYFactor = scaleYFactor;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.object3D.frustumCulled = false;\n\t\tfor (let i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t\tthis.setupCandles();\n\t}\n\n\tprivate setupCandles() {\n\n\t\t// remove invisible\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.candles) {\n\t\t\tlet segment = this.candles[segmentId].segment;\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupCandle(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t}\n\n\tprivate destroyCandles() {\n\t\tfor (let segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t}\n\n\tprivate destroyCandle(segmentId: number) {\n\t\tlet candle = this.candles[segmentId];\n\t\tthis.object3D.remove(candle.getObject3D());\n\t\tdelete this.candles[segmentId];\n\t}\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.object3D.scale;\n\t\tif (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t}\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.candles[segmentId]) continue;\n\t\t\tlet segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t\t\tthis.setupCandle(segmentId, segmentState);\n\t\t}\n\t}\n\n\t/**\n\t * create or modify candle\n\t */\n\tprivate setupCandle(candleId: number, segmentState: ITrendSegmentState) {\n\t\tlet candleInd = candleId % MAX_CANDLES;\n\n\t\t// get candle from candlesPool to avoid creating new Objects by performance reasons\n\t\tlet candle = this.candlesPool[candleInd];\n\t\tif (!candle) {\n\t\t\tcandle = this.candlesPool[candleInd] = new CandleWidget();\n\t\t}\n\n\t\tif (!this.candles[candleId]) {\n\t\t\tthis.candles[candleId] = candle;\n\t\t\tthis.object3D.add(candle.getObject3D());\n\t\t}\n\t\tcandle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t\tcandle.setSegment(segmentState);\n\t}\n\n\ttoLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.data.xAxis.range.zeroVal;\n\t}\n\n\ttoLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.data.yAxis.range.zeroVal;\n\t}\n\n\ttoLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\nclass CandleWidget {\n\tsegment: ITrendSegmentState;\n\tprivate rect: Mesh;\n\tprivate vLine: Line;\n\tprivate hLine: Line;\n\tconstructor () {\n\t\tthis.initObject();\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.rect;\n\t}\n\n\tsetSegment(segment: ITrendSegmentState) {\n\t\tthis.segment = segment;\n\t\tlet color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\n\t\t// update rect\n\t\tlet geometry = this.rect.geometry as PlaneGeometry;\n\t\tlet material = this.rect.material as MeshBasicMaterial;\n\t\tlet width = segment.endXVal - segment.startXVal;\n\t\twidth -= width * MARGIN_PERCENT;\n\t\tlet height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t\tlet [leftTop, rightTop, leftBottom, rightBottom] = geometry.vertices;\n\t\tleftTop.set(-width / 2, height / 2, 0);\n\t\trightTop.set(width / 2, height / 2, 0);\n\t\tleftBottom.set(-width / 2, -height / 2, 0);\n\t\trightBottom.set(width / 2, -height / 2, 0);\n\n\t\t// prevent to draw bars with height < 1px\n\t\tif (Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t\t\tleftBottom.setY(leftBottom.y + 1);\n\t\t\trightBottom.setY(rightBottom.y + 1);\n\t\t}\n\n\t\tmaterial.color.set(color);\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\t// update lines\n\t\tlet vLineGeometry = this.vLine.geometry as Geometry;\n\t\tlet vLineMaterial = this.vLine.material as LineBasicMaterial;\n\t\tlet lineTop = segment.maxYVal - segment.yVal;\n\t\tlet lineBottom = segment.minYVal - segment.yVal;\n\t\tvLineGeometry.vertices[0].set(0, lineTop, 0);\n\t\tvLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t\tvLineMaterial.color.set(color);\n\t\tvLineGeometry.verticesNeedUpdate = true;\n\n\t\tlet hLineGeometry = this.hLine.geometry as Geometry;\n\t\tlet hLineMaterial = this.hLine.material as LineBasicMaterial;\n\t\tlet lineLeft = (-width) / 2;\n\t\tlet lineRight = width / 2;\n\t\thLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t\thLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t\thLineMaterial.color.set(color);\n\t\thLineGeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate initObject() {\n\t\tthis.rect = new Mesh(\n\t\t\tnew PlaneGeometry(1, 1),\n\t\t\tnew MeshBasicMaterial()\n\t\t);\n\t\tlet vLineGeometry = new Geometry();\n\t\tlet hLineGeometry = new Geometry();\n\t\tvLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\thLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\tthis.vLine = new Line(vLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.hLine = new Line(hLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.rect.add(this.vLine);\n\t\tthis.rect.add(this.hLine);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsCandleWidget.ts\n **/","export * from './deps'\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/index.ts\n **/"],"sourceRoot":""}