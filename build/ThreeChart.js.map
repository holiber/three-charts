{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ThreeChart.js","webpack:///webpack/bootstrap 45480a954172205a8eed","webpack:///./index.ts","webpack:///./src/index.ts","webpack:///./src/Chart.ts","webpack:///./src/deps/deps.ts","webpack:///./~/three/examples/js/libs/stats.min.js","webpack:///./~/three/examples/js/renderers/CanvasRenderer.js","webpack:///./~/three/examples/js/renderers/Projector.js","webpack:///./~/is-plain-object/index.js","webpack:///./~/isobject/index.js","webpack:///./~/EventEmitter2/lib/eventemitter2.js","webpack:///./src/polyfills/es6-promise.js","webpack:///./~/css-element-queries/src/ResizeSensor.js","webpack:///./src/State.ts","webpack:///./src/EventEmmiter.ts","webpack:///./src/Utils.ts","webpack:///./src/Widget.ts","webpack:///./src/TrendsManager.ts","webpack:///./src/Trend.ts","webpack:///./src/TrendSegments.ts","webpack:///./src/Screen.ts","webpack:///./src/AxisMarks.ts","webpack:///./src/interfaces.ts","webpack:///./src/widgets/AxisWidget.ts","webpack:///./src/widgets/GridWidget.ts","webpack:///./src/widgets/TrendsLoadingWidget.ts","webpack:///./src/widgets/TrendsWidget.ts","webpack:///./src/widgets/AxisMarksWidget.ts","webpack:///./src/widgets/BorderWidget.ts","webpack:///./src/widgets/TrendsIndicatorWidget.ts","webpack:///./src/widgets/TrendsLineWidget.ts","webpack:///./src/widgets/TrendsCandleWidget.ts","webpack:///./src/widgets/TrendsBeaconWidget.ts","webpack:///./src/deps/index.ts","webpack:///./src/Plugin.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","__export","hasOwnProperty","PerspectiveCamera","THREE","State_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsLoadingWidget_1","AxisMarksWidget_1","BorderWidget_1","TrendsIndicatorWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","TrendsBeaconWidget_1","deps_1","MAX_DATA_LENGTH","Chart","state","$container","plugins","_this","widgets","REVISION","Utils","error","style","getComputedStyle","width","parseInt","height","ChartState","installedWidgets","zoomThrottled","throttle","zoomValue","origin","zoom","init","installWidget","Widget","widgetName","prototype","_a","data","w","h","showStats","autoRender","scene","Scene","isStopped","enabled","renderer","renderers","antialias","alpha","setPixelRatio","devicePixelRatio","setClearColor","backgroundColor","backgroundOpacity","setSize","appendChild","domElement","$el","display","stats","Stats","setupCamera","widgetsClasses","widgetOptions","WidgetConstructor","widget","add","getObject3D","push","bindEvents","renderLoop","isDestroyed","begin","render","fpsLimit","fps","delay","setTimeout","requestAnimationFrame","end","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","getTrend","trendName","setState","controls","addEventListener","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","options","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","forEach","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","autoScroll","oldTrendsMaxX","prevState","computedData","trends","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","xAxis","range","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","Math","min","max","autoScrollIsEnabled","then","createPreviewChart","userOptions","previewChartOptions","animations","Grid","Axis","TrendsGradient","deepMerge","window","CanvasRenderer","WebGLRenderer","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsBeaconWidget","TrendsIndicatorWidget","TrendsLoadingWidget","AxisMarksWidget","BorderWidget","TweenLite","TweenMax","isPlainObject","EE2","es6_promise_1","Promise","a","dom","k","d","children","length","l","document","createElement","cssText","g","performance","Date","now","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","round","u","n","q","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","SpriteCanvasMaterial","parameters","Material","type","color","Color","program","setValues","Object","create","constructor","material","copy","console","log","_renderData","_elements","_lights","_projector","Projector","_canvas","canvas","undefined","_canvasWidth","_canvasHeight","_canvasWidthHalf","floor","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_context","_clearColor","_clearAlpha","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_camera","_v1","_v2","_v3","_v4","_v5","RenderableVertex","_v6","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_clipBox","Box2","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_vector3","Vector3","_centroid","_normal","_normalViewMatrix","Matrix3","setLineDash","autoClear","sortObjects","sortElements","info","vertices","faces","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","value","updateStyle","setViewport","setScissor","setScissorTest","setClearColorHex","hex","warn","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","intersect","expandByScalar","clearRect","setBlending","NormalBlending","setOpacity","setFillStyle","makeEmpty","clearColor","clearDepth","clearStencil","Camera","setTransform","translate","projectScene","elements","lights","getNormalMatrix","matrixWorldInverse","calculateLights","el","element","opacity","RenderableSprite","renderSprite","RenderableLine","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","RenderableFace","v3","overdraw","expand","renderFace3","union","setRGB","ll","light","lightColor","AmbientLight","DirectionalLight","PointLight","calculateLight","normal","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","multiplyScalar","subVectors","distance","distanceTo","blending","scaleX","scale","scaleY","dist","sqrt","SpriteMaterial","texture","map","pattern","version","textureToPattern","bitmap","image","ox","offset","oy","sx","repeat","sy","cx","cy","save","rotation","rotate","restore","getStyle","setStrokeStyle","beginPath","moveTo","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","LineDashedMaterial","dashSize","gapSize","uv1","uv2","uv3","drawTriangle","MeshLambertMaterial","MeshPhongMaterial","emissive","FaceColors","multiply","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","MeshBasicMaterial","mapping","UVMapping","uvs","patternPath","envMap","SphericalReflectionMapping","vertexNormalsModel","applyMatrix3","MeshNormalMaterial","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","repeatX","wrapS","RepeatWrapping","repeatY","wrapT","createPattern","onUpdate","u0","v0","u1","u2","det","idet","offsetX","offsetY","transform","clipImage","clip","pixels","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","lineWidth","lineCap","lineJoin","strokeStyle","RenderableObject","object","renderOrder","vertexNormalsLength","Vector2","Vector4","visible","vertex","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","objects","_vector4","Box3","_boundingBox","_points3","Array","_points4","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","unproject","pickingRay","RenderList","normals","normalMatrix","setObject","projectVertex","applyMatrix4","invW","pushVertex","getNextVertexInPool","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","getNextLineInPool","pushTriangle","side","DoubleSide","getNextFaceInPool","fromArray","i","arguments","uv","renderList","autoUpdate","updateMatrixWorld","parent","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","traverseVisible","Light","Mesh","Line","Sprite","frustumCulled","intersectsObject","getNextObjectInPool","applyProjection","sort","painterSort","o","ol","geometry","BufferGeometry","attributes","groups","positions","array","index","indices","group","start","count","Geometry","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","target","targetVertex","fl","face","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","step","LineSegments","clipLine","colors","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","isObject","isObjectObject","toString","ctor","prot","val","isArray","__WEBPACK_AMD_DEFINE_RESULT__","_isArray","obj","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","concat","**","growListenerTree","listener","split","slice","name","shift","warned","trace","setMaxListeners","event","once","fn","many","ttl","Error","off","apply","_origin","on","emit","_all","args","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","removeAllListeners","listenersAny","EventEmitter2","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","EventEmmiter_1","Widget_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","initialState","AXIS_RANGE_TYPE","ALL","from","to","padding","margin","dataType","AXIS_DATA_TYPE","NUMBER","gridMinSize","marks","yAxis","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","Linear","easeNone","scrollSpeed","scrollEase","autoScrollSpeed","autoScrollEase","pluginsState","eventEmitterMaxListeners","isReady","ee","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","xAxisMarks","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","initListeners","onDestroy","subscribe","onInitialStateApplied","onReady","onChange","onTrendChange","onZoom","onPluginsStateChange","newState","eventData","silent","stateData","changedProps","key","trendsData","trendOptions","newStateContainsData","keys","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","widgetsOptions","WidgetClass","defaultOptions","getDefaultOptions","ChartWidget","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","zeroVal","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","copyProps","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","NAME","pluginWidgets","PluginWidget","setupChartState","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","maxLength","rangeLessThenMinValue","minLength","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","currentRange","nextRange","newScroll","resolve","animationTime","zoomToRange","scrollToEnd","endXVal","getPointOnXAxis","xVal","getPointOnYAxis","yVal","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","eventName","_i","listenersCount","deepmerge","src","mergeArrays","dst","indexOf","obj1","obj2","deepCopy","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","intStr","lengthDiff","afterPointDigitsCount","afterPointStr","substr","bindEvent","createTexture","ctx","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","getUid","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","parseColor","cache","replace","exec","isNaN","getHexColor","str","rgb","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","random","srcObject","dstObject","props","excludeProps","chartState","unsubscriber","Trend_1","EVENTS","SEGMENTS_REBUILDED","trendsCalculatedOptions","trend","createTrend","getCalculatedOptions","getEnabledTrends","enabledTrends","allTrends","getOptions","getData","firstTrendData","getExtremumYVal","extremumIsMax","fromX","toX","compareFn","trends_1","trendData","trendYValues","dataItem","NaN","onSegmentsRebuilded","onInitialStateAppliedHandler","_loop_1","this_1","segments","onRebuild","Trend","TrendSegments_1","PREPEND_REQUEST","TREND_TYPE","DEFAULT_OPTIONS","LINE","maxSegmentLength","lineColor","hasGradient","hasBeacon","settingsForTypes","CANDLE","minSegmentLengthInPx","maxSegmentLengthInPx","minYVal","maxYVal","dataset","prepareData","TrendSegments","checkForPrependRequest","changedOptions","appendData","rawData","updatedTrendData","changeData","prependData","allData","newData_1","item","statePatch","filteredData","data_1","getFirstItem","getLastItem","setOptions","onPrependRequest","onDataChange","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","reject","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","segmentsById","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","onDestroyHandler","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","segmentLength","currentSegmentLengthInPx","Number","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","getNext","valueInPoint","onAnimationFrame","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","unshift","needRebuildSegments","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","getPrev","prevPoint","getFrameVal","getFramePoint","frameVal","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","__extends","__","AXIS_MARK_DEFAULT_OPTIONS","showValue","stickToEdges","title","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","getItem","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","_super","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","traverse","transparent","axisMesh","PlaneGeometry","axisOptions","axisGridParams","getGridParamsForAxis","edgeOffset","segmentsCount","pxVal","textAlign","DATE","getDateStr","gridParams","sec","hour","day","tf","getHours","getMinutes","getSeconds","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","xLinesCount","yLinesCount","lineSegments","setZ","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","PlaneBufferGeometry","TrendsWidget_1","getTrendWidgetClass","TrendLoading","TrendsWidget","mesh","deactivate","widgetIsEnabled","activate","restart","updatePosition","center","arc","pointVector","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","widgetObject","getObjectByName","onSegmentsAnimate","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY","CANVAS_WIDTH","CANVAS_HEIGHT","OFFSET_X","TrendIndicator","initObject","hasIndicator","lastItem","segmentEndXVal","segmentEndYVal","endPointVector","screenWidth","indicatorIsOutOfScreen","MAX_DISPLAYED_SEGMENTS","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","scaleXFactor","scaleYFactor","segmentIsNotDisplayed","destroySegment","setupSegment","segmentState","pop","segmentInd","lineStartVertex","lineEndVertex","toLocalX","toLocalY","currentScale","toLocalVec","vec","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","TrendBeacon","onStateChange","stopAnimation","animated","animationObject","trendsSegments","DEFAULT_CONFIG","installPluginWidgets","ChartPlugin","config","onChartReadyHandler","changedPluginsStates","onStateChanged","changedState"],"mappings":"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","file":"ThreeChart.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(1));\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(2));\r\n\t__export(__webpack_require__(21));\r\n\t__export(__webpack_require__(20));\r\n\t__export(__webpack_require__(19));\r\n\t__export(__webpack_require__(12));\r\n\t__export(__webpack_require__(17));\r\n\t__export(__webpack_require__(18));\r\n\t__export(__webpack_require__(16));\r\n\t__export(__webpack_require__(14));\r\n\t__export(__webpack_require__(15));\r\n\t__export(__webpack_require__(33));\r\n\t__export(__webpack_require__(25));\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t__webpack_require__(3);\r\n\tvar PerspectiveCamera = THREE.PerspectiveCamera;\r\n\tvar State_1 = __webpack_require__(12);\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar AxisWidget_1 = __webpack_require__(22);\r\n\tvar GridWidget_1 = __webpack_require__(23);\r\n\tvar TrendsLoadingWidget_1 = __webpack_require__(24);\r\n\tvar AxisMarksWidget_1 = __webpack_require__(26);\r\n\tvar BorderWidget_1 = __webpack_require__(27);\r\n\tvar TrendsIndicatorWidget_1 = __webpack_require__(28);\r\n\tvar TrendsLineWidget_1 = __webpack_require__(29);\r\n\tvar TrendsCandleWidget_1 = __webpack_require__(30);\r\n\tvar TrendsBeaconWidget_1 = __webpack_require__(31);\r\n\tvar deps_1 = __webpack_require__(32);\r\n\texports.MAX_DATA_LENGTH = 2692000;\r\n\tvar Chart = (function () {\r\n\t    function Chart(state, $container, plugins) {\r\n\t        var _this = this;\r\n\t        if (plugins === void 0) { plugins = []; }\r\n\t        this.widgets = [];\r\n\t        if (!THREE || !THREE.REVISION)\r\n\t            Utils_1.Utils.error('three.js not found');\r\n\t        if (!$container) {\r\n\t            Utils_1.Utils.error('$el must be set');\r\n\t        }\r\n\t        // calculate chart size\r\n\t        var style = getComputedStyle($container);\r\n\t        state.width = parseInt(style.width);\r\n\t        state.height = parseInt(style.height);\r\n\t        this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\r\n\t        this.zoomThrottled = Utils_1.Utils.throttle(function (zoomValue, origin) { return _this.zoom(zoomValue, origin); }, 200);\r\n\t        this.$container = $container;\r\n\t        this.init($container);\r\n\t    }\r\n\t    ;\r\n\t    Chart.installWidget = function (Widget) {\r\n\t        if (!Widget.widgetName) {\r\n\t            Utils_1.Utils.error('unnamed widget');\r\n\t        }\r\n\t        this.installedWidgets[Widget.widgetName] = Widget;\r\n\t    };\r\n\t    Chart.prototype.init = function ($container) {\r\n\t        var state = this.state;\r\n\t        var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\r\n\t        this.scene = new THREE.Scene();\r\n\t        this.isStopped = !autoRender.enabled;\r\n\t        var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\r\n\t            antialias: true,\r\n\t            alpha: true\r\n\t        });\r\n\t        renderer.setPixelRatio(Chart.devicePixelRatio);\r\n\t        renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\r\n\t        renderer.setSize(w, h);\r\n\t        $container.appendChild(renderer.domElement);\r\n\t        this.$el = renderer.domElement;\r\n\t        this.$el.style.display = 'block';\r\n\t        if (showStats) {\r\n\t            this.stats = new Stats();\r\n\t            $container.appendChild(this.stats.domElement);\r\n\t        }\r\n\t        this.setupCamera();\r\n\t        // init widgets\r\n\t        var widgetsClasses = this.state.widgetsClasses;\r\n\t        for (var widgetName in widgetsClasses) {\r\n\t            var widgetOptions = this.state.data.widgets[widgetName];\r\n\t            if (!widgetOptions.enabled)\r\n\t                continue;\r\n\t            var WidgetConstructor = widgetsClasses[widgetName];\r\n\t            var widget = new WidgetConstructor(this.state);\r\n\t            this.scene.add(widget.getObject3D());\r\n\t            this.widgets.push(widget);\r\n\t        }\r\n\t        this.bindEvents();\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    Chart.prototype.renderLoop = function () {\r\n\t        var _this = this;\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        this.stats && this.stats.begin();\r\n\t        this.render();\r\n\t        if (this.isStopped)\r\n\t            return;\r\n\t        var fpsLimit = this.state.data.autoRender.fps;\r\n\t        if (fpsLimit) {\r\n\t            var delay = 1000 / fpsLimit;\r\n\t            setTimeout(function () { return requestAnimationFrame(function () { return _this.renderLoop(); }); }, delay);\r\n\t        }\r\n\t        else {\r\n\t            requestAnimationFrame(function () { return _this.renderLoop(); });\r\n\t        }\r\n\t        this.stats && this.stats.end();\r\n\t    };\r\n\t    Chart.prototype.render = function () {\r\n\t        this.renderer.render(this.scene, this.camera);\r\n\t    };\r\n\t    Chart.prototype.stop = function () {\r\n\t        this.isStopped = true;\r\n\t    };\r\n\t    Chart.prototype.run = function () {\r\n\t        this.isStopped = false;\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * call to destroy chart an init garbage collection\r\n\t     */\r\n\t    Chart.prototype.destroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.stop();\r\n\t        this.state.destroy();\r\n\t        this.unbindEvents();\r\n\t        // WARNING! undocumented method for free webgl context\r\n\t        try {\r\n\t            this.renderer.forceContextLoss();\r\n\t        }\r\n\t        catch (wtf) {\r\n\t        }\r\n\t        this.renderer.context = null;\r\n\t        this.renderer.domElement = null;\r\n\t        this.renderer = null;\r\n\t    };\r\n\t    Chart.prototype.getState = function () {\r\n\t        return this.state.data;\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for Chart.state.getTrend\r\n\t     */\r\n\t    Chart.prototype.getTrend = function (trendName) {\r\n\t        return this.state.getTrend(trendName);\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for Chart.state.setState\r\n\t     */\r\n\t    Chart.prototype.setState = function (state) {\r\n\t        return this.state.setState(state);\r\n\t    };\r\n\t    Chart.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var $el = this.$el;\r\n\t        if (this.state.data.controls.enabled) {\r\n\t            $el.addEventListener('mousewheel', function (ev) {\r\n\t                _this.onMouseWheel(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousemove', function (ev) {\r\n\t                _this.onMouseMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousedown', function (ev) { return _this.onMouseDown(ev); });\r\n\t            $el.addEventListener('mouseup', function (ev) { return _this.onMouseUp(ev); });\r\n\t            $el.addEventListener('touchmove', function (ev) {\r\n\t                _this.onTouchMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('touchend', function (ev) {\r\n\t                _this.onTouchEnd(ev);\r\n\t            });\r\n\t        }\r\n\t        if (this.state.data.autoResize) {\r\n\t            this.resizeSensor = new deps_1.ResizeSensor(this.$container, function () {\r\n\t                _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\r\n\t            });\r\n\t        }\r\n\t        this.unsubscribers = [\r\n\t            this.state.onTrendsChange(function () { return _this.autoscroll(); }),\r\n\t            this.state.screen.onTransformationFrame(function (options) { return _this.onScreenTransformHandler(options); }),\r\n\t            this.state.onResize(function (options) { return _this.onChartResize(); })\r\n\t        ];\r\n\t    };\r\n\t    Chart.prototype.unbindEvents = function () {\r\n\t        // TODO: unbind events correctly\r\n\t        try {\r\n\t            this.resizeSensor && this.resizeSensor.detach();\r\n\t        }\r\n\t        catch (e) {\r\n\t        }\r\n\t        this.$el.remove();\r\n\t        this.unsubscribers.forEach(function (unsubscribe) { return unsubscribe(); });\r\n\t    };\r\n\t    Chart.prototype.setupCamera = function () {\r\n\t        var camSettings = this.state.screen.getCameraSettings();\r\n\t        if (!this.camera) {\r\n\t            this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\r\n\t            this.scene.add(this.camera);\r\n\t        }\r\n\t        else {\r\n\t            this.camera.fov = camSettings.FOV;\r\n\t            this.camera.aspect = camSettings.aspect;\r\n\t            this.camera.far = camSettings.far;\r\n\t            this.camera.near = camSettings.near;\r\n\t            this.camera.updateProjectionMatrix();\r\n\t        }\r\n\t        this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\r\n\t        this.cameraInitialPosition = this.camera.position.clone();\r\n\t        this.onScreenTransformHandler(this.state.screen.options);\r\n\t    };\r\n\t    Chart.prototype.onScreenTransformHandler = function (options) {\r\n\t        if (options.scrollX != void 0) {\r\n\t            var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\r\n\t            // scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setX(scrollX_1);\r\n\t        }\r\n\t        if (options.scrollY != void 0) {\r\n\t            var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\r\n\t            // scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setY(scrollY_1);\r\n\t        }\r\n\t    };\r\n\t    Chart.prototype.autoscroll = function () {\r\n\t        var state = this.state;\r\n\t        if (!state.data.autoScroll)\r\n\t            return;\r\n\t        var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\r\n\t        var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\r\n\t        if (trendsMaxXDelta > 0) {\r\n\t            var maxVisibleX = this.state.screen.getScreenRightVal();\r\n\t            var paddingRightX = this.state.getPaddingRight();\r\n\t            var currentScroll = state.data.xAxis.range.scroll;\r\n\t            if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\r\n\t                return;\r\n\t            }\r\n\t            var scrollDelta = trendsMaxXDelta;\r\n\t            this.setState({ xAxis: { range: { scroll: currentScroll + scrollDelta } } });\r\n\t        }\r\n\t    };\r\n\t    Chart.prototype.onScrollStop = function () {\r\n\t        // var tendsXMax = this.state.data.computedData.trends.maxX;\r\n\t        // var paddingRightX = this.state.getPaddingRight();\r\n\t        // if (tendsXMax < paddingRightX) {\r\n\t        // \tthis.state.scrollToEnd();\r\n\t        // }\r\n\t    };\r\n\t    Chart.prototype.onMouseDown = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t    };\r\n\t    Chart.prototype.onMouseUp = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    Chart.prototype.onMouseMove = function (ev) {\r\n\t        if (this.state.data.cursor.dragMode) {\r\n\t            this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t        }\r\n\t    };\r\n\t    Chart.prototype.onMouseWheel = function (ev) {\r\n\t        ev.stopPropagation();\r\n\t        ev.preventDefault();\r\n\t        var zoomOrigin = ev.layerX / this.state.data.width;\r\n\t        var zoomValue = 1 + ev.wheelDeltaY * 0.001;\r\n\t        this.zoom(zoomValue, zoomOrigin);\r\n\t    };\r\n\t    Chart.prototype.onTouchMove = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY } });\r\n\t    };\r\n\t    Chart.prototype.onTouchEnd = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    Chart.prototype.onChartContainerResizeHandler = function (width, height) {\r\n\t        this.setState({ width: width, height: height });\r\n\t    };\r\n\t    Chart.prototype.onChartResize = function () {\r\n\t        var _a = this.state.data, width = _a.width, height = _a.height;\r\n\t        this.renderer.setSize(width, height);\r\n\t        this.setupCamera();\r\n\t    };\r\n\t    Chart.prototype.zoom = function (zoomValue, zoomOrigin) {\r\n\t        var _this = this;\r\n\t        var MAX_ZOOM_VALUE = 1.5;\r\n\t        var MIN_ZOOM_VALUE = 0.7;\r\n\t        zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\r\n\t        zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\r\n\t        var autoScrollIsEnabled = this.state.data.autoScroll;\r\n\t        if (autoScrollIsEnabled)\r\n\t            this.state.setState({ autoScroll: false });\r\n\t        this.state.zoom(zoomValue, zoomOrigin).then(function () {\r\n\t            if (autoScrollIsEnabled)\r\n\t                _this.setState({ autoScroll: true });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     * creates simple chart without animations and minimal widgets set\r\n\t     */\r\n\t    Chart.createPreviewChart = function (userOptions, $el) {\r\n\t        var previewChartOptions = {\r\n\t            animations: { enabled: false },\r\n\t            widgets: {\r\n\t                Grid: { enabled: false },\r\n\t                Axis: { enabled: false },\r\n\t                TrendsGradient: { enabled: false }\r\n\t            }\r\n\t        };\r\n\t        var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\r\n\t        return new Chart(options, $el);\r\n\t    };\r\n\t    Chart.devicePixelRatio = window.devicePixelRatio;\r\n\t    Chart.installedWidgets = {};\r\n\t    Chart.renderers = {\r\n\t        CanvasRenderer: THREE.CanvasRenderer,\r\n\t        WebGLRenderer: THREE.WebGLRenderer\r\n\t    };\r\n\t    return Chart;\r\n\t}());\r\n\texports.Chart = Chart;\r\n\t// install built-in widgets\r\n\tChart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\r\n\tChart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\r\n\tChart.installWidget(AxisWidget_1.AxisWidget);\r\n\tChart.installWidget(GridWidget_1.GridWidget);\r\n\tChart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\r\n\tChart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\r\n\t// Chart.installWidget(TrendsGradientWidget);\r\n\tChart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\r\n\tChart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\r\n\tChart.installWidget(BorderWidget_1.BorderWidget);\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"./ResizeSensor.ts\" />\r\n\t\"use strict\";\r\n\twindow.TweenLite = TweenMax;\r\n\twindow.Stats = __webpack_require__(4);\r\n\t//require('gsap/src/uncompressed/easing/EasePack.js');\r\n\t__webpack_require__(5);\r\n\t__webpack_require__(6);\r\n\texports.isPlainObject = __webpack_require__(7);\r\n\texports.EE2 = __webpack_require__(9);\r\n\tvar es6_promise_1 = __webpack_require__(10);\r\n\texports.Promise = es6_promise_1.Promise;\r\n\texports.ResizeSensor = __webpack_require__(11);\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t// stats.js - http://github.com/mrdoob/stats.js\r\n\tvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\r\n\tif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\r\n\tStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\r\n\tv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.SpriteCanvasMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'SpriteCanvasMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff );\r\n\t\tthis.program = function ( context, color ) {};\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\r\n\t\r\n\tTHREE.SpriteCanvasMaterial.prototype.clone = function () {\r\n\t\r\n\t\tvar material = new THREE.SpriteCanvasMaterial();\r\n\t\r\n\t\tmaterial.copy( this );\r\n\t\tmaterial.color.copy( this.color );\r\n\t\tmaterial.program = this.program;\r\n\t\r\n\t\treturn material;\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.CanvasRenderer = function ( parameters ) {\r\n\t\r\n\t\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\r\n\t\r\n\t\tparameters = parameters || {};\r\n\t\r\n\t\tvar _this = this,\r\n\t\t_renderData, _elements, _lights,\r\n\t\t_projector = new THREE.Projector(),\r\n\t\r\n\t\t_canvas = parameters.canvas !== undefined\r\n\t\t\t\t ? parameters.canvas\r\n\t\t\t\t : document.createElement( 'canvas' ),\r\n\t\r\n\t\t_canvasWidth = _canvas.width,\r\n\t\t_canvasHeight = _canvas.height,\r\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\r\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\r\n\t\r\n\t\t_viewportX = 0,\r\n\t\t_viewportY = 0,\r\n\t\t_viewportWidth = _canvasWidth,\r\n\t\t_viewportHeight = _canvasHeight,\r\n\t\r\n\t\t_pixelRatio = 1,\r\n\t\r\n\t\t_context = _canvas.getContext( '2d', {\r\n\t\t\talpha: parameters.alpha === true\r\n\t\t} ),\r\n\t\r\n\t\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t\t_clearAlpha = parameters.alpha === true ? 0 : 1,\r\n\t\r\n\t\t_contextGlobalAlpha = 1,\r\n\t\t_contextGlobalCompositeOperation = 0,\r\n\t\t_contextStrokeStyle = null,\r\n\t\t_contextFillStyle = null,\r\n\t\t_contextLineWidth = null,\r\n\t\t_contextLineCap = null,\r\n\t\t_contextLineJoin = null,\r\n\t\t_contextLineDash = [],\r\n\t\r\n\t\t_camera,\r\n\t\r\n\t\t_v1, _v2, _v3, _v4,\r\n\t\t_v5 = new THREE.RenderableVertex(),\r\n\t\t_v6 = new THREE.RenderableVertex(),\r\n\t\r\n\t\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\r\n\t\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\r\n\t\r\n\t\t_color = new THREE.Color(),\r\n\t\t_color1 = new THREE.Color(),\r\n\t\t_color2 = new THREE.Color(),\r\n\t\t_color3 = new THREE.Color(),\r\n\t\t_color4 = new THREE.Color(),\r\n\t\r\n\t\t_diffuseColor = new THREE.Color(),\r\n\t\t_emissiveColor = new THREE.Color(),\r\n\t\r\n\t\t_lightColor = new THREE.Color(),\r\n\t\r\n\t\t_patterns = {},\r\n\t\r\n\t\t_image, _uvs,\r\n\t\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\r\n\t\r\n\t\t_clipBox = new THREE.Box2(),\r\n\t\t_clearBox = new THREE.Box2(),\r\n\t\t_elemBox = new THREE.Box2(),\r\n\t\r\n\t\t_ambientLight = new THREE.Color(),\r\n\t\t_directionalLights = new THREE.Color(),\r\n\t\t_pointLights = new THREE.Color(),\r\n\t\r\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\r\n\t\t_centroid = new THREE.Vector3(),\r\n\t\t_normal = new THREE.Vector3(),\r\n\t\t_normalViewMatrix = new THREE.Matrix3();\r\n\t\r\n\t\t/* TODO\r\n\t\t_canvas.mozImageSmoothingEnabled = false;\r\n\t\t_canvas.webkitImageSmoothingEnabled = false;\r\n\t\t_canvas.msImageSmoothingEnabled = false;\r\n\t\t_canvas.imageSmoothingEnabled = false;\r\n\t\t*/\r\n\t\r\n\t\t// dash+gap fallbacks for Firefox and everything else\r\n\t\r\n\t\tif ( _context.setLineDash === undefined ) {\r\n\t\r\n\t\t\t_context.setLineDash = function () {};\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.domElement = _canvas;\r\n\t\r\n\t\tthis.autoClear = true;\r\n\t\tthis.sortObjects = true;\r\n\t\tthis.sortElements = true;\r\n\t\r\n\t\tthis.info = {\r\n\t\r\n\t\t\trender: {\r\n\t\r\n\t\t\t\tvertices: 0,\r\n\t\t\t\tfaces: 0\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// WebGLRenderer compatibility\r\n\t\r\n\t\tthis.supportsVertexTextures = function () {};\r\n\t\tthis.setFaceCulling = function () {};\r\n\t\r\n\t\t// API\r\n\t\r\n\t\tthis.getContext = function () {\r\n\t\r\n\t\t\treturn _context;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getContextAttributes = function () {\r\n\t\r\n\t\t\treturn _context.getContextAttributes();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getPixelRatio = function () {\r\n\t\r\n\t\t\treturn _pixelRatio;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setPixelRatio = function ( value ) {\r\n\t\r\n\t\t\tif ( value !== undefined ) _pixelRatio = value;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setSize = function ( width, height, updateStyle ) {\r\n\t\r\n\t\t\t_canvasWidth = width * _pixelRatio;\r\n\t\t\t_canvasHeight = height * _pixelRatio;\r\n\t\r\n\t\t\t_canvas.width = _canvasWidth;\r\n\t\t\t_canvas.height = _canvasHeight;\r\n\t\r\n\t\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\r\n\t\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\r\n\t\r\n\t\t\tif ( updateStyle !== false ) {\r\n\t\r\n\t\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t\t_canvas.style.height = height + 'px';\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\r\n\t\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\r\n\t\r\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\r\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\r\n\t\r\n\t\t\t_contextGlobalAlpha = 1;\r\n\t\t\t_contextGlobalCompositeOperation = 0;\r\n\t\t\t_contextStrokeStyle = null;\r\n\t\t\t_contextFillStyle = null;\r\n\t\t\t_contextLineWidth = null;\r\n\t\t\t_contextLineCap = null;\r\n\t\t\t_contextLineJoin = null;\r\n\t\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setViewport = function ( x, y, width, height ) {\r\n\t\r\n\t\t\t_viewportX = x * _pixelRatio;\r\n\t\t\t_viewportY = y * _pixelRatio;\r\n\t\r\n\t\t\t_viewportWidth = width * _pixelRatio;\r\n\t\t\t_viewportHeight = height * _pixelRatio;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setScissor = function () {};\r\n\t\tthis.setScissorTest = function () {};\r\n\t\r\n\t\tthis.setClearColor = function ( color, alpha ) {\r\n\t\r\n\t\t\t_clearColor.set( color );\r\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\r\n\t\r\n\t\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\r\n\t\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setClearColorHex = function ( hex, alpha ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\r\n\t\t\tthis.setClearColor( hex, alpha );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getClearColor = function () {\r\n\t\r\n\t\t\treturn _clearColor;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getClearAlpha = function () {\r\n\t\r\n\t\t\treturn _clearAlpha;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getMaxAnisotropy = function () {\r\n\t\r\n\t\t\treturn 0;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clear = function () {\r\n\t\r\n\t\t\tif ( _clearBox.isEmpty() === false ) {\r\n\t\r\n\t\t\t\t_clearBox.intersect( _clipBox );\r\n\t\t\t\t_clearBox.expandByScalar( 2 );\r\n\t\r\n\t\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\r\n\t\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\r\n\t\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\r\n\t\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\r\n\t\r\n\t\t\t\tif ( _clearAlpha < 1 ) {\r\n\t\r\n\t\t\t\t\t_context.clearRect(\r\n\t\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t\t_clearBox.max.y | 0,\r\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\r\n\t\t\t\t\t);\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( _clearAlpha > 0 ) {\r\n\t\r\n\t\t\t\t\tsetBlending( THREE.NormalBlending );\r\n\t\t\t\t\tsetOpacity( 1 );\r\n\t\r\n\t\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\r\n\t\r\n\t\t\t\t\t_context.fillRect(\r\n\t\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t\t_clearBox.max.y | 0,\r\n\t\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\r\n\t\t\t\t\t);\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_clearBox.makeEmpty();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// compatibility\r\n\t\r\n\t\tthis.clearColor = function () {};\r\n\t\tthis.clearDepth = function () {};\r\n\t\tthis.clearStencil = function () {};\r\n\t\r\n\t\tthis.render = function ( scene, camera ) {\r\n\t\r\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.autoClear === true ) this.clear();\r\n\t\r\n\t\t\t_this.info.render.vertices = 0;\r\n\t\t\t_this.info.render.faces = 0;\r\n\t\r\n\t\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\r\n\t\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\r\n\t\r\n\t\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\r\n\t\t\t_elements = _renderData.elements;\r\n\t\t\t_lights = _renderData.lights;\r\n\t\t\t_camera = camera;\r\n\t\r\n\t\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\r\n\t\r\n\t\t\t/* DEBUG\r\n\t\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\r\n\t\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\r\n\t\t\t*/\r\n\t\r\n\t\t\tcalculateLights();\r\n\t\r\n\t\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\r\n\t\r\n\t\t\t\tvar element = _elements[ e ];\r\n\t\r\n\t\t\t\tvar material = element.material;\r\n\t\r\n\t\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\r\n\t\r\n\t\t\t\t_elemBox.makeEmpty();\r\n\t\r\n\t\t\t\tif ( element instanceof THREE.RenderableSprite ) {\r\n\t\r\n\t\t\t\t\t_v1 = element;\r\n\t\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\r\n\t\r\n\t\t\t\t\trenderSprite( _v1, element, material );\r\n\t\r\n\t\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\r\n\t\r\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2;\r\n\t\r\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\t\r\n\t\t\t\t\t_elemBox.setFromPoints( [\r\n\t\t\t\t\t\t_v1.positionScreen,\r\n\t\t\t\t\t\t_v2.positionScreen\r\n\t\t\t\t\t] );\r\n\t\r\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\r\n\t\r\n\t\t\t\t\t\trenderLine( _v1, _v2, element, material );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\r\n\t\r\n\t\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\r\n\t\r\n\t\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\r\n\t\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\r\n\t\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\r\n\t\r\n\t\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\r\n\t\r\n\t\t\t\t\tif ( material.overdraw > 0 ) {\r\n\t\r\n\t\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\r\n\t\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\r\n\t\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t_elemBox.setFromPoints( [\r\n\t\t\t\t\t\t_v1.positionScreen,\r\n\t\t\t\t\t\t_v2.positionScreen,\r\n\t\t\t\t\t\t_v3.positionScreen\r\n\t\t\t\t\t] );\r\n\t\r\n\t\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\r\n\t\r\n\t\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t/* DEBUG\r\n\t\t\t\tsetLineWidth( 1 );\r\n\t\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\r\n\t\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\r\n\t\t\t\t*/\r\n\t\r\n\t\t\t\t_clearBox.union( _elemBox );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t/* DEBUG\r\n\t\t\tsetLineWidth( 1 );\r\n\t\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\r\n\t\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\r\n\t\t\t*/\r\n\t\r\n\t\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t//\r\n\t\r\n\t\tfunction calculateLights() {\r\n\t\r\n\t\t\t_ambientLight.setRGB( 0, 0, 0 );\r\n\t\t\t_directionalLights.setRGB( 0, 0, 0 );\r\n\t\t\t_pointLights.setRGB( 0, 0, 0 );\r\n\t\r\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\t\r\n\t\t\t\tvar light = _lights[ l ];\r\n\t\t\t\tvar lightColor = light.color;\r\n\t\r\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\t\r\n\t\t\t\t\t_ambientLight.add( lightColor );\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\t\r\n\t\t\t\t\t// for sprites\r\n\t\r\n\t\t\t\t\t_directionalLights.add( lightColor );\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\t\r\n\t\t\t\t\t// for sprites\r\n\t\r\n\t\t\t\t\t_pointLights.add( lightColor );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction calculateLight( position, normal, color ) {\r\n\t\r\n\t\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\t\r\n\t\t\t\tvar light = _lights[ l ];\r\n\t\r\n\t\t\t\t_lightColor.copy( light.color );\r\n\t\r\n\t\t\t\tif ( light instanceof THREE.DirectionalLight ) {\r\n\t\r\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\r\n\t\r\n\t\t\t\t\tvar amount = normal.dot( lightPosition );\r\n\t\r\n\t\t\t\t\tif ( amount <= 0 ) continue;\r\n\t\r\n\t\t\t\t\tamount *= light.intensity;\r\n\t\r\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\t\r\n\t\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\r\n\t\r\n\t\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\r\n\t\r\n\t\t\t\t\tif ( amount <= 0 ) continue;\r\n\t\r\n\t\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\r\n\t\r\n\t\t\t\t\tif ( amount == 0 ) continue;\r\n\t\r\n\t\t\t\t\tamount *= light.intensity;\r\n\t\r\n\t\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction renderSprite( v1, element, material ) {\r\n\t\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\t\r\n\t\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\r\n\t\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\r\n\t\r\n\t\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\r\n\t\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\r\n\t\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\r\n\t\r\n\t\t\tif ( material instanceof THREE.SpriteMaterial ) {\r\n\t\r\n\t\t\t\tvar texture = material.map;\r\n\t\r\n\t\t\t\tif ( texture !== null ) {\r\n\t\r\n\t\t\t\t\tvar pattern = _patterns[ texture.id ];\r\n\t\r\n\t\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\r\n\t\r\n\t\t\t\t\t\tpattern = textureToPattern( texture );\r\n\t\t\t\t\t\t_patterns[ texture.id ] = pattern;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( pattern.canvas !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tsetFillStyle( pattern.canvas );\r\n\t\r\n\t\t\t\t\t\tvar bitmap = texture.image;\r\n\t\r\n\t\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\r\n\t\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\r\n\t\r\n\t\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\r\n\t\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\r\n\t\r\n\t\t\t\t\t\tvar cx = scaleX / sx;\r\n\t\t\t\t\t\tvar cy = scaleY / sy;\r\n\t\r\n\t\t\t\t\t\t_context.save();\r\n\t\t\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\r\n\t\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\r\n\t\t\t\t\t\t_context.scale( cx, cy );\r\n\t\t\t\t\t\t_context.translate( - ox, - oy );\r\n\t\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\r\n\t\t\t\t\t\t_context.restore();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// no texture\r\n\t\r\n\t\t\t\t\tsetFillStyle( material.color.getStyle() );\r\n\t\r\n\t\t\t\t\t_context.save();\r\n\t\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\r\n\t\t\t\t\t_context.scale( scaleX, - scaleY );\r\n\t\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\r\n\t\t\t\t\t_context.restore();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\r\n\t\r\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\t\t\t\tsetFillStyle( material.color.getStyle() );\r\n\t\r\n\t\t\t\t_context.save();\r\n\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\r\n\t\t\t\t_context.scale( scaleX, scaleY );\r\n\t\r\n\t\t\t\tmaterial.program( _context );\r\n\t\r\n\t\t\t\t_context.restore();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t/* DEBUG\r\n\t\t\tsetStrokeStyle( 'rgb(255,255,0)' );\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( v1.x - 10, v1.y );\r\n\t\t\t_context.lineTo( v1.x + 10, v1.y );\r\n\t\t\t_context.moveTo( v1.x, v1.y - 10 );\r\n\t\t\t_context.lineTo( v1.x, v1.y + 10 );\r\n\t\t\t_context.stroke();\r\n\t\t\t*/\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction renderLine( v1, v2, element, material ) {\r\n\t\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\t\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\r\n\t\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\r\n\t\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\t\r\n\t\t\t\tsetLineWidth( material.linewidth );\r\n\t\t\t\tsetLineCap( material.linecap );\r\n\t\t\t\tsetLineJoin( material.linejoin );\r\n\t\r\n\t\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\r\n\t\r\n\t\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\r\n\t\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\r\n\t\r\n\t\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\r\n\t\r\n\t\t\t\t\t\tsetStrokeStyle( colorStyle1 );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\ttry {\r\n\t\r\n\t\t\t\t\t\t\tvar grad = _context.createLinearGradient(\r\n\t\t\t\t\t\t\t\tv1.positionScreen.x,\r\n\t\t\t\t\t\t\t\tv1.positionScreen.y,\r\n\t\t\t\t\t\t\t\tv2.positionScreen.x,\r\n\t\t\t\t\t\t\t\tv2.positionScreen.y\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\r\n\t\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\r\n\t\r\n\t\t\t\t\t\t} catch ( exception ) {\r\n\t\r\n\t\t\t\t\t\t\tgrad = colorStyle1;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tsetStrokeStyle( grad );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_context.stroke();\r\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\r\n\t\r\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\t\r\n\t\t\t\tsetLineWidth( material.linewidth );\r\n\t\t\t\tsetLineCap( material.linecap );\r\n\t\t\t\tsetLineJoin( material.linejoin );\r\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\t\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\r\n\t\r\n\t\t\t\t_context.stroke();\r\n\t\r\n\t\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\r\n\t\r\n\t\t\t\tsetLineDash( [] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\r\n\t\r\n\t\t\t_this.info.render.vertices += 3;\r\n\t\t\t_this.info.render.faces ++;\r\n\t\r\n\t\t\tsetOpacity( material.opacity );\r\n\t\t\tsetBlending( material.blending );\r\n\t\r\n\t\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\r\n\t\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\r\n\t\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\r\n\t\r\n\t\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\r\n\t\r\n\t\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\r\n\t\r\n\t\t\t\t_diffuseColor.copy( material.color );\r\n\t\t\t\t_emissiveColor.copy( material.emissive );\r\n\t\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\t\r\n\t\t\t\t\t_diffuseColor.multiply( element.color );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_color.copy( _ambientLight );\r\n\t\r\n\t\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\r\n\t\r\n\t\t\t\tcalculateLight( _centroid, element.normalModel, _color );\r\n\t\r\n\t\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\r\n\t\r\n\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t : fillPath( _color );\r\n\t\r\n\t\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\r\n\t\r\n\t\t\t\tif ( material.map !== null ) {\r\n\t\r\n\t\t\t\t\tvar mapping = material.map.mapping;\r\n\t\r\n\t\t\t\t\tif ( mapping === THREE.UVMapping ) {\r\n\t\r\n\t\t\t\t\t\t_uvs = element.uvs;\r\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( material.envMap !== null ) {\r\n\t\r\n\t\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\r\n\t\r\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\r\n\t\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\r\n\t\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\r\n\t\r\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\r\n\t\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\r\n\t\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\r\n\t\r\n\t\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\r\n\t\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\r\n\t\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\r\n\t\r\n\t\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t_color.copy( material.color );\r\n\t\r\n\t\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\t\r\n\t\t\t\t\t\t_color.multiply( element.color );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t\t : fillPath( _color );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\t\r\n\t\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\r\n\t\r\n\t\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\t\r\n\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t : fillPath( _color );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t_color.setRGB( 1, 1, 1 );\r\n\t\r\n\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t : fillPath( _color );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\r\n\t\r\n\t\t\t_context.beginPath();\r\n\t\t\t_context.moveTo( x0, y0 );\r\n\t\t\t_context.lineTo( x1, y1 );\r\n\t\t\t_context.lineTo( x2, y2 );\r\n\t\t\t_context.closePath();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction strokePath( color, linewidth, linecap, linejoin ) {\r\n\t\r\n\t\t\tsetLineWidth( linewidth );\r\n\t\t\tsetLineCap( linecap );\r\n\t\t\tsetLineJoin( linejoin );\r\n\t\t\tsetStrokeStyle( color.getStyle() );\r\n\t\r\n\t\t\t_context.stroke();\r\n\t\r\n\t\t\t_elemBox.expandByScalar( linewidth * 2 );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction fillPath( color ) {\r\n\t\r\n\t\t\tsetFillStyle( color.getStyle() );\r\n\t\t\t_context.fill();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction textureToPattern( texture ) {\r\n\t\r\n\t\t\tif ( texture.version === 0 ||\r\n\t\t\t\ttexture instanceof THREE.CompressedTexture ||\r\n\t\t\t\ttexture instanceof THREE.DataTexture ) {\r\n\t\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcanvas: undefined,\r\n\t\t\t\t\tversion: texture.version\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar image = texture.image;\r\n\t\r\n\t\t\tif ( image.complete === false ) {\r\n\t\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcanvas: undefined,\r\n\t\t\t\t\tversion: 0\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = image.width;\r\n\t\t\tcanvas.height = image.height;\r\n\t\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\r\n\t\t\tcontext.drawImage( image, 0, 0 );\r\n\t\r\n\t\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\r\n\t\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\r\n\t\r\n\t\t\tvar repeat = 'no-repeat';\r\n\t\r\n\t\t\tif ( repeatX === true && repeatY === true ) {\r\n\t\r\n\t\t\t\trepeat = 'repeat';\r\n\t\r\n\t\t\t} else if ( repeatX === true ) {\r\n\t\r\n\t\t\t\trepeat = 'repeat-x';\r\n\t\r\n\t\t\t} else if ( repeatY === true ) {\r\n\t\r\n\t\t\t\trepeat = 'repeat-y';\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar pattern = _context.createPattern( canvas, repeat );\r\n\t\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\t\r\n\t\t\treturn {\r\n\t\t\t\tcanvas: pattern,\r\n\t\t\t\tversion: texture.version\r\n\t\t\t};\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\r\n\t\r\n\t\t\tvar pattern = _patterns[ texture.id ];\r\n\t\r\n\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\r\n\t\r\n\t\t\t\tpattern = textureToPattern( texture );\r\n\t\t\t\t_patterns[ texture.id ] = pattern;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( pattern.canvas !== undefined ) {\r\n\t\r\n\t\t\t\tsetFillStyle( pattern.canvas );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\r\n\t\t\t\t_context.fill();\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\t\r\n\t\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\r\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\r\n\t\t\twidth = texture.image.width * texture.repeat.x,\r\n\t\t\theight = texture.image.height * texture.repeat.y;\r\n\t\r\n\t\t\tu0 = ( u0 + offsetX ) * width;\r\n\t\t\tv0 = ( v0 + offsetY ) * height;\r\n\t\r\n\t\t\tu1 = ( u1 + offsetX ) * width;\r\n\t\t\tv1 = ( v1 + offsetY ) * height;\r\n\t\r\n\t\t\tu2 = ( u2 + offsetX ) * width;\r\n\t\t\tv2 = ( v2 + offsetY ) * height;\r\n\t\r\n\t\t\tx1 -= x0; y1 -= y0;\r\n\t\t\tx2 -= x0; y2 -= y0;\r\n\t\r\n\t\t\tu1 -= u0; v1 -= v0;\r\n\t\t\tu2 -= u0; v2 -= v0;\r\n\t\r\n\t\t\tdet = u1 * v2 - u2 * v1;\r\n\t\r\n\t\t\tif ( det === 0 ) return;\r\n\t\r\n\t\t\tidet = 1 / det;\r\n\t\r\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\t\r\n\t\t\te = x0 - a * u0 - c * v0;\r\n\t\t\tf = y0 - b * u0 - d * v0;\r\n\t\r\n\t\t\t_context.save();\r\n\t\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t\t_context.fill();\r\n\t\t\t_context.restore();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\r\n\t\r\n\t\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\t\r\n\t\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\t\twidth = image.width - 1,\r\n\t\t\theight = image.height - 1;\r\n\t\r\n\t\t\tu0 *= width; v0 *= height;\r\n\t\t\tu1 *= width; v1 *= height;\r\n\t\t\tu2 *= width; v2 *= height;\r\n\t\r\n\t\t\tx1 -= x0; y1 -= y0;\r\n\t\t\tx2 -= x0; y2 -= y0;\r\n\t\r\n\t\t\tu1 -= u0; v1 -= v0;\r\n\t\t\tu2 -= u0; v2 -= v0;\r\n\t\r\n\t\t\tdet = u1 * v2 - u2 * v1;\r\n\t\r\n\t\t\tidet = 1 / det;\r\n\t\r\n\t\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\t\r\n\t\t\te = x0 - a * u0 - c * v0;\r\n\t\t\tf = y0 - b * u0 - d * v0;\r\n\t\r\n\t\t\t_context.save();\r\n\t\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t\t_context.clip();\r\n\t\t\t_context.drawImage( image, 0, 0 );\r\n\t\t\t_context.restore();\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Hide anti-alias gaps\r\n\t\r\n\t\tfunction expand( v1, v2, pixels ) {\r\n\t\r\n\t\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\r\n\t\t\tdet = x * x + y * y, idet;\r\n\t\r\n\t\t\tif ( det === 0 ) return;\r\n\t\r\n\t\t\tidet = pixels / Math.sqrt( det );\r\n\t\r\n\t\t\tx *= idet; y *= idet;\r\n\t\r\n\t\t\tv2.x += x; v2.y += y;\r\n\t\t\tv1.x -= x; v1.y -= y;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Context cached methods.\r\n\t\r\n\t\tfunction setOpacity( value ) {\r\n\t\r\n\t\t\tif ( _contextGlobalAlpha !== value ) {\r\n\t\r\n\t\t\t\t_context.globalAlpha = value;\r\n\t\t\t\t_contextGlobalAlpha = value;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setBlending( value ) {\r\n\t\r\n\t\t\tif ( _contextGlobalCompositeOperation !== value ) {\r\n\t\r\n\t\t\t\tif ( value === THREE.NormalBlending ) {\r\n\t\r\n\t\t\t\t\t_context.globalCompositeOperation = 'source-over';\r\n\t\r\n\t\t\t\t} else if ( value === THREE.AdditiveBlending ) {\r\n\t\r\n\t\t\t\t\t_context.globalCompositeOperation = 'lighter';\r\n\t\r\n\t\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\r\n\t\r\n\t\t\t\t\t_context.globalCompositeOperation = 'darker';\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_contextGlobalCompositeOperation = value;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setLineWidth( value ) {\r\n\t\r\n\t\t\tif ( _contextLineWidth !== value ) {\r\n\t\r\n\t\t\t\t_context.lineWidth = value;\r\n\t\t\t\t_contextLineWidth = value;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setLineCap( value ) {\r\n\t\r\n\t\t\t// \"butt\", \"round\", \"square\"\r\n\t\r\n\t\t\tif ( _contextLineCap !== value ) {\r\n\t\r\n\t\t\t\t_context.lineCap = value;\r\n\t\t\t\t_contextLineCap = value;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setLineJoin( value ) {\r\n\t\r\n\t\t\t// \"round\", \"bevel\", \"miter\"\r\n\t\r\n\t\t\tif ( _contextLineJoin !== value ) {\r\n\t\r\n\t\t\t\t_context.lineJoin = value;\r\n\t\t\t\t_contextLineJoin = value;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setStrokeStyle( value ) {\r\n\t\r\n\t\t\tif ( _contextStrokeStyle !== value ) {\r\n\t\r\n\t\t\t\t_context.strokeStyle = value;\r\n\t\t\t\t_contextStrokeStyle = value;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setFillStyle( value ) {\r\n\t\r\n\t\t\tif ( _contextFillStyle !== value ) {\r\n\t\r\n\t\t\t\t_context.fillStyle = value;\r\n\t\t\t\t_contextFillStyle = value;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setLineDash( value ) {\r\n\t\r\n\t\t\tif ( _contextLineDash.length !== value.length ) {\r\n\t\r\n\t\t\t\t_context.setLineDash( value );\r\n\t\t\t\t_contextLineDash = value;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author julianwa / https://github.com/julianwa\r\n\t */\r\n\t\r\n\tTHREE.RenderableObject = function () {\r\n\t\r\n\t\tthis.id = 0;\r\n\t\r\n\t\tthis.object = null;\r\n\t\tthis.z = 0;\r\n\t\tthis.renderOrder = 0;\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.RenderableFace = function () {\r\n\t\r\n\t\tthis.id = 0;\r\n\t\r\n\t\tthis.v1 = new THREE.RenderableVertex();\r\n\t\tthis.v2 = new THREE.RenderableVertex();\r\n\t\tthis.v3 = new THREE.RenderableVertex();\r\n\t\r\n\t\tthis.normalModel = new THREE.Vector3();\r\n\t\r\n\t\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\t\tthis.vertexNormalsLength = 0;\r\n\t\r\n\t\tthis.color = new THREE.Color();\r\n\t\tthis.material = null;\r\n\t\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\r\n\t\r\n\t\tthis.z = 0;\r\n\t\tthis.renderOrder = 0;\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.RenderableVertex = function () {\r\n\t\r\n\t\tthis.position = new THREE.Vector3();\r\n\t\tthis.positionWorld = new THREE.Vector3();\r\n\t\tthis.positionScreen = new THREE.Vector4();\r\n\t\r\n\t\tthis.visible = true;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\r\n\t\r\n\t\tthis.positionWorld.copy( vertex.positionWorld );\r\n\t\tthis.positionScreen.copy( vertex.positionScreen );\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.RenderableLine = function () {\r\n\t\r\n\t\tthis.id = 0;\r\n\t\r\n\t\tthis.v1 = new THREE.RenderableVertex();\r\n\t\tthis.v2 = new THREE.RenderableVertex();\r\n\t\r\n\t\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\r\n\t\tthis.material = null;\r\n\t\r\n\t\tthis.z = 0;\r\n\t\tthis.renderOrder = 0;\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.RenderableSprite = function () {\r\n\t\r\n\t\tthis.id = 0;\r\n\t\r\n\t\tthis.object = null;\r\n\t\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t\tthis.z = 0;\r\n\t\r\n\t\tthis.rotation = 0;\r\n\t\tthis.scale = new THREE.Vector2();\r\n\t\r\n\t\tthis.material = null;\r\n\t\tthis.renderOrder = 0;\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.Projector = function () {\r\n\t\r\n\t\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\r\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\r\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\r\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\r\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\r\n\t\r\n\t\t_renderData = { objects: [], lights: [], elements: [] },\r\n\t\r\n\t\t_vector3 = new THREE.Vector3(),\r\n\t\t_vector4 = new THREE.Vector4(),\r\n\t\r\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\r\n\t\t_boundingBox = new THREE.Box3(),\r\n\t\t_points3 = new Array( 3 ),\r\n\t\t_points4 = new Array( 4 ),\r\n\t\r\n\t\t_viewMatrix = new THREE.Matrix4(),\r\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\r\n\t\r\n\t\t_modelMatrix,\r\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\r\n\t\r\n\t\t_normalMatrix = new THREE.Matrix3(),\r\n\t\r\n\t\t_frustum = new THREE.Frustum(),\r\n\t\r\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\r\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\r\n\t\r\n\t\t//\r\n\t\r\n\t\tthis.projectVector = function ( vector, camera ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\r\n\t\t\tvector.project( camera );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.unprojectVector = function ( vector, camera ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\r\n\t\t\tvector.unproject( camera );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.pickingRay = function ( vector, camera ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar RenderList = function () {\r\n\t\r\n\t\t\tvar normals = [];\r\n\t\t\tvar uvs = [];\r\n\t\r\n\t\t\tvar object = null;\r\n\t\t\tvar material = null;\r\n\t\r\n\t\t\tvar normalMatrix = new THREE.Matrix3();\r\n\t\r\n\t\t\tfunction setObject( value ) {\r\n\t\r\n\t\t\t\tobject = value;\r\n\t\t\t\tmaterial = object.material;\r\n\t\r\n\t\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\r\n\t\r\n\t\t\t\tnormals.length = 0;\r\n\t\t\t\tuvs.length = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction projectVertex( vertex ) {\r\n\t\r\n\t\t\t\tvar position = vertex.position;\r\n\t\t\t\tvar positionWorld = vertex.positionWorld;\r\n\t\t\t\tvar positionScreen = vertex.positionScreen;\r\n\t\r\n\t\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\r\n\t\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\r\n\t\r\n\t\t\t\tvar invW = 1 / positionScreen.w;\r\n\t\r\n\t\t\t\tpositionScreen.x *= invW;\r\n\t\t\t\tpositionScreen.y *= invW;\r\n\t\t\t\tpositionScreen.z *= invW;\r\n\t\r\n\t\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\r\n\t\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\r\n\t\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction pushVertex( x, y, z ) {\r\n\t\r\n\t\t\t\t_vertex = getNextVertexInPool();\r\n\t\t\t\t_vertex.position.set( x, y, z );\r\n\t\r\n\t\t\t\tprojectVertex( _vertex );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction pushNormal( x, y, z ) {\r\n\t\r\n\t\t\t\tnormals.push( x, y, z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction pushUv( x, y ) {\r\n\t\r\n\t\t\t\tuvs.push( x, y );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\r\n\t\r\n\t\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\r\n\t\r\n\t\t\t\t_points3[ 0 ] = v1.positionScreen;\r\n\t\t\t\t_points3[ 1 ] = v2.positionScreen;\r\n\t\t\t\t_points3[ 2 ] = v3.positionScreen;\r\n\t\r\n\t\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\r\n\t\r\n\t\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\r\n\t\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\r\n\t\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\r\n\t\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction pushLine( a, b ) {\r\n\t\r\n\t\t\t\tvar v1 = _vertexPool[ a ];\r\n\t\t\t\tvar v2 = _vertexPool[ b ];\r\n\t\r\n\t\t\t\t_line = getNextLineInPool();\r\n\t\r\n\t\t\t\t_line.id = object.id;\r\n\t\t\t\t_line.v1.copy( v1 );\r\n\t\t\t\t_line.v2.copy( v2 );\r\n\t\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\r\n\t\t\t\t_line.renderOrder = object.renderOrder;\r\n\t\r\n\t\t\t\t_line.material = object.material;\r\n\t\r\n\t\t\t\t_renderData.elements.push( _line );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction pushTriangle( a, b, c ) {\r\n\t\r\n\t\t\t\tvar v1 = _vertexPool[ a ];\r\n\t\t\t\tvar v2 = _vertexPool[ b ];\r\n\t\t\t\tvar v3 = _vertexPool[ c ];\r\n\t\r\n\t\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\r\n\t\r\n\t\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\r\n\t\r\n\t\t\t\t\t_face = getNextFaceInPool();\r\n\t\r\n\t\t\t\t\t_face.id = object.id;\r\n\t\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t\t_face.v3.copy( v3 );\r\n\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\r\n\t\t\t\t\t_face.renderOrder = object.renderOrder;\r\n\t\r\n\t\t\t\t\t// use first vertex normal as face normal\r\n\t\r\n\t\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\r\n\t\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\r\n\t\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\r\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t\t\tvar uv = _face.uvs[ i ];\r\n\t\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t_face.vertexNormalsLength = 3;\r\n\t\r\n\t\t\t\t\t_face.material = object.material;\r\n\t\r\n\t\t\t\t\t_renderData.elements.push( _face );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn {\r\n\t\t\t\tsetObject: setObject,\r\n\t\t\t\tprojectVertex: projectVertex,\r\n\t\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\r\n\t\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\r\n\t\t\t\tpushVertex: pushVertex,\r\n\t\t\t\tpushNormal: pushNormal,\r\n\t\t\t\tpushUv: pushUv,\r\n\t\t\t\tpushLine: pushLine,\r\n\t\t\t\tpushTriangle: pushTriangle\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tvar renderList = new RenderList();\r\n\t\r\n\t\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\r\n\t\r\n\t\t\t_faceCount = 0;\r\n\t\t\t_lineCount = 0;\r\n\t\t\t_spriteCount = 0;\r\n\t\r\n\t\t\t_renderData.elements.length = 0;\r\n\t\r\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\t\r\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\r\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\r\n\t\r\n\t\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\t_objectCount = 0;\r\n\t\r\n\t\t\t_renderData.objects.length = 0;\r\n\t\t\t_renderData.lights.length = 0;\r\n\t\r\n\t\t\tscene.traverseVisible( function ( object ) {\r\n\t\r\n\t\t\t\tif ( object instanceof THREE.Light ) {\r\n\t\r\n\t\t\t\t\t_renderData.lights.push( object );\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite ) {\r\n\t\r\n\t\t\t\t\tvar material = object.material;\r\n\t\r\n\t\t\t\t\tif ( material.visible === false ) return;\r\n\t\r\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\t\r\n\t\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t\t_object.id = object.id;\r\n\t\t\t\t\t\t_object.object = object;\r\n\t\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t\t_object.z = _vector3.z;\r\n\t\t\t\t\t\t_object.renderOrder = object.renderOrder;\r\n\t\r\n\t\t\t\t\t\t_renderData.objects.push( _object );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t\tif ( sortObjects === true ) {\r\n\t\r\n\t\t\t\t_renderData.objects.sort( painterSort );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\r\n\t\r\n\t\t\t\tvar object = _renderData.objects[ o ].object;\r\n\t\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\t\trenderList.setObject( object );\r\n\t\r\n\t\t\t\t_modelMatrix = object.matrixWorld;\r\n\t\r\n\t\t\t\t_vertexCount = 0;\r\n\t\r\n\t\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\t\r\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\r\n\t\t\t\t\t\tif ( attributes.position === undefined ) continue;\r\n\t\r\n\t\t\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( attributes.normal !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tvar normals = attributes.normal.array;\r\n\t\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( attributes.uv !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tvar uvs = attributes.uv.array;\r\n\t\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\r\n\t\r\n\t\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( geometry.index !== null ) {\r\n\t\r\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\r\n\t\r\n\t\t\t\t\t\t\tif ( groups.length > 0 ) {\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tvar group = groups[ o ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\r\n\t\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\r\n\t\r\n\t\t\t\t\t\tvar material = object.material;\r\n\t\r\n\t\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\r\n\t\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\r\n\t\r\n\t\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tvar vertex = vertices[ v ];\r\n\t\r\n\t\t\t\t\t\t\t_vector3.copy( vertex );\r\n\t\r\n\t\t\t\t\t\t\tif ( material.morphTargets === true ) {\r\n\t\r\n\t\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\r\n\t\r\n\t\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\r\n\t\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\r\n\t\r\n\t\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\r\n\t\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\r\n\t\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tvar face = faces[ f ];\r\n\t\r\n\t\t\t\t\t\t\tmaterial = isFaceMaterial === true\r\n\t\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\r\n\t\t\t\t\t\t\t\t : object.material;\r\n\t\r\n\t\t\t\t\t\t\tif ( material === undefined ) continue;\r\n\t\r\n\t\t\t\t\t\t\tvar side = material.side;\r\n\t\r\n\t\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\r\n\t\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\r\n\t\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\r\n\t\r\n\t\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\r\n\t\r\n\t\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\r\n\t\r\n\t\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\r\n\t\r\n\t\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\r\n\t\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t_face = getNextFaceInPool();\r\n\t\r\n\t\t\t\t\t\t\t_face.id = object.id;\r\n\t\t\t\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t\t\t\t_face.v3.copy( v3 );\r\n\t\r\n\t\t\t\t\t\t\t_face.normalModel.copy( face.normal );\r\n\t\r\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\t\r\n\t\t\t\t\t\t\t\t_face.normalModel.negate();\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\r\n\t\r\n\t\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\r\n\t\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\r\n\t\r\n\t\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tnormalModel.negate();\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\r\n\t\r\n\t\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\r\n\t\r\n\t\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t_face.color = face.color;\r\n\t\t\t\t\t\t\t_face.material = material;\r\n\t\r\n\t\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\r\n\t\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\r\n\t\r\n\t\t\t\t\t\t\t_renderData.elements.push( _face );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\t\r\n\t\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\t\t\tvar attributes = geometry.attributes;\r\n\t\r\n\t\t\t\t\t\tif ( attributes.position !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\tif ( geometry.index !== null ) {\r\n\t\r\n\t\t\t\t\t\t\t\tvar indices = geometry.index.array;\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\r\n\t\r\n\t\t\t\t\t\tvar vertices = object.geometry.vertices;\r\n\t\r\n\t\t\t\t\t\tif ( vertices.length === 0 ) continue;\r\n\t\r\n\t\t\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\t\r\n\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\r\n\t\r\n\t\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\t\r\n\t\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\r\n\t\r\n\t\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\r\n\t\r\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\r\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\r\n\t\r\n\t\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\r\n\t\r\n\t\t\t\t\t\t\t\t// Perform the perspective divide\r\n\t\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\r\n\t\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\r\n\t\r\n\t\t\t\t\t\t\t\t_line = getNextLineInPool();\r\n\t\r\n\t\t\t\t\t\t\t\t_line.id = object.id;\r\n\t\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\r\n\t\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\r\n\t\r\n\t\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\r\n\t\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\r\n\t\r\n\t\t\t\t\t\t\t\t_line.material = object.material;\r\n\t\r\n\t\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\r\n\t\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t_renderData.elements.push( _line );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\t\r\n\t\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\r\n\t\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\r\n\t\r\n\t\t\t\t\tvar invW = 1 / _vector4.w;\r\n\t\r\n\t\t\t\t\t_vector4.z *= invW;\r\n\t\r\n\t\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\r\n\t\r\n\t\t\t\t\t\t_sprite = getNextSpriteInPool();\r\n\t\t\t\t\t\t_sprite.id = object.id;\r\n\t\t\t\t\t\t_sprite.x = _vector4.x * invW;\r\n\t\t\t\t\t\t_sprite.y = _vector4.y * invW;\r\n\t\t\t\t\t\t_sprite.z = _vector4.z;\r\n\t\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\r\n\t\t\t\t\t\t_sprite.object = object;\r\n\t\r\n\t\t\t\t\t\t_sprite.rotation = object.rotation;\r\n\t\r\n\t\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\r\n\t\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\r\n\t\r\n\t\t\t\t\t\t_sprite.material = object.material;\r\n\t\r\n\t\t\t\t\t\t_renderData.elements.push( _sprite );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( sortElements === true ) {\r\n\t\r\n\t\t\t\t_renderData.elements.sort( painterSort );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn _renderData;\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Pools\r\n\t\r\n\t\tfunction getNextObjectInPool() {\r\n\t\r\n\t\t\tif ( _objectCount === _objectPoolLength ) {\r\n\t\r\n\t\t\t\tvar object = new THREE.RenderableObject();\r\n\t\t\t\t_objectPool.push( object );\r\n\t\t\t\t_objectPoolLength ++;\r\n\t\t\t\t_objectCount ++;\r\n\t\t\t\treturn object;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn _objectPool[ _objectCount ++ ];\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getNextVertexInPool() {\r\n\t\r\n\t\t\tif ( _vertexCount === _vertexPoolLength ) {\r\n\t\r\n\t\t\t\tvar vertex = new THREE.RenderableVertex();\r\n\t\t\t\t_vertexPool.push( vertex );\r\n\t\t\t\t_vertexPoolLength ++;\r\n\t\t\t\t_vertexCount ++;\r\n\t\t\t\treturn vertex;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn _vertexPool[ _vertexCount ++ ];\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getNextFaceInPool() {\r\n\t\r\n\t\t\tif ( _faceCount === _facePoolLength ) {\r\n\t\r\n\t\t\t\tvar face = new THREE.RenderableFace();\r\n\t\t\t\t_facePool.push( face );\r\n\t\t\t\t_facePoolLength ++;\r\n\t\t\t\t_faceCount ++;\r\n\t\t\t\treturn face;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn _facePool[ _faceCount ++ ];\r\n\t\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getNextLineInPool() {\r\n\t\r\n\t\t\tif ( _lineCount === _linePoolLength ) {\r\n\t\r\n\t\t\t\tvar line = new THREE.RenderableLine();\r\n\t\t\t\t_linePool.push( line );\r\n\t\t\t\t_linePoolLength ++;\r\n\t\t\t\t_lineCount ++;\r\n\t\t\t\treturn line;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn _linePool[ _lineCount ++ ];\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getNextSpriteInPool() {\r\n\t\r\n\t\t\tif ( _spriteCount === _spritePoolLength ) {\r\n\t\r\n\t\t\t\tvar sprite = new THREE.RenderableSprite();\r\n\t\t\t\t_spritePool.push( sprite );\r\n\t\t\t\t_spritePoolLength ++;\r\n\t\t\t\t_spriteCount ++;\r\n\t\t\t\treturn sprite;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn _spritePool[ _spriteCount ++ ];\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tfunction painterSort( a, b ) {\r\n\t\r\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\r\n\t\r\n\t\t\t\treturn a.renderOrder - b.renderOrder;\r\n\t\r\n\t\t\t} else if ( a.z !== b.z ) {\r\n\t\r\n\t\t\t\treturn b.z - a.z;\r\n\t\r\n\t\t\t} else if ( a.id !== b.id ) {\r\n\t\r\n\t\t\t\treturn a.id - b.id;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction clipLine( s1, s2 ) {\r\n\t\r\n\t\t\tvar alpha1 = 0, alpha2 = 1,\r\n\t\r\n\t\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\r\n\t\t\t// Z = -1 and Z = +1, respectively.\r\n\t\t\tbc1near =  s1.z + s1.w,\r\n\t\t\tbc2near =  s2.z + s2.w,\r\n\t\t\tbc1far =  - s1.z + s1.w,\r\n\t\t\tbc2far =  - s2.z + s2.w;\r\n\t\r\n\t\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\r\n\t\r\n\t\t\t\t// Both vertices lie entirely within all clip planes.\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\r\n\t\r\n\t\t\t\t// Both vertices lie entirely outside one of the clip planes.\r\n\t\t\t\treturn false;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// The line segment spans at least one clip plane.\r\n\t\r\n\t\t\t\tif ( bc1near < 0 ) {\r\n\t\r\n\t\t\t\t\t// v1 lies outside the near plane, v2 inside\r\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\r\n\t\r\n\t\t\t\t} else if ( bc2near < 0 ) {\r\n\t\r\n\t\t\t\t\t// v2 lies outside the near plane, v1 inside\r\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( bc1far < 0 ) {\r\n\t\r\n\t\t\t\t\t// v1 lies outside the far plane, v2 inside\r\n\t\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\r\n\t\r\n\t\t\t\t} else if ( bc2far < 0 ) {\r\n\t\r\n\t\t\t\t\t// v2 lies outside the far plane, v2 inside\r\n\t\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( alpha2 < alpha1 ) {\r\n\t\r\n\t\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\r\n\t\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\r\n\t\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\r\n\t\t\t\t\treturn false;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\r\n\t\t\t\t\ts1.lerp( s2, alpha1 );\r\n\t\t\t\t\ts2.lerp( s1, 1 - alpha2 );\r\n\t\r\n\t\t\t\t\treturn true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tvar isObject = __webpack_require__(8);\n\t\n\tfunction isObjectObject(o) {\n\t  return isObject(o) === true\n\t    && Object.prototype.toString.call(o) === '[object Object]';\n\t}\n\t\n\tmodule.exports = function isPlainObject(o) {\n\t  var ctor,prot;\n\t  \n\t  if (isObjectObject(o) === false) return false;\n\t  \n\t  // If has modified constructor\n\t  ctor = o.constructor;\n\t  if (typeof ctor !== 'function') return false;\n\t  \n\t  // If has modified prototype\n\t  prot = ctor.prototype;\n\t  if (isObjectObject(prot) === false) return false;\n\t  \n\t  // If constructor does not have an Object-specific method\n\t  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n\t    return false;\n\t  }\n\t  \n\t  // Most likely a plain Object\n\t  return true;\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tmodule.exports = function isObject(val) {\n\t  return val != null && typeof val === 'object'\n\t    && !Array.isArray(val);\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * EventEmitter2\n\t * https://github.com/hij1nx/EventEmitter2\n\t *\n\t * Copyright (c) 2013 hij1nx\n\t * Licensed under the MIT license.\n\t */\n\t;!function(undefined) {\n\t\n\t  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t    return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t  };\n\t  var defaultMaxListeners = 10;\n\t\n\t  function init() {\n\t    this._events = {};\n\t    if (this._conf) {\n\t      configure.call(this, this._conf);\n\t    }\n\t  }\n\t\n\t  function configure(conf) {\n\t    if (conf) {\n\t\n\t      this._conf = conf;\n\t\n\t      conf.delimiter && (this.delimiter = conf.delimiter);\n\t      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t      conf.wildcard && (this.wildcard = conf.wildcard);\n\t      conf.newListener && (this.newListener = conf.newListener);\n\t\n\t      if (this.wildcard) {\n\t        this.listenerTree = {};\n\t      }\n\t    }\n\t  }\n\t\n\t  function EventEmitter(conf) {\n\t    this._events = {};\n\t    this.newListener = false;\n\t    configure.call(this, conf);\n\t  }\n\t\n\t  //\n\t  // Attention, function return type now is array, always !\n\t  // It has zero elements if no any matches found and one or more\n\t  // elements (leafs) if there are matches\n\t  //\n\t  function searchListenerTree(handlers, type, tree, i) {\n\t    if (!tree) {\n\t      return [];\n\t    }\n\t    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n\t        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n\t    if (i === typeLength && tree._listeners) {\n\t      //\n\t      // If at the end of the event(s) list and the tree has listeners\n\t      // invoke those listeners.\n\t      //\n\t      if (typeof tree._listeners === 'function') {\n\t        handlers && handlers.push(tree._listeners);\n\t        return [tree];\n\t      } else {\n\t        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t          handlers && handlers.push(tree._listeners[leaf]);\n\t        }\n\t        return [tree];\n\t      }\n\t    }\n\t\n\t    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n\t      //\n\t      // If the event emitted is '*' at this part\n\t      // or there is a concrete match at this patch\n\t      //\n\t      if (currentType === '*') {\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n\t          }\n\t        }\n\t        return listeners;\n\t      } else if(currentType === '**') {\n\t        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n\t        if(endReached && tree._listeners) {\n\t          // The next element has a _listeners, add it to the handlers.\n\t          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t        }\n\t\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            if(branch === '*' || branch === '**') {\n\t              if(tree[branch]._listeners && !endReached) {\n\t                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t              }\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            } else if(branch === nextType) {\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n\t            } else {\n\t              // No match on this one, shift into the tree but not in the type array.\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            }\n\t          }\n\t        }\n\t        return listeners;\n\t      }\n\t\n\t      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n\t    }\n\t\n\t    xTree = tree['*'];\n\t    if (xTree) {\n\t      //\n\t      // If the listener tree will allow any match for this part,\n\t      // then recursively explore all branches of the tree\n\t      //\n\t      searchListenerTree(handlers, type, xTree, i+1);\n\t    }\n\t\n\t    xxTree = tree['**'];\n\t    if(xxTree) {\n\t      if(i < typeLength) {\n\t        if(xxTree._listeners) {\n\t          // If we have a listener on a '**', it will catch all, so add its handler.\n\t          searchListenerTree(handlers, type, xxTree, typeLength);\n\t        }\n\t\n\t        // Build arrays of matching next branches and others.\n\t        for(branch in xxTree) {\n\t          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n\t            if(branch === nextType) {\n\t              // We know the next element will match, so jump twice.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+2);\n\t            } else if(branch === currentType) {\n\t              // Current node matches, move into the tree.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+1);\n\t            } else {\n\t              isolatedBranch = {};\n\t              isolatedBranch[branch] = xxTree[branch];\n\t              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n\t            }\n\t          }\n\t        }\n\t      } else if(xxTree._listeners) {\n\t        // We have reached the end and still on a '**'\n\t        searchListenerTree(handlers, type, xxTree, typeLength);\n\t      } else if(xxTree['*'] && xxTree['*']._listeners) {\n\t        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n\t      }\n\t    }\n\t\n\t    return listeners;\n\t  }\n\t\n\t  function growListenerTree(type, listener) {\n\t\n\t    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t\n\t    //\n\t    // Looks for two consecutive '**', if so, don't add the event at all.\n\t    //\n\t    for(var i = 0, len = type.length; i+1 < len; i++) {\n\t      if(type[i] === '**' && type[i+1] === '**') {\n\t        return;\n\t      }\n\t    }\n\t\n\t    var tree = this.listenerTree;\n\t    var name = type.shift();\n\t\n\t    while (name) {\n\t\n\t      if (!tree[name]) {\n\t        tree[name] = {};\n\t      }\n\t\n\t      tree = tree[name];\n\t\n\t      if (type.length === 0) {\n\t\n\t        if (!tree._listeners) {\n\t          tree._listeners = listener;\n\t        }\n\t        else if(typeof tree._listeners === 'function') {\n\t          tree._listeners = [tree._listeners, listener];\n\t        }\n\t        else if (isArray(tree._listeners)) {\n\t\n\t          tree._listeners.push(listener);\n\t\n\t          if (!tree._listeners.warned) {\n\t\n\t            var m = defaultMaxListeners;\n\t\n\t            if (typeof this._events.maxListeners !== 'undefined') {\n\t              m = this._events.maxListeners;\n\t            }\n\t\n\t            if (m > 0 && tree._listeners.length > m) {\n\t\n\t              tree._listeners.warned = true;\n\t              console.error('(node) warning: possible EventEmitter memory ' +\n\t                            'leak detected. %d listeners added. ' +\n\t                            'Use emitter.setMaxListeners() to increase limit.',\n\t                            tree._listeners.length);\n\t              console.trace();\n\t            }\n\t          }\n\t        }\n\t        return true;\n\t      }\n\t      name = type.shift();\n\t    }\n\t    return true;\n\t  }\n\t\n\t  // By default EventEmitters will print a warning if more than\n\t  // 10 listeners are added to it. This is a useful default which\n\t  // helps finding memory leaks.\n\t  //\n\t  // Obviously not all Emitters should be limited to 10. This function allows\n\t  // that to be increased. Set to zero for unlimited.\n\t\n\t  EventEmitter.prototype.delimiter = '.';\n\t\n\t  EventEmitter.prototype.setMaxListeners = function(n) {\n\t    this._events || init.call(this);\n\t    this._events.maxListeners = n;\n\t    if (!this._conf) this._conf = {};\n\t    this._conf.maxListeners = n;\n\t  };\n\t\n\t  EventEmitter.prototype.event = '';\n\t\n\t  EventEmitter.prototype.once = function(event, fn) {\n\t    this.many(event, 1, fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.many = function(event, ttl, fn) {\n\t    var self = this;\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('many only accepts instances of Function');\n\t    }\n\t\n\t    function listener() {\n\t      if (--ttl === 0) {\n\t        self.off(event, listener);\n\t      }\n\t      fn.apply(this, arguments);\n\t    }\n\t\n\t    listener._origin = fn;\n\t\n\t    this.on(event, listener);\n\t\n\t    return self;\n\t  };\n\t\n\t  EventEmitter.prototype.emit = function() {\n\t\n\t    this._events || init.call(this);\n\t\n\t    var type = arguments[0];\n\t\n\t    if (type === 'newListener' && !this.newListener) {\n\t      if (!this._events.newListener) { return false; }\n\t    }\n\t\n\t    // Loop through the *_all* functions and invoke them.\n\t    if (this._all) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t      for (i = 0, l = this._all.length; i < l; i++) {\n\t        this.event = type;\n\t        this._all[i].apply(this, args);\n\t      }\n\t    }\n\t\n\t    // If there is no 'error' event listener then throw.\n\t    if (type === 'error') {\n\t\n\t      if (!this._all &&\n\t        !this._events.error &&\n\t        !(this.wildcard && this.listenerTree.error)) {\n\t\n\t        if (arguments[1] instanceof Error) {\n\t          throw arguments[1]; // Unhandled 'error' event\n\t        } else {\n\t          throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t        }\n\t        return false;\n\t      }\n\t    }\n\t\n\t    var handler;\n\t\n\t    if(this.wildcard) {\n\t      handler = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      handler = this._events[type];\n\t    }\n\t\n\t    if (typeof handler === 'function') {\n\t      this.event = type;\n\t      if (arguments.length === 1) {\n\t        handler.call(this);\n\t      }\n\t      else if (arguments.length > 1)\n\t        switch (arguments.length) {\n\t          case 2:\n\t            handler.call(this, arguments[1]);\n\t            break;\n\t          case 3:\n\t            handler.call(this, arguments[1], arguments[2]);\n\t            break;\n\t          // slower\n\t          default:\n\t            var l = arguments.length;\n\t            var args = new Array(l - 1);\n\t            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t            handler.apply(this, args);\n\t        }\n\t      return true;\n\t    }\n\t    else if (handler) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t\n\t      var listeners = handler.slice();\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        this.event = type;\n\t        listeners[i].apply(this, args);\n\t      }\n\t      return (listeners.length > 0) || !!this._all;\n\t    }\n\t    else {\n\t      return !!this._all;\n\t    }\n\t\n\t  };\n\t\n\t  EventEmitter.prototype.on = function(type, listener) {\n\t\n\t    if (typeof type === 'function') {\n\t      this.onAny(type);\n\t      return this;\n\t    }\n\t\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('on only accepts instances of Function');\n\t    }\n\t    this._events || init.call(this);\n\t\n\t    // To avoid recursion in the case that type == \"newListeners\"! Before\n\t    // adding it to the listeners, first emit \"newListeners\".\n\t    this.emit('newListener', type, listener);\n\t\n\t    if(this.wildcard) {\n\t      growListenerTree.call(this, type, listener);\n\t      return this;\n\t    }\n\t\n\t    if (!this._events[type]) {\n\t      // Optimize the case of one listener. Don't need the extra array object.\n\t      this._events[type] = listener;\n\t    }\n\t    else if(typeof this._events[type] === 'function') {\n\t      // Adding the second element, need to change to array.\n\t      this._events[type] = [this._events[type], listener];\n\t    }\n\t    else if (isArray(this._events[type])) {\n\t      // If we've already got an array, just append.\n\t      this._events[type].push(listener);\n\t\n\t      // Check for listener leak\n\t      if (!this._events[type].warned) {\n\t\n\t        var m = defaultMaxListeners;\n\t\n\t        if (typeof this._events.maxListeners !== 'undefined') {\n\t          m = this._events.maxListeners;\n\t        }\n\t\n\t        if (m > 0 && this._events[type].length > m) {\n\t\n\t          this._events[type].warned = true;\n\t          console.error('(node) warning: possible EventEmitter memory ' +\n\t                        'leak detected. %d listeners added. ' +\n\t                        'Use emitter.setMaxListeners() to increase limit.',\n\t                        this._events[type].length);\n\t          console.trace();\n\t        }\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.onAny = function(fn) {\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('onAny only accepts instances of Function');\n\t    }\n\t\n\t    if(!this._all) {\n\t      this._all = [];\n\t    }\n\t\n\t    // Add the function to the event listener collection.\n\t    this._all.push(fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  EventEmitter.prototype.off = function(type, listener) {\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('removeListener only takes instances of Function');\n\t    }\n\t\n\t    var handlers,leafs=[];\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      // does not use listeners(), so no side effect of creating _events[type]\n\t      if (!this._events[type]) return this;\n\t      handlers = this._events[type];\n\t      leafs.push({_listeners:handlers});\n\t    }\n\t\n\t    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t      var leaf = leafs[iLeaf];\n\t      handlers = leaf._listeners;\n\t      if (isArray(handlers)) {\n\t\n\t        var position = -1;\n\t\n\t        for (var i = 0, length = handlers.length; i < length; i++) {\n\t          if (handlers[i] === listener ||\n\t            (handlers[i].listener && handlers[i].listener === listener) ||\n\t            (handlers[i]._origin && handlers[i]._origin === listener)) {\n\t            position = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (position < 0) {\n\t          continue;\n\t        }\n\t\n\t        if(this.wildcard) {\n\t          leaf._listeners.splice(position, 1);\n\t        }\n\t        else {\n\t          this._events[type].splice(position, 1);\n\t        }\n\t\n\t        if (handlers.length === 0) {\n\t          if(this.wildcard) {\n\t            delete leaf._listeners;\n\t          }\n\t          else {\n\t            delete this._events[type];\n\t          }\n\t        }\n\t        return this;\n\t      }\n\t      else if (handlers === listener ||\n\t        (handlers.listener && handlers.listener === listener) ||\n\t        (handlers._origin && handlers._origin === listener)) {\n\t        if(this.wildcard) {\n\t          delete leaf._listeners;\n\t        }\n\t        else {\n\t          delete this._events[type];\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.offAny = function(fn) {\n\t    var i = 0, l = 0, fns;\n\t    if (fn && this._all && this._all.length > 0) {\n\t      fns = this._all;\n\t      for(i = 0, l = fns.length; i < l; i++) {\n\t        if(fn === fns[i]) {\n\t          fns.splice(i, 1);\n\t          return this;\n\t        }\n\t      }\n\t    } else {\n\t      this._all = [];\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t\n\t  EventEmitter.prototype.removeAllListeners = function(type) {\n\t    if (arguments.length === 0) {\n\t      !this._events || init.call(this);\n\t      return this;\n\t    }\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t\n\t      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t        var leaf = leafs[iLeaf];\n\t        leaf._listeners = null;\n\t      }\n\t    }\n\t    else {\n\t      if (!this._events[type]) return this;\n\t      this._events[type] = null;\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.listeners = function(type) {\n\t    if(this.wildcard) {\n\t      var handlers = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t      return handlers;\n\t    }\n\t\n\t    this._events || init.call(this);\n\t\n\t    if (!this._events[type]) this._events[type] = [];\n\t    if (!isArray(this._events[type])) {\n\t      this._events[type] = [this._events[type]];\n\t    }\n\t    return this._events[type];\n\t  };\n\t\n\t  EventEmitter.prototype.listenersAny = function() {\n\t\n\t    if(this._all) {\n\t      return this._all;\n\t    }\n\t    else {\n\t      return [];\n\t    }\n\t\n\t  };\n\t\n\t  if (true) {\n\t     // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return EventEmitter;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    // CommonJS\n\t    exports.EventEmitter2 = EventEmitter;\n\t  }\n\t  else {\n\t    // Browser global.\n\t    window.EventEmitter2 = EventEmitter;\n\t  }\n\t}();\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {Promise: window['Promise']}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n\t * directory of this distribution and at\n\t * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n\t */\n\t;\n\t(function() {\n\t\n\t    /**\n\t     * Class for dimension change detection.\n\t     *\n\t     * @param {Element|Element[]|Elements|jQuery} element\n\t     * @param {Function} callback\n\t     *\n\t     * @constructor\n\t     */\n\t    var ResizeSensor = function(element, callback) {\n\t        /**\n\t         *\n\t         * @constructor\n\t         */\n\t        function EventQueue() {\n\t            this.q = [];\n\t            this.add = function(ev) {\n\t                this.q.push(ev);\n\t            };\n\t\n\t            var i, j;\n\t            this.call = function() {\n\t                for (i = 0, j = this.q.length; i < j; i++) {\n\t                    this.q[i].call();\n\t                }\n\t            };\n\t        }\n\t\n\t        /**\n\t         * @param {HTMLElement} element\n\t         * @param {String}      prop\n\t         * @returns {String|Number}\n\t         */\n\t        function getComputedStyle(element, prop) {\n\t            if (element.currentStyle) {\n\t                return element.currentStyle[prop];\n\t            } else if (window.getComputedStyle) {\n\t                return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t            } else {\n\t                return element.style[prop];\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @param {Function}    resized\n\t         */\n\t        function attachResizeEvent(element, resized) {\n\t            if (!element.resizedAttached) {\n\t                element.resizedAttached = new EventQueue();\n\t                element.resizedAttached.add(resized);\n\t            } else if (element.resizedAttached) {\n\t                element.resizedAttached.add(resized);\n\t                return;\n\t            }\n\t\n\t            element.resizeSensor = document.createElement('div');\n\t            element.resizeSensor.className = 'resize-sensor';\n\t            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n\t            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\t\n\t            element.resizeSensor.style.cssText = style;\n\t            element.resizeSensor.innerHTML =\n\t                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + '\"></div>' +\n\t                '</div>' +\n\t                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n\t                '</div>';\n\t            element.appendChild(element.resizeSensor);\n\t\n\t            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n\t                element.style.position = 'relative';\n\t            }\n\t\n\t            var expand = element.resizeSensor.childNodes[0];\n\t            var expandChild = expand.childNodes[0];\n\t            var shrink = element.resizeSensor.childNodes[1];\n\t            var shrinkChild = shrink.childNodes[0];\n\t\n\t            var lastWidth, lastHeight;\n\t\n\t            var reset = function() {\n\t                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n\t                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n\t                expand.scrollLeft = expand.scrollWidth;\n\t                expand.scrollTop = expand.scrollHeight;\n\t                shrink.scrollLeft = shrink.scrollWidth;\n\t                shrink.scrollTop = shrink.scrollHeight;\n\t                lastWidth = element.offsetWidth;\n\t                lastHeight = element.offsetHeight;\n\t            };\n\t\n\t            reset();\n\t\n\t            var changed = function() {\n\t                if (element.resizedAttached) {\n\t                    element.resizedAttached.call();\n\t                }\n\t            };\n\t\n\t            var addEvent = function(el, name, cb) {\n\t                if (el.attachEvent) {\n\t                    el.attachEvent('on' + name, cb);\n\t                } else {\n\t                    el.addEventListener(name, cb);\n\t                }\n\t            };\n\t\n\t            var onScroll = function() {\n\t              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                  changed();\n\t              }\n\t              reset();\n\t            };\n\t\n\t            addEvent(expand, 'scroll', onScroll);\n\t            addEvent(shrink, 'scroll', onScroll);\n\t        }\n\t\n\t        var elementType = Object.prototype.toString.call(element);\n\t        var isCollectionTyped = ('[object Array]' === elementType\n\t            || ('[object NodeList]' === elementType)\n\t            || ('[object HTMLCollection]' === elementType)\n\t            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n\t            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n\t        );\n\t\n\t        if (isCollectionTyped) {\n\t            var i = 0, j = element.length;\n\t            for (; i < j; i++) {\n\t                attachResizeEvent(element[i], callback);\n\t            }\n\t        } else {\n\t            attachResizeEvent(element, callback);\n\t        }\n\t\n\t        this.detach = function() {\n\t            if (isCollectionTyped) {\n\t                var i = 0, j = element.length;\n\t                for (; i < j; i++) {\n\t                    ResizeSensor.detach(element[i]);\n\t                }\n\t            } else {\n\t                ResizeSensor.detach(element);\n\t            }\n\t        };\n\t    };\n\t\n\t    ResizeSensor.detach = function(element) {\n\t        if (element.resizeSensor) {\n\t            element.removeChild(element.resizeSensor);\n\t            delete element.resizeSensor;\n\t            delete element.resizedAttached;\n\t        }\n\t    };\n\t\n\t    // make available to common module loader\n\t    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t        module.exports = ResizeSensor;\n\t    }\n\t    else {\n\t        window.ResizeSensor = ResizeSensor;\n\t    }\n\t\n\t})();\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar EventEmmiter_1 = __webpack_require__(13);\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar Widget_1 = __webpack_require__(15);\r\n\tvar TrendsManager_1 = __webpack_require__(16);\r\n\tvar Screen_1 = __webpack_require__(19);\r\n\tvar AxisMarks_1 = __webpack_require__(20);\r\n\tvar interfaces_1 = __webpack_require__(21);\r\n\tvar deps_1 = __webpack_require__(3);\r\n\tvar CHART_STATE_EVENTS = {\r\n\t    INITIAL_STATE_APPLIED: 'initialStateApplied',\r\n\t    READY: 'ready',\r\n\t    DESTROY: 'destroy',\r\n\t    CHANGE: 'change',\r\n\t    TREND_CHANGE: 'trendChange',\r\n\t    TRENDS_CHANGE: 'trendsChange',\r\n\t    ZOOM: 'zoom',\r\n\t    RESIZE: 'resize',\r\n\t    SCROLL: 'scroll',\r\n\t    SCROLL_STOP: 'scrollStop',\r\n\t    PLUGINS_STATE_CHANGED: 'pluginsStateChanged'\r\n\t};\r\n\t/**\r\n\t *  class for manage chart state, all state changes caused only by State.setState method\r\n\t */\r\n\tvar ChartState = (function () {\r\n\t    function ChartState(initialState, widgetsClasses, plugins) {\r\n\t        if (widgetsClasses === void 0) { widgetsClasses = {}; }\r\n\t        if (plugins === void 0) { plugins = []; }\r\n\t        this.data = {\r\n\t            prevState: {},\r\n\t            $el: null,\r\n\t            zoom: 0,\r\n\t            xAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.ALL,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    scroll: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 0, end: 5 },\r\n\t                    margin: { start: 0, end: 5 }\r\n\t                },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                gridMinSize: 100,\r\n\t                autoScroll: true,\r\n\t                marks: [],\r\n\t            },\r\n\t            yAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 5, end: 5 },\r\n\t                    margin: { start: 5, end: 5 }\r\n\t                },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                gridMinSize: 50,\r\n\t                marks: []\r\n\t            },\r\n\t            animations: {\r\n\t                enabled: true,\r\n\t                trendChangeSpeed: 0.5,\r\n\t                trendChangeEase: void 0,\r\n\t                zoomSpeed: 0.25,\r\n\t                zoomEase: Linear.easeNone,\r\n\t                scrollSpeed: 0.5,\r\n\t                scrollEase: Linear.easeNone,\r\n\t                autoScrollSpeed: 1,\r\n\t                autoScrollEase: Linear.easeNone,\r\n\t            },\r\n\t            autoRender: { enabled: true, fps: 0 },\r\n\t            autoResize: true,\r\n\t            renderer: 'WebGLRenderer',\r\n\t            autoScroll: true,\r\n\t            controls: { enabled: true },\r\n\t            cursor: {\r\n\t                dragMode: false,\r\n\t                x: 0,\r\n\t                y: 0\r\n\t            },\r\n\t            backgroundColor: 0x000000,\r\n\t            backgroundOpacity: 1,\r\n\t            showStats: false,\r\n\t            pluginsState: {},\r\n\t            eventEmitterMaxListeners: 20\r\n\t        };\r\n\t        this.widgetsClasses = {};\r\n\t        this.plugins = {};\r\n\t        /**\r\n\t         * true then chartState was initialized and ready to use\r\n\t         */\r\n\t        this.isReady = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\r\n\t        this.widgetsClasses = widgetsClasses;\r\n\t        this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\r\n\t        initialState.trends = this.trendsManager.calculatedOptions;\r\n\t        initialState = this.installPlugins(plugins, initialState);\r\n\t        this.setState(initialState);\r\n\t        this.setState({ computedData: this.getComputedData() });\r\n\t        this.savePrevState();\r\n\t        this.screen = new Screen_1.Screen(this);\r\n\t        this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\r\n\t        this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\r\n\t        this.initListeners();\r\n\t        // message to other modules that ChartState.data is ready for use \r\n\t        this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\r\n\t        // message to other modules that ChartState is ready for use\r\n\t        this.isReady = true;\r\n\t        this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\r\n\t    }\r\n\t    /**\r\n\t     * destroy state, use Chart.destroy to completely destroy chart\r\n\t     */\r\n\t    ChartState.prototype.destroy = function () {\r\n\t        this.ee.emit(CHART_STATE_EVENTS.DESTROY);\r\n\t        this.ee.removeAllListeners();\r\n\t        this.data = {};\r\n\t    };\r\n\t    ChartState.prototype.onDestroy = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\r\n\t    };\r\n\t    ChartState.prototype.onInitialStateApplied = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\r\n\t    };\r\n\t    ChartState.prototype.onReady = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\r\n\t    };\r\n\t    ChartState.prototype.onChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\r\n\t    };\r\n\t    ChartState.prototype.onTrendChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\r\n\t    };\r\n\t    ChartState.prototype.onTrendsChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\r\n\t    };\r\n\t    ChartState.prototype.onScrollStop = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\r\n\t    };\r\n\t    ChartState.prototype.onScroll = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\r\n\t    };\r\n\t    ChartState.prototype.onZoom = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\r\n\t    };\r\n\t    ChartState.prototype.onResize = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\r\n\t    };\r\n\t    ChartState.prototype.onPluginsStateChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\r\n\t    };\r\n\t    ChartState.prototype.getTrend = function (trendName) {\r\n\t        return this.trendsManager.getTrend(trendName);\r\n\t    };\r\n\t    ChartState.prototype.setState = function (newState, eventData, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var stateData = this.data;\r\n\t        var changedProps = {};\r\n\t        for (var key in newState) {\r\n\t            if (stateData[key] !== newState[key]) {\r\n\t                changedProps[key] = newState[key];\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(changedProps);\r\n\t        // temporary remove trends data from newState by performance reasons\r\n\t        var trendsData = {};\r\n\t        if (newState.trends)\r\n\t            for (var trendName in newState.trends) {\r\n\t                var trendOptions = newState.trends[trendName];\r\n\t                if (trendOptions.data)\r\n\t                    trendsData[trendName] = trendOptions.data;\r\n\t                delete trendOptions.data;\r\n\t            }\r\n\t        var newStateContainsData = Object.keys(trendsData).length > 0;\r\n\t        this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\r\n\t        // return data to state\r\n\t        if (newStateContainsData)\r\n\t            for (var trendName in trendsData) {\r\n\t                this.data.trends[trendName].data = trendsData[trendName];\r\n\t            }\r\n\t        if (silent)\r\n\t            return;\r\n\t        // recalculate all dynamic state props\r\n\t        var recalculateResult = this.recalculateState(changedProps);\r\n\t        changedProps = recalculateResult.changedProps;\r\n\t        this.emitChangedStateEvents(changedProps, eventData);\r\n\t    };\r\n\t    /**\r\n\t     * recalculate all computed state props\r\n\t     */\r\n\t    ChartState.prototype.recalculateState = function (changedProps) {\r\n\t        var data = this.data;\r\n\t        var patch = {};\r\n\t        var actualData = Utils_1.Utils.deepMerge({}, data);\r\n\t        // recalculate widgets\r\n\t        if (changedProps.widgets || !data.widgets) {\r\n\t            patch.widgets = {};\r\n\t            var widgetsOptions = data.widgets || {};\r\n\t            for (var widgetName in this.widgetsClasses) {\r\n\t                var WidgetClass = this.widgetsClasses[widgetName];\r\n\t                var userOptions = widgetsOptions[widgetName] || {};\r\n\t                var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\r\n\t                patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\r\n\t            }\r\n\t        }\r\n\t        // recalculate scroll position by changed cursor options\r\n\t        var cursorOptions = changedProps.cursor;\r\n\t        var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\r\n\t        if (isMouseDrag) {\r\n\t            var oldX = data.prevState.cursor.x;\r\n\t            var currentX = cursorOptions.x;\r\n\t            var currentScroll = data.xAxis.range.scroll;\r\n\t            var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\r\n\t            patch.xAxis = { range: { scroll: currentScroll + deltaXVal } };\r\n\t            actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: patch.xAxis });\r\n\t        }\r\n\t        var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\r\n\t        var scrollXChanged = false;\r\n\t        var needToRecalculateXAxis = (isMouseDrag ||\r\n\t            chartWasResized ||\r\n\t            (changedProps.xAxis && (changedProps.xAxis.range)) ||\r\n\t            this.data.xAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateXAxis) {\r\n\t            var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\r\n\t            if (xAxisPatch) {\r\n\t                scrollXChanged = true;\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { xAxis: xAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: xAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        // recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\r\n\t        var needToRecalculateYAxis = (chartWasResized ||\r\n\t            (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END ||\r\n\t                data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO ||\r\n\t                data.yAxis.range.isMirrorMode) &&\r\n\t                (scrollXChanged || changedProps.trends || changedProps.yAxis) ||\r\n\t            this.data.yAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateYAxis) {\r\n\t            var yAxisPatch = this.recalculateYAxis(actualData);\r\n\t            if (yAxisPatch) {\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { yAxis: yAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { yAxis: yAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(patch);\r\n\t        var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\r\n\t        patch.computedData = this.getComputedData(allChangedProps);\r\n\t        this.savePrevState(patch);\r\n\t        this.data = Utils_1.Utils.deepMerge(this.data, patch);\r\n\t        return { changedProps: allChangedProps, patch: patch };\r\n\t    };\r\n\t    ChartState.prototype.getComputedData = function (changedProps) {\r\n\t        var computeAll = !changedProps;\r\n\t        var computedData = {};\r\n\t        if (computeAll || changedProps.trends && this.trendsManager) {\r\n\t            computedData.trends = {\r\n\t                maxXVal: this.trendsManager.getEndXVal(),\r\n\t                minXVal: this.trendsManager.getStartXVal()\r\n\t            };\r\n\t        }\r\n\t        return computedData;\r\n\t    };\r\n\t    ChartState.prototype.savePrevState = function (changedProps) {\r\n\t        // var propsToSave = changedProps ? Object.keys(changedProps) : Object.keys(this.data);\r\n\t        if (!changedProps)\r\n\t            changedProps = this.data;\r\n\t        var prevState = this.data.prevState;\r\n\t        // prevent to store prev trend data by performance reasons\r\n\t        Utils_1.Utils.copyProps(this.data, prevState, changedProps, ['trends']);\r\n\t    };\r\n\t    ChartState.prototype.emitChangedStateEvents = function (changedProps, eventData) {\r\n\t        var prevState = this.data.prevState;\r\n\t        // emit common change event\r\n\t        this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\r\n\t        // emit event for each changed state property\r\n\t        for (var key in changedProps) {\r\n\t            this.ee.emit(key + 'Change', changedProps[key], eventData);\r\n\t        }\r\n\t        if (!this.isReady)\r\n\t            return;\r\n\t        // emit special events based on changed state\r\n\t        var scrollStopEventNeeded = (changedProps.cursor &&\r\n\t            changedProps.cursor.dragMode === false &&\r\n\t            prevState.cursor.dragMode === true);\r\n\t        scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\r\n\t        var scrollChangeEventsNeeded = (changedProps.xAxis &&\r\n\t            changedProps.xAxis.range &&\r\n\t            changedProps.xAxis.range.scroll !== void 0);\r\n\t        scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\r\n\t        var zoomEventsNeeded = ((changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\r\n\t            (changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom));\r\n\t        zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\r\n\t        var resizeEventNeeded = (changedProps.width || changedProps.height);\r\n\t        resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\r\n\t        var pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\r\n\t        pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\r\n\t    };\r\n\t    /**\r\n\t     * init plugins and save plugins options in initialState\r\n\t     */\r\n\t    ChartState.prototype.installPlugins = function (plugins, initialState) {\r\n\t        var _this = this;\r\n\t        initialState.pluginsState = {};\r\n\t        plugins.forEach(function (plugin) {\r\n\t            var PluginClass = plugin.constructor;\r\n\t            var pluginName = PluginClass.NAME;\r\n\t            PluginClass.pluginWidgets.forEach(function (PluginWidget) { return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget; });\r\n\t            initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\r\n\t            _this.plugins[pluginName] = plugin;\r\n\t            plugin.setupChartState(_this);\r\n\t        });\r\n\t        return initialState;\r\n\t    };\r\n\t    /**\r\n\t     * returns plugin instance by plugin name\r\n\t     * @example\r\n\t     */\r\n\t    ChartState.prototype.getPlugin = function (pluginName) {\r\n\t        return this.plugins[pluginName];\r\n\t    };\r\n\t    ChartState.prototype.initListeners = function () {\r\n\t        var _this = this;\r\n\t        this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function (changedTrends, newData) {\r\n\t            _this.handleTrendsChange(changedTrends, newData);\r\n\t        });\r\n\t    };\r\n\t    ChartState.prototype.handleTrendsChange = function (changedTrends, newData) {\r\n\t        for (var trendName in changedTrends) {\r\n\t            this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\r\n\t        }\r\n\t    };\r\n\t    ChartState.prototype.recalculateXAxis = function (actualData, changedProps) {\r\n\t        var axisRange = actualData.xAxis.range;\r\n\t        var patch = { range: {} };\r\n\t        var isInitialize = axisRange.zeroVal == void 0;\r\n\t        var zeroVal, scaleFactor;\r\n\t        var zoom = axisRange.zoom;\r\n\t        if (axisRange.isMirrorMode) {\r\n\t            Utils_1.Utils.error('range.isMirrorMode available only for yAxis.range');\r\n\t        }\r\n\t        if (isInitialize) {\r\n\t            zeroVal = axisRange.from;\r\n\t            scaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t        }\r\n\t        else {\r\n\t            zeroVal = axisRange.zeroVal;\r\n\t            scaleFactor = axisRange.scaleFactor;\r\n\t            // recalculate range.zoom and range.scroll then range.from or range.to was changed\r\n\t            if (changedProps.xAxis &&\r\n\t                (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\r\n\t                if (changedProps.xAxis.range.zoom) {\r\n\t                    Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\r\n\t                }\r\n\t                var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t                patch.range.scroll = axisRange.from - zeroVal;\r\n\t                patch.range.zoom = currentScaleFactor / scaleFactor;\r\n\t                return patch;\r\n\t            }\r\n\t        }\r\n\t        // recalculate range.from and range.to then range.zoom or range.scroll was changed\r\n\t        do {\r\n\t            var from = zeroVal + axisRange.scroll;\r\n\t            var to = from + actualData.width / (scaleFactor * zoom);\r\n\t            var rangeLength = to - from;\r\n\t            var needToRecalculateZoom = false;\r\n\t            var rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\r\n\t            var rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\r\n\t            needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\r\n\t            if (needToRecalculateZoom) {\r\n\t                var fixScale = rangeLength > axisRange.maxLength ?\r\n\t                    rangeLength / axisRange.maxLength :\r\n\t                    rangeLength / axisRange.minLength;\r\n\t                var zoom = zoom * fixScale;\r\n\t                patch.range.zoom = zoom;\r\n\t            }\r\n\t        } while (needToRecalculateZoom);\r\n\t        patch.range.from = from;\r\n\t        patch.range.to = to;\r\n\t        return patch;\r\n\t    };\r\n\t    ChartState.prototype.recalculateYAxis = function (actualData) {\r\n\t        var patch = { range: {} };\r\n\t        var yAxisRange = actualData.yAxis.range;\r\n\t        var isInitialize = yAxisRange.scaleFactor == void 0;\r\n\t        var trends = this.trendsManager;\r\n\t        var trendsEndXVal = trends.getEndXVal();\r\n\t        var trendsStartXVal = trends.getStartXVal();\r\n\t        var xRange = actualData.xAxis.range;\r\n\t        var xFrom = xRange.from, xTo = xRange.to;\r\n\t        var xRangeLength = xTo - xFrom;\r\n\t        var zeroVal, scaleFactor, scroll, zoom, needToZoom;\r\n\t        // check situation when chart was scrolled behind trends end or before trends start\r\n\t        if (xTo > trendsEndXVal) {\r\n\t            xTo = trendsEndXVal;\r\n\t            xFrom = xTo - xRangeLength;\r\n\t        }\r\n\t        else if (xFrom < trendsStartXVal) {\r\n\t            xFrom = trendsStartXVal;\r\n\t            xTo = xFrom + xRangeLength;\r\n\t        }\r\n\t        var maxY = trends.getMaxYVal(xFrom, xTo);\r\n\t        var minY = trends.getMinYVal(xFrom, xTo);\r\n\t        var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\r\n\t        if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\r\n\t            if (trendLastY > maxY)\r\n\t                maxY = trendLastY;\r\n\t            if (trendLastY < minY)\r\n\t                minY = trendLastY;\r\n\t        }\r\n\t        if (yAxisRange.isMirrorMode) {\r\n\t            if (yAxisRange.zeroVal == void 0)\r\n\t                Utils_1.Utils.error('range.zeroVal must be set when range.isMirrorMode');\r\n\t            var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\r\n\t            var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\r\n\t            var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\r\n\t            maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\r\n\t            minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\r\n\t        }\r\n\t        var margin = yAxisRange.margin;\r\n\t        var padding = {\r\n\t            start: yAxisRange.padding.start + margin.start,\r\n\t            end: yAxisRange.padding.end + margin.end\r\n\t        };\r\n\t        if (padding.end + padding.start >= actualData.height) {\r\n\t            Utils_1.Utils.warn('Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly');\r\n\t        }\r\n\t        var rangeLength = maxY - minY;\r\n\t        var paddingTopInPercents = padding.end / actualData.height;\r\n\t        var paddingBottomInPercents = padding.start / actualData.height;\r\n\t        var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\r\n\t        var visibleRangeLength = rangeLength / rangeLengthInPercents;\r\n\t        var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\r\n\t        var toVal = maxY + visibleRangeLength * paddingTopInPercents;\r\n\t        if (isInitialize) {\r\n\t            zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\r\n\t            scaleFactor = actualData.height / (toVal - fromVal);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t            needToZoom = true;\r\n\t        }\r\n\t        else {\r\n\t            scaleFactor = yAxisRange.scaleFactor;\r\n\t            zeroVal = yAxisRange.zeroVal;\r\n\t            var maxScreenY = Math.round(this.getScreenYByValue(maxY));\r\n\t            var minScreenY = Math.round(this.getScreenYByValue(minY));\r\n\t            needToZoom = (maxScreenY > actualData.height - margin.end ||\r\n\t                maxScreenY < actualData.height - padding.end ||\r\n\t                minScreenY < margin.start ||\r\n\t                minScreenY > padding.start);\r\n\t        }\r\n\t        if (!needToZoom)\r\n\t            return null;\r\n\t        scroll = fromVal - zeroVal;\r\n\t        zoom = (actualData.height / (toVal - fromVal)) / scaleFactor;\r\n\t        var currentAxisRange = this.data.yAxis.range;\r\n\t        if (currentAxisRange.from !== fromVal)\r\n\t            patch.range.from = fromVal;\r\n\t        if (currentAxisRange.to !== toVal)\r\n\t            patch.range.to = toVal;\r\n\t        if (currentAxisRange.scroll !== scroll)\r\n\t            patch.range.scroll = scroll;\r\n\t        if (currentAxisRange.zoom !== zoom)\r\n\t            patch.range.zoom = zoom;\r\n\t        return patch;\r\n\t    };\r\n\t    ChartState.prototype.zoom = function (zoomValue, origin) {\r\n\t        var _this = this;\r\n\t        if (origin === void 0) { origin = 0.5; }\r\n\t        var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\r\n\t        var newZoom = zoom * zoomValue;\r\n\t        var currentRange = this.data.width / (scaleFactor * zoom);\r\n\t        var nextRange = this.data.width / (scaleFactor * newZoom);\r\n\t        var newScroll = scroll + (currentRange - nextRange) * origin;\r\n\t        this.setState({ xAxis: { range: { zoom: newZoom, scroll: newScroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    ChartState.prototype.zoomToRange = function (range, origin) {\r\n\t        var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\r\n\t        var currentRange = this.data.width / (scaleFactor * zoom);\r\n\t        return this.zoom(currentRange / range, origin);\r\n\t    };\r\n\t    ChartState.prototype.scrollToEnd = function () {\r\n\t        var _this = this;\r\n\t        var state = this.data;\r\n\t        var endXVal = this.trendsManager.getEndXVal();\r\n\t        var range = state.xAxis.range;\r\n\t        var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\r\n\t        this.setState({ xAxis: { range: { scroll: scroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to xVal\r\n\t     */\r\n\t    ChartState.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to yVal\r\n\t     */\r\n\t    ChartState.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    ChartState.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    ChartState.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    ChartState.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    ChartState.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    ChartState.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns x value by screen x coordinate\r\n\t     */\r\n\t    ChartState.prototype.getValueByScreenX = function (x) {\r\n\t        var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns y value by screen y coordinate\r\n\t     */\r\n\t    ChartState.prototype.getValueByScreenY = function (y) {\r\n\t        var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen x value by screen y coordinate\r\n\t     */\r\n\t    ChartState.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen y value by screen y coordinate\r\n\t     */\r\n\t    ChartState.prototype.getScreenYByValue = function (yVal) {\r\n\t        var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByYAxis(yVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    ChartState.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\r\n\t     */\r\n\t    ChartState.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    ChartState.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    ChartState.prototype.getScreenLeftVal = function () {\r\n\t        return this.getValueByScreenX(0);\r\n\t    };\r\n\t    ChartState.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.data.width);\r\n\t    };\r\n\t    ChartState.prototype.getPaddingRight = function () {\r\n\t        return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\r\n\t    };\r\n\t    return ChartState;\r\n\t}());\r\n\texports.ChartState = ChartState;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(3);\r\n\t/**\r\n\t * this class uses as proxy for EventEmitter2\r\n\t */\r\n\tvar EventEmitter = (function () {\r\n\t    function EventEmitter() {\r\n\t        this.ee = new deps_1.EE2();\r\n\t    }\r\n\t    EventEmitter.prototype.emit = function (eventName) {\r\n\t        var args = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            args[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        (_a = this.ee).emit.apply(_a, [eventName].concat(args));\r\n\t        var _a;\r\n\t    };\r\n\t    EventEmitter.prototype.on = function (eventName, callback) {\r\n\t        return this.ee.on(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.off = function (eventName, callback) {\r\n\t        return this.ee.off(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.subscribe = function (eventName, callback) {\r\n\t        var _this = this;\r\n\t        this.on(eventName, callback);\r\n\t        return function () { return _this.off(eventName, callback); };\r\n\t    };\r\n\t    EventEmitter.prototype.setMaxListeners = function (listenersCount) {\r\n\t        this.ee.setMaxListeners(listenersCount);\r\n\t    };\r\n\t    EventEmitter.prototype.removeAllListeners = function (eventName) {\r\n\t        this.ee.removeAllListeners(eventName);\r\n\t    };\r\n\t    return EventEmitter;\r\n\t}());\r\n\texports.EventEmitter = EventEmitter;\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(3);\r\n\tfunction deepmerge(target, src, mergeArrays) {\r\n\t    if (mergeArrays === void 0) { mergeArrays = true; }\r\n\t    var array = Array.isArray(src);\r\n\t    var dst = array && [] || {};\r\n\t    if (array) {\r\n\t        target = target || [];\r\n\t        if (mergeArrays) {\r\n\t            dst = dst.concat(target);\r\n\t        }\r\n\t        src.forEach(function (e, i) {\r\n\t            if (typeof dst[i] === 'undefined') {\r\n\t                dst[i] = e;\r\n\t            }\r\n\t            else if (typeof e === 'object') {\r\n\t                dst[i] = deepmerge(target[i], e, mergeArrays);\r\n\t            }\r\n\t            else {\r\n\t                if (target.indexOf(e) === -1) {\r\n\t                    dst.push(e);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    else {\r\n\t        if (target && typeof target === 'object') {\r\n\t            Object.keys(target).forEach(function (key) {\r\n\t                dst[key] = target[key];\r\n\t            });\r\n\t        }\r\n\t        Object.keys(src).forEach(function (key) {\r\n\t            if (typeof src[key] !== 'object' || !src[key]) {\r\n\t                dst[key] = src[key];\r\n\t            }\r\n\t            else {\r\n\t                if (!target[key]) {\r\n\t                    dst[key] = src[key];\r\n\t                }\r\n\t                else {\r\n\t                    dst[key] = deepmerge(target[key], src[key], mergeArrays);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    return dst;\r\n\t}\r\n\t/**\r\n\t * project utils static class\r\n\t */\r\n\tvar Utils = (function () {\r\n\t    function Utils() {\r\n\t    }\r\n\t    /**\r\n\t     * deepMerge based on https://www.npmjs.com/package/deepmerge\r\n\t     */\r\n\t    Utils.deepMerge = function (obj1, obj2, mergeArrays) {\r\n\t        return deepmerge(obj1, obj2, mergeArrays);\r\n\t    };\r\n\t    /**\r\n\t     * deepCopy based on JSON.stringify function\r\n\t     * @deprecated\r\n\t     */\r\n\t    Utils.deepCopy = function (obj) {\r\n\t        // TODO: use deepMerge function to copy\r\n\t        return JSON.parse(JSON.stringify(obj));\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * @example\r\n\t     * // returns \"000015\"\r\n\t     * Utils.toFixed(15, 6);\r\n\t     */\r\n\t    Utils.toFixed = function (num, digitsCount) {\r\n\t        var maxDigits = 15;\r\n\t        var result = '';\r\n\t        var intVal = Math.floor(num);\r\n\t        var intStr = intVal.toString();\r\n\t        var lengthDiff = digitsCount - intStr.length;\r\n\t        if (lengthDiff > 0) {\r\n\t            result = '0'.repeat(lengthDiff) + intStr;\r\n\t        }\r\n\t        else {\r\n\t            result = intStr;\r\n\t        }\r\n\t        var afterPointDigitsCount = maxDigits - intStr.length;\r\n\t        var afterPointStr = num.toString().split('.')[1];\r\n\t        if (afterPointStr) {\r\n\t            result += '.' + afterPointStr.substr(0, afterPointDigitsCount);\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    Utils.bindEvent = function () {\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createTexture = function (width, height, fn) {\r\n\t        var canvas = document.createElement('canvas');\r\n\t        canvas.width = width;\r\n\t        canvas.height = height;\r\n\t        var ctx = canvas.getContext('2d');\r\n\t        fn(ctx);\r\n\t        var texture = new THREE.Texture(canvas);\r\n\t        texture.needsUpdate = true;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context with NearestFilter\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createPixelPerfectTexture = function (width, height, fn) {\r\n\t        var texture = this.createTexture(width, height, fn);\r\n\t        // texture.magFilter = THREE.NearestFilter;\r\n\t        texture.minFilter = THREE.NearestFilter;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.error = function (msg) {\r\n\t        console.error('Chart error: ' + msg);\r\n\t        throw 'Chart: ' + msg;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.warn = function (msg) {\r\n\t        console.warn('Chart warning: ' + msg);\r\n\t    };\r\n\t    /**\r\n\t     * @returns new unique id\r\n\t     */\r\n\t    Utils.getUid = function () {\r\n\t        return this.currentId++;\r\n\t    };\r\n\t    /**\r\n\t     * @returns distance between numbers\r\n\t     */\r\n\t    Utils.getDistance = function (num1, num2) {\r\n\t        return Math.max(num1, num2) - Math.min(num1, num2);\r\n\t    };\r\n\t    Utils.binarySearchClosestInd = function (arr, num, key) {\r\n\t        var mid;\r\n\t        var lo = 0;\r\n\t        var hi = arr.length - 1;\r\n\t        while (hi - lo > 1) {\r\n\t            mid = Math.floor((lo + hi) / 2);\r\n\t            if (arr[mid][key] < num) {\r\n\t                lo = mid;\r\n\t            }\r\n\t            else {\r\n\t                hi = mid;\r\n\t            }\r\n\t        }\r\n\t        if (num - arr[lo][key] <= arr[hi][key] - num) {\r\n\t            return lo;\r\n\t        }\r\n\t        return hi;\r\n\t    };\r\n\t    Utils.binarySearchClosest = function (arr, num, key) {\r\n\t        var ind = this.binarySearchClosestInd(arr, num, key);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.rectsIntersect = function (r1, r2) {\r\n\t        var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\r\n\t        var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\r\n\t        var _a = [left1 + width1, left2 + width2, top1 + height1, top2 + height2], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\r\n\t        return !(left2 > right1 ||\r\n\t            right2 < left1 ||\r\n\t            top2 > bottom1 ||\r\n\t            bottom2 < top1);\r\n\t    };\r\n\t    /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\r\n\t    // Parse hex/rgb{a} color syntax.\r\n\t    // @input string\r\n\t    // @returns array [r,g,b{,o}]\r\n\t    Utils.parseColor = function (color) {\r\n\t        var cache, p = parseInt // Use p as a byte saving reference to parseInt\r\n\t        , color = color.replace(/\\s\\s*/g, ''); //var\r\n\t        // Checks for 6 digit hex and converts string to integer\r\n\t        if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\r\n\t        else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\r\n\t            cache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\r\n\t        else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3], +cache[4]];\r\n\t        else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3]];\r\n\t        else\r\n\t            throw Error(color + ' is not supported by $.parseColor');\r\n\t        // Performs RGBA conversion by default\r\n\t        isNaN(cache[3]) && (cache[3] = 1);\r\n\t        return cache;\r\n\t        // Adds or removes 4th value based on rgba support\r\n\t        // Support is flipped twice to prevent erros if\r\n\t        // it's not defined\r\n\t        //return cache.slice(0,3 + !!$.support.rgba);\r\n\t    };\r\n\t    Utils.getHexColor = function (str) {\r\n\t        var rgb = this.parseColor(str);\r\n\t        return (rgb[0] << (8 * 2)) + (rgb[1] << 8) + rgb[2];\r\n\t    };\r\n\t    Utils.throttle = function (func, ms) {\r\n\t        var isThrottled = false, savedArgs, savedThis;\r\n\t        function wrapper() {\r\n\t            if (isThrottled) {\r\n\t                savedArgs = arguments;\r\n\t                savedThis = this;\r\n\t                return;\r\n\t            }\r\n\t            func.apply(this, arguments); // (1)\r\n\t            isThrottled = true;\r\n\t            setTimeout(function () {\r\n\t                isThrottled = false; // (3)\r\n\t                if (savedArgs) {\r\n\t                    wrapper.apply(savedThis, savedArgs);\r\n\t                    savedArgs = savedThis = null;\r\n\t                }\r\n\t            }, ms);\r\n\t        }\r\n\t        return wrapper;\r\n\t    };\r\n\t    Utils.msToTimeString = function (timestamp) {\r\n\t        var h = Math.floor(timestamp / 360000);\r\n\t        var m = Math.floor(timestamp / 60000);\r\n\t        var s = Math.floor(timestamp / 1000);\r\n\t        return h + ':' + m + ':' + s;\r\n\t    };\r\n\t    Utils.getRandomItem = function (arr) {\r\n\t        var ind = Math.floor(Math.random() * arr.length);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.copyProps = function (srcObject, dstObject, props, excludeProps) {\r\n\t        if (excludeProps === void 0) { excludeProps = []; }\r\n\t        for (var key in props) {\r\n\t            if (excludeProps.indexOf(key) !== -1)\r\n\t                continue;\r\n\t            if (srcObject[key] == void 0)\r\n\t                continue;\r\n\t            if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\r\n\t                this.copyProps(srcObject[key], dstObject[key], props[key]);\r\n\t            }\r\n\t            else {\r\n\t                dstObject[key] = this.deepCopy(srcObject[key]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Utils.currentId = 1;\r\n\t    return Utils;\r\n\t}());\r\n\texports.Utils = Utils;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * base class for all widgets\r\n\t * each widget must have widgetName static property\r\n\t */\r\n\tvar ChartWidget = (function () {\r\n\t    function ChartWidget(chartState) {\r\n\t        this.unsubscribers = [];\r\n\t        this.chartState = chartState;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    ChartWidget.prototype.bindEvents = function () { };\r\n\t    ChartWidget.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unsubscribers = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unsubscribers.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unsubscribers.push.apply(unsubscribers, (args));\r\n\t        }\r\n\t        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartWidget.prototype.unbindEvents = function () {\r\n\t        this.unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); });\r\n\t        this.unsubscribers.length = 0;\r\n\t    };\r\n\t    ChartWidget.getDefaultOptions = function () {\r\n\t        return { enabled: true };\r\n\t    };\r\n\t    ChartWidget.widgetName = '';\r\n\t    return ChartWidget;\r\n\t}());\r\n\texports.ChartWidget = ChartWidget;\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Trend_1 = __webpack_require__(17);\r\n\tvar EventEmmiter_1 = __webpack_require__(13);\r\n\tvar EVENTS = {\r\n\t    SEGMENTS_REBUILDED: 'segmentsRebuilded'\r\n\t};\r\n\t/**\r\n\t * Trends manager\r\n\t */\r\n\tvar TrendsManager = (function () {\r\n\t    function TrendsManager(state, initialState) {\r\n\t        this.trends = {};\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.chartState = state;\r\n\t        var trendsCalculatedOptions = {};\r\n\t        for (var trendName in initialState.trends) {\r\n\t            var trend = this.createTrend(state, trendName, initialState);\r\n\t            trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\r\n\t        }\r\n\t        this.calculatedOptions = trendsCalculatedOptions;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendsManager.prototype.getTrend = function (trendName) {\r\n\t        return this.trends[trendName];\r\n\t    };\r\n\t    TrendsManager.prototype.getEnabledTrends = function () {\r\n\t        var enabledTrends = [];\r\n\t        var allTrends = this.trends;\r\n\t        for (var trendName in allTrends) {\r\n\t            var trend = allTrends[trendName];\r\n\t            trend.getOptions().enabled && enabledTrends.push(trend);\r\n\t        }\r\n\t        return enabledTrends;\r\n\t    };\r\n\t    TrendsManager.prototype.getStartXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        return trends[0].getData()[0].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getEndXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var firstTrendData = trends[0].getData();\r\n\t        return firstTrendData[firstTrendData.length - 1].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getExtremumYVal = function (extremumIsMax, fromX, toX) {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var compareFn;\r\n\t        var result;\r\n\t        if (extremumIsMax) {\r\n\t            result = -Infinity;\r\n\t            compareFn = Math.max;\r\n\t        }\r\n\t        else {\r\n\t            result = Infinity;\r\n\t            compareFn = Math.min;\r\n\t        }\r\n\t        for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\r\n\t            var trend = trends_1[_i];\r\n\t            var trendData = trend.getData(fromX, toX);\r\n\t            var trendYValues = trendData.map(function (dataItem) { return dataItem.yVal; });\r\n\t            result = compareFn.apply(void 0, [result].concat(trendYValues));\r\n\t        }\r\n\t        if (result == Infinity || result == -Infinity)\r\n\t            result = NaN;\r\n\t        return result;\r\n\t    };\r\n\t    TrendsManager.prototype.getMaxYVal = function (fromX, toX) { return this.getExtremumYVal(true, fromX, toX); };\r\n\t    TrendsManager.prototype.getMinYVal = function (fromX, toX) { return this.getExtremumYVal(false, fromX, toX); };\r\n\t    TrendsManager.prototype.onSegmentsRebuilded = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\r\n\t    };\r\n\t    TrendsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onInitialStateApplied(function () { return _this.onInitialStateAppliedHandler(); });\r\n\t    };\r\n\t    TrendsManager.prototype.onInitialStateAppliedHandler = function () {\r\n\t        var _this = this;\r\n\t        var _loop_1 = function(trendName) {\r\n\t            this_1.trends[trendName].segments.onRebuild(function () { return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName); });\r\n\t        };\r\n\t        var this_1 = this;\r\n\t        for (var trendName in this.trends) {\r\n\t            _loop_1(trendName);\r\n\t        }\r\n\t    };\r\n\t    TrendsManager.prototype.createTrend = function (state, trendName, initialState) {\r\n\t        var trend = new Trend_1.Trend(state, trendName, initialState);\r\n\t        this.trends[trendName] = trend;\r\n\t        return trend;\r\n\t    };\r\n\t    return TrendsManager;\r\n\t}());\r\n\texports.TrendsManager = TrendsManager;\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar TrendSegments_1 = __webpack_require__(18);\r\n\tvar EventEmmiter_1 = __webpack_require__(13);\r\n\tvar deps_1 = __webpack_require__(3);\r\n\tvar EVENTS = {\r\n\t    CHANGE: 'Change',\r\n\t    PREPEND_REQUEST: 'prependRequest'\r\n\t};\r\n\t(function (TREND_TYPE) {\r\n\t    TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\r\n\t    TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\r\n\t})(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\r\n\tvar TREND_TYPE = exports.TREND_TYPE;\r\n\tvar DEFAULT_OPTIONS = {\r\n\t    enabled: true,\r\n\t    type: TREND_TYPE.LINE,\r\n\t    data: [],\r\n\t    maxSegmentLength: 1000,\r\n\t    lineWidth: 2,\r\n\t    lineColor: 0xFFFFFF,\r\n\t    hasGradient: true,\r\n\t    hasBeacon: false,\r\n\t    settingsForTypes: {\r\n\t        CANDLE: {\r\n\t            minSegmentLengthInPx: 20,\r\n\t            maxSegmentLengthInPx: 40,\r\n\t        },\r\n\t        LINE: {\r\n\t            minSegmentLengthInPx: 2,\r\n\t            maxSegmentLengthInPx: 10,\r\n\t        }\r\n\t    }\r\n\t};\r\n\tvar Trend = (function () {\r\n\t    function Trend(chartState, trendName, initialState) {\r\n\t        this.minXVal = Infinity;\r\n\t        this.minYVal = Infinity;\r\n\t        this.maxXVal = -Infinity;\r\n\t        this.maxYVal = -Infinity;\r\n\t        var options = initialState.trends[trendName];\r\n\t        this.name = trendName;\r\n\t        this.chartState = chartState;\r\n\t        this.calculatedOptions = Utils_1.Utils.deepMerge(DEFAULT_OPTIONS, options);\r\n\t        this.calculatedOptions.name = trendName;\r\n\t        if (options.dataset)\r\n\t            this.calculatedOptions.data = Trend.prepareData(options.dataset);\r\n\t        this.calculatedOptions.dataset = [];\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    Trend.prototype.onInitialStateApplied = function () {\r\n\t        this.segments = new TrendSegments_1.TrendSegments(this.chartState, this);\r\n\t    };\r\n\t    Trend.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var chartState = this.chartState;\r\n\t        chartState.onInitialStateApplied(function () { return _this.onInitialStateApplied(); });\r\n\t        chartState.onScrollStop(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onZoom(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onTrendChange(function (trendName, changedOptions, newData) { return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData); });\r\n\t        chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    Trend.prototype.getCalculatedOptions = function () {\r\n\t        return this.calculatedOptions;\r\n\t    };\r\n\t    Trend.prototype.appendData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData());\r\n\t        var updatedTrendData = options.data.concat(newData);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.prependData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData(), true);\r\n\t        var updatedTrendData = newData.concat(options.data);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.changeData = function (allData, newData) {\r\n\t        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\r\n\t            var item = newData_1[_i];\r\n\t            if (item.xVal < this.minXVal)\r\n\t                this.minXVal = item.xVal;\r\n\t            if (item.xVal > this.maxXVal)\r\n\t                this.maxXVal = item.xVal;\r\n\t            if (item.yVal < this.minYVal)\r\n\t                this.minYVal = item.yVal;\r\n\t            if (item.yVal > this.maxYVal)\r\n\t                this.maxYVal = item.yVal;\r\n\t        }\r\n\t        var options = this.getOptions();\r\n\t        var statePatch = { trends: (_a = {}, _a[options.name] = { data: allData }, _a) };\r\n\t        this.chartState.setState(statePatch, newData);\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.getData = function (fromX, toX) {\r\n\t        var data = this.getOptions().data;\r\n\t        if (fromX == void 0 && toX == void 0)\r\n\t            return data;\r\n\t        fromX = fromX !== void 0 ? fromX : data[0].xVal;\r\n\t        toX = toX !== void 0 ? toX : data[data.length].xVal;\r\n\t        var filteredData = [];\r\n\t        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\r\n\t            var item = data_1[_i];\r\n\t            if (item.xVal < fromX)\r\n\t                continue;\r\n\t            if (item.xVal > toX)\r\n\t                break;\r\n\t            filteredData.push(item);\r\n\t        }\r\n\t        return filteredData;\r\n\t    };\r\n\t    Trend.prototype.getFirstItem = function () {\r\n\t        return this.getOptions().data[0];\r\n\t    };\r\n\t    Trend.prototype.getLastItem = function () {\r\n\t        var data = this.getOptions().data;\r\n\t        return data[data.length - 1];\r\n\t    };\r\n\t    Trend.prototype.getOptions = function () {\r\n\t        return this.chartState.data.trends[this.name];\r\n\t    };\r\n\t    Trend.prototype.setOptions = function (options) {\r\n\t        this.chartState.setState({ trends: (_a = {}, _a[this.name] = options, _a) });\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.onPrependRequest = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.PREPEND_REQUEST, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartState.onTrendChange\r\n\t     */\r\n\t    Trend.prototype.onChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.CHANGE, cb);\r\n\t        return function () { _this.ee.off(EVENTS.CHANGE, cb); };\r\n\t    };\r\n\t    Trend.prototype.onDataChange = function (cb) {\r\n\t        var _this = this;\r\n\t        var onChangeCb = function (changedOptions, newData) {\r\n\t            if (newData)\r\n\t                cb(newData);\r\n\t        };\r\n\t        this.ee.on(EVENTS.CHANGE, onChangeCb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.CHANGE, onChangeCb);\r\n\t        };\r\n\t    };\r\n\t    Trend.prototype.checkForPrependRequest = function () {\r\n\t        var _this = this;\r\n\t        if (this.prependRequest)\r\n\t            return;\r\n\t        var chartState = this.chartState;\r\n\t        var minXVal = chartState.data.computedData.trends.minXVal;\r\n\t        var minScreenX = chartState.getScreenXByValue(minXVal);\r\n\t        var needToRequest = minScreenX > 0;\r\n\t        var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var requestedDataLength = to - from;\r\n\t        if (!needToRequest)\r\n\t            return;\r\n\t        this.prependRequest = new deps_1.Promise(function (resolve, reject) {\r\n\t            _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\r\n\t        });\r\n\t        this.prependRequest.then(function (newData) {\r\n\t            _this.prependData(newData);\r\n\t            _this.prependRequest = null;\r\n\t        }, function () {\r\n\t            _this.prependRequest = null;\r\n\t        });\r\n\t    };\r\n\t    Trend.prepareData = function (newData, currentData, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var data = [];\r\n\t        if (typeof newData[0] == 'number') {\r\n\t            currentData = currentData || [];\r\n\t            var initialItem = void 0;\r\n\t            var xVal = void 0;\r\n\t            if (isPrepend) {\r\n\t                initialItem = currentData[0];\r\n\t                xVal = initialItem.xVal - newData.length;\r\n\t            }\r\n\t            else {\r\n\t                initialItem = currentData[currentData.length - 1];\r\n\t                xVal = initialItem ? initialItem.xVal + 1 : 0;\r\n\t            }\r\n\t            for (var _i = 0, _a = newData; _i < _a.length; _i++) {\r\n\t                var yVal = _a[_i];\r\n\t                data.push({ xVal: xVal, yVal: yVal, id: Utils_1.Utils.getUid() });\r\n\t                xVal++;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            data = newData;\r\n\t        }\r\n\t        return data;\r\n\t    };\r\n\t    return Trend;\r\n\t}());\r\n\texports.Trend = Trend;\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar EventEmmiter_1 = __webpack_require__(13);\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(17);\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar MAX_ANIMATED_SEGMENTS = 100;\r\n\tvar EVENTS = {\r\n\t    REBUILD: 'rebuild',\r\n\t    DISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\r\n\t    ANIMATION_FRAME: 'animationFrame'\r\n\t};\r\n\t/**\r\n\t *  Class helps to display and animate trends segments\r\n\t */\r\n\tvar TrendSegments = (function () {\r\n\t    function TrendSegments(chartState, trend) {\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.segmentsLength = 0;\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForPrepend = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.trend = trend;\r\n\t        this.maxSegmentLength = trend.getOptions().maxSegmentLength;\r\n\t        this.tryToRebuildSegments();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendSegments.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.trend.onChange(function (changedOptions, newData) { return _this.onTrendChangeHandler(changedOptions, newData); });\r\n\t        this.chartState.onZoom(function () { return _this.onZoomHandler(); });\r\n\t        this.chartState.onScroll(function () { return _this.recalculateDisplayedRange(); });\r\n\t        this.chartState.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    TrendSegments.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.appendAnimation && this.appendAnimation.kill();\r\n\t        this.prependAnimation && this.prependAnimation.kill();\r\n\t    };\r\n\t    TrendSegments.prototype.onZoomHandler = function () {\r\n\t        var segmentsRebuilded = this.tryToRebuildSegments();\r\n\t        if (!segmentsRebuilded) {\r\n\t            this.recalculateDisplayedRange();\r\n\t        }\r\n\t    };\r\n\t    TrendSegments.prototype.onTrendChangeHandler = function (changedOptions, newData) {\r\n\t        var needToRebuildSegments = (changedOptions.type != void 0 ||\r\n\t            changedOptions.maxSegmentLength != void 0);\r\n\t        if (needToRebuildSegments) {\r\n\t            this.tryToRebuildSegments(true);\r\n\t            return;\r\n\t        }\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var data = this.trend.getData();\r\n\t        var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t        isAppend ? this.appendData(newData) : this.prependData(newData);\r\n\t        this.recalculateDisplayedRange();\r\n\t    };\r\n\t    TrendSegments.prototype.getEndSegment = function () {\r\n\t        return this.segmentsById[this.endSegmentId];\r\n\t    };\r\n\t    TrendSegments.prototype.getStartSegment = function () {\r\n\t        return this.segmentsById[this.startSegmentId];\r\n\t    };\r\n\t    TrendSegments.prototype.tryToRebuildSegments = function (force) {\r\n\t        if (force === void 0) { force = false; }\r\n\t        var options = this.trend.getOptions();\r\n\t        var trendTypeName = Trend_1.TREND_TYPE[options.type];\r\n\t        var trendTypesSettings = options.settingsForTypes;\r\n\t        var trendTypeSettings = trendTypesSettings[trendTypeName];\r\n\t        var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\r\n\t        var needToRebuild = this.segments.length === 0 || force;\r\n\t        var segmentLength = this.maxSegmentLength;\r\n\t        // call toFixed(2) to prevent floating segment error compare\r\n\t        var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\r\n\t        var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\r\n\t        if (currentSegmentLengthInPx < minSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\r\n\t        }\r\n\t        else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\r\n\t        }\r\n\t        if (!needToRebuild)\r\n\t            return false;\r\n\t        this.maxSegmentLength = segmentLength;\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.segmentsLength = 0;\r\n\t        this.stopAllAnimations();\r\n\t        this.appendData(null, true);\r\n\t        this.recalculateDisplayedRange(true);\r\n\t        this.ee.emit(EVENTS.REBUILD);\r\n\t    };\r\n\t    TrendSegments.prototype.stopAllAnimations = function () {\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        if (this.prependAnimation)\r\n\t            this.prependAnimation.kill();\r\n\t        if (this.appendAnimation)\r\n\t            this.appendAnimation.kill();\r\n\t    };\r\n\t    TrendSegments.prototype.recalculateDisplayedRange = function (segmentsAreRebuilded) {\r\n\t        if (segmentsAreRebuilded === void 0) { segmentsAreRebuilded = false; }\r\n\t        var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\r\n\t        var displayedRange = to - from;\r\n\t        this.firstDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, from - displayedRange, 'startXVal');\r\n\t        this.lastDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, to + displayedRange, 'endXVal');\r\n\t        if (segmentsAreRebuilded)\r\n\t            return;\r\n\t        var displayedRangeChanged = (firstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\r\n\t            lastDisplayedSegment.id !== this.lastDisplayedSegment.id);\r\n\t        if (displayedRangeChanged)\r\n\t            this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\r\n\t    };\r\n\t    // getSegments(fromX?: number, toX?: number): TrendSegment[] {\r\n\t    // \tvar segments = this.segments;\r\n\t    // \tif (fromX == void 0 && toX == void 0) return segments;\r\n\t    // \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\r\n\t    // \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\r\n\t    // \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\r\n\t    // \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\r\n\t    // \treturn segments.slice(startSegmentInd, endSegmentInd);\r\n\t    // }\r\n\t    /**\r\n\t     * returns array of segments for values array\r\n\t     * values must be sorted!\r\n\t     */\r\n\t    TrendSegments.prototype.getSegmentsForXValues = function (values) {\r\n\t        var valueInd = 0;\r\n\t        var value = values[valueInd];\r\n\t        var lastValueInd = values.length - 1;\r\n\t        var results = [];\r\n\t        var segment = this.getStartSegment();\r\n\t        if (!segment.hasValue)\r\n\t            return [];\r\n\t        while (segment) {\r\n\t            while (value < segment.startXVal) {\r\n\t                results.push(void 0);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            while (value > segment.endXVal) {\r\n\t                segment = segment.getNext();\r\n\t                if (!segment)\r\n\t                    break;\r\n\t            }\r\n\t            var valueInPoint = (segment.startXVal == value || segment.endXVal == value ||\r\n\t                (segment.startXVal < value && segment.endXVal > value));\r\n\t            if (valueInPoint) {\r\n\t                results.push(segment);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            if (valueInd > lastValueInd)\r\n\t                break;\r\n\t        }\r\n\t        return results;\r\n\t    };\r\n\t    TrendSegments.prototype.onAnimationFrame = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\r\n\t    };\r\n\t    TrendSegments.prototype.onRebuild = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.REBUILD, cb);\r\n\t    };\r\n\t    TrendSegments.prototype.onDisplayedRangeChanged = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\r\n\t    };\r\n\t    TrendSegments.prototype.allocateNextSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var prevSegment = this.segmentsById[this.endSegmentId];\r\n\t        if (prevSegment && prevSegment.hasValue) {\r\n\t            prevSegment.nextId = id;\r\n\t            segment.prevId = prevSegment.id;\r\n\t        }\r\n\t        this.endSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.push(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegments.prototype.allocatePrevSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var nextSegment = this.segmentsById[this.startSegmentId];\r\n\t        if (nextSegment && nextSegment.hasValue) {\r\n\t            nextSegment.prevId = id;\r\n\t            segment.nextId = nextSegment.id;\r\n\t        }\r\n\t        this.startSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.unshift(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegments.prototype.appendData = function (newData, needRebuildSegments) {\r\n\t        // WARNING: bottleneck method!\r\n\t        if (needRebuildSegments === void 0) { needRebuildSegments = false; }\r\n\t        // var t1 = performance.now();\r\n\t        var trendData = this.trend.getData();\r\n\t        if (needRebuildSegments) {\r\n\t            newData = trendData;\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t        }\r\n\t        var startItemInd = trendData.length - newData.length;\r\n\t        var segment = this.getEndSegment() || this.allocateNextSegment();\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        var itemInd = 0;\r\n\t        while (itemInd < newData.length) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.appendItem(item);\r\n\t            var isLastItem = itemInd == newData.length - 1;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd++;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForAppend.length > 0) {\r\n\t                    segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\r\n\t                    segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForAppend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocateNextSegment();\r\n\t            var prevItem = trendData[startItemInd + itemInd - 1];\r\n\t            segment.appendItem(prevItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.data.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        // var t2 = performance.now();\r\n\t        // console.log(t2 - t1);\r\n\t        // do not create animation if segments was rebuilded\r\n\t        if (needRebuildSegments) {\r\n\t            for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\r\n\t                var segmentId = _a[_i];\r\n\t                var segment_1 = this.segmentsById[segmentId];\r\n\t                segment_1.currentAnimationState = segment_1.createAnimationState();\r\n\t            }\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t            return;\r\n\t        }\r\n\t        if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time);\r\n\t    };\r\n\t    // TODO: refactor duplicated code from appendData\r\n\t    TrendSegments.prototype.prependData = function (newData) {\r\n\t        var trendData = this.trend.getData();\r\n\t        var segment = this.getStartSegment() || this.segmentsById[0];\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var itemInd = newData.length - 1;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        while (itemInd >= 0) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.prependItem(item);\r\n\t            var isLastItem = itemInd == 0;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd--;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForPrepend.length > 0) {\r\n\t                    segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\r\n\t                    segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForPrepend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocatePrevSegment();\r\n\t            var nextItem = trendData[itemInd + 1];\r\n\t            segment.prependItem(nextItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.data.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time, true);\r\n\t    };\r\n\t    TrendSegments.prototype.animate = function (time, isPrepend) {\r\n\t        var _this = this;\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\r\n\t        if ((animation && animation.isActive()) || time == 0) {\r\n\t            if (animation)\r\n\t                animation.kill();\r\n\t            this.onAnimationFrameHandler(1, isPrepend);\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            return;\r\n\t        }\r\n\t        var animationsOptions = this.chartState.data.animations;\r\n\t        var ease = animationsOptions.trendChangeEase;\r\n\t        var objectToAnimate = { animationValue: 0 };\r\n\t        animation = TweenLite.to(objectToAnimate, time, { animationValue: 1, ease: ease });\r\n\t        animation.eventCallback('onUpdate', function () { return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend); });\r\n\t        animation.eventCallback('onComplete', function () {\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            _this.appendAnimation = null;\r\n\t        });\r\n\t        if (isPrepend) {\r\n\t            this.prependAnimation = animation;\r\n\t        }\r\n\t        else {\r\n\t            this.appendAnimation = animation;\r\n\t        }\r\n\t    };\r\n\t    TrendSegments.prototype.onAnimationFrameHandler = function (coefficient, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\r\n\t            var segmentId = animatedSegmentsIds_1[_i];\r\n\t            var segment = this.segmentsById[segmentId];\r\n\t            for (var key in segment.targetAnimationState) {\r\n\t                var targetValue = segment.targetAnimationState[key];\r\n\t                var initialValue = segment.initialAnimationState[key];\r\n\t                var currentValue = initialValue + (targetValue - initialValue) * coefficient;\r\n\t                segment.currentAnimationState[key] = currentValue;\r\n\t            }\r\n\t        }\r\n\t        this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\r\n\t        this.ee.emit(EVENTS.ANIMATION_FRAME, this);\r\n\t    };\r\n\t    return TrendSegments;\r\n\t}());\r\n\texports.TrendSegments = TrendSegments;\r\n\tvar TrendSegment = (function () {\r\n\t    function TrendSegment(trendPoints, id) {\r\n\t        this.isCompleted = false;\r\n\t        this.items = [];\r\n\t        this.initialAnimationState = {};\r\n\t        this.targetAnimationState = {};\r\n\t        this.currentAnimationState = {};\r\n\t        this.trendSegments = trendPoints;\r\n\t        this.id = id;\r\n\t        this.maxLength = trendPoints.maxSegmentLength;\r\n\t    }\r\n\t    TrendSegment.prototype.createAnimationState = function () {\r\n\t        var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\r\n\t        return {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal,\r\n\t            startXVal: startXVal,\r\n\t            startYVal: startYVal,\r\n\t            endXVal: endXVal,\r\n\t            endYVal: endYVal,\r\n\t            maxYVal: maxYVal,\r\n\t            minYVal: minYVal,\r\n\t            maxLength: maxLength\r\n\t        };\r\n\t    };\r\n\t    ;\r\n\t    TrendSegment.prototype.appendItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.push(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var startXVal = items[0].xVal;\r\n\t        if (item.xVal - startXVal > this.maxLength)\r\n\t            return false;\r\n\t        items.push(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.prependItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.unshift(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var endXVal = items[items.length - 1].xVal;\r\n\t        if (endXVal - item.xVal > this.maxLength)\r\n\t            return false;\r\n\t        items.unshift(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.complete = function () {\r\n\t        this.isCompleted = true;\r\n\t        this.recalculateItems();\r\n\t        this.items = []; // free memory for completed ranges\r\n\t    };\r\n\t    TrendSegment.prototype.recalculateItems = function () {\r\n\t        var items = this.items;\r\n\t        var itemsLength = items.length;\r\n\t        if (itemsLength === 0)\r\n\t            Utils_1.Utils.error('Unable to create TrendSegment without TrendItems');\r\n\t        var endItem = items[itemsLength - 1];\r\n\t        var endXVal = endItem.xVal, endYVal = endItem.yVal;\r\n\t        var startXVal, startYVal;\r\n\t        var startItem = items[0];\r\n\t        startXVal = startItem.xVal;\r\n\t        startYVal = startItem.yVal;\r\n\t        var minX = Math.min(startXVal, endXVal);\r\n\t        var maxX = Math.max(startXVal, endXVal);\r\n\t        var middleXVal = minX + (maxX - minX) / 2;\r\n\t        var minY = Math.min(startYVal, endYVal);\r\n\t        var maxY = Math.max(startYVal, endYVal);\r\n\t        var middleYVal = minY + (maxY - minY) / 2;\r\n\t        var yVals = items.map(function (item) { return item.yVal; });\r\n\t        this.startXVal = startXVal;\r\n\t        this.startYVal = startYVal;\r\n\t        this.endXVal = endXVal;\r\n\t        this.endYVal = endYVal;\r\n\t        this.xVal = middleXVal;\r\n\t        this.yVal = middleYVal;\r\n\t        this.maxYVal = Math.max.apply(Math, yVals);\r\n\t        this.minYVal = Math.min.apply(Math, yVals);\r\n\t        if (!this.currentAnimationState)\r\n\t            this.currentAnimationState = this.createAnimationState();\r\n\t    };\r\n\t    TrendSegment.prototype.getNext = function () {\r\n\t        var nextPoint = this.trendSegments.segmentsById[this.nextId];\r\n\t        return nextPoint && nextPoint.hasValue ? nextPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getPrev = function () {\r\n\t        var prevPoint = this.trendSegments.segmentsById[this.prevId];\r\n\t        return prevPoint && prevPoint.hasValue ? prevPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getFrameVal = function () {\r\n\t        var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\r\n\t        return new Vector3(xVal, yVal, 0);\r\n\t    };\r\n\t    TrendSegment.prototype.getFramePoint = function () {\r\n\t        var frameVal = this.getFrameVal();\r\n\t        return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\r\n\t    };\r\n\t    return TrendSegment;\r\n\t}());\r\n\texports.TrendSegment = TrendSegment;\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar EventEmmiter_1 = __webpack_require__(13);\r\n\t/**\r\n\t * manage camera, and contains methods for transforming pixels to values\r\n\t */\r\n\tvar Screen = (function () {\r\n\t    function Screen(chartState) {\r\n\t        this.options = { scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1 };\r\n\t        this.currentScrollX = { x: 0 };\r\n\t        this.currentScrollY = { y: 0 };\r\n\t        this.currentZoomX = { val: 1 };\r\n\t        this.currentZoomY = { val: 1 };\r\n\t        this.chartState = chartState;\r\n\t        var _a = chartState.data, w = _a.width, h = _a.height;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.transform({\r\n\t            scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\r\n\t            zoomY: 1\r\n\t        });\r\n\t        this.bindEvents();\r\n\t        //camera.position.z = 1500;\r\n\t    }\r\n\t    Screen.prototype.getCameraSettings = function () {\r\n\t        var _a = this.chartState.data, w = _a.width, h = _a.height;\r\n\t        // settings for pixel-perfect camera\r\n\t        var FOV = 75;\r\n\t        var vFOV = FOV * (Math.PI / 180);\r\n\t        return {\r\n\t            FOV: FOV,\r\n\t            aspect: w / h,\r\n\t            near: 0.1,\r\n\t            far: 5000,\r\n\t            z: h / (2 * Math.tan(vFOV / 2)),\r\n\t            // move 0,0 to left-bottom corner\r\n\t            x: w / 2,\r\n\t            y: h / 2\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onZoomFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'zoomFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onScrollFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'scrollFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onTransformationFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'transformationFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.cameraIsMoving = function () {\r\n\t        return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() ||\r\n\t            this.zoomXAnimation && this.zoomXAnimation.isActive());\r\n\t    };\r\n\t    Screen.prototype.transform = function (options, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\r\n\t        if (scrollX != void 0)\r\n\t            this.options.scrollX = scrollX;\r\n\t        if (scrollY != void 0)\r\n\t            this.options.scrollY = scrollY;\r\n\t        if (zoomX != void 0)\r\n\t            this.options.zoomX = zoomX;\r\n\t        if (zoomY != void 0)\r\n\t            this.options.zoomY = zoomY;\r\n\t        if (scrollX != void 0 || zoomX) {\r\n\t            options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\r\n\t            this.options.scrollXVal = options.scrollXVal;\r\n\t        }\r\n\t        if (scrollY != void 0 || zoomY) {\r\n\t            options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\r\n\t            this.options.scrollYVal = options.scrollYVal;\r\n\t        }\r\n\t        if (silent)\r\n\t            return;\r\n\t        this.ee.emit('transformationFrame', options);\r\n\t        if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\r\n\t            this.ee.emit('scrollFrame', options);\r\n\t        }\r\n\t        if (options.zoomX != void 0 || options.zoomY != void 0) {\r\n\t            this.ee.emit('zoomFrame', options);\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        // handle scroll and zoom\r\n\t        state.onChange(function (changedProps) {\r\n\t            if (changedProps.xAxis && changedProps.xAxis.range) {\r\n\t                if (changedProps.xAxis.range.scroll != void 0)\r\n\t                    _this.onScrollXHandler(changedProps);\r\n\t                if (changedProps.xAxis.range.zoom)\r\n\t                    _this.onZoomXHandler();\r\n\t            }\r\n\t            if (changedProps.yAxis && changedProps.yAxis.range) {\r\n\t                if (changedProps.yAxis.range.scroll != void 0)\r\n\t                    _this.onScrollYHandler();\r\n\t                if (changedProps.yAxis.range.zoom)\r\n\t                    _this.onZoomYHandler();\r\n\t            }\r\n\t        });\r\n\t        state.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    Screen.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.scrollXAnimation && this.scrollXAnimation.kill();\r\n\t        this.scrollYAnimation && this.scrollYAnimation.kill();\r\n\t        this.zoomXAnimation && this.zoomXAnimation.kill();\r\n\t        this.zoomYAnimation && this.zoomYAnimation.kill();\r\n\t    };\r\n\t    Screen.prototype.onScrollXHandler = function (changedProps) {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var isDragMode = state.data.cursor.dragMode;\r\n\t        var animations = state.data.animations;\r\n\t        var canAnimate = animations.enabled && !isDragMode;\r\n\t        var zoomXChanged = changedProps.xAxis.range.zoom;\r\n\t        var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\r\n\t        var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\r\n\t        var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\r\n\t        if (this.scrollXAnimation)\r\n\t            this.scrollXAnimation.pause();\r\n\t        var range = state.data.xAxis.range;\r\n\t        var targetX = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollX.x = this.options.scrollX;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollX: _this.currentScrollX.x });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\r\n\t                x: targetX, ease: ease\r\n\t            });\r\n\t            this.scrollXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollX.x = targetX;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onScrollYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.data.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        if (this.scrollYAnimation)\r\n\t            this.scrollYAnimation.pause();\r\n\t        var range = state.data.yAxis.range;\r\n\t        var targetY = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollY.y = this.options.scrollY;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollY: _this.currentScrollY.y });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\r\n\t                y: targetY, ease: animations.zoomEase\r\n\t            });\r\n\t            this.scrollYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollY.y = targetY;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomXHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.data.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.data.xAxis.range.zoom;\r\n\t        if (this.zoomXAnimation)\r\n\t            this.zoomXAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomX: _this.currentZoomX.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomX.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.data.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.data.yAxis.range.zoom;\r\n\t        if (this.zoomYAnimation)\r\n\t            this.zoomYAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomY: _this.currentZoomY.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomY.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomX;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomY;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Screen.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollX value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenX = function (x) {\r\n\t        return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollY value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenY = function (y) {\r\n\t        return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    //\r\n\t    /**\r\n\t     *  returns screen scrollX value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    // /**\r\n\t    //  *  returns screen scrollY value by screen scrollY coordinate\r\n\t    //  */\r\n\t    // getScreenYByValue(scrollYVal: number): number {\r\n\t    // \tvar {scroll, zeroVal} = this.data.yAxis.range;\r\n\t    // \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\r\n\t    // }\r\n\t    //\r\n\t    //\r\n\t    /**\r\n\t     * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Screen.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenY = function (screenY) {\r\n\t        return this.getPointOnYAxis(this.getValueByScreenY(screenY));\r\n\t    };\r\n\t    Screen.prototype.getTop = function () {\r\n\t        return this.getPointByScreenY(this.chartState.data.height);\r\n\t    };\r\n\t    Screen.prototype.getBottom = function () {\r\n\t        return this.getPointByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getLeft = function () {\r\n\t        return this.getPointByScreenX(0);\r\n\t    };\r\n\t    Screen.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.chartState.data.width);\r\n\t    };\r\n\t    Screen.prototype.getTopVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.data.height);\r\n\t    };\r\n\t    Screen.prototype.getBottomVal = function () {\r\n\t        return this.getValueByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getCenterYVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.data.height / 2);\r\n\t    };\r\n\t    return Screen;\r\n\t}());\r\n\texports.Screen = Screen;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar interfaces_1 = __webpack_require__(21);\r\n\tvar EventEmmiter_1 = __webpack_require__(13);\r\n\tvar AXIS_MARK_DEFAULT_OPTIONS = {\r\n\t    type: 'simple',\r\n\t    lineWidth: 1,\r\n\t    value: 0,\r\n\t    showValue: false,\r\n\t    stickToEdges: false,\r\n\t    lineColor: '#FFFFFF',\r\n\t    title: ''\r\n\t};\r\n\tvar AxisMarks = (function () {\r\n\t    function AxisMarks(chartState, axisType) {\r\n\t        this.items = {};\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.axisType = axisType;\r\n\t        var marks = this.items;\r\n\t        var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\r\n\t        for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\r\n\t            var options = axisMarksOptions_1[_i];\r\n\t            var axisMark = void 0;\r\n\t            options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\r\n\t            // set mark name\r\n\t            if (!options.name)\r\n\t                options.name = Utils_1.Utils.getUid().toString();\r\n\t            if (marks[options.name])\r\n\t                Utils_1.Utils.error('duplicated mark name ' + options.name);\r\n\t            // create mark instance based on type option\r\n\t            if (options.type == 'timeleft') {\r\n\t                axisMark = new AxisTimeleftMark(chartState, axisType, options);\r\n\t            }\r\n\t            else {\r\n\t                axisMark = new AxisMark(chartState, axisType, options);\r\n\t            }\r\n\t            marks[options.name] = axisMark;\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarks.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, newData);\r\n\t        });\r\n\t        this.chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    AxisMarks.prototype.onTrendChange = function (trendName, newData) {\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var startVal = newData[0].xVal;\r\n\t        var endVal = newData[newData.length - 1].xVal;\r\n\t        var marks = this.items;\r\n\t        for (var markName in marks) {\r\n\t            var mark = marks[markName];\r\n\t            var markVal = mark.options.value;\r\n\t            var markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\r\n\t            if (markWasCrossed)\r\n\t                this.ee.emit('markCrossed', trendName, newData);\r\n\t        }\r\n\t    };\r\n\t    AxisMarks.prototype.getItems = function () {\r\n\t        return this.items;\r\n\t    };\r\n\t    AxisMarks.prototype.getItem = function (markName) {\r\n\t        return this.items[markName];\r\n\t    };\r\n\t    return AxisMarks;\r\n\t}());\r\n\texports.AxisMarks = AxisMarks;\r\n\tvar AxisMark = (function () {\r\n\t    function AxisMark(chartState, axisType, options) {\r\n\t        this.renderOnTrendsChange = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.options = options;\r\n\t        this.axisType = axisType;\r\n\t        this.chartState = chartState;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMark.prototype.bindEvents = function () { };\r\n\t    AxisMark.prototype.setOptions = function (newOptions) {\r\n\t        var value = this.options.value;\r\n\t        this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\r\n\t        if (this.options.value !== value)\r\n\t            this.ee.emit('valueChange');\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisMark.prototype.getDisplayedVal = function () {\r\n\t        var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\r\n\t        return String(displayedValue !== void 0 ? displayedValue : value);\r\n\t    };\r\n\t    AxisMark.prototype.onMarkCrossed = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('markCrossed', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('markCrossed', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('valueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('valueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onDisplayedValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('onDisplayedValueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('onDisplayedValueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.typeName = 'simple';\r\n\t    return AxisMark;\r\n\t}());\r\n\texports.AxisMark = AxisMark;\r\n\tvar AxisTimeleftMark = (function (_super) {\r\n\t    __extends(AxisTimeleftMark, _super);\r\n\t    function AxisTimeleftMark() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.renderOnTrendsChange = true;\r\n\t    }\r\n\t    AxisTimeleftMark.prototype.getDisplayedVal = function () {\r\n\t        var markVal = this.options.value;\r\n\t        var maxXVal = this.chartState.data.computedData.trends.maxXVal;\r\n\t        var time = markVal - maxXVal;\r\n\t        if (time < 0)\r\n\t            time = 0;\r\n\t        return Utils_1.Utils.msToTimeString(time);\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.onTrendsChange = function () {\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisTimeleftMark.typeName = 'timeleft';\r\n\t    return AxisTimeleftMark;\r\n\t}(AxisMark));\r\n\texports.AxisTimeleftMark = AxisTimeleftMark;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t(function (AXIS_RANGE_TYPE) {\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\"; // TODO: AXIS_RANGE_TYPE.ALL\r\n\t})(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\r\n\tvar AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\r\n\t;\r\n\t(function (AXIS_TYPE) {\r\n\t    AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\r\n\t    AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\r\n\t})(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\r\n\tvar AXIS_TYPE = exports.AXIS_TYPE;\r\n\t(function (AXIS_DATA_TYPE) {\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\r\n\t})(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\r\n\tvar AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Widget_1 = __webpack_require__(15);\r\n\tvar GridWidget_1 = __webpack_require__(23);\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar interfaces_1 = __webpack_require__(21);\r\n\t/**\r\n\t * widget for drawing axis\r\n\t */\r\n\tvar AxisWidget = (function (_super) {\r\n\t    __extends(AxisWidget, _super);\r\n\t    function AxisWidget(state) {\r\n\t        var _this = this;\r\n\t        _super.call(this, state);\r\n\t        this.isDestroyed = false;\r\n\t        this.object3D = new Object3D();\r\n\t        this.axisXObject = new Object3D();\r\n\t        this.axisYObject = new Object3D();\r\n\t        this.object3D.add(this.axisXObject);\r\n\t        this.object3D.add(this.axisYObject);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        // canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\r\n\t        this.updateAxisXRequest = Utils_1.Utils.throttle(function () { return _this.updateAxis(interfaces_1.AXIS_TYPE.X); }, 1000);\r\n\t        this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\r\n\t    }\r\n\t    AxisWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        this.bindEvent(state.screen.onTransformationFrame(function (options) {\r\n\t            _this.onScrollChange(options.scrollX, options.scrollY);\r\n\t        }), state.screen.onZoomFrame(function (options) { _this.onZoomFrame(options); }), state.onDestroy(function () { return _this.onDestroy(); }), state.onResize(function () { return _this.onResize(); }));\r\n\t    };\r\n\t    AxisWidget.prototype.onDestroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.unbindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.onScrollChange = function (x, y) {\r\n\t        if (y != void 0) {\r\n\t            this.axisYObject.position.y = y;\r\n\t            this.axisXObject.position.y = y;\r\n\t        }\r\n\t        if (x != void 0) {\r\n\t            this.axisYObject.position.x = x;\r\n\t            this.updateAxisXRequest();\r\n\t        }\r\n\t    };\r\n\t    AxisWidget.prototype.onResize = function () {\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t    };\r\n\t    AxisWidget.prototype.setupAxis = function (orientation) {\r\n\t        var _this = this;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var canvasWidth = 0, canvasHeight = 0;\r\n\t        // clean meshes\r\n\t        if (isXAxis) {\r\n\t            this.axisXObject.traverse(function (obj) { return _this.axisXObject.remove(obj); });\r\n\t            canvasWidth = visibleWidth * 3;\r\n\t            canvasHeight = 50;\r\n\t        }\r\n\t        else {\r\n\t            this.axisYObject.traverse(function (obj) { return _this.axisYObject.remove(obj); });\r\n\t            canvasWidth = 50;\r\n\t            canvasHeight = visibleHeight * 3;\r\n\t        }\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.font = \"10px Arial\";\r\n\t            ctx.fillStyle = \"rgba(255,255,255,0.5)\";\r\n\t            ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisXObject.add(axisMesh);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisYObject.add(axisMesh);\r\n\t        }\r\n\t        this.updateAxis(orientation);\r\n\t    };\r\n\t    AxisWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisWidget.prototype.updateAxis = function (orientation) {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\r\n\t        var axisOptions;\r\n\t        var axisMesh;\r\n\t        var axisGridParams;\r\n\t        if (isXAxis) {\r\n\t            axisMesh = this.axisXObject.children[0];\r\n\t            axisOptions = this.chartState.data.xAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh = this.axisYObject.children[0];\r\n\t            axisOptions = this.chartState.data.yAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\r\n\t        }\r\n\t        var geometry = axisMesh.geometry;\r\n\t        var canvasWidth = geometry.parameters.width;\r\n\t        var canvasHeight = geometry.parameters.height;\r\n\t        var texture = axisMesh.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\r\n\t        }\r\n\t        // TODO: draw text and lines in different loops\r\n\t        var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\r\n\t        var startVal = axisGridParams.start - edgeOffset;\r\n\t        var endVal = axisGridParams.end + edgeOffset;\r\n\t        ctx.beginPath();\r\n\t        for (var val = startVal; val <= endVal; val += axisGridParams.step) {\r\n\t            var displayedValue = '';\r\n\t            if (isXAxis) {\r\n\t                var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\r\n\t                ctx.textAlign = \"center\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(pxVal + 0.5, canvasHeight);\r\n\t                // ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\r\n\t                if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\r\n\t                    displayedValue = AxisWidget.getDateStr(val, axisGridParams);\r\n\t                }\r\n\t                else {\r\n\t                    displayedValue = Number(val.toFixed(14)).toString();\r\n\t                }\r\n\t                ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\r\n\t            }\r\n\t            else {\r\n\t                var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\r\n\t                ctx.textAlign = \"right\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(canvasWidth, pxVal + 0.5);\r\n\t                // ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\r\n\t                displayedValue = Number(val.toFixed(14)).toString();\r\n\t                ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\r\n\t            }\r\n\t            ctx.stroke();\r\n\t        }\r\n\t        // uncomment to preview canvas borders\r\n\t        // ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t        ctx.stroke();\r\n\t        ctx.closePath();\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisWidget.prototype.onZoomFrame = function (options) {\r\n\t        if (options.zoomX) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        }\r\n\t        if (options.zoomY) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        }\r\n\t    };\r\n\t    // private temporaryHideAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar timeoutId = setTimeout(() => {\r\n\t    // \t\t\tthis.showAxis(orientation);\r\n\t    // \t}, 200);\r\n\t    //\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tclearTimeout(this.showAxisXTimeout);\r\n\t    // \t\tthis.showAxisXTimeout =\ttimeoutId;\r\n\t    // \t} else {\r\n\t    // \t\tclearTimeout(this.showAxisYTimeout);\r\n\t    // \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tthis.showAxisYTimeout = timeoutId;\r\n\t    // \t}\r\n\t    // }\r\n\t    // private showAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar material: MeshBasicMaterial;\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t} else {\r\n\t    // \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t}\r\n\t    // \tthis.updateAxis(orientation);\r\n\t    // \tTweenLite.to(material, 0.3, {opacity: 1});\r\n\t    // }\r\n\t    AxisWidget.getDateStr = function (timestamp, gridParams) {\r\n\t        var sec = 1000;\r\n\t        var min = sec * 60;\r\n\t        var hour = min * 60;\r\n\t        var day = hour * 60;\r\n\t        var step = gridParams.step;\r\n\t        var d = new Date(timestamp);\r\n\t        var tf = function (num) { return Utils_1.Utils.toFixed(num, 2); };\r\n\t        return tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\r\n\t    };\r\n\t    AxisWidget.widgetName = 'Axis';\r\n\t    return AxisWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisWidget = AxisWidget;\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Widget_1 = __webpack_require__(15);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\t/**\r\n\t * widget for drawing chart grid\r\n\t */\r\n\tvar GridWidget = (function (_super) {\r\n\t    __extends(GridWidget, _super);\r\n\t    function GridWidget(chartState) {\r\n\t        _super.call(this, chartState);\r\n\t        this.isDestroyed = false;\r\n\t        var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\r\n\t        this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\r\n\t        this.initGrid();\r\n\t        this.updateGrid();\r\n\t    }\r\n\t    GridWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        // grid is bigger then screen, so it's no need to update it on each scroll event\r\n\t        var updateGridThrottled = Utils_1.Utils.throttle(function () { return _this.updateGrid(); }, 1000);\r\n\t        this.bindEvent(this.chartState.onScroll(function () { return updateGridThrottled(); }), this.chartState.screen.onZoomFrame(function (options) {\r\n\t            updateGridThrottled();\r\n\t            _this.onZoomFrame(options);\r\n\t        }), this.chartState.onDestroy(function () {\r\n\t            _this.isDestroyed = true;\r\n\t            _this.unbindEvents();\r\n\t        }), this.chartState.onResize(function () {\r\n\t            _this.updateGrid();\r\n\t        }));\r\n\t    };\r\n\t    GridWidget.prototype.initGrid = function () {\r\n\t        var geometry = new THREE.Geometry();\r\n\t        var material = new THREE.LineBasicMaterial({ linewidth: 1, opacity: 0.1, transparent: true });\r\n\t        var xLinesCount = this.gridSizeH;\r\n\t        var yLinesCount = this.gridSizeV;\r\n\t        while (xLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        while (yLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        this.lineSegments = new LineSegments(geometry, material);\r\n\t        this.lineSegments.position.setZ(-1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t    };\r\n\t    GridWidget.prototype.updateGrid = function () {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\r\n\t        var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\r\n\t        var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\r\n\t        var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\r\n\t        var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\r\n\t        var gridScrollXVal = scrollXInSegments * axisXGrid.step;\r\n\t        var gridScrollYVal = scrollYInSegments * axisYGrid.step;\r\n\t        var startXVal = axisXGrid.start + gridScrollXVal;\r\n\t        var startYVal = axisYGrid.start + gridScrollYVal;\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var vertices = geometry.vertices;\r\n\t        var lineInd = 0;\r\n\t        for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\r\n\t            var value = startXVal + i * axisXGrid.step;\r\n\t            var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\r\n\t            var value = startYVal + i * axisYGrid.step;\r\n\t            var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\r\n\t    };\r\n\t    GridWidget.prototype.getHorizontalLineSegment = function (yVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chartState;\r\n\t        var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\r\n\t        var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\r\n\t        return [\r\n\t            new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0),\r\n\t            new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.getVerticalLineSegment = function (xVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chartState;\r\n\t        var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\r\n\t        var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\r\n\t        return [\r\n\t            new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0),\r\n\t            new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.onZoomFrame = function (options) {\r\n\t        var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        if (options.zoomX)\r\n\t            this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\r\n\t    };\r\n\t    // TODO: move this code to core\r\n\t    GridWidget.getGridParamsForAxis = function (axisOptions, axisWidth, zoom) {\r\n\t        var axisRange = axisOptions.range;\r\n\t        var from = axisRange.from; //var from = axisOptions.range.zeroVal + scroll;\r\n\t        var to = axisRange.to; //var to = from + axisWidth / (axisRange.scaleFactor * zoom);\r\n\t        var axisLength = to - from;\r\n\t        var gridStep = 0;\r\n\t        var gridStepInPixels = 0;\r\n\t        var minGridStepInPixels = axisOptions.gridMinSize;\r\n\t        var axisLengthStr = String(axisLength);\r\n\t        var axisLengthPointPosition = axisLengthStr.indexOf('.');\r\n\t        var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\r\n\t        var gridStepFound = false;\r\n\t        var digitPos = 0;\r\n\t        while (!gridStepFound) {\r\n\t            var power = intPartLength - digitPos - 1;\r\n\t            var multiplier = (Math.pow(10, power) || 1);\r\n\t            var dividers = [1, 2, 5];\r\n\t            for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\r\n\t                var nextGridStep = multiplier / dividers[dividerInd];\r\n\t                var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\r\n\t                if (nextGridStepInPixels >= minGridStepInPixels) {\r\n\t                    gridStep = nextGridStep;\r\n\t                    gridStepInPixels = nextGridStepInPixels;\r\n\t                }\r\n\t                else {\r\n\t                    gridStepFound = true;\r\n\t                    if (gridStep === 0) {\r\n\t                        gridStep = nextGridStep;\r\n\t                        gridStepInPixels = nextGridStepInPixels;\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (!gridStepFound)\r\n\t                digitPos++;\r\n\t        }\r\n\t        var gridStart = Math.floor(from / gridStep) * gridStep;\r\n\t        var gridEnd = Math.floor(to / gridStep) * gridStep;\r\n\t        return {\r\n\t            start: gridStart,\r\n\t            end: gridEnd,\r\n\t            step: gridStep,\r\n\t            stepInPx: gridStepInPixels,\r\n\t            length: gridEnd - gridStart,\r\n\t            segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\r\n\t        };\r\n\t    };\r\n\t    GridWidget.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    GridWidget.widgetName = 'Grid';\r\n\t    return GridWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.GridWidget = GridWidget;\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar PlaneBufferGeometry = THREE.PlaneBufferGeometry;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Trend_1 = __webpack_require__(17);\r\n\t/**\r\n\t * widget adds loading indicator\r\n\t * activated when animations enabled\r\n\t */\r\n\tvar TrendsLoadingWidget = (function (_super) {\r\n\t    __extends(TrendsLoadingWidget, _super);\r\n\t    function TrendsLoadingWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsLoadingWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendLoading;\r\n\t    };\r\n\t    TrendsLoadingWidget.widgetName = 'TrendsLoading';\r\n\t    return TrendsLoadingWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsLoadingWidget = TrendsLoadingWidget;\r\n\tvar TrendLoading = (function (_super) {\r\n\t    __extends(TrendLoading, _super);\r\n\t    function TrendLoading(state, trendName) {\r\n\t        _super.call(this, state, trendName);\r\n\t        this.isActive = false;\r\n\t        // add beacon\r\n\t        this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({ map: TrendLoading.createTexture(), transparent: true }));\r\n\t        this.deactivate();\r\n\t    }\r\n\t    TrendLoading.widgetIsEnabled = function (trendOptions, chartState) {\r\n\t        return trendOptions.enabled && chartState.data.animations.enabled;\r\n\t    };\r\n\t    TrendLoading.prototype.getObject3D = function () {\r\n\t        return this.mesh;\r\n\t    };\r\n\t    TrendLoading.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.onPrependRequest(function () { return _this.activate(); }));\r\n\t    };\r\n\t    TrendLoading.prototype.prependData = function () {\r\n\t        this.deactivate();\r\n\t    };\r\n\t    TrendLoading.prototype.activate = function () {\r\n\t        var mesh = this.mesh;\r\n\t        mesh.material.opacity = 1;\r\n\t        mesh.rotation.z = 0;\r\n\t        var animation = TweenLite.to(this.mesh.rotation, 0.5, { z: Math.PI * 2 });\r\n\t        animation.eventCallback('onComplete', function () {\r\n\t            animation.restart();\r\n\t        });\r\n\t        this.animation = animation;\r\n\t        this.isActive = true;\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendLoading.prototype.deactivate = function () {\r\n\t        this.animation && this.animation.kill();\r\n\t        this.mesh.material.opacity = 0;\r\n\t        this.isActive = false;\r\n\t    };\r\n\t    TrendLoading.createTexture = function () {\r\n\t        var h = 64, w = 64;\r\n\t        return Utils_1.Utils.createTexture(h, w, function (ctx) {\r\n\t            ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\r\n\t            ctx.lineWidth = 5;\r\n\t            var center = h / 2;\r\n\t            ctx.beginPath();\r\n\t            ctx.arc(center, center, 22, 0, Math.PI / 2);\r\n\t            ctx.stroke();\r\n\t            ctx.beginPath();\r\n\t            ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\r\n\t            ctx.stroke();\r\n\t            ctx.beginPath();\r\n\t            ctx.arc(center, center, 3, 0, Math.PI * 2);\r\n\t            ctx.stroke();\r\n\t        });\r\n\t    };\r\n\t    TrendLoading.prototype.onZoomFrame = function () {\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendLoading.prototype.updatePosition = function () {\r\n\t        if (!this.isActive)\r\n\t            return;\r\n\t        var trend = this.trend;\r\n\t        // set new widget position\r\n\t        var segment = trend.segments.getStartSegment();\r\n\t        var x, y;\r\n\t        if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\r\n\t            x = segment.currentAnimationState.startXVal;\r\n\t            y = segment.currentAnimationState.startYVal;\r\n\t        }\r\n\t        else {\r\n\t            x = segment.currentAnimationState.xVal - segment.maxLength;\r\n\t            y = segment.currentAnimationState.yVal;\r\n\t        }\r\n\t        var pointVector = this.chartState.screen.getPointOnChart(x, y);\r\n\t        this.mesh.position.set(pointVector.x, pointVector.y, 0);\r\n\t    };\r\n\t    return TrendLoading;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendLoading = TrendLoading;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(15);\r\n\tvar Object3D = THREE.Object3D;\r\n\t/**\r\n\t * abstract manager class for all trends widgets\r\n\t */\r\n\tvar TrendsWidget = (function (_super) {\r\n\t    __extends(TrendsWidget, _super);\r\n\t    function TrendsWidget(state) {\r\n\t        _super.call(this, state);\r\n\t        this.widgets = {};\r\n\t        this.object3D = new Object3D();\r\n\t        this.onTrendsChange();\r\n\t    }\r\n\t    TrendsWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        state.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t        state.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, changedOptions, newData);\r\n\t        });\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendsChange = function () {\r\n\t        var trendsOptions = this.chartState.data.trends;\r\n\t        var TrendWidgetClass = this.getTrendWidgetClass();\r\n\t        for (var trendName in trendsOptions) {\r\n\t            var trendOptions = trendsOptions[trendName];\r\n\t            var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\r\n\t            if (widgetCanBeEnabled && !this.widgets[trendName]) {\r\n\t                this.createTrendWidget(trendName);\r\n\t            }\r\n\t            else if (!widgetCanBeEnabled && this.widgets[trendName]) {\r\n\t                this.destroyTrendWidget(trendName);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendChange = function (trendName, changedOptions, newData) {\r\n\t        var widget = this.widgets[trendName];\r\n\t        if (!widget)\r\n\t            return;\r\n\t        widget.onTrendChange(changedOptions);\r\n\t        if (newData) {\r\n\t            var data = this.chartState.getTrend(trendName).getData();\r\n\t            var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t            isAppend ? widget.appendData(newData) : widget.prependData(newData);\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendsWidget.prototype.createTrendWidget = function (trendName) {\r\n\t        var WidgetConstructor = this.getTrendWidgetClass();\r\n\t        var widget = new WidgetConstructor(this.chartState, trendName);\r\n\t        this.widgets[trendName] = widget;\r\n\t        var widgetObject = widget.getObject3D();\r\n\t        widgetObject.name = trendName;\r\n\t        this.object3D.add(widget.getObject3D());\r\n\t    };\r\n\t    TrendsWidget.prototype.destroyTrendWidget = function (trendName) {\r\n\t        this.widgets[trendName].onDestroy();\r\n\t        delete this.widgets[trendName];\r\n\t        var widgetObject = this.object3D.getObjectByName(trendName);\r\n\t        this.object3D.remove(widgetObject);\r\n\t    };\r\n\t    return TrendsWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.TrendsWidget = TrendsWidget;\r\n\t/**\r\n\t * based class for all trends widgets\r\n\t */\r\n\tvar TrendWidget = (function () {\r\n\t    function TrendWidget(chartState, trendName) {\r\n\t        this.chartState = chartState;\r\n\t        this.trendName = trendName;\r\n\t        this.unsubscribers = [];\r\n\t        this.trend = chartState.trendsManager.getTrend(trendName);\r\n\t        this.chartState = chartState;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendWidget.widgetIsEnabled = function (trendOptions, chartState) {\r\n\t        return trendOptions.enabled;\r\n\t    };\r\n\t    TrendWidget.prototype.appendData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.prependData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.onTrendChange = function (changedOptions) { };\r\n\t    TrendWidget.prototype.onDestroy = function () {\r\n\t        for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\r\n\t            var unsubscriber = _a[_i];\r\n\t            unsubscriber();\r\n\t        }\r\n\t    };\r\n\t    TrendWidget.prototype.onSegmentsAnimate = function (segments) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoomFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onTransformationFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoom = function () {\r\n\t    };\r\n\t    TrendWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.trend.segments.onAnimationFrame(function (trendPoints) { return _this.onSegmentsAnimate(trendPoints); }));\r\n\t        this.bindEvent(this.chartState.screen.onTransformationFrame(function (options) { return _this.onTransformationFrame(options); }));\r\n\t        this.bindEvent(this.chartState.screen.onZoomFrame(function (options) { return _this.onZoomFrame(options); }));\r\n\t        this.bindEvent(this.chartState.onZoom(function () { return _this.onZoom(); }));\r\n\t    };\r\n\t    ;\r\n\t    TrendWidget.prototype.bindEvent = function (unsubscriber) {\r\n\t        this.unsubscribers.push(unsubscriber);\r\n\t    };\r\n\t    return TrendWidget;\r\n\t}());\r\n\texports.TrendWidget = TrendWidget;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(15);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar Line = THREE.Line;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar interfaces_1 = __webpack_require__(21);\r\n\t/**\r\n\t * widget for shows marks on axis\r\n\t */\r\n\tvar AxisMarksWidget = (function (_super) {\r\n\t    __extends(AxisMarksWidget, _super);\r\n\t    function AxisMarksWidget(chartState) {\r\n\t        _super.call(this, chartState);\r\n\t        this.axisMarksWidgets = [];\r\n\t        this.object3D = new Object3D();\r\n\t        var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\r\n\t        var items = xAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t        items = yAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t    }\r\n\t    AxisMarksWidget.prototype.createAxisMark = function (axisMark) {\r\n\t        var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\r\n\t        this.axisMarksWidgets.push(axisMarkWidget);\r\n\t        this.object3D.add(axisMarkWidget.getObject3D());\r\n\t    };\r\n\t    AxisMarksWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.chartState.screen.onTransformationFrame(function () { return _this.updateMarksPositions(); }), this.chartState.onResize(function () { return _this.updateMarksPositions(); }));\r\n\t    };\r\n\t    AxisMarksWidget.prototype.updateMarksPositions = function () {\r\n\t        for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\r\n\t            var widget = _a[_i];\r\n\t            widget.updatePosition();\r\n\t        }\r\n\t    };\r\n\t    AxisMarksWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarksWidget.widgetName = 'AxisMarks';\r\n\t    return AxisMarksWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisMarksWidget = AxisMarksWidget;\r\n\tvar DEFAULT_INDICATOR_RENDER_FUNCTION = function (axisMarkWidget, ctx) {\r\n\t    var axisMark = axisMarkWidget.axisMark;\r\n\t    ctx.fillStyle = axisMark.options.lineColor;\r\n\t    ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\r\n\t    var xCoord = 15;\r\n\t    if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\r\n\t        ctx.textAlign = 'end';\r\n\t        xCoord = axisMarkWidget.indicatorWidth;\r\n\t    }\r\n\t    ctx.fillText(axisMark.options.title, xCoord, 20);\r\n\t    if (!axisMark.options.showValue)\r\n\t        return;\r\n\t    ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\r\n\t    ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\r\n\t};\r\n\tvar INDICATOR_POS_Z = 0.1;\r\n\tvar AxisMarkWidget = (function () {\r\n\t    function AxisMarkWidget(chartState, axisMark) {\r\n\t        this.indicatorWidth = 128;\r\n\t        this.indicatorHeight = 64;\r\n\t        this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\r\n\t        this.chartState = chartState;\r\n\t        this.axisMark = axisMark;\r\n\t        this.axisType = axisMark.axisType;\r\n\t        this.frameValue = axisMark.options.value;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.position.setZ(-0.1);\r\n\t        this.line = this.createLine();\r\n\t        this.object3D.add(this.line);\r\n\t        this.indicator = this.createIndicator();\r\n\t        this.object3D.add(this.indicator);\r\n\t        this.renderIndicator();\r\n\t        this.updatePosition();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarkWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createLine = function () {\r\n\t        var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\r\n\t        var lineGeometry = new Geometry();\r\n\t        lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n\t        return new Line(lineGeometry, new LineBasicMaterial({ color: Utils_1.Utils.getHexColor(lineColor), linewidth: lineWidth }));\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createIndicator = function () {\r\n\t        var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.font = \"10px Arial\";\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        return new Mesh(new THREE.PlaneGeometry(width, height), material);\r\n\t    };\r\n\t    AxisMarkWidget.prototype.renderIndicator = function () {\r\n\t        var texture = this.indicator.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.axisMark.onDisplayedValueChange(function () { return _this.renderIndicator(); });\r\n\t        this.axisMark.onValueChange(function () { return _this.onValueChangeHandler(); });\r\n\t    };\r\n\t    AxisMarkWidget.prototype.onValueChangeHandler = function () {\r\n\t        var _this = this;\r\n\t        // move mark to new position with animation\r\n\t        if (this.moveAnimation)\r\n\t            this.moveAnimation.kill();\r\n\t        var animations = this.chartState.data.animations;\r\n\t        var targetValue = this.axisMark.options.value;\r\n\t        var cb = function () {\r\n\t            _this.updatePosition();\r\n\t        };\r\n\t        if (animations.enabled) {\r\n\t            this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, { frameValue: targetValue, ease: animations.trendChangeEase });\r\n\t            this.moveAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.frameValue = targetValue;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    AxisMarkWidget.prototype.updatePosition = function () {\r\n\t        var chartState = this.chartState;\r\n\t        var screen = chartState.screen;\r\n\t        var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\r\n\t        var lineGeometry = this.line.geometry;\r\n\t        var hasStickMode = this.axisMark.options.stickToEdges;\r\n\t        var _a = this.chartState.data, width = _a.width, height = _a.height;\r\n\t        if (isXAxis) {\r\n\t            // TODO: make stickToEdges mode for AXIS_TYPE.X \r\n\t            this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\r\n\t            this.object3D.position.y = screen.getBottom();\r\n\t            lineGeometry.vertices[1].setY(height);\r\n\t            this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\r\n\t        }\r\n\t        else {\r\n\t            var val = this.frameValue;\r\n\t            var bottomVal = screen.getBottomVal();\r\n\t            var topVal = screen.getTopVal();\r\n\t            var needToStickOnTop = hasStickMode && val > topVal;\r\n\t            var needToStickOnBottom = hasStickMode && val < bottomVal;\r\n\t            var centerYVal = screen.getCenterYVal();\r\n\t            this.object3D.position.x = screen.getLeft();\r\n\t            if (needToStickOnTop) {\r\n\t                this.object3D.position.y = screen.getTop();\r\n\t            }\r\n\t            else if (needToStickOnBottom) {\r\n\t                this.object3D.position.y = screen.getBottom();\r\n\t            }\r\n\t            else {\r\n\t                this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\r\n\t            }\r\n\t            lineGeometry.vertices[1].setX(width);\r\n\t            var indicatorPosY = val > centerYVal ? -35 : 10;\r\n\t            this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\r\n\t        }\r\n\t        lineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.typeName = 'simple';\r\n\t    return AxisMarkWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(15);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Vector3 = THREE.Vector3;\r\n\t/**\r\n\t * widget for drawing chart grid\r\n\t */\r\n\tvar BorderWidget = (function (_super) {\r\n\t    __extends(BorderWidget, _super);\r\n\t    function BorderWidget(chartState) {\r\n\t        _super.call(this, chartState);\r\n\t        var _a = chartState.data, width = _a.width, height = _a.height;\r\n\t        var geometry = new THREE.Geometry();\r\n\t        var material = new THREE.LineBasicMaterial({ linewidth: 1, opacity: 0.0, transparent: true });\r\n\t        geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\r\n\t        this.lineSegments = new LineSegments(geometry, material);\r\n\t    }\r\n\t    BorderWidget.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    BorderWidget.widgetName = 'Border';\r\n\t    return BorderWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.BorderWidget = BorderWidget;\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Color = THREE.Color;\r\n\tvar CANVAS_WIDTH = 128;\r\n\tvar CANVAS_HEIGHT = 64;\r\n\tvar OFFSET_X = 15;\r\n\tvar TrendsIndicatorWidget = (function (_super) {\r\n\t    __extends(TrendsIndicatorWidget, _super);\r\n\t    function TrendsIndicatorWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsIndicatorWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendIndicator;\r\n\t    };\r\n\t    TrendsIndicatorWidget.widgetName = 'TrendsIndicator';\r\n\t    return TrendsIndicatorWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsIndicatorWidget = TrendsIndicatorWidget;\r\n\tvar TrendIndicator = (function (_super) {\r\n\t    __extends(TrendIndicator, _super);\r\n\t    function TrendIndicator(state, trendName) {\r\n\t        _super.call(this, state, trendName);\r\n\t        this.initObject();\r\n\t        this.onTrendChange();\r\n\t    }\r\n\t    TrendIndicator.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.hasIndicator;\r\n\t    };\r\n\t    TrendIndicator.prototype.getObject3D = function () {\r\n\t        return this.mesh;\r\n\t    };\r\n\t    TrendIndicator.prototype.onTrendChange = function () {\r\n\t        // update canvas value\r\n\t        var trendData = this.trend.getData();\r\n\t        var lastItem = trendData[trendData.length - 1];\r\n\t        var texture = this.mesh.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n\t        // uncomment to preview indicator rect\r\n\t        // ctx.fillStyle = \"rgba(255,255,255,0.5)\";\r\n\t        // ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n\t        ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    TrendIndicator.prototype.initObject = function () {\r\n\t        var color = new Color(this.trend.getOptions().lineColor);\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.font = \"15px Arial\";\r\n\t            ctx.fillStyle = color.getStyle();\r\n\t            ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\r\n\t    };\r\n\t    TrendIndicator.prototype.onTransformationFrame = function () {\r\n\t        // set new widget position\r\n\t        this.segment = this.trend.segments.getEndSegment();\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendIndicator.prototype.onSegmentsAnimate = function (segments) {\r\n\t        // set new widget position\r\n\t        this.segment = segments.getEndSegment();\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendIndicator.prototype.updatePosition = function () {\r\n\t        var state = this.chartState;\r\n\t        var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\r\n\t        var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\r\n\t        var screenWidth = state.data.width;\r\n\t        var x = endPointVector.x + OFFSET_X;\r\n\t        var y = endPointVector.y;\r\n\t        var screenX = state.screen.getScreenXByPoint(endPointVector.x);\r\n\t        var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\r\n\t        if (indicatorIsOutOfScreen) {\r\n\t            if (screenX < 0)\r\n\t                x = state.screen.getPointByScreenX(0) + 20;\r\n\t            if (screenX > screenWidth)\r\n\t                x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\r\n\t            y -= 25;\r\n\t        }\r\n\t        this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, 0.1);\r\n\t    };\r\n\t    return TrendIndicator;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendIndicator = TrendIndicator;\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Trend_1 = __webpack_require__(17);\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar MAX_DISPLAYED_SEGMENTS = 2000;\r\n\t/**\r\n\t * widget for drawing trends lines\r\n\t */\r\n\tvar TrendsLineWidget = (function (_super) {\r\n\t    __extends(TrendsLineWidget, _super);\r\n\t    function TrendsLineWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsLineWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendLine;\r\n\t    };\r\n\t    TrendsLineWidget.widgetName = \"TrendsLine\";\r\n\t    return TrendsLineWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsLineWidget = TrendsLineWidget;\r\n\tvar TrendLine = (function (_super) {\r\n\t    __extends(TrendLine, _super);\r\n\t    function TrendLine(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        // contains indexes of free segments\r\n\t        this.freeSegmentsInds = [];\r\n\t        // contains segments to display\r\n\t        this.displayedSegments = {};\r\n\t        var options = this.trend.getOptions();\r\n\t        this.material = new LineBasicMaterial({ color: options.lineColor, linewidth: options.lineWidth });\r\n\t        this.initLine();\r\n\t    }\r\n\t    TrendLine.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\r\n\t    };\r\n\t    TrendLine.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    TrendLine.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segments.onRebuild(function () {\r\n\t            _this.destroySegments();\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function () {\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendLine.prototype.initLine = function () {\r\n\t        var geometry = new Geometry();\r\n\t        var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.scaleXFactor = scaleXFactor;\r\n\t        this.scaleYFactor = scaleYFactor;\r\n\t        this.lineSegments = new LineSegments(geometry, this.material);\r\n\t        this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t        for (var i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t            this.freeSegmentsInds.push(i);\r\n\t        }\r\n\t        this.vertices = geometry.vertices;\r\n\t        this.setupSegments();\r\n\t    };\r\n\t    TrendLine.prototype.setupSegments = function () {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.displayedSegments) {\r\n\t            var lineSegment = this.displayedSegments[segmentId];\r\n\t            var segment_1 = this.trend.segments.segments[lineSegment.segmentId];\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroySegment(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupSegment(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.setupSegment = function (segmentId, segmentState) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        if (!lineSegment) {\r\n\t            if (this.freeSegmentsInds.length == 0)\r\n\t                Utils_1.Utils.error('Max allocated segments reached');\r\n\t            var ind = this.freeSegmentsInds.pop();\r\n\t            lineSegment = this.displayedSegments[segmentId] = { segmentId: segmentId, ind: ind };\r\n\t        }\r\n\t        var segmentInd = lineSegment.ind;\r\n\t        var lineStartVertex = this.vertices[segmentInd * 2];\r\n\t        var lineEndVertex = this.vertices[segmentInd * 2 + 1];\r\n\t        lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\r\n\t        lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\r\n\t    };\r\n\t    TrendLine.prototype.destroySegments = function () {\r\n\t        for (var segmentId in this.displayedSegments)\r\n\t            this.destroySegment(Number(segmentId));\r\n\t    };\r\n\t    TrendLine.prototype.destroySegment = function (segmentId) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        var lineStartVertex = this.vertices[lineSegment.ind * 2];\r\n\t        var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\r\n\t        lineStartVertex.set(0, 0, 0);\r\n\t        lineEndVertex.set(0, 0, 0);\r\n\t        delete this.displayedSegments[segmentId];\r\n\t        this.freeSegmentsInds.push(lineSegment.ind);\r\n\t    };\r\n\t    TrendLine.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.lineSegments.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(this.scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(this.scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendLine.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.displayedSegments[segmentId])\r\n\t                continue;\r\n\t            this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chartState.data.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chartState.data.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendLine;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendLine = TrendLine;\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Line = THREE.Line;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar PlaneGeometry = THREE.PlaneGeometry;\r\n\tvar Trend_1 = __webpack_require__(17);\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar RISE_COLOR = 0x2CAC40;\r\n\tvar FALL_COLOR = 0xEE5533;\r\n\tvar MARGIN_PERCENT = 0.3;\r\n\tvar MAX_CANDLES = 100;\r\n\t/**\r\n\t * widget for drawing trends candles\r\n\t */\r\n\tvar TrendsCandlesWidget = (function (_super) {\r\n\t    __extends(TrendsCandlesWidget, _super);\r\n\t    function TrendsCandlesWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsCandlesWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendCandlesWidget;\r\n\t    };\r\n\t    TrendsCandlesWidget.widgetName = \"TrendsCandles\";\r\n\t    return TrendsCandlesWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsCandlesWidget = TrendsCandlesWidget;\r\n\tvar TrendCandlesWidget = (function (_super) {\r\n\t    __extends(TrendCandlesWidget, _super);\r\n\t    function TrendCandlesWidget(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        // contains indexes of free candles\r\n\t        this.freeCandlesInds = [];\r\n\t        this.candlesPool = [];\r\n\t        this.candles = {};\r\n\t        this.initObject();\r\n\t    }\r\n\t    TrendCandlesWidget.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segments.onRebuild(function () {\r\n\t            _this.destroyCandles();\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function () {\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.initObject = function () {\r\n\t        var stateData = this.chartState.data;\r\n\t        var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.scaleXFactor = scaleXFactor;\r\n\t        this.scaleYFactor = scaleYFactor;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.object3D.frustumCulled = false;\r\n\t        for (var i = 0; i < MAX_CANDLES; i++)\r\n\t            this.freeCandlesInds.push(i);\r\n\t        this.setupCandles();\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.setupCandles = function () {\r\n\t        // remove invisible\r\n\t        var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.candles) {\r\n\t            var segment_1 = this.candles[segmentId].segment;\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroyCandle(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupCandle(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandles = function () {\r\n\t        for (var segmentId in this.candles)\r\n\t            this.destroyCandle(Number(segmentId));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandle = function (segmentId) {\r\n\t        var candle = this.candles[segmentId];\r\n\t        this.object3D.remove(candle.getObject3D());\r\n\t        delete this.candles[segmentId];\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.object3D.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(this.scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(this.scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.candles[segmentId])\r\n\t                continue;\r\n\t            var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\r\n\t            this.setupCandle(segmentId, segmentState);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * create or modify candle\r\n\t     */\r\n\t    TrendCandlesWidget.prototype.setupCandle = function (candleId, segmentState) {\r\n\t        var candleInd = candleId % MAX_CANDLES;\r\n\t        // get candle from candlesPool to avoid creating new Objects by performance reasons\r\n\t        var candle = this.candlesPool[candleInd];\r\n\t        if (!candle) {\r\n\t            candle = this.candlesPool[candleInd] = new CandleWidget();\r\n\t        }\r\n\t        if (!this.candles[candleId]) {\r\n\t            this.candles[candleId] = candle;\r\n\t            this.object3D.add(candle.getObject3D());\r\n\t        }\r\n\t        candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\r\n\t        candle.setSegment(segmentState);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chartState.data.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chartState.data.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendCandlesWidget;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendCandlesWidget = TrendCandlesWidget;\r\n\tvar CandleWidget = (function () {\r\n\t    function CandleWidget() {\r\n\t        this.initObject();\r\n\t    }\r\n\t    CandleWidget.prototype.getObject3D = function () {\r\n\t        return this.rect;\r\n\t    };\r\n\t    CandleWidget.prototype.setSegment = function (segment) {\r\n\t        this.segment = segment;\r\n\t        var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\r\n\t        // update rect\r\n\t        var geometry = this.rect.geometry;\r\n\t        var material = this.rect.material;\r\n\t        var width = segment.endXVal - segment.startXVal;\r\n\t        width -= width * MARGIN_PERCENT;\r\n\t        var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\r\n\t        var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\r\n\t        leftTop.set(-width / 2, height / 2, 0);\r\n\t        rightTop.set(width / 2, height / 2, 0);\r\n\t        leftBottom.set(-width / 2, -height / 2, 0);\r\n\t        rightBottom.set(width / 2, -height / 2, 0);\r\n\t        // prevent to draw bars with height < 1px\r\n\t        if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\r\n\t            leftBottom.setY(leftBottom.y + 1);\r\n\t            rightBottom.setY(rightBottom.y + 1);\r\n\t        }\r\n\t        material.color.set(color);\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        // update lines\r\n\t        var vLineGeometry = this.vLine.geometry;\r\n\t        var vLineMaterial = this.vLine.material;\r\n\t        var lineTop = segment.maxYVal - segment.yVal;\r\n\t        var lineBottom = segment.minYVal - segment.yVal;\r\n\t        vLineGeometry.vertices[0].set(0, lineTop, 0);\r\n\t        vLineGeometry.vertices[1].set(0, lineBottom, 0);\r\n\t        vLineMaterial.color.set(color);\r\n\t        vLineGeometry.verticesNeedUpdate = true;\r\n\t        var hLineGeometry = this.hLine.geometry;\r\n\t        var hLineMaterial = this.hLine.material;\r\n\t        var lineLeft = (-width) / 2;\r\n\t        var lineRight = width / 2;\r\n\t        hLineGeometry.vertices[0].set(lineLeft, 0, 0);\r\n\t        hLineGeometry.vertices[1].set(lineRight, 0, 0);\r\n\t        hLineMaterial.color.set(color);\r\n\t        hLineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    CandleWidget.prototype.initObject = function () {\r\n\t        this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\r\n\t        var vLineGeometry = new Geometry();\r\n\t        var hLineGeometry = new Geometry();\r\n\t        vLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        hLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        this.vLine = new Line(vLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.hLine = new Line(hLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.rect.add(this.vLine);\r\n\t        this.rect.add(this.hLine);\r\n\t    };\r\n\t    return CandleWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar PlaneBufferGeometry = THREE.PlaneBufferGeometry;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Trend_1 = __webpack_require__(17);\r\n\t/**\r\n\t * widget adds blinking beacon on trends end\r\n\t * activated when trend.hasBeacon = true\r\n\t */\r\n\tvar TrendsBeaconWidget = (function (_super) {\r\n\t    __extends(TrendsBeaconWidget, _super);\r\n\t    function TrendsBeaconWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsBeaconWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendBeacon;\r\n\t    };\r\n\t    TrendsBeaconWidget.widgetName = 'TrendsBeacon';\r\n\t    return TrendsBeaconWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsBeaconWidget = TrendsBeaconWidget;\r\n\tvar TrendBeacon = (function (_super) {\r\n\t    __extends(TrendBeacon, _super);\r\n\t    function TrendBeacon(state, trendName) {\r\n\t        _super.call(this, state, trendName);\r\n\t        this.initObject();\r\n\t        if (state.data.animations.enabled) {\r\n\t            this.animate();\r\n\t        }\r\n\t        this.updatePosition();\r\n\t    }\r\n\t    TrendBeacon.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\r\n\t    };\r\n\t    TrendBeacon.prototype.getObject3D = function () {\r\n\t        return this.mesh;\r\n\t    };\r\n\t    TrendBeacon.prototype.onTrendChange = function () {\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendBeacon.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.chartState.onScroll(function () { return _this.updatePosition(); }));\r\n\t        this.bindEvent(this.chartState.onChange(function (changedProps) { return _this.onStateChange(changedProps); }));\r\n\t        this.bindEvent(this.chartState.onDestroy(function () { return _this.stopAnimation(); }));\r\n\t    };\r\n\t    TrendBeacon.prototype.initObject = function () {\r\n\t        // add beacon\r\n\t        var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({ map: TrendBeacon.createTexture(), transparent: true }));\r\n\t        light.scale.set(0.2, 0.2, 1);\r\n\t        // add dot\r\n\t        light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({ map: TrendBeacon.createTexture() })));\r\n\t        this.segment = this.trend.segments.getEndSegment();\r\n\t    };\r\n\t    TrendBeacon.prototype.animate = function () {\r\n\t        var _this = this;\r\n\t        this.animated = true;\r\n\t        var object = this.mesh;\r\n\t        var animationObject = {\r\n\t            scale: object.scale.x,\r\n\t            opacity: object.material.opacity\r\n\t        };\r\n\t        this.mesh.scale.set(0.1, 0.1, 1);\r\n\t        setTimeout(function () {\r\n\t            var animation = _this.animation = TweenLite.to(animationObject, 1, { scale: 1, opacity: 0 });\r\n\t            animation.eventCallback('onUpdate', function () {\r\n\t                object.scale.set(animationObject.scale, animationObject.scale, 1);\r\n\t                object.material.opacity = animationObject.opacity;\r\n\t            }).eventCallback('onComplete', function () {\r\n\t                _this.animation && animation.restart();\r\n\t            });\r\n\t        }, 500);\r\n\t    };\r\n\t    TrendBeacon.prototype.stopAnimation = function () {\r\n\t        this.animated = false;\r\n\t        this.animation && this.animation.kill();\r\n\t        this.animation = null;\r\n\t    };\r\n\t    TrendBeacon.createTexture = function () {\r\n\t        var h = 32, w = 32;\r\n\t        return Utils_1.Utils.createTexture(h, w, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\r\n\t            ctx.fillStyle = 'white';\r\n\t            ctx.fill();\r\n\t        });\r\n\t    };\r\n\t    TrendBeacon.prototype.onTransformationFrame = function () {\r\n\t        this.segment = this.trend.segments.getEndSegment();\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendBeacon.prototype.onSegmentsAnimate = function (trendsSegments) {\r\n\t        this.segment = trendsSegments.getEndSegment();\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendBeacon.prototype.onStateChange = function (changedProps) {\r\n\t        if (!changedProps.animations)\r\n\t            return;\r\n\t        if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated)\r\n\t            return;\r\n\t        if (changedProps.animations.enabled) {\r\n\t            this.animate();\r\n\t        }\r\n\t        else {\r\n\t            this.stopAnimation();\r\n\t        }\r\n\t    };\r\n\t    TrendBeacon.prototype.updatePosition = function () {\r\n\t        var state = this.chartState;\r\n\t        var xVal, yVal;\r\n\t        var currentAnimationState = this.segment.currentAnimationState;\r\n\t        if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\r\n\t            xVal = currentAnimationState.endXVal;\r\n\t            yVal = currentAnimationState.endYVal;\r\n\t        }\r\n\t        else {\r\n\t            xVal = currentAnimationState.xVal;\r\n\t            yVal = currentAnimationState.endYVal;\r\n\t        }\r\n\t        var endPointVector = state.screen.getPointOnChart(xVal, yVal);\r\n\t        var screenWidth = state.data.width;\r\n\t        var x = endPointVector.x;\r\n\t        var screenX = state.screen.getScreenXByPoint(endPointVector.x);\r\n\t        if (screenX < 0)\r\n\t            x = state.screen.getPointByScreenX(0);\r\n\t        if (screenX > screenWidth)\r\n\t            x = state.screen.getPointByScreenX(screenWidth);\r\n\t        this.mesh.position.set(x, endPointVector.y, 0.1);\r\n\t    };\r\n\t    return TrendBeacon;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendBeacon = TrendBeacon;\r\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(3));\r\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(14);\r\n\tvar EventEmmiter_1 = __webpack_require__(13);\r\n\texports.DEFAULT_CONFIG = {\r\n\t    installPluginWidgets: true\r\n\t};\r\n\t/**\r\n\t * base class for all plugins\r\n\t * NAME is mandatory\r\n\t */\r\n\tvar ChartPlugin = (function () {\r\n\t    function ChartPlugin(options, config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        this.unsubscribers = [];\r\n\t        this.initialState = options;\r\n\t        this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\r\n\t        this.name = this.constructor.NAME;\r\n\t        if (!this.name)\r\n\t            Utils_1.Utils.error('Unnamed plugin detected');\r\n\t    }\r\n\t    ChartPlugin.prototype.setupChartState = function (chartState) {\r\n\t        var _this = this;\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvent(this.chartState.onInitialStateApplied(function (initialState) { return _this.onInitialStateAppliedHandler(initialState); }), this.chartState.onReady(function () { return _this.onChartReadyHandler(); }), this.chartState.onDestroy(function () { return _this.onDestroyHandler(); }), this.chartState.onPluginsStateChange(function (changedPluginsStates) { return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]); }));\r\n\t    };\r\n\t    ChartPlugin.prototype.getOptions = function () {\r\n\t        return this.chartState.data.pluginsState[this.name];\r\n\t    };\r\n\t    ChartPlugin.prototype.onInitialStateAppliedHandler = function (initialState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onChartReadyHandler = function () {\r\n\t    };\r\n\t    ChartPlugin.prototype.onStateChanged = function (changedState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t    };\r\n\t    ChartPlugin.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unsubscribers = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unsubscribers.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unsubscribers.push.apply(unsubscribers, (args));\r\n\t        }\r\n\t        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartPlugin.prototype.unbindEvents = function () {\r\n\t        this.unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); });\r\n\t        this.unsubscribers.length = 0;\r\n\t    };\r\n\t    ChartPlugin.NAME = '';\r\n\t    ChartPlugin.pluginWidgets = [];\r\n\t    return ChartPlugin;\r\n\t}());\r\n\texports.ChartPlugin = ChartPlugin;\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ThreeChart.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 45480a954172205a8eed\n **/","export * from './src/index';\n\n\n/** WEBPACK FOOTER **\n ** ./index.ts\n **/","export * from './Chart';\nexport * from './interfaces';\nexport * from './AxisMarks';\nexport * from './Screen';\nexport * from './State';\nexport * from './Trend';\nexport * from './TrendSegments';\nexport * from './TrendsManager';\nexport * from './Utils';\nexport * from './Widget';\nexport * from './Plugin';\nexport * from './widgets/TrendsWidget';\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.ts\n **/","// deps must be always on top\nimport { ChartPlugin } from './Plugin';\nrequire('./deps/deps');\n\nimport { Trend } from \"./Trend\";\nimport Vector3 = THREE.Vector3;\nimport PerspectiveCamera = THREE.PerspectiveCamera;\nimport Renderer = THREE.Renderer;\nimport Scene = THREE.Scene;\nimport WebGLRenderer = THREE.WebGLRenderer;\nimport Object3D = THREE.Object3D;\nimport { ChartState, IChartState } from \"./State\";\nimport { ChartWidget, IChartWidgetConstructor } from \"./Widget\";\nimport { Utils } from \"./Utils\";\nimport { IScreenTransformOptions } from \"./Screen\";\nimport { AxisWidget } from \"./widgets/AxisWidget\";\nimport { GridWidget } from \"./widgets/GridWidget\";\nimport { TrendsGradientWidget } from \"./widgets/TrendsGradientWidget\";\nimport { TrendsLoadingWidget } from \"./widgets/TrendsLoadingWidget\";\nimport { AxisMarksWidget } from \"./widgets/AxisMarksWidget\";\nimport { BorderWidget } from \"./widgets/BorderWidget\";\nimport { TrendsIndicatorWidget } from \"./widgets/TrendsIndicatorWidget\";\nimport { TrendsLineWidget } from \"./widgets/TrendsLineWidget\";\nimport { TrendsCandlesWidget } from './widgets/TrendsCandleWidget';\nimport { TrendsBeaconWidget } from \"./widgets/TrendsBeaconWidget\";\nimport { ResizeSensor, ResizeSensorType } from './deps';\n\n\nexport const MAX_DATA_LENGTH = 2692000;\n\nexport class Chart {\n\tstate: ChartState;\n\tisStopped: boolean;\n\tisDestroyed: boolean;\n\tprivate $container: Element;\n\tprivate $el: HTMLElement;\n\tprivate renderer: Renderer;\n\tprivate scene: Scene;\n\tprivate camera: PerspectiveCamera;\n\tprivate cameraInitialPosition: Vector3;\n\tprivate widgets: Array<ChartWidget> = [];\n\tprivate stats: Stats;\n\tprivate zoomThrottled: Function;\n\tprivate unsubscribers: Function[];\n\tprivate resizeSensor: ResizeSensorType;\n\n\tstatic devicePixelRatio = window.devicePixelRatio;\n\tstatic installedWidgets: {[name: string]: typeof ChartWidget} = {};\n\tstatic renderers: {[rendererName: string]: Renderer} = {\n\t\tCanvasRenderer: (THREE as any).CanvasRenderer,\n\t\tWebGLRenderer: THREE.WebGLRenderer\n\t};\n\n\tconstructor(state: IChartState, $container: Element, plugins: ChartPlugin[] = []) {\n\n\t\tif (!THREE || !THREE.REVISION) Utils.error('three.js not found');\n\n\t\tif (!$container) {\n\t\t\tUtils.error('$el must be set');\n\t\t}\n\t\t// calculate chart size\n\t\tlet style = getComputedStyle($container);\n\t\tstate.width = parseInt(style.width);\n\t\tstate.height = parseInt(style.height);\n\n\t\tthis.state = new ChartState(state, Chart.installedWidgets, plugins);\n\t\tthis.zoomThrottled = Utils.throttle((zoomValue: number, origin: number) => this.zoom(zoomValue, origin), 200);\n\t\tthis.$container = $container;\n\t\tthis.init($container);\n\t};\n\n\tstatic installWidget<WidgetClass extends typeof ChartWidget>(Widget: WidgetClass) {\n\t\tif (!Widget.widgetName) {\n\t\t\tUtils.error('unnamed widget');\n\t\t}\n\t\tthis.installedWidgets[Widget.widgetName] = Widget;\n\t}\n\n\tprivate init($container: Element) {\n\t\tvar state = this.state;\n\t\tvar {width: w, height: h, showStats, autoRender} = state.data;\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.isStopped = !autoRender.enabled;\n\n\t\tvar renderer = this.renderer = new (Chart.renderers[this.state.data.renderer] as any)({\n\t\t\tantialias: true,\n\t\t\talpha: true\n\t\t});\n\t\trenderer.setPixelRatio(Chart.devicePixelRatio);\n\t\trenderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n\t\trenderer.setSize(w, h);\n\t\t$container.appendChild(renderer.domElement);\n\t\tthis.$el = renderer.domElement;\n\t\tthis.$el.style.display = 'block';\n\n\t\tif (showStats) {\n\t\t\tthis.stats = new Stats();\n\t\t\t$container.appendChild(this.stats.domElement);\n\t\t}\n\n\t\tthis.setupCamera();\n\n\t\t// init widgets\n\t\tlet widgetsClasses = this.state.widgetsClasses;\n\t\tfor (let widgetName in widgetsClasses) {\n\t\t\tlet widgetOptions = this.state.data.widgets[widgetName];\n\t\t\tif (!widgetOptions.enabled) continue;\n\t\t\tlet WidgetConstructor = widgetsClasses[widgetName] as IChartWidgetConstructor;\n\t\t\tlet widget = new WidgetConstructor(this.state);\n\t\t\tthis.scene.add(widget.getObject3D());\n\t\t\tthis.widgets.push(widget);\n\t\t}\n\n\t\tthis.bindEvents();\n\t\tthis.renderLoop();\n\t}\n\n\tprivate renderLoop() {\n\t\tif (this.isDestroyed) return;\n\t\tthis.stats && this.stats.begin();\n\t\tthis.render();\n\t\tif (this.isStopped) return;\n\t\tvar fpsLimit = this.state.data.autoRender.fps;\n\n\t\tif (fpsLimit) {\n\t\t\tlet delay = 1000 / fpsLimit;\n\t\t\tsetTimeout(() => requestAnimationFrame(() => this.renderLoop()), delay);\n\t\t} else {\n\t\t\trequestAnimationFrame(() => this.renderLoop());\n\t\t}\n\t\tthis.stats && this.stats.end();\n\t}\n\n\trender() {\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n\n\tstop() {\n\t\tthis.isStopped = true;\n\t}\n\n\trun() {\n\t\tthis.isStopped = false;\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * call to destroy chart an init garbage collection\n\t */\n\tdestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.stop();\n\t\tthis.state.destroy();\n\t\tthis.unbindEvents();\n\t\t// WARNING! undocumented method for free webgl context\n\t\ttry {\n\t\t\t(this.renderer as any).forceContextLoss();\n\t\t} catch (wtf) {\n\t\t\t// sometimes with many chart instances forceContextLoss not working\n\t\t}\n\t\t(this.renderer as any).context = null;\n\t\tthis.renderer.domElement = null;\n\t\tthis.renderer = null;\n\t}\n\n\tgetState(): IChartState {\n\t\treturn this.state.data\n\t}\n\n\t/**\n\t * shortcut for Chart.state.getTrend\n\t */\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.state.getTrend(trendName);\n\t}\n\n\t/**\n\t * shortcut for Chart.state.setState\n\t */\n\tsetState(state: IChartState) {\n\t\treturn this.state.setState(state);\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar $el = this.$el;\n\t\tif (this.state.data.controls.enabled) {\n\t\t\t$el.addEventListener('mousewheel', (ev: MouseWheelEvent) => {\n\t\t\t\tthis.onMouseWheel(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousemove', (ev: MouseEvent) => {\n\t\t\t\tthis.onMouseMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousedown', (ev: MouseEvent) => this.onMouseDown(ev));\n\t\t\t$el.addEventListener('mouseup', (ev: MouseEvent) => this.onMouseUp(ev));\n\t\t\t$el.addEventListener('touchmove', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('touchend', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchEnd(ev)\n\t\t\t});\n\t\t}\n\t\tif (this.state.data.autoResize) {\n\t\t\tthis.resizeSensor = new ResizeSensor(this.$container, () => {\n\t\t\t\tthis.onChartContainerResizeHandler(this.$container.clientWidth, this.$container.clientHeight);\n\t\t\t});\n\t\t}\n\n\t\tthis.unsubscribers = [\n\t\t\tthis.state.onTrendsChange(() => this.autoscroll()),\n\t\t\tthis.state.screen.onTransformationFrame((options) => this.onScreenTransformHandler(options)),\n\t\t\tthis.state.onResize((options) => this.onChartResize())\n\t\t];\n\t}\n\n\tprivate unbindEvents() {\n\t\t// TODO: unbind events correctly\n\t\ttry {\n\t\t\tthis.resizeSensor && this.resizeSensor.detach();\n\t\t} catch (e) {\n\t\t\t// ups.. somebody already removed resizeSensor childNode\n\t\t\t// detected in angular2 apps\n\t\t}\n\t\tthis.$el.remove();\n\t\tthis.unsubscribers.forEach(unsubscribe => unsubscribe());\n\t}\n\n\tprivate setupCamera() {\n\t\tlet camSettings = this.state.screen.getCameraSettings();\n\t\tif (!this.camera) {\n\t\t\tthis.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t\t\tthis.scene.add(this.camera);\n\t\t} else {\n\t\t\tthis.camera.fov = camSettings.FOV;\n\t\t\tthis.camera.aspect = camSettings.aspect;\n\t\t\tthis.camera.far = camSettings.far;\n\t\t\tthis.camera.near = camSettings.near;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\t\tthis.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t\tthis.cameraInitialPosition = this.camera.position.clone();\n\t\tthis.onScreenTransformHandler(this.state.screen.options);\n\t}\n\n\tprivate onScreenTransformHandler(options: IScreenTransformOptions) {\n\t\tif (options.scrollX != void 0) {\n\t\t\tlet scrollX = this.cameraInitialPosition.x + options.scrollX;\n\t\t\t// scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setX(scrollX);\n\t\t}\n\t\tif (options.scrollY != void 0) {\n\t\t\tlet scrollY = this.cameraInitialPosition.y + options.scrollY;\n\t\t\t// scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setY(scrollY);\n\t\t}\n\t}\n\n\tprivate autoscroll() {\n\t\tvar state = this.state;\n\t\tif (!state.data.autoScroll) return;\n\t\tvar oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n\t\tvar trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n\t\tif (trendsMaxXDelta > 0) {\n\t\t\tvar maxVisibleX = this.state.screen.getScreenRightVal();\n\t\t\tvar paddingRightX = this.state.getPaddingRight();\n\t\t\tvar currentScroll = state.data.xAxis.range.scroll;\n\t\t\tif (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar scrollDelta = trendsMaxXDelta;\n\t\t\tthis.setState({xAxis: {range: {scroll: currentScroll + scrollDelta}}});\n\t\t}\n\t}\n\n\tprivate onScrollStop() {\n\t\t// var tendsXMax = this.state.data.computedData.trends.maxX;\n\t\t// var paddingRightX = this.state.getPaddingRight();\n\t\t// if (tendsXMax < paddingRightX) {\n\t\t// \tthis.state.scrollToEnd();\n\t\t// }\n\t}\n\n\tprivate onMouseDown(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t}\n\n\tprivate onMouseUp(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onMouseMove(ev: MouseEvent) {\n\t\tif (this.state.data.cursor.dragMode) {\n\t\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t\t}\n\t}\n\n\tprivate onMouseWheel(ev: MouseWheelEvent) {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t\tlet zoomOrigin = ev.layerX / this.state.data.width;\n\t\tlet zoomValue = 1 + ev.wheelDeltaY * 0.001;\n\t\tthis.zoom(zoomValue, zoomOrigin);\n\t}\n\n\tprivate onTouchMove(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY}});\n\t}\n\n\tprivate onTouchEnd(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onChartContainerResizeHandler(width: number, height: number) {\n\t\tthis.setState({width, height});\n\t}\n\n\tprivate onChartResize() {\n\t\tlet {width, height} = this.state.data;\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.setupCamera();\n\t}\n\n\tprivate zoom(zoomValue: number, zoomOrigin: number) {\n\t\tconst MAX_ZOOM_VALUE = 1.5;\n\t\tconst MIN_ZOOM_VALUE = 0.7;\n\t\tzoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t\tzoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t\tlet autoScrollIsEnabled = this.state.data.autoScroll;\n\t\tif (autoScrollIsEnabled) this.state.setState({autoScroll: false});\n\t\tthis.state.zoom(zoomValue, zoomOrigin).then(() => {\n\t\t\tif (autoScrollIsEnabled) this.setState({autoScroll: true});\n\t\t});\n\t}\n\n\t/**\n\t * creates simple chart without animations and minimal widgets set\n\t */\n\tstatic createPreviewChart(userOptions: IChartState, $el: Element): Chart {\n\t\tvar previewChartOptions: IChartState = {\n\t\t\tanimations: {enabled: false},\n\t\t\twidgets: {\n\t\t\t\tGrid: {enabled: false},\n\t\t\t\tAxis: {enabled: false},\n\t\t\t\tTrendsGradient: {enabled: false}\n\t\t\t}\n\t\t};\n\t\tvar options = Utils.deepMerge(userOptions, previewChartOptions);\n\t\treturn new Chart(options, $el);\n\t}\n\n\n}\n\n// install built-in widgets\nChart.installWidget(TrendsLineWidget);\nChart.installWidget(TrendsCandlesWidget);\nChart.installWidget(AxisWidget);\nChart.installWidget(GridWidget);\nChart.installWidget(TrendsBeaconWidget);\nChart.installWidget(TrendsIndicatorWidget);\n// Chart.installWidget(TrendsGradientWidget);\nChart.installWidget(TrendsLoadingWidget);\nChart.installWidget(AxisMarksWidget);\nChart.installWidget(BorderWidget);\n\n\n/** WEBPACK FOOTER **\n ** ./src/Chart.ts\n **/","/// <reference path=\"./ResizeSensor.ts\" />\n\n// TODO: think about different bundles\n\nimport { ResizeSensorType } from './ResizeSensor';\n(<any>window).TweenLite = TweenMax;\n(<any>window).Stats = require('three/examples/js/libs/stats.min');\n\n//require('gsap/src/uncompressed/easing/EasePack.js');\nrequire('three/examples/js/renderers/CanvasRenderer.js');\nrequire('three/examples/js/renderers/Projector.js');\nexport const isPlainObject = require('is-plain-object') as Function;\nexport const EE2 = require('EventEmitter2') as typeof EventEmitter2;\n\n\nexport { Promise } from '../polyfills/es6-promise';\n\nexport * from './ResizeSensor';\nexport const ResizeSensor = require('css-element-queries/src/ResizeSensor') as ResizeSensorType;\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/deps.ts\n **/","// stats.js - http://github.com/mrdoob/stats.js\r\nvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\r\nif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\r\nStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\r\nv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/examples/js/libs/stats.min.js\n ** module id = 4\n ** module chunks = 0\n **/","/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SpriteCanvasMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'SpriteCanvasMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.program = function ( context, color ) {};\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\r\n\r\nTHREE.SpriteCanvasMaterial.prototype.clone = function () {\r\n\r\n\tvar material = new THREE.SpriteCanvasMaterial();\r\n\r\n\tmaterial.copy( this );\r\n\tmaterial.color.copy( this.color );\r\n\tmaterial.program = this.program;\r\n\r\n\treturn material;\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.CanvasRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _this = this,\r\n\t_renderData, _elements, _lights,\r\n\t_projector = new THREE.Projector(),\r\n\r\n\t_canvas = parameters.canvas !== undefined\r\n\t\t\t ? parameters.canvas\r\n\t\t\t : document.createElement( 'canvas' ),\r\n\r\n\t_canvasWidth = _canvas.width,\r\n\t_canvasHeight = _canvas.height,\r\n\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\r\n\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\r\n\r\n\t_viewportX = 0,\r\n\t_viewportY = 0,\r\n\t_viewportWidth = _canvasWidth,\r\n\t_viewportHeight = _canvasHeight,\r\n\r\n\t_pixelRatio = 1,\r\n\r\n\t_context = _canvas.getContext( '2d', {\r\n\t\talpha: parameters.alpha === true\r\n\t} ),\r\n\r\n\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t_clearAlpha = parameters.alpha === true ? 0 : 1,\r\n\r\n\t_contextGlobalAlpha = 1,\r\n\t_contextGlobalCompositeOperation = 0,\r\n\t_contextStrokeStyle = null,\r\n\t_contextFillStyle = null,\r\n\t_contextLineWidth = null,\r\n\t_contextLineCap = null,\r\n\t_contextLineJoin = null,\r\n\t_contextLineDash = [],\r\n\r\n\t_camera,\r\n\r\n\t_v1, _v2, _v3, _v4,\r\n\t_v5 = new THREE.RenderableVertex(),\r\n\t_v6 = new THREE.RenderableVertex(),\r\n\r\n\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\r\n\t_v4x, _v4y, _v5x, _v5y, _v6x, _v6y,\r\n\r\n\t_color = new THREE.Color(),\r\n\t_color1 = new THREE.Color(),\r\n\t_color2 = new THREE.Color(),\r\n\t_color3 = new THREE.Color(),\r\n\t_color4 = new THREE.Color(),\r\n\r\n\t_diffuseColor = new THREE.Color(),\r\n\t_emissiveColor = new THREE.Color(),\r\n\r\n\t_lightColor = new THREE.Color(),\r\n\r\n\t_patterns = {},\r\n\r\n\t_image, _uvs,\r\n\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\r\n\r\n\t_clipBox = new THREE.Box2(),\r\n\t_clearBox = new THREE.Box2(),\r\n\t_elemBox = new THREE.Box2(),\r\n\r\n\t_ambientLight = new THREE.Color(),\r\n\t_directionalLights = new THREE.Color(),\r\n\t_pointLights = new THREE.Color(),\r\n\r\n\t_vector3 = new THREE.Vector3(), // Needed for PointLight\r\n\t_centroid = new THREE.Vector3(),\r\n\t_normal = new THREE.Vector3(),\r\n\t_normalViewMatrix = new THREE.Matrix3();\r\n\r\n\t/* TODO\r\n\t_canvas.mozImageSmoothingEnabled = false;\r\n\t_canvas.webkitImageSmoothingEnabled = false;\r\n\t_canvas.msImageSmoothingEnabled = false;\r\n\t_canvas.imageSmoothingEnabled = false;\r\n\t*/\r\n\r\n\t// dash+gap fallbacks for Firefox and everything else\r\n\r\n\tif ( _context.setLineDash === undefined ) {\r\n\r\n\t\t_context.setLineDash = function () {};\r\n\r\n\t}\r\n\r\n\tthis.domElement = _canvas;\r\n\r\n\tthis.autoClear = true;\r\n\tthis.sortObjects = true;\r\n\tthis.sortElements = true;\r\n\r\n\tthis.info = {\r\n\r\n\t\trender: {\r\n\r\n\t\t\tvertices: 0,\r\n\t\t\tfaces: 0\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// WebGLRenderer compatibility\r\n\r\n\tthis.supportsVertexTextures = function () {};\r\n\tthis.setFaceCulling = function () {};\r\n\r\n\t// API\r\n\r\n\tthis.getContext = function () {\r\n\r\n\t\treturn _context;\r\n\r\n\t};\r\n\r\n\tthis.getContextAttributes = function () {\r\n\r\n\t\treturn _context.getContextAttributes();\r\n\r\n\t};\r\n\r\n\tthis.getPixelRatio = function () {\r\n\r\n\t\treturn _pixelRatio;\r\n\r\n\t};\r\n\r\n\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\tif ( value !== undefined ) _pixelRatio = value;\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height, updateStyle ) {\r\n\r\n\t\t_canvasWidth = width * _pixelRatio;\r\n\t\t_canvasHeight = height * _pixelRatio;\r\n\r\n\t\t_canvas.width = _canvasWidth;\r\n\t\t_canvas.height = _canvasHeight;\r\n\r\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\r\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\r\n\r\n\t\tif ( updateStyle !== false ) {\r\n\r\n\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t}\r\n\r\n\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\r\n\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\r\n\r\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\r\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\r\n\r\n\t\t_contextGlobalAlpha = 1;\r\n\t\t_contextGlobalCompositeOperation = 0;\r\n\t\t_contextStrokeStyle = null;\r\n\t\t_contextFillStyle = null;\r\n\t\t_contextLineWidth = null;\r\n\t\t_contextLineCap = null;\r\n\t\t_contextLineJoin = null;\r\n\r\n\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t};\r\n\r\n\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\t_viewportX = x * _pixelRatio;\r\n\t\t_viewportY = y * _pixelRatio;\r\n\r\n\t\t_viewportWidth = width * _pixelRatio;\r\n\t\t_viewportHeight = height * _pixelRatio;\r\n\r\n\t};\r\n\r\n\tthis.setScissor = function () {};\r\n\tthis.setScissorTest = function () {};\r\n\r\n\tthis.setClearColor = function ( color, alpha ) {\r\n\r\n\t\t_clearColor.set( color );\r\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\r\n\r\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\r\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\r\n\r\n\t};\r\n\r\n\tthis.setClearColorHex = function ( hex, alpha ) {\r\n\r\n\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\r\n\t\tthis.setClearColor( hex, alpha );\r\n\r\n\t};\r\n\r\n\tthis.getClearColor = function () {\r\n\r\n\t\treturn _clearColor;\r\n\r\n\t};\r\n\r\n\tthis.getClearAlpha = function () {\r\n\r\n\t\treturn _clearAlpha;\r\n\r\n\t};\r\n\r\n\tthis.getMaxAnisotropy = function () {\r\n\r\n\t\treturn 0;\r\n\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\tif ( _clearBox.isEmpty() === false ) {\r\n\r\n\t\t\t_clearBox.intersect( _clipBox );\r\n\t\t\t_clearBox.expandByScalar( 2 );\r\n\r\n\t\t\t_clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\r\n\t\t\t_clearBox.min.y =  - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\r\n\t\t\t_clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\r\n\t\t\t_clearBox.max.y =  - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\r\n\r\n\t\t\tif ( _clearAlpha < 1 ) {\r\n\r\n\t\t\t\t_context.clearRect(\r\n\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t_clearBox.max.y | 0,\r\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( _clearAlpha > 0 ) {\r\n\r\n\t\t\t\tsetBlending( THREE.NormalBlending );\r\n\t\t\t\tsetOpacity( 1 );\r\n\r\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\r\n\r\n\t\t\t\t_context.fillRect(\r\n\t\t\t\t\t_clearBox.min.x | 0,\r\n\t\t\t\t\t_clearBox.max.y | 0,\r\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\r\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_clearBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// compatibility\r\n\r\n\tthis.clearColor = function () {};\r\n\tthis.clearDepth = function () {};\r\n\tthis.clearStencil = function () {};\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClear === true ) this.clear();\r\n\r\n\t\t_this.info.render.vertices = 0;\r\n\t\t_this.info.render.faces = 0;\r\n\r\n\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\r\n\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\r\n\r\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\r\n\t\t_elements = _renderData.elements;\r\n\t\t_lights = _renderData.lights;\r\n\t\t_camera = camera;\r\n\r\n\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\r\n\r\n\t\t/* DEBUG\r\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\r\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\r\n\t\t*/\r\n\r\n\t\tcalculateLights();\r\n\r\n\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\r\n\r\n\t\t\tvar element = _elements[ e ];\r\n\r\n\t\t\tvar material = element.material;\r\n\r\n\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\r\n\r\n\t\t\t_elemBox.makeEmpty();\r\n\r\n\t\t\tif ( element instanceof THREE.RenderableSprite ) {\r\n\r\n\t\t\t\t_v1 = element;\r\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\trenderSprite( _v1, element, material );\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [\r\n\t\t\t\t\t_v1.positionScreen,\r\n\t\t\t\t\t_v2.positionScreen\r\n\t\t\t\t] );\r\n\r\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\r\n\r\n\t\t\t\t\trenderLine( _v1, _v2, element, material );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\r\n\r\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\r\n\r\n\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\r\n\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\r\n\r\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\r\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\r\n\r\n\t\t\t\tif ( material.overdraw > 0 ) {\r\n\r\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\r\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\r\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_elemBox.setFromPoints( [\r\n\t\t\t\t\t_v1.positionScreen,\r\n\t\t\t\t\t_v2.positionScreen,\r\n\t\t\t\t\t_v3.positionScreen\r\n\t\t\t\t] );\r\n\r\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\r\n\r\n\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/* DEBUG\r\n\t\t\tsetLineWidth( 1 );\r\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\r\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\r\n\t\t\t*/\r\n\r\n\t\t\t_clearBox.union( _elemBox );\r\n\r\n\t\t}\r\n\r\n\t\t/* DEBUG\r\n\t\tsetLineWidth( 1 );\r\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\r\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\r\n\t\t*/\r\n\r\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tfunction calculateLights() {\r\n\r\n\t\t_ambientLight.setRGB( 0, 0, 0 );\r\n\t\t_directionalLights.setRGB( 0, 0, 0 );\r\n\t\t_pointLights.setRGB( 0, 0, 0 );\r\n\r\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tvar light = _lights[ l ];\r\n\t\t\tvar lightColor = light.color;\r\n\r\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\t_ambientLight.add( lightColor );\r\n\r\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\t// for sprites\r\n\r\n\t\t\t\t_directionalLights.add( lightColor );\r\n\r\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\t// for sprites\r\n\r\n\t\t\t\t_pointLights.add( lightColor );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction calculateLight( position, normal, color ) {\r\n\r\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tvar light = _lights[ l ];\r\n\r\n\t\t\t_lightColor.copy( light.color );\r\n\r\n\t\t\tif ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\r\n\r\n\t\t\t\tvar amount = normal.dot( lightPosition );\r\n\r\n\t\t\t\tif ( amount <= 0 ) continue;\r\n\r\n\t\t\t\tamount *= light.intensity;\r\n\r\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\r\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\r\n\r\n\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\r\n\r\n\t\t\t\tif ( amount <= 0 ) continue;\r\n\r\n\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\r\n\r\n\t\t\t\tif ( amount == 0 ) continue;\r\n\r\n\t\t\t\tamount *= light.intensity;\r\n\r\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction renderSprite( v1, element, material ) {\r\n\r\n\t\tsetOpacity( material.opacity );\r\n\t\tsetBlending( material.blending );\r\n\r\n\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\r\n\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\r\n\r\n\t\tvar dist = 0.5 * Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\r\n\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\r\n\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\r\n\r\n\t\tif ( material instanceof THREE.SpriteMaterial ) {\r\n\r\n\t\t\tvar texture = material.map;\r\n\r\n\t\t\tif ( texture !== null ) {\r\n\r\n\t\t\t\tvar pattern = _patterns[ texture.id ];\r\n\r\n\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\r\n\r\n\t\t\t\t\tpattern = textureToPattern( texture );\r\n\t\t\t\t\t_patterns[ texture.id ] = pattern;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( pattern.canvas !== undefined ) {\r\n\r\n\t\t\t\t\tsetFillStyle( pattern.canvas );\r\n\r\n\t\t\t\t\tvar bitmap = texture.image;\r\n\r\n\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\r\n\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\r\n\r\n\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\r\n\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\r\n\r\n\t\t\t\t\tvar cx = scaleX / sx;\r\n\t\t\t\t\tvar cy = scaleY / sy;\r\n\r\n\t\t\t\t\t_context.save();\r\n\t\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\r\n\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\r\n\t\t\t\t\t_context.scale( cx, cy );\r\n\t\t\t\t\t_context.translate( - ox, - oy );\r\n\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\r\n\t\t\t\t\t_context.restore();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// no texture\r\n\r\n\t\t\t\tsetFillStyle( material.color.getStyle() );\r\n\r\n\t\t\t\t_context.save();\r\n\t\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\r\n\t\t\t\t_context.scale( scaleX, - scaleY );\r\n\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\r\n\t\t\t\t_context.restore();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( material instanceof THREE.SpriteCanvasMaterial ) {\r\n\r\n\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\t\t\tsetFillStyle( material.color.getStyle() );\r\n\r\n\t\t\t_context.save();\r\n\t\t\t_context.translate( v1.x, v1.y );\r\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\r\n\t\t\t_context.scale( scaleX, scaleY );\r\n\r\n\t\t\tmaterial.program( _context );\r\n\r\n\t\t\t_context.restore();\r\n\r\n\t\t}\r\n\r\n\t\t/* DEBUG\r\n\t\tsetStrokeStyle( 'rgb(255,255,0)' );\r\n\t\t_context.beginPath();\r\n\t\t_context.moveTo( v1.x - 10, v1.y );\r\n\t\t_context.lineTo( v1.x + 10, v1.y );\r\n\t\t_context.moveTo( v1.x, v1.y - 10 );\r\n\t\t_context.lineTo( v1.x, v1.y + 10 );\r\n\t\t_context.stroke();\r\n\t\t*/\r\n\r\n\t}\r\n\r\n\tfunction renderLine( v1, v2, element, material ) {\r\n\r\n\t\tsetOpacity( material.opacity );\r\n\t\tsetBlending( material.blending );\r\n\r\n\t\t_context.beginPath();\r\n\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\r\n\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\r\n\r\n\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\tsetLineWidth( material.linewidth );\r\n\t\t\tsetLineCap( material.linecap );\r\n\t\t\tsetLineJoin( material.linejoin );\r\n\r\n\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\r\n\r\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\r\n\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\r\n\r\n\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\r\n\r\n\t\t\t\t\tsetStrokeStyle( colorStyle1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttry {\r\n\r\n\t\t\t\t\t\tvar grad = _context.createLinearGradient(\r\n\t\t\t\t\t\t\tv1.positionScreen.x,\r\n\t\t\t\t\t\t\tv1.positionScreen.y,\r\n\t\t\t\t\t\t\tv2.positionScreen.x,\r\n\t\t\t\t\t\t\tv2.positionScreen.y\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\r\n\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\r\n\r\n\t\t\t\t\t} catch ( exception ) {\r\n\r\n\t\t\t\t\t\tgrad = colorStyle1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsetStrokeStyle( grad );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_context.stroke();\r\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\r\n\r\n\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\tsetLineWidth( material.linewidth );\r\n\t\t\tsetLineCap( material.linecap );\r\n\t\t\tsetLineJoin( material.linejoin );\r\n\t\t\tsetStrokeStyle( material.color.getStyle() );\r\n\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\r\n\r\n\t\t\t_context.stroke();\r\n\r\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\r\n\r\n\t\t\tsetLineDash( [] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\r\n\r\n\t\t_this.info.render.vertices += 3;\r\n\t\t_this.info.render.faces ++;\r\n\r\n\t\tsetOpacity( material.opacity );\r\n\t\tsetBlending( material.blending );\r\n\r\n\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\r\n\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\r\n\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\r\n\r\n\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\r\n\r\n\t\tif ( ( material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial ) && material.map === null ) {\r\n\r\n\t\t\t_diffuseColor.copy( material.color );\r\n\t\t\t_emissiveColor.copy( material.emissive );\r\n\r\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t_diffuseColor.multiply( element.color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_color.copy( _ambientLight );\r\n\r\n\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\r\n\r\n\t\t\tcalculateLight( _centroid, element.normalModel, _color );\r\n\r\n\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\r\n\r\n\t\t\tmaterial.wireframe === true\r\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t : fillPath( _color );\r\n\r\n\t\t} else if ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t    material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t    material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\tvar mapping = material.map.mapping;\r\n\r\n\t\t\t\tif ( mapping === THREE.UVMapping ) {\r\n\r\n\t\t\t\t\t_uvs = element.uvs;\r\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material.envMap !== null ) {\r\n\r\n\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\r\n\r\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\r\n\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\r\n\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\r\n\r\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\r\n\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\r\n\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\r\n\r\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\r\n\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\r\n\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\r\n\r\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_color.copy( material.color );\r\n\r\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\r\n\r\n\t\t\t\t\t_color.multiply( element.color );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmaterial.wireframe === true\r\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t\t : fillPath( _color );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\r\n\r\n\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\r\n\r\n\t\t\tmaterial.wireframe === true\r\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t : fillPath( _color );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_color.setRGB( 1, 1, 1 );\r\n\r\n\t\t\tmaterial.wireframe === true\r\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\r\n\t\t\t\t : fillPath( _color );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\r\n\r\n\t\t_context.beginPath();\r\n\t\t_context.moveTo( x0, y0 );\r\n\t\t_context.lineTo( x1, y1 );\r\n\t\t_context.lineTo( x2, y2 );\r\n\t\t_context.closePath();\r\n\r\n\t}\r\n\r\n\tfunction strokePath( color, linewidth, linecap, linejoin ) {\r\n\r\n\t\tsetLineWidth( linewidth );\r\n\t\tsetLineCap( linecap );\r\n\t\tsetLineJoin( linejoin );\r\n\t\tsetStrokeStyle( color.getStyle() );\r\n\r\n\t\t_context.stroke();\r\n\r\n\t\t_elemBox.expandByScalar( linewidth * 2 );\r\n\r\n\t}\r\n\r\n\tfunction fillPath( color ) {\r\n\r\n\t\tsetFillStyle( color.getStyle() );\r\n\t\t_context.fill();\r\n\r\n\t}\r\n\r\n\tfunction textureToPattern( texture ) {\r\n\r\n\t\tif ( texture.version === 0 ||\r\n\t\t\ttexture instanceof THREE.CompressedTexture ||\r\n\t\t\ttexture instanceof THREE.DataTexture ) {\r\n\r\n\t\t\treturn {\r\n\t\t\t\tcanvas: undefined,\r\n\t\t\t\tversion: texture.version\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar image = texture.image;\r\n\r\n\t\tif ( image.complete === false ) {\r\n\r\n\t\t\treturn {\r\n\t\t\t\tcanvas: undefined,\r\n\t\t\t\tversion: 0\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = image.width;\r\n\t\tcanvas.height = image.height;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\r\n\t\tcontext.drawImage( image, 0, 0 );\r\n\r\n\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping;\r\n\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping;\r\n\r\n\t\tvar repeat = 'no-repeat';\r\n\r\n\t\tif ( repeatX === true && repeatY === true ) {\r\n\r\n\t\t\trepeat = 'repeat';\r\n\r\n\t\t} else if ( repeatX === true ) {\r\n\r\n\t\t\trepeat = 'repeat-x';\r\n\r\n\t\t} else if ( repeatY === true ) {\r\n\r\n\t\t\trepeat = 'repeat-y';\r\n\r\n\t\t}\r\n\r\n\t\tvar pattern = _context.createPattern( canvas, repeat );\r\n\r\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\treturn {\r\n\t\t\tcanvas: pattern,\r\n\t\t\tversion: texture.version\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\r\n\r\n\t\tvar pattern = _patterns[ texture.id ];\r\n\r\n\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\r\n\r\n\t\t\tpattern = textureToPattern( texture );\r\n\t\t\t_patterns[ texture.id ] = pattern;\r\n\r\n\t\t}\r\n\r\n\t\tif ( pattern.canvas !== undefined ) {\r\n\r\n\t\t\tsetFillStyle( pattern.canvas );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\r\n\t\t\t_context.fill();\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\r\n\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\toffsetX = texture.offset.x / texture.repeat.x,\r\n\t\toffsetY = texture.offset.y / texture.repeat.y,\r\n\t\twidth = texture.image.width * texture.repeat.x,\r\n\t\theight = texture.image.height * texture.repeat.y;\r\n\r\n\t\tu0 = ( u0 + offsetX ) * width;\r\n\t\tv0 = ( v0 + offsetY ) * height;\r\n\r\n\t\tu1 = ( u1 + offsetX ) * width;\r\n\t\tv1 = ( v1 + offsetY ) * height;\r\n\r\n\t\tu2 = ( u2 + offsetX ) * width;\r\n\t\tv2 = ( v2 + offsetY ) * height;\r\n\r\n\t\tx1 -= x0; y1 -= y0;\r\n\t\tx2 -= x0; y2 -= y0;\r\n\r\n\t\tu1 -= u0; v1 -= v0;\r\n\t\tu2 -= u0; v2 -= v0;\r\n\r\n\t\tdet = u1 * v2 - u2 * v1;\r\n\r\n\t\tif ( det === 0 ) return;\r\n\r\n\t\tidet = 1 / det;\r\n\r\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\r\n\t\te = x0 - a * u0 - c * v0;\r\n\t\tf = y0 - b * u0 - d * v0;\r\n\r\n\t\t_context.save();\r\n\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t_context.fill();\r\n\t\t_context.restore();\r\n\r\n\t}\r\n\r\n\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\r\n\r\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\r\n\r\n\t\tvar a, b, c, d, e, f, det, idet,\r\n\t\twidth = image.width - 1,\r\n\t\theight = image.height - 1;\r\n\r\n\t\tu0 *= width; v0 *= height;\r\n\t\tu1 *= width; v1 *= height;\r\n\t\tu2 *= width; v2 *= height;\r\n\r\n\t\tx1 -= x0; y1 -= y0;\r\n\t\tx2 -= x0; y2 -= y0;\r\n\r\n\t\tu1 -= u0; v1 -= v0;\r\n\t\tu2 -= u0; v2 -= v0;\r\n\r\n\t\tdet = u1 * v2 - u2 * v1;\r\n\r\n\t\tidet = 1 / det;\r\n\r\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\r\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\r\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\r\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\r\n\r\n\t\te = x0 - a * u0 - c * v0;\r\n\t\tf = y0 - b * u0 - d * v0;\r\n\r\n\t\t_context.save();\r\n\t\t_context.transform( a, b, c, d, e, f );\r\n\t\t_context.clip();\r\n\t\t_context.drawImage( image, 0, 0 );\r\n\t\t_context.restore();\r\n\r\n\t}\r\n\r\n\t// Hide anti-alias gaps\r\n\r\n\tfunction expand( v1, v2, pixels ) {\r\n\r\n\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\r\n\t\tdet = x * x + y * y, idet;\r\n\r\n\t\tif ( det === 0 ) return;\r\n\r\n\t\tidet = pixels / Math.sqrt( det );\r\n\r\n\t\tx *= idet; y *= idet;\r\n\r\n\t\tv2.x += x; v2.y += y;\r\n\t\tv1.x -= x; v1.y -= y;\r\n\r\n\t}\r\n\r\n\t// Context cached methods.\r\n\r\n\tfunction setOpacity( value ) {\r\n\r\n\t\tif ( _contextGlobalAlpha !== value ) {\r\n\r\n\t\t\t_context.globalAlpha = value;\r\n\t\t\t_contextGlobalAlpha = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setBlending( value ) {\r\n\r\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\r\n\r\n\t\t\tif ( value === THREE.NormalBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\r\n\r\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\r\n\r\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\t_context.globalCompositeOperation = 'darker';\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_contextGlobalCompositeOperation = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineWidth( value ) {\r\n\r\n\t\tif ( _contextLineWidth !== value ) {\r\n\r\n\t\t\t_context.lineWidth = value;\r\n\t\t\t_contextLineWidth = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineCap( value ) {\r\n\r\n\t\t// \"butt\", \"round\", \"square\"\r\n\r\n\t\tif ( _contextLineCap !== value ) {\r\n\r\n\t\t\t_context.lineCap = value;\r\n\t\t\t_contextLineCap = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineJoin( value ) {\r\n\r\n\t\t// \"round\", \"bevel\", \"miter\"\r\n\r\n\t\tif ( _contextLineJoin !== value ) {\r\n\r\n\t\t\t_context.lineJoin = value;\r\n\t\t\t_contextLineJoin = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setStrokeStyle( value ) {\r\n\r\n\t\tif ( _contextStrokeStyle !== value ) {\r\n\r\n\t\t\t_context.strokeStyle = value;\r\n\t\t\t_contextStrokeStyle = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setFillStyle( value ) {\r\n\r\n\t\tif ( _contextFillStyle !== value ) {\r\n\r\n\t\t\t_context.fillStyle = value;\r\n\t\t\t_contextFillStyle = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setLineDash( value ) {\r\n\r\n\t\tif ( _contextLineDash.length !== value.length ) {\r\n\r\n\t\t\t_context.setLineDash( value );\r\n\t\t\t_contextLineDash = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/examples/js/renderers/CanvasRenderer.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author julianwa / https://github.com/julianwa\r\n */\r\n\r\nTHREE.RenderableObject = function () {\r\n\r\n\tthis.id = 0;\r\n\r\n\tthis.object = null;\r\n\tthis.z = 0;\r\n\tthis.renderOrder = 0;\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.RenderableFace = function () {\r\n\r\n\tthis.id = 0;\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\tthis.v3 = new THREE.RenderableVertex();\r\n\r\n\tthis.normalModel = new THREE.Vector3();\r\n\r\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\r\n\tthis.vertexNormalsLength = 0;\r\n\r\n\tthis.color = new THREE.Color();\r\n\tthis.material = null;\r\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\r\n\r\n\tthis.z = 0;\r\n\tthis.renderOrder = 0;\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.RenderableVertex = function () {\r\n\r\n\tthis.position = new THREE.Vector3();\r\n\tthis.positionWorld = new THREE.Vector3();\r\n\tthis.positionScreen = new THREE.Vector4();\r\n\r\n\tthis.visible = true;\r\n\r\n};\r\n\r\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\r\n\r\n\tthis.positionWorld.copy( vertex.positionWorld );\r\n\tthis.positionScreen.copy( vertex.positionScreen );\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.RenderableLine = function () {\r\n\r\n\tthis.id = 0;\r\n\r\n\tthis.v1 = new THREE.RenderableVertex();\r\n\tthis.v2 = new THREE.RenderableVertex();\r\n\r\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\r\n\tthis.material = null;\r\n\r\n\tthis.z = 0;\r\n\tthis.renderOrder = 0;\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.RenderableSprite = function () {\r\n\r\n\tthis.id = 0;\r\n\r\n\tthis.object = null;\r\n\r\n\tthis.x = 0;\r\n\tthis.y = 0;\r\n\tthis.z = 0;\r\n\r\n\tthis.rotation = 0;\r\n\tthis.scale = new THREE.Vector2();\r\n\r\n\tthis.material = null;\r\n\tthis.renderOrder = 0;\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.Projector = function () {\r\n\r\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\r\n\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\r\n\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\r\n\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\r\n\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\r\n\r\n\t_renderData = { objects: [], lights: [], elements: [] },\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\t_vector4 = new THREE.Vector4(),\r\n\r\n\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\r\n\t_boundingBox = new THREE.Box3(),\r\n\t_points3 = new Array( 3 ),\r\n\t_points4 = new Array( 4 ),\r\n\r\n\t_viewMatrix = new THREE.Matrix4(),\r\n\t_viewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n\t_modelMatrix,\r\n\t_modelViewProjectionMatrix = new THREE.Matrix4(),\r\n\r\n\t_normalMatrix = new THREE.Matrix3(),\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t_clippedVertex1PositionScreen = new THREE.Vector4(),\r\n\t_clippedVertex2PositionScreen = new THREE.Vector4();\r\n\r\n\t//\r\n\r\n\tthis.projectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\r\n\t\tvector.project( camera );\r\n\r\n\t};\r\n\r\n\tthis.unprojectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\r\n\t\tvector.unproject( camera );\r\n\r\n\t};\r\n\r\n\tthis.pickingRay = function ( vector, camera ) {\r\n\r\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tvar RenderList = function () {\r\n\r\n\t\tvar normals = [];\r\n\t\tvar uvs = [];\r\n\r\n\t\tvar object = null;\r\n\t\tvar material = null;\r\n\r\n\t\tvar normalMatrix = new THREE.Matrix3();\r\n\r\n\t\tfunction setObject( value ) {\r\n\r\n\t\t\tobject = value;\r\n\t\t\tmaterial = object.material;\r\n\r\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\r\n\r\n\t\t\tnormals.length = 0;\r\n\t\t\tuvs.length = 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction projectVertex( vertex ) {\r\n\r\n\t\t\tvar position = vertex.position;\r\n\t\t\tvar positionWorld = vertex.positionWorld;\r\n\t\t\tvar positionScreen = vertex.positionScreen;\r\n\r\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\r\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\r\n\r\n\t\t\tvar invW = 1 / positionScreen.w;\r\n\r\n\t\t\tpositionScreen.x *= invW;\r\n\t\t\tpositionScreen.y *= invW;\r\n\t\t\tpositionScreen.z *= invW;\r\n\r\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\r\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\r\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushVertex( x, y, z ) {\r\n\r\n\t\t\t_vertex = getNextVertexInPool();\r\n\t\t\t_vertex.position.set( x, y, z );\r\n\r\n\t\t\tprojectVertex( _vertex );\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushNormal( x, y, z ) {\r\n\r\n\t\t\tnormals.push( x, y, z );\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushUv( x, y ) {\r\n\r\n\t\t\tuvs.push( x, y );\r\n\r\n\t\t}\r\n\r\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\r\n\r\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\r\n\r\n\t\t\t_points3[ 0 ] = v1.positionScreen;\r\n\t\t\t_points3[ 1 ] = v2.positionScreen;\r\n\t\t\t_points3[ 2 ] = v3.positionScreen;\r\n\r\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\r\n\r\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\r\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\r\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\r\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushLine( a, b ) {\r\n\r\n\t\t\tvar v1 = _vertexPool[ a ];\r\n\t\t\tvar v2 = _vertexPool[ b ];\r\n\r\n\t\t\t_line = getNextLineInPool();\r\n\r\n\t\t\t_line.id = object.id;\r\n\t\t\t_line.v1.copy( v1 );\r\n\t\t\t_line.v2.copy( v2 );\r\n\t\t\t_line.z = ( v1.positionScreen.z + v2.positionScreen.z ) / 2;\r\n\t\t\t_line.renderOrder = object.renderOrder;\r\n\r\n\t\t\t_line.material = object.material;\r\n\r\n\t\t\t_renderData.elements.push( _line );\r\n\r\n\t\t}\r\n\r\n\t\tfunction pushTriangle( a, b, c ) {\r\n\r\n\t\t\tvar v1 = _vertexPool[ a ];\r\n\t\t\tvar v2 = _vertexPool[ b ];\r\n\t\t\tvar v3 = _vertexPool[ c ];\r\n\r\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\r\n\r\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\r\n\r\n\t\t\t\t_face = getNextFaceInPool();\r\n\r\n\t\t\t\t_face.id = object.id;\r\n\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t_face.v3.copy( v3 );\r\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\r\n\t\t\t\t_face.renderOrder = object.renderOrder;\r\n\r\n\t\t\t\t// use first vertex normal as face normal\r\n\r\n\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\r\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\r\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\r\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t\tvar uv = _face.uvs[ i ];\r\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_face.vertexNormalsLength = 3;\r\n\r\n\t\t\t\t_face.material = object.material;\r\n\r\n\t\t\t\t_renderData.elements.push( _face );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsetObject: setObject,\r\n\t\t\tprojectVertex: projectVertex,\r\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\r\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\r\n\t\t\tpushVertex: pushVertex,\r\n\t\t\tpushNormal: pushNormal,\r\n\t\t\tpushUv: pushUv,\r\n\t\t\tpushLine: pushLine,\r\n\t\t\tpushTriangle: pushTriangle\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar renderList = new RenderList();\r\n\r\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\r\n\r\n\t\t_faceCount = 0;\r\n\t\t_lineCount = 0;\r\n\t\t_spriteCount = 0;\r\n\r\n\t\t_renderData.elements.length = 0;\r\n\r\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\t_viewMatrix.copy( camera.matrixWorldInverse.getInverse( camera.matrixWorld ) );\r\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\r\n\r\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\r\n\r\n\t\t//\r\n\r\n\t\t_objectCount = 0;\r\n\r\n\t\t_renderData.objects.length = 0;\r\n\t\t_renderData.lights.length = 0;\r\n\r\n\t\tscene.traverseVisible( function ( object ) {\r\n\r\n\t\t\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\t\t\t_renderData.lights.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite ) {\r\n\r\n\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\tif ( material.visible === false ) return;\r\n\r\n\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\r\n\t\t\t\t\t_object = getNextObjectInPool();\r\n\t\t\t\t\t_object.id = object.id;\r\n\t\t\t\t\t_object.object = object;\r\n\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t_vector3.applyProjection( _viewProjectionMatrix );\r\n\t\t\t\t\t_object.z = _vector3.z;\r\n\t\t\t\t\t_object.renderOrder = object.renderOrder;\r\n\r\n\t\t\t\t\t_renderData.objects.push( _object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\tif ( sortObjects === true ) {\r\n\r\n\t\t\t_renderData.objects.sort( painterSort );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfor ( var o = 0, ol = _renderData.objects.length; o < ol; o ++ ) {\r\n\r\n\t\t\tvar object = _renderData.objects[ o ].object;\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\trenderList.setObject( object );\r\n\r\n\t\t\t_modelMatrix = object.matrixWorld;\r\n\r\n\t\t\t_vertexCount = 0;\r\n\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\r\n\r\n\t\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t\t\t\tvar indices = geometry.index.array;\r\n\r\n\t\t\t\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var o = 0; o < groups.length; o ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ o ];\r\n\r\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\r\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\r\n\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\r\n\t\t\t\t\tvar objectMaterials = isFaceMaterial === true ? object.material : null;\r\n\r\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\t\tvar vertex = vertices[ v ];\r\n\r\n\t\t\t\t\t\t_vector3.copy( vertex );\r\n\r\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\r\n\r\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\r\n\r\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\r\n\r\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\r\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\r\n\r\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\r\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\r\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\t\tvar face = faces[ f ];\r\n\r\n\t\t\t\t\t\tmaterial = isFaceMaterial === true\r\n\t\t\t\t\t\t\t ? objectMaterials.materials[ face.materialIndex ]\r\n\t\t\t\t\t\t\t : object.material;\r\n\r\n\t\t\t\t\t\tif ( material === undefined ) continue;\r\n\r\n\t\t\t\t\t\tvar side = material.side;\r\n\r\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\r\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\r\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\r\n\r\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\r\n\r\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\r\n\r\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\r\n\r\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\r\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_face = getNextFaceInPool();\r\n\r\n\t\t\t\t\t\t_face.id = object.id;\r\n\t\t\t\t\t\t_face.v1.copy( v1 );\r\n\t\t\t\t\t\t_face.v2.copy( v2 );\r\n\t\t\t\t\t\t_face.v3.copy( v3 );\r\n\r\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\r\n\r\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n\t\t\t\t\t\t\t_face.normalModel.negate();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\r\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\r\n\r\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\r\n\r\n\t\t\t\t\t\t\t\tnormalModel.negate();\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\r\n\r\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\r\n\r\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_face.color = face.color;\r\n\t\t\t\t\t\t_face.material = material;\r\n\r\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\r\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\r\n\r\n\t\t\t\t\t\t_renderData.elements.push( _face );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\t\tvar attributes = geometry.attributes;\r\n\r\n\t\t\t\t\tif ( attributes.position !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\r\n\r\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\r\n\r\n\t\t\t\t\tvar vertices = object.geometry.vertices;\r\n\r\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\r\n\r\n\t\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\r\n\r\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\t\t\t\tv1 = getNextVertexInPool();\r\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\r\n\r\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\r\n\r\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\r\n\r\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\r\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\r\n\r\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\r\n\r\n\t\t\t\t\t\t\t// Perform the perspective divide\r\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\r\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\r\n\r\n\t\t\t\t\t\t\t_line = getNextLineInPool();\r\n\r\n\t\t\t\t\t\t\t_line.id = object.id;\r\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\r\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\r\n\r\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\r\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\r\n\r\n\t\t\t\t\t\t\t_line.material = object.material;\r\n\r\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\r\n\r\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\r\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\r\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\r\n\r\n\t\t\t\tvar invW = 1 / _vector4.w;\r\n\r\n\t\t\t\t_vector4.z *= invW;\r\n\r\n\t\t\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\r\n\r\n\t\t\t\t\t_sprite = getNextSpriteInPool();\r\n\t\t\t\t\t_sprite.id = object.id;\r\n\t\t\t\t\t_sprite.x = _vector4.x * invW;\r\n\t\t\t\t\t_sprite.y = _vector4.y * invW;\r\n\t\t\t\t\t_sprite.z = _vector4.z;\r\n\t\t\t\t\t_sprite.renderOrder = object.renderOrder;\r\n\t\t\t\t\t_sprite.object = object;\r\n\r\n\t\t\t\t\t_sprite.rotation = object.rotation;\r\n\r\n\t\t\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\r\n\t\t\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\r\n\r\n\t\t\t\t\t_sprite.material = object.material;\r\n\r\n\t\t\t\t\t_renderData.elements.push( _sprite );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( sortElements === true ) {\r\n\r\n\t\t\t_renderData.elements.sort( painterSort );\r\n\r\n\t\t}\r\n\r\n\t\treturn _renderData;\r\n\r\n\t};\r\n\r\n\t// Pools\r\n\r\n\tfunction getNextObjectInPool() {\r\n\r\n\t\tif ( _objectCount === _objectPoolLength ) {\r\n\r\n\t\t\tvar object = new THREE.RenderableObject();\r\n\t\t\t_objectPool.push( object );\r\n\t\t\t_objectPoolLength ++;\r\n\t\t\t_objectCount ++;\r\n\t\t\treturn object;\r\n\r\n\t\t}\r\n\r\n\t\treturn _objectPool[ _objectCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextVertexInPool() {\r\n\r\n\t\tif ( _vertexCount === _vertexPoolLength ) {\r\n\r\n\t\t\tvar vertex = new THREE.RenderableVertex();\r\n\t\t\t_vertexPool.push( vertex );\r\n\t\t\t_vertexPoolLength ++;\r\n\t\t\t_vertexCount ++;\r\n\t\t\treturn vertex;\r\n\r\n\t\t}\r\n\r\n\t\treturn _vertexPool[ _vertexCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextFaceInPool() {\r\n\r\n\t\tif ( _faceCount === _facePoolLength ) {\r\n\r\n\t\t\tvar face = new THREE.RenderableFace();\r\n\t\t\t_facePool.push( face );\r\n\t\t\t_facePoolLength ++;\r\n\t\t\t_faceCount ++;\r\n\t\t\treturn face;\r\n\r\n\t\t}\r\n\r\n\t\treturn _facePool[ _faceCount ++ ];\r\n\r\n\r\n\t}\r\n\r\n\tfunction getNextLineInPool() {\r\n\r\n\t\tif ( _lineCount === _linePoolLength ) {\r\n\r\n\t\t\tvar line = new THREE.RenderableLine();\r\n\t\t\t_linePool.push( line );\r\n\t\t\t_linePoolLength ++;\r\n\t\t\t_lineCount ++;\r\n\t\t\treturn line;\r\n\r\n\t\t}\r\n\r\n\t\treturn _linePool[ _lineCount ++ ];\r\n\r\n\t}\r\n\r\n\tfunction getNextSpriteInPool() {\r\n\r\n\t\tif ( _spriteCount === _spritePoolLength ) {\r\n\r\n\t\t\tvar sprite = new THREE.RenderableSprite();\r\n\t\t\t_spritePool.push( sprite );\r\n\t\t\t_spritePoolLength ++;\r\n\t\t\t_spriteCount ++;\r\n\t\t\treturn sprite;\r\n\r\n\t\t}\r\n\r\n\t\treturn _spritePool[ _spriteCount ++ ];\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tfunction painterSort( a, b ) {\r\n\r\n\t\tif ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else if ( a.id !== b.id ) {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn 0;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction clipLine( s1, s2 ) {\r\n\r\n\t\tvar alpha1 = 0, alpha2 = 1,\r\n\r\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\r\n\t\t// Z = -1 and Z = +1, respectively.\r\n\t\tbc1near =  s1.z + s1.w,\r\n\t\tbc2near =  s2.z + s2.w,\r\n\t\tbc1far =  - s1.z + s1.w,\r\n\t\tbc2far =  - s2.z + s2.w;\r\n\r\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\r\n\r\n\t\t\t// Both vertices lie entirely within all clip planes.\r\n\t\t\treturn true;\r\n\r\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\r\n\r\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\r\n\t\t\treturn false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// The line segment spans at least one clip plane.\r\n\r\n\t\t\tif ( bc1near < 0 ) {\r\n\r\n\t\t\t\t// v1 lies outside the near plane, v2 inside\r\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\r\n\r\n\t\t\t} else if ( bc2near < 0 ) {\r\n\r\n\t\t\t\t// v2 lies outside the near plane, v1 inside\r\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( bc1far < 0 ) {\r\n\r\n\t\t\t\t// v1 lies outside the far plane, v2 inside\r\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\r\n\r\n\t\t\t} else if ( bc2far < 0 ) {\r\n\r\n\t\t\t\t// v2 lies outside the far plane, v2 inside\r\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( alpha2 < alpha1 ) {\r\n\r\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\r\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\r\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\r\n\t\t\t\ts1.lerp( s2, alpha1 );\r\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/examples/js/renderers/Projector.js\n ** module id = 6\n ** module chunks = 0\n **/","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nmodule.exports = function isPlainObject(o) {\n  var ctor,prot;\n  \n  if (isObjectObject(o) === false) return false;\n  \n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n  \n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n  \n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n  \n  // Most likely a plain Object\n  return true;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/is-plain-object/index.js\n ** module id = 7\n ** module chunks = 0\n **/","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isObject(val) {\n  return val != null && typeof val === 'object'\n    && !Array.isArray(val);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/isobject/index.js\n ** module id = 8\n ** module chunks = 0\n **/","/*!\n * EventEmitter2\n * https://github.com/hij1nx/EventEmitter2\n *\n * Copyright (c) 2013 hij1nx\n * Licensed under the MIT license.\n */\n;!function(undefined) {\n\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = {};\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n\n      this._conf = conf;\n\n      conf.delimiter && (this.delimiter = conf.delimiter);\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this.newListener = conf.newListener);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this.newListener = false;\n    configure.call(this, conf);\n  }\n\n  //\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return [];\n    }\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n    if (i === typeLength && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return [tree];\n      } else {\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n        return [tree];\n      }\n    }\n\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (currentType === '*') {\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n          }\n        }\n        return listeners;\n      } else if(currentType === '**') {\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n        if(endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n        }\n\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            if(branch === '*' || branch === '**') {\n              if(tree[branch]._listeners && !endReached) {\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n              }\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            } else if(branch === nextType) {\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            }\n          }\n        }\n        return listeners;\n      }\n\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n    }\n\n    xTree = tree['*'];\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i+1);\n    }\n\n    xxTree = tree['**'];\n    if(xxTree) {\n      if(i < typeLength) {\n        if(xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength);\n        }\n\n        // Build arrays of matching next branches and others.\n        for(branch in xxTree) {\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n            if(branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\n            } else if(branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n            }\n          }\n        }\n      } else if(xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength);\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener) {\n\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n    //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n    for(var i = 0, len = type.length; i+1 < len; i++) {\n      if(type[i] === '**' && type[i+1] === '**') {\n        return;\n      }\n    }\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n\n      if (!tree[name]) {\n        tree[name] = {};\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        }\n        else if(typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        }\n        else if (isArray(tree._listeners)) {\n\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n\n            var m = defaultMaxListeners;\n\n            if (typeof this._events.maxListeners !== 'undefined') {\n              m = this._events.maxListeners;\n            }\n\n            if (m > 0 && tree._listeners.length > m) {\n\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' +\n                            'leak detected. %d listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit.',\n                            tree._listeners.length);\n              console.trace();\n            }\n          }\n        }\n        return true;\n      }\n      name = type.shift();\n    }\n    return true;\n  }\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n    if (!this._conf) this._conf = {};\n    this._conf.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n\n    this.on(event, listener);\n\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function() {\n\n    this._events || init.call(this);\n\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) { return false; }\n    }\n\n    // Loop through the *_all* functions and invoke them.\n    if (this._all) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        this._all[i].apply(this, args);\n      }\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n\n      if (!this._all &&\n        !this._events.error &&\n        !(this.wildcard && this.listenerTree.error)) {\n\n        if (arguments[1] instanceof Error) {\n          throw arguments[1]; // Unhandled 'error' event\n        } else {\n          throw new Error(\"Uncaught, unspecified 'error' event.\");\n        }\n        return false;\n      }\n    }\n\n    var handler;\n\n    if(this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    }\n    else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      if (arguments.length === 1) {\n        handler.call(this);\n      }\n      else if (arguments.length > 1)\n        switch (arguments.length) {\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n          // slower\n          default:\n            var l = arguments.length;\n            var args = new Array(l - 1);\n            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n            handler.apply(this, args);\n        }\n      return true;\n    }\n    else if (handler) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        this.event = type;\n        listeners[i].apply(this, args);\n      }\n      return (listeners.length > 0) || !!this._all;\n    }\n    else {\n      return !!this._all;\n    }\n\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n\n    if (typeof type === 'function') {\n      this.onAny(type);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n    this._events || init.call(this);\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    this.emit('newListener', type, listener);\n\n    if(this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    }\n    else if(typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n    else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n      // Check for listener leak\n      if (!this._events[type].warned) {\n\n        var m = defaultMaxListeners;\n\n        if (typeof this._events.maxListeners !== 'undefined') {\n          m = this._events.maxListeners;\n        }\n\n        if (m > 0 && this._events[type].length > m) {\n\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' +\n                        'leak detected. %d listeners added. ' +\n                        'Use emitter.setMaxListeners() to increase limit.',\n                        this._events[type].length);\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if(!this._all) {\n      this._all = [];\n    }\n\n    // Add the function to the event listener collection.\n    this._all.push(fn);\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,leafs=[];\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n    }\n    else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({_listeners:handlers});\n    }\n\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n      if (isArray(handlers)) {\n\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener ||\n            (handlers[i].listener && handlers[i].listener === listener) ||\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if(this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        }\n        else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if(this.wildcard) {\n            delete leaf._listeners;\n          }\n          else {\n            delete this._events[type];\n          }\n        }\n        return this;\n      }\n      else if (handlers === listener ||\n        (handlers.listener && handlers.listener === listener) ||\n        (handlers._origin && handlers._origin === listener)) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function(type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n        var leaf = leafs[iLeaf];\n        leaf._listeners = null;\n      }\n    }\n    else {\n      if (!this._events[type]) return this;\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function(type) {\n    if(this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n\n    if (!this._events[type]) this._events[type] = [];\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  if (typeof define === 'function' && define.amd) {\n     // AMD. Register as an anonymous module.\n    define(function() {\n      return EventEmitter;\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    exports.EventEmitter2 = EventEmitter;\n  }\n  else {\n    // Browser global.\n    window.EventEmitter2 = EventEmitter;\n  }\n}();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/EventEmitter2/lib/eventemitter2.js\n ** module id = 9\n ** module chunks = 0\n **/","module.exports = {Promise: window['Promise']}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/polyfills/es6-promise.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var shrinkChild = shrink.childNodes[0];\n\n            var lastWidth, lastHeight;\n\n            var reset = function() {\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n                expand.scrollLeft = expand.scrollWidth;\n                expand.scrollTop = expand.scrollHeight;\n                shrink.scrollLeft = shrink.scrollWidth;\n                shrink.scrollTop = shrink.scrollHeight;\n                lastWidth = element.offsetWidth;\n                lastHeight = element.offsetHeight;\n            };\n\n            reset();\n\n            var changed = function() {\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            var onScroll = function() {\n              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                  changed();\n              }\n              reset();\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        var elementType = Object.prototype.toString.call(element);\n        var isCollectionTyped = ('[object Array]' === elementType\n            || ('[object NodeList]' === elementType)\n            || ('[object HTMLCollection]' === elementType)\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n        );\n\n        if (isCollectionTyped) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n\n        this.detach = function() {\n            if (isCollectionTyped) {\n                var i = 0, j = element.length;\n                for (; i < j; i++) {\n                    ResizeSensor.detach(element[i]);\n                }\n            } else {\n                ResizeSensor.detach(element);\n            }\n        };\n    };\n\n    ResizeSensor.detach = function(element) {\n        if (element.resizeSensor) {\n            element.removeChild(element.resizeSensor);\n            delete element.resizeSensor;\n            delete element.resizedAttached;\n        }\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ResizeSensor;\n    }\n    else {\n        window.ResizeSensor = ResizeSensor;\n    }\n\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-element-queries/src/ResizeSensor.js\n ** module id = 11\n ** module chunks = 0\n **/","import Vector3 = THREE.Vector3;\nimport {ITrendOptions, Trend, ITrendData} from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Utils} from './Utils';\nimport {IChartWidgetOptions, ChartWidget} from \"./Widget\";\nimport {TrendsManager, ITrendsOptions} from \"./TrendsManager\";\nimport {Screen} from \"./Screen\";\nimport {AxisMarks} from \"./AxisMarks\";\nimport {\n\tAXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions, IAnimationsOptions, AXIS_RANGE_TYPE\n} from \"./interfaces\";\nimport {Chart} from \"./Chart\";\nimport {Promise} from './deps/deps';\nimport { ChartPlugin } from './Plugin';\n\n\ninterface IRecalculatedStateResult {\n\tchangedProps: IChartState,\n\tpatch: IChartState\n}\n\nconst CHART_STATE_EVENTS = {\n\tINITIAL_STATE_APPLIED: 'initialStateApplied',\n\tREADY: 'ready',\n\tDESTROY: 'destroy',\n\tCHANGE: 'change',\n\tTREND_CHANGE: 'trendChange',\n\tTRENDS_CHANGE: 'trendsChange',\n\tZOOM: 'zoom',\n\tRESIZE: 'resize',\n\tSCROLL: 'scroll',\n\tSCROLL_STOP: 'scrollStop',\n\tPLUGINS_STATE_CHANGED: 'pluginsStateChanged'\n};\n\n/**\n * readonly computed state data\n * calculated after recalculateState() call\n * contains cached values\n */\nexport interface IChartStateComputedData {\n\ttrends?: {\n\t\tmaxXVal: number,\n\t\tminXVal: number\n\t}\n}\n\nexport interface IChartState {\n\tprevState?: IChartState,\n\twidth?: number;\n\theight?: number;\n\tzoom?: number;\n\txAxis?: IAxisOptions,\n\tyAxis?: IAxisOptions,\n\tanimations?: IAnimationsOptions,\n\ttrends?: ITrendsOptions,\n\twidgets?: {[widgetName: string]: IChartWidgetOptions},\n\tcursor?: {\n\t\tdragMode?: boolean,\n\t\tx?: number,\n\t\ty?: number\n\t},\n\n\t/**\n\t * use fps = 0 for no limits\n\t */\n\tautoRender?: {enabled?: boolean, fps?: number};\n\n\t/**\n\t * by default 'WebGLRenderer'\n\t * also available 'CanvasRenderer'\n\t */\n\trenderer?: 'WebGLRenderer' | 'CanvasRenderer';\n\n\n\tautoResize?: boolean;\n\tcontrols?: {enabled: boolean};\n\tautoScroll?: boolean;\n\tshowStats?: boolean;\n\tbackgroundColor?: number;\n\tbackgroundOpacity?: number;\n\tcomputedData?: IChartStateComputedData,\n\t/**\n\t * overridden settings for single setState operation\n\t */\n\toperationState?: IChartState;\n\tpluginsState?: {[pluginName: string]: any};\n\teventEmitterMaxListeners?: number;\n\t[key: string]: any; // for \"for in\" loops\n}\n\n/**\n *  class for manage chart state, all state changes caused only by State.setState method\n */\nexport class ChartState {\n\n\tdata: IChartState = {\n\t\tprevState: {},\n\t\t$el: null,\n\t\tzoom: 0,\n\t\txAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.ALL,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tscroll: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 0, end: 5},\n\t\t\t\tmargin: {start: 0, end: 5}\n\t\t\t},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tgridMinSize: 100,\n\t\t\tautoScroll: true,\n\t\t\tmarks: [],\n\t\t},\n\t\tyAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.RELATIVE_END,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 5, end: 5},\n\t\t\t\tmargin: {start: 5, end: 5}\n\t\t\t},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tgridMinSize: 50,\n\t\t\tmarks: []\n\t\t},\n\t\tanimations: {\n\t\t\tenabled: true,\n\t\t\ttrendChangeSpeed: 0.5,\n\t\t\ttrendChangeEase: void 0, //Linear.easeNone,\n\t\t\tzoomSpeed: 0.25,\n\t\t\tzoomEase: Linear.easeNone,\n\t\t\tscrollSpeed: 0.5,\n\t\t\tscrollEase: Linear.easeNone,\n\t\t\tautoScrollSpeed: 1,\n\t\t\tautoScrollEase: Linear.easeNone,\n\t\t},\n\t\tautoRender: {enabled: true, fps: 0},\n\t\tautoResize: true,\n\t\trenderer: 'WebGLRenderer',\n\t\tautoScroll: true,\n\t\tcontrols: {enabled: true},\n\t\tcursor: {\n\t\t\tdragMode: false,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\tbackgroundColor: 0x000000,\n\t\tbackgroundOpacity: 1,\n\t\tshowStats: false,\n\t\tpluginsState: {},\n\t\teventEmitterMaxListeners: 20\n\t};\n\twidgetsClasses: {[name: string]: typeof ChartWidget} = {};\n\tplugins: {[pluginName: string]: ChartPlugin} = {};\n\ttrendsManager: TrendsManager;\n\tscreen: Screen;\n\txAxisMarks: AxisMarks;\n\tyAxisMarks: AxisMarks;\n\n\t/**\n\t * true then chartState was initialized and ready to use\n\t */\n\tisReady = false;\n\n\n\tprivate ee: EventEmitter;\n\n\tconstructor(\n\t\tinitialState: IChartState,\n\t\twidgetsClasses: {[name: string]: typeof ChartWidget} = {},\n\t\tplugins: ChartPlugin[] = []\n\t) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n\n\t\tthis.widgetsClasses = widgetsClasses;\n\t\tthis.trendsManager = new TrendsManager(this, initialState);\n\t\tinitialState.trends = this.trendsManager.calculatedOptions;\n\t\tinitialState = this.installPlugins(plugins, initialState);\n\t\tthis.setState(initialState);\n\t\tthis.setState({computedData: this.getComputedData()});\n\t\tthis.savePrevState();\n\n\t\tthis.screen = new Screen(this);\n\t\tthis.xAxisMarks = new AxisMarks(this, AXIS_TYPE.X);\n\t\tthis.yAxisMarks = new AxisMarks(this, AXIS_TYPE.Y);\n\t\tthis.initListeners();\n\t\t\n\t\t// message to other modules that ChartState.data is ready for use \n\t\tthis.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\n\t\t// message to other modules that ChartState is ready for use\n\t\tthis.isReady = true;\n\t\tthis.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t}\n\n\t/**\n\t * destroy state, use Chart.destroy to completely destroy chart\n\t */\n\tdestroy() {\n\t\tthis.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t\tthis.ee.removeAllListeners();\n\t\tthis.data = {};\n\t}\n\n\tonDestroy(cb: Function) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t}\n\n\tonInitialStateApplied(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t}\n\n\tonReady(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t}\n\n\tonChange(cb: (changedProps: IChartState) => void ) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t}\n\n\tonTrendChange(cb: (trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t}\n\n\tonTrendsChange(cb: (trendsOptions: ITrendsOptions) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t}\n\n\tonScrollStop(cb: () => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t}\n\n\tonScroll(cb: (scrollOptions: {deltaX: number}) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t}\n\n\tonZoom(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t}\n\n\tonResize(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t}\n\n\tonPluginsStateChange(cb: (changedPluginsStates: {[pluginName: string]: Plugin}) => any) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t}\n\t\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.trendsManager.getTrend(trendName);\n\t}\n\n\tsetState(newState: IChartState, eventData?: any, silent = false) {\n\t\tvar stateData = this.data;\n\n\t\tvar changedProps: IChartState = {};\n\t\tfor (let key in newState) {\n\t\t\tif ((<any>stateData)[key] !== newState[key]) {\n\t\t\t\tchangedProps[key] = newState[key];\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(changedProps);\n\n\n\t\t// temporary remove trends data from newState by performance reasons\n\t\tlet trendsData: {[trendName: string]: ITrendData} = {};\n\t\tif (newState.trends) for (let trendName in newState.trends) {\n\t\t\tlet trendOptions = newState.trends[trendName];\n\t\t\tif (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t\t\tdelete trendOptions.data;\n\t\t}\n\t\tlet newStateContainsData = Object.keys(trendsData).length > 0;\n\t\t\n\n\t\tthis.data = Utils.deepMerge(this.data, newState, false);\n\n\t\t// return data to state\n\t\tif (newStateContainsData) for (let trendName in trendsData) {\n\t\t\tthis.data.trends[trendName].data = trendsData[trendName];\n\t\t}\n\n\t\tif (silent) return;\n\n\t\t// recalculate all dynamic state props\n\t\tvar recalculateResult = this.recalculateState(changedProps);\n\t\tchangedProps = recalculateResult.changedProps;\n\t\t\n\t\tthis.emitChangedStateEvents(changedProps, eventData);\n\n\t}\n\n\t/**\n\t * recalculate all computed state props\n\t */\n\tprivate recalculateState(changedProps?: IChartState): IRecalculatedStateResult {\n\t\tvar data = this.data;\n\t\tvar patch: IChartState = {};\n\t\tvar actualData = Utils.deepMerge({}, data);\n\n\t\t// recalculate widgets\n\t\tif (changedProps.widgets || !data.widgets) {\n\t\t\tpatch.widgets = {};\n\t\t\tlet widgetsOptions = data.widgets || {};\n\t\t\tfor (let widgetName in this.widgetsClasses) {\n\t\t\t\tlet WidgetClass =  this.widgetsClasses[widgetName];\n\t\t\t\tlet userOptions = widgetsOptions[widgetName] || {};\n\t\t\t\tlet defaultOptions = WidgetClass.getDefaultOptions() || ChartWidget.getDefaultOptions();\n\t\t\t\tpatch.widgets[widgetName] = Utils.deepMerge(defaultOptions, userOptions) as IChartWidgetOptions;\n\t\t\t}\n\t\t}\n\n\t\t// recalculate scroll position by changed cursor options\n\t\tvar cursorOptions = changedProps.cursor;\n\t\tvar isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t\tif (isMouseDrag) {\n\t\t\tvar oldX = data.prevState.cursor.x;\n\t\t\tvar currentX =  cursorOptions.x;\n\t\t\tvar currentScroll = data.xAxis.range.scroll;\n\t\t\tvar deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t\t\tpatch.xAxis = {range: {scroll: currentScroll + deltaXVal}};\n\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: patch.xAxis} as IChartState)\n\t\t}\n\n\t\tlet chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\n\t\tlet scrollXChanged = false;\n\t\tlet needToRecalculateXAxis = (\n\t\t\tisMouseDrag ||\n\t\t\tchartWasResized ||\n\t\t\t(changedProps.xAxis && (changedProps.xAxis.range)) ||\n\t\t\tthis.data.xAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateXAxis) {\n\t\t\tlet xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t\t\tif (xAxisPatch) {\n\t\t\t\tscrollXChanged = true;\n\t\t\t\tpatch = Utils.deepMerge(patch, {xAxis: xAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: xAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\n\n\t\t// recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\n\t\tlet needToRecalculateYAxis = (\n\t\t\tchartWasResized ||\n\t\t\t(\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.RELATIVE_END ||\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.AUTO ||\n\t\t\t\tdata.yAxis.range.isMirrorMode\n\t\t\t) &&\n\t\t\t(scrollXChanged || changedProps.trends || changedProps.yAxis) ||\n\t\t\tthis.data.yAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateYAxis){\n\t\t\tlet yAxisPatch = this.recalculateYAxis(actualData);\n\t\t\tif (yAxisPatch) {\n\t\t\t\tpatch = Utils.deepMerge(patch, {yAxis: yAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {yAxis: yAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(patch);\n\t\tlet allChangedProps = Utils.deepMerge(changedProps, patch);\n\t\tpatch.computedData = this.getComputedData(allChangedProps);\n\t\tthis.savePrevState(patch);\n\t\tthis.data = Utils.deepMerge(this.data, patch);\n\t\treturn {changedProps: allChangedProps, patch: patch}\n\t}\n\n\tprivate getComputedData(changedProps?: IChartState): IChartStateComputedData {\n\t\tvar computeAll = !changedProps;\n\t\tvar computedData: IChartStateComputedData = {};\n\n\t\tif (computeAll || changedProps.trends && this.trendsManager) {\n\t\t\tcomputedData.trends = {\n\t\t\t\tmaxXVal: this.trendsManager.getEndXVal(),\n\t\t\t\tminXVal: this.trendsManager.getStartXVal()\n\t\t\t}\n\t\t}\n\t\treturn computedData;\n\t}\n\n\tprivate savePrevState(changedProps?: IChartState) {\n\t\t// var propsToSave = changedProps ? Object.keys(changedProps) : Object.keys(this.data);\n\t\tif (!changedProps) changedProps = this.data;\n\t\tvar prevState = this.data.prevState;\n\n\t\t// prevent to store prev trend data by performance reasons\n\t\tUtils.copyProps(this.data, prevState, changedProps, ['trends']);\n\n\t}\n\n\tprivate emitChangedStateEvents(changedProps: IChartState, eventData: any) {\n\t\tvar prevState = this.data.prevState;\n\n\t\t// emit common change event\n\t\tthis.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\n\t\t// emit event for each changed state property\n\t\tfor (let key in changedProps) {\n\t\t\tthis.ee.emit(key + 'Change', changedProps[key], eventData);\n\t\t}\n\n\t\tif (!this.isReady) return;\n\n\t\t// emit special events based on changed state\n\t\tlet scrollStopEventNeeded = (\n\t\t\tchangedProps.cursor &&\n\t\t\tchangedProps.cursor.dragMode === false &&\n\t\t\tprevState.cursor.dragMode === true\n\t\t);\n\t\tscrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\n\t\tlet scrollChangeEventsNeeded = (\n\t\t\tchangedProps.xAxis &&\n\t\t\tchangedProps.xAxis.range &&\n\t\t\tchangedProps.xAxis.range.scroll !== void 0\n\t\t);\n\t\tscrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\n\t\tlet zoomEventsNeeded = (\n\t\t\t(changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\n\t\t\t(changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom)\n\t\t);\n\t\tzoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\n\t\tlet resizeEventNeeded = (changedProps.width || changedProps.height);\n\t\tresizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\n\t\tlet pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\n\t\tpluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t}\n\n\n\t/**\n\t * init plugins and save plugins options in initialState\n\t */\n\tprivate installPlugins(plugins: ChartPlugin[], initialState: IChartState): IChartState {\n\t\tinitialState.pluginsState = {};\n\t\tplugins.forEach(plugin => {\n\t\t\tlet PluginClass = plugin.constructor as typeof ChartPlugin;\n\t\t\tlet pluginName = PluginClass.NAME;\n\t\t\tPluginClass.pluginWidgets.forEach(\n\t\t\t\tPluginWidget => this.widgetsClasses[PluginWidget.widgetName] = PluginWidget\n\t\t\t);\n\t\t\tinitialState.pluginsState[pluginName] = Utils.deepMerge({}, plugin.initialState);\n\t\t\tthis.plugins[pluginName] = plugin;\n\t\t\tplugin.setupChartState(this);\n\t\t});\n\t\treturn initialState;\n\t}\n\n\n\t/**\n\t * returns plugin instance by plugin name\n\t * @example\n\t */\n\tgetPlugin(pluginName: string): ChartPlugin {\n\t\treturn this.plugins[pluginName];\n\t}\n\n\n\tprivate initListeners() {\n\t\tthis.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, (changedTrends: ITrendsOptions, newData: ITrendData) => {\n\t\t\tthis.handleTrendsChange(changedTrends, newData)\n\t\t});\n\t}\n\n\tprivate handleTrendsChange(changedTrends: ITrendsOptions, newData: ITrendData) {\n\t\tfor (let trendName in changedTrends) {\n\t\t\tthis.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t\t}\n\t}\n\n\tprivate recalculateXAxis(actualData: IChartState, changedProps: IChartState): IAxisOptions {\n\t\tvar axisRange = actualData.xAxis.range;\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar isInitialize = axisRange.zeroVal == void 0;\n\t\tvar zeroVal: number, scaleFactor: number;\n\t\tvar zoom = axisRange.zoom;\n\n\t\tif (axisRange.isMirrorMode) {\n\t\t\tUtils.error('range.isMirrorMode available only for yAxis.range');\n\t\t}\n\n\t\tif (isInitialize) {\n\t\t\tzeroVal = axisRange.from;\n\t\t\tscaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t} else {\n\t\t\tzeroVal = axisRange.zeroVal;\n\t\t\tscaleFactor = axisRange.scaleFactor;\n\n\t\t\t// recalculate range.zoom and range.scroll then range.from or range.to was changed\n\t\t\tif (\n\t\t\t\tchangedProps.xAxis &&\n\t\t\t\t(changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)\n\t\t\t) {\n\t\t\t\tif (changedProps.xAxis.range.zoom) {\n\t\t\t\t\tUtils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t\t\t\t}\n\t\t\t\tlet currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\t\tpatch.range.scroll = axisRange.from - zeroVal;\n\t\t\t\tpatch.range.zoom = currentScaleFactor / scaleFactor;\n\t\t\t\treturn patch;\n\t\t\t}\n\t\t}\n\n\n\t\t// recalculate range.from and range.to then range.zoom or range.scroll was changed\n\t\tdo {\n\t\t\tvar from = zeroVal + axisRange.scroll;\n\t\t\tvar to = from + actualData.width / (scaleFactor * zoom);\n\t\t\tvar rangeLength = to - from;\n\t\t\tvar needToRecalculateZoom = false;\n\t\t\tvar rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\n\t\t\tvar rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\n\t\t\tneedToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t\t\tif (needToRecalculateZoom) {\n\t\t\t\tvar fixScale = rangeLength > axisRange.maxLength ?\n\t\t\t\t\trangeLength / axisRange.maxLength :\n\t\t\t\t\trangeLength / axisRange.minLength;\n\t\t\t\tvar zoom = zoom * fixScale;\n\t\t\t\tpatch.range.zoom = zoom;\n\t\t\t}\n\t\t} while (needToRecalculateZoom);\n\n\t\tpatch.range.from = from;\n\t\tpatch.range.to = to;\n\t\treturn patch;\n\t}\n\n\n\tprivate recalculateYAxis(actualData: IChartState): IAxisOptions {\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar yAxisRange = actualData.yAxis.range;\n\t\tvar isInitialize = yAxisRange.scaleFactor == void 0;\n\t\tvar trends = this.trendsManager;\n\t\tvar trendsEndXVal = trends.getEndXVal();\n\t\tvar trendsStartXVal = trends.getStartXVal();\n\t\tvar xRange = actualData.xAxis.range;\n\t\tvar {from: xFrom, to: xTo} = xRange;\n\t\tvar xRangeLength = xTo - xFrom;\n\t\tvar zeroVal: number, scaleFactor: number, scroll: number, zoom: number, needToZoom: boolean;\n\n\t\t// check situation when chart was scrolled behind trends end or before trends start\n\t\tif (xTo > trendsEndXVal) {\n\t\t\txTo = trendsEndXVal;\n\t\t\txFrom = xTo - xRangeLength;\n\t\t} else if (xFrom < trendsStartXVal) {\n\t\t\txFrom = trendsStartXVal;\n\t\t\txTo = xFrom + xRangeLength;\n\t\t}\n\n\t\tvar maxY = trends.getMaxYVal(xFrom, xTo);\n\t\tvar minY = trends.getMinYVal(xFrom, xTo);\n\n\t\tvar trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t\tif (yAxisRange.type == AXIS_RANGE_TYPE.RELATIVE_END) {\n\t\t\tif (trendLastY > maxY) maxY = trendLastY;\n\t\t\tif (trendLastY < minY) minY = trendLastY;\n\t\t}\n\n\t\tif (yAxisRange.isMirrorMode) {\n\t\t\tif (yAxisRange.zeroVal == void 0) Utils.error('range.zeroVal must be set when range.isMirrorMode');\n\t\t\tlet distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t\t\tlet distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t\t\tlet maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t\t\tmaxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t\t\tminY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t\t}\n\t\tlet margin = yAxisRange.margin;\n\t\tlet padding = {\n\t\t\tstart: yAxisRange.padding.start + margin.start,\n\t\t\tend: yAxisRange.padding.end + margin.end\n\t\t};\n\n\t\tif (padding.end + padding.start >= actualData.height) {\n\t\t\tUtils.warn('Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly');\n\t\t}\n\n\t\tlet rangeLength = maxY - minY;\n\t\tlet paddingTopInPercents = padding.end / actualData.height;\n\t\tlet paddingBottomInPercents = padding.start / actualData.height;\n\t\tlet rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t\tlet visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t\tlet fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t\tlet toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t\t\n\t\tif (isInitialize) {\n\t\t\tzeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t\t\tscaleFactor = actualData.height / (toVal - fromVal);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t\tneedToZoom = true;\n\t\t} else {\n\t\t\tscaleFactor = yAxisRange.scaleFactor;\n\t\t\tzeroVal = yAxisRange.zeroVal;\n\n\t\t\tlet maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t\t\tlet minScreenY = Math.round(this.getScreenYByValue(minY));\n\t\t\tneedToZoom = (\n\t\t\t\tmaxScreenY > actualData.height - margin.end ||\n\t\t\t\tmaxScreenY < actualData.height - padding.end ||\n\t\t\t\tminScreenY < margin.start ||\n\t\t\t\tminScreenY > padding.start\n\t\t\t);\n\t\t}\n\n\t\tif (!needToZoom) return null;\n\n\t\tscroll = fromVal - zeroVal;\n\t\tzoom = (actualData.height / (toVal - fromVal)) / scaleFactor ;\n\n\t\tvar currentAxisRange = this.data.yAxis.range;\n\t\tif (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t\tif (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t\tif (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t\tif (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t\t\n\t\treturn patch;\n\t}\n\n\tzoom(zoomValue: number, origin = 0.5): Promise<void> {\n\t\tlet {zoom, scroll, scaleFactor} = this.data.xAxis.range;\n\t\tlet newZoom = zoom * zoomValue;\n\t\tlet currentRange = this.data.width / (scaleFactor * zoom);\n\t\tlet nextRange = this.data.width / (scaleFactor * newZoom);\n\t\tlet newScroll = scroll + (currentRange - nextRange) * origin;\n\t\tthis.setState({xAxis: {range: {zoom: newZoom, scroll: newScroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.data.animations.enabled ? this.data.animations.zoomSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\t\n\tzoomToRange(range: number, origin?: number): Promise<void> {\n\t\tvar {scaleFactor, zoom} = this.data.xAxis.range;\n\t\tlet currentRange = this.data.width / (scaleFactor * zoom);\n\t\treturn this.zoom(currentRange / range, origin);\n\t}\n\n\tscrollToEnd(): Promise<void> {\n\t\tlet state = this.data;\n\t\tlet endXVal = this.trendsManager.getEndXVal();\n\t\tlet range = state.xAxis.range;\n\t\tvar scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t\tthis.setState({xAxis: {range: {scroll: scroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.data.animations.enabled ? this.data.animations.scrollSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to xVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.data.xAxis.range;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to yVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.data.yAxis.range;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n\t}\n\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  returns x value by screen x coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\tvar {zeroVal, scroll} = this.data.xAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  returns y value by screen y coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\tvar {zeroVal, scroll} = this.data.yAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByYAxis(y);\n\t}\n\n\n\t/**\n\t *  returns screen x value by screen y coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.data.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t/**\n\t *  returns screen y value by screen y coordinate\n\t */\n\tgetScreenYByValue(yVal: number): number {\n\t\tvar {scroll, zeroVal} = this.data.yAxis.range;\n\t\treturn this.valueToPxByYAxis(yVal - zeroVal - scroll)\n\t}\n\n\n\t/**\n\t * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\n\n\tgetScreenLeftVal() {\n\t\treturn this.getValueByScreenX(0);\n\t}\n\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.data.width);\n\t}\n\n\n\tgetPaddingRight(): number {\n\t\treturn this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/State.ts\n **/","import {EE2} from './deps/deps';\n\n/**\n * this class uses as proxy for EventEmitter2\n */\nexport class EventEmitter {\n\tprivate ee: EventEmitter2;\n\tconstructor() {\n\t\tthis.ee = new EE2();\n\t}\n\temit(eventName: string, ...args: any[]) {\n\t\tthis.ee.emit(eventName, ...args)\n\t}\n\ton(eventName: string, callback: Function) {\n\t\treturn this.ee.on(eventName, callback)\n\t}\n\toff(eventName: string, callback: Function) {\n\t\treturn this.ee.off(eventName, callback);\n\t}\n\tsubscribe(eventName: string, callback: Function): Function {\n\t\tthis.on(eventName, callback);\n\t\treturn () => this.off(eventName, callback);\n\t}\n\tsetMaxListeners(listenersCount: number) {\n\t\tthis.ee.setMaxListeners(listenersCount);\n\t}\n\tremoveAllListeners(eventName?: string) {\n\t\tthis.ee.removeAllListeners(eventName);\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventEmmiter.ts\n **/","import Texture = THREE.Texture;\nimport Color = THREE.Color;\nimport { TIteralable, IIteralable } from \"./interfaces\";\nimport { isPlainObject } from './deps/deps';\n\nfunction deepmerge(target: any, src: any, mergeArrays = true) {\n\tvar array = Array.isArray(src);\n\tvar dst: any = array && [] || {};\n\n\tif (array) {\n\t\ttarget = target || [];\n\t\tif (mergeArrays) {\n\t\t\tdst = dst.concat(target);\n\t\t}\n\t\tsrc.forEach(function(e: any, i: any) {\n\t\t\tif (typeof dst[i] === 'undefined') {\n\t\t\t\tdst[i] = e;\n\t\t\t} else if (typeof e === 'object') {\n\t\t\t\tdst[i] = deepmerge(target[i], e, mergeArrays);\n\t\t\t} else {\n\t\t\t\tif (target.indexOf(e) === -1) {\n\t\t\t\t\tdst.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tif (target && typeof target === 'object') {\n\t\t\tObject.keys(target).forEach(function (key) {\n\t\t\t\tdst[key] = target[key];\n\t\t\t})\n\t\t}\n\t\tObject.keys(src).forEach(function (key) {\n\t\t\tif (typeof src[key] !== 'object' || !src[key]) {\n\t\t\t\tdst[key] = src[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t} else {\n\t\t\t\t\tdst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn dst;\n}\n\n\n\nexport declare type TUid = number;\n\n/**\n * project utils static class\n */\nexport class Utils {\n\n\tprivate static currentId: TUid = 1;\n\n\t/**\n\t * deepMerge based on https://www.npmjs.com/package/deepmerge\n\t */\n\tstatic deepMerge<T> (obj1: T, obj2: T, mergeArrays?: boolean) {\n\t\treturn deepmerge(obj1, obj2, mergeArrays) as T;\n\t}\n\n\t/**\n\t * deepCopy based on JSON.stringify function\n\t * @deprecated\n\t */\n\tstatic deepCopy<T> (obj: T) {\n\t\t// TODO: use deepMerge function to copy\n\t\treturn JSON.parse(JSON.stringify(obj)) as T;\n\t}\n\n\t/**\n\t *\n\t * @example\n\t * // returns \"000015\"\n\t * Utils.toFixed(15, 6);\n\t */\n\tstatic toFixed(num: number, digitsCount: number): string {\n\t\tvar maxDigits = 15;\n\t\tvar result = '';\n\t\tvar intVal = Math.floor(num);\n\t\tvar intStr = intVal.toString();\n\t\tvar lengthDiff = digitsCount - intStr.length;\n\t\tif (lengthDiff > 0 ) {\n\t\t\tresult = (<any>'0').repeat(lengthDiff) + intStr;\n\t\t} else {\n\t\t\tresult = intStr;\n\t\t}\n\t\tvar afterPointDigitsCount = maxDigits - intStr.length;\n\t\tvar afterPointStr = num.toString().split('.')[1];\n\t\tif (afterPointStr) {\n\t\t\tresult += '.' + afterPointStr.substr(0, afterPointDigitsCount);\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic bindEvent() {\n\n\t}\n\n\t/**\n\t * generate texture from canvas context\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture {\n\t\tvar canvas: HTMLCanvasElement = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tvar ctx = canvas.getContext('2d');\n\t\tfn(ctx);\n\t\tvar texture = new THREE.Texture(canvas);\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * generate texture from canvas context with NearestFilter\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createPixelPerfectTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture{\n\t\tvar texture = this.createTexture(width, height, fn);\n\t\t// texture.magFilter = THREE.NearestFilter;\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic error(msg: string) {\n\t\tconsole.error('Chart error: ' + msg);\n\t\tthrow 'Chart: ' + msg;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic warn(msg: string) {\n\t\tconsole.warn('Chart warning: ' + msg);\n\t}\n\n\t/**\n\t * @returns new unique id\n\t */\n\tstatic getUid(): TUid {\n\t\treturn this.currentId++;\n\t}\n\n\t/**\n\t * @returns distance between numbers\n\t */\n\tstatic getDistance(num1: number, num2: number) {\n\t\treturn Math.max(num1, num2) - Math.min(num1, num2);\n\t}\n\n\tstatic binarySearchClosestInd(arr: IIteralable[], num: number, key: string): number {\n\t\tvar mid: number;\n\t\tvar lo = 0;\n\t\tvar hi = arr.length - 1;\n\t\twhile (hi - lo > 1) {\n\t\t\tmid = Math.floor ((lo + hi) / 2);\n\t\t\tif (arr[mid][key] < num) {\n\t\t\t\tlo = mid;\n\t\t\t} else {\n\t\t\t\thi = mid;\n\t\t\t}\n\t\t}\n\t\tif (num - arr[lo][key] <= arr[hi][key] - num) {\n\t\t\treturn lo;\n\t\t}\n\t\treturn hi;\n\t}\n\t\n\tstatic binarySearchClosest<ArrayItem>(arr: ArrayItem[], num: number, key: string): ArrayItem {\n\t\tlet ind = this.binarySearchClosestInd(arr, num, key);\n\t\treturn arr[ind];\n\t}\n\n\n\tstatic rectsIntersect(r1: number[], r2: number[]) {\n\t\tlet [left1, top1, width1, height1] = r1;\n\t\tlet [left2, top2, width2, height2] = r2;\n\t\tlet [right1, right2, bottom1, bottom2] = [left1 + width1, left2 + width2, top1 + height1, top2 + height2];\n\t\treturn !(left2 > right1 ||\n\t\t\tright2 < left1 ||\n\t\t\ttop2 > bottom1 ||\n\t\t\tbottom2 < top1\n\t\t);\n\t}\n\n\n\t/**!\n\t * @preserve $.parseColor\n\t * Copyright 2011 THEtheChad Elliott\n\t * Released under the MIT and GPL licenses.\n\t */\n\n\n// Parse hex/rgb{a} color syntax.\n// @input string\n// @returns array [r,g,b{,o}]\n\tstatic parseColor(color: string): number[] {\n\n\t\tvar cache: any\n\t\t\t, p = parseInt // Use p as a byte saving reference to parseInt\n\t\t\t, color = color.replace(/\\s\\s*/g, '') // Remove all spaces\n\t\t\t;//var\n\n\t\t// Checks for 6 digit hex and converts string to integer\n\t\tif (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\n\n\t\t// Checks for 3 digit hex and converts string to integer\n\t\telse if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\n\t\t\tcache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\n\n\t\t// Checks for rgba and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3], +cache[4]];\n\n\t\t// Checks for rgb and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3]];\n\n\t\t// Otherwise throw an exception to make debugging easier\n\t\telse throw Error(color + ' is not supported by $.parseColor');\n\n\t\t// Performs RGBA conversion by default\n\t\tisNaN(cache[3]) && (cache[3] = 1);\n\t\treturn cache;\n\t\t// Adds or removes 4th value based on rgba support\n\t\t// Support is flipped twice to prevent erros if\n\t\t// it's not defined\n\t\t//return cache.slice(0,3 + !!$.support.rgba);\n\t}\n\n\tstatic getHexColor(str: string): number {\n\t\tvar rgb = this.parseColor(str);\n\t\treturn (rgb[0] << (8 * 2)) + (rgb[1] << 8) + rgb[2];\n\t}\n\n\tstatic throttle(func: Function, ms: number) {\n\n\t\tvar isThrottled = false,\n\t\t\tsavedArgs: any,\n\t\t\tsavedThis: any;\n\n\t\tfunction wrapper() {\n\n\t\t\tif (isThrottled) { // (2)\n\t\t\t\tsavedArgs = arguments;\n\t\t\t\tsavedThis = this;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunc.apply(this, arguments); // (1)\n\n\t\t\tisThrottled = true;\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tisThrottled = false; // (3)\n\t\t\t\tif (savedArgs) {\n\t\t\t\t\twrapper.apply(savedThis, savedArgs);\n\t\t\t\t\tsavedArgs = savedThis = null;\n\t\t\t\t}\n\t\t\t}, ms);\n\t\t}\n\n\t\treturn wrapper;\n\t}\n\n\tstatic msToTimeString(timestamp: number) {\n\t\tvar h = Math.floor(timestamp / 360000);\n\t\tvar m =  Math.floor(timestamp / 60000);\n\t\tvar s =  Math.floor(timestamp / 1000);\n\t\treturn h + ':' + m + ':' + s;\n\t}\n\t\n\tstatic getRandomItem<T>(arr: Array<T>): T {\n\t\tvar ind = Math.floor(Math.random() * arr.length);\n\t\treturn arr[ind];\n\t}\n\n\tstatic copyProps(srcObject: TIteralable, dstObject: TIteralable, props: TIteralable, excludeProps: string[] = []) {\n\t\tfor (var key in props) {\n\t\t\tif (excludeProps.indexOf(key) !== -1) continue;\n\t\t\tif (srcObject[key] == void 0) continue;\n\t\t\tif (isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t\t\t\tthis.copyProps(srcObject[key], dstObject[key], props[key])\n\t\t\t} else {\n\t\t\t\tdstObject[key] = this.deepCopy(srcObject[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Utils.ts\n **/","import {ChartState} from \"./State\";\nimport Object3D = THREE.Object3D;\n\nexport interface IChartWidgetConstructor {\n\tnew (chartState: ChartState): ChartWidget;\n\twidgetName: string;\n\tgetDefaultOptions(): IChartWidgetOptions;\n}\n\n/**\n * base class for all widgets\n * each widget must have widgetName static property\n */\nexport abstract class ChartWidget {\n\tstatic widgetName = '';\n\tprotected chartState: ChartState;\n\tprivate unsubscribers: Function[] = [];\n\n\tconstructor (chartState: ChartState) {\n\t\tthis.chartState = chartState;\n\t\tthis.bindEvents();\n\t}\n\n\t\n\tabstract getObject3D(): Object3D;\n\t\n\tprotected bindEvents() {}\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unsubscribers: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunsubscribers.push(args[0] as Function);\n\t\t} else {\n\t\t\tunsubscribers.push(...args as Function[]);\n\t\t}\n\t\tthis.unsubscribers.push(...unsubscribers);\n\t}\n\tprotected unbindEvents() {\n\t\tthis.unsubscribers.forEach(unsubscriber => unsubscriber());\n\t\tthis.unsubscribers.length = 0;\n\t}\n\t\n\tstatic getDefaultOptions(): IChartWidgetOptions {\n\t\treturn {enabled: true}\n\t}\n}\n\nexport interface IChartWidgetOptions {\n\tenabled: boolean\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Widget.ts\n **/","\nimport {Trend, ITrendOptions} from \"./Trend\";\nimport {ChartState, IChartState} from \"./State\";\nimport { EventEmitter } from './EventEmmiter';\n\nexport interface ITrendsOptions {\n\t[trendName: string]: ITrendOptions;\n}\n\nconst EVENTS = {\n\tSEGMENTS_REBUILDED: 'segmentsRebuilded'\n};\n\n/**\n * Trends manager\n */\nexport class TrendsManager {\n\ttrends: {[name: string]: Trend} = {};\n\tcalculatedOptions: ITrendsOptions;\n\tprivate ee = new EventEmitter();\n\tprivate chartState: ChartState;\n\t\n\tconstructor(state: ChartState, initialState: IChartState) {\n\t\tthis.chartState = state;\n\t\tvar trendsCalculatedOptions: ITrendsOptions = {};\n\t\tfor (let trendName in initialState.trends) {\n\t\t\tlet trend = this.createTrend(state, trendName, initialState);\n\t\t\ttrendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t\t}\n\t\tthis.calculatedOptions = trendsCalculatedOptions;\n\t\tthis.bindEvents();\n\t}\n\n\tgetTrend(trendName: string) {\n\t\treturn this.trends[trendName];\n\t}\n\t\n\tgetEnabledTrends(): Trend[] {\n\t\tvar enabledTrends: Trend[] = [];\n\t\tvar allTrends = this.trends;\n\t\tfor (let trendName in allTrends) {\n\t\t\tlet trend = allTrends[trendName];\n\t\t\ttrend.getOptions().enabled && enabledTrends.push(trend);\n\t\t}\n\t\treturn enabledTrends;\n\t}\n\n\n\tgetStartXVal() {\n\t\tvar trends = this.getEnabledTrends();\n\t\treturn trends[0].getData()[0].xVal;\n\t}\n\n\n\tgetEndXVal(): number {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar firstTrendData = trends[0].getData();\n\t\treturn firstTrendData[firstTrendData.length - 1].xVal;\n\t}\n\t\n\t\n\tgetExtremumYVal(extremumIsMax: boolean, fromX?: number, toX?: number) {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar compareFn: Function;\n\t\tvar result: number;\n\t\tif (extremumIsMax) {\n\t\t\tresult = -Infinity;\n\t\t\tcompareFn = Math.max;\n\t\t} else {\n\t\t\tresult = Infinity;\n\t\t\tcompareFn = Math.min;\n\t\t}\n\t\tfor (let trend of trends) {\n\t\t\tvar trendData = trend.getData(fromX, toX);\n\t\t\tvar trendYValues = trendData.map((dataItem) => dataItem.yVal);\n\t\t\tresult = compareFn(result, ...trendYValues);\n\t\t}\n\t\tif (result == Infinity || result == -Infinity) result = NaN;\n\t\treturn result;\n\t}\n\n\tgetMaxYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(true, fromX, toX)}\n\tgetMinYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(false, fromX, toX)}\n\n\tonSegmentsRebuilded(cb: (trendName: string) => any) {\n\t\treturn this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t}\n\n\tprivate bindEvents() {\n\t\tthis.chartState.onInitialStateApplied(() => this.onInitialStateAppliedHandler());\n\t}\n\n\tprivate onInitialStateAppliedHandler() {\n\t\tfor (let trendName in this.trends) {\n\t\t\tthis.trends[trendName].segments.onRebuild(() => this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName));\n\t\t}\n\t}\n\n\tprivate createTrend(state: ChartState, trendName: string, initialState: IChartState): Trend {\n\t\tlet trend = new Trend(state, trendName, initialState);\n\t\tthis.trends[trendName] = trend;\n\t\treturn trend;\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendsManager.ts\n **/","import {ChartState, IChartState} from \"./State\";\nimport {Utils} from \"./Utils\";\nimport {TrendSegments} from \"./TrendSegments\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Promise} from './deps/deps';\n\nexport interface IPrependPromiseExecutor {\n\t(requestedDataLength: number, resolve: (data: TTrendRawData) => void, reject: () => void): void;\n}\nconst EVENTS = {\n\tCHANGE: 'Change',\n\tPREPEND_REQUEST: 'prependRequest'\n};\nexport enum TREND_TYPE {LINE, CANDLE}\nexport type TTrendRawData = ITrendData | number[];\nexport interface ITrendItem {xVal: number, yVal: number, id?: number}\nexport interface ITrendData extends Array<ITrendItem>{}\nexport interface ITrendTypeSettings {\n\tminSegmentLengthInPx?: number;\n\tmaxSegmentLengthInPx?: number;\n}\nexport interface ITrendOptions {\n\tenabled?: boolean,\n\tdata?: ITrendData\n\tdataset?: ITrendData | number[];\n\tname?: string;\n\ttype?: TREND_TYPE;\n\tlineWidth?: number;\n\tlineColor?: number;\n\thasGradient?: boolean;\n\thasIndicator?: boolean;\n\thasBeacon?: boolean;\n\tmaxSegmentLength?: number;\n\tsettingsForTypes?: {\n\t\tCANDLE?: ITrendTypeSettings,\n\t\tLINE?: ITrendTypeSettings\n\t}\n}\n\nconst DEFAULT_OPTIONS: ITrendOptions = {\n\tenabled: true,\n\ttype: TREND_TYPE.LINE,\n\tdata: [],\n\tmaxSegmentLength: 1000,\n\tlineWidth: 2,\n\tlineColor: 0xFFFFFF,\n\thasGradient: true,\n\thasBeacon: false,\n\tsettingsForTypes: {\n\t\tCANDLE: {\n\t\t\tminSegmentLengthInPx: 20,\n\t\t\tmaxSegmentLengthInPx: 40,\n\t\t},\n\t\tLINE: {\n\t\t\tminSegmentLengthInPx: 2,\n\t\t\tmaxSegmentLengthInPx: 10,\n\t\t}\n\t}\n};\n\nexport class Trend {\n\tname: string;\n\tsegments: TrendSegments;\n\tminXVal = Infinity;\n\tminYVal = Infinity;\n\tmaxXVal = -Infinity;\n\tmaxYVal = -Infinity;\n\tprivate chartState: ChartState;\n\tprivate calculatedOptions: ITrendOptions;\n\tprivate prependRequest: Promise<TTrendRawData>;\n\tprivate ee: EventEmitter;\n\t\n\tconstructor(chartState: ChartState, trendName: string, initialState: IChartState) {\n\t\tvar options = initialState.trends[trendName];\n\t\tthis.name = trendName;\n\t\tthis.chartState = chartState;\n\t\tthis.calculatedOptions = Utils.deepMerge(DEFAULT_OPTIONS, options);\n\t\tthis.calculatedOptions.name = trendName;\n\t\tif (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t\tthis.calculatedOptions.dataset = [];\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvents();\n\t}\n\n\tprivate onInitialStateApplied() {\n\t\tthis.segments = new TrendSegments(this.chartState, this);\n\t}\n\n\tprivate bindEvents() {\n\t\tvar chartState = this.chartState;\n\t\tchartState.onInitialStateApplied(() => this.onInitialStateApplied());\n\t\tchartState.onScrollStop(() => this.checkForPrependRequest());\n\t\tchartState.onZoom(() => this.checkForPrependRequest());\n\t\tchartState.onTrendChange((trendName, changedOptions, newData) => this.ee.emit(EVENTS.CHANGE, changedOptions, newData));\n\t\tchartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tgetCalculatedOptions() {\n\t\treturn this.calculatedOptions;\n\t}\n\n\tappendData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData());\n\t\tvar updatedTrendData = options.data.concat(newData);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprependData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData(), true);\n\t\tvar updatedTrendData = newData.concat(options.data);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprivate changeData(allData: ITrendData, newData: ITrendData) {\n\t\tfor (let item of newData) {\n\t\t\tif (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t\t\tif (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t\t\tif (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t\t\tif (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t\t}\n\t\tvar options = this.getOptions();\n\t\tvar statePatch: IChartState = {trends: {[options.name]: {data: allData}}};\n\t\tthis.chartState.setState(statePatch, newData);\n\t}\n\t\n\tgetData(fromX?: number, toX?: number): ITrendData {\n\t\tvar data = this.getOptions().data;\n\t\tif (fromX == void 0 && toX == void 0) return data;\n\n\t\tfromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t\ttoX = toX !== void 0 ? toX : data[data.length].xVal;\n\t\tvar filteredData: ITrendData = [];\n\t\tfor (let item of data) {\n\t\t\tif (item.xVal < fromX) continue;\n\t\t\tif (item.xVal > toX) break;\n\t\t\tfilteredData.push(item)\n\t\t}\n\t\treturn filteredData;\n\t}\n\n\tgetFirstItem(): ITrendItem {\n\t\treturn this.getOptions().data[0];\n\t}\n\t\n\tgetLastItem(): ITrendItem {\n\t\tvar data = this.getOptions().data;\n\t\treturn data[data.length - 1];\n\t}\n\n\tgetOptions() {\n\t\treturn this.chartState.data.trends[this.name]\n\t}\n\n\tsetOptions(options: ITrendOptions) {\n\t\tthis.chartState.setState({trends: {[this.name]: options}});\n\t}\n\n\tonPrependRequest(cb: IPrependPromiseExecutor): Function {\n\t\tthis.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t\t}\n\t}\n\n\t/**\n\t * shortcut for ChartState.onTrendChange\n\t */\n\tonChange(cb: (changedOptions: ITrendOptions, newData: ITrendData) => void): Function {\n\t\tthis.ee.on(EVENTS.CHANGE, cb);\n\t\treturn () => { this.ee.off(EVENTS.CHANGE, cb);}\n\t}\n\n\tonDataChange(cb: (newData: ITrendData) => void): Function {\n\t\tvar onChangeCb = (changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tif (newData) cb(newData);\n\t\t};\n\t\tthis.ee.on(EVENTS.CHANGE, onChangeCb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.CHANGE, onChangeCb);\n\t\t}\n\t}\n\n\tprivate checkForPrependRequest() {\n\t\tif (this.prependRequest) return;\n\t\tvar chartState = this.chartState;\n\t\tvar minXVal = chartState.data.computedData.trends.minXVal;\n\t\tvar minScreenX = chartState.getScreenXByValue(minXVal);\n\t\tvar needToRequest = minScreenX > 0;\n\t\tvar {from, to} = chartState.data.xAxis.range;\n\t\tvar requestedDataLength = to - from;\n\t\tif (!needToRequest) return;\n\t\t\n\t\tthis.prependRequest = new Promise<TTrendRawData>((resolve: Function, reject: Function) => {\n\t\t\tthis.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t\t});\n\n\t\tthis.prependRequest.then((newData: TTrendRawData) => {\n\t\t\tthis.prependData(newData);\n\t\t\tthis.prependRequest = null;\n\t\t}, () => {\n\t\t\tthis.prependRequest = null;\n\t\t})\n\t\n\t}\n\n\tstatic prepareData (newData: TTrendRawData, currentData?: ITrendData, isPrepend = false): ITrendData {\n\t\tvar data: ITrendData = [];\n\t\tif (typeof newData[0] == 'number') {\n\t\t\tcurrentData = currentData || [];\n\t\t\tlet initialItem: ITrendItem;\n\t\t\tlet xVal: number;\n\t\t\tif (isPrepend) {\n\t\t\t\tinitialItem = currentData[0];\n\t\t\t\txVal = initialItem.xVal - newData.length;\n\t\t\t} else {\n\t\t\t\tinitialItem = currentData[currentData.length - 1];\n\t\t\t\txVal = initialItem ? initialItem.xVal + 1 : 0;\n\t\t\t}\n\t\t\tfor (let yVal of newData as number[]) {\n\t\t\t\tdata.push({xVal: xVal, yVal: yVal, id: Utils.getUid()});\n\t\t\t\txVal++;\n\t\t\t}\n\t\t} else {\n\t\t\tdata = newData as ITrendData;\n\t\t}\n\t\treturn data;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Trend.ts\n **/","import { IIteralable } from \"./interfaces\";\nimport { EventEmitter } from './EventEmmiter';\nimport { ChartState } from \"./State\";\nimport Vector3 = THREE.Vector3;\nimport { ITrendData, ITrendOptions, ITrendItem, Trend, TREND_TYPE, ITrendTypeSettings } from \"./Trend\";\nimport { Utils } from \"./Utils\";\nimport convertArray = THREE.AnimationUtils.convertArray;\n\nconst MAX_ANIMATED_SEGMENTS = 100;\nconst EVENTS = {\n\tREBUILD: 'rebuild',\n\tDISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\n\tANIMATION_FRAME: 'animationFrame'\n};\n\n/**\n *  Class helps to display and animate trends segments\n */\nexport class TrendSegments {\n\tsegmentsById: {[id: string]: TrendSegment} = {};\n\tsegments: TrendSegment[] = [];\n\tchartState: ChartState;\n\tanimatedSegmentsIds: number[] = [];\n\tmaxSegmentLength: number;\n\tsegmentsLength = 0;\n\tfirstDisplayedSegment: TrendSegment;\n\tlastDisplayedSegment: TrendSegment;\n\tprivate appendAnimation: TweenLite;\n\tprivate prependAnimation: TweenLite;\n\tprivate animatedSegmentsForAppend: number[] = [];\n\tprivate animatedSegmentsForPrepend: number[] = [];\n\tprivate nextEmptyId = 0;\n\tprivate startSegmentId = 0;\n\tprivate endSegmentId = 0;\n\tprivate trend: Trend;\n\tprivate ee: EventEmitter;\n\n\tconstructor (chartState: ChartState, trend: Trend) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.trend = trend;\n\t\tthis.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t\tthis.tryToRebuildSegments();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.trend.onChange((changedOptions, newData) => this.onTrendChangeHandler(changedOptions, newData));\n\t\tthis.chartState.onZoom(() => this.onZoomHandler());\n\t\tthis.chartState.onScroll(() => this.recalculateDisplayedRange());\n\t\tthis.chartState.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.appendAnimation && this.appendAnimation.kill();\n\t\tthis.prependAnimation && this.prependAnimation.kill();\n\t}\n\n\tprivate onZoomHandler() {\n\t\tlet segmentsRebuilded = this.tryToRebuildSegments();\n\t\tif (!segmentsRebuilded) {\n\t\t\tthis.recalculateDisplayedRange()\n\t\t}\n\t}\n\n\tprivate onTrendChangeHandler(changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar needToRebuildSegments = (\n\t\t\tchangedOptions.type != void 0 ||\n\t\t\tchangedOptions.maxSegmentLength != void 0\n\t\t);\n\n\n\t\tif (needToRebuildSegments) {\n\t\t\tthis.tryToRebuildSegments(true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!newData) return;\n\n\t\tvar data = this.trend.getData();\n\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\tisAppend ? this.appendData(newData) : this.prependData(newData);\n\t\tthis.recalculateDisplayedRange();\n\t}\n\n\tgetEndSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.endSegmentId];\n\t}\n\n\tgetStartSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.startSegmentId];\n\t}\n\t\n\tprivate tryToRebuildSegments(force = false): boolean {\n\t\tlet options = this.trend.getOptions();\n\t\tlet trendTypeName = TREND_TYPE[options.type] as string;\n\t\tlet trendTypesSettings =  options.settingsForTypes as IIteralable;\n\t\tlet trendTypeSettings = trendTypesSettings[trendTypeName] as ITrendTypeSettings;\n\t\tlet {\n\t\t\tminSegmentLengthInPx,\n\t\t\tmaxSegmentLengthInPx\n\t\t} = trendTypeSettings;\n\n\t\tlet needToRebuild = this.segments.length === 0 || force;\n\t\tlet segmentLength = this.maxSegmentLength;\n\n\t\t// call toFixed(2) to prevent floating segment error compare\n\t\tlet currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t\tlet currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\n\t\tif (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t\t} else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t\t}\n\n\t\tif (!needToRebuild) return false;\n\n\t\tthis.maxSegmentLength = segmentLength;\n\t\tthis.segmentsById = {};\n\t\tthis.segments = [];\n\t\tthis.nextEmptyId = 0;\n\t\tthis.startSegmentId = 0;\n\t\tthis.endSegmentId = 0;\n\t\tthis.segmentsLength = 0;\n\t\tthis.stopAllAnimations();\n\t\tthis.appendData(null, true);\n\t\tthis.recalculateDisplayedRange(true);\n\t\tthis.ee.emit(EVENTS.REBUILD);\n\t}\n\n\tprivate stopAllAnimations() {\n\t\tthis.animatedSegmentsIds = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tif (this.prependAnimation) this.prependAnimation.kill();\n\t\tif (this.appendAnimation) this.appendAnimation.kill();\n\t}\n\t\n\tprivate recalculateDisplayedRange(segmentsAreRebuilded = false) {\n\t\tvar {from, to} = this.chartState.data.xAxis.range;\n\t\tvar {firstDisplayedSegment, lastDisplayedSegment} = this;\n\t\tvar displayedRange = to - from;\n\n\t\tthis.firstDisplayedSegment = Utils.binarySearchClosest(this.segments, from - displayedRange, 'startXVal');\n\t\tthis.lastDisplayedSegment = Utils.binarySearchClosest(this.segments, to + displayedRange, 'endXVal');\n\t\tif (segmentsAreRebuilded) return;\n\n\t\tvar displayedRangeChanged = (\n\t\t\tfirstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\n\t\t\tlastDisplayedSegment.id !== this.lastDisplayedSegment.id\n\t\t);\n\t\tif (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t}\n\n\t// getSegments(fromX?: number, toX?: number): TrendSegment[] {\n\t// \tvar segments = this.segments;\n\t// \tif (fromX == void 0 && toX == void 0) return segments;\n\t// \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\n\t// \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\n\t// \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\n\t// \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\n\t// \treturn segments.slice(startSegmentInd, endSegmentInd);\n\t// }\n\n\t/**\n\t * returns array of segments for values array\n\t * values must be sorted!\n\t */\n\tgetSegmentsForXValues(values: number[]): TrendSegment[] {\n\t\tvar valueInd = 0;\n\t\tvar value = values[valueInd];\n\t\tvar lastValueInd = values.length - 1;\n\t\tvar results: TrendSegment[] = [];\n\t\tvar segment = this.getStartSegment();\n\t\tif (!segment.hasValue) return [];\n\t\twhile (segment) {\n\t\t\n\t\t\twhile (value < segment.startXVal) {\n\t\t\t\tresults.push(void 0);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\n\t\t\twhile (value > segment.endXVal) {\n\t\t\t\tsegment = segment.getNext();\n\t\t\t\tif (!segment) break;\n\t\t\t}\n\t\t\n\t\t\tvar valueInPoint = (\n\t\t\t\tsegment.startXVal == value || segment.endXVal == value ||\n\t\t\t\t(segment.startXVal < value && segment.endXVal > value)\n\t\t\t);\n\t\t\tif (valueInPoint) {\n\t\t\t\tresults.push(segment);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\tif (valueInd > lastValueInd) break;\n\t\t}\n\t\treturn results;\n\t}\n\n\tonAnimationFrame(cb: (animationState: TrendSegments) => void): Function {\n\t\treturn this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t}\n\n\tonRebuild(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.REBUILD, cb);\n\t}\n\n\tonDisplayedRangeChanged(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t}\n\t\n\tallocateNextSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar prevSegment = this.segmentsById[this.endSegmentId];\n\t\tif (prevSegment && prevSegment.hasValue) {\n\t\t\tprevSegment.nextId = id;\n\t\t\tsegment.prevId = prevSegment.id;\n\t\t}\n\t\tthis.endSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.push(segment);\n\t\treturn segment;\n\t}\n\n\tallocatePrevSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar nextSegment = this.segmentsById[this.startSegmentId];\n\t\tif (nextSegment && nextSegment.hasValue) {\n\t\t\tnextSegment.prevId = id;\n\t\t\tsegment.nextId = nextSegment.id;\n\t\t}\n\t\tthis.startSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.unshift(segment);\n\t\treturn segment;\n\t}\n\n\tprivate appendData(newData: ITrendData, needRebuildSegments = false) {\n\n\t\t// WARNING: bottleneck method!\n\n\t\t// var t1 = performance.now();\n\t\tvar trendData = this.trend.getData();\n\t\tif (needRebuildSegments) {\n\t\t\tnewData = trendData;\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t}\n\n\t\tvar startItemInd = trendData.length - newData.length;\n\t\tvar segment = this.getEndSegment() || this.allocateNextSegment();\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\tvar itemInd = 0;\n\t\twhile (itemInd < newData.length) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.appendItem(item);\n\t\t\tlet isLastItem = itemInd == newData.length - 1;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd++;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForAppend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t\t\t\t\tsegment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForAppend.push(id);\n\n\t\t\t}\n\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocateNextSegment();\n\t\t\tlet prevItem = trendData[startItemInd + itemInd - 1];\n\t\t\tsegment.appendItem(prevItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.data.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\t// var t2 = performance.now();\n\t\t// console.log(t2 - t1);\n\n\t\t// do not create animation if segments was rebuilded\n\t\tif (needRebuildSegments) {\n\t\t\tfor (let segmentId of this.animatedSegmentsForAppend) {\n\t\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\t\tsegment.currentAnimationState = segment.createAnimationState();\n\t\t\t}\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t\treturn;\n\t\t}\n\t\tif (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time);\n\t}\n\n\n\t// TODO: refactor duplicated code from appendData\n\tprivate prependData(newData: ITrendData) {\n\t\tvar trendData = this.trend.getData();\n\t\tvar segment = this.getStartSegment() || this.segmentsById[0];\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar itemInd = newData.length - 1;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\twhile (itemInd >= 0) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.prependItem(item);\n\t\t\tlet isLastItem = itemInd == 0;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd--;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForPrepend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t\t\t\t\tsegment.initialAnimationState.endYVal =  initialAnimationState.startYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForPrepend.push(id);\n\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocatePrevSegment();\n\t\t\tlet nextItem = trendData[itemInd + 1];\n\t\t\tsegment.prependItem(nextItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.data.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\tif (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time, true);\n\t}\n\n\tprivate animate(time: number, isPrepend = false) {\n\n\t\tvar animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tvar animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\n\t\tif ((animation && animation.isActive()) || time == 0) {\n\t\t\tif (animation) animation.kill();\n\t\t\tthis.onAnimationFrameHandler(1, isPrepend);\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar animationsOptions = this.chartState.data.animations;\n\t\tvar ease = animationsOptions.trendChangeEase;\n\t\tvar objectToAnimate = {animationValue: 0};\n\t\tanimation = TweenLite.to(objectToAnimate, time, {animationValue: 1, ease});\n\t\tanimation.eventCallback('onUpdate', () => this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend));\n\t\tanimation.eventCallback('onComplete', () => {\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\tthis.appendAnimation = null;\n\t\t});\n\n\t\tif (isPrepend) {\n\t\t\tthis.prependAnimation = animation;\n\t\t} else {\n\t\t\tthis.appendAnimation = animation;\n\t\t}\n\t}\n\n\tprivate onAnimationFrameHandler(coefficient: number, isPrepend = false) {\n\t\tlet animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tfor (let segmentId of animatedSegmentsIds) {\n\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\tfor (let key in segment.targetAnimationState) {\n\t\t\t\tlet targetValue = segment.targetAnimationState[key] as number;\n\t\t\t\tlet initialValue = segment.initialAnimationState[key] as number;\n\t\t\t\tlet currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t\t\t\tsegment.currentAnimationState[key] = currentValue;\n\t\t\t}\n\t\t}\n\t\tthis.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t\tthis.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t}\n\n}\n\nexport interface ITrendSegmentState extends IIteralable {\n\txVal?: number;\n\tyVal?: number;\n\tstartXVal?: number;\n\tstartYVal?: number;\n\tendXVal?: number;\n\tendYVal?: number;\n\tmaxYVal?: number;\n\tminYVal?: number;\n\tmaxLength?: number;\n}\n\nexport class TrendSegment implements ITrendSegmentState {\n\tid: number;\n\tprevId: number;\n\tnextId: number;\n\thasValue: boolean;\n\txVal: number;\n\tyVal: number;\n\tstartXVal: number;\n\tstartYVal: number;\n\tendXVal: number;\n\tendYVal: number;\n\tmaxYVal: number;\n\tminYVal: number;\n\tisCompleted = false;\n\tmaxLength: number;\n\titems: ITrendItem[] = [];\n\n\tinitialAnimationState: ITrendSegmentState = {};\n\ttargetAnimationState: ITrendSegmentState = {};\n\tcurrentAnimationState: ITrendSegmentState = {};\n\n\tprivate trendSegments: TrendSegments;\n\t\n\tconstructor(trendPoints: TrendSegments, id: number) {\n\t\tthis.trendSegments = trendPoints;\n\t\tthis.id = id;\n\t\tthis.maxLength = trendPoints.maxSegmentLength;\n\t}\n\n\tcreateAnimationState(): ITrendSegmentState {\n\t\tvar {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t} = this;\n\t\treturn {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t}\n\t};\n\t\n\tappendItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.push(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar startXVal = items[0].xVal;\n\t\tif (item.xVal - startXVal > this.maxLength) return false;\n\t\titems.push(item);\n\t\treturn true;\n\t}\n\n\tprependItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.unshift(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar endXVal = items[items.length - 1].xVal;\n\t\tif (endXVal - item.xVal > this.maxLength) return false;\n\t\titems.unshift(item);\n\t\treturn true;\n\t}\n\n\tcomplete() {\n\t\tthis.isCompleted = true;\n\t\tthis.recalculateItems();\n\t\tthis.items = []; // free memory for completed ranges\n\t}\n\n\trecalculateItems() {\n\t\tlet items = this.items;\n\t\tlet itemsLength = items.length;\n\t\tif (itemsLength === 0) Utils.error('Unable to create TrendSegment without TrendItems');\n\t\tlet endItem = items[itemsLength - 1];\n\t\tlet {xVal: endXVal, yVal: endYVal} = endItem;\n\t\tlet startXVal: number, startYVal: number;\n\n\n\t\tlet startItem = items[0];\n\t\tstartXVal = startItem.xVal;\n\t\tstartYVal = startItem.yVal;\n\n\t\tlet minX = Math.min(startXVal, endXVal);\n\t\tlet maxX = Math.max(startXVal, endXVal);\n\t\tlet middleXVal = minX + (maxX - minX) / 2;\n\n\t\tlet minY = Math.min(startYVal, endYVal);\n\t\tlet maxY = Math.max(startYVal, endYVal);\n\t\tlet middleYVal = minY + (maxY - minY) / 2;\n\n\t\tlet yVals = items.map(item => item.yVal);\n\n\t\tthis.startXVal = startXVal;\n\t\tthis.startYVal = startYVal;\n\t\tthis.endXVal = endXVal;\n\t\tthis.endYVal = endYVal;\n\t\tthis.xVal = middleXVal;\n\t\tthis.yVal = middleYVal;\n\t\tthis.maxYVal = Math.max(...yVals);\n\t\tthis.minYVal = Math.min(...yVals);\n\t\tif (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t}\n\n\tgetNext() {\n\t\tvar nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t\treturn nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t}\n\n\tgetPrev() {\n\t\tvar prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t\treturn prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t}\n\t\n\tgetFrameVal(): Vector3 {\n\t\tlet {xVal, yVal} = this.createAnimationState();\n\t\treturn new Vector3(xVal, yVal, 0);\n\t}\n\n\tgetFramePoint(): Vector3 {\n\t\tvar frameVal = this.getFrameVal();\n\t\treturn this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendSegments.ts\n **/","import PerspectiveCamera = THREE.PerspectiveCamera;\nimport Vector3 = THREE.Vector3;\nimport {ChartState, IChartState} from \"./State\";\nimport forestgreen = THREE.ColorKeywords.forestgreen;\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IScreenTransformOptions {\n\tscrollXVal?: number,\n\tscrollYVal?: number,\n\tscrollX?: number,\n\tscrollY?: number,\n\tzoomX?: number,\n\tzoomY?: number\n}\n\n/**\n * manage camera, and contains methods for transforming pixels to values\n */\nexport class Screen {\n\toptions: IScreenTransformOptions = {scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1};\n\tprivate chartState: ChartState;\n\tprivate scrollXAnimation: TweenLite;\n\tprivate scrollYAnimation: TweenLite;\n\tprivate zoomXAnimation: TweenLite;\n\tprivate zoomYAnimation: TweenLite;\n\tprivate currentScrollX = {x: 0};\n\tprivate currentScrollY = {y: 0};\n\tprivate currentZoomX = {val: 1};\n\tprivate currentZoomY = {val: 1};\n\tprivate ee: EventEmitter;\n\n\tconstructor(chartState: ChartState) {\n\t\tthis.chartState = chartState;\n\t\tvar {width: w, height: h} = chartState.data;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.transform({\n\t\t\tscrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n\t\t\tzoomY: 1\n\t\t});\n\t\tthis.bindEvents();\n\n\t\t//camera.position.z = 1500;\n\t}\n\t\n\tgetCameraSettings() {\n\n\t\tvar {width: w, height: h} = this.chartState.data;\n\n\t\t// settings for pixel-perfect camera\n\t\tvar FOV = 75;\n\t\tvar vFOV = FOV * (Math.PI / 180);\n\t\t\n\t\treturn {\n\t\t\tFOV: FOV,\n\t\t\taspect: w / h,\n\t\t\tnear: 0.1,\n\t\t\tfar: 5000,\n\t\t\tz: h / (2 * Math.tan(vFOV / 2) ),\n\n\t\t\t// move 0,0 to left-bottom corner\n\t\t\tx: w / 2,\n\t\t\ty: h / 2\n\t\t}\n\t}\n\n\tonZoomFrame(cb: (zoomX: number, zoomY: number) => void): Function {\n\t\tvar eventName = 'zoomFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonScrollFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'scrollFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonTransformationFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'transformationFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tcameraIsMoving(): boolean {\n\t\treturn !!(\n\t\t\tthis.scrollXAnimation && this.scrollXAnimation.isActive() ||\n\t\t\t\tthis.zoomXAnimation && this.zoomXAnimation.isActive()\n\t\t);\n\t}\n\n\tprivate transform (options: IScreenTransformOptions, silent = false) {\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = options;\n\t\t\n\t\tif (scrollX != void 0) this.options.scrollX = scrollX;\n\t\tif (scrollY != void 0) this.options.scrollY = scrollY;\n\t\tif (zoomX != void 0) this.options.zoomX = zoomX;\n\t\tif (zoomY != void 0) this.options.zoomY = zoomY;\n\n\t\tif (scrollX != void 0 || zoomX) {\n\t\t\toptions.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t\t\tthis.options.scrollXVal = options.scrollXVal;\n\t\t}\n\n\t\tif (scrollY != void 0 || zoomY) {\n\t\t\toptions.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t\t\tthis.options.scrollYVal = options.scrollYVal;\n\t\t}\n\n\t\tif (silent) return;\n\n\t\tthis.ee.emit('transformationFrame', options);\n\t\t\n\t\tif (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t\t\tthis.ee.emit('scrollFrame', options);\n\t\t}\n\t\t\n\t\tif (options.zoomX != void 0 || options.zoomY != void 0) {\n\t\t\tthis.ee.emit('zoomFrame', options);\n\t\t}\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar state = this.chartState;\n\n\t\t// handle scroll and zoom\n\t\tstate.onChange((changedProps) => {\n\t\t\tif (changedProps.xAxis && changedProps.xAxis.range) {\n\t\t\t\tif (changedProps.xAxis.range.scroll != void 0) this.onScrollXHandler(changedProps);\n\t\t\t\tif (changedProps.xAxis.range.zoom) this.onZoomXHandler();\n\t\t\t}\n\t\t\tif (changedProps.yAxis && changedProps.yAxis.range){\n\t\t\t\tif (changedProps.yAxis.range.scroll != void 0) this.onScrollYHandler();\n\t\t\t\tif (changedProps.yAxis.range.zoom) this.onZoomYHandler();\n\t\t\t}\n\t\t});\n\t\tstate.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.scrollXAnimation && this.scrollXAnimation.kill();\n\t\tthis.scrollYAnimation && this.scrollYAnimation.kill();\n\t\tthis.zoomXAnimation && this.zoomXAnimation.kill();\n\t\tthis.zoomYAnimation && this.zoomYAnimation.kill();\n\t}\n\n\tprivate onScrollXHandler(changedProps: IChartState) {\n\t\tvar state = this.chartState;\n\t\tvar isDragMode = state.data.cursor.dragMode;\n\t\tvar animations =  state.data.animations;\n\t\tvar canAnimate = animations.enabled && !isDragMode;\n\t\tvar zoomXChanged = changedProps.xAxis.range.zoom;\n\t\tvar isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n\t\tvar time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t\tvar ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t\tif (this.scrollXAnimation) this.scrollXAnimation.pause();\n\n\t\tvar range = state.data.xAxis.range;\n\t\tvar targetX = range.scroll * range.scaleFactor * range.zoom;\n\t\tthis.currentScrollX.x = this.options.scrollX;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollX: this.currentScrollX.x});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t\t\t\tx: targetX, ease: ease\n\t\t\t});\n\t\t\tthis.scrollXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollX.x = targetX;\n\t\t\tcb();\n\t\t}\n\n\t}\n\n\tprivate onScrollYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.data.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tif (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t\tvar range = state.data.yAxis.range;\n\t\tvar targetY = range.scroll * range.scaleFactor * range.zoom;\n\n\t\tthis.currentScrollY.y = this.options.scrollY;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollY: this.currentScrollY.y});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t\t\t\ty: targetY, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.scrollYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollY.y = targetY;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomXHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.data.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.data.xAxis.range.zoom;\n\t\tif (this.zoomXAnimation) this.zoomXAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomX: this.currentZoomX.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomX.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.data.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.data.yAxis.range.zoom;\n\t\tif (this.zoomYAnimation) this.zoomYAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomY: this.currentZoomY.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomY.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zeroVal} = this.chartState.data.xAxis.range;\n\t\tvar zoom = this.options.zoomX;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zeroVal} =  this.chartState.data.yAxis.range;\n\t\tvar zoom = this.options.zoomY;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\n\t */\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\t\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n\t}\n\t\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n\t}\n\n\n\t/**\n\t *  returns scrollX value by screen scrollX coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\treturn this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t}\n\t\n\t\n\t/**\n\t *  returns scrollY value by screen scrollY coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\treturn this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t}\n\t\n\t//\n\t/**\n\t *  returns screen scrollX value by screen scrollY coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.chartState.data.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t// /**\n\t//  *  returns screen scrollY value by screen scrollY coordinate\n\t//  */\n\t// getScreenYByValue(scrollYVal: number): number {\n\t// \tvar {scroll, zeroVal} = this.data.yAxis.range;\n\t// \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\n\t// }\n\t//\n\t//\n\t/**\n\t * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\t/**\n\t * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\n\t */\n\tgetPointByScreenY(screenY: number): number {\n\t\treturn this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t}\n\n\tgetTop(): number {\n\t\treturn this.getPointByScreenY(this.chartState.data.height);\n\t}\n\t\n\tgetBottom(): number {\n\t\treturn this.getPointByScreenY(0);\n\t}\n\n\tgetLeft(): number {\n\t\treturn this.getPointByScreenX(0);\n\t}\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.chartState.data.width);\n\t}\n\n\tgetTopVal() {\n\t\treturn this.getValueByScreenY(this.chartState.data.height);\n\t}\n\t\n\tgetBottomVal() {\n\t\treturn this.getValueByScreenY(0);\n\t}\n\n\tgetCenterYVal() {\n\t\treturn this.getValueByScreenY(this.chartState.data.height / 2);\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Screen.ts\n **/","\nimport {ChartState} from \"./State\";\nimport {Utils} from \"./Utils\";\nimport {AXIS_TYPE} from \"./interfaces\";\nimport {ITrendData, ITrendOptions} from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IAxisMarkUpdateOptions {\n\tvalue: number,\n\tdisplayedValue?: string\n}\n\nexport interface IAxisMarkOptions extends IAxisMarkUpdateOptions {\n\tname?: string;\n\ttitle?: string;\n\ttype?: string;\n\tlineColor?: string;\n\tlineWidth?: number;\n\tshowValue?: boolean;\n\tstickToEdges?: boolean;\n}\n\nconst AXIS_MARK_DEFAULT_OPTIONS: IAxisMarkOptions = {\n\ttype: 'simple',\n\tlineWidth: 1,\n\tvalue: 0,\n\tshowValue: false,\n\tstickToEdges: false,\n\tlineColor: '#FFFFFF',\n\ttitle: ''\n};\n\nexport class AxisMarks {\n\tprivate chartState: ChartState;\n\tprivate axisType: AXIS_TYPE;\n\tprivate ee: EventEmitter;\n\tprivate items: {[name: string]: AxisMark} = {};\n\n\tconstructor(chartState: ChartState, axisType: AXIS_TYPE) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.axisType = axisType;\n\t\tvar marks = this.items;\n\t\tvar axisMarksOptions = axisType == AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n\t\t\n\t\tfor (let options of axisMarksOptions) {\n\t\t\tlet axisMark: AxisMark;\n\t\t\toptions = Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t\t\t\n\t\t\t// set mark name\n\t\t\tif (!options.name) options.name = Utils.getUid().toString();\n\t\t\tif (marks[options.name]) Utils.error('duplicated mark name ' + options.name);\n\t\t\t\n\t\t\t// create mark instance based on type option\n\t\t\tif (options.type == 'timeleft') {\n\t\t\t\taxisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t\t\t} else {\n\t\t\t\taxisMark = new AxisMark(chartState, axisType, options);\n\t\t\t}\n\t\t\tmarks[options.name] = axisMark;\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, newData)\n\t\t});\n\t\tthis.chartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tprivate onTrendChange(trendName: string, newData: ITrendData) {\n\t\tif (!newData) return;\n\t\tvar startVal = newData[0].xVal;\n\t\tvar endVal = newData[newData.length - 1].xVal;\n\t\tvar marks = this.items;\n\n\t\tfor (let markName in marks) {\n\t\t\tlet mark = marks[markName];\n\t\t\tlet markVal = mark.options.value;\n\t\t\tlet markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\n\t\t\tif (markWasCrossed) this.ee.emit('markCrossed', trendName, newData);\n\t\t}\n\t}\n\n\n\tgetItems() {\n\t\treturn this.items;\n\t}\n\t\n\tgetItem(markName: string) {\n\t\treturn this.items[markName];\n\t}\n\n}\n\nexport class AxisMark {\n\tstatic typeName = 'simple';\n\toptions: IAxisMarkOptions;\n\taxisType: AXIS_TYPE;\n\tprotected chartState: ChartState;\n\tprotected renderOnTrendsChange = false;\n\tprotected ee: EventEmitter;\n\n\tconstructor(chartState: ChartState, axisType: AXIS_TYPE, options: IAxisMarkOptions) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.options = options;\n\t\tthis.axisType = axisType;\n\t\tthis.chartState = chartState;\n\t\tthis.bindEvents();\n\t}\n\t\n\tprotected bindEvents() {}\n\n\tsetOptions(newOptions: IAxisMarkUpdateOptions) {\n\t\tvar value = this.options.value;\n\t\tthis.options = Utils.deepMerge(this.options, newOptions);\n\t\tif (this.options.value !== value) this.ee.emit('valueChange');\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n\n\tgetDisplayedVal(): string {\n\t\tlet {value, displayedValue} = this.options;\n\t\treturn String(displayedValue !== void 0 ? displayedValue : value);\n\t}\n\n\tonMarkCrossed(cb: (trendName: string, newData: ITrendData) => void): Function {\n\t\tthis.ee.on('markCrossed', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('markCrossed', cb);\n\t\t}\n\t}\n\n\tonValueChange(cb: () => void) {\n\t\tthis.ee.on('valueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('valueChange', cb);\n\t\t}\n\t}\n\n\tonDisplayedValueChange(cb: () => void) {\n\t\tthis.ee.on('onDisplayedValueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('onDisplayedValueChange', cb);\n\t\t}\n\t}\n}\n\nexport class AxisTimeleftMark extends AxisMark {\n\tstatic typeName = 'timeleft';\n\tprotected renderOnTrendsChange = true;\n\t\n\tgetDisplayedVal(): string {\n\t\tvar markVal = this.options.value;\n\t\tvar maxXVal = this.chartState.data.computedData.trends.maxXVal;\n\t\tvar time = markVal - maxXVal;\n\t\tif (time < 0) time = 0;\n\t\treturn Utils.msToTimeString(time);\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendsChange(() => this.onTrendsChange());\n\t}\n\n\tprotected onTrendsChange() {\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/AxisMarks.ts\n **/","\n\n/**\n * defines how axis range will be calculated\n * FIXED - directly use range.from and range.to value\n * AUTO - automatically sets range.from and range.to by visible part of opposite axis\n * RELATIVE_END - same as AUTO, but trend end always present in range\n * ALL - automatically sets range.from and range.to by all values of opposite axis\n *\n */\nimport {IAxisMarkOptions} from \"./AxisMarks\";\nexport enum AXIS_RANGE_TYPE {\n\tFIXED,\n\tRELATIVE_END,\n\tAUTO,\n\tALL // TODO: AXIS_RANGE_TYPE.ALL\n}\n\n/**\n * Animation ease type\n */\nexport declare type TEase = Ease | Linear;\n\nexport declare type TIteralable = {[key: string]: any};\nexport interface IIteralable {[key: string]: any};\n\nexport enum AXIS_TYPE {X, Y}\n\nexport interface IAxisRange {\n\ttype?: AXIS_RANGE_TYPE,\n\tfrom?: number,\n\tto?: number,\n\tzoom?: number,\n\tscroll?: number,\n\n\t/**\n\t * Mode only for Y axis. When true displayed center of Y axis never changed. To use set range.zeroVal as center value.\n\t */\n\tisMirrorMode?: boolean,\n\n\tpadding?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmargin?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmaxLength?: number;\n\tminLength?: number;\n\tzeroVal?: number,\n\n\t/** only for internal usage **/\n\tscaleFactor?: number,\n}\n\nexport enum AXIS_DATA_TYPE {NUMBER, DATE}\n\nexport interface IAxisOptions {\n\trange?: IAxisRange;\n\tdataType?: AXIS_DATA_TYPE;\n\tgridMinSize?: number;\n\tautoScroll?: boolean;\n\tmarks?: IAxisMarkOptions[];\n}\n\nexport interface IAnimationsOptions {\n\tenabled?: boolean,\n\ttrendChangeSpeed?: number,\n\ttrendChangeEase?: TEase,\n\tscrollSpeed?: number,\n\tscrollEase?: TEase,\n\tautoScrollSpeed?: number,\n\tautoScrollEase?: TEase,\n\tzoomSpeed?: number,\n\tzoomEase?: TEase,\n}\n\nexport interface PromiseExecutor<T> {\n\t(resolve: (data: T) => void, reject: (data: T) => void): void;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/interfaces.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport UVMapping = THREE.UVMapping;\nimport GridHelper = THREE.GridHelper;\nimport {ChartWidget} from \"../Widget\";\nimport {ChartState} from \"../State\";\nimport {GridWidget, IGridParamsForAxis} from \"./GridWidget\";\nimport {Utils} from \"../Utils\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {AXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions} from \"../interfaces\";\n\n/**\n * widget for drawing axis\n */\nexport class AxisWidget extends ChartWidget {\n\tstatic widgetName = 'Axis';\n\tprivate isDestroyed = false;\n\tprivate object3D: Object3D;\n\tprivate axisXObject: Object3D;\n\tprivate axisYObject: Object3D;\n\tprivate updateAxisXRequest: () => void;\n\n\tconstructor (state: ChartState) {\n\t\tsuper(state);\n\t\tthis.object3D = new Object3D();\n\t\tthis.axisXObject = new Object3D();\n\t\tthis.axisYObject = new Object3D();\n\t\tthis.object3D.add(this.axisXObject);\n\t\tthis.object3D.add(this.axisYObject);\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\n\t\t// canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\n\t\tthis.updateAxisXRequest = Utils.throttle(() => this.updateAxis(AXIS_TYPE.X), 1000);\n\n\n\t\tthis.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n\t}\n\n\tbindEvents() {\n\t\tvar state = this.chartState;\n\n\t\tthis.bindEvent(\n\t\t\tstate.screen.onTransformationFrame((options) => {\n\t\t\t\tthis.onScrollChange(options.scrollX, options.scrollY);\n\t\t\t}),\n\t\t\tstate.screen.onZoomFrame((options) => {this.onZoomFrame(options)}),\n\t\t\tstate.onDestroy(() => this.onDestroy()),\n\t\t\tstate.onResize(() => this.onResize())\n\t\t);\n\t}\n\n\tprivate onDestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.unbindEvents();\n\t}\n\n\tprivate onScrollChange(x: number, y: number) {\n\n\t\tif (y != void 0) {\n\t\t\tthis.axisYObject.position.y = y;\n\t\t\tthis.axisXObject.position.y = y;\n\t\t}\n\n\t\tif (x != void 0) {\n\t\t\tthis.axisYObject.position.x = x;\n\t\t\tthis.updateAxisXRequest();\n\t\t}\n\n\t}\n\n\tprivate onResize() {\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\t}\n\n\tprivate setupAxis(orientation: AXIS_TYPE) {\n\n\t\tlet isXAxis = orientation == AXIS_TYPE.X;\n\t\tlet {width: visibleWidth, height: visibleHeight} = this.chartState.data;\n\t\tlet canvasWidth = 0, canvasHeight = 0;\n\n\t\t// clean meshes\n\t\tif (isXAxis) {\n\t\t\tthis.axisXObject.traverse(obj => this.axisXObject.remove(obj));\n\t\t\tcanvasWidth = visibleWidth * 3;\n\t\t\tcanvasHeight = 50;\n\t\t} else {\n\t\t\tthis.axisYObject.traverse(obj => this.axisYObject.remove(obj));\n\t\t\tcanvasWidth = 50;\n\t\t\tcanvasHeight = visibleHeight * 3;\n\t\t}\n\n\t\tvar texture = Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, (ctx) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.font = \"10px Arial\";\n\t\t\tctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t\t\tctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n\t\t});\n\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tvar axisMesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(canvasWidth, canvasHeight),\n\t\t\tmaterial\n\t\t);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisXObject.add(axisMesh);\n\t\t} else {\n\t\t\taxisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisYObject.add(axisMesh);\n\t\t}\n\n\t\tthis.updateAxis(orientation);\n\n\t}\n\t\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate updateAxis(orientation: AXIS_TYPE) {\n\t\tif (this.isDestroyed) return;\n\t\tvar isXAxis = orientation == AXIS_TYPE.X;\n\t\tvar {width: visibleWidth, height: visibleHeight} = this.chartState.data;\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = this.chartState.screen.options;\n\t\tvar axisOptions: IAxisOptions;\n\t\tvar axisMesh: Mesh;\n\t\tvar axisGridParams: IGridParamsForAxis;\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh = this.axisXObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chartState.data.xAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t\t} else {\n\t\t\taxisMesh = this.axisYObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chartState.data.yAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t\t}\n\n\t\tvar geometry = axisMesh.geometry as PlaneGeometry;\n\t\tvar canvasWidth = geometry.parameters.width;\n\t\tvar canvasHeight = geometry.parameters.height;\n\t\tvar texture = (axisMesh.material as MeshBasicMaterial).map;\n\t\tvar ctx = texture.image.getContext('2d');\n\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t\t}\n\n\n\t\t// TODO: draw text and lines in different loops\n\t\tvar edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t\tvar startVal = axisGridParams.start  - edgeOffset;\n\t\tvar endVal = axisGridParams.end + edgeOffset;\n\n\t\tctx.beginPath();\n\t\tfor (let val = startVal; val <= endVal; val += axisGridParams.step) {\n\t\t\tlet displayedValue = '';\n\t\t\tif (isXAxis) {\n\t\t\t\tlet pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(pxVal + 0.5, canvasHeight);\n\t\t\t\t// ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\n\t\t\t\tif (axisOptions.dataType == AXIS_DATA_TYPE.DATE) {\n\t\t\t\t\tdisplayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t\t\t\t} else {\n\t\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\t}\n\n\t\t\t\tctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t\t\t} else {\n\t\t\t\tlet pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(canvasWidth, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\n\n\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\tctx.fillText(displayedValue, canvasWidth - 15 , pxVal + 3);\n\n\t\t\t\t// uncomment for left-side axis\n\t\t\t\t// ctx.moveTo(0, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(5, pxVal + 0.5);\n\t\t\t\t// ctx.fillText(Number(val.toFixed(14)).toString(), 15 , pxVal + 3);\n\t\t\t}\n\t\t\tctx.stroke();\n\t\t}\n\t\t// uncomment to preview canvas borders\n\t\t// ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tif (options.zoomX) {\n\t\t\tthis.updateAxis(AXIS_TYPE.X);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.H)\n\t\t}\n\t\tif (options.zoomY) {\n\t\t\tthis.updateAxis(AXIS_TYPE.Y);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.V)\n\t\t}\n\t}\n\n\t// private temporaryHideAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar timeoutId = setTimeout(() => {\n\t// \t\t\tthis.showAxis(orientation);\n\t// \t}, 200);\n\t//\n\t// \tif (isXAxis) {\n\t// \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tclearTimeout(this.showAxisXTimeout);\n\t// \t\tthis.showAxisXTimeout =\ttimeoutId;\n\t// \t} else {\n\t// \t\tclearTimeout(this.showAxisYTimeout);\n\t// \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tthis.showAxisYTimeout = timeoutId;\n\t// \t}\n\t// }\n\n\t// private showAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar material: MeshBasicMaterial;\n\t// \tif (isXAxis) {\n\t// \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t} else {\n\t// \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t}\n\t// \tthis.updateAxis(orientation);\n\t// \tTweenLite.to(material, 0.3, {opacity: 1});\n\t// }\n\n\tstatic getDateStr(timestamp: number, gridParams: IGridParamsForAxis): string {\n\t\tvar sec = 1000;\n\t\tvar min = sec * 60;\n\t\tvar hour = min * 60;\n\t\tvar day = hour * 60;\n\t\tvar step = gridParams.step;\n\t\tvar d = new Date(timestamp);\n\t\tvar tf = (num: number) => Utils.toFixed(num, 2);\n\t\treturn tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport {ChartWidget} from \"../Widget\";\nimport LineSegments = THREE.LineSegments;\nimport {ChartState} from \"../State\";\nimport {Utils} from \"../Utils\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {IAxisOptions} from \"../interfaces\";\n\nexport interface IGridParamsForAxis {\n\tstart: number,\n\tend: number,\n\tstep: number,\n\tstepInPx: number,\n\tlength: number,\n\tsegmentsCount: number\n}\n\n/**\n * widget for drawing chart grid\n */\nexport class GridWidget extends ChartWidget{\n\tstatic widgetName = 'Grid';\n\tprivate lineSegments: LineSegments;\n\tprivate gridSizeH: number;\n\tprivate gridSizeV: number;\n\tprivate isDestroyed = false;\n\n\tconstructor (chartState: ChartState) {\n\t\tsuper(chartState);\n\t\tvar {width, height, xAxis, yAxis} = chartState.data;\n\t\tthis.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n\t\tthis.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n\t\tthis.initGrid();\n\t\tthis.updateGrid();\n\t}\n\n\tbindEvents() {\n\t\t// grid is bigger then screen, so it's no need to update it on each scroll event\n\t\tlet updateGridThrottled = Utils.throttle(() => this.updateGrid(), 1000);\n\t\tthis.bindEvent(this.chartState.onScroll(() => updateGridThrottled()),\n\t\t\tthis.chartState.screen.onZoomFrame((options) => {\n\t\t\t\tupdateGridThrottled();\n\t\t\t\tthis.onZoomFrame(options);\n\t\t\t}),\n\t\t\tthis.chartState.onDestroy(() => {\n\t\t\t\tthis.isDestroyed = true;\n\t\t\t\tthis.unbindEvents();\n\t\t\t}),\n\t\t\tthis.chartState.onResize(() => {\n\t\t\t\tthis.updateGrid();\n\t\t\t})\n\t\t);\n\n\t}\n\n\tprivate initGrid() {\n\t\tvar geometry = new THREE.Geometry();\n\t\tvar material = new THREE.LineBasicMaterial( { linewidth: 1, opacity: 0.1, transparent: true});\n\t\tvar xLinesCount = this.gridSizeH;\n\t\tvar yLinesCount = this.gridSizeV;\n\t\twhile (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\twhile (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\tthis.lineSegments = new LineSegments(geometry, material);\n\t\tthis.lineSegments.position.setZ(-1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t}\n\n\tprivate updateGrid() {\n\t\tif (this.isDestroyed) return;\n\t\tvar {yAxis, xAxis, width, height} = this.chartState.data;\n\t\tvar axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t\tvar axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t\tvar scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t\tvar scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t\tvar gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t\tvar gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t\tvar startXVal = axisXGrid.start + gridScrollXVal;\n\t\tvar startYVal = axisYGrid.start + gridScrollYVal;\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tvar vertices = geometry.vertices;\n\t\tvar lineInd = 0;\n\n\t\tfor (let i =  -this.gridSizeH / 3; i < this.gridSizeH * 2/3; i++) {\n\t\t\tlet value = startXVal + i * axisXGrid.step;\n\t\t\tlet lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tfor (let i =  -this.gridSizeV / 3; i < this.gridSizeV * 2/3; i++) {\n\t\t\tlet value = startYVal + i * axisYGrid.step;\n\t\t\tlet lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\tthis.lineSegments.scale.set(\n\t\t\txAxis.range.scaleFactor * xAxis.range.zoom,\n\t\t\tyAxis.range.scaleFactor * yAxis.range.zoom,\n\t\t\t1\n\t\t)\n\t}\n\n\tprivate getHorizontalLineSegment(yVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chartState;\n\t\tvar localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n\t\tvar widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n\t\treturn [\n\t\t\tnew THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0 ),\n\t\t\tnew THREE.Vector3( -widthVal + scrollXVal, localYVal, 0 )\n\t\t];\n\t}\n\n\tprivate getVerticalLineSegment(xVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chartState;\n\t\tvar localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n\t\tvar heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n\t\treturn [\n\t\t\tnew THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0 ),\n\t\t\tnew THREE.Vector3(localXVal, -heightVal + scrollYVal, 0 )\n\t\t];\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar {xAxis, yAxis} = this.chartState.data;\n\t\tif (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t\tif (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t}\n\n\n\t// TODO: move this code to core\n\tstatic getGridParamsForAxis(axisOptions: IAxisOptions, axisWidth: number, zoom: number): IGridParamsForAxis {\n\t\tvar axisRange = axisOptions.range;\n\t\tvar from = axisRange.from; //var from = axisOptions.range.zeroVal + scroll;\n\t\tvar to = axisRange.to;  //var to = from + axisWidth / (axisRange.scaleFactor * zoom);\n\t\tvar axisLength = to - from;\n\t\tvar gridStep = 0;\n\t\tvar gridStepInPixels = 0;\n\t\tvar minGridStepInPixels = axisOptions.gridMinSize;\n\t\tvar axisLengthStr = String(axisLength);\n\t\tvar axisLengthPointPosition = axisLengthStr.indexOf('.');\n\t\tvar intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\n\t\tvar gridStepFound = false;\n\t\tvar digitPos = 0;\n\t\twhile (!gridStepFound) {\n\n\t\t\tlet power = intPartLength - digitPos - 1;\n\t\t\tlet multiplier = (Math.pow(10, power) || 1);\n\t\t\tlet dividers = [1, 2, 5];\n\t\t\tfor (let dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t\t\t\tlet nextGridStep = multiplier / dividers[dividerInd];\n\t\t\t\tlet nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t\t\t\tif (nextGridStepInPixels >= minGridStepInPixels) {\n\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t} else {\n\t\t\t\t\tgridStepFound = true;\n\t\t\t\t\tif (gridStep === 0) {\n\t\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!gridStepFound) digitPos++\n\n\t\t}\n\n\t\tvar gridStart = Math.floor(from / gridStep) * gridStep;\n\t\tvar gridEnd = Math.floor(to / gridStep) * gridStep;\n\n\t\treturn {\n\t\t\tstart: gridStart,\n\t\t\tend: gridEnd,\n\t\t\tstep: gridStep,\n\t\t\tstepInPx: gridStepInPixels,\n\t\t\tlength: gridEnd - gridStart,\n\t\t\tsegmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t\t}\n\t}\n\t\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/GridWidget.ts\n **/","\nimport Object3D = THREE.Object3D;\nimport {ChartState} from \"../State\";\nimport {Utils} from \"../Utils\";\nimport Mesh = THREE.Mesh;\nimport PlaneBufferGeometry = THREE.PlaneBufferGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport Vector3 = THREE.Vector3;\nimport {TrendWidget, TrendsWidget} from \"./TrendsWidget\";\nimport { ITrendOptions, TREND_TYPE } from \"../Trend\";\nimport {TrendSegments} from \"../TrendSegments.ts\";\n\n/**\n * widget adds loading indicator\n * activated when animations enabled\n */\nexport class TrendsLoadingWidget extends TrendsWidget<TrendLoading> {\n\tstatic widgetName = 'TrendsLoading';\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendLoading;\n\t}\n}\n\nexport class TrendLoading extends TrendWidget {\n\tprivate mesh: Mesh;\n\tprivate animation: TweenLite;\n\tprivate isActive = false;\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions, chartState: ChartState) {\n\t\treturn trendOptions.enabled && chartState.data.animations.enabled;\n\t}\n\n\tconstructor(state: ChartState, trendName: string) {\n\t\tsuper(state, trendName);\n\t\t// add beacon\n\t\tthis.mesh = new Mesh(\n\t\t\tnew PlaneBufferGeometry(32, 32),\n\t\t\tnew MeshBasicMaterial({map: TrendLoading.createTexture(), transparent: true})\n\t\t);\n\t\tthis.deactivate();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.mesh;\n\t}\n\t\n\tbindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.onPrependRequest(() => this.activate()));\n\t}\n\n\tprependData() {\n\t\tthis.deactivate();\n\t}\n\n\tprivate activate() {\n\t\tvar mesh = this.mesh;\n\t\tmesh.material.opacity = 1;\n\t\tmesh.rotation.z = 0;\n\t\tvar animation = TweenLite.to(this.mesh.rotation, 0.5, {z: Math.PI * 2});\n\t\tanimation.eventCallback('onComplete', () => {\n\t\t\tanimation.restart();\n\t\t});\n\t\tthis.animation = animation;\n\t\tthis.isActive = true;\n\t\tthis.updatePosition();\n\t}\n\n\tprivate deactivate() {\n\t\tthis.animation && this.animation.kill();\n\t\tthis.mesh.material.opacity = 0;\n\t\tthis.isActive = false;\n\t}\n\n\n\tprivate static createTexture() {\n\t\tvar h = 64, w = 64;\n\t\treturn Utils.createTexture(h, w, (ctx: CanvasRenderingContext2D) => {\n\t\t\tctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t\t\tctx.lineWidth = 5;\n\t\t\tvar center = h/2;\n\t\t\tctx.beginPath();\n\n\t\t\tctx.arc(center, center, 22, 0,Math.PI/ 2);\n\t\t\tctx.stroke();\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI/2);\n\t\t\tctx.stroke();\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(center, center, 3, 0, Math.PI * 2);\n\t\t\tctx.stroke();\n\t\t});\n\t}\n\t\n\tprotected onZoomFrame() {\n\t\tthis.updatePosition();\n\t}\n\n\tprivate updatePosition() {\n\t\tif (!this.isActive) return;\n\t\tlet trend = this.trend;\n\t\t// set new widget position\n\t\tlet segment = trend.segments.getStartSegment();\n\t\tlet x: number, y: number;\n\t\tif (trend.getOptions().type == TREND_TYPE.LINE) {\n\t\t\tx = segment.currentAnimationState.startXVal;\n\t\t\ty = segment.currentAnimationState.startYVal;\n\t\t} else {\n\t\t\tx = segment.currentAnimationState.xVal - segment.maxLength;\n\t\t\ty = segment.currentAnimationState.yVal\n\t\t}\n\t\tlet pointVector = this.chartState.screen.getPointOnChart(x, y);\n\t\tthis.mesh.position.set(pointVector.x, pointVector.y, 0);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsLoadingWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport Object3D = THREE.Object3D;\nimport {ChartState} from \"../State\";\nimport {ITrendOptions, ITrendData, Trend} from \"../Trend\";\nimport Vector2 = THREE.Vector2;\nimport Vector3 = THREE.Vector3;\nimport {TrendSegments} from \"../TrendSegments\";\nimport {IScreenTransformOptions} from \"../Screen\";\n\n\nexport interface ITrendWidgetClass<TrendWidgetType> {\n\tnew (chartState: ChartState, trendName: string): TrendWidgetType;\n\twidgetIsEnabled(trendOptions: ITrendOptions, chartState: ChartState): boolean;\n}\n\n/**\n * abstract manager class for all trends widgets\n */\nexport abstract class TrendsWidget<TrendWidgetType extends TrendWidget> extends ChartWidget {\n\tprotected abstract getTrendWidgetClass(): ITrendWidgetClass<TrendWidgetType>;\n\tprotected object3D: Object3D;\n\tprotected widgets: {[trendName: string]: TrendWidgetType} = {};\n\n\tconstructor (state: ChartState) {\n\t\tsuper(state);\n\t\tthis.object3D = new Object3D();\n\t\tthis.onTrendsChange();\n\t}\n\n\tprotected bindEvents() {\n\t\tvar state = this.chartState;\n\t\tstate.onTrendsChange(() => this.onTrendsChange());\n\t\tstate.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, changedOptions, newData)\n\t\t});\n\t}\n\n\tprotected onTrendsChange() {\n\t\tvar trendsOptions = this.chartState.data.trends;\n\t\tvar TrendWidgetClass = this.getTrendWidgetClass();\n\t\tfor (let trendName in trendsOptions) {\n\t\t\tlet trendOptions = trendsOptions[trendName];\n\t\t\tlet widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n\t\t\tif (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t\t\t\tthis.createTrendWidget(trendName);\n\t\t\t} else if (!widgetCanBeEnabled && this.widgets[trendName]){\n\t\t\t\tthis.destroyTrendWidget(trendName);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTrendChange(trendName: string, changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar widget = this.widgets[trendName];\n\t\tif (!widget) return;\n\t\twidget.onTrendChange(changedOptions);\n\t\tif (newData) {\n\t\t\tvar data = this.chartState.getTrend(trendName).getData();\n\t\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\t\tisAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t\t}\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate createTrendWidget(trendName: string) {\n\t\tvar WidgetConstructor = this.getTrendWidgetClass();\n\t\tvar widget = new WidgetConstructor(this.chartState, trendName);\n\t\tthis.widgets[trendName] = widget;\n\t\tvar widgetObject = widget.getObject3D();\n\t\twidgetObject.name = trendName;\n\t\tthis.object3D.add(widget.getObject3D());\n\t}\n\n\tprivate destroyTrendWidget(trendName: string) {\n\t\tthis.widgets[trendName].onDestroy();\n\t\tdelete this.widgets[trendName];\n\t\tvar widgetObject = this.object3D.getObjectByName(trendName);\n\t\tthis.object3D.remove(widgetObject);\n\t}\n}\n\n/**\n * based class for all trends widgets\n */\nexport abstract class TrendWidget {\n\tprotected trend: Trend;\n\tprivate unsubscribers: Function[] = [];\n\n\tconstructor (protected chartState: ChartState, protected trendName: string) {\n\t\tthis.trend = chartState.trendsManager.getTrend(trendName);\n\t\tthis.chartState = chartState;\n\t\tthis.bindEvents();\n\t}\n\tabstract getObject3D(): Object3D;\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions, chartState: ChartState) {\n\t\treturn trendOptions.enabled;\n\t}\n\tappendData(newData: ITrendData) {};\n\tprependData(newData: ITrendData) {};\n\tonTrendChange(changedOptions?: ITrendOptions) {}\n\tonDestroy() {\n\t\tfor (let unsubscriber of this.unsubscribers) {\n\t\t\tunsubscriber();\n\t\t}\n\t}\n\tprotected onSegmentsAnimate(segments: TrendSegments) {\n\t}\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onTransformationFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onZoom() {\n\t}\n\n\n\tprotected bindEvents() {\n\n\t\tthis.bindEvent(this.trend.segments.onAnimationFrame(\n\t\t\t(trendPoints: TrendSegments) => this.onSegmentsAnimate(trendPoints)\n\t\t));\n\n\t\tthis.bindEvent(this.chartState.screen.onTransformationFrame(\n\t\t\t(options) => this.onTransformationFrame(options)\n\t\t));\n\t\t\n\t\tthis.bindEvent(this.chartState.screen.onZoomFrame(\n\t\t\t(options) => this.onZoomFrame(options)\n\t\t));\n\n\t\tthis.bindEvent(this.chartState.onZoom(() => this.onZoom()));\n\t};\n\n\tprotected bindEvent(unsubscriber: Function) {\n\t\tthis.unsubscribers.push(unsubscriber);\n\t}\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport {ChartState} from \"../State\";\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Vector3 = THREE.Vector3;\nimport {Utils} from \"../Utils\";\nimport Line = THREE.Line;\nimport Mesh = THREE.Mesh;\nimport Color = THREE.Color;\nimport Texture = THREE.Texture;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport {AxisMark, AxisMarks} from \"../AxisMarks\";\nimport {AXIS_TYPE} from \"../interfaces\";\nimport {IScreenTransformOptions} from \"../Screen\";\n\n\n/**\n * widget for shows marks on axis\n */\nexport class AxisMarksWidget extends ChartWidget {\n\tstatic widgetName = 'AxisMarks';\n\n\tprivate object3D: Object3D;\n\tprivate axisMarksWidgets: AxisMarkWidget[] = [];\n\n\tconstructor(chartState: ChartState) {\n\t\tsuper(chartState);\n\t\tthis.object3D = new Object3D();\n\t\tlet {xAxisMarks, yAxisMarks} = chartState;\n\n\t\tlet items = xAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t\titems = yAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t}\n\n\tprivate createAxisMark(axisMark: AxisMark) {\n\t\tvar axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n\t\tthis.axisMarksWidgets.push(axisMarkWidget);\n\t\tthis.object3D.add(axisMarkWidget.getObject3D());\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.bindEvent(\n\t\t\tthis.chartState.screen.onTransformationFrame(() => this.updateMarksPositions()),\n\t\t\tthis.chartState.onResize(() => this.updateMarksPositions())\n\t\t);\n\t}\n\n\tprivate updateMarksPositions() {\n\t\tfor (let widget of this.axisMarksWidgets) widget.updatePosition();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n}\n\n\n\nconst DEFAULT_INDICATOR_RENDER_FUNCTION = (axisMarkWidget: AxisMarkWidget, ctx: CanvasRenderingContext2D) => {\n\tvar axisMark = axisMarkWidget.axisMark;\n\tctx.fillStyle = axisMark.options.lineColor;\n\tctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\tlet xCoord = 15;\n\n\tif (axisMark.axisType == AXIS_TYPE.Y) {\n\t\tctx.textAlign = 'end';\n\t\txCoord = axisMarkWidget.indicatorWidth;\n\t}\n\n\tctx.fillText(axisMark.options.title, xCoord, 20);\n\tif (!axisMark.options.showValue) return;\n\n\tctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n\tctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n};\n\nlet INDICATOR_POS_Z = 0.1;\n\nclass AxisMarkWidget {\n\tstatic typeName = 'simple';\n\taxisMark: AxisMark;\n\tindicatorWidth = 128;\n\tindicatorHeight = 64;\n\tprotected indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\tprotected chartState: ChartState;\n\tprotected axisType: AXIS_TYPE;\n\tprotected object3D: Object3D;\n\tprotected line: Line;\n\tprotected indicator: Mesh;\n\tprotected moveAnimation: TweenLite;\n\tprotected frameValue: number;\n\t\n\n\tconstructor(chartState: ChartState, axisMark: AxisMark) {\n\t\tthis.chartState = chartState;\n\t\tthis.axisMark = axisMark;\n\t\tthis.axisType = axisMark.axisType;\n\t\tthis.frameValue = axisMark.options.value;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.position.setZ(-0.1);\n\n\t\tthis.line = this.createLine();\n\t\tthis.object3D.add(this.line);\n\t\tthis.indicator = this.createIndicator();\n\t\tthis.object3D.add(this.indicator);\n\t\tthis.renderIndicator();\n\t\tthis.updatePosition();\n\t\tthis.bindEvents();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected createLine(): Line {\n\t\tvar {lineWidth, lineColor} = this.axisMark.options;\n\t\tvar lineGeometry = new Geometry();\n\n\t\tlineGeometry.vertices.push(new Vector3(0,0,0), new Vector3(0,0,0));\n\t\treturn new Line(\n\t\t\tlineGeometry,\n\t\t\tnew LineBasicMaterial( { color: Utils.getHexColor(lineColor), linewidth: lineWidth})\n\t\t);\n\t}\n\n\tprotected createIndicator(): Mesh {\n\t\tvar {indicatorWidth: width, indicatorHeight: height} = this;\n\t\tvar texture = Utils.createPixelPerfectTexture(width, height, (ctx) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.font = \"10px Arial\";\n\t\t});\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\treturn new Mesh(\n\t\t\tnew THREE.PlaneGeometry(width, height),\n\t\t\tmaterial\n\t\t);\n\t}\n\n\tprotected renderIndicator() {\n\t\tvar texture = (this.indicator.material as MeshBasicMaterial).map as Texture;\n\t\tvar ctx = (texture.image as HTMLCanvasElement).getContext('2d');\n\t\tDEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.axisMark.onDisplayedValueChange(() => this.renderIndicator());\n\t\tthis.axisMark.onValueChange(() => this.onValueChangeHandler());\n\t}\n\n\tprivate onValueChangeHandler() {\n\t\t// move mark to new position with animation\n\t\tif (this.moveAnimation) this.moveAnimation.kill();\n\t\tvar animations = this.chartState.data.animations;\n\t\tvar targetValue = this.axisMark.options.value;\n\t\tvar cb = () => {\n\t\t\tthis.updatePosition();\n\t\t};\n\t\tif (animations.enabled) {\n\t\t\tthis.moveAnimation = TweenLite.to(\n\t\t\t\tthis, animations.trendChangeSpeed,\n\t\t\t\t{frameValue: targetValue, ease: animations.trendChangeEase}\n\t\t\t);\n\t\t\tthis.moveAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.frameValue = targetValue;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tupdatePosition()  {\n\t\tlet chartState = this.chartState;\n\t\tlet screen = chartState.screen;\n\t\tlet isXAxis = this.axisType == AXIS_TYPE.X;\n\t\tlet lineGeometry = (this.line.geometry as Geometry);\n\t\tlet hasStickMode = this.axisMark.options.stickToEdges;\n\t\tlet {width, height} = this.chartState.data;\n\n\t\tif (isXAxis) {\n\t\t\t// TODO: make stickToEdges mode for AXIS_TYPE.X \n\t\t\tthis.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\tlineGeometry.vertices[1].setY(height);\n\t\t\tthis.indicator.position.set(\n\t\t\t\tthis.indicatorWidth / 2,\n\t\t\t\tchartState.data.height - this.indicatorHeight / 2,\n\t\t\t\tINDICATOR_POS_Z\n\t\t\t);\n\t\t} else {\n\t\t\tlet val = this.frameValue;\n\t\t\tlet bottomVal = screen.getBottomVal();\n\t\t\tlet topVal = screen.getTopVal();\n\t\t\tlet needToStickOnTop = hasStickMode && val > topVal;\n\t\t\tlet needToStickOnBottom = hasStickMode && val < bottomVal;\n\t\t\tlet centerYVal = screen.getCenterYVal();\n\t\t\tthis.object3D.position.x = screen.getLeft();\n\t\t\tif (needToStickOnTop) {\n\t\t\t\tthis.object3D.position.y = screen.getTop();\n\t\t\t} else if (needToStickOnBottom) {\n\t\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\t} else {\n\t\t\t\tthis.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t\t\t}\n\t\t\tlineGeometry.vertices[1].setX(width);\n\n\t\t\tlet indicatorPosY = val > centerYVal ? -35 : 10;\n\t\t\tthis.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t\t}\n\t\tlineGeometry.verticesNeedUpdate = true;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisMarksWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport {ChartState} from \"../State\";\nimport LineSegments = THREE.LineSegments;\nimport Vector3 = THREE.Vector3;\n/**\n * widget for drawing chart grid\n */\nexport class BorderWidget extends ChartWidget {\n\tstatic widgetName = 'Border';\n\tprivate lineSegments: LineSegments;\n\n\n\tconstructor (chartState: ChartState) {\n\t\tsuper(chartState);\n\t\tvar {width, height} = chartState.data;\n\t\tvar geometry = new THREE.Geometry();\n\t\tvar material = new THREE.LineBasicMaterial( { linewidth: 1, opacity: 0.0, transparent: true} );\n\n\t\tgeometry.vertices.push(\n\t\t\tnew Vector3(0, 0, 0), new Vector3(0, height, 0),\n\t\t\tnew Vector3(0, height, 0), new Vector3(width, height, 0),\n\t\t\tnew Vector3(width, height, 0), new Vector3(width, 0, 0),\n\t\t\tnew Vector3(width, 0, 0), new Vector3(0, 0, 0),\n\t\t\tnew Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0)\n\t\t);\n\t\tthis.lineSegments = new LineSegments(geometry, material);\n\t}\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/BorderWidget.ts\n **/","\nimport Object3D = THREE.Object3D;\nimport {ChartState} from \"../State\";\nimport {Utils} from \"../Utils\";\nimport Mesh = THREE.Mesh;\nimport PlaneBufferGeometry = THREE.PlaneBufferGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport Vector3 = THREE.Vector3;\nimport {TrendWidget, TrendsWidget} from \"./TrendsWidget\";\nimport {ITrendOptions} from \"../Trend\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport Color = THREE.Color;\nimport {TrendSegments, TrendSegment} from \"../TrendSegments.ts\";\n\nconst CANVAS_WIDTH = 128;\nconst CANVAS_HEIGHT = 64;\nconst OFFSET_X = 15;\n\nexport class TrendsIndicatorWidget extends TrendsWidget<TrendIndicator> {\n\tstatic widgetName = 'TrendsIndicator';\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendIndicator;\n\t}\n}\n\nexport class TrendIndicator extends TrendWidget {\n\tprivate mesh: Mesh;\n\tprivate segment: TrendSegment;\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.hasIndicator;\n\t}\n\n\tconstructor(state: ChartState, trendName: string) {\n\t\tsuper(state, trendName);\n\t\tthis.initObject();\n\t\tthis.onTrendChange();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.mesh;\n\t}\n\n\tonTrendChange() {\n\t\t// update canvas value\n\t\tlet trendData = this.trend.getData();\n\t\tvar lastItem = trendData[trendData.length - 1];\n\t\tvar texture = (this.mesh.material as MeshBasicMaterial).map;\n\t\tvar ctx = texture.image.getContext('2d');\n\t\tctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\t\t// uncomment to preview indicator rect\n\t\t// ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t\t// ctx.fillRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\t\tctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprivate initObject() {\n\t\tvar color = new Color(this.trend.getOptions().lineColor);\n\t\tvar texture = Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, (ctx) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.font = \"15px Arial\";\n\t\t\tctx.fillStyle = color.getStyle();\n\t\t\tctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t\t});\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tthis.mesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT),\n\t\t\tmaterial\n\t\t);\n\t}\n\n\tprotected onTransformationFrame() {\n\t\t// set new widget position\n\t\tthis.segment = this.trend.segments.getEndSegment();\n\t\tthis.updatePosition();\n\t}\n\n\tprotected onSegmentsAnimate(segments: TrendSegments) {\n\t\t// set new widget position\n\t\tthis.segment = segments.getEndSegment();\n\t\tthis.updatePosition();\n\t}\n\n\tprivate updatePosition() {\n\t\tvar state = this.chartState;\n\t\tvar {endXVal: segmentEndXVal, endYVal: segmentEndYVal} = this.segment.currentAnimationState;\n\t\tvar endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n\t\tvar screenWidth = state.data.width;\n\t\tvar x = endPointVector.x + OFFSET_X;\n\t\tvar y = endPointVector.y;\n\t\t\n\t\tvar screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t\tvar indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n\t\tif (indicatorIsOutOfScreen) {\n\t\t\tif (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n\t\t\tif (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n\t\t\ty -= 25;\n\t\t}\n\t\tthis.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2  - 30, 0.1);\n\t}\n\n\t\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsIndicatorWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {ChartState} from \"../State\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport { TrendSegments, ITrendSegmentState } from \"../TrendSegments.ts\";\nimport LineSegments = THREE.LineSegments;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ITrendOptions, TREND_TYPE } from '../Trend';\nimport { Utils } from '../Utils';\n\nconst MAX_DISPLAYED_SEGMENTS = 2000;\n\n/**\n * widget for drawing trends lines\n */\nexport class TrendsLineWidget extends TrendsWidget<TrendLine> {\n\tstatic widgetName = \"TrendsLine\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendLine;\n\t}\n}\n\ninterface ILineSegment {\n\tind: number,\n\tsegmentId: number\n}\n\nexport class TrendLine extends TrendWidget {\n\tprivate material: LineBasicMaterial;\n\tprivate lineSegments: LineSegments;\n\tprivate scaleXFactor: number;\n\tprivate scaleYFactor: number;\n\tprivate vertices: Vector3[];\n\n\t// contains indexes of free segments\n\tprivate freeSegmentsInds: number[] = [];\n\n\t// contains segments to display\n\tprivate displayedSegments: {[segmentId: number]: ILineSegment} = {};\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.LINE;\n\t}\n\t\n\tconstructor (chartState: ChartState, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tvar options = this.trend.getOptions();\n\t\tthis.material = new LineBasicMaterial( { color: options.lineColor, linewidth: options.lineWidth } );\n\t\tthis.initLine();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segments.onRebuild(() => {\n\t\t\tthis.destroySegments();\n\t\t\tthis.setupSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segments.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupSegments();\n\t\t}));\n\t}\n\t\n\tprivate initLine() {\n\t\tlet geometry = new Geometry();\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chartState.data.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chartState.data.yAxis.range;\n\t\tthis.scaleXFactor = scaleXFactor;\n\t\tthis.scaleYFactor = scaleYFactor;\n\t\tthis.lineSegments = new LineSegments(geometry, this.material);\n\t\tthis.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t\tfor (let i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\n\t\t\tgeometry.vertices.push(new  Vector3(), new Vector3());\n\t\t\tthis.freeSegmentsInds.push(i);\n\t\t}\n\t\tthis.vertices = geometry.vertices;\n\t\tthis.setupSegments();\n\t}\n\n\tprivate setupSegments() {\n\t\tlet geometry = this.lineSegments.geometry as Geometry;\n\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segments;\n\n\t\tfor (let segmentId in this.displayedSegments) {\n\t\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\t\tlet segment = this.trend.segments.segments[lineSegment.segmentId];\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupSegment(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate setupSegment(segmentId: number, segmentState: ITrendSegmentState) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tif (!lineSegment) {\n\t\t\tif (this.freeSegmentsInds.length == 0) Utils.error('Max allocated segments reached');\n\t\t\tlet ind = this.freeSegmentsInds.pop();\n\t\t\tlineSegment = this.displayedSegments[segmentId] = {segmentId, ind};\n\t\t}\n\t\tlet segmentInd = lineSegment.ind;\n\t\tlet lineStartVertex = this.vertices[segmentInd * 2];\n\t\tlet lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t\tlineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t\tlineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t}\n\n\tprivate destroySegments() {\n\t\tfor (let segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t}\n\n\tprivate destroySegment(segmentId: number) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tlet lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t\tlet lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t\tlineStartVertex.set(0, 0, 0);\n\t\tlineEndVertex.set(0, 0, 0);\n\t\tdelete this.displayedSegments[segmentId];\n\t\tthis.freeSegmentsInds.push(lineSegment.ind);\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.lineSegments.scale;\n\t\tif (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegments) {\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.displayedSegments[segmentId]) continue;\n\t\t\tthis.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chartState.data.xAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chartState.data.yAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsLineWidget.ts\n **/","\n\nimport { TrendsWidget, TrendWidget } from './TrendsWidget';\nimport { ChartState } from '../State';\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegments, ITrendSegmentState } from '../TrendSegments.ts';\nimport Vector3 = THREE.Vector3;\nimport Mesh = THREE.Mesh;\nimport Line = THREE.Line;\nimport BoxGeometry = THREE.BoxGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { TREND_TYPE, ITrendOptions } from '../Trend';\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport remove = THREE.Cache.remove;\nimport { Utils } from '../Utils';\n\n\nconst RISE_COLOR = 0x2CAC40;\nconst FALL_COLOR = 0xEE5533;\nconst MARGIN_PERCENT = 0.3;\nconst MAX_CANDLES = 100;\n\n/**\n * widget for drawing trends candles\n */\nexport class TrendsCandlesWidget extends TrendsWidget<TrendCandlesWidget> {\n\tstatic widgetName = \"TrendsCandles\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendCandlesWidget;\n\t}\n}\n\n\nexport class TrendCandlesWidget extends TrendWidget {\n\tprivate scaleXFactor: number;\n\tprivate scaleYFactor: number;\n\tprivate object3D: Object3D;\n\t\n\t// contains indexes of free candles\n\tprivate freeCandlesInds: number[] = [];\n\tprivate candlesPool: CandleWidget[] = [];\n\tprivate candles: {[segmentId: number]: CandleWidget} = {};\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.CANDLE;\n\t}\n\n\tconstructor (chartState: ChartState, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.initObject();\n\t}\n\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segments.onRebuild(() => {\n\t\t\tthis.destroyCandles();\n\t\t\tthis.setupCandles();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segments.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupCandles();\n\t\t}));\n\t}\n\t\n\tprivate initObject() {\n\t\tlet stateData = this.chartState.data;\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = stateData.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = stateData.yAxis.range;\n\t\tthis.scaleXFactor = scaleXFactor;\n\t\tthis.scaleYFactor = scaleYFactor;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.object3D.frustumCulled = false;\n\t\tfor (let i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t\tthis.setupCandles();\n\t}\n\n\tprivate setupCandles() {\n\n\t\t// remove invisible\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segments;\n\n\t\tfor (let segmentId in this.candles) {\n\t\t\tlet segment = this.candles[segmentId].segment;\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupCandle(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t}\n\n\tprivate destroyCandles() {\n\t\tfor (let segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t}\n\n\tprivate destroyCandle(segmentId: number) {\n\t\tlet candle = this.candles[segmentId];\n\t\tthis.object3D.remove(candle.getObject3D());\n\t\tdelete this.candles[segmentId];\n\t}\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.object3D.scale;\n\t\tif (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t}\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegments) {\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.candles[segmentId]) continue;\n\t\t\tlet segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t\t\tthis.setupCandle(segmentId, segmentState);\n\t\t}\n\t}\n\n\t/**\n\t * create or modify candle\n\t */\n\tprivate setupCandle(candleId: number, segmentState: ITrendSegmentState) {\n\t\tlet candleInd = candleId % MAX_CANDLES;\n\n\t\t// get candle from candlesPool to avoid creating new Objects by performance reasons\n\t\tlet candle = this.candlesPool[candleInd];\n\t\tif (!candle) {\n\t\t\tcandle = this.candlesPool[candleInd] = new CandleWidget();\n\t\t}\n\n\t\tif (!this.candles[candleId]) {\n\t\t\tthis.candles[candleId] = candle;\n\t\t\tthis.object3D.add(candle.getObject3D());\n\t\t}\n\t\tcandle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t\tcandle.setSegment(segmentState);\n\t}\n\n\ttoLocalX(xVal: number): number {\n\t\treturn xVal - this.chartState.data.xAxis.range.zeroVal;\n\t}\n\n\ttoLocalY(yVal: number): number {\n\t\treturn yVal - this.chartState.data.yAxis.range.zeroVal;\n\t}\n\n\ttoLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\nclass CandleWidget {\n\tsegment: ITrendSegmentState;\n\tprivate rect: Mesh;\n\tprivate vLine: Line;\n\tprivate hLine: Line;\n\tconstructor () {\n\t\tthis.initObject();\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.rect;\n\t}\n\n\tsetSegment(segment: ITrendSegmentState) {\n\t\tthis.segment = segment;\n\t\tlet color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\n\t\t// update rect\n\t\tlet geometry = this.rect.geometry as PlaneGeometry;\n\t\tlet material = this.rect.material as MeshBasicMaterial;\n\t\tlet width = segment.endXVal - segment.startXVal;\n\t\twidth -= width * MARGIN_PERCENT;\n\t\tlet height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t\tlet [leftTop, rightTop, leftBottom, rightBottom] = geometry.vertices;\n\t\tleftTop.set(-width / 2, height / 2, 0);\n\t\trightTop.set(width / 2, height / 2, 0);\n\t\tleftBottom.set(-width / 2, -height / 2, 0);\n\t\trightBottom.set(width / 2, -height / 2, 0);\n\n\t\t// prevent to draw bars with height < 1px\n\t\tif (Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t\t\tleftBottom.setY(leftBottom.y + 1);\n\t\t\trightBottom.setY(rightBottom.y + 1);\n\t\t}\n\n\t\tmaterial.color.set(color);\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\t// update lines\n\t\tlet vLineGeometry = this.vLine.geometry as Geometry;\n\t\tlet vLineMaterial = this.vLine.material as LineBasicMaterial;\n\t\tlet lineTop = segment.maxYVal - segment.yVal;\n\t\tlet lineBottom = segment.minYVal - segment.yVal;\n\t\tvLineGeometry.vertices[0].set(0, lineTop, 0);\n\t\tvLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t\tvLineMaterial.color.set(color);\n\t\tvLineGeometry.verticesNeedUpdate = true;\n\n\t\tlet hLineGeometry = this.hLine.geometry as Geometry;\n\t\tlet hLineMaterial = this.hLine.material as LineBasicMaterial;\n\t\tlet lineLeft = (-width) / 2;\n\t\tlet lineRight = width / 2;\n\t\thLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t\thLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t\thLineMaterial.color.set(color);\n\t\thLineGeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate initObject() {\n\t\tthis.rect = new Mesh(\n\t\t\tnew PlaneGeometry(1, 1),\n\t\t\tnew MeshBasicMaterial()\n\t\t);\n\t\tlet vLineGeometry = new Geometry();\n\t\tlet hLineGeometry = new Geometry();\n\t\tvLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\thLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\tthis.vLine = new Line(vLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.hLine = new Line(hLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.rect.add(this.vLine);\n\t\tthis.rect.add(this.hLine);\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsCandleWidget.ts\n **/","\nimport Object3D = THREE.Object3D;\nimport { ChartState, IChartState } from \"../State\";\nimport {Utils} from \"../Utils\";\nimport Mesh = THREE.Mesh;\nimport PlaneBufferGeometry = THREE.PlaneBufferGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport Vector3 = THREE.Vector3;\nimport {TrendWidget, TrendsWidget} from \"./TrendsWidget\";\nimport { ITrendOptions, TREND_TYPE } from \"../Trend\";\nimport {TrendSegments, TrendSegment} from \"../TrendSegments.ts\";\nimport chartreuse = THREE.ColorKeywords.chartreuse;\n\n/**\n * widget adds blinking beacon on trends end\n * activated when trend.hasBeacon = true\n */\nexport class TrendsBeaconWidget extends TrendsWidget<TrendBeacon> {\n\tstatic widgetName = 'TrendsBeacon';\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendBeacon;\n\t}\n}\n\nexport class TrendBeacon extends TrendWidget {\n\tprivate mesh: Mesh;\n\tprivate animated: boolean;\n\tprivate segment: TrendSegment;\n\tprivate animation: TweenLite;\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == TREND_TYPE.LINE;\n\t}\n\n\tconstructor(state: ChartState, trendName: string) {\n\t\tsuper(state, trendName);\n\n\t\tthis.initObject();\n\t\tif (state.data.animations.enabled) {\n\t\t\tthis.animate();\n\t\t}\n\t\tthis.updatePosition();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.mesh;\n\t}\n\n\tonTrendChange() {\n\t\tthis.updatePosition();\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.chartState.onScroll(() => this.updatePosition()));\n\t\tthis.bindEvent(this.chartState.onChange(changedProps => this.onStateChange(changedProps)));\n\t\tthis.bindEvent(this.chartState.onDestroy(() => this.stopAnimation()));\n\t}\n\n\tprivate initObject() {\n\t\t\n\t\t// add beacon\n\t\tlet light = this.mesh = new Mesh(\n\t\t\tnew PlaneBufferGeometry(32, 32),\n\t\t\tnew MeshBasicMaterial({map: TrendBeacon.createTexture(), transparent: true})\n\t\t);\n\n\n\t\tlight.scale.set(0.2, 0.2, 1);\n\n\t\t// add dot\n\t\tlight.add(new Mesh(\n\t\t\tnew PlaneBufferGeometry(5, 5),\n\t\t\tnew MeshBasicMaterial({map: TrendBeacon.createTexture()})\n\t\t));\n\n\t\tthis.segment = this.trend.segments.getEndSegment();\n\t}\n\n\tprivate animate() {\n\t\tthis.animated = true;\n\t\tvar object = this.mesh;\n\t\tvar animationObject = {\n\t\t\tscale: object.scale.x,\n\t\t\topacity: object.material.opacity\n\t\t};\n\n\n\t\tthis.mesh.scale.set(0.1, 0.1, 1);\n\n\t\tsetTimeout(() => {\n\t\t\tvar animation = this.animation = TweenLite.to(\n\t\t\t\tanimationObject,\n\t\t\t\t1,\n\t\t\t\t{scale: 1, opacity: 0}\n\t\t\t);\n\t\t\tanimation.eventCallback('onUpdate', () => {\n\t\t\t\tobject.scale.set(animationObject.scale, animationObject.scale, 1);\n\t\t\t\tobject.material.opacity = animationObject.opacity\n\t\t\t}).eventCallback('onComplete', () => {\n\t\t\t\tthis.animation && animation.restart();\n\t\t\t});\n\t\t}, 500);\n\t\n\t}\n\n\tprivate stopAnimation() {\n\t\tthis.animated = false;\n\t\tthis.animation && this.animation.kill();\n\t\tthis.animation = null;\n\t}\n\n\tprivate static createTexture() {\n\t\tvar h = 32, w = 32;\n\t\treturn Utils.createTexture(h, w, (ctx: CanvasRenderingContext2D) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n\t\t\tctx.fillStyle = 'white';\n\t\t\tctx.fill();\n\t\t});\n\t}\n\n\tprotected onTransformationFrame() {\n\t\tthis.segment = this.trend.segments.getEndSegment();\n\t\tthis.updatePosition();\n\t}\n\n\tprotected onSegmentsAnimate(trendsSegments: TrendSegments) {\n\t\tthis.segment = trendsSegments.getEndSegment();\n\t\tthis.updatePosition();\n\t}\n\n\tprivate onStateChange(changedProps: IChartState) {\n\t\tif (!changedProps.animations) return;\n\t\tif (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n\t\tif (changedProps.animations.enabled) {\n\t\t\tthis.animate();\n\t\t} else {\n\t\t\tthis.stopAnimation();\n\t\t}\n\t}\n\n\tprivate updatePosition() {\n\t\tvar state = this.chartState;\n\t\tvar xVal: number, yVal: number;\n\t\tvar currentAnimationState =  this.segment.currentAnimationState;\n\t\tif (this.trend.getOptions().type == TREND_TYPE.LINE) {\n\t\t\txVal = currentAnimationState.endXVal;\n\t\t\tyVal = currentAnimationState.endYVal;\n\t\t} else {\n\t\t\txVal = currentAnimationState.xVal;\n\t\t\tyVal = currentAnimationState.endYVal;\n\t\t}\n\t\tvar endPointVector = state.screen.getPointOnChart(xVal, yVal);\n\t\tvar screenWidth = state.data.width;\n\t\tvar x = endPointVector.x;\n\t\tvar screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t\tif (screenX < 0) x = state.screen.getPointByScreenX(0);\n\t\tif (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n\t\tthis.mesh.position.set(x, endPointVector.y, 0.1);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsBeaconWidget.ts\n **/","export * from './deps'\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/index.ts\n **/","import { ChartState, IChartState } from \"./State\";\nimport { Utils } from './Utils';\nimport { EventEmitter } from './EventEmmiter';\nimport { ChartWidget } from './Widget';\n\nexport interface IChartPluginState {\n}\n\nexport interface IChartPluginConfig {\n\tinstallPluginWidgets?: boolean;\n}\n\nexport const DEFAULT_CONFIG: IChartPluginConfig = {\n\tinstallPluginWidgets: true\n};\n\n/**\n * base class for all plugins\n * NAME is mandatory\n */\nexport abstract class ChartPlugin {\n\tstatic NAME: string = '';\n\tstatic pluginWidgets: typeof ChartWidget[] = [];\n\n\tinitialState: IChartPluginState;\n\tconfig: IChartPluginConfig;\n\tname: string;\n\tprotected chartState: ChartState;\n\tprotected unsubscribers: Function[] = [];\n\tprotected ee: EventEmitter;\n\n\tconstructor (options?: IChartPluginState, config: IChartPluginConfig = {}) {\n\t\tthis.initialState = options;\n\t\tthis.config = Utils.deepMerge(DEFAULT_CONFIG, config);\n\t\tthis.name = (this.constructor as typeof ChartPlugin).NAME;\n\t\tif (!this.name) Utils.error('Unnamed plugin detected');\n\t}\n\n\tsetupChartState(chartState: ChartState) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvent(\n\t\t\tthis.chartState.onInitialStateApplied(initialState => this.onInitialStateAppliedHandler(initialState)),\n\t\t\tthis.chartState.onReady(() => this.onChartReadyHandler()),\n\t\t\tthis.chartState.onDestroy(() => this.onDestroyHandler()),\n\t\t\tthis.chartState.onPluginsStateChange(changedPluginsStates => changedPluginsStates[this.name] && this.onStateChanged(changedPluginsStates[this.name]))\n\t\t)\n\t}\n\n\tgetOptions(): IChartPluginState {\n\t\treturn this.chartState.data.pluginsState[this.name];\n\t}\n\n\tprotected onInitialStateAppliedHandler(initialState: IChartState) {\n\t}\n\n\tprotected onChartReadyHandler() {\n\t}\n\n\tprotected onStateChanged(changedState: IChartPluginState) {\n\t}\n\n\tprotected onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t}\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unsubscribers: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunsubscribers.push(args[0] as Function);\n\t\t} else {\n\t\t\tunsubscribers.push(...args as Function[]);\n\t\t}\n\t\tthis.unsubscribers.push(...unsubscribers);\n\t}\n\n\n\tprotected unbindEvents() {\n\t\tthis.unsubscribers.forEach(unsubscriber => unsubscriber());\n\t\tthis.unsubscribers.length = 0;\n\t}\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Plugin.ts\n **/"],"sourceRoot":""}