{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ThreeChart.js","webpack:///webpack/bootstrap 05ad54f1cdc94df18601","webpack:///./index.ts","webpack:///./src/index.ts","webpack:///./src/ChartView.ts","webpack:///./src/Plugin.ts","webpack:///./src/Utils.ts","webpack:///./src/deps/deps.ts","webpack:///./~/three/examples/js/libs/stats.min.js","webpack:///./~/is-plain-object/index.js","webpack:///./~/isobject/index.js","webpack:///./~/eventemitter2/lib/eventemitter2.js","webpack:///./src/polyfills/es6-promise.js","webpack:///./~/css-element-queries/src/ResizeSensor.js","webpack:///./src/EventEmmiter.ts","webpack:///./src/Chart.ts","webpack:///./src/Trend.ts","webpack:///./src/TrendSegmentsManager.ts","webpack:///./src/TrendsManager.ts","webpack:///./src/Screen.ts","webpack:///./src/AxisMarks.ts","webpack:///./src/interfaces.ts","webpack:///./src/Widget.ts","webpack:///./src/widgets/AxisWidget.ts","webpack:///./src/widgets/GridWidget.ts","webpack:///./src/Color.ts","webpack:///./src/widgets/TrendsGradientWidget.ts","webpack:///./src/widgets/TrendsWidget.ts","webpack:///./src/widgets/TrendsLineWidget.ts","webpack:///./src/widgets/TrendsCandleWidget.ts","webpack:///./src/deps/index.ts","webpack:///./src/widgets/AxisMarksWidget.ts","webpack:///./src/widgets/index.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","__export","hasOwnProperty","__extends","d","b","__","constructor","prototype","Object","create","Plugin_1","PerspectiveCamera","THREE","Chart_1","Widget_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsGradientWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","deps_1","Color_1","AxisMarksWidget_1","ChartBlankView","state","$container","pluginsAndWidgets","_this","widgets","REVISION","Utils","error","style","getComputedStyle","width","parseInt","height","plugins","filter","pluginOrWidget","ChartPlugin","chart","Chart","zoomThrottled","throttle","zoomValue","origin","zoom","init","_a","w","h","showStats","autoRender","scene","Scene","isStopped","enabled","renderer","ChartView","renderers","antialias","alpha","backgroundColor","ChartColor","setSize","setPixelRatio","devicePixelRatio","setClearColor","value","a","appendChild","domElement","$el","display","stats","Stats","setupCamera","initWidgets","bindEvents","renderLoop","preinstalledWidgetsClasses","preinstalledWidgets","customWidgets","forEach","ChartWidget","push","pluginWidgetClasses","providedWidgets","apply","concat","map","WidgetClass","widget","setupChart","onReadyHandler","add","getObject3D","isDestroyed","begin","render","fpsLimit","fps","delay_1","setTimeout","requestAnimationFrame","end","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","getTrend","trendName","setState","controls","addEventListener","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","options","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","autoScroll","oldTrendsMaxX","prevState","computedData","trends","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","xAxis","range","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","Math","min","max","autoScrollIsEnabled","then","window","CanvasRenderer","WebGLRenderer","_super","arguments","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsGradientWidget","AxisMarksWidget","EventEmmiter_1","DEFAULT_CONFIG","installPluginWidgets","config","initialState","deepMerge","name","NAME","ee","EventEmitter","bindEvent","onInitialStateApplied","onInitialStateAppliedHandler","onReady","onDestroy","onDestroyHandler","onPluginsStateChange","changedPluginsStates","onStateChanged","getOptions","pluginsState","changedState","removeAllListeners","args","_i","length","Array","isArray","unsubscriber","deepmerge","target","src","mergeArrays","array","dst","i","indexOf","keys","key","obj1","obj2","deepCopy","obj","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","floor","intStr","toString","lengthDiff","repeat","afterPointDigitsCount","afterPointStr","split","substr","createTexture","fn","canvas","document","createElement","ctx","getContext","texture","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","console","warn","getUid","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","random","copyProps","srcObject","dstObject","props","excludeProps","isPlainObject","TweenLite","TweenMax","EE2","es6_promise_1","Promise","dom","k","children","l","cssText","g","performance","Date","now","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","round","u","n","q","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","isObject","isObjectObject","o","ctor","prot","val","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_isArray","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","searchListenerTree","handlers","type","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","**","growListenerTree","listener","slice","shift","warned","trace","setMaxListeners","event","once","many","ttl","Error","off","_origin","on","emit","_all","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","listenersAny","EventEmitter2","element","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","expand","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","el","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","eventName","subscribe","listenersCount","Vector3","Trend_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","LIGHT_BLUE","AXIS_RANGE_TYPE","ALL","from","to","padding","start","margin","dataType","AXIS_DATA_TYPE","NUMBER","grid","minSizePx","color","marks","yAxis","RELATIVE_END","animations","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","scrollSpeed","scrollEase","Linear","easeNone","autoScrollSpeed","autoScrollEase","trendDefaultState","TREND_TYPE","LINE","data","maxSegmentLength","lineWidth","lineColor","hasBackground","hasBeacon","settingsForTypes","CANDLE","minSegmentLengthInPx","maxSegmentLengthInPx","eventEmitterMaxListeners","maxVisibleSegments","isReady","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","xAxisMarks","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","initListeners","onChange","onTrendChange","onZoom","newState","eventData","silent","stateData","newStateObj","changedProps","trendsData","trendOptions","newStateContainsData","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","zeroVal","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","maxLength","rangeLessThenMinValue","minLength","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","abs","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","currentRange","nextRange","newScroll","resolve","animationTime","zoomToRange","scrollToEnd","endXVal","getPointOnXAxis","xVal","getPointOnYAxis","yVal","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","TrendSegmentsManager_1","EVENTS","PREPEND_REQUEST","Trend","chartState","minYVal","maxYVal","dataset","prepareData","segmentsManager","TrendSegmentsManager","checkForPrependRequest","changedOptions","getCalculatedOptions","appendData","rawData","getData","updatedTrendData","changeData","prependData","allData","newData_1","item","statePatch","fromX","toX","filteredData","data_1","getFirstItem","getLastItem","setOptions","onPrependRequest","onDataChange","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","reject","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","trend","segmentsById","segments","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getSegment","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","segmentLength","currentSegmentLengthInPx","Number","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","firstDisplayedSegmentInd","lastDisplayedSegmentInd","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","getNext","valueInPoint","onAnimationFrame","onRebuild","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","unshift","needRebuildSegments","trendData","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","complete","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","getPrev","prevPoint","getFrameVal","getFramePoint","frameVal","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getEnabledTrends","enabledTrends","allTrends","firstTrendData","getExtremumYVal","extremumIsMax","compareFn","trends_1","trendYValues","dataItem","NaN","onSegmentsRebuilded","_loop_1","this_1","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","transform","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","AXIS_MARK_DEFAULT_OPTIONS","showValue","stickToEdges","title","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","getItem","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","unbindList","unbindEvent","widgetName","Mesh","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","axisOptions","traverse","beginPath","rgbaStr","strokeStyle","material","MeshBasicMaterial","side","FrontSide","transparent","axisMesh","PlaneGeometry","axisGridParams","getGridParamsForAxis","geometry","parameters","image","clearRect","edgeOffset","segmentsCount","step","pxVal","textAlign","DATE","getDateStr","stroke","closePath","gridParams","sec","hour","day","tf","getHours","getMinutes","getSeconds","LineSegments","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","Geometry","LineBasicMaterial","linewidth","opacity","xLinesCount","yLinesCount","vertices","lineSegments","setZ","frustumCulled","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","scale","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","parseColor","cache","replace","exec","isNaN","colorStr","rgba","hexStr","TrendsWidget_1","getTrendWidgetClass","TrendGradient","TrendsWidget","visibleSegmentsCnt","segmentsIds","Uint16Array","initGradient","updateSegments","widgetIsEnabled","gradient","faces","Face3","scaleXFactor","scaleYFactor","currentScale","onSegmentsAnimate","trendSegmentsManager","includes","setupSegmentVertices","segmentInd","prevVisibleSegmentsCnt","segmentsToProcessCnt","segmentState","gradientSegmentInd","topLeft","bottomLeft","bottomRight","topRight","screenHeightVal","startX","toLocalX","startY","toLocalY","endX","endY","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","WidgetConstructor","widgetObject","getObjectByName","unbind","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","segmentIsNotDisplayed","destroySegment","setupSegment","pop","lineStartVertex","lineEndVertex","toLocalVec","vec","Line","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","initObject","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","updatePosition","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","line","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY"],"mappings":"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","file":"ThreeChart.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(1));\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(2));\r\n\t__export(__webpack_require__(19));\r\n\t__export(__webpack_require__(18));\r\n\t__export(__webpack_require__(17));\r\n\t__export(__webpack_require__(13));\r\n\t__export(__webpack_require__(14));\r\n\t__export(__webpack_require__(15));\r\n\t__export(__webpack_require__(16));\r\n\t__export(__webpack_require__(4));\r\n\t__export(__webpack_require__(20));\r\n\t__export(__webpack_require__(3));\r\n\t__export(__webpack_require__(23));\r\n\t__export(__webpack_require__(30));\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\t// deps must be always on top\r\n\tvar Plugin_1 = __webpack_require__(3);\r\n\t__webpack_require__(5);\r\n\tvar PerspectiveCamera = THREE.PerspectiveCamera;\r\n\tvar Chart_1 = __webpack_require__(13);\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar AxisWidget_1 = __webpack_require__(21);\r\n\tvar GridWidget_1 = __webpack_require__(22);\r\n\tvar TrendsGradientWidget_1 = __webpack_require__(24);\r\n\tvar TrendsLineWidget_1 = __webpack_require__(26);\r\n\tvar TrendsCandleWidget_1 = __webpack_require__(27);\r\n\tvar deps_1 = __webpack_require__(28);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\tvar AxisMarksWidget_1 = __webpack_require__(29);\r\n\tvar ChartBlankView = (function () {\r\n\t    function ChartBlankView(state, $container, pluginsAndWidgets) {\r\n\t        var _this = this;\r\n\t        if (pluginsAndWidgets === void 0) { pluginsAndWidgets = []; }\r\n\t        this.widgets = [];\r\n\t        if (!THREE || !THREE.REVISION)\r\n\t            Utils_1.Utils.error('three.js not found');\r\n\t        if (!$container) {\r\n\t            Utils_1.Utils.error('$el must be set');\r\n\t        }\r\n\t        // calculate state size\r\n\t        var style = getComputedStyle($container);\r\n\t        state.width = parseInt(style.width);\r\n\t        state.height = parseInt(style.height);\r\n\t        var plugins = pluginsAndWidgets.filter(function (pluginOrWidget) { return pluginOrWidget instanceof Plugin_1.ChartPlugin; });\r\n\t        this.chart = new Chart_1.Chart(state, plugins);\r\n\t        this.pluginsAndWidgets = pluginsAndWidgets;\r\n\t        this.zoomThrottled = Utils_1.Utils.throttle(function (zoomValue, origin) { return _this.zoom(zoomValue, origin); }, 200);\r\n\t        this.$container = $container;\r\n\t        this.init($container);\r\n\t    }\r\n\t    ;\r\n\t    ChartBlankView.prototype.init = function ($container) {\r\n\t        var chart = this.chart;\r\n\t        var _a = chart.state, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\r\n\t        this.scene = new THREE.Scene();\r\n\t        this.isStopped = !autoRender.enabled;\r\n\t        var renderer = this.renderer = new ChartView.renderers[this.chart.state.renderer]({\r\n\t            antialias: true,\r\n\t            alpha: true\r\n\t        });\r\n\t        var backgroundColor = new Color_1.ChartColor(chart.state.backgroundColor);\r\n\t        renderer.setSize(w, h);\r\n\t        renderer.setPixelRatio(ChartView.devicePixelRatio);\r\n\t        renderer.setClearColor(backgroundColor.value, backgroundColor.a);\r\n\t        $container.appendChild(renderer.domElement);\r\n\t        this.$el = renderer.domElement;\r\n\t        this.$el.style.display = 'block';\r\n\t        if (showStats) {\r\n\t            this.stats = new Stats();\r\n\t            $container.appendChild(this.stats.domElement);\r\n\t        }\r\n\t        this.setupCamera();\r\n\t        this.initWidgets();\r\n\t        this.bindEvents();\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\r\n\t     */\r\n\t    ChartBlankView.prototype.initWidgets = function () {\r\n\t        var _this = this;\r\n\t        var preinstalledWidgetsClasses = this.constructor.preinstalledWidgets;\r\n\t        var customWidgets = [];\r\n\t        this.pluginsAndWidgets.forEach(function (pluginOrWidget) {\r\n\t            if (pluginOrWidget instanceof Widget_1.ChartWidget) {\r\n\t                customWidgets.push(pluginOrWidget);\r\n\t                return;\r\n\t            }\r\n\t            if (!(pluginOrWidget instanceof Plugin_1.ChartPlugin))\r\n\t                return;\r\n\t            var pluginWidgetClasses = pluginOrWidget.constructor.providedWidgets;\r\n\t            preinstalledWidgetsClasses.push.apply(preinstalledWidgetsClasses, pluginWidgetClasses);\r\n\t        });\r\n\t        this.widgets = customWidgets.concat(preinstalledWidgetsClasses.map(function (WidgetClass) { return new WidgetClass(); }));\r\n\t        this.widgets.forEach(function (widget) {\r\n\t            widget.setupChart(_this.chart);\r\n\t            widget.onReadyHandler();\r\n\t            _this.scene.add(widget.getObject3D());\r\n\t        });\r\n\t    };\r\n\t    ChartBlankView.prototype.renderLoop = function () {\r\n\t        var _this = this;\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        this.stats && this.stats.begin();\r\n\t        this.render();\r\n\t        if (this.isStopped)\r\n\t            return;\r\n\t        var fpsLimit = this.chart.state.autoRender.fps;\r\n\t        if (fpsLimit) {\r\n\t            var delay_1 = 1000 / fpsLimit;\r\n\t            setTimeout(function () { return requestAnimationFrame(function () { return _this.renderLoop(); }); }, delay_1);\r\n\t        }\r\n\t        else {\r\n\t            requestAnimationFrame(function () { return _this.renderLoop(); });\r\n\t        }\r\n\t        this.stats && this.stats.end();\r\n\t    };\r\n\t    ChartBlankView.prototype.render = function () {\r\n\t        this.renderer.render(this.scene, this.camera);\r\n\t    };\r\n\t    ChartBlankView.prototype.stop = function () {\r\n\t        this.isStopped = true;\r\n\t    };\r\n\t    ChartBlankView.prototype.run = function () {\r\n\t        this.isStopped = false;\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * call to destroy state an init garbage collection\r\n\t     */\r\n\t    ChartBlankView.prototype.destroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.stop();\r\n\t        this.chart.destroy();\r\n\t        this.unbindEvents();\r\n\t        // WARNING! undocumented method for free webgl context\r\n\t        try {\r\n\t            this.renderer.forceContextLoss();\r\n\t        }\r\n\t        catch (wtf) {\r\n\t        }\r\n\t        this.renderer.context = null;\r\n\t        this.renderer.domElement = null;\r\n\t        this.renderer = null;\r\n\t    };\r\n\t    ChartBlankView.prototype.getState = function () {\r\n\t        return this.chart.state;\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.getTrend\r\n\t     */\r\n\t    ChartBlankView.prototype.getTrend = function (trendName) {\r\n\t        return this.chart.getTrend(trendName);\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.setState\r\n\t     */\r\n\t    ChartBlankView.prototype.setState = function (state) {\r\n\t        return this.chart.setState(state);\r\n\t    };\r\n\t    ChartBlankView.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var $el = this.$el;\r\n\t        if (this.chart.state.controls.enabled) {\r\n\t            $el.addEventListener('mousewheel', function (ev) {\r\n\t                _this.onMouseWheel(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousemove', function (ev) {\r\n\t                _this.onMouseMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousedown', function (ev) { return _this.onMouseDown(ev); });\r\n\t            $el.addEventListener('mouseup', function (ev) { return _this.onMouseUp(ev); });\r\n\t            $el.addEventListener('touchmove', function (ev) {\r\n\t                _this.onTouchMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('touchend', function (ev) {\r\n\t                _this.onTouchEnd(ev);\r\n\t            });\r\n\t        }\r\n\t        if (this.chart.state.autoResize) {\r\n\t            this.resizeSensor = new deps_1.ResizeSensor(this.$container, function () {\r\n\t                _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\r\n\t            });\r\n\t        }\r\n\t        this.unsubscribers = [\r\n\t            this.chart.onTrendsChange(function () { return _this.autoscroll(); }),\r\n\t            this.chart.screen.onTransformationFrame(function (options) { return _this.onScreenTransformHandler(options); }),\r\n\t            this.chart.onResize(function (options) { return _this.onChartResize(); })\r\n\t        ];\r\n\t    };\r\n\t    ChartBlankView.prototype.unbindEvents = function () {\r\n\t        // TODO: unbind events correctly\r\n\t        try {\r\n\t            this.resizeSensor && this.resizeSensor.detach();\r\n\t        }\r\n\t        catch (e) {\r\n\t        }\r\n\t        this.$el.remove();\r\n\t        this.unsubscribers.forEach(function (unsubscribe) { return unsubscribe(); });\r\n\t    };\r\n\t    ChartBlankView.prototype.setupCamera = function () {\r\n\t        var camSettings = this.chart.screen.getCameraSettings();\r\n\t        if (!this.camera) {\r\n\t            this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\r\n\t            this.scene.add(this.camera);\r\n\t        }\r\n\t        else {\r\n\t            this.camera.fov = camSettings.FOV;\r\n\t            this.camera.aspect = camSettings.aspect;\r\n\t            this.camera.far = camSettings.far;\r\n\t            this.camera.near = camSettings.near;\r\n\t            this.camera.updateProjectionMatrix();\r\n\t        }\r\n\t        this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\r\n\t        this.cameraInitialPosition = this.camera.position.clone();\r\n\t        this.onScreenTransformHandler(this.chart.screen.options);\r\n\t    };\r\n\t    ChartBlankView.prototype.onScreenTransformHandler = function (options) {\r\n\t        if (options.scrollX != void 0) {\r\n\t            var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\r\n\t            // scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setX(scrollX_1);\r\n\t        }\r\n\t        if (options.scrollY != void 0) {\r\n\t            var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\r\n\t            // scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setY(scrollY_1);\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.autoscroll = function () {\r\n\t        var state = this.chart;\r\n\t        if (!state.state.autoScroll)\r\n\t            return;\r\n\t        var oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\r\n\t        var trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\r\n\t        if (trendsMaxXDelta > 0) {\r\n\t            var maxVisibleX = this.chart.screen.getScreenRightVal();\r\n\t            var paddingRightX = this.chart.getPaddingRight();\r\n\t            var currentScroll = state.state.xAxis.range.scroll;\r\n\t            if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\r\n\t                return;\r\n\t            }\r\n\t            var scrollDelta = trendsMaxXDelta;\r\n\t            this.setState({ xAxis: { range: { scroll: currentScroll + scrollDelta } } });\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.onScrollStop = function () {\r\n\t        // var tendsXMax = this.state.state.computedData.trends.maxX;\r\n\t        // var paddingRightX = this.state.getPaddingRight();\r\n\t        // if (tendsXMax < paddingRightX) {\r\n\t        // \tthis.state.scrollToEnd();\r\n\t        // }\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseDown = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseUp = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseMove = function (ev) {\r\n\t        if (this.chart.state.cursor.dragMode) {\r\n\t            this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseWheel = function (ev) {\r\n\t        ev.stopPropagation();\r\n\t        ev.preventDefault();\r\n\t        var zoomOrigin = ev.layerX / this.chart.state.width;\r\n\t        var zoomValue = 1 + ev.wheelDeltaY * 0.001;\r\n\t        this.zoom(zoomValue, zoomOrigin);\r\n\t    };\r\n\t    ChartBlankView.prototype.onTouchMove = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onTouchEnd = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onChartContainerResizeHandler = function (width, height) {\r\n\t        this.setState({ width: width, height: height });\r\n\t    };\r\n\t    ChartBlankView.prototype.onChartResize = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height;\r\n\t        this.renderer.setSize(width, height);\r\n\t        this.setupCamera();\r\n\t    };\r\n\t    ChartBlankView.prototype.zoom = function (zoomValue, zoomOrigin) {\r\n\t        var _this = this;\r\n\t        var MAX_ZOOM_VALUE = 1.5;\r\n\t        var MIN_ZOOM_VALUE = 0.7;\r\n\t        zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\r\n\t        zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\r\n\t        var autoScrollIsEnabled = this.chart.state.autoScroll;\r\n\t        if (autoScrollIsEnabled)\r\n\t            this.chart.setState({ autoScroll: false });\r\n\t        this.chart.zoom(zoomValue, zoomOrigin).then(function () {\r\n\t            if (autoScrollIsEnabled)\r\n\t                _this.setState({ autoScroll: true });\r\n\t        });\r\n\t    };\r\n\t    ChartBlankView.devicePixelRatio = window.devicePixelRatio;\r\n\t    ChartBlankView.preinstalledWidgets = [];\r\n\t    ChartBlankView.renderers = {\r\n\t        CanvasRenderer: THREE.CanvasRenderer,\r\n\t        WebGLRenderer: THREE.WebGLRenderer\r\n\t    };\r\n\t    return ChartBlankView;\r\n\t}());\r\n\texports.ChartBlankView = ChartBlankView;\r\n\tvar ChartView = (function (_super) {\r\n\t    __extends(ChartView, _super);\r\n\t    function ChartView() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    ChartView.preinstalledWidgets = [\r\n\t        TrendsLineWidget_1.TrendsLineWidget,\r\n\t        TrendsCandleWidget_1.TrendsCandlesWidget,\r\n\t        AxisWidget_1.AxisWidget,\r\n\t        GridWidget_1.GridWidget,\r\n\t        TrendsGradientWidget_1.TrendsGradientWidget,\r\n\t        // TODO: remove AxisMarksWidget from preinstalled widgets\r\n\t        AxisMarksWidget_1.AxisMarksWidget\r\n\t    ];\r\n\t    return ChartView;\r\n\t}(ChartBlankView));\r\n\texports.ChartView = ChartView;\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\texports.DEFAULT_CONFIG = {\r\n\t    installPluginWidgets: true\r\n\t};\r\n\t/**\r\n\t * base class for all plugins\r\n\t * NAME is mandatory\r\n\t */\r\n\tvar ChartPlugin = (function () {\r\n\t    function ChartPlugin(options, config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        this.unsubscribers = [];\r\n\t        this.initialState = options;\r\n\t        this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\r\n\t        this.name = this.constructor.NAME;\r\n\t        if (!this.name)\r\n\t            Utils_1.Utils.error('Unnamed plugin detected');\r\n\t    }\r\n\t    ChartPlugin.prototype.setupChart = function (chart) {\r\n\t        var _this = this;\r\n\t        this.chart = chart;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvent(this.chart.onInitialStateApplied(function (initialState) { return _this.onInitialStateAppliedHandler(initialState); }), this.chart.onReady(function () { return _this.onReadyHandler(); }), this.chart.onDestroy(function () { return _this.onDestroyHandler(); }), this.chart.onPluginsStateChange(function (changedPluginsStates) { return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]); }));\r\n\t    };\r\n\t    ChartPlugin.prototype.getOptions = function () {\r\n\t        return this.chart.state.pluginsState[this.name];\r\n\t    };\r\n\t    ChartPlugin.prototype.onInitialStateAppliedHandler = function (initialState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onReadyHandler = function () {\r\n\t    };\r\n\t    ChartPlugin.prototype.onStateChanged = function (changedState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t    };\r\n\t    ChartPlugin.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unsubscribers = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unsubscribers.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unsubscribers.push.apply(unsubscribers, (args));\r\n\t        }\r\n\t        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartPlugin.prototype.unbindEvents = function () {\r\n\t        this.unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); });\r\n\t        this.unsubscribers.length = 0;\r\n\t    };\r\n\t    ChartPlugin.NAME = '';\r\n\t    ChartPlugin.providedWidgets = [];\r\n\t    return ChartPlugin;\r\n\t}());\r\n\texports.ChartPlugin = ChartPlugin;\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tfunction deepmerge(target, src, mergeArrays) {\r\n\t    if (mergeArrays === void 0) { mergeArrays = true; }\r\n\t    var array = Array.isArray(src);\r\n\t    var dst = array && [] || {};\r\n\t    if (array) {\r\n\t        target = target || [];\r\n\t        if (mergeArrays) {\r\n\t            dst = dst.concat(target);\r\n\t        }\r\n\t        src.forEach(function (e, i) {\r\n\t            if (typeof dst[i] === 'undefined') {\r\n\t                dst[i] = e;\r\n\t            }\r\n\t            else if (typeof e === 'object') {\r\n\t                dst[i] = deepmerge(target[i], e, mergeArrays);\r\n\t            }\r\n\t            else {\r\n\t                if (target.indexOf(e) === -1) {\r\n\t                    dst.push(e);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    else {\r\n\t        if (target && typeof target === 'object') {\r\n\t            Object.keys(target).forEach(function (key) {\r\n\t                dst[key] = target[key];\r\n\t            });\r\n\t        }\r\n\t        Object.keys(src).forEach(function (key) {\r\n\t            if (typeof src[key] !== 'object' || !src[key]) {\r\n\t                dst[key] = src[key];\r\n\t            }\r\n\t            else {\r\n\t                if (!target[key]) {\r\n\t                    dst[key] = src[key];\r\n\t                }\r\n\t                else {\r\n\t                    dst[key] = deepmerge(target[key], src[key], mergeArrays);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    return dst;\r\n\t}\r\n\t/**\r\n\t * project utils static class\r\n\t */\r\n\tvar Utils = (function () {\r\n\t    function Utils() {\r\n\t    }\r\n\t    /**\r\n\t     * deepMerge based on https://www.npmjs.com/package/deepmerge\r\n\t     */\r\n\t    Utils.deepMerge = function (obj1, obj2, mergeArrays) {\r\n\t        return deepmerge(obj1, obj2, mergeArrays);\r\n\t    };\r\n\t    /**\r\n\t     * deepCopy based on JSON.stringify function\r\n\t     * @deprecated\r\n\t     */\r\n\t    Utils.deepCopy = function (obj) {\r\n\t        // TODO: use deepMerge function to copy\r\n\t        return JSON.parse(JSON.stringify(obj));\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * @example\r\n\t     * // returns \"000015\"\r\n\t     * Utils.toFixed(15, 6);\r\n\t     */\r\n\t    Utils.toFixed = function (num, digitsCount) {\r\n\t        var maxDigits = 15;\r\n\t        var result = '';\r\n\t        var intVal = Math.floor(num);\r\n\t        var intStr = intVal.toString();\r\n\t        var lengthDiff = digitsCount - intStr.length;\r\n\t        if (lengthDiff > 0) {\r\n\t            result = '0'.repeat(lengthDiff) + intStr;\r\n\t        }\r\n\t        else {\r\n\t            result = intStr;\r\n\t        }\r\n\t        var afterPointDigitsCount = maxDigits - intStr.length;\r\n\t        var afterPointStr = num.toString().split('.')[1];\r\n\t        if (afterPointStr) {\r\n\t            result += '.' + afterPointStr.substr(0, afterPointDigitsCount);\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    Utils.bindEvent = function () {\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createTexture = function (width, height, fn) {\r\n\t        var canvas = document.createElement('canvas');\r\n\t        canvas.width = width;\r\n\t        canvas.height = height;\r\n\t        var ctx = canvas.getContext('2d');\r\n\t        fn(ctx);\r\n\t        var texture = new THREE.Texture(canvas);\r\n\t        texture.needsUpdate = true;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context with NearestFilter\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createPixelPerfectTexture = function (width, height, fn) {\r\n\t        var texture = this.createTexture(width, height, fn);\r\n\t        // texture.magFilter = THREE.NearestFilter;\r\n\t        texture.minFilter = THREE.NearestFilter;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.error = function (msg) {\r\n\t        console.error('Chart error: ' + msg);\r\n\t        throw 'Chart: ' + msg;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.warn = function (msg) {\r\n\t        console.warn('Chart warning: ' + msg);\r\n\t    };\r\n\t    /**\r\n\t     * @returns new unique id\r\n\t     */\r\n\t    Utils.getUid = function () {\r\n\t        return this.currentId++;\r\n\t    };\r\n\t    /**\r\n\t     * @returns distance between numbers\r\n\t     */\r\n\t    Utils.getDistance = function (num1, num2) {\r\n\t        return Math.max(num1, num2) - Math.min(num1, num2);\r\n\t    };\r\n\t    Utils.binarySearchClosestInd = function (arr, num, key) {\r\n\t        var mid;\r\n\t        var lo = 0;\r\n\t        var hi = arr.length - 1;\r\n\t        while (hi - lo > 1) {\r\n\t            mid = Math.floor((lo + hi) / 2);\r\n\t            if (arr[mid][key] < num) {\r\n\t                lo = mid;\r\n\t            }\r\n\t            else {\r\n\t                hi = mid;\r\n\t            }\r\n\t        }\r\n\t        if (num - arr[lo][key] <= arr[hi][key] - num) {\r\n\t            return lo;\r\n\t        }\r\n\t        return hi;\r\n\t    };\r\n\t    Utils.binarySearchClosest = function (arr, num, key) {\r\n\t        var ind = this.binarySearchClosestInd(arr, num, key);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.rectsIntersect = function (r1, r2) {\r\n\t        var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\r\n\t        var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\r\n\t        var _a = [left1 + width1, left2 + width2, top1 + height1, top2 + height2], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\r\n\t        return !(left2 > right1 ||\r\n\t            right2 < left1 ||\r\n\t            top2 > bottom1 ||\r\n\t            bottom2 < top1);\r\n\t    };\r\n\t    Utils.throttle = function (func, ms) {\r\n\t        var isThrottled = false, savedArgs, savedThis;\r\n\t        function wrapper() {\r\n\t            if (isThrottled) {\r\n\t                savedArgs = arguments;\r\n\t                savedThis = this;\r\n\t                return;\r\n\t            }\r\n\t            func.apply(this, arguments); // (1)\r\n\t            isThrottled = true;\r\n\t            setTimeout(function () {\r\n\t                isThrottled = false; // (3)\r\n\t                if (savedArgs) {\r\n\t                    wrapper.apply(savedThis, savedArgs);\r\n\t                    savedArgs = savedThis = null;\r\n\t                }\r\n\t            }, ms);\r\n\t        }\r\n\t        return wrapper;\r\n\t    };\r\n\t    Utils.msToTimeString = function (timestamp) {\r\n\t        var h = Math.floor(timestamp / 360000);\r\n\t        var m = Math.floor(timestamp / 60000);\r\n\t        var s = Math.floor(timestamp / 1000);\r\n\t        return h + ':' + m + ':' + s;\r\n\t    };\r\n\t    Utils.getRandomItem = function (arr) {\r\n\t        var ind = Math.floor(Math.random() * arr.length);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.copyProps = function (srcObject, dstObject, props, excludeProps) {\r\n\t        if (excludeProps === void 0) { excludeProps = []; }\r\n\t        for (var key in props) {\r\n\t            if (excludeProps.indexOf(key) !== -1)\r\n\t                continue;\r\n\t            if (srcObject[key] == void 0)\r\n\t                continue;\r\n\t            if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\r\n\t                this.copyProps(srcObject[key], dstObject[key], props[key]);\r\n\t            }\r\n\t            else {\r\n\t                dstObject[key] = this.deepCopy(srcObject[key]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Utils.currentId = 1;\r\n\t    return Utils;\r\n\t}());\r\n\texports.Utils = Utils;\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"./ResizeSensor.ts\" />\r\n\t\"use strict\";\r\n\twindow.TweenLite = TweenMax;\r\n\twindow.Stats = __webpack_require__(6);\r\n\t// require('gsap/src/uncompressed/easing/EasePack.js');\r\n\t// require('three/examples/js/renderers/CanvasRenderer.js');\r\n\t// require('three/examples/js/renderers/Projector.js');\r\n\texports.isPlainObject = __webpack_require__(7);\r\n\texports.EE2 = __webpack_require__(9);\r\n\tvar es6_promise_1 = __webpack_require__(10);\r\n\texports.Promise = es6_promise_1.Promise;\r\n\texports.ResizeSensor = __webpack_require__(11);\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// stats.js - http://github.com/mrdoob/stats.js\n\tvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\n\tif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\n\tStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\n\tv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tvar isObject = __webpack_require__(8);\n\t\n\tfunction isObjectObject(o) {\n\t  return isObject(o) === true\n\t    && Object.prototype.toString.call(o) === '[object Object]';\n\t}\n\t\n\tmodule.exports = function isPlainObject(o) {\n\t  var ctor,prot;\n\t  \n\t  if (isObjectObject(o) === false) return false;\n\t  \n\t  // If has modified constructor\n\t  ctor = o.constructor;\n\t  if (typeof ctor !== 'function') return false;\n\t  \n\t  // If has modified prototype\n\t  prot = ctor.prototype;\n\t  if (isObjectObject(prot) === false) return false;\n\t  \n\t  // If constructor does not have an Object-specific method\n\t  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n\t    return false;\n\t  }\n\t  \n\t  // Most likely a plain Object\n\t  return true;\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tmodule.exports = function isObject(val) {\n\t  return val != null && typeof val === 'object'\n\t    && !Array.isArray(val);\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * EventEmitter2\n\t * https://github.com/hij1nx/EventEmitter2\n\t *\n\t * Copyright (c) 2013 hij1nx\n\t * Licensed under the MIT license.\n\t */\n\t;!function(undefined) {\n\t\n\t  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t    return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t  };\n\t  var defaultMaxListeners = 10;\n\t\n\t  function init() {\n\t    this._events = {};\n\t    if (this._conf) {\n\t      configure.call(this, this._conf);\n\t    }\n\t  }\n\t\n\t  function configure(conf) {\n\t    if (conf) {\n\t\n\t      this._conf = conf;\n\t\n\t      conf.delimiter && (this.delimiter = conf.delimiter);\n\t      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t      conf.wildcard && (this.wildcard = conf.wildcard);\n\t      conf.newListener && (this.newListener = conf.newListener);\n\t\n\t      if (this.wildcard) {\n\t        this.listenerTree = {};\n\t      }\n\t    }\n\t  }\n\t\n\t  function EventEmitter(conf) {\n\t    this._events = {};\n\t    this.newListener = false;\n\t    configure.call(this, conf);\n\t  }\n\t\n\t  //\n\t  // Attention, function return type now is array, always !\n\t  // It has zero elements if no any matches found and one or more\n\t  // elements (leafs) if there are matches\n\t  //\n\t  function searchListenerTree(handlers, type, tree, i) {\n\t    if (!tree) {\n\t      return [];\n\t    }\n\t    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n\t        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n\t    if (i === typeLength && tree._listeners) {\n\t      //\n\t      // If at the end of the event(s) list and the tree has listeners\n\t      // invoke those listeners.\n\t      //\n\t      if (typeof tree._listeners === 'function') {\n\t        handlers && handlers.push(tree._listeners);\n\t        return [tree];\n\t      } else {\n\t        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t          handlers && handlers.push(tree._listeners[leaf]);\n\t        }\n\t        return [tree];\n\t      }\n\t    }\n\t\n\t    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n\t      //\n\t      // If the event emitted is '*' at this part\n\t      // or there is a concrete match at this patch\n\t      //\n\t      if (currentType === '*') {\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n\t          }\n\t        }\n\t        return listeners;\n\t      } else if(currentType === '**') {\n\t        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n\t        if(endReached && tree._listeners) {\n\t          // The next element has a _listeners, add it to the handlers.\n\t          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t        }\n\t\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            if(branch === '*' || branch === '**') {\n\t              if(tree[branch]._listeners && !endReached) {\n\t                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t              }\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            } else if(branch === nextType) {\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n\t            } else {\n\t              // No match on this one, shift into the tree but not in the type array.\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            }\n\t          }\n\t        }\n\t        return listeners;\n\t      }\n\t\n\t      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n\t    }\n\t\n\t    xTree = tree['*'];\n\t    if (xTree) {\n\t      //\n\t      // If the listener tree will allow any match for this part,\n\t      // then recursively explore all branches of the tree\n\t      //\n\t      searchListenerTree(handlers, type, xTree, i+1);\n\t    }\n\t\n\t    xxTree = tree['**'];\n\t    if(xxTree) {\n\t      if(i < typeLength) {\n\t        if(xxTree._listeners) {\n\t          // If we have a listener on a '**', it will catch all, so add its handler.\n\t          searchListenerTree(handlers, type, xxTree, typeLength);\n\t        }\n\t\n\t        // Build arrays of matching next branches and others.\n\t        for(branch in xxTree) {\n\t          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n\t            if(branch === nextType) {\n\t              // We know the next element will match, so jump twice.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+2);\n\t            } else if(branch === currentType) {\n\t              // Current node matches, move into the tree.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+1);\n\t            } else {\n\t              isolatedBranch = {};\n\t              isolatedBranch[branch] = xxTree[branch];\n\t              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n\t            }\n\t          }\n\t        }\n\t      } else if(xxTree._listeners) {\n\t        // We have reached the end and still on a '**'\n\t        searchListenerTree(handlers, type, xxTree, typeLength);\n\t      } else if(xxTree['*'] && xxTree['*']._listeners) {\n\t        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n\t      }\n\t    }\n\t\n\t    return listeners;\n\t  }\n\t\n\t  function growListenerTree(type, listener) {\n\t\n\t    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t\n\t    //\n\t    // Looks for two consecutive '**', if so, don't add the event at all.\n\t    //\n\t    for(var i = 0, len = type.length; i+1 < len; i++) {\n\t      if(type[i] === '**' && type[i+1] === '**') {\n\t        return;\n\t      }\n\t    }\n\t\n\t    var tree = this.listenerTree;\n\t    var name = type.shift();\n\t\n\t    while (name) {\n\t\n\t      if (!tree[name]) {\n\t        tree[name] = {};\n\t      }\n\t\n\t      tree = tree[name];\n\t\n\t      if (type.length === 0) {\n\t\n\t        if (!tree._listeners) {\n\t          tree._listeners = listener;\n\t        }\n\t        else if(typeof tree._listeners === 'function') {\n\t          tree._listeners = [tree._listeners, listener];\n\t        }\n\t        else if (isArray(tree._listeners)) {\n\t\n\t          tree._listeners.push(listener);\n\t\n\t          if (!tree._listeners.warned) {\n\t\n\t            var m = defaultMaxListeners;\n\t\n\t            if (typeof this._events.maxListeners !== 'undefined') {\n\t              m = this._events.maxListeners;\n\t            }\n\t\n\t            if (m > 0 && tree._listeners.length > m) {\n\t\n\t              tree._listeners.warned = true;\n\t              console.error('(node) warning: possible EventEmitter memory ' +\n\t                            'leak detected. %d listeners added. ' +\n\t                            'Use emitter.setMaxListeners() to increase limit.',\n\t                            tree._listeners.length);\n\t              console.trace();\n\t            }\n\t          }\n\t        }\n\t        return true;\n\t      }\n\t      name = type.shift();\n\t    }\n\t    return true;\n\t  }\n\t\n\t  // By default EventEmitters will print a warning if more than\n\t  // 10 listeners are added to it. This is a useful default which\n\t  // helps finding memory leaks.\n\t  //\n\t  // Obviously not all Emitters should be limited to 10. This function allows\n\t  // that to be increased. Set to zero for unlimited.\n\t\n\t  EventEmitter.prototype.delimiter = '.';\n\t\n\t  EventEmitter.prototype.setMaxListeners = function(n) {\n\t    this._events || init.call(this);\n\t    this._events.maxListeners = n;\n\t    if (!this._conf) this._conf = {};\n\t    this._conf.maxListeners = n;\n\t  };\n\t\n\t  EventEmitter.prototype.event = '';\n\t\n\t  EventEmitter.prototype.once = function(event, fn) {\n\t    this.many(event, 1, fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.many = function(event, ttl, fn) {\n\t    var self = this;\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('many only accepts instances of Function');\n\t    }\n\t\n\t    function listener() {\n\t      if (--ttl === 0) {\n\t        self.off(event, listener);\n\t      }\n\t      fn.apply(this, arguments);\n\t    }\n\t\n\t    listener._origin = fn;\n\t\n\t    this.on(event, listener);\n\t\n\t    return self;\n\t  };\n\t\n\t  EventEmitter.prototype.emit = function() {\n\t\n\t    this._events || init.call(this);\n\t\n\t    var type = arguments[0];\n\t\n\t    if (type === 'newListener' && !this.newListener) {\n\t      if (!this._events.newListener) { return false; }\n\t    }\n\t\n\t    // Loop through the *_all* functions and invoke them.\n\t    if (this._all) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t      for (i = 0, l = this._all.length; i < l; i++) {\n\t        this.event = type;\n\t        this._all[i].apply(this, args);\n\t      }\n\t    }\n\t\n\t    // If there is no 'error' event listener then throw.\n\t    if (type === 'error') {\n\t\n\t      if (!this._all &&\n\t        !this._events.error &&\n\t        !(this.wildcard && this.listenerTree.error)) {\n\t\n\t        if (arguments[1] instanceof Error) {\n\t          throw arguments[1]; // Unhandled 'error' event\n\t        } else {\n\t          throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t        }\n\t        return false;\n\t      }\n\t    }\n\t\n\t    var handler;\n\t\n\t    if(this.wildcard) {\n\t      handler = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      handler = this._events[type];\n\t    }\n\t\n\t    if (typeof handler === 'function') {\n\t      this.event = type;\n\t      if (arguments.length === 1) {\n\t        handler.call(this);\n\t      }\n\t      else if (arguments.length > 1)\n\t        switch (arguments.length) {\n\t          case 2:\n\t            handler.call(this, arguments[1]);\n\t            break;\n\t          case 3:\n\t            handler.call(this, arguments[1], arguments[2]);\n\t            break;\n\t          // slower\n\t          default:\n\t            var l = arguments.length;\n\t            var args = new Array(l - 1);\n\t            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t            handler.apply(this, args);\n\t        }\n\t      return true;\n\t    }\n\t    else if (handler) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t\n\t      var listeners = handler.slice();\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        this.event = type;\n\t        listeners[i].apply(this, args);\n\t      }\n\t      return (listeners.length > 0) || !!this._all;\n\t    }\n\t    else {\n\t      return !!this._all;\n\t    }\n\t\n\t  };\n\t\n\t  EventEmitter.prototype.on = function(type, listener) {\n\t\n\t    if (typeof type === 'function') {\n\t      this.onAny(type);\n\t      return this;\n\t    }\n\t\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('on only accepts instances of Function');\n\t    }\n\t    this._events || init.call(this);\n\t\n\t    // To avoid recursion in the case that type == \"newListeners\"! Before\n\t    // adding it to the listeners, first emit \"newListeners\".\n\t    this.emit('newListener', type, listener);\n\t\n\t    if(this.wildcard) {\n\t      growListenerTree.call(this, type, listener);\n\t      return this;\n\t    }\n\t\n\t    if (!this._events[type]) {\n\t      // Optimize the case of one listener. Don't need the extra array object.\n\t      this._events[type] = listener;\n\t    }\n\t    else if(typeof this._events[type] === 'function') {\n\t      // Adding the second element, need to change to array.\n\t      this._events[type] = [this._events[type], listener];\n\t    }\n\t    else if (isArray(this._events[type])) {\n\t      // If we've already got an array, just append.\n\t      this._events[type].push(listener);\n\t\n\t      // Check for listener leak\n\t      if (!this._events[type].warned) {\n\t\n\t        var m = defaultMaxListeners;\n\t\n\t        if (typeof this._events.maxListeners !== 'undefined') {\n\t          m = this._events.maxListeners;\n\t        }\n\t\n\t        if (m > 0 && this._events[type].length > m) {\n\t\n\t          this._events[type].warned = true;\n\t          console.error('(node) warning: possible EventEmitter memory ' +\n\t                        'leak detected. %d listeners added. ' +\n\t                        'Use emitter.setMaxListeners() to increase limit.',\n\t                        this._events[type].length);\n\t          console.trace();\n\t        }\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.onAny = function(fn) {\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('onAny only accepts instances of Function');\n\t    }\n\t\n\t    if(!this._all) {\n\t      this._all = [];\n\t    }\n\t\n\t    // Add the function to the event listener collection.\n\t    this._all.push(fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  EventEmitter.prototype.off = function(type, listener) {\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('removeListener only takes instances of Function');\n\t    }\n\t\n\t    var handlers,leafs=[];\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      // does not use listeners(), so no side effect of creating _events[type]\n\t      if (!this._events[type]) return this;\n\t      handlers = this._events[type];\n\t      leafs.push({_listeners:handlers});\n\t    }\n\t\n\t    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t      var leaf = leafs[iLeaf];\n\t      handlers = leaf._listeners;\n\t      if (isArray(handlers)) {\n\t\n\t        var position = -1;\n\t\n\t        for (var i = 0, length = handlers.length; i < length; i++) {\n\t          if (handlers[i] === listener ||\n\t            (handlers[i].listener && handlers[i].listener === listener) ||\n\t            (handlers[i]._origin && handlers[i]._origin === listener)) {\n\t            position = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (position < 0) {\n\t          continue;\n\t        }\n\t\n\t        if(this.wildcard) {\n\t          leaf._listeners.splice(position, 1);\n\t        }\n\t        else {\n\t          this._events[type].splice(position, 1);\n\t        }\n\t\n\t        if (handlers.length === 0) {\n\t          if(this.wildcard) {\n\t            delete leaf._listeners;\n\t          }\n\t          else {\n\t            delete this._events[type];\n\t          }\n\t        }\n\t        return this;\n\t      }\n\t      else if (handlers === listener ||\n\t        (handlers.listener && handlers.listener === listener) ||\n\t        (handlers._origin && handlers._origin === listener)) {\n\t        if(this.wildcard) {\n\t          delete leaf._listeners;\n\t        }\n\t        else {\n\t          delete this._events[type];\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.offAny = function(fn) {\n\t    var i = 0, l = 0, fns;\n\t    if (fn && this._all && this._all.length > 0) {\n\t      fns = this._all;\n\t      for(i = 0, l = fns.length; i < l; i++) {\n\t        if(fn === fns[i]) {\n\t          fns.splice(i, 1);\n\t          return this;\n\t        }\n\t      }\n\t    } else {\n\t      this._all = [];\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t\n\t  EventEmitter.prototype.removeAllListeners = function(type) {\n\t    if (arguments.length === 0) {\n\t      !this._events || init.call(this);\n\t      return this;\n\t    }\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t\n\t      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t        var leaf = leafs[iLeaf];\n\t        leaf._listeners = null;\n\t      }\n\t    }\n\t    else {\n\t      if (!this._events[type]) return this;\n\t      this._events[type] = null;\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.listeners = function(type) {\n\t    if(this.wildcard) {\n\t      var handlers = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t      return handlers;\n\t    }\n\t\n\t    this._events || init.call(this);\n\t\n\t    if (!this._events[type]) this._events[type] = [];\n\t    if (!isArray(this._events[type])) {\n\t      this._events[type] = [this._events[type]];\n\t    }\n\t    return this._events[type];\n\t  };\n\t\n\t  EventEmitter.prototype.listenersAny = function() {\n\t\n\t    if(this._all) {\n\t      return this._all;\n\t    }\n\t    else {\n\t      return [];\n\t    }\n\t\n\t  };\n\t\n\t  if (true) {\n\t     // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return EventEmitter;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    // CommonJS\n\t    exports.EventEmitter2 = EventEmitter;\n\t  }\n\t  else {\n\t    // Browser global.\n\t    window.EventEmitter2 = EventEmitter;\n\t  }\n\t}();\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {Promise: window['Promise']}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n\t * directory of this distribution and at\n\t * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n\t */\n\t;\n\t(function() {\n\t\n\t    /**\n\t     * Class for dimension change detection.\n\t     *\n\t     * @param {Element|Element[]|Elements|jQuery} element\n\t     * @param {Function} callback\n\t     *\n\t     * @constructor\n\t     */\n\t    var ResizeSensor = function(element, callback) {\n\t        /**\n\t         *\n\t         * @constructor\n\t         */\n\t        function EventQueue() {\n\t            this.q = [];\n\t            this.add = function(ev) {\n\t                this.q.push(ev);\n\t            };\n\t\n\t            var i, j;\n\t            this.call = function() {\n\t                for (i = 0, j = this.q.length; i < j; i++) {\n\t                    this.q[i].call();\n\t                }\n\t            };\n\t        }\n\t\n\t        /**\n\t         * @param {HTMLElement} element\n\t         * @param {String}      prop\n\t         * @returns {String|Number}\n\t         */\n\t        function getComputedStyle(element, prop) {\n\t            if (element.currentStyle) {\n\t                return element.currentStyle[prop];\n\t            } else if (window.getComputedStyle) {\n\t                return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t            } else {\n\t                return element.style[prop];\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @param {Function}    resized\n\t         */\n\t        function attachResizeEvent(element, resized) {\n\t            if (!element.resizedAttached) {\n\t                element.resizedAttached = new EventQueue();\n\t                element.resizedAttached.add(resized);\n\t            } else if (element.resizedAttached) {\n\t                element.resizedAttached.add(resized);\n\t                return;\n\t            }\n\t\n\t            element.resizeSensor = document.createElement('div');\n\t            element.resizeSensor.className = 'resize-sensor';\n\t            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n\t            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\t\n\t            element.resizeSensor.style.cssText = style;\n\t            element.resizeSensor.innerHTML =\n\t                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + '\"></div>' +\n\t                '</div>' +\n\t                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n\t                '</div>';\n\t            element.appendChild(element.resizeSensor);\n\t\n\t            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n\t                element.style.position = 'relative';\n\t            }\n\t\n\t            var expand = element.resizeSensor.childNodes[0];\n\t            var expandChild = expand.childNodes[0];\n\t            var shrink = element.resizeSensor.childNodes[1];\n\t            var shrinkChild = shrink.childNodes[0];\n\t\n\t            var lastWidth, lastHeight;\n\t\n\t            var reset = function() {\n\t                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n\t                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n\t                expand.scrollLeft = expand.scrollWidth;\n\t                expand.scrollTop = expand.scrollHeight;\n\t                shrink.scrollLeft = shrink.scrollWidth;\n\t                shrink.scrollTop = shrink.scrollHeight;\n\t                lastWidth = element.offsetWidth;\n\t                lastHeight = element.offsetHeight;\n\t            };\n\t\n\t            reset();\n\t\n\t            var changed = function() {\n\t                if (element.resizedAttached) {\n\t                    element.resizedAttached.call();\n\t                }\n\t            };\n\t\n\t            var addEvent = function(el, name, cb) {\n\t                if (el.attachEvent) {\n\t                    el.attachEvent('on' + name, cb);\n\t                } else {\n\t                    el.addEventListener(name, cb);\n\t                }\n\t            };\n\t\n\t            var onScroll = function() {\n\t              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                  changed();\n\t              }\n\t              reset();\n\t            };\n\t\n\t            addEvent(expand, 'scroll', onScroll);\n\t            addEvent(shrink, 'scroll', onScroll);\n\t        }\n\t\n\t        var elementType = Object.prototype.toString.call(element);\n\t        var isCollectionTyped = ('[object Array]' === elementType\n\t            || ('[object NodeList]' === elementType)\n\t            || ('[object HTMLCollection]' === elementType)\n\t            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n\t            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n\t        );\n\t\n\t        if (isCollectionTyped) {\n\t            var i = 0, j = element.length;\n\t            for (; i < j; i++) {\n\t                attachResizeEvent(element[i], callback);\n\t            }\n\t        } else {\n\t            attachResizeEvent(element, callback);\n\t        }\n\t\n\t        this.detach = function() {\n\t            if (isCollectionTyped) {\n\t                var i = 0, j = element.length;\n\t                for (; i < j; i++) {\n\t                    ResizeSensor.detach(element[i]);\n\t                }\n\t            } else {\n\t                ResizeSensor.detach(element);\n\t            }\n\t        };\n\t    };\n\t\n\t    ResizeSensor.detach = function(element) {\n\t        if (element.resizeSensor) {\n\t            element.removeChild(element.resizeSensor);\n\t            delete element.resizeSensor;\n\t            delete element.resizedAttached;\n\t        }\n\t    };\n\t\n\t    // make available to common module loader\n\t    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t        module.exports = ResizeSensor;\n\t    }\n\t    else {\n\t        window.ResizeSensor = ResizeSensor;\n\t    }\n\t\n\t})();\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(5);\r\n\t/**\r\n\t * this class uses as proxy for EventEmitter2\r\n\t */\r\n\tvar EventEmitter = (function () {\r\n\t    function EventEmitter() {\r\n\t        this.ee = new deps_1.EE2();\r\n\t    }\r\n\t    EventEmitter.prototype.emit = function (eventName) {\r\n\t        var args = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            args[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        (_a = this.ee).emit.apply(_a, [eventName].concat(args));\r\n\t        var _a;\r\n\t    };\r\n\t    EventEmitter.prototype.on = function (eventName, callback) {\r\n\t        return this.ee.on(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.off = function (eventName, callback) {\r\n\t        return this.ee.off(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.subscribe = function (eventName, callback) {\r\n\t        var _this = this;\r\n\t        this.on(eventName, callback);\r\n\t        return function () { return _this.off(eventName, callback); };\r\n\t    };\r\n\t    EventEmitter.prototype.setMaxListeners = function (listenersCount) {\r\n\t        this.ee.setMaxListeners(listenersCount);\r\n\t    };\r\n\t    EventEmitter.prototype.removeAllListeners = function (eventName) {\r\n\t        this.ee.removeAllListeners(eventName);\r\n\t    };\r\n\t    return EventEmitter;\r\n\t}());\r\n\texports.EventEmitter = EventEmitter;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendsManager_1 = __webpack_require__(16);\r\n\tvar Screen_1 = __webpack_require__(17);\r\n\tvar AxisMarks_1 = __webpack_require__(18);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tvar CHART_STATE_EVENTS = {\r\n\t    INITIAL_STATE_APPLIED: 'initialStateApplied',\r\n\t    READY: 'ready',\r\n\t    DESTROY: 'destroy',\r\n\t    CHANGE: 'change',\r\n\t    TREND_CHANGE: 'trendChange',\r\n\t    TRENDS_CHANGE: 'trendsChange',\r\n\t    ZOOM: 'zoom',\r\n\t    RESIZE: 'resize',\r\n\t    SCROLL: 'scroll',\r\n\t    SCROLL_STOP: 'scrollStop',\r\n\t    PLUGINS_STATE_CHANGED: 'pluginsStateChanged'\r\n\t};\r\n\tvar LIGHT_BLUE = '#5273bd';\r\n\t/**\r\n\t *  all state changes caused only by Chart.setState method\r\n\t */\r\n\tvar Chart = (function () {\r\n\t    function Chart(initialState, plugins) {\r\n\t        if (plugins === void 0) { plugins = []; }\r\n\t        this.state = {\r\n\t            prevState: {},\r\n\t            zoom: 0,\r\n\t            xAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.ALL,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    scroll: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 0, end: 5 },\r\n\t                    margin: { start: 0, end: 5 }\r\n\t                },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                grid: { enabled: true, minSizePx: 100, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                autoScroll: true,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            yAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 5, end: 5 },\r\n\t                    margin: { start: 5, end: 5 },\r\n\t                },\r\n\t                grid: { enabled: true, minSizePx: 50, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            animations: {\r\n\t                enabled: true,\r\n\t                trendChangeSpeed: 0.5,\r\n\t                trendChangeEase: void 0,\r\n\t                zoomSpeed: 0.25,\r\n\t                zoomEase: void 0,\r\n\t                scrollSpeed: 0.5,\r\n\t                scrollEase: Linear.easeNone,\r\n\t                autoScrollSpeed: 1,\r\n\t                autoScrollEase: Linear.easeNone,\r\n\t            },\r\n\t            autoRender: { enabled: true, fps: 0 },\r\n\t            autoResize: true,\r\n\t            renderer: 'WebGLRenderer',\r\n\t            autoScroll: true,\r\n\t            controls: { enabled: true },\r\n\t            trendDefaultState: {\r\n\t                enabled: true,\r\n\t                type: Trend_1.TREND_TYPE.LINE,\r\n\t                data: [],\r\n\t                maxSegmentLength: 1000,\r\n\t                lineWidth: 2,\r\n\t                lineColor: 0xFFFFFF,\r\n\t                hasBackground: true,\r\n\t                backgroundColor: 'rgba(#FFFFFF, 0.07)',\r\n\t                hasBeacon: false,\r\n\t                settingsForTypes: {\r\n\t                    CANDLE: {\r\n\t                        minSegmentLengthInPx: 20,\r\n\t                        maxSegmentLengthInPx: 40,\r\n\t                    },\r\n\t                    LINE: {\r\n\t                        minSegmentLengthInPx: 2,\r\n\t                        maxSegmentLengthInPx: 10,\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            cursor: {\r\n\t                dragMode: false,\r\n\t                x: 0,\r\n\t                y: 0\r\n\t            },\r\n\t            font: {\r\n\t                s: '11px Arial',\r\n\t                m: '12px Arial',\r\n\t                l: '13px Arial'\r\n\t            },\r\n\t            backgroundColor: 0x000c2a,\r\n\t            showStats: false,\r\n\t            pluginsState: {},\r\n\t            eventEmitterMaxListeners: 20,\r\n\t            maxVisibleSegments: 1280\r\n\t        };\r\n\t        this.plugins = {};\r\n\t        /**\r\n\t         * true then state was initialized and ready to use\r\n\t         */\r\n\t        this.isReady = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, initialState);\r\n\t        this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\r\n\t        initialState.trends = this.trendsManager.calculatedOptions;\r\n\t        initialState = this.installPlugins(plugins, initialState);\r\n\t        this.setState(initialState);\r\n\t        this.setState({ computedData: this.getComputedData() });\r\n\t        this.savePrevState();\r\n\t        this.screen = new Screen_1.Screen(this);\r\n\t        this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\r\n\t        this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\r\n\t        this.initListeners();\r\n\t        // message to other modules that Chart.state is ready for use\r\n\t        this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\r\n\t        // message to other modules that Chart is ready for use\r\n\t        this.isReady = true;\r\n\t        this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\r\n\t    }\r\n\t    /**\r\n\t     * destroy state, use ChartView.destroy to completely destroy state\r\n\t     */\r\n\t    Chart.prototype.destroy = function () {\r\n\t        this.ee.emit(CHART_STATE_EVENTS.DESTROY);\r\n\t        this.ee.removeAllListeners();\r\n\t        this.state = {};\r\n\t    };\r\n\t    Chart.prototype.onDestroy = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\r\n\t    };\r\n\t    Chart.prototype.onInitialStateApplied = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\r\n\t    };\r\n\t    Chart.prototype.onReady = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\r\n\t    };\r\n\t    Chart.prototype.onChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendsChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onScrollStop = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\r\n\t    };\r\n\t    Chart.prototype.onScroll = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\r\n\t    };\r\n\t    Chart.prototype.onZoom = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\r\n\t    };\r\n\t    Chart.prototype.onResize = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\r\n\t    };\r\n\t    Chart.prototype.onPluginsStateChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\r\n\t    };\r\n\t    Chart.prototype.getTrend = function (trendName) {\r\n\t        return this.trendsManager.getTrend(trendName);\r\n\t    };\r\n\t    Chart.prototype.setState = function (newState, eventData, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var stateData = this.state;\r\n\t        var newStateObj = newState;\r\n\t        var changedProps = {};\r\n\t        for (var key in newStateObj) {\r\n\t            if (stateData[key] !== newStateObj[key]) {\r\n\t                changedProps[key] = newStateObj[key];\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(changedProps);\r\n\t        // temporary remove trends state from newState by performance reasons\r\n\t        var trendsData = {};\r\n\t        if (newState.trends)\r\n\t            for (var trendName in newState.trends) {\r\n\t                var trendOptions = newState.trends[trendName];\r\n\t                if (trendOptions.data)\r\n\t                    trendsData[trendName] = trendOptions.data;\r\n\t                delete trendOptions.data;\r\n\t            }\r\n\t        var newStateContainsData = Object.keys(trendsData).length > 0;\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, newState, false);\r\n\t        // return state to state\r\n\t        if (newStateContainsData)\r\n\t            for (var trendName in trendsData) {\r\n\t                this.state.trends[trendName].data = trendsData[trendName];\r\n\t            }\r\n\t        if (silent)\r\n\t            return;\r\n\t        // recalculate all dynamic state props\r\n\t        var recalculateResult = this.recalculateState(changedProps);\r\n\t        changedProps = recalculateResult.changedProps;\r\n\t        this.emitChangedStateEvents(changedProps, eventData);\r\n\t    };\r\n\t    /**\r\n\t     * recalculate all computed state props\r\n\t     */\r\n\t    Chart.prototype.recalculateState = function (changedProps) {\r\n\t        var data = this.state;\r\n\t        var patch = {};\r\n\t        var actualData = Utils_1.Utils.deepMerge({}, data);\r\n\t        // recalculate scroll position by changed cursor options\r\n\t        var cursorOptions = changedProps.cursor;\r\n\t        var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\r\n\t        if (isMouseDrag) {\r\n\t            var oldX = data.prevState.cursor.x;\r\n\t            var currentX = cursorOptions.x;\r\n\t            var currentScroll = data.xAxis.range.scroll;\r\n\t            var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\r\n\t            patch.xAxis = { range: { scroll: currentScroll + deltaXVal } };\r\n\t            actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: patch.xAxis });\r\n\t        }\r\n\t        var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\r\n\t        var scrollXChanged = false;\r\n\t        var needToRecalculateXAxis = (isMouseDrag ||\r\n\t            chartWasResized ||\r\n\t            (changedProps.xAxis && (changedProps.xAxis.range)) ||\r\n\t            this.state.xAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateXAxis) {\r\n\t            var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\r\n\t            if (xAxisPatch) {\r\n\t                scrollXChanged = true;\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { xAxis: xAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: xAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        // recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\r\n\t        var needToRecalculateYAxis = (chartWasResized ||\r\n\t            (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END ||\r\n\t                data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO ||\r\n\t                data.yAxis.range.isMirrorMode) &&\r\n\t                (scrollXChanged || changedProps.trends || changedProps.yAxis) ||\r\n\t            this.state.yAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateYAxis) {\r\n\t            var yAxisPatch = this.recalculateYAxis(actualData);\r\n\t            if (yAxisPatch) {\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { yAxis: yAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { yAxis: yAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(patch);\r\n\t        var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\r\n\t        patch.computedData = this.getComputedData(allChangedProps);\r\n\t        this.savePrevState(patch);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, patch);\r\n\t        return { changedProps: allChangedProps, patch: patch };\r\n\t    };\r\n\t    Chart.prototype.getComputedData = function (changedProps) {\r\n\t        var computeAll = !changedProps;\r\n\t        var computedData = {};\r\n\t        if (computeAll || changedProps.trends && this.trendsManager) {\r\n\t            computedData.trends = {\r\n\t                maxXVal: this.trendsManager.getEndXVal(),\r\n\t                minXVal: this.trendsManager.getStartXVal()\r\n\t            };\r\n\t        }\r\n\t        return computedData;\r\n\t    };\r\n\t    Chart.prototype.savePrevState = function (changedProps) {\r\n\t        if (!changedProps)\r\n\t            changedProps = this.state;\r\n\t        var prevState = this.state.prevState;\r\n\t        // prevent to store prev trend state by performance reasons\r\n\t        Utils_1.Utils.copyProps(this.state, prevState, changedProps, ['trends']);\r\n\t    };\r\n\t    Chart.prototype.emitChangedStateEvents = function (changedProps, eventData) {\r\n\t        var prevState = this.state.prevState;\r\n\t        // emit common change event\r\n\t        this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\r\n\t        // emit event for each changed state property\r\n\t        for (var key in changedProps) {\r\n\t            this.ee.emit(key + 'Change', changedProps[key], eventData);\r\n\t        }\r\n\t        if (!this.isReady)\r\n\t            return;\r\n\t        // emit special events based on changed state\r\n\t        var scrollStopEventNeeded = (changedProps.cursor &&\r\n\t            changedProps.cursor.dragMode === false &&\r\n\t            prevState.cursor.dragMode === true);\r\n\t        scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\r\n\t        var scrollChangeEventsNeeded = (changedProps.xAxis &&\r\n\t            changedProps.xAxis.range &&\r\n\t            changedProps.xAxis.range.scroll !== void 0);\r\n\t        scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\r\n\t        var zoomEventsNeeded = ((changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\r\n\t            (changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom));\r\n\t        zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\r\n\t        var resizeEventNeeded = (changedProps.width || changedProps.height);\r\n\t        resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\r\n\t        var pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\r\n\t        pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\r\n\t    };\r\n\t    /**\r\n\t     * init plugins and save plugins options in initialState\r\n\t     */\r\n\t    Chart.prototype.installPlugins = function (plugins, initialState) {\r\n\t        var _this = this;\r\n\t        initialState.pluginsState = {};\r\n\t        plugins.forEach(function (plugin) {\r\n\t            var PluginClass = plugin.constructor;\r\n\t            var pluginName = PluginClass.NAME;\r\n\t            initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\r\n\t            _this.plugins[pluginName] = plugin;\r\n\t            plugin.setupChart(_this);\r\n\t        });\r\n\t        return initialState;\r\n\t    };\r\n\t    /**\r\n\t     * returns plugin instance by plugin name\r\n\t     * @example\r\n\t     */\r\n\t    Chart.prototype.getPlugin = function (pluginName) {\r\n\t        return this.plugins[pluginName];\r\n\t    };\r\n\t    Chart.prototype.initListeners = function () {\r\n\t        var _this = this;\r\n\t        this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function (changedTrends, newData) {\r\n\t            _this.handleTrendsChange(changedTrends, newData);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.handleTrendsChange = function (changedTrends, newData) {\r\n\t        for (var trendName in changedTrends) {\r\n\t            this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\r\n\t        }\r\n\t    };\r\n\t    Chart.prototype.recalculateXAxis = function (actualData, changedProps) {\r\n\t        var axisRange = actualData.xAxis.range;\r\n\t        var patch = { range: {} };\r\n\t        var isInitialize = axisRange.zeroVal == void 0;\r\n\t        var zeroVal, scaleFactor;\r\n\t        var zoom = axisRange.zoom;\r\n\t        if (axisRange.isMirrorMode) {\r\n\t            Utils_1.Utils.error('range.isMirrorMode available only for yAxis.range');\r\n\t        }\r\n\t        if (isInitialize) {\r\n\t            zeroVal = axisRange.from;\r\n\t            scaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t        }\r\n\t        else {\r\n\t            zeroVal = axisRange.zeroVal;\r\n\t            scaleFactor = axisRange.scaleFactor;\r\n\t            // recalculate range.zoom and range.scroll then range.from or range.to was changed\r\n\t            if (changedProps.xAxis &&\r\n\t                (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\r\n\t                if (changedProps.xAxis.range.zoom) {\r\n\t                    Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\r\n\t                }\r\n\t                var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t                patch.range.scroll = axisRange.from - zeroVal;\r\n\t                patch.range.zoom = currentScaleFactor / scaleFactor;\r\n\t                return patch;\r\n\t            }\r\n\t        }\r\n\t        // recalculate range.from and range.to then range.zoom or range.scroll was changed\r\n\t        do {\r\n\t            var from = zeroVal + axisRange.scroll;\r\n\t            var to = from + actualData.width / (scaleFactor * zoom);\r\n\t            var rangeLength = to - from;\r\n\t            var needToRecalculateZoom = false;\r\n\t            var rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\r\n\t            var rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\r\n\t            needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\r\n\t            if (needToRecalculateZoom) {\r\n\t                var fixScale = rangeLength > axisRange.maxLength ?\r\n\t                    rangeLength / axisRange.maxLength :\r\n\t                    rangeLength / axisRange.minLength;\r\n\t                var zoom = zoom * fixScale;\r\n\t                patch.range.zoom = zoom;\r\n\t            }\r\n\t        } while (needToRecalculateZoom);\r\n\t        patch.range.from = from;\r\n\t        patch.range.to = to;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.recalculateYAxis = function (actualData) {\r\n\t        var patch = { range: {} };\r\n\t        var yAxisRange = actualData.yAxis.range;\r\n\t        var isInitialize = yAxisRange.scaleFactor == void 0;\r\n\t        var trends = this.trendsManager;\r\n\t        var trendsEndXVal = trends.getEndXVal();\r\n\t        var trendsStartXVal = trends.getStartXVal();\r\n\t        var xRange = actualData.xAxis.range;\r\n\t        var xFrom = xRange.from, xTo = xRange.to;\r\n\t        var xRangeLength = xTo - xFrom;\r\n\t        var zeroVal, scaleFactor, scroll, zoom, needToZoom;\r\n\t        // check situation when state was scrolled behind trends end or before trends start\r\n\t        if (xTo > trendsEndXVal) {\r\n\t            xTo = trendsEndXVal;\r\n\t            xFrom = xTo - xRangeLength;\r\n\t        }\r\n\t        else if (xFrom < trendsStartXVal) {\r\n\t            xFrom = trendsStartXVal;\r\n\t            xTo = xFrom + xRangeLength;\r\n\t        }\r\n\t        var maxY = trends.getMaxYVal(xFrom, xTo);\r\n\t        var minY = trends.getMinYVal(xFrom, xTo);\r\n\t        var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\r\n\t        if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\r\n\t            if (trendLastY > maxY)\r\n\t                maxY = trendLastY;\r\n\t            if (trendLastY < minY)\r\n\t                minY = trendLastY;\r\n\t        }\r\n\t        if (yAxisRange.isMirrorMode) {\r\n\t            if (yAxisRange.zeroVal == void 0)\r\n\t                Utils_1.Utils.error('range.zeroVal must be set when range.isMirrorMode');\r\n\t            var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\r\n\t            var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\r\n\t            var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\r\n\t            maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\r\n\t            minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\r\n\t        }\r\n\t        var margin = yAxisRange.margin;\r\n\t        var padding = {\r\n\t            start: yAxisRange.padding.start + margin.start,\r\n\t            end: yAxisRange.padding.end + margin.end\r\n\t        };\r\n\t        if (padding.end + padding.start >= actualData.height) {\r\n\t            Utils_1.Utils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\r\n\t        }\r\n\t        var rangeLength = maxY - minY;\r\n\t        var paddingTopInPercents = padding.end / actualData.height;\r\n\t        var paddingBottomInPercents = padding.start / actualData.height;\r\n\t        var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\r\n\t        var visibleRangeLength = rangeLength / rangeLengthInPercents;\r\n\t        var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\r\n\t        var toVal = maxY + visibleRangeLength * paddingTopInPercents;\r\n\t        if (isInitialize) {\r\n\t            zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\r\n\t            scaleFactor = actualData.height / (toVal - fromVal);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t            needToZoom = true;\r\n\t        }\r\n\t        else {\r\n\t            scaleFactor = yAxisRange.scaleFactor;\r\n\t            zeroVal = yAxisRange.zeroVal;\r\n\t            var maxScreenY = Math.round(this.getScreenYByValue(maxY));\r\n\t            var minScreenY = Math.round(this.getScreenYByValue(minY));\r\n\t            needToZoom = (maxScreenY > actualData.height - margin.end ||\r\n\t                maxScreenY < actualData.height - padding.end ||\r\n\t                minScreenY < margin.start ||\r\n\t                minScreenY > padding.start);\r\n\t        }\r\n\t        if (!needToZoom)\r\n\t            return null;\r\n\t        scroll = fromVal - zeroVal;\r\n\t        zoom = (actualData.height / (toVal - fromVal)) / scaleFactor;\r\n\t        var currentAxisRange = this.state.yAxis.range;\r\n\t        if (currentAxisRange.from !== fromVal)\r\n\t            patch.range.from = fromVal;\r\n\t        if (currentAxisRange.to !== toVal)\r\n\t            patch.range.to = toVal;\r\n\t        if (currentAxisRange.scroll !== scroll)\r\n\t            patch.range.scroll = scroll;\r\n\t        if (currentAxisRange.zoom !== zoom)\r\n\t            patch.range.zoom = zoom;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.zoom = function (zoomValue, origin) {\r\n\t        var _this = this;\r\n\t        if (origin === void 0) { origin = 0.5; }\r\n\t        var _a = this.state.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\r\n\t        var newZoom = zoom * zoomValue;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        var nextRange = this.state.width / (scaleFactor * newZoom);\r\n\t        var newScroll = scroll + (currentRange - nextRange) * origin;\r\n\t        this.setState({ xAxis: { range: { zoom: newZoom, scroll: newScroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.zoomSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.zoomToRange = function (range, origin) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        return this.zoom(currentRange / range, origin);\r\n\t    };\r\n\t    Chart.prototype.scrollToEnd = function () {\r\n\t        var _this = this;\r\n\t        var state = this.state;\r\n\t        var endXVal = this.trendsManager.getEndXVal();\r\n\t        var range = state.xAxis.range;\r\n\t        var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\r\n\t        this.setState({ xAxis: { range: { scroll: scroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.scrollSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to xVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to yVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Chart.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns x value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenX = function (x) {\r\n\t        var _a = this.state.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenY = function (y) {\r\n\t        var _a = this.state.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen x value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenYByValue = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByYAxis(yVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Chart.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    Chart.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    Chart.prototype.getScreenLeftVal = function () {\r\n\t        return this.getValueByScreenX(0);\r\n\t    };\r\n\t    Chart.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.state.width);\r\n\t    };\r\n\t    Chart.prototype.getPaddingRight = function () {\r\n\t        return this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\r\n\t    };\r\n\t    return Chart;\r\n\t}());\r\n\texports.Chart = Chart;\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendSegmentsManager_1 = __webpack_require__(15);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tvar EVENTS = {\r\n\t    CHANGE: 'Change',\r\n\t    PREPEND_REQUEST: 'prependRequest'\r\n\t};\r\n\t(function (TREND_TYPE) {\r\n\t    TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\r\n\t    TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\r\n\t})(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\r\n\tvar TREND_TYPE = exports.TREND_TYPE;\r\n\tvar Trend = (function () {\r\n\t    function Trend(chartState, trendName, initialState) {\r\n\t        this.minXVal = Infinity;\r\n\t        this.minYVal = Infinity;\r\n\t        this.maxXVal = -Infinity;\r\n\t        this.maxYVal = -Infinity;\r\n\t        var options = initialState.trends[trendName];\r\n\t        this.name = trendName;\r\n\t        this.chartState = chartState;\r\n\t        this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.state.trendDefaultState, options);\r\n\t        this.calculatedOptions.name = trendName;\r\n\t        if (options.dataset)\r\n\t            this.calculatedOptions.data = Trend.prepareData(options.dataset);\r\n\t        this.calculatedOptions.dataset = [];\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    Trend.prototype.onInitialStateApplied = function () {\r\n\t        this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\r\n\t    };\r\n\t    Trend.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var chartState = this.chartState;\r\n\t        chartState.onInitialStateApplied(function () { return _this.onInitialStateApplied(); });\r\n\t        chartState.onScrollStop(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onZoom(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onTrendChange(function (trendName, changedOptions, newData) { return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData); });\r\n\t        chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    Trend.prototype.getCalculatedOptions = function () {\r\n\t        return this.calculatedOptions;\r\n\t    };\r\n\t    Trend.prototype.appendData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData());\r\n\t        var updatedTrendData = options.data.concat(newData);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.prependData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData(), true);\r\n\t        var updatedTrendData = newData.concat(options.data);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.changeData = function (allData, newData) {\r\n\t        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\r\n\t            var item = newData_1[_i];\r\n\t            if (item.xVal < this.minXVal)\r\n\t                this.minXVal = item.xVal;\r\n\t            if (item.xVal > this.maxXVal)\r\n\t                this.maxXVal = item.xVal;\r\n\t            if (item.yVal < this.minYVal)\r\n\t                this.minYVal = item.yVal;\r\n\t            if (item.yVal > this.maxYVal)\r\n\t                this.maxYVal = item.yVal;\r\n\t        }\r\n\t        var options = this.getOptions();\r\n\t        var statePatch = { trends: (_a = {}, _a[options.name] = { data: allData }, _a) };\r\n\t        this.chartState.setState(statePatch, newData);\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.getData = function (fromX, toX) {\r\n\t        var data = this.getOptions().data;\r\n\t        if (fromX == void 0 && toX == void 0)\r\n\t            return data;\r\n\t        fromX = fromX !== void 0 ? fromX : data[0].xVal;\r\n\t        toX = toX !== void 0 ? toX : data[data.length].xVal;\r\n\t        var filteredData = [];\r\n\t        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\r\n\t            var item = data_1[_i];\r\n\t            if (item.xVal < fromX)\r\n\t                continue;\r\n\t            if (item.xVal > toX)\r\n\t                break;\r\n\t            filteredData.push(item);\r\n\t        }\r\n\t        return filteredData;\r\n\t    };\r\n\t    Trend.prototype.getFirstItem = function () {\r\n\t        return this.getOptions().data[0];\r\n\t    };\r\n\t    Trend.prototype.getLastItem = function () {\r\n\t        var data = this.getOptions().data;\r\n\t        return data[data.length - 1];\r\n\t    };\r\n\t    Trend.prototype.getOptions = function () {\r\n\t        return this.chartState.state.trends[this.name];\r\n\t    };\r\n\t    Trend.prototype.setOptions = function (options) {\r\n\t        this.chartState.setState({ trends: (_a = {}, _a[this.name] = options, _a) });\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.onPrependRequest = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.PREPEND_REQUEST, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for Chart.onTrendChange\r\n\t     */\r\n\t    Trend.prototype.onChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.CHANGE, cb);\r\n\t        return function () { _this.ee.off(EVENTS.CHANGE, cb); };\r\n\t    };\r\n\t    Trend.prototype.onDataChange = function (cb) {\r\n\t        var _this = this;\r\n\t        var onChangeCb = function (changedOptions, newData) {\r\n\t            if (newData)\r\n\t                cb(newData);\r\n\t        };\r\n\t        this.ee.on(EVENTS.CHANGE, onChangeCb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.CHANGE, onChangeCb);\r\n\t        };\r\n\t    };\r\n\t    Trend.prototype.checkForPrependRequest = function () {\r\n\t        var _this = this;\r\n\t        if (this.prependRequest)\r\n\t            return;\r\n\t        var chartState = this.chartState;\r\n\t        var minXVal = chartState.state.computedData.trends.minXVal;\r\n\t        var minScreenX = chartState.getScreenXByValue(minXVal);\r\n\t        var needToRequest = minScreenX > 0;\r\n\t        var _a = chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var requestedDataLength = to - from;\r\n\t        if (!needToRequest)\r\n\t            return;\r\n\t        this.prependRequest = new deps_1.Promise(function (resolve, reject) {\r\n\t            _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\r\n\t        });\r\n\t        this.prependRequest.then(function (newData) {\r\n\t            _this.prependData(newData);\r\n\t            _this.prependRequest = null;\r\n\t        }, function () {\r\n\t            _this.prependRequest = null;\r\n\t        });\r\n\t    };\r\n\t    Trend.prepareData = function (newData, currentData, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var data = [];\r\n\t        if (typeof newData[0] == 'number') {\r\n\t            currentData = currentData || [];\r\n\t            var initialItem = void 0;\r\n\t            var xVal = void 0;\r\n\t            if (isPrepend) {\r\n\t                initialItem = currentData[0];\r\n\t                xVal = initialItem.xVal - newData.length;\r\n\t            }\r\n\t            else {\r\n\t                initialItem = currentData[currentData.length - 1];\r\n\t                xVal = initialItem ? initialItem.xVal + 1 : 0;\r\n\t            }\r\n\t            for (var _i = 0, _a = newData; _i < _a.length; _i++) {\r\n\t                var yVal = _a[_i];\r\n\t                data.push({ xVal: xVal, yVal: yVal, id: Utils_1.Utils.getUid() });\r\n\t                xVal++;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            data = newData;\r\n\t        }\r\n\t        return data;\r\n\t    };\r\n\t    return Trend;\r\n\t}());\r\n\texports.Trend = Trend;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar MAX_ANIMATED_SEGMENTS = 100;\r\n\tvar EVENTS = {\r\n\t    REBUILD: 'rebuild',\r\n\t    DISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\r\n\t    ANIMATION_FRAME: 'animationFrame'\r\n\t};\r\n\t/**\r\n\t *  Class helps to display and animate trends segments\r\n\t */\r\n\tvar TrendSegmentsManager = (function () {\r\n\t    function TrendSegmentsManager(chartState, trend) {\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.segmentsLength = 0;\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForPrepend = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.trend = trend;\r\n\t        this.maxSegmentLength = trend.getOptions().maxSegmentLength;\r\n\t        this.tryToRebuildSegments();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendSegmentsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.trend.onChange(function (changedOptions, newData) { return _this.onTrendChangeHandler(changedOptions, newData); });\r\n\t        this.chartState.onZoom(function () { return _this.onZoomHandler(); });\r\n\t        this.chartState.onScroll(function () { return _this.recalculateDisplayedRange(); });\r\n\t        this.chartState.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.appendAnimation && this.appendAnimation.kill();\r\n\t        this.prependAnimation && this.prependAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onZoomHandler = function () {\r\n\t        var segmentsRebuilded = this.tryToRebuildSegments();\r\n\t        if (!segmentsRebuilded) {\r\n\t            this.recalculateDisplayedRange();\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onTrendChangeHandler = function (changedOptions, newData) {\r\n\t        var needToRebuildSegments = (changedOptions.type != void 0 ||\r\n\t            changedOptions.maxSegmentLength != void 0);\r\n\t        if (needToRebuildSegments) {\r\n\t            this.tryToRebuildSegments(true);\r\n\t            return;\r\n\t        }\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var data = this.trend.getData();\r\n\t        var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t        isAppend ? this.appendData(newData) : this.prependData(newData);\r\n\t        this.recalculateDisplayedRange();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getSegment = function (id) {\r\n\t        return this.segmentsById[id];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getEndSegment = function () {\r\n\t        return this.segmentsById[this.endSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getStartSegment = function () {\r\n\t        return this.segmentsById[this.startSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.tryToRebuildSegments = function (force) {\r\n\t        if (force === void 0) { force = false; }\r\n\t        var options = this.trend.getOptions();\r\n\t        var trendTypeName = Trend_1.TREND_TYPE[options.type];\r\n\t        var trendTypesSettings = options.settingsForTypes;\r\n\t        var trendTypeSettings = trendTypesSettings[trendTypeName];\r\n\t        var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\r\n\t        var needToRebuild = this.segments.length === 0 || force;\r\n\t        var segmentLength = this.maxSegmentLength;\r\n\t        // call toFixed(2) to prevent floating segment error compare\r\n\t        var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\r\n\t        var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\r\n\t        if (currentSegmentLengthInPx < minSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\r\n\t        }\r\n\t        else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\r\n\t        }\r\n\t        if (!needToRebuild)\r\n\t            return false;\r\n\t        this.maxSegmentLength = segmentLength;\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.segmentsLength = 0;\r\n\t        this.stopAllAnimations();\r\n\t        this.appendData(null, true);\r\n\t        this.recalculateDisplayedRange(true);\r\n\t        this.ee.emit(EVENTS.REBUILD);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.stopAllAnimations = function () {\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        if (this.prependAnimation)\r\n\t            this.prependAnimation.kill();\r\n\t        if (this.appendAnimation)\r\n\t            this.appendAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.recalculateDisplayedRange = function (segmentsAreRebuilded) {\r\n\t        if (segmentsAreRebuilded === void 0) { segmentsAreRebuilded = false; }\r\n\t        var _a = this.chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\r\n\t        var displayedRange = to - from;\r\n\t        this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\r\n\t        this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\r\n\t        this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\r\n\t        this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\r\n\t        if (segmentsAreRebuilded)\r\n\t            return;\r\n\t        var displayedRangeChanged = (firstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\r\n\t            lastDisplayedSegment.id !== this.lastDisplayedSegment.id);\r\n\t        if (displayedRangeChanged)\r\n\t            this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\r\n\t    };\r\n\t    // getSegments(fromX?: number, toX?: number): TrendSegment[] {\r\n\t    // \tvar segments = this.segments;\r\n\t    // \tif (fromX == void 0 && toX == void 0) return segments;\r\n\t    // \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\r\n\t    // \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\r\n\t    // \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\r\n\t    // \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\r\n\t    // \treturn segments.slice(startSegmentInd, endSegmentInd);\r\n\t    // }\r\n\t    /**\r\n\t     * returns array of segments for values array\r\n\t     * values must be sorted!\r\n\t     */\r\n\t    TrendSegmentsManager.prototype.getSegmentsForXValues = function (values) {\r\n\t        var valueInd = 0;\r\n\t        var value = values[valueInd];\r\n\t        var lastValueInd = values.length - 1;\r\n\t        var results = [];\r\n\t        var segment = this.getStartSegment();\r\n\t        if (!segment.hasValue)\r\n\t            return [];\r\n\t        while (segment) {\r\n\t            while (value < segment.startXVal) {\r\n\t                results.push(void 0);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            while (value > segment.endXVal) {\r\n\t                segment = segment.getNext();\r\n\t                if (!segment)\r\n\t                    break;\r\n\t            }\r\n\t            var valueInPoint = (segment.startXVal == value || segment.endXVal == value ||\r\n\t                (segment.startXVal < value && segment.endXVal > value));\r\n\t            if (valueInPoint) {\r\n\t                results.push(segment);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            if (valueInd > lastValueInd)\r\n\t                break;\r\n\t        }\r\n\t        return results;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrame = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onRebuild = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.REBUILD, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDisplayedRangeChanged = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocateNextSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var prevSegment = this.segmentsById[this.endSegmentId];\r\n\t        if (prevSegment && prevSegment.hasValue) {\r\n\t            prevSegment.nextId = id;\r\n\t            segment.prevId = prevSegment.id;\r\n\t        }\r\n\t        this.endSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.push(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocatePrevSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var nextSegment = this.segmentsById[this.startSegmentId];\r\n\t        if (nextSegment && nextSegment.hasValue) {\r\n\t            nextSegment.prevId = id;\r\n\t            segment.nextId = nextSegment.id;\r\n\t        }\r\n\t        this.startSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.unshift(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.appendData = function (newData, needRebuildSegments) {\r\n\t        // WARNING: bottleneck method!\r\n\t        if (needRebuildSegments === void 0) { needRebuildSegments = false; }\r\n\t        // var t1 = performance.now();\r\n\t        var trendData = this.trend.getData();\r\n\t        if (needRebuildSegments) {\r\n\t            newData = trendData;\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t        }\r\n\t        var startItemInd = trendData.length - newData.length;\r\n\t        var segment = this.getEndSegment() || this.allocateNextSegment();\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        var itemInd = 0;\r\n\t        while (itemInd < newData.length) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.appendItem(item);\r\n\t            var isLastItem = itemInd == newData.length - 1;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd++;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForAppend.length > 0) {\r\n\t                    segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\r\n\t                    segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForAppend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocateNextSegment();\r\n\t            var prevItem = trendData[startItemInd + itemInd - 1];\r\n\t            segment.appendItem(prevItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        // var t2 = performance.now();\r\n\t        // console.log(t2 - t1);\r\n\t        // do not create animation if segments was rebuilded\r\n\t        if (needRebuildSegments) {\r\n\t            for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\r\n\t                var segmentId = _a[_i];\r\n\t                var segment_1 = this.segmentsById[segmentId];\r\n\t                segment_1.currentAnimationState = segment_1.createAnimationState();\r\n\t            }\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t            return;\r\n\t        }\r\n\t        if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time);\r\n\t    };\r\n\t    // TODO: refactor duplicated code from appendData\r\n\t    TrendSegmentsManager.prototype.prependData = function (newData) {\r\n\t        var trendData = this.trend.getData();\r\n\t        var segment = this.getStartSegment() || this.segmentsById[0];\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var itemInd = newData.length - 1;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        while (itemInd >= 0) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.prependItem(item);\r\n\t            var isLastItem = itemInd == 0;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd--;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForPrepend.length > 0) {\r\n\t                    segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\r\n\t                    segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForPrepend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocatePrevSegment();\r\n\t            var nextItem = trendData[itemInd + 1];\r\n\t            segment.prependItem(nextItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time, true);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.animate = function (time, isPrepend) {\r\n\t        var _this = this;\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\r\n\t        if ((animation && animation.isActive()) || time == 0) {\r\n\t            if (animation)\r\n\t                animation.kill();\r\n\t            this.onAnimationFrameHandler(1, isPrepend);\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            return;\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var ease = animationsOptions.trendChangeEase;\r\n\t        var objectToAnimate = { animationValue: 0 };\r\n\t        animation = TweenLite.to(objectToAnimate, time, { animationValue: 1, ease: ease });\r\n\t        animation.eventCallback('onUpdate', function () { return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend); });\r\n\t        animation.eventCallback('onComplete', function () {\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            _this.appendAnimation = null;\r\n\t        });\r\n\t        if (isPrepend) {\r\n\t            this.prependAnimation = animation;\r\n\t        }\r\n\t        else {\r\n\t            this.appendAnimation = animation;\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrameHandler = function (coefficient, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\r\n\t            var segmentId = animatedSegmentsIds_1[_i];\r\n\t            var segment = this.segmentsById[segmentId];\r\n\t            for (var key in segment.targetAnimationState) {\r\n\t                var targetValue = segment.targetAnimationState[key];\r\n\t                var initialValue = segment.initialAnimationState[key];\r\n\t                var currentValue = initialValue + (targetValue - initialValue) * coefficient;\r\n\t                segment.currentAnimationState[key] = currentValue;\r\n\t            }\r\n\t        }\r\n\t        this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\r\n\t        this.ee.emit(EVENTS.ANIMATION_FRAME, this);\r\n\t    };\r\n\t    return TrendSegmentsManager;\r\n\t}());\r\n\texports.TrendSegmentsManager = TrendSegmentsManager;\r\n\tvar TrendSegment = (function () {\r\n\t    function TrendSegment(trendPoints, id) {\r\n\t        this.isCompleted = false;\r\n\t        this.items = [];\r\n\t        this.initialAnimationState = {};\r\n\t        this.targetAnimationState = {};\r\n\t        this.currentAnimationState = {};\r\n\t        this.trendSegments = trendPoints;\r\n\t        this.id = id;\r\n\t        this.maxLength = trendPoints.maxSegmentLength;\r\n\t    }\r\n\t    TrendSegment.prototype.createAnimationState = function () {\r\n\t        var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\r\n\t        return {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal,\r\n\t            startXVal: startXVal,\r\n\t            startYVal: startYVal,\r\n\t            endXVal: endXVal,\r\n\t            endYVal: endYVal,\r\n\t            maxYVal: maxYVal,\r\n\t            minYVal: minYVal,\r\n\t            maxLength: maxLength\r\n\t        };\r\n\t    };\r\n\t    ;\r\n\t    TrendSegment.prototype.appendItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.push(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var startXVal = items[0].xVal;\r\n\t        if (item.xVal - startXVal > this.maxLength)\r\n\t            return false;\r\n\t        items.push(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.prependItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.unshift(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var endXVal = items[items.length - 1].xVal;\r\n\t        if (endXVal - item.xVal > this.maxLength)\r\n\t            return false;\r\n\t        items.unshift(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.complete = function () {\r\n\t        this.isCompleted = true;\r\n\t        this.recalculateItems();\r\n\t        this.items = []; // free memory for completed ranges\r\n\t    };\r\n\t    TrendSegment.prototype.recalculateItems = function () {\r\n\t        var items = this.items;\r\n\t        var itemsLength = items.length;\r\n\t        if (itemsLength === 0)\r\n\t            Utils_1.Utils.error('Unable to create TrendSegment without TrendItems');\r\n\t        var endItem = items[itemsLength - 1];\r\n\t        var endXVal = endItem.xVal, endYVal = endItem.yVal;\r\n\t        var startXVal, startYVal;\r\n\t        var startItem = items[0];\r\n\t        startXVal = startItem.xVal;\r\n\t        startYVal = startItem.yVal;\r\n\t        var minX = Math.min(startXVal, endXVal);\r\n\t        var maxX = Math.max(startXVal, endXVal);\r\n\t        var middleXVal = minX + (maxX - minX) / 2;\r\n\t        var minY = Math.min(startYVal, endYVal);\r\n\t        var maxY = Math.max(startYVal, endYVal);\r\n\t        var middleYVal = minY + (maxY - minY) / 2;\r\n\t        var yVals = items.map(function (item) { return item.yVal; });\r\n\t        this.startXVal = startXVal;\r\n\t        this.startYVal = startYVal;\r\n\t        this.endXVal = endXVal;\r\n\t        this.endYVal = endYVal;\r\n\t        this.xVal = middleXVal;\r\n\t        this.yVal = middleYVal;\r\n\t        this.maxYVal = Math.max.apply(Math, yVals);\r\n\t        this.minYVal = Math.min.apply(Math, yVals);\r\n\t        if (!this.currentAnimationState)\r\n\t            this.currentAnimationState = this.createAnimationState();\r\n\t    };\r\n\t    TrendSegment.prototype.getNext = function () {\r\n\t        var nextPoint = this.trendSegments.segmentsById[this.nextId];\r\n\t        return nextPoint && nextPoint.hasValue ? nextPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getPrev = function () {\r\n\t        var prevPoint = this.trendSegments.segmentsById[this.prevId];\r\n\t        return prevPoint && prevPoint.hasValue ? prevPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getFrameVal = function () {\r\n\t        var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\r\n\t        return new Vector3(xVal, yVal, 0);\r\n\t    };\r\n\t    TrendSegment.prototype.getFramePoint = function () {\r\n\t        var frameVal = this.getFrameVal();\r\n\t        return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\r\n\t    };\r\n\t    return TrendSegment;\r\n\t}());\r\n\texports.TrendSegment = TrendSegment;\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar EVENTS = {\r\n\t    SEGMENTS_REBUILDED: 'segmentsRebuilded'\r\n\t};\r\n\t/**\r\n\t * Trends manager\r\n\t */\r\n\tvar TrendsManager = (function () {\r\n\t    function TrendsManager(state, initialState) {\r\n\t        this.trends = {};\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.chartState = state;\r\n\t        var trendsCalculatedOptions = {};\r\n\t        for (var trendName in initialState.trends) {\r\n\t            var trend = this.createTrend(state, trendName, initialState);\r\n\t            trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\r\n\t        }\r\n\t        this.calculatedOptions = trendsCalculatedOptions;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendsManager.prototype.getTrend = function (trendName) {\r\n\t        return this.trends[trendName];\r\n\t    };\r\n\t    TrendsManager.prototype.getEnabledTrends = function () {\r\n\t        var enabledTrends = [];\r\n\t        var allTrends = this.trends;\r\n\t        for (var trendName in allTrends) {\r\n\t            var trend = allTrends[trendName];\r\n\t            trend.getOptions().enabled && enabledTrends.push(trend);\r\n\t        }\r\n\t        return enabledTrends;\r\n\t    };\r\n\t    TrendsManager.prototype.getStartXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        return trends[0].getData()[0].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getEndXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var firstTrendData = trends[0].getData();\r\n\t        return firstTrendData[firstTrendData.length - 1].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getExtremumYVal = function (extremumIsMax, fromX, toX) {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var compareFn;\r\n\t        var result;\r\n\t        if (extremumIsMax) {\r\n\t            result = -Infinity;\r\n\t            compareFn = Math.max;\r\n\t        }\r\n\t        else {\r\n\t            result = Infinity;\r\n\t            compareFn = Math.min;\r\n\t        }\r\n\t        for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\r\n\t            var trend = trends_1[_i];\r\n\t            var trendData = trend.getData(fromX, toX);\r\n\t            var trendYValues = trendData.map(function (dataItem) { return dataItem.yVal; });\r\n\t            result = compareFn.apply(void 0, [result].concat(trendYValues));\r\n\t        }\r\n\t        if (result == Infinity || result == -Infinity)\r\n\t            result = NaN;\r\n\t        return result;\r\n\t    };\r\n\t    TrendsManager.prototype.getMaxYVal = function (fromX, toX) { return this.getExtremumYVal(true, fromX, toX); };\r\n\t    TrendsManager.prototype.getMinYVal = function (fromX, toX) { return this.getExtremumYVal(false, fromX, toX); };\r\n\t    TrendsManager.prototype.onSegmentsRebuilded = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\r\n\t    };\r\n\t    TrendsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onInitialStateApplied(function () { return _this.onInitialStateAppliedHandler(); });\r\n\t    };\r\n\t    TrendsManager.prototype.onInitialStateAppliedHandler = function () {\r\n\t        var _this = this;\r\n\t        var _loop_1 = function(trendName) {\r\n\t            this_1.trends[trendName].segmentsManager.onRebuild(function () { return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName); });\r\n\t        };\r\n\t        var this_1 = this;\r\n\t        for (var trendName in this.trends) {\r\n\t            _loop_1(trendName);\r\n\t        }\r\n\t    };\r\n\t    TrendsManager.prototype.createTrend = function (state, trendName, initialState) {\r\n\t        var trend = new Trend_1.Trend(state, trendName, initialState);\r\n\t        this.trends[trendName] = trend;\r\n\t        return trend;\r\n\t    };\r\n\t    return TrendsManager;\r\n\t}());\r\n\texports.TrendsManager = TrendsManager;\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\t/**\r\n\t * manage camera, and contains methods for transforming pixels to values\r\n\t */\r\n\tvar Screen = (function () {\r\n\t    function Screen(chartState) {\r\n\t        this.options = { scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1 };\r\n\t        this.currentScrollX = { x: 0 };\r\n\t        this.currentScrollY = { y: 0 };\r\n\t        this.currentZoomX = { val: 1 };\r\n\t        this.currentZoomY = { val: 1 };\r\n\t        this.chartState = chartState;\r\n\t        var _a = chartState.state, w = _a.width, h = _a.height;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.transform({\r\n\t            scrollY: this.valueToPxByYAxis(this.chartState.state.yAxis.range.scroll),\r\n\t            zoomY: 1\r\n\t        });\r\n\t        this.bindEvents();\r\n\t        //camera.position.z = 1500;\r\n\t    }\r\n\t    Screen.prototype.getCameraSettings = function () {\r\n\t        var _a = this.chartState.state, w = _a.width, h = _a.height;\r\n\t        // settings for pixel-perfect camera\r\n\t        var FOV = 75;\r\n\t        var vFOV = FOV * (Math.PI / 180);\r\n\t        return {\r\n\t            FOV: FOV,\r\n\t            aspect: w / h,\r\n\t            near: 0.1,\r\n\t            far: 5000,\r\n\t            z: h / (2 * Math.tan(vFOV / 2)),\r\n\t            // move 0,0 to left-bottom corner\r\n\t            x: w / 2,\r\n\t            y: h / 2\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onZoomFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'zoomFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onScrollFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'scrollFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onTransformationFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'transformationFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.cameraIsMoving = function () {\r\n\t        return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() ||\r\n\t            this.zoomXAnimation && this.zoomXAnimation.isActive());\r\n\t    };\r\n\t    Screen.prototype.transform = function (options, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\r\n\t        if (scrollX != void 0)\r\n\t            this.options.scrollX = scrollX;\r\n\t        if (scrollY != void 0)\r\n\t            this.options.scrollY = scrollY;\r\n\t        if (zoomX != void 0)\r\n\t            this.options.zoomX = zoomX;\r\n\t        if (zoomY != void 0)\r\n\t            this.options.zoomY = zoomY;\r\n\t        if (scrollX != void 0 || zoomX) {\r\n\t            options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\r\n\t            this.options.scrollXVal = options.scrollXVal;\r\n\t        }\r\n\t        if (scrollY != void 0 || zoomY) {\r\n\t            options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\r\n\t            this.options.scrollYVal = options.scrollYVal;\r\n\t        }\r\n\t        if (silent)\r\n\t            return;\r\n\t        this.ee.emit('transformationFrame', options);\r\n\t        if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\r\n\t            this.ee.emit('scrollFrame', options);\r\n\t        }\r\n\t        if (options.zoomX != void 0 || options.zoomY != void 0) {\r\n\t            this.ee.emit('zoomFrame', options);\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        // handle scroll and zoom\r\n\t        state.onChange(function (changedProps) {\r\n\t            if (changedProps.xAxis && changedProps.xAxis.range) {\r\n\t                if (changedProps.xAxis.range.scroll != void 0)\r\n\t                    _this.onScrollXHandler(changedProps);\r\n\t                if (changedProps.xAxis.range.zoom)\r\n\t                    _this.onZoomXHandler();\r\n\t            }\r\n\t            if (changedProps.yAxis && changedProps.yAxis.range) {\r\n\t                if (changedProps.yAxis.range.scroll != void 0)\r\n\t                    _this.onScrollYHandler();\r\n\t                if (changedProps.yAxis.range.zoom)\r\n\t                    _this.onZoomYHandler();\r\n\t            }\r\n\t        });\r\n\t        state.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    Screen.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.scrollXAnimation && this.scrollXAnimation.kill();\r\n\t        this.scrollYAnimation && this.scrollYAnimation.kill();\r\n\t        this.zoomXAnimation && this.zoomXAnimation.kill();\r\n\t        this.zoomYAnimation && this.zoomYAnimation.kill();\r\n\t    };\r\n\t    Screen.prototype.onScrollXHandler = function (changedProps) {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var isDragMode = state.state.cursor.dragMode;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled && !isDragMode;\r\n\t        var zoomXChanged = changedProps.xAxis.range.zoom;\r\n\t        var isAutoscroll = state.state.autoScroll && !isDragMode && !zoomXChanged;\r\n\t        var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\r\n\t        var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\r\n\t        if (this.scrollXAnimation)\r\n\t            this.scrollXAnimation.pause();\r\n\t        var range = state.state.xAxis.range;\r\n\t        var targetX = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollX.x = this.options.scrollX;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollX: _this.currentScrollX.x });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\r\n\t                x: targetX, ease: ease\r\n\t            });\r\n\t            this.scrollXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollX.x = targetX;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onScrollYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        if (this.scrollYAnimation)\r\n\t            this.scrollYAnimation.pause();\r\n\t        var range = state.state.yAxis.range;\r\n\t        var targetY = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollY.y = this.options.scrollY;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollY: _this.currentScrollY.y });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\r\n\t                y: targetY, ease: animations.zoomEase\r\n\t            });\r\n\t            this.scrollYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollY.y = targetY;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomXHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.state.xAxis.range.zoom;\r\n\t        if (this.zoomXAnimation)\r\n\t            this.zoomXAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomX: _this.currentZoomX.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomX.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.state.yAxis.range.zoom;\r\n\t        if (this.zoomYAnimation)\r\n\t            this.zoomYAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomY: _this.currentZoomY.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomY.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.chartState.state.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomX;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.chartState.state.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomY;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Screen.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.chartState.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.chartState.state.xAxis.range.scaleFactor * this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.chartState.state.yAxis.range.scaleFactor * this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.chartState.state.xAxis.range.scaleFactor / this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.chartState.state.yAxis.range.scaleFactor / this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollX value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenX = function (x) {\r\n\t        return this.chartState.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollY value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenY = function (y) {\r\n\t        return this.chartState.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    //\r\n\t    /**\r\n\t     *  returns screen scrollX value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.chartState.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    // /**\r\n\t    //  *  returns screen scrollY value by screen scrollY coordinate\r\n\t    //  */\r\n\t    // getScreenYByValue(scrollYVal: number): number {\r\n\t    // \tvar {scroll, zeroVal} = this.state.yAxis.range;\r\n\t    // \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\r\n\t    // }\r\n\t    //\r\n\t    //\r\n\t    /**\r\n\t     * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Screen.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenY = function (screenY) {\r\n\t        return this.getPointOnYAxis(this.getValueByScreenY(screenY));\r\n\t    };\r\n\t    Screen.prototype.getTop = function () {\r\n\t        return this.getPointByScreenY(this.chartState.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottom = function () {\r\n\t        return this.getPointByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getLeft = function () {\r\n\t        return this.getPointByScreenX(0);\r\n\t    };\r\n\t    Screen.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.chartState.state.width);\r\n\t    };\r\n\t    Screen.prototype.getTopVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottomVal = function () {\r\n\t        return this.getValueByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getCenterYVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.state.height / 2);\r\n\t    };\r\n\t    return Screen;\r\n\t}());\r\n\texports.Screen = Screen;\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar AXIS_MARK_DEFAULT_OPTIONS = {\r\n\t    type: 'simple',\r\n\t    lineWidth: 1,\r\n\t    value: 0,\r\n\t    showValue: false,\r\n\t    stickToEdges: false,\r\n\t    lineColor: '#FFFFFF',\r\n\t    title: ''\r\n\t};\r\n\tvar AxisMarks = (function () {\r\n\t    function AxisMarks(chartState, axisType) {\r\n\t        this.items = {};\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.axisType = axisType;\r\n\t        var marks = this.items;\r\n\t        var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\r\n\t        for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\r\n\t            var options = axisMarksOptions_1[_i];\r\n\t            var axisMark = void 0;\r\n\t            options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\r\n\t            // set mark name\r\n\t            if (!options.name)\r\n\t                options.name = Utils_1.Utils.getUid().toString();\r\n\t            if (marks[options.name])\r\n\t                Utils_1.Utils.error('duplicated mark name ' + options.name);\r\n\t            // create mark instance based on type option\r\n\t            if (options.type == 'timeleft') {\r\n\t                axisMark = new AxisTimeleftMark(chartState, axisType, options);\r\n\t            }\r\n\t            else {\r\n\t                axisMark = new AxisMark(chartState, axisType, options);\r\n\t            }\r\n\t            marks[options.name] = axisMark;\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarks.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, newData);\r\n\t        });\r\n\t        this.chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    AxisMarks.prototype.onTrendChange = function (trendName, newData) {\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var startVal = newData[0].xVal;\r\n\t        var endVal = newData[newData.length - 1].xVal;\r\n\t        var marks = this.items;\r\n\t        for (var markName in marks) {\r\n\t            var mark = marks[markName];\r\n\t            var markVal = mark.options.value;\r\n\t            var markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\r\n\t            if (markWasCrossed)\r\n\t                this.ee.emit('markCrossed', trendName, newData);\r\n\t        }\r\n\t    };\r\n\t    AxisMarks.prototype.getItems = function () {\r\n\t        return this.items;\r\n\t    };\r\n\t    AxisMarks.prototype.getItem = function (markName) {\r\n\t        return this.items[markName];\r\n\t    };\r\n\t    return AxisMarks;\r\n\t}());\r\n\texports.AxisMarks = AxisMarks;\r\n\tvar AxisMark = (function () {\r\n\t    function AxisMark(chartState, axisType, options) {\r\n\t        this.renderOnTrendsChange = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.options = options;\r\n\t        this.axisType = axisType;\r\n\t        this.chartState = chartState;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMark.prototype.bindEvents = function () { };\r\n\t    AxisMark.prototype.setOptions = function (newOptions) {\r\n\t        var value = this.options.value;\r\n\t        this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\r\n\t        if (this.options.value !== value)\r\n\t            this.ee.emit('valueChange');\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisMark.prototype.getDisplayedVal = function () {\r\n\t        var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\r\n\t        return String(displayedValue !== void 0 ? displayedValue : value);\r\n\t    };\r\n\t    AxisMark.prototype.onMarkCrossed = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('markCrossed', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('markCrossed', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('valueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('valueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onDisplayedValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('onDisplayedValueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('onDisplayedValueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.typeName = 'simple';\r\n\t    return AxisMark;\r\n\t}());\r\n\texports.AxisMark = AxisMark;\r\n\tvar AxisTimeleftMark = (function (_super) {\r\n\t    __extends(AxisTimeleftMark, _super);\r\n\t    function AxisTimeleftMark() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.renderOnTrendsChange = true;\r\n\t    }\r\n\t    AxisTimeleftMark.prototype.getDisplayedVal = function () {\r\n\t        var markVal = this.options.value;\r\n\t        var maxXVal = this.chartState.state.computedData.trends.maxXVal;\r\n\t        var time = markVal - maxXVal;\r\n\t        if (time < 0)\r\n\t            time = 0;\r\n\t        return Utils_1.Utils.msToTimeString(time);\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.onTrendsChange = function () {\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisTimeleftMark.typeName = 'timeleft';\r\n\t    return AxisTimeleftMark;\r\n\t}(AxisMark));\r\n\texports.AxisTimeleftMark = AxisTimeleftMark;\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t(function (AXIS_RANGE_TYPE) {\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\"; // TODO: AXIS_RANGE_TYPE.ALL\r\n\t})(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\r\n\tvar AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\r\n\t;\r\n\t(function (AXIS_TYPE) {\r\n\t    AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\r\n\t    AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\r\n\t})(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\r\n\tvar AXIS_TYPE = exports.AXIS_TYPE;\r\n\t(function (AXIS_DATA_TYPE) {\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\r\n\t})(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\r\n\tvar AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * base class for all widgets\r\n\t * each widget must have widgetName static property\r\n\t */\r\n\tvar ChartWidget = (function () {\r\n\t    function ChartWidget() {\r\n\t        this.unbindList = [];\r\n\t    }\r\n\t    ChartWidget.prototype.setupChart = function (chart) {\r\n\t        this.chart = chart;\r\n\t    };\r\n\t    ChartWidget.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unbindList = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unbindList.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unbindList.push.apply(unbindList, (args));\r\n\t        }\r\n\t        (_a = this.unbindList).push.apply(_a, unbindList);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartWidget.prototype.unbindEvents = function () {\r\n\t        this.unbindList.forEach(function (unbindEvent) { return unbindEvent(); });\r\n\t        this.unbindList.length = 0;\r\n\t    };\r\n\t    ChartWidget.widgetName = '';\r\n\t    return ChartWidget;\r\n\t}());\r\n\texports.ChartWidget = ChartWidget;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar GridWidget_1 = __webpack_require__(22);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\t/**\r\n\t * widget for drawing axis\r\n\t */\r\n\tvar AxisWidget = (function (_super) {\r\n\t    __extends(AxisWidget, _super);\r\n\t    function AxisWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    AxisWidget.prototype.onReadyHandler = function () {\r\n\t        var _this = this;\r\n\t        this.object3D = new Object3D();\r\n\t        this.axisXObject = new Object3D();\r\n\t        this.axisYObject = new Object3D();\r\n\t        this.object3D.add(this.axisXObject);\r\n\t        this.object3D.add(this.axisYObject);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        // canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\r\n\t        this.updateAxisXRequest = Utils_1.Utils.throttle(function () { return _this.updateAxis(interfaces_1.AXIS_TYPE.X); }, 1000);\r\n\t        this.onScrollChange(this.chart.screen.options.scrollX, this.chart.screen.options.scrollY);\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        this.bindEvent(state.screen.onTransformationFrame(function (options) {\r\n\t            _this.onScrollChange(options.scrollX, options.scrollY);\r\n\t        }), state.screen.onZoomFrame(function (options) { _this.onZoomFrame(options); }), state.onDestroy(function () { return _this.onDestroy(); }), state.onResize(function () { return _this.onResize(); }));\r\n\t    };\r\n\t    AxisWidget.prototype.onDestroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.unbindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.onScrollChange = function (x, y) {\r\n\t        if (y != void 0) {\r\n\t            this.axisYObject.position.y = y;\r\n\t            this.axisXObject.position.y = y;\r\n\t        }\r\n\t        if (x != void 0) {\r\n\t            this.axisYObject.position.x = x;\r\n\t            this.updateAxisXRequest();\r\n\t        }\r\n\t    };\r\n\t    AxisWidget.prototype.onResize = function () {\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t    };\r\n\t    AxisWidget.prototype.setupAxis = function (orientation) {\r\n\t        var _this = this;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var canvasWidth = 0, canvasHeight = 0;\r\n\t        var axisOptions;\r\n\t        // clean meshes\r\n\t        if (isXAxis) {\r\n\t            this.axisXObject.traverse(function (obj) { return _this.axisXObject.remove(obj); });\r\n\t            canvasWidth = visibleWidth * 3;\r\n\t            canvasHeight = 50;\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t        }\r\n\t        else {\r\n\t            this.axisYObject.traverse(function (obj) { return _this.axisYObject.remove(obj); });\r\n\t            canvasWidth = 50;\r\n\t            canvasHeight = visibleHeight * 3;\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t        }\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function (ctx) {\r\n\t            var color = new Color_1.ChartColor(axisOptions.color);\r\n\t            ctx.beginPath();\r\n\t            ctx.font = _this.chart.state.font.m;\r\n\t            ctx.fillStyle = color.rgbaStr;\r\n\t            ctx.strokeStyle = color.rgbaStr;\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisXObject.add(axisMesh);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisYObject.add(axisMesh);\r\n\t        }\r\n\t        this.updateAxis(orientation);\r\n\t    };\r\n\t    AxisWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisWidget.prototype.updateAxis = function (orientation) {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var _b = this.chart.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\r\n\t        var axisOptions;\r\n\t        var axisMesh;\r\n\t        var axisGridParams;\r\n\t        if (isXAxis) {\r\n\t            axisMesh = this.axisXObject.children[0];\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh = this.axisYObject.children[0];\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\r\n\t        }\r\n\t        var geometry = axisMesh.geometry;\r\n\t        var canvasWidth = geometry.parameters.width;\r\n\t        var canvasHeight = geometry.parameters.height;\r\n\t        var texture = axisMesh.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\r\n\t        }\r\n\t        // TODO: draw text and lines in different loops\r\n\t        var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\r\n\t        var startVal = axisGridParams.start - edgeOffset;\r\n\t        var endVal = axisGridParams.end + edgeOffset;\r\n\t        ctx.beginPath();\r\n\t        for (var val = startVal; val <= endVal; val += axisGridParams.step) {\r\n\t            var displayedValue = '';\r\n\t            if (isXAxis) {\r\n\t                var pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\r\n\t                ctx.textAlign = \"center\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(pxVal + 0.5, canvasHeight);\r\n\t                // ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\r\n\t                if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\r\n\t                    displayedValue = AxisWidget.getDateStr(val, axisGridParams);\r\n\t                }\r\n\t                else {\r\n\t                    displayedValue = Number(val.toFixed(14)).toString();\r\n\t                }\r\n\t                ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\r\n\t            }\r\n\t            else {\r\n\t                var pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\r\n\t                ctx.textAlign = \"right\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(canvasWidth, pxVal + 0.5);\r\n\t                // ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\r\n\t                displayedValue = Number(val.toFixed(14)).toString();\r\n\t                ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\r\n\t            }\r\n\t            ctx.stroke();\r\n\t        }\r\n\t        // uncomment to preview canvas borders\r\n\t        // ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t        ctx.stroke();\r\n\t        ctx.closePath();\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisWidget.prototype.onZoomFrame = function (options) {\r\n\t        if (options.zoomX) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        }\r\n\t        if (options.zoomY) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        }\r\n\t    };\r\n\t    // private temporaryHideAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar timeoutId = setTimeout(() => {\r\n\t    // \t\t\tthis.showAxis(orientation);\r\n\t    // \t}, 200);\r\n\t    //\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tclearTimeout(this.showAxisXTimeout);\r\n\t    // \t\tthis.showAxisXTimeout =\ttimeoutId;\r\n\t    // \t} else {\r\n\t    // \t\tclearTimeout(this.showAxisYTimeout);\r\n\t    // \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tthis.showAxisYTimeout = timeoutId;\r\n\t    // \t}\r\n\t    // }\r\n\t    // private showAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar material: MeshBasicMaterial;\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t} else {\r\n\t    // \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t}\r\n\t    // \tthis.updateAxis(orientation);\r\n\t    // \tTweenLite.to(material, 0.3, {opacity: 1});\r\n\t    // }\r\n\t    AxisWidget.getDateStr = function (timestamp, gridParams) {\r\n\t        var sec = 1000;\r\n\t        var min = sec * 60;\r\n\t        var hour = min * 60;\r\n\t        var day = hour * 60;\r\n\t        var step = gridParams.step;\r\n\t        var d = new Date(timestamp);\r\n\t        var tf = function (num) { return Utils_1.Utils.toFixed(num, 2); };\r\n\t        return tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\r\n\t    };\r\n\t    AxisWidget.widgetName = 'Axis';\r\n\t    return AxisWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisWidget = AxisWidget;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\t/**\r\n\t * widget for drawing state grid\r\n\t */\r\n\tvar GridWidget = (function (_super) {\r\n\t    __extends(GridWidget, _super);\r\n\t    function GridWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    GridWidget.prototype.onReadyHandler = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        this.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\r\n\t        this.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\r\n\t        this.initGrid();\r\n\t        this.updateGrid();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    GridWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        // grid is bigger then screen, so it's no need to update it on each scroll event\r\n\t        var updateGridThrottled = Utils_1.Utils.throttle(function () { return _this.updateGrid(); }, 1000);\r\n\t        this.bindEvent(this.chart.onScroll(function () { return updateGridThrottled(); }), this.chart.screen.onZoomFrame(function (options) {\r\n\t            updateGridThrottled();\r\n\t            _this.onZoomFrame(options);\r\n\t        }), this.chart.onDestroy(function () {\r\n\t            _this.isDestroyed = true;\r\n\t            _this.unbindEvents();\r\n\t        }), this.chart.onResize(function () {\r\n\t            _this.updateGrid();\r\n\t        }));\r\n\t    };\r\n\t    GridWidget.prototype.initGrid = function () {\r\n\t        var color = new Color_1.ChartColor(this.chart.state.xAxis.grid.color);\r\n\t        var geometry = new THREE.Geometry();\r\n\t        var material = new THREE.LineBasicMaterial({ linewidth: 1, color: color.value, opacity: color.a, transparent: true });\r\n\t        var xLinesCount = this.gridSizeH;\r\n\t        var yLinesCount = this.gridSizeV;\r\n\t        while (xLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        while (yLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        this.lineSegments = new LineSegments(geometry, material);\r\n\t        this.lineSegments.position.setZ(-1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t    };\r\n\t    GridWidget.prototype.updateGrid = function () {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var _a = this.chart.state, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\r\n\t        var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\r\n\t        var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\r\n\t        var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\r\n\t        var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\r\n\t        var gridScrollXVal = scrollXInSegments * axisXGrid.step;\r\n\t        var gridScrollYVal = scrollYInSegments * axisYGrid.step;\r\n\t        var startXVal = axisXGrid.start + gridScrollXVal;\r\n\t        var startYVal = axisYGrid.start + gridScrollYVal;\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var vertices = geometry.vertices;\r\n\t        var lineInd = 0;\r\n\t        for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\r\n\t            var value = startXVal + i * axisXGrid.step;\r\n\t            var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\r\n\t            var value = startYVal + i * axisYGrid.step;\r\n\t            var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\r\n\t    };\r\n\t    GridWidget.prototype.getHorizontalLineSegment = function (yVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\r\n\t        var widthVal = chartState.pxToValueByXAxis(chartState.state.width);\r\n\t        return [\r\n\t            new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0),\r\n\t            new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.getVerticalLineSegment = function (xVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\r\n\t        var heightVal = chartState.pxToValueByYAxis(chartState.state.height);\r\n\t        return [\r\n\t            new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0),\r\n\t            new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.onZoomFrame = function (options) {\r\n\t        var _a = this.chart.state, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        if (options.zoomX)\r\n\t            this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\r\n\t    };\r\n\t    // TODO: move this code to core\r\n\t    GridWidget.getGridParamsForAxis = function (axisOptions, axisWidth, zoom) {\r\n\t        var axisRange = axisOptions.range;\r\n\t        var from = axisRange.from;\r\n\t        var to = axisRange.to;\r\n\t        var axisLength = to - from;\r\n\t        var gridStep = 0;\r\n\t        var gridStepInPixels = 0;\r\n\t        var minGridStepInPixels = axisOptions.grid.minSizePx;\r\n\t        var axisLengthStr = String(axisLength);\r\n\t        var axisLengthPointPosition = axisLengthStr.indexOf('.');\r\n\t        var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\r\n\t        var gridStepFound = false;\r\n\t        var digitPos = 0;\r\n\t        while (!gridStepFound) {\r\n\t            var power = intPartLength - digitPos - 1;\r\n\t            var multiplier = (Math.pow(10, power) || 1);\r\n\t            var dividers = [1, 2, 5];\r\n\t            for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\r\n\t                var nextGridStep = multiplier / dividers[dividerInd];\r\n\t                var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\r\n\t                if (nextGridStepInPixels >= minGridStepInPixels) {\r\n\t                    gridStep = nextGridStep;\r\n\t                    gridStepInPixels = nextGridStepInPixels;\r\n\t                }\r\n\t                else {\r\n\t                    gridStepFound = true;\r\n\t                    if (gridStep === 0) {\r\n\t                        gridStep = nextGridStep;\r\n\t                        gridStepInPixels = nextGridStepInPixels;\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (!gridStepFound)\r\n\t                digitPos++;\r\n\t        }\r\n\t        var gridStart = Math.floor(from / gridStep) * gridStep;\r\n\t        var gridEnd = Math.floor(to / gridStep) * gridStep;\r\n\t        return {\r\n\t            start: gridStart,\r\n\t            end: gridEnd,\r\n\t            step: gridStep,\r\n\t            stepInPx: gridStepInPixels,\r\n\t            length: gridEnd - gridStart,\r\n\t            segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\r\n\t        };\r\n\t    };\r\n\t    GridWidget.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    GridWidget.widgetName = 'Grid';\r\n\t    return GridWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.GridWidget = GridWidget;\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar ChartColor = (function () {\r\n\t    function ChartColor(color) {\r\n\t        this.set(color);\r\n\t    }\r\n\t    /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\r\n\t    /**\r\n\t     * Parse hex/rgb{a} color syntax.\r\n\t     * @input string\r\n\t     * @returns array [r,g,b{,o}]\r\n\t     */\r\n\t    ChartColor.parseColor = function (color) {\r\n\t        var cache, p = parseInt // Use p as a byte saving reference to parseInt\r\n\t        , color = color.replace(/\\s\\s*/g, ''); //var\r\n\t        // Checks for 6 digit hex and converts string to integer\r\n\t        if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\r\n\t        else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\r\n\t            cache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\r\n\t        else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\r\n\t        else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3], +cache[4]];\r\n\t        else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3]];\r\n\t        else\r\n\t            throw Error(color + ' is not supported by parseColor');\r\n\t        // Performs RGBA conversion by default\r\n\t        isNaN(cache[3]) && (cache[3] = 1);\r\n\t        return cache;\r\n\t        // Adds or removes 4th value based on rgba support\r\n\t        // Support is flipped twice to prevent erros if\r\n\t        // it's not defined\r\n\t        //return cache.slice(0,3 + !!$.support.rgba);\r\n\t    };\r\n\t    ChartColor.prototype.set = function (color) {\r\n\t        if (typeof color == 'number') {\r\n\t            color = color.toString(16);\r\n\t            color = '#' + '0'.repeat(6 - color.length) + color;\r\n\t        }\r\n\t        var colorStr = color;\r\n\t        var rgba = ChartColor.parseColor(colorStr);\r\n\t        this.r = rgba[0];\r\n\t        this.g = rgba[1];\r\n\t        this.b = rgba[2];\r\n\t        this.a = rgba[3];\r\n\t        this.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\r\n\t        this.hexStr = '#' + this.value.toString(16);\r\n\t        this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\r\n\t    };\r\n\t    return ChartColor;\r\n\t}());\r\n\texports.ChartColor = ChartColor;\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\tvar TrendsGradientWidget = (function (_super) {\r\n\t    __extends(TrendsGradientWidget, _super);\r\n\t    function TrendsGradientWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsGradientWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendGradient;\r\n\t    };\r\n\t    TrendsGradientWidget.widgetName = \"TrendsGradient\";\r\n\t    return TrendsGradientWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsGradientWidget = TrendsGradientWidget;\r\n\tvar TrendGradient = (function (_super) {\r\n\t    __extends(TrendGradient, _super);\r\n\t    function TrendGradient(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        this.visibleSegmentsCnt = 0;\r\n\t        this.trend = chartState.trendsManager.getTrend(trendName);\r\n\t        this.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments);\r\n\t        this.initGradient();\r\n\t        this.updateSegments();\r\n\t    }\r\n\t    TrendGradient.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.hasBackground;\r\n\t    };\r\n\t    TrendGradient.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            // TODO: optimize updateSegments for onDisplayedRangeChanged\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.chart.onZoom(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendGradient.prototype.getObject3D = function () {\r\n\t        return this.gradient;\r\n\t    };\r\n\t    TrendGradient.prototype.initGradient = function () {\r\n\t        var geometry = new Geometry();\r\n\t        for (var i = 0; i < this.segmentsIds.length; i++) {\r\n\t            geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\r\n\t            var ind = i * 4;\r\n\t            // gradient segment scheme\r\n\t            //\r\n\t            // vert0 +---+ vert3\r\n\t            //       |\\  |\r\n\t            // face1 | \\ | face2\r\n\t            // \t     |  \\|\r\n\t            // vert1 +---+ vert2\r\n\t            geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\r\n\t        }\r\n\t        var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\r\n\t        this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color: color.value, transparent: true, opacity: color.a }));\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.gradient.frustumCulled = false;\r\n\t    };\r\n\t    TrendGradient.prototype.onZoomFrame = function (options) {\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        var currentScale = this.gradient.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendGradient.prototype.onSegmentsAnimate = function (trendSegmentsManager) {\r\n\t        var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\r\n\t        for (var i = 0; i < this.visibleSegmentsCnt; i++) {\r\n\t            var segmentId = this.segmentsIds[i];\r\n\t            if (!animatedSegmentsIds.includes(segmentId))\r\n\t                continue;\r\n\t            this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\r\n\t        }\r\n\t        this.gradient.geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendGradient.prototype.updateSegments = function () {\r\n\t        var geometry = this.gradient.geometry;\r\n\t        var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\r\n\t        var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\r\n\t        this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\r\n\t        var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\r\n\t        if (segmentsToProcessCnt > this.segmentsIds.length) {\r\n\t            Utils_1.Utils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\r\n\t        }\r\n\t        // setup visible segments and collapse invisible\r\n\t        for (var i = 0; i <= segmentsToProcessCnt; i++) {\r\n\t            if (segmentInd <= lastDisplayedSegmentInd) {\r\n\t                var segment = trendSegments[segmentInd];\r\n\t                this.setupSegmentVertices(i, segment.currentAnimationState);\r\n\t                this.segmentsIds[i] = segment.id;\r\n\t                segmentInd++;\r\n\t            }\r\n\t            else {\r\n\t                this.setupSegmentVertices(i);\r\n\t            }\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    /**\r\n\t     * setup gradient segment by segmentState\r\n\t     * if segmentState is undefined, then collapse vertices to 0,0,0\r\n\t     */\r\n\t    TrendGradient.prototype.setupSegmentVertices = function (segmentInd, segmentState) {\r\n\t        var gradientSegmentInd = segmentInd * 4;\r\n\t        var vertices = this.gradient.geometry.vertices;\r\n\t        var topLeft = vertices[gradientSegmentInd];\r\n\t        var bottomLeft = vertices[gradientSegmentInd + 1];\r\n\t        var bottomRight = vertices[gradientSegmentInd + 2];\r\n\t        var topRight = vertices[gradientSegmentInd + 3];\r\n\t        var screenHeightVal = Math.max(this.chart.pxToValueByYAxis(this.chart.state.height), this.chart.screen.pxToValueByYAxis(this.chart.state.height));\r\n\t        if (segmentState) {\r\n\t            var startX = this.toLocalX(segmentState.startXVal);\r\n\t            var startY = this.toLocalY(segmentState.startYVal);\r\n\t            var endX = this.toLocalX(segmentState.endXVal);\r\n\t            var endY = this.toLocalY(segmentState.endYVal);\r\n\t            topLeft.set(startX, startY, 0);\r\n\t            topRight.set(endX, endY, 0);\r\n\t            bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\r\n\t            bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\r\n\t        }\r\n\t        else {\r\n\t            topLeft.set(0, 0, 0);\r\n\t            topRight.set(0, 0, 0);\r\n\t            bottomLeft.set(0, 0, 0);\r\n\t            bottomRight.set(0, 0, 0);\r\n\t        }\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    return TrendGradient;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendGradient = TrendGradient;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Object3D = THREE.Object3D;\r\n\t/**\r\n\t * abstract manager class for all trends widgets\r\n\t */\r\n\tvar TrendsWidget = (function (_super) {\r\n\t    __extends(TrendsWidget, _super);\r\n\t    function TrendsWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.widgets = {};\r\n\t    }\r\n\t    TrendsWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        this.onTrendsChange();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    TrendsWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        state.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t        state.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, changedOptions, newData);\r\n\t        });\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendsChange = function () {\r\n\t        var trendsOptions = this.chart.state.trends;\r\n\t        var TrendWidgetClass = this.getTrendWidgetClass();\r\n\t        for (var trendName in trendsOptions) {\r\n\t            var trendOptions = trendsOptions[trendName];\r\n\t            var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\r\n\t            if (widgetCanBeEnabled && !this.widgets[trendName]) {\r\n\t                this.createTrendWidget(trendName);\r\n\t            }\r\n\t            else if (!widgetCanBeEnabled && this.widgets[trendName]) {\r\n\t                this.destroyTrendWidget(trendName);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendChange = function (trendName, changedOptions, newData) {\r\n\t        var widget = this.widgets[trendName];\r\n\t        if (!widget)\r\n\t            return;\r\n\t        widget.onTrendChange(changedOptions);\r\n\t        if (newData) {\r\n\t            var data = this.chart.getTrend(trendName).getData();\r\n\t            var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t            isAppend ? widget.appendData(newData) : widget.prependData(newData);\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendsWidget.prototype.createTrendWidget = function (trendName) {\r\n\t        var WidgetConstructor = this.getTrendWidgetClass();\r\n\t        var widget = new WidgetConstructor(this.chart, trendName);\r\n\t        this.widgets[trendName] = widget;\r\n\t        var widgetObject = widget.getObject3D();\r\n\t        widgetObject.name = trendName;\r\n\t        this.object3D.add(widget.getObject3D());\r\n\t    };\r\n\t    TrendsWidget.prototype.destroyTrendWidget = function (trendName) {\r\n\t        this.widgets[trendName].onDestroy();\r\n\t        delete this.widgets[trendName];\r\n\t        var widgetObject = this.object3D.getObjectByName(trendName);\r\n\t        this.object3D.remove(widgetObject);\r\n\t    };\r\n\t    return TrendsWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.TrendsWidget = TrendsWidget;\r\n\t/**\r\n\t * based class for all trends widgets\r\n\t */\r\n\tvar TrendWidget = (function () {\r\n\t    function TrendWidget(chart, trendName) {\r\n\t        this.chart = chart;\r\n\t        this.trendName = trendName;\r\n\t        this.unbindList = [];\r\n\t        this.trend = chart.trendsManager.getTrend(trendName);\r\n\t        this.chart = chart;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendWidget.widgetIsEnabled = function (trendOptions, chart) {\r\n\t        return trendOptions.enabled;\r\n\t    };\r\n\t    TrendWidget.prototype.appendData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.prependData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.onTrendChange = function (changedOptions) { };\r\n\t    TrendWidget.prototype.onDestroy = function () {\r\n\t        for (var _i = 0, _a = this.unbindList; _i < _a.length; _i++) {\r\n\t            var unsubscriber = _a[_i];\r\n\t            unsubscriber();\r\n\t        }\r\n\t    };\r\n\t    TrendWidget.prototype.onSegmentsAnimate = function (segments) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoomFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onTransformationFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoom = function () {\r\n\t    };\r\n\t    TrendWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function (trendPoints) { return _this.onSegmentsAnimate(trendPoints); }));\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function (options) { return _this.onTransformationFrame(options); }));\r\n\t        this.bindEvent(this.chart.screen.onZoomFrame(function (options) { return _this.onZoomFrame(options); }));\r\n\t        this.bindEvent(this.chart.onZoom(function () { return _this.onZoom(); }));\r\n\t    };\r\n\t    ;\r\n\t    TrendWidget.prototype.bindEvent = function (unbind) {\r\n\t        this.unbindList.push(unbind);\r\n\t    };\r\n\t    return TrendWidget;\r\n\t}());\r\n\texports.TrendWidget = TrendWidget;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\t/**\r\n\t * widget for drawing trends lines\r\n\t */\r\n\tvar TrendsLineWidget = (function (_super) {\r\n\t    __extends(TrendsLineWidget, _super);\r\n\t    function TrendsLineWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsLineWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendLine;\r\n\t    };\r\n\t    TrendsLineWidget.widgetName = \"TrendsLine\";\r\n\t    return TrendsLineWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsLineWidget = TrendsLineWidget;\r\n\tvar TrendLine = (function (_super) {\r\n\t    __extends(TrendLine, _super);\r\n\t    function TrendLine(chart, trendName) {\r\n\t        _super.call(this, chart, trendName);\r\n\t        // contains indexes of free segments\r\n\t        this.freeSegmentsInds = [];\r\n\t        // contains segments to display\r\n\t        this.displayedSegments = {};\r\n\t        var options = this.trend.getOptions();\r\n\t        this.material = new LineBasicMaterial({ color: options.lineColor, linewidth: options.lineWidth });\r\n\t        this.initLine();\r\n\t    }\r\n\t    TrendLine.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\r\n\t    };\r\n\t    TrendLine.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    TrendLine.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroySegments();\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendLine.prototype.initLine = function () {\r\n\t        var geometry = new Geometry();\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.lineSegments = new LineSegments(geometry, this.material);\r\n\t        this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t        for (var i = 0; i < this.chart.state.maxVisibleSegments; i++) {\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t            this.freeSegmentsInds.push(i);\r\n\t        }\r\n\t        this.vertices = geometry.vertices;\r\n\t        this.setupSegments();\r\n\t    };\r\n\t    TrendLine.prototype.setupSegments = function () {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.displayedSegments) {\r\n\t            var lineSegment = this.displayedSegments[segmentId];\r\n\t            var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroySegment(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupSegment(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.setupSegment = function (segmentId, segmentState) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        if (!lineSegment) {\r\n\t            if (this.freeSegmentsInds.length == 0)\r\n\t                Utils_1.Utils.error('Max allocated segments reached');\r\n\t            var ind = this.freeSegmentsInds.pop();\r\n\t            lineSegment = this.displayedSegments[segmentId] = { segmentId: segmentId, ind: ind };\r\n\t        }\r\n\t        var segmentInd = lineSegment.ind;\r\n\t        var lineStartVertex = this.vertices[segmentInd * 2];\r\n\t        var lineEndVertex = this.vertices[segmentInd * 2 + 1];\r\n\t        lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\r\n\t        lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\r\n\t    };\r\n\t    TrendLine.prototype.destroySegments = function () {\r\n\t        for (var segmentId in this.displayedSegments)\r\n\t            this.destroySegment(Number(segmentId));\r\n\t    };\r\n\t    TrendLine.prototype.destroySegment = function (segmentId) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        var lineStartVertex = this.vertices[lineSegment.ind * 2];\r\n\t        var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\r\n\t        lineStartVertex.set(0, 0, 0);\r\n\t        lineEndVertex.set(0, 0, 0);\r\n\t        delete this.displayedSegments[segmentId];\r\n\t        this.freeSegmentsInds.push(lineSegment.ind);\r\n\t    };\r\n\t    TrendLine.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.lineSegments.scale;\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendLine.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.displayedSegments[segmentId])\r\n\t                continue;\r\n\t            this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendLine;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendLine = TrendLine;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Line = THREE.Line;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar PlaneGeometry = THREE.PlaneGeometry;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar RISE_COLOR = 0x2CAC40;\r\n\tvar FALL_COLOR = 0xEE5533;\r\n\tvar MARGIN_PERCENT = 0.3;\r\n\tvar MAX_CANDLES = 100;\r\n\t/**\r\n\t * widget for drawing trends candles\r\n\t */\r\n\tvar TrendsCandlesWidget = (function (_super) {\r\n\t    __extends(TrendsCandlesWidget, _super);\r\n\t    function TrendsCandlesWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsCandlesWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendCandlesWidget;\r\n\t    };\r\n\t    TrendsCandlesWidget.widgetName = \"TrendsCandles\";\r\n\t    return TrendsCandlesWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsCandlesWidget = TrendsCandlesWidget;\r\n\tvar TrendCandlesWidget = (function (_super) {\r\n\t    __extends(TrendCandlesWidget, _super);\r\n\t    function TrendCandlesWidget(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        // contains indexes of free candles\r\n\t        this.freeCandlesInds = [];\r\n\t        this.candlesPool = [];\r\n\t        this.candles = {};\r\n\t        this.initObject();\r\n\t    }\r\n\t    TrendCandlesWidget.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroyCandles();\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.initObject = function () {\r\n\t        var stateData = this.chart.state;\r\n\t        var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.scaleXFactor = scaleXFactor;\r\n\t        this.scaleYFactor = scaleYFactor;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.object3D.frustumCulled = false;\r\n\t        for (var i = 0; i < MAX_CANDLES; i++)\r\n\t            this.freeCandlesInds.push(i);\r\n\t        this.setupCandles();\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.setupCandles = function () {\r\n\t        // remove invisible\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.candles) {\r\n\t            var segment_1 = this.candles[segmentId].segment;\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroyCandle(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupCandle(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandles = function () {\r\n\t        for (var segmentId in this.candles)\r\n\t            this.destroyCandle(Number(segmentId));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandle = function (segmentId) {\r\n\t        var candle = this.candles[segmentId];\r\n\t        this.object3D.remove(candle.getObject3D());\r\n\t        delete this.candles[segmentId];\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.object3D.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(this.scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(this.scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.candles[segmentId])\r\n\t                continue;\r\n\t            var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\r\n\t            this.setupCandle(segmentId, segmentState);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * create or modify candle\r\n\t     */\r\n\t    TrendCandlesWidget.prototype.setupCandle = function (candleId, segmentState) {\r\n\t        var candleInd = candleId % MAX_CANDLES;\r\n\t        // get candle from candlesPool to avoid creating new Objects by performance reasons\r\n\t        var candle = this.candlesPool[candleInd];\r\n\t        if (!candle) {\r\n\t            candle = this.candlesPool[candleInd] = new CandleWidget();\r\n\t        }\r\n\t        if (!this.candles[candleId]) {\r\n\t            this.candles[candleId] = candle;\r\n\t            this.object3D.add(candle.getObject3D());\r\n\t        }\r\n\t        candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\r\n\t        candle.setSegment(segmentState);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendCandlesWidget;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendCandlesWidget = TrendCandlesWidget;\r\n\tvar CandleWidget = (function () {\r\n\t    function CandleWidget() {\r\n\t        this.initObject();\r\n\t    }\r\n\t    CandleWidget.prototype.getObject3D = function () {\r\n\t        return this.rect;\r\n\t    };\r\n\t    CandleWidget.prototype.setSegment = function (segment) {\r\n\t        this.segment = segment;\r\n\t        var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\r\n\t        // update rect\r\n\t        var geometry = this.rect.geometry;\r\n\t        var material = this.rect.material;\r\n\t        var width = segment.endXVal - segment.startXVal;\r\n\t        width -= width * MARGIN_PERCENT;\r\n\t        var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\r\n\t        var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\r\n\t        leftTop.set(-width / 2, height / 2, 0);\r\n\t        rightTop.set(width / 2, height / 2, 0);\r\n\t        leftBottom.set(-width / 2, -height / 2, 0);\r\n\t        rightBottom.set(width / 2, -height / 2, 0);\r\n\t        // prevent to draw bars with height < 1px\r\n\t        if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\r\n\t            leftBottom.setY(leftBottom.y + 1);\r\n\t            rightBottom.setY(rightBottom.y + 1);\r\n\t        }\r\n\t        material.color.set(color);\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        // update lines\r\n\t        var vLineGeometry = this.vLine.geometry;\r\n\t        var vLineMaterial = this.vLine.material;\r\n\t        var lineTop = segment.maxYVal - segment.yVal;\r\n\t        var lineBottom = segment.minYVal - segment.yVal;\r\n\t        vLineGeometry.vertices[0].set(0, lineTop, 0);\r\n\t        vLineGeometry.vertices[1].set(0, lineBottom, 0);\r\n\t        vLineMaterial.color.set(color);\r\n\t        vLineGeometry.verticesNeedUpdate = true;\r\n\t        var hLineGeometry = this.hLine.geometry;\r\n\t        var hLineMaterial = this.hLine.material;\r\n\t        var lineLeft = (-width) / 2;\r\n\t        var lineRight = width / 2;\r\n\t        hLineGeometry.vertices[0].set(lineLeft, 0, 0);\r\n\t        hLineGeometry.vertices[1].set(lineRight, 0, 0);\r\n\t        hLineMaterial.color.set(color);\r\n\t        hLineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    CandleWidget.prototype.initObject = function () {\r\n\t        this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\r\n\t        var vLineGeometry = new Geometry();\r\n\t        var hLineGeometry = new Geometry();\r\n\t        vLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        hLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        this.vLine = new Line(vLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.hLine = new Line(hLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.rect.add(this.vLine);\r\n\t        this.rect.add(this.hLine);\r\n\t    };\r\n\t    return CandleWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(5));\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar Line = THREE.Line;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\t/**\r\n\t * widget for shows marks on axis\r\n\t */\r\n\tvar AxisMarksWidget = (function (_super) {\r\n\t    __extends(AxisMarksWidget, _super);\r\n\t    function AxisMarksWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.axisMarksWidgets = [];\r\n\t    }\r\n\t    AxisMarksWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        var _a = this.chart, xAxisMarks = _a.xAxisMarks, yAxisMarks = _a.yAxisMarks;\r\n\t        var items = xAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t        items = yAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    AxisMarksWidget.prototype.createAxisMark = function (axisMark) {\r\n\t        var axisMarkWidget = new AxisMarkWidget(this.chart, axisMark);\r\n\t        this.axisMarksWidgets.push(axisMarkWidget);\r\n\t        this.object3D.add(axisMarkWidget.getObject3D());\r\n\t    };\r\n\t    AxisMarksWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function () { return _this.updateMarksPositions(); }), this.chart.onResize(function () { return _this.updateMarksPositions(); }));\r\n\t    };\r\n\t    AxisMarksWidget.prototype.updateMarksPositions = function () {\r\n\t        for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\r\n\t            var widget = _a[_i];\r\n\t            widget.updatePosition();\r\n\t        }\r\n\t    };\r\n\t    AxisMarksWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarksWidget.widgetName = 'AxisMarks';\r\n\t    return AxisMarksWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisMarksWidget = AxisMarksWidget;\r\n\tvar DEFAULT_INDICATOR_RENDER_FUNCTION = function (axisMarkWidget, ctx) {\r\n\t    var axisMark = axisMarkWidget.axisMark;\r\n\t    ctx.fillStyle = axisMark.options.lineColor;\r\n\t    ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\r\n\t    var xCoord = 15;\r\n\t    if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\r\n\t        ctx.textAlign = 'end';\r\n\t        xCoord = axisMarkWidget.indicatorWidth;\r\n\t    }\r\n\t    ctx.fillText(axisMark.options.title, xCoord, 20);\r\n\t    if (!axisMark.options.showValue)\r\n\t        return;\r\n\t    ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\r\n\t    ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\r\n\t};\r\n\tvar INDICATOR_POS_Z = 0.1;\r\n\tvar AxisMarkWidget = (function () {\r\n\t    function AxisMarkWidget(chartState, axisMark) {\r\n\t        this.indicatorWidth = 128;\r\n\t        this.indicatorHeight = 64;\r\n\t        this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\r\n\t        this.chartState = chartState;\r\n\t        this.axisMark = axisMark;\r\n\t        this.axisType = axisMark.axisType;\r\n\t        this.frameValue = axisMark.options.value;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.position.setZ(-0.1);\r\n\t        this.line = this.createLine();\r\n\t        this.object3D.add(this.line);\r\n\t        this.indicator = this.createIndicator();\r\n\t        this.object3D.add(this.indicator);\r\n\t        this.renderIndicator();\r\n\t        this.updatePosition();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarkWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createLine = function () {\r\n\t        var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\r\n\t        var lineGeometry = new Geometry();\r\n\t        lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n\t        return new Line(lineGeometry, new LineBasicMaterial({ color: new Color_1.ChartColor(lineColor).value, linewidth: lineWidth }));\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createIndicator = function () {\r\n\t        var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.font = \"10px Arial\";\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        return new Mesh(new THREE.PlaneGeometry(width, height), material);\r\n\t    };\r\n\t    AxisMarkWidget.prototype.renderIndicator = function () {\r\n\t        var texture = this.indicator.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.axisMark.onDisplayedValueChange(function () { return _this.renderIndicator(); });\r\n\t        this.axisMark.onValueChange(function () { return _this.onValueChangeHandler(); });\r\n\t    };\r\n\t    AxisMarkWidget.prototype.onValueChangeHandler = function () {\r\n\t        var _this = this;\r\n\t        // move mark to new position with animation\r\n\t        if (this.moveAnimation)\r\n\t            this.moveAnimation.kill();\r\n\t        var animations = this.chartState.state.animations;\r\n\t        var targetValue = this.axisMark.options.value;\r\n\t        var cb = function () {\r\n\t            _this.updatePosition();\r\n\t        };\r\n\t        if (animations.enabled) {\r\n\t            this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, { frameValue: targetValue, ease: animations.trendChangeEase });\r\n\t            this.moveAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.frameValue = targetValue;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    AxisMarkWidget.prototype.updatePosition = function () {\r\n\t        var chartState = this.chartState;\r\n\t        var screen = chartState.screen;\r\n\t        var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\r\n\t        var lineGeometry = this.line.geometry;\r\n\t        var hasStickMode = this.axisMark.options.stickToEdges;\r\n\t        var _a = this.chartState.state, width = _a.width, height = _a.height;\r\n\t        if (isXAxis) {\r\n\t            // TODO: make stickToEdges mode for AXIS_TYPE.X \r\n\t            this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\r\n\t            this.object3D.position.y = screen.getBottom();\r\n\t            lineGeometry.vertices[1].setY(height);\r\n\t            this.indicator.position.set(this.indicatorWidth / 2, chartState.state.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\r\n\t        }\r\n\t        else {\r\n\t            var val = this.frameValue;\r\n\t            var bottomVal = screen.getBottomVal();\r\n\t            var topVal = screen.getTopVal();\r\n\t            var needToStickOnTop = hasStickMode && val > topVal;\r\n\t            var needToStickOnBottom = hasStickMode && val < bottomVal;\r\n\t            var centerYVal = screen.getCenterYVal();\r\n\t            this.object3D.position.x = screen.getLeft();\r\n\t            if (needToStickOnTop) {\r\n\t                this.object3D.position.y = screen.getTop();\r\n\t            }\r\n\t            else if (needToStickOnBottom) {\r\n\t                this.object3D.position.y = screen.getBottom();\r\n\t            }\r\n\t            else {\r\n\t                this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\r\n\t            }\r\n\t            lineGeometry.vertices[1].setX(width);\r\n\t            var indicatorPosY = val > centerYVal ? -35 : 10;\r\n\t            this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\r\n\t        }\r\n\t        lineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.typeName = 'simple';\r\n\t    return AxisMarkWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(21));\r\n\t__export(__webpack_require__(22));\r\n\t__export(__webpack_require__(25));\r\n\t__export(__webpack_require__(26));\r\n\t__export(__webpack_require__(24));\r\n\t// TODO: remove\r\n\t__export(__webpack_require__(29));\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ThreeChart.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 05ad54f1cdc94df18601\n **/","export * from './src/index';\n\n\n/** WEBPACK FOOTER **\n ** ./index.ts\n **/","export * from './ChartView';\nexport * from './interfaces';\nexport * from './AxisMarks';\nexport * from './Screen';\nexport * from './Chart';\nexport * from './Trend';\nexport * from './TrendSegmentsManager';\nexport * from './TrendsManager';\nexport * from './Utils';\nexport * from './Widget';\nexport * from './Plugin';\nexport * from './Color';\nexport * from './widgets';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.ts\n **/","// deps must be always on top\nimport { ChartPlugin } from './Plugin';\nrequire('./deps/deps');\n\nimport { Trend } from \"./Trend\";\nimport Vector3 = THREE.Vector3;\nimport PerspectiveCamera = THREE.PerspectiveCamera;\nimport Scene = THREE.Scene;\nimport Renderer = THREE.Renderer;\nimport WebGLRenderer = THREE.WebGLRenderer;\nimport Object3D = THREE.Object3D;\nimport { Chart, IChartState } from \"./Chart\";\nimport { ChartWidget, IChartWidgetConstructor } from \"./Widget\";\nimport { Utils } from \"./Utils\";\nimport { IScreenTransformOptions } from \"./Screen\";\nimport { AxisWidget } from \"./widgets/AxisWidget\";\nimport { GridWidget } from \"./widgets/GridWidget\";\nimport { TrendsGradientWidget } from \"./widgets/TrendsGradientWidget\";\nimport { TrendsLineWidget } from \"./widgets/TrendsLineWidget\";\nimport { TrendsCandlesWidget } from './widgets/TrendsCandleWidget';\nimport { ResizeSensor, ResizeSensorType } from './deps';\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {ChartColor} from \"./Color\";\nimport { AxisMarksWidget } from \"./widgets/AxisMarksWidget\";\n\n\nexport class ChartBlankView {\n\n\tstatic devicePixelRatio = window.devicePixelRatio;\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [];\n\tstatic renderers: {[rendererName: string]: any} = {\n\t\tCanvasRenderer: (THREE as any).CanvasRenderer,\n\t\tWebGLRenderer: THREE.WebGLRenderer\n\t};\n\n\tchart: Chart;\n\tisStopped: boolean;\n\tisDestroyed: boolean;\n\tprivate $container: Element;\n\tprivate $el: HTMLElement;\n\tprivate renderer: Renderer;\n\tprivate scene: Scene;\n\tprivate camera: PerspectiveCamera;\n\tprivate cameraInitialPosition: Vector3;\n\tprivate widgets: Array<ChartWidget> = [];\n\tprivate stats: Stats;\n\tprivate zoomThrottled: Function;\n\tprivate unsubscribers: Function[];\n\tprivate resizeSensor: ResizeSensorType;\n\tprivate pluginsAndWidgets: Array<ChartPlugin | ChartWidget>;\n\n\tconstructor(state: IChartState, $container: Element, pluginsAndWidgets: Array<ChartPlugin | ChartWidget> = []) {\n\n\t\tif (!THREE || !THREE.REVISION) Utils.error('three.js not found');\n\n\t\tif (!$container) {\n\t\t\tUtils.error('$el must be set');\n\t\t}\n\t\t// calculate state size\n\t\tlet style = getComputedStyle($container);\n\t\tstate.width = parseInt(style.width);\n\t\tstate.height = parseInt(style.height);\n\n\t\tlet plugins = pluginsAndWidgets.filter(pluginOrWidget => pluginOrWidget instanceof ChartPlugin) as ChartPlugin[];\n\n\t\tthis.chart = new Chart(state, plugins);\n\t\tthis.pluginsAndWidgets = pluginsAndWidgets;\n\t\tthis.zoomThrottled = Utils.throttle((zoomValue: number, origin: number) => this.zoom(zoomValue, origin), 200);\n\t\tthis.$container = $container;\n\t\tthis.init($container);\n\t};\n\n\tprivate init($container: Element) {\n\t\tvar chart = this.chart;\n\t\tvar {width: w, height: h, showStats, autoRender} = chart.state;\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.isStopped = !autoRender.enabled;\n\n\t\tvar renderer = this.renderer = new (ChartView.renderers[this.chart.state.renderer] as any)({\n\t\t\tantialias: true,\n\t\t\talpha: true\n\t\t});\n\t\tlet backgroundColor = new ChartColor(chart.state.backgroundColor);\n\t\trenderer.setSize(w, h);\n\t\trenderer.setPixelRatio(ChartView.devicePixelRatio);\n\t\trenderer.setClearColor(backgroundColor.value, backgroundColor.a);\n\t\t$container.appendChild(renderer.domElement);\n\t\tthis.$el = renderer.domElement;\n\t\tthis.$el.style.display = 'block';\n\n\t\tif (showStats) {\n\t\t\tthis.stats = new Stats();\n\t\t\t$container.appendChild(this.stats.domElement);\n\t\t}\n\n\t\tthis.setupCamera();\n\t\tthis.initWidgets();\n\t\tthis.bindEvents();\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\n\t */\n\tprivate initWidgets() {\n\t\tlet preinstalledWidgetsClasses = (this.constructor as typeof ChartView).preinstalledWidgets;\n\t\tlet customWidgets: ChartWidget[] = [];\n\n\t\tthis.pluginsAndWidgets.forEach(pluginOrWidget => {\n\t\t\tif (pluginOrWidget instanceof ChartWidget) {\n\t\t\t\tcustomWidgets.push(pluginOrWidget);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!(pluginOrWidget instanceof ChartPlugin)) return;\n\t\t\tlet pluginWidgetClasses = (pluginOrWidget.constructor as typeof ChartPlugin).providedWidgets;\n\t\t\tpreinstalledWidgetsClasses.push(...pluginWidgetClasses);\n\t\t});\n\n\t\tthis.widgets = customWidgets.concat(\n\t\t\tpreinstalledWidgetsClasses.map((WidgetClass: IChartWidgetConstructor) => new WidgetClass())\n\t\t);\n\n\t\tthis.widgets.forEach(widget => {\n\t\t\twidget.setupChart(this.chart);\n\t\t\twidget.onReadyHandler();\n\t\t\tthis.scene.add(widget.getObject3D());\n\t\t});\n\t}\n\n\tprivate renderLoop() {\n\t\tif (this.isDestroyed) return;\n\t\tthis.stats && this.stats.begin();\n\t\tthis.render();\n\t\tif (this.isStopped) return;\n\t\tvar fpsLimit = this.chart.state.autoRender.fps;\n\n\t\tif (fpsLimit) {\n\t\t\tlet delay = 1000 / fpsLimit;\n\t\t\tsetTimeout(() => requestAnimationFrame(() => this.renderLoop()), delay);\n\t\t} else {\n\t\t\trequestAnimationFrame(() => this.renderLoop());\n\t\t}\n\t\tthis.stats && this.stats.end();\n\t}\n\n\trender() {\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n\n\tstop() {\n\t\tthis.isStopped = true;\n\t}\n\n\trun() {\n\t\tthis.isStopped = false;\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * call to destroy state an init garbage collection\n\t */\n\tdestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.stop();\n\t\tthis.chart.destroy();\n\t\tthis.unbindEvents();\n\t\t// WARNING! undocumented method for free webgl context\n\t\ttry {\n\t\t\t(this.renderer as any).forceContextLoss();\n\t\t} catch (wtf) {\n\t\t\t// sometimes with many state instances forceContextLoss not working\n\t\t}\n\t\t(this.renderer as any).context = null;\n\t\tthis.renderer.domElement = null;\n\t\tthis.renderer = null;\n\t}\n\n\tgetState(): IChartState {\n\t\treturn this.chart.state\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.getTrend\n\t */\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.chart.getTrend(trendName);\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.setState\n\t */\n\tsetState(state: IChartState) {\n\t\treturn this.chart.setState(state);\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar $el = this.$el;\n\t\tif (this.chart.state.controls.enabled) {\n\t\t\t$el.addEventListener('mousewheel', (ev: MouseWheelEvent) => {\n\t\t\t\tthis.onMouseWheel(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousemove', (ev: MouseEvent) => {\n\t\t\t\tthis.onMouseMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousedown', (ev: MouseEvent) => this.onMouseDown(ev));\n\t\t\t$el.addEventListener('mouseup', (ev: MouseEvent) => this.onMouseUp(ev));\n\t\t\t$el.addEventListener('touchmove', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('touchend', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchEnd(ev)\n\t\t\t});\n\t\t}\n\t\tif (this.chart.state.autoResize) {\n\t\t\tthis.resizeSensor = new ResizeSensor(this.$container, () => {\n\t\t\t\tthis.onChartContainerResizeHandler(this.$container.clientWidth, this.$container.clientHeight);\n\t\t\t});\n\t\t}\n\n\t\tthis.unsubscribers = [\n\t\t\tthis.chart.onTrendsChange(() => this.autoscroll()),\n\t\t\tthis.chart.screen.onTransformationFrame((options) => this.onScreenTransformHandler(options)),\n\t\t\tthis.chart.onResize((options) => this.onChartResize())\n\t\t];\n\t}\n\n\tprivate unbindEvents() {\n\t\t// TODO: unbind events correctly\n\t\ttry {\n\t\t\tthis.resizeSensor && this.resizeSensor.detach();\n\t\t} catch (e) {\n\t\t\t// ups.. somebody already removed resizeSensor childNode\n\t\t\t// detected in angular2 apps\n\t\t}\n\t\tthis.$el.remove();\n\t\tthis.unsubscribers.forEach(unsubscribe => unsubscribe());\n\t}\n\n\tprivate setupCamera() {\n\t\tlet camSettings = this.chart.screen.getCameraSettings();\n\t\tif (!this.camera) {\n\t\t\tthis.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t\t\tthis.scene.add(this.camera);\n\t\t} else {\n\t\t\tthis.camera.fov = camSettings.FOV;\n\t\t\tthis.camera.aspect = camSettings.aspect;\n\t\t\tthis.camera.far = camSettings.far;\n\t\t\tthis.camera.near = camSettings.near;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\t\tthis.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t\tthis.cameraInitialPosition = this.camera.position.clone();\n\t\tthis.onScreenTransformHandler(this.chart.screen.options);\n\t}\n\n\tprivate onScreenTransformHandler(options: IScreenTransformOptions) {\n\t\tif (options.scrollX != void 0) {\n\t\t\tlet scrollX = this.cameraInitialPosition.x + options.scrollX;\n\t\t\t// scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setX(scrollX);\n\t\t}\n\t\tif (options.scrollY != void 0) {\n\t\t\tlet scrollY = this.cameraInitialPosition.y + options.scrollY;\n\t\t\t// scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setY(scrollY);\n\t\t}\n\t}\n\n\tprivate autoscroll() {\n\t\tvar state = this.chart;\n\t\tif (!state.state.autoScroll) return;\n\t\tvar oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\n\t\tvar trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\n\t\tif (trendsMaxXDelta > 0) {\n\t\t\tvar maxVisibleX = this.chart.screen.getScreenRightVal();\n\t\t\tvar paddingRightX = this.chart.getPaddingRight();\n\t\t\tvar currentScroll = state.state.xAxis.range.scroll;\n\t\t\tif (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar scrollDelta = trendsMaxXDelta;\n\t\t\tthis.setState({xAxis: {range: {scroll: currentScroll + scrollDelta}}});\n\t\t}\n\t}\n\n\tprivate onScrollStop() {\n\t\t// var tendsXMax = this.state.state.computedData.trends.maxX;\n\t\t// var paddingRightX = this.state.getPaddingRight();\n\t\t// if (tendsXMax < paddingRightX) {\n\t\t// \tthis.state.scrollToEnd();\n\t\t// }\n\t}\n\n\tprivate onMouseDown(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t}\n\n\tprivate onMouseUp(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onMouseMove(ev: MouseEvent) {\n\t\tif (this.chart.state.cursor.dragMode) {\n\t\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t\t}\n\t}\n\n\tprivate onMouseWheel(ev: MouseWheelEvent) {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t\tlet zoomOrigin = ev.layerX / this.chart.state.width;\n\t\tlet zoomValue = 1 + ev.wheelDeltaY * 0.001;\n\t\tthis.zoom(zoomValue, zoomOrigin);\n\t}\n\n\tprivate onTouchMove(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY}});\n\t}\n\n\tprivate onTouchEnd(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onChartContainerResizeHandler(width: number, height: number) {\n\t\tthis.setState({width, height});\n\t}\n\n\tprivate onChartResize() {\n\t\tlet {width, height} = this.chart.state;\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.setupCamera();\n\t}\n\n\tprivate zoom(zoomValue: number, zoomOrigin: number) {\n\t\tconst MAX_ZOOM_VALUE = 1.5;\n\t\tconst MIN_ZOOM_VALUE = 0.7;\n\t\tzoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t\tzoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t\tlet autoScrollIsEnabled = this.chart.state.autoScroll;\n\t\tif (autoScrollIsEnabled) this.chart.setState({autoScroll: false});\n\t\tthis.chart.zoom(zoomValue, zoomOrigin).then(() => {\n\t\t\tif (autoScrollIsEnabled) this.setState({autoScroll: true});\n\t\t});\n\t}\n\n\n}\n\n\nexport class ChartView extends ChartBlankView {\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [\n\t\tTrendsLineWidget,\n\t\tTrendsCandlesWidget,\n\t\tAxisWidget,\n\t\tGridWidget,\n\t\tTrendsGradientWidget,\n\t\t// TODO: remove AxisMarksWidget from preinstalled widgets\n\t\tAxisMarksWidget\n\t]\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ChartView.ts\n **/","import { Chart, IChartState } from \"./Chart\";\nimport { Utils } from './Utils';\nimport { EventEmitter } from './EventEmmiter';\nimport { ChartWidget } from './Widget';\n\nexport interface IChartPluginState {\n}\n\nexport interface IChartPluginConfig {\n\tinstallPluginWidgets?: boolean;\n}\n\nexport const DEFAULT_CONFIG: IChartPluginConfig = {\n\tinstallPluginWidgets: true\n};\n\n/**\n * base class for all plugins\n * NAME is mandatory\n */\nexport abstract class ChartPlugin {\n\tstatic NAME: string = '';\n\tstatic providedWidgets: typeof ChartWidget[] = [];\n\n\tinitialState: IChartPluginState;\n\tconfig: IChartPluginConfig;\n\tname: string;\n\tprotected chart: Chart;\n\tprotected unsubscribers: Function[] = [];\n\tprotected ee: EventEmitter;\n\n\tconstructor (options?: IChartPluginState, config: IChartPluginConfig = {}) {\n\t\tthis.initialState = options;\n\t\tthis.config = Utils.deepMerge(DEFAULT_CONFIG, config);\n\t\tthis.name = (this.constructor as typeof ChartPlugin).NAME;\n\t\tif (!this.name) Utils.error('Unnamed plugin detected');\n\t}\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvent(\n\t\t\tthis.chart.onInitialStateApplied(initialState => this.onInitialStateAppliedHandler(initialState)),\n\t\t\tthis.chart.onReady(() => this.onReadyHandler()),\n\t\t\tthis.chart.onDestroy(() => this.onDestroyHandler()),\n\t\t\tthis.chart.onPluginsStateChange(changedPluginsStates => changedPluginsStates[this.name] && this.onStateChanged(changedPluginsStates[this.name]))\n\t\t)\n\t}\n\n\tgetOptions(): IChartPluginState {\n\t\treturn this.chart.state.pluginsState[this.name];\n\t}\n\n\tprotected onInitialStateAppliedHandler(initialState: IChartState) {\n\t}\n\n\tprotected onReadyHandler() {\n\t}\n\n\tprotected onStateChanged(changedState: IChartPluginState) {\n\t}\n\n\tprotected onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t}\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unsubscribers: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunsubscribers.push(args[0] as Function);\n\t\t} else {\n\t\t\tunsubscribers.push(...args as Function[]);\n\t\t}\n\t\tthis.unsubscribers.push(...unsubscribers);\n\t}\n\n\n\tprotected unbindEvents() {\n\t\tthis.unsubscribers.forEach(unsubscriber => unsubscriber());\n\t\tthis.unsubscribers.length = 0;\n\t}\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Plugin.ts\n **/","import Texture = THREE.Texture;\nimport Color = THREE.Color;\nimport { TIteralable, IIteralable } from \"./interfaces\";\nimport { isPlainObject } from './deps/deps';\n\nfunction deepmerge(target: any, src: any, mergeArrays = true) {\n\tvar array = Array.isArray(src);\n\tvar dst: any = array && [] || {};\n\n\tif (array) {\n\t\ttarget = target || [];\n\t\tif (mergeArrays) {\n\t\t\tdst = dst.concat(target);\n\t\t}\n\t\tsrc.forEach(function(e: any, i: any) {\n\t\t\tif (typeof dst[i] === 'undefined') {\n\t\t\t\tdst[i] = e;\n\t\t\t} else if (typeof e === 'object') {\n\t\t\t\tdst[i] = deepmerge(target[i], e, mergeArrays);\n\t\t\t} else {\n\t\t\t\tif (target.indexOf(e) === -1) {\n\t\t\t\t\tdst.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tif (target && typeof target === 'object') {\n\t\t\tObject.keys(target).forEach(function (key) {\n\t\t\t\tdst[key] = target[key];\n\t\t\t})\n\t\t}\n\t\tObject.keys(src).forEach(function (key) {\n\t\t\tif (typeof src[key] !== 'object' || !src[key]) {\n\t\t\t\tdst[key] = src[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t} else {\n\t\t\t\t\tdst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn dst;\n}\n\n\n\nexport declare type TUid = number;\n\n/**\n * project utils static class\n */\nexport class Utils {\n\n\tprivate static currentId: TUid = 1;\n\n\t/**\n\t * deepMerge based on https://www.npmjs.com/package/deepmerge\n\t */\n\tstatic deepMerge<T> (obj1: T, obj2: T, mergeArrays?: boolean) {\n\t\treturn deepmerge(obj1, obj2, mergeArrays) as T;\n\t}\n\n\t/**\n\t * deepCopy based on JSON.stringify function\n\t * @deprecated\n\t */\n\tstatic deepCopy<T> (obj: T) {\n\t\t// TODO: use deepMerge function to copy\n\t\treturn JSON.parse(JSON.stringify(obj)) as T;\n\t}\n\n\t/**\n\t *\n\t * @example\n\t * // returns \"000015\"\n\t * Utils.toFixed(15, 6);\n\t */\n\tstatic toFixed(num: number, digitsCount: number): string {\n\t\tvar maxDigits = 15;\n\t\tvar result = '';\n\t\tvar intVal = Math.floor(num);\n\t\tvar intStr = intVal.toString();\n\t\tvar lengthDiff = digitsCount - intStr.length;\n\t\tif (lengthDiff > 0 ) {\n\t\t\tresult = (<any>'0').repeat(lengthDiff) + intStr;\n\t\t} else {\n\t\t\tresult = intStr;\n\t\t}\n\t\tvar afterPointDigitsCount = maxDigits - intStr.length;\n\t\tvar afterPointStr = num.toString().split('.')[1];\n\t\tif (afterPointStr) {\n\t\t\tresult += '.' + afterPointStr.substr(0, afterPointDigitsCount);\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic bindEvent() {\n\n\t}\n\n\t/**\n\t * generate texture from canvas context\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture {\n\t\tvar canvas: HTMLCanvasElement = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tvar ctx = canvas.getContext('2d');\n\t\tfn(ctx);\n\t\tvar texture = new THREE.Texture(canvas);\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * generate texture from canvas context with NearestFilter\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createPixelPerfectTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture{\n\t\tvar texture = this.createTexture(width, height, fn);\n\t\t// texture.magFilter = THREE.NearestFilter;\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic error(msg: string) {\n\t\tconsole.error('Chart error: ' + msg);\n\t\tthrow 'Chart: ' + msg;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic warn(msg: string) {\n\t\tconsole.warn('Chart warning: ' + msg);\n\t}\n\n\t/**\n\t * @returns new unique id\n\t */\n\tstatic getUid(): TUid {\n\t\treturn this.currentId++;\n\t}\n\n\t/**\n\t * @returns distance between numbers\n\t */\n\tstatic getDistance(num1: number, num2: number) {\n\t\treturn Math.max(num1, num2) - Math.min(num1, num2);\n\t}\n\n\tstatic binarySearchClosestInd(arr: IIteralable[], num: number, key: string): number {\n\t\tvar mid: number;\n\t\tvar lo = 0;\n\t\tvar hi = arr.length - 1;\n\t\twhile (hi - lo > 1) {\n\t\t\tmid = Math.floor ((lo + hi) / 2);\n\t\t\tif (arr[mid][key] < num) {\n\t\t\t\tlo = mid;\n\t\t\t} else {\n\t\t\t\thi = mid;\n\t\t\t}\n\t\t}\n\t\tif (num - arr[lo][key] <= arr[hi][key] - num) {\n\t\t\treturn lo;\n\t\t}\n\t\treturn hi;\n\t}\n\t\n\tstatic binarySearchClosest<ArrayItem>(arr: ArrayItem[], num: number, key: string): ArrayItem {\n\t\tlet ind = this.binarySearchClosestInd(arr, num, key);\n\t\treturn arr[ind];\n\t}\n\n\n\tstatic rectsIntersect(r1: number[], r2: number[]) {\n\t\tlet [left1, top1, width1, height1] = r1;\n\t\tlet [left2, top2, width2, height2] = r2;\n\t\tlet [right1, right2, bottom1, bottom2] = [left1 + width1, left2 + width2, top1 + height1, top2 + height2];\n\t\treturn !(left2 > right1 ||\n\t\t\tright2 < left1 ||\n\t\t\ttop2 > bottom1 ||\n\t\t\tbottom2 < top1\n\t\t);\n\t}\n\n\n\tstatic throttle(func: Function, ms: number) {\n\n\t\tvar isThrottled = false,\n\t\t\tsavedArgs: any,\n\t\t\tsavedThis: any;\n\n\t\tfunction wrapper() {\n\n\t\t\tif (isThrottled) { // (2)\n\t\t\t\tsavedArgs = arguments;\n\t\t\t\tsavedThis = this;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunc.apply(this, arguments); // (1)\n\n\t\t\tisThrottled = true;\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tisThrottled = false; // (3)\n\t\t\t\tif (savedArgs) {\n\t\t\t\t\twrapper.apply(savedThis, savedArgs);\n\t\t\t\t\tsavedArgs = savedThis = null;\n\t\t\t\t}\n\t\t\t}, ms);\n\t\t}\n\n\t\treturn wrapper;\n\t}\n\n\tstatic msToTimeString(timestamp: number) {\n\t\tvar h = Math.floor(timestamp / 360000);\n\t\tvar m =  Math.floor(timestamp / 60000);\n\t\tvar s =  Math.floor(timestamp / 1000);\n\t\treturn h + ':' + m + ':' + s;\n\t}\n\t\n\tstatic getRandomItem<T>(arr: Array<T>): T {\n\t\tvar ind = Math.floor(Math.random() * arr.length);\n\t\treturn arr[ind];\n\t}\n\n\tstatic copyProps(srcObject: TIteralable, dstObject: TIteralable, props: TIteralable, excludeProps: string[] = []) {\n\t\tfor (var key in props) {\n\t\t\tif (excludeProps.indexOf(key) !== -1) continue;\n\t\t\tif (srcObject[key] == void 0) continue;\n\t\t\tif (isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t\t\t\tthis.copyProps(srcObject[key], dstObject[key], props[key])\n\t\t\t} else {\n\t\t\t\tdstObject[key] = this.deepCopy(srcObject[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Utils.ts\n **/","/// <reference path=\"./ResizeSensor.ts\" />\n\n// TODO: think about different bundles\n\nimport { ResizeSensorType } from './ResizeSensor';\n(<any>window).TweenLite = TweenMax;\n(<any>window).Stats = require('three/examples/js/libs/stats.min');\n\n// require('gsap/src/uncompressed/easing/EasePack.js');\n// require('three/examples/js/renderers/CanvasRenderer.js');\n// require('three/examples/js/renderers/Projector.js');\nexport const isPlainObject = require('is-plain-object') as Function;\nexport const EE2 = require('eventemitter2') as typeof EventEmitter2;\n\n\nexport { Promise } from '../polyfills/es6-promise';\n\nexport * from './ResizeSensor';\nexport const ResizeSensor = require('css-element-queries/src/ResizeSensor') as ResizeSensorType;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/deps.ts\n **/","// stats.js - http://github.com/mrdoob/stats.js\nvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\nif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\nStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\nv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/examples/js/libs/stats.min.js\n ** module id = 6\n ** module chunks = 0\n **/","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nmodule.exports = function isPlainObject(o) {\n  var ctor,prot;\n  \n  if (isObjectObject(o) === false) return false;\n  \n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n  \n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n  \n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n  \n  // Most likely a plain Object\n  return true;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/is-plain-object/index.js\n ** module id = 7\n ** module chunks = 0\n **/","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isObject(val) {\n  return val != null && typeof val === 'object'\n    && !Array.isArray(val);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/isobject/index.js\n ** module id = 8\n ** module chunks = 0\n **/","/*!\n * EventEmitter2\n * https://github.com/hij1nx/EventEmitter2\n *\n * Copyright (c) 2013 hij1nx\n * Licensed under the MIT license.\n */\n;!function(undefined) {\n\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = {};\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n\n      this._conf = conf;\n\n      conf.delimiter && (this.delimiter = conf.delimiter);\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this.newListener = conf.newListener);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this.newListener = false;\n    configure.call(this, conf);\n  }\n\n  //\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return [];\n    }\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n    if (i === typeLength && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return [tree];\n      } else {\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n        return [tree];\n      }\n    }\n\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (currentType === '*') {\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n          }\n        }\n        return listeners;\n      } else if(currentType === '**') {\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n        if(endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n        }\n\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            if(branch === '*' || branch === '**') {\n              if(tree[branch]._listeners && !endReached) {\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n              }\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            } else if(branch === nextType) {\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            }\n          }\n        }\n        return listeners;\n      }\n\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n    }\n\n    xTree = tree['*'];\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i+1);\n    }\n\n    xxTree = tree['**'];\n    if(xxTree) {\n      if(i < typeLength) {\n        if(xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength);\n        }\n\n        // Build arrays of matching next branches and others.\n        for(branch in xxTree) {\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n            if(branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\n            } else if(branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n            }\n          }\n        }\n      } else if(xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength);\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener) {\n\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n    //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n    for(var i = 0, len = type.length; i+1 < len; i++) {\n      if(type[i] === '**' && type[i+1] === '**') {\n        return;\n      }\n    }\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n\n      if (!tree[name]) {\n        tree[name] = {};\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        }\n        else if(typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        }\n        else if (isArray(tree._listeners)) {\n\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n\n            var m = defaultMaxListeners;\n\n            if (typeof this._events.maxListeners !== 'undefined') {\n              m = this._events.maxListeners;\n            }\n\n            if (m > 0 && tree._listeners.length > m) {\n\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' +\n                            'leak detected. %d listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit.',\n                            tree._listeners.length);\n              console.trace();\n            }\n          }\n        }\n        return true;\n      }\n      name = type.shift();\n    }\n    return true;\n  }\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n    if (!this._conf) this._conf = {};\n    this._conf.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n\n    this.on(event, listener);\n\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function() {\n\n    this._events || init.call(this);\n\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) { return false; }\n    }\n\n    // Loop through the *_all* functions and invoke them.\n    if (this._all) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        this._all[i].apply(this, args);\n      }\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n\n      if (!this._all &&\n        !this._events.error &&\n        !(this.wildcard && this.listenerTree.error)) {\n\n        if (arguments[1] instanceof Error) {\n          throw arguments[1]; // Unhandled 'error' event\n        } else {\n          throw new Error(\"Uncaught, unspecified 'error' event.\");\n        }\n        return false;\n      }\n    }\n\n    var handler;\n\n    if(this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    }\n    else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      if (arguments.length === 1) {\n        handler.call(this);\n      }\n      else if (arguments.length > 1)\n        switch (arguments.length) {\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n          // slower\n          default:\n            var l = arguments.length;\n            var args = new Array(l - 1);\n            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n            handler.apply(this, args);\n        }\n      return true;\n    }\n    else if (handler) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        this.event = type;\n        listeners[i].apply(this, args);\n      }\n      return (listeners.length > 0) || !!this._all;\n    }\n    else {\n      return !!this._all;\n    }\n\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n\n    if (typeof type === 'function') {\n      this.onAny(type);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n    this._events || init.call(this);\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    this.emit('newListener', type, listener);\n\n    if(this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    }\n    else if(typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n    else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n      // Check for listener leak\n      if (!this._events[type].warned) {\n\n        var m = defaultMaxListeners;\n\n        if (typeof this._events.maxListeners !== 'undefined') {\n          m = this._events.maxListeners;\n        }\n\n        if (m > 0 && this._events[type].length > m) {\n\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' +\n                        'leak detected. %d listeners added. ' +\n                        'Use emitter.setMaxListeners() to increase limit.',\n                        this._events[type].length);\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if(!this._all) {\n      this._all = [];\n    }\n\n    // Add the function to the event listener collection.\n    this._all.push(fn);\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,leafs=[];\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n    }\n    else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({_listeners:handlers});\n    }\n\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n      if (isArray(handlers)) {\n\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener ||\n            (handlers[i].listener && handlers[i].listener === listener) ||\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if(this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        }\n        else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if(this.wildcard) {\n            delete leaf._listeners;\n          }\n          else {\n            delete this._events[type];\n          }\n        }\n        return this;\n      }\n      else if (handlers === listener ||\n        (handlers.listener && handlers.listener === listener) ||\n        (handlers._origin && handlers._origin === listener)) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function(type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n        var leaf = leafs[iLeaf];\n        leaf._listeners = null;\n      }\n    }\n    else {\n      if (!this._events[type]) return this;\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function(type) {\n    if(this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n\n    if (!this._events[type]) this._events[type] = [];\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  if (typeof define === 'function' && define.amd) {\n     // AMD. Register as an anonymous module.\n    define(function() {\n      return EventEmitter;\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    exports.EventEmitter2 = EventEmitter;\n  }\n  else {\n    // Browser global.\n    window.EventEmitter2 = EventEmitter;\n  }\n}();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/eventemitter2/lib/eventemitter2.js\n ** module id = 9\n ** module chunks = 0\n **/","module.exports = {Promise: window['Promise']}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/polyfills/es6-promise.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var shrinkChild = shrink.childNodes[0];\n\n            var lastWidth, lastHeight;\n\n            var reset = function() {\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n                expand.scrollLeft = expand.scrollWidth;\n                expand.scrollTop = expand.scrollHeight;\n                shrink.scrollLeft = shrink.scrollWidth;\n                shrink.scrollTop = shrink.scrollHeight;\n                lastWidth = element.offsetWidth;\n                lastHeight = element.offsetHeight;\n            };\n\n            reset();\n\n            var changed = function() {\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            var onScroll = function() {\n              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                  changed();\n              }\n              reset();\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        var elementType = Object.prototype.toString.call(element);\n        var isCollectionTyped = ('[object Array]' === elementType\n            || ('[object NodeList]' === elementType)\n            || ('[object HTMLCollection]' === elementType)\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n        );\n\n        if (isCollectionTyped) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n\n        this.detach = function() {\n            if (isCollectionTyped) {\n                var i = 0, j = element.length;\n                for (; i < j; i++) {\n                    ResizeSensor.detach(element[i]);\n                }\n            } else {\n                ResizeSensor.detach(element);\n            }\n        };\n    };\n\n    ResizeSensor.detach = function(element) {\n        if (element.resizeSensor) {\n            element.removeChild(element.resizeSensor);\n            delete element.resizeSensor;\n            delete element.resizedAttached;\n        }\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ResizeSensor;\n    }\n    else {\n        window.ResizeSensor = ResizeSensor;\n    }\n\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-element-queries/src/ResizeSensor.js\n ** module id = 11\n ** module chunks = 0\n **/","import {EE2} from './deps/deps';\n\n/**\n * this class uses as proxy for EventEmitter2\n */\nexport class EventEmitter {\n\tprivate ee: EventEmitter2;\n\tconstructor() {\n\t\tthis.ee = new EE2();\n\t}\n\temit(eventName: string, ...args: any[]) {\n\t\tthis.ee.emit(eventName, ...args)\n\t}\n\ton(eventName: string, callback: Function) {\n\t\treturn this.ee.on(eventName, callback)\n\t}\n\toff(eventName: string, callback: Function) {\n\t\treturn this.ee.off(eventName, callback);\n\t}\n\tsubscribe(eventName: string, callback: Function): Function {\n\t\tthis.on(eventName, callback);\n\t\treturn () => this.off(eventName, callback);\n\t}\n\tsetMaxListeners(listenersCount: number) {\n\t\tthis.ee.setMaxListeners(listenersCount);\n\t}\n\tremoveAllListeners(eventName?: string) {\n\t\tthis.ee.removeAllListeners(eventName);\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventEmmiter.ts\n **/","import Vector3 = THREE.Vector3;\nimport { ITrendOptions, Trend, ITrendData, TREND_TYPE } from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Utils} from './Utils';\nimport {TrendsManager, ITrendsOptions} from \"./TrendsManager\";\nimport {Screen} from \"./Screen\";\nimport {AxisMarks} from \"./AxisMarks\";\nimport {\n\tAXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions, IAnimationsOptions, AXIS_RANGE_TYPE\n} from \"./interfaces\";\nimport { Promise } from './deps/deps';\nimport { ChartPlugin } from './Plugin';\nimport {TChartColor} from \"./Color\";\n\n\ninterface IRecalculatedStateResult {\n\tchangedProps: IChartState,\n\tpatch: IChartState\n}\n\nconst CHART_STATE_EVENTS = {\n\tINITIAL_STATE_APPLIED: 'initialStateApplied',\n\tREADY: 'ready',\n\tDESTROY: 'destroy',\n\tCHANGE: 'change',\n\tTREND_CHANGE: 'trendChange',\n\tTRENDS_CHANGE: 'trendsChange',\n\tZOOM: 'zoom',\n\tRESIZE: 'resize',\n\tSCROLL: 'scroll',\n\tSCROLL_STOP: 'scrollStop',\n\tPLUGINS_STATE_CHANGED: 'pluginsStateChanged'\n};\n\n/**\n * readonly computed state state\n * calculated after recalculateState() call\n * contains cached values\n */\nexport interface IChartStateComputedData {\n\ttrends?: {\n\t\tmaxXVal: number,\n\t\tminXVal: number\n\t}\n}\n\nexport interface IChartState {\n\tprevState?: IChartState,\n\twidth?: number;\n\theight?: number;\n\tzoom?: number;\n\txAxis?: IAxisOptions,\n\tyAxis?: IAxisOptions,\n\tanimations?: IAnimationsOptions,\n\ttrends?: ITrendsOptions,\n\ttrendDefaultState?: ITrendOptions;\n\tcursor?: {\n\t\tdragMode?: boolean,\n\t\tx?: number,\n\t\ty?: number\n\t},\n\n\t/**\n\t * use fps = 0 for no limits\n\t */\n\tautoRender?: {enabled?: boolean, fps?: number};\n\n\t/**\n\t * by default 'WebGLRenderer'\n\t * also available 'CanvasRenderer'\n\t */\n\trenderer?: 'WebGLRenderer' | 'CanvasRenderer';\n\tfont?: {s?: string, m?: string, l?:string}\n\n\n\t/**\n\t * buffer size for displayed segments\n\t * used by widgets\n\t */\n\tmaxVisibleSegments?: number;\n\tautoResize?: boolean;\n\tcontrols?: {enabled: boolean};\n\tautoScroll?: boolean;\n\n\t//TODO: exclude stats in plugin\n\tshowStats?: boolean;\n\tbackgroundColor?: TChartColor;\n\tcomputedData?: IChartStateComputedData,\n\tpluginsState?: {[pluginName: string]: any};\n\teventEmitterMaxListeners?: number;\n}\n\nconst LIGHT_BLUE = '#5273bd';\n\n/**\n *  all state changes caused only by Chart.setState method\n */\nexport class Chart {\n\n\tstate: IChartState = {\n\t\tprevState: {},\n\t\tzoom: 0,\n\t\txAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.ALL,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tscroll: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 0, end: 5},\n\t\t\t\tmargin: {start: 0, end: 5}\n\t\t\t},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tgrid: {enabled: true, minSizePx:  100, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tautoScroll: true,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tyAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.RELATIVE_END,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 5, end: 5},\n\t\t\t\tmargin: {start: 5, end: 5},\n\t\t\t},\n\t\t\tgrid: {enabled: true, minSizePx:  50, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tanimations: {\n\t\t\tenabled: true,\n\t\t\ttrendChangeSpeed: 0.5,\n\t\t\ttrendChangeEase: void 0,\n\t\t\tzoomSpeed: 0.25,\n\t\t\tzoomEase:  void 0,\n\t\t\tscrollSpeed: 0.5,\n\t\t\tscrollEase: Linear.easeNone,\n\t\t\tautoScrollSpeed: 1,\n\t\t\tautoScrollEase: Linear.easeNone,\n\t\t},\n\t\tautoRender: {enabled: true, fps: 0},\n\t\tautoResize: true,\n\t\trenderer: 'WebGLRenderer',\n\t\tautoScroll: true,\n\t\tcontrols: {enabled: true},\n\t\ttrendDefaultState: {\n\t\t\tenabled: true,\n\t\t\ttype: TREND_TYPE.LINE,\n\t\t\tdata: [],\n\t\t\tmaxSegmentLength: 1000,\n\t\t\tlineWidth: 2,\n\t\t\tlineColor: 0xFFFFFF,\n\t\t\thasBackground: true,\n\t\t\tbackgroundColor: 'rgba(#FFFFFF, 0.07)',\n\t\t\thasBeacon: false,\n\t\t\tsettingsForTypes: {\n\t\t\t\tCANDLE: {\n\t\t\t\t\tminSegmentLengthInPx: 20,\n\t\t\t\t\tmaxSegmentLengthInPx: 40,\n\t\t\t\t},\n\t\t\t\tLINE: {\n\t\t\t\t\tminSegmentLengthInPx: 2,\n\t\t\t\t\tmaxSegmentLengthInPx: 10,\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcursor: {\n\t\t\tdragMode: false,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\tfont: {\n\t\t\ts: '11px Arial',\n\t\t\tm: '12px Arial',\n\t\t\tl: '13px Arial'\n\t\t},\n\t\tbackgroundColor: 0x000c2a,\n\t\tshowStats: false,\n\t\tpluginsState: {},\n\t\teventEmitterMaxListeners: 20,\n\t\tmaxVisibleSegments: 1280\n\t};\n\tplugins: {[pluginName: string]: ChartPlugin} = {};\n\ttrendsManager: TrendsManager;\n\tscreen: Screen;\n\txAxisMarks: AxisMarks;\n\tyAxisMarks: AxisMarks;\n\n\t/**\n\t * true then state was initialized and ready to use\n\t */\n\tisReady = false;\n\n\n\tprivate ee: EventEmitter;\n\n\tconstructor(\n\t\tinitialState: IChartState,\n\t\tplugins: ChartPlugin[] = []\n\t) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\n\n\t\tthis.state = Utils.deepMerge(this.state, initialState);\n\t\tthis.trendsManager = new TrendsManager(this, initialState);\n\t\tinitialState.trends = this.trendsManager.calculatedOptions;\n\t\tinitialState = this.installPlugins(plugins, initialState);\n\t\tthis.setState(initialState);\n\t\tthis.setState({computedData: this.getComputedData()});\n\t\tthis.savePrevState();\n\n\t\tthis.screen = new Screen(this);\n\t\tthis.xAxisMarks = new AxisMarks(this, AXIS_TYPE.X);\n\t\tthis.yAxisMarks = new AxisMarks(this, AXIS_TYPE.Y);\n\t\tthis.initListeners();\n\t\t\n\t\t// message to other modules that Chart.state is ready for use\n\t\tthis.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\n\t\t// message to other modules that Chart is ready for use\n\t\tthis.isReady = true;\n\t\tthis.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t}\n\n\t/**\n\t * destroy state, use ChartView.destroy to completely destroy state\n\t */\n\tdestroy() {\n\t\tthis.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t\tthis.ee.removeAllListeners();\n\t\tthis.state = {};\n\t}\n\n\tonDestroy(cb: Function) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t}\n\n\tonInitialStateApplied(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t}\n\n\tonReady(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t}\n\n\tonChange(cb: (changedProps: IChartState) => void ) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t}\n\n\tonTrendChange(cb: (trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t}\n\n\tonTrendsChange(cb: (trendsOptions: ITrendsOptions) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t}\n\n\tonScrollStop(cb: () => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t}\n\n\tonScroll(cb: (scrollOptions: {deltaX: number}) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t}\n\n\tonZoom(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t}\n\n\tonResize(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t}\n\n\tonPluginsStateChange(cb: (changedPluginsStates: {[pluginName: string]: Plugin}) => any) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t}\n\t\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.trendsManager.getTrend(trendName);\n\t}\n\n\tsetState(newState: IChartState, eventData?: any, silent = false) {\n\t\tlet stateData = this.state as {[key: string]: any};\n\t\tlet newStateObj = newState as {[key: string]: any};\n\n\t\tvar changedProps: {[key: string]: any} = {};\n\t\tfor (let key in newStateObj) {\n\t\t\tif (stateData[key] !== newStateObj[key]) {\n\t\t\t\tchangedProps[key] = newStateObj[key] as any;\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(changedProps as IChartState);\n\n\n\t\t// temporary remove trends state from newState by performance reasons\n\t\tlet trendsData: {[trendName: string]: ITrendData} = {};\n\t\tif (newState.trends) for (let trendName in newState.trends) {\n\t\t\tlet trendOptions = newState.trends[trendName];\n\t\t\tif (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t\t\tdelete trendOptions.data;\n\t\t}\n\t\tlet newStateContainsData = Object.keys(trendsData).length > 0;\n\t\t\n\n\t\tthis.state = Utils.deepMerge(this.state, newState, false);\n\n\t\t// return state to state\n\t\tif (newStateContainsData) for (let trendName in trendsData) {\n\t\t\tthis.state.trends[trendName].data = trendsData[trendName];\n\t\t}\n\n\t\tif (silent) return;\n\n\t\t// recalculate all dynamic state props\n\t\tvar recalculateResult = this.recalculateState(changedProps);\n\t\tchangedProps = recalculateResult.changedProps;\n\t\t\n\t\tthis.emitChangedStateEvents(changedProps, eventData);\n\n\t}\n\n\t/**\n\t * recalculate all computed state props\n\t */\n\tprivate recalculateState(changedProps?: IChartState): IRecalculatedStateResult {\n\t\tvar data = this.state;\n\t\tvar patch: IChartState = {};\n\t\tvar actualData = Utils.deepMerge({}, data);\n\n\t\t// recalculate scroll position by changed cursor options\n\t\tvar cursorOptions = changedProps.cursor;\n\t\tvar isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t\tif (isMouseDrag) {\n\t\t\tvar oldX = data.prevState.cursor.x;\n\t\t\tvar currentX =  cursorOptions.x;\n\t\t\tvar currentScroll = data.xAxis.range.scroll;\n\t\t\tvar deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t\t\tpatch.xAxis = {range: {scroll: currentScroll + deltaXVal}};\n\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: patch.xAxis} as IChartState)\n\t\t}\n\n\t\tlet chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\n\t\tlet scrollXChanged = false;\n\t\tlet needToRecalculateXAxis = (\n\t\t\tisMouseDrag ||\n\t\t\tchartWasResized ||\n\t\t\t(changedProps.xAxis && (changedProps.xAxis.range)) ||\n\t\t\tthis.state.xAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateXAxis) {\n\t\t\tlet xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t\t\tif (xAxisPatch) {\n\t\t\t\tscrollXChanged = true;\n\t\t\t\tpatch = Utils.deepMerge(patch, {xAxis: xAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: xAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\n\n\t\t// recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\n\t\tlet needToRecalculateYAxis = (\n\t\t\tchartWasResized ||\n\t\t\t(\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.RELATIVE_END ||\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.AUTO ||\n\t\t\t\tdata.yAxis.range.isMirrorMode\n\t\t\t) &&\n\t\t\t(scrollXChanged || changedProps.trends || changedProps.yAxis) ||\n\t\t\tthis.state.yAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateYAxis){\n\t\t\tlet yAxisPatch = this.recalculateYAxis(actualData);\n\t\t\tif (yAxisPatch) {\n\t\t\t\tpatch = Utils.deepMerge(patch, {yAxis: yAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {yAxis: yAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(patch);\n\t\tlet allChangedProps = Utils.deepMerge(changedProps, patch);\n\t\tpatch.computedData = this.getComputedData(allChangedProps);\n\t\tthis.savePrevState(patch);\n\t\tthis.state = Utils.deepMerge(this.state, patch);\n\t\treturn {changedProps: allChangedProps, patch: patch}\n\t}\n\n\tprivate getComputedData(changedProps?: IChartState): IChartStateComputedData {\n\t\tvar computeAll = !changedProps;\n\t\tvar computedData: IChartStateComputedData = {};\n\n\t\tif (computeAll || changedProps.trends && this.trendsManager) {\n\t\t\tcomputedData.trends = {\n\t\t\t\tmaxXVal: this.trendsManager.getEndXVal(),\n\t\t\t\tminXVal: this.trendsManager.getStartXVal()\n\t\t\t}\n\t\t}\n\t\treturn computedData;\n\t}\n\n\tprivate savePrevState(changedProps?: IChartState) {\n\t\tif (!changedProps) changedProps = this.state;\n\t\tvar prevState = this.state.prevState;\n\n\t\t// prevent to store prev trend state by performance reasons\n\t\tUtils.copyProps(this.state, prevState, changedProps, ['trends']);\n\n\t}\n\n\tprivate emitChangedStateEvents(changedProps: IChartState, eventData: any) {\n\t\tvar prevState = this.state.prevState;\n\n\t\t// emit common change event\n\t\tthis.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\n\t\t// emit event for each changed state property\n\t\tfor (let key in changedProps) {\n\t\t\tthis.ee.emit(key + 'Change', (changedProps as {[key: string]: any})[key], eventData);\n\t\t}\n\n\t\tif (!this.isReady) return;\n\n\t\t// emit special events based on changed state\n\t\tlet scrollStopEventNeeded = (\n\t\t\tchangedProps.cursor &&\n\t\t\tchangedProps.cursor.dragMode === false &&\n\t\t\tprevState.cursor.dragMode === true\n\t\t);\n\t\tscrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\n\t\tlet scrollChangeEventsNeeded = (\n\t\t\tchangedProps.xAxis &&\n\t\t\tchangedProps.xAxis.range &&\n\t\t\tchangedProps.xAxis.range.scroll !== void 0\n\t\t);\n\t\tscrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\n\t\tlet zoomEventsNeeded = (\n\t\t\t(changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\n\t\t\t(changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom)\n\t\t);\n\t\tzoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\n\t\tlet resizeEventNeeded = (changedProps.width || changedProps.height);\n\t\tresizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\n\t\tlet pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\n\t\tpluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t}\n\n\n\t/**\n\t * init plugins and save plugins options in initialState\n\t */\n\tprivate installPlugins(plugins: ChartPlugin[], initialState: IChartState): IChartState {\n\t\tinitialState.pluginsState = {};\n\t\tplugins.forEach(plugin => {\n\t\t\tlet PluginClass = plugin.constructor as typeof ChartPlugin;\n\t\t\tlet pluginName = PluginClass.NAME;\n\t\t\tinitialState.pluginsState[pluginName] = Utils.deepMerge({}, plugin.initialState);\n\t\t\tthis.plugins[pluginName] = plugin;\n\t\t\tplugin.setupChart(this);\n\t\t});\n\t\treturn initialState;\n\t}\n\n\n\t/**\n\t * returns plugin instance by plugin name\n\t * @example\n\t */\n\tgetPlugin(pluginName: string): ChartPlugin {\n\t\treturn this.plugins[pluginName];\n\t}\n\n\n\tprivate initListeners() {\n\t\tthis.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, (changedTrends: ITrendsOptions, newData: ITrendData) => {\n\t\t\tthis.handleTrendsChange(changedTrends, newData)\n\t\t});\n\t}\n\n\tprivate handleTrendsChange(changedTrends: ITrendsOptions, newData: ITrendData) {\n\t\tfor (let trendName in changedTrends) {\n\t\t\tthis.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t\t}\n\t}\n\n\tprivate recalculateXAxis(actualData: IChartState, changedProps: IChartState): IAxisOptions {\n\t\tvar axisRange = actualData.xAxis.range;\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar isInitialize = axisRange.zeroVal == void 0;\n\t\tvar zeroVal: number, scaleFactor: number;\n\t\tvar zoom = axisRange.zoom;\n\n\t\tif (axisRange.isMirrorMode) {\n\t\t\tUtils.error('range.isMirrorMode available only for yAxis.range');\n\t\t}\n\n\t\tif (isInitialize) {\n\t\t\tzeroVal = axisRange.from;\n\t\t\tscaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t} else {\n\t\t\tzeroVal = axisRange.zeroVal;\n\t\t\tscaleFactor = axisRange.scaleFactor;\n\n\t\t\t// recalculate range.zoom and range.scroll then range.from or range.to was changed\n\t\t\tif (\n\t\t\t\tchangedProps.xAxis &&\n\t\t\t\t(changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)\n\t\t\t) {\n\t\t\t\tif (changedProps.xAxis.range.zoom) {\n\t\t\t\t\tUtils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t\t\t\t}\n\t\t\t\tlet currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\t\tpatch.range.scroll = axisRange.from - zeroVal;\n\t\t\t\tpatch.range.zoom = currentScaleFactor / scaleFactor;\n\t\t\t\treturn patch;\n\t\t\t}\n\t\t}\n\n\n\t\t// recalculate range.from and range.to then range.zoom or range.scroll was changed\n\t\tdo {\n\t\t\tvar from = zeroVal + axisRange.scroll;\n\t\t\tvar to = from + actualData.width / (scaleFactor * zoom);\n\t\t\tvar rangeLength = to - from;\n\t\t\tvar needToRecalculateZoom = false;\n\t\t\tvar rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\n\t\t\tvar rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\n\t\t\tneedToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t\t\tif (needToRecalculateZoom) {\n\t\t\t\tvar fixScale = rangeLength > axisRange.maxLength ?\n\t\t\t\t\trangeLength / axisRange.maxLength :\n\t\t\t\t\trangeLength / axisRange.minLength;\n\t\t\t\tvar zoom = zoom * fixScale;\n\t\t\t\tpatch.range.zoom = zoom;\n\t\t\t}\n\t\t} while (needToRecalculateZoom);\n\n\t\tpatch.range.from = from;\n\t\tpatch.range.to = to;\n\t\treturn patch;\n\t}\n\n\n\tprivate recalculateYAxis(actualData: IChartState): IAxisOptions {\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar yAxisRange = actualData.yAxis.range;\n\t\tvar isInitialize = yAxisRange.scaleFactor == void 0;\n\t\tvar trends = this.trendsManager;\n\t\tvar trendsEndXVal = trends.getEndXVal();\n\t\tvar trendsStartXVal = trends.getStartXVal();\n\t\tvar xRange = actualData.xAxis.range;\n\t\tvar {from: xFrom, to: xTo} = xRange;\n\t\tvar xRangeLength = xTo - xFrom;\n\t\tvar zeroVal: number, scaleFactor: number, scroll: number, zoom: number, needToZoom: boolean;\n\n\t\t// check situation when state was scrolled behind trends end or before trends start\n\t\tif (xTo > trendsEndXVal) {\n\t\t\txTo = trendsEndXVal;\n\t\t\txFrom = xTo - xRangeLength;\n\t\t} else if (xFrom < trendsStartXVal) {\n\t\t\txFrom = trendsStartXVal;\n\t\t\txTo = xFrom + xRangeLength;\n\t\t}\n\n\t\tvar maxY = trends.getMaxYVal(xFrom, xTo);\n\t\tvar minY = trends.getMinYVal(xFrom, xTo);\n\n\t\tvar trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t\tif (yAxisRange.type == AXIS_RANGE_TYPE.RELATIVE_END) {\n\t\t\tif (trendLastY > maxY) maxY = trendLastY;\n\t\t\tif (trendLastY < minY) minY = trendLastY;\n\t\t}\n\n\t\tif (yAxisRange.isMirrorMode) {\n\t\t\tif (yAxisRange.zeroVal == void 0) Utils.error('range.zeroVal must be set when range.isMirrorMode');\n\t\t\tlet distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t\t\tlet distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t\t\tlet maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t\t\tmaxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t\t\tminY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t\t}\n\t\tlet margin = yAxisRange.margin;\n\t\tlet padding = {\n\t\t\tstart: yAxisRange.padding.start + margin.start,\n\t\t\tend: yAxisRange.padding.end + margin.end\n\t\t};\n\n\t\tif (padding.end + padding.start >= actualData.height) {\n\t\t\tUtils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\n\t\t}\n\n\t\tlet rangeLength = maxY - minY;\n\t\tlet paddingTopInPercents = padding.end / actualData.height;\n\t\tlet paddingBottomInPercents = padding.start / actualData.height;\n\t\tlet rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t\tlet visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t\tlet fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t\tlet toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t\t\n\t\tif (isInitialize) {\n\t\t\tzeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t\t\tscaleFactor = actualData.height / (toVal - fromVal);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t\tneedToZoom = true;\n\t\t} else {\n\t\t\tscaleFactor = yAxisRange.scaleFactor;\n\t\t\tzeroVal = yAxisRange.zeroVal;\n\n\t\t\tlet maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t\t\tlet minScreenY = Math.round(this.getScreenYByValue(minY));\n\t\t\tneedToZoom = (\n\t\t\t\tmaxScreenY > actualData.height - margin.end ||\n\t\t\t\tmaxScreenY < actualData.height - padding.end ||\n\t\t\t\tminScreenY < margin.start ||\n\t\t\t\tminScreenY > padding.start\n\t\t\t);\n\t\t}\n\n\t\tif (!needToZoom) return null;\n\n\t\tscroll = fromVal - zeroVal;\n\t\tzoom = (actualData.height / (toVal - fromVal)) / scaleFactor ;\n\n\t\tvar currentAxisRange = this.state.yAxis.range;\n\t\tif (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t\tif (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t\tif (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t\tif (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t\t\n\t\treturn patch;\n\t}\n\n\tzoom(zoomValue: number, origin = 0.5): Promise<void> {\n\t\tlet {zoom, scroll, scaleFactor} = this.state.xAxis.range;\n\t\tlet newZoom = zoom * zoomValue;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\tlet nextRange = this.state.width / (scaleFactor * newZoom);\n\t\tlet newScroll = scroll + (currentRange - nextRange) * origin;\n\t\tthis.setState({xAxis: {range: {zoom: newZoom, scroll: newScroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.zoomSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\t\n\tzoomToRange(range: number, origin?: number): Promise<void> {\n\t\tvar {scaleFactor, zoom} = this.state.xAxis.range;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\treturn this.zoom(currentRange / range, origin);\n\t}\n\n\tscrollToEnd(): Promise<void> {\n\t\tlet state = this.state;\n\t\tlet endXVal = this.trendsManager.getEndXVal();\n\t\tlet range = state.xAxis.range;\n\t\tvar scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t\tthis.setState({xAxis: {range: {scroll: scroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.scrollSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to xVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.xAxis.range;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to yVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.yAxis.range;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\n\t}\n\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  returns x value by screen x coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\tvar {zeroVal, scroll} = this.state.xAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  returns y value by screen y coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\tvar {zeroVal, scroll} = this.state.yAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByYAxis(y);\n\t}\n\n\n\t/**\n\t *  returns screen x value by screen y coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t/**\n\t *  returns screen y value by screen y coordinate\n\t */\n\tgetScreenYByValue(yVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t\treturn this.valueToPxByYAxis(yVal - zeroVal - scroll)\n\t}\n\n\n\t/**\n\t * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\n\n\tgetScreenLeftVal() {\n\t\treturn this.getValueByScreenX(0);\n\t}\n\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.state.width);\n\t}\n\n\n\tgetPaddingRight(): number {\n\t\treturn this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Chart.ts\n **/","import {Chart, IChartState} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {TrendSegmentsManager} from \"./TrendSegmentsManager\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Promise} from './deps/deps';\nimport { TChartColor } from './Color';\n\nexport interface IPrependPromiseExecutor {\n\t(requestedDataLength: number, resolve: (data: TTrendRawData) => void, reject: () => void): void;\n}\nconst EVENTS = {\n\tCHANGE: 'Change',\n\tPREPEND_REQUEST: 'prependRequest'\n};\nexport enum TREND_TYPE {LINE, CANDLE}\nexport type TTrendRawData = ITrendData | number[];\nexport interface ITrendItem {xVal: number, yVal: number, id?: number}\nexport interface ITrendData extends Array<ITrendItem>{}\nexport interface ITrendTypeSettings {\n\tminSegmentLengthInPx?: number;\n\tmaxSegmentLengthInPx?: number;\n}\nexport interface ITrendOptions {\n\tenabled?: boolean,\n\tdata?: ITrendData\n\tdataset?: ITrendData | number[];\n\tname?: string;\n\ttype?: TREND_TYPE;\n\tlineWidth?: number;\n\tlineColor?: TChartColor;\n\tbackgroundColor?: TChartColor;\n\thasIndicator?: boolean;\n\thasBackground?: boolean;\n\thasBeacon?: boolean;\n\tmaxSegmentLength?: number;\n\tsettingsForTypes?: {\n\t\tCANDLE?: ITrendTypeSettings,\n\t\tLINE?: ITrendTypeSettings\n\t}\n}\n\nexport class Trend {\n\tname: string;\n\tsegmentsManager: TrendSegmentsManager;\n\tminXVal = Infinity;\n\tminYVal = Infinity;\n\tmaxXVal = -Infinity;\n\tmaxYVal = -Infinity;\n\tprivate chartState: Chart;\n\tprivate calculatedOptions: ITrendOptions;\n\tprivate prependRequest: Promise<TTrendRawData>;\n\tprivate ee: EventEmitter;\n\t\n\tconstructor(chartState: Chart, trendName: string, initialState: IChartState) {\n\t\tvar options = initialState.trends[trendName];\n\t\tthis.name = trendName;\n\t\tthis.chartState = chartState;\n\t\tthis.calculatedOptions = Utils.deepMerge(this.chartState.state.trendDefaultState, options);\n\t\tthis.calculatedOptions.name = trendName;\n\t\tif (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t\tthis.calculatedOptions.dataset = [];\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvents();\n\t}\n\n\tprivate onInitialStateApplied() {\n\t\tthis.segmentsManager = new TrendSegmentsManager(this.chartState, this);\n\t}\n\n\tprivate bindEvents() {\n\t\tvar chartState = this.chartState;\n\t\tchartState.onInitialStateApplied(() => this.onInitialStateApplied());\n\t\tchartState.onScrollStop(() => this.checkForPrependRequest());\n\t\tchartState.onZoom(() => this.checkForPrependRequest());\n\t\tchartState.onTrendChange((trendName, changedOptions, newData) => this.ee.emit(EVENTS.CHANGE, changedOptions, newData));\n\t\tchartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tgetCalculatedOptions() {\n\t\treturn this.calculatedOptions;\n\t}\n\n\tappendData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData());\n\t\tvar updatedTrendData = options.data.concat(newData);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprependData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData(), true);\n\t\tvar updatedTrendData = newData.concat(options.data);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprivate changeData(allData: ITrendData, newData: ITrendData) {\n\t\tfor (let item of newData) {\n\t\t\tif (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t\t\tif (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t\t\tif (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t\t\tif (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t\t}\n\t\tvar options = this.getOptions();\n\t\tvar statePatch: IChartState = {trends: {[options.name]: {data: allData}}};\n\t\tthis.chartState.setState(statePatch, newData);\n\t}\n\t\n\tgetData(fromX?: number, toX?: number): ITrendData {\n\t\tvar data = this.getOptions().data;\n\t\tif (fromX == void 0 && toX == void 0) return data;\n\n\t\tfromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t\ttoX = toX !== void 0 ? toX : data[data.length].xVal;\n\t\tvar filteredData: ITrendData = [];\n\t\tfor (let item of data) {\n\t\t\tif (item.xVal < fromX) continue;\n\t\t\tif (item.xVal > toX) break;\n\t\t\tfilteredData.push(item)\n\t\t}\n\t\treturn filteredData;\n\t}\n\n\tgetFirstItem(): ITrendItem {\n\t\treturn this.getOptions().data[0];\n\t}\n\t\n\tgetLastItem(): ITrendItem {\n\t\tvar data = this.getOptions().data;\n\t\treturn data[data.length - 1];\n\t}\n\n\tgetOptions() {\n\t\treturn this.chartState.state.trends[this.name]\n\t}\n\n\tsetOptions(options: ITrendOptions) {\n\t\tthis.chartState.setState({trends: {[this.name]: options}});\n\t}\n\n\tonPrependRequest(cb: IPrependPromiseExecutor): Function {\n\t\tthis.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t\t}\n\t}\n\n\t/**\n\t * shortcut for Chart.onTrendChange\n\t */\n\tonChange(cb: (changedOptions: ITrendOptions, newData: ITrendData) => void): Function {\n\t\tthis.ee.on(EVENTS.CHANGE, cb);\n\t\treturn () => { this.ee.off(EVENTS.CHANGE, cb);}\n\t}\n\n\tonDataChange(cb: (newData: ITrendData) => void): Function {\n\t\tvar onChangeCb = (changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tif (newData) cb(newData);\n\t\t};\n\t\tthis.ee.on(EVENTS.CHANGE, onChangeCb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.CHANGE, onChangeCb);\n\t\t}\n\t}\n\n\tprivate checkForPrependRequest() {\n\t\tif (this.prependRequest) return;\n\t\tvar chartState = this.chartState;\n\t\tvar minXVal = chartState.state.computedData.trends.minXVal;\n\t\tvar minScreenX = chartState.getScreenXByValue(minXVal);\n\t\tvar needToRequest = minScreenX > 0;\n\t\tvar {from, to} = chartState.state.xAxis.range;\n\t\tvar requestedDataLength = to - from;\n\t\tif (!needToRequest) return;\n\t\t\n\t\tthis.prependRequest = new Promise<TTrendRawData>((resolve: Function, reject: Function) => {\n\t\t\tthis.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t\t});\n\n\t\tthis.prependRequest.then((newData: TTrendRawData) => {\n\t\t\tthis.prependData(newData);\n\t\t\tthis.prependRequest = null;\n\t\t}, () => {\n\t\t\tthis.prependRequest = null;\n\t\t})\n\t\n\t}\n\n\tstatic prepareData (newData: TTrendRawData, currentData?: ITrendData, isPrepend = false): ITrendData {\n\t\tvar data: ITrendData = [];\n\t\tif (typeof newData[0] == 'number') {\n\t\t\tcurrentData = currentData || [];\n\t\t\tlet initialItem: ITrendItem;\n\t\t\tlet xVal: number;\n\t\t\tif (isPrepend) {\n\t\t\t\tinitialItem = currentData[0];\n\t\t\t\txVal = initialItem.xVal - newData.length;\n\t\t\t} else {\n\t\t\t\tinitialItem = currentData[currentData.length - 1];\n\t\t\t\txVal = initialItem ? initialItem.xVal + 1 : 0;\n\t\t\t}\n\t\t\tfor (let yVal of newData as number[]) {\n\t\t\t\tdata.push({xVal: xVal, yVal: yVal, id: Utils.getUid()});\n\t\t\t\txVal++;\n\t\t\t}\n\t\t} else {\n\t\t\tdata = newData as ITrendData;\n\t\t}\n\t\treturn data;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Trend.ts\n **/","import { IIteralable } from \"./interfaces\";\nimport { EventEmitter } from './EventEmmiter';\nimport { Chart } from \"./Chart\";\nimport Vector3 = THREE.Vector3;\nimport { ITrendData, ITrendOptions, ITrendItem, Trend, TREND_TYPE, ITrendTypeSettings } from \"./Trend\";\nimport { Utils } from \"./Utils\";\n\nconst MAX_ANIMATED_SEGMENTS = 100;\nconst EVENTS = {\n\tREBUILD: 'rebuild',\n\tDISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\n\tANIMATION_FRAME: 'animationFrame'\n};\n\n/**\n *  Class helps to display and animate trends segments\n */\nexport class TrendSegmentsManager {\n\tsegmentsById: {[id: string]: TrendSegment} = {};\n\tsegments: TrendSegment[] = [];\n\tchartState: Chart;\n\tanimatedSegmentsIds: number[] = [];\n\tmaxSegmentLength: number;\n\tsegmentsLength = 0;\n\tfirstDisplayedSegmentInd: number;\n\tfirstDisplayedSegment: TrendSegment;\n\tlastDisplayedSegmentInd: number;\n\tlastDisplayedSegment: TrendSegment;\n\tprivate appendAnimation: TweenLite;\n\tprivate prependAnimation: TweenLite;\n\tprivate animatedSegmentsForAppend: number[] = [];\n\tprivate animatedSegmentsForPrepend: number[] = [];\n\tprivate nextEmptyId = 0;\n\tprivate startSegmentId = 0;\n\tprivate endSegmentId = 0;\n\tprivate trend: Trend;\n\tprivate ee: EventEmitter;\n\n\tconstructor (chartState: Chart, trend: Trend) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.trend = trend;\n\t\tthis.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t\tthis.tryToRebuildSegments();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.trend.onChange((changedOptions, newData) => this.onTrendChangeHandler(changedOptions, newData));\n\t\tthis.chartState.onZoom(() => this.onZoomHandler());\n\t\tthis.chartState.onScroll(() => this.recalculateDisplayedRange());\n\t\tthis.chartState.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.appendAnimation && this.appendAnimation.kill();\n\t\tthis.prependAnimation && this.prependAnimation.kill();\n\t}\n\n\tprivate onZoomHandler() {\n\t\tlet segmentsRebuilded = this.tryToRebuildSegments();\n\t\tif (!segmentsRebuilded) {\n\t\t\tthis.recalculateDisplayedRange()\n\t\t}\n\t}\n\n\tprivate onTrendChangeHandler(changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar needToRebuildSegments = (\n\t\t\tchangedOptions.type != void 0 ||\n\t\t\tchangedOptions.maxSegmentLength != void 0\n\t\t);\n\n\n\t\tif (needToRebuildSegments) {\n\t\t\tthis.tryToRebuildSegments(true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!newData) return;\n\n\t\tvar data = this.trend.getData();\n\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\tisAppend ? this.appendData(newData) : this.prependData(newData);\n\t\tthis.recalculateDisplayedRange();\n\t}\n\n\tgetSegment(id: number) {\n\t\treturn this.segmentsById[id];\n\t}\n\n\tgetEndSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.endSegmentId];\n\t}\n\n\tgetStartSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.startSegmentId];\n\t}\n\t\n\tprivate tryToRebuildSegments(force = false): boolean {\n\t\tlet options = this.trend.getOptions();\n\t\tlet trendTypeName = TREND_TYPE[options.type] as string;\n\t\tlet trendTypesSettings =  options.settingsForTypes as IIteralable;\n\t\tlet trendTypeSettings = trendTypesSettings[trendTypeName] as ITrendTypeSettings;\n\t\tlet {\n\t\t\tminSegmentLengthInPx,\n\t\t\tmaxSegmentLengthInPx\n\t\t} = trendTypeSettings;\n\n\t\tlet needToRebuild = this.segments.length === 0 || force;\n\t\tlet segmentLength = this.maxSegmentLength;\n\n\t\t// call toFixed(2) to prevent floating segment error compare\n\t\tlet currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t\tlet currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\n\t\tif (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t\t} else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t\t}\n\n\t\tif (!needToRebuild) return false;\n\n\t\tthis.maxSegmentLength = segmentLength;\n\t\tthis.segmentsById = {};\n\t\tthis.segments = [];\n\t\tthis.nextEmptyId = 0;\n\t\tthis.startSegmentId = 0;\n\t\tthis.endSegmentId = 0;\n\t\tthis.segmentsLength = 0;\n\t\tthis.stopAllAnimations();\n\t\tthis.appendData(null, true);\n\t\tthis.recalculateDisplayedRange(true);\n\t\tthis.ee.emit(EVENTS.REBUILD);\n\t}\n\n\tprivate stopAllAnimations() {\n\t\tthis.animatedSegmentsIds = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tif (this.prependAnimation) this.prependAnimation.kill();\n\t\tif (this.appendAnimation) this.appendAnimation.kill();\n\t}\n\t\n\tprivate recalculateDisplayedRange(segmentsAreRebuilded = false) {\n\t\tvar {from, to} = this.chartState.state.xAxis.range;\n\t\tvar {firstDisplayedSegment, lastDisplayedSegment} = this;\n\t\tvar displayedRange = to - from;\n\n\t\tthis.firstDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\n\t\tthis.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n\t\tthis.lastDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\n\t\tthis.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n\t\tif (segmentsAreRebuilded) return;\n\n\t\tvar displayedRangeChanged = (\n\t\t\tfirstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\n\t\t\tlastDisplayedSegment.id !== this.lastDisplayedSegment.id\n\t\t);\n\t\tif (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t}\n\n\t// getSegments(fromX?: number, toX?: number): TrendSegment[] {\n\t// \tvar segments = this.segments;\n\t// \tif (fromX == void 0 && toX == void 0) return segments;\n\t// \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\n\t// \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\n\t// \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\n\t// \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\n\t// \treturn segments.slice(startSegmentInd, endSegmentInd);\n\t// }\n\n\t/**\n\t * returns array of segments for values array\n\t * values must be sorted!\n\t */\n\tgetSegmentsForXValues(values: number[]): TrendSegment[] {\n\t\tvar valueInd = 0;\n\t\tvar value = values[valueInd];\n\t\tvar lastValueInd = values.length - 1;\n\t\tvar results: TrendSegment[] = [];\n\t\tvar segment = this.getStartSegment();\n\t\tif (!segment.hasValue) return [];\n\t\twhile (segment) {\n\t\t\n\t\t\twhile (value < segment.startXVal) {\n\t\t\t\tresults.push(void 0);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\n\t\t\twhile (value > segment.endXVal) {\n\t\t\t\tsegment = segment.getNext();\n\t\t\t\tif (!segment) break;\n\t\t\t}\n\t\t\n\t\t\tvar valueInPoint = (\n\t\t\t\tsegment.startXVal == value || segment.endXVal == value ||\n\t\t\t\t(segment.startXVal < value && segment.endXVal > value)\n\t\t\t);\n\t\t\tif (valueInPoint) {\n\t\t\t\tresults.push(segment);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\tif (valueInd > lastValueInd) break;\n\t\t}\n\t\treturn results;\n\t}\n\n\tonAnimationFrame(cb: (animationState: TrendSegmentsManager) => void): Function {\n\t\treturn this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t}\n\n\tonRebuild(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.REBUILD, cb);\n\t}\n\n\tonDisplayedRangeChanged(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t}\n\t\n\tallocateNextSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar prevSegment = this.segmentsById[this.endSegmentId];\n\t\tif (prevSegment && prevSegment.hasValue) {\n\t\t\tprevSegment.nextId = id;\n\t\t\tsegment.prevId = prevSegment.id;\n\t\t}\n\t\tthis.endSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.push(segment);\n\t\treturn segment;\n\t}\n\n\tallocatePrevSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar nextSegment = this.segmentsById[this.startSegmentId];\n\t\tif (nextSegment && nextSegment.hasValue) {\n\t\t\tnextSegment.prevId = id;\n\t\t\tsegment.nextId = nextSegment.id;\n\t\t}\n\t\tthis.startSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.unshift(segment);\n\t\treturn segment;\n\t}\n\n\tprivate appendData(newData: ITrendData, needRebuildSegments = false) {\n\n\t\t// WARNING: bottleneck method!\n\n\t\t// var t1 = performance.now();\n\t\tvar trendData = this.trend.getData();\n\t\tif (needRebuildSegments) {\n\t\t\tnewData = trendData;\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t}\n\n\t\tvar startItemInd = trendData.length - newData.length;\n\t\tvar segment = this.getEndSegment() || this.allocateNextSegment();\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\tvar itemInd = 0;\n\t\twhile (itemInd < newData.length) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.appendItem(item);\n\t\t\tlet isLastItem = itemInd == newData.length - 1;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd++;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForAppend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t\t\t\t\tsegment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForAppend.push(id);\n\n\t\t\t}\n\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocateNextSegment();\n\t\t\tlet prevItem = trendData[startItemInd + itemInd - 1];\n\t\t\tsegment.appendItem(prevItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\t// var t2 = performance.now();\n\t\t// console.log(t2 - t1);\n\n\t\t// do not create animation if segments was rebuilded\n\t\tif (needRebuildSegments) {\n\t\t\tfor (let segmentId of this.animatedSegmentsForAppend) {\n\t\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\t\tsegment.currentAnimationState = segment.createAnimationState();\n\t\t\t}\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t\treturn;\n\t\t}\n\t\tif (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time);\n\t}\n\n\n\t// TODO: refactor duplicated code from appendData\n\tprivate prependData(newData: ITrendData) {\n\t\tvar trendData = this.trend.getData();\n\t\tvar segment = this.getStartSegment() || this.segmentsById[0];\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar itemInd = newData.length - 1;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\twhile (itemInd >= 0) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.prependItem(item);\n\t\t\tlet isLastItem = itemInd == 0;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd--;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForPrepend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t\t\t\t\tsegment.initialAnimationState.endYVal =  initialAnimationState.startYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForPrepend.push(id);\n\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocatePrevSegment();\n\t\t\tlet nextItem = trendData[itemInd + 1];\n\t\t\tsegment.prependItem(nextItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\tif (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time, true);\n\t}\n\n\tprivate animate(time: number, isPrepend = false) {\n\n\t\tvar animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tvar animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\n\t\tif ((animation && animation.isActive()) || time == 0) {\n\t\t\tif (animation) animation.kill();\n\t\t\tthis.onAnimationFrameHandler(1, isPrepend);\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar ease = animationsOptions.trendChangeEase;\n\t\tvar objectToAnimate = {animationValue: 0};\n\t\tanimation = TweenLite.to(objectToAnimate, time, {animationValue: 1, ease});\n\t\tanimation.eventCallback('onUpdate', () => this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend));\n\t\tanimation.eventCallback('onComplete', () => {\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\tthis.appendAnimation = null;\n\t\t});\n\n\t\tif (isPrepend) {\n\t\t\tthis.prependAnimation = animation;\n\t\t} else {\n\t\t\tthis.appendAnimation = animation;\n\t\t}\n\t}\n\n\tprivate onAnimationFrameHandler(coefficient: number, isPrepend = false) {\n\t\tlet animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tfor (let segmentId of animatedSegmentsIds) {\n\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\tfor (let key in segment.targetAnimationState) {\n\t\t\t\tlet targetValue = segment.targetAnimationState[key] as number;\n\t\t\t\tlet initialValue = segment.initialAnimationState[key] as number;\n\t\t\t\tlet currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t\t\t\tsegment.currentAnimationState[key] = currentValue;\n\t\t\t}\n\t\t}\n\t\tthis.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t\tthis.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t}\n\n}\n\nexport interface ITrendSegmentState extends IIteralable {\n\txVal?: number;\n\tyVal?: number;\n\tstartXVal?: number;\n\tstartYVal?: number;\n\tendXVal?: number;\n\tendYVal?: number;\n\tmaxYVal?: number;\n\tminYVal?: number;\n\tmaxLength?: number;\n}\n\nexport class TrendSegment implements ITrendSegmentState {\n\tid: number;\n\tprevId: number;\n\tnextId: number;\n\thasValue: boolean;\n\txVal: number;\n\tyVal: number;\n\tstartXVal: number;\n\tstartYVal: number;\n\tendXVal: number;\n\tendYVal: number;\n\tmaxYVal: number;\n\tminYVal: number;\n\tisCompleted = false;\n\tmaxLength: number;\n\titems: ITrendItem[] = [];\n\n\tinitialAnimationState: ITrendSegmentState = {};\n\ttargetAnimationState: ITrendSegmentState = {};\n\tcurrentAnimationState: ITrendSegmentState = {};\n\n\tprivate trendSegments: TrendSegmentsManager;\n\t\n\tconstructor(trendPoints: TrendSegmentsManager, id: number) {\n\t\tthis.trendSegments = trendPoints;\n\t\tthis.id = id;\n\t\tthis.maxLength = trendPoints.maxSegmentLength;\n\t}\n\n\tcreateAnimationState(): ITrendSegmentState {\n\t\tvar {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t} = this;\n\t\treturn {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t}\n\t};\n\t\n\tappendItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.push(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar startXVal = items[0].xVal;\n\t\tif (item.xVal - startXVal > this.maxLength) return false;\n\t\titems.push(item);\n\t\treturn true;\n\t}\n\n\tprependItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.unshift(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar endXVal = items[items.length - 1].xVal;\n\t\tif (endXVal - item.xVal > this.maxLength) return false;\n\t\titems.unshift(item);\n\t\treturn true;\n\t}\n\n\tcomplete() {\n\t\tthis.isCompleted = true;\n\t\tthis.recalculateItems();\n\t\tthis.items = []; // free memory for completed ranges\n\t}\n\n\trecalculateItems() {\n\t\tlet items = this.items;\n\t\tlet itemsLength = items.length;\n\t\tif (itemsLength === 0) Utils.error('Unable to create TrendSegment without TrendItems');\n\t\tlet endItem = items[itemsLength - 1];\n\t\tlet {xVal: endXVal, yVal: endYVal} = endItem;\n\t\tlet startXVal: number, startYVal: number;\n\n\n\t\tlet startItem = items[0];\n\t\tstartXVal = startItem.xVal;\n\t\tstartYVal = startItem.yVal;\n\n\t\tlet minX = Math.min(startXVal, endXVal);\n\t\tlet maxX = Math.max(startXVal, endXVal);\n\t\tlet middleXVal = minX + (maxX - minX) / 2;\n\n\t\tlet minY = Math.min(startYVal, endYVal);\n\t\tlet maxY = Math.max(startYVal, endYVal);\n\t\tlet middleYVal = minY + (maxY - minY) / 2;\n\n\t\tlet yVals = items.map(item => item.yVal);\n\n\t\tthis.startXVal = startXVal;\n\t\tthis.startYVal = startYVal;\n\t\tthis.endXVal = endXVal;\n\t\tthis.endYVal = endYVal;\n\t\tthis.xVal = middleXVal;\n\t\tthis.yVal = middleYVal;\n\t\tthis.maxYVal = Math.max(...yVals);\n\t\tthis.minYVal = Math.min(...yVals);\n\t\tif (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t}\n\n\tgetNext() {\n\t\tvar nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t\treturn nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t}\n\n\tgetPrev() {\n\t\tvar prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t\treturn prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t}\n\t\n\tgetFrameVal(): Vector3 {\n\t\tlet {xVal, yVal} = this.createAnimationState();\n\t\treturn new Vector3(xVal, yVal, 0);\n\t}\n\n\tgetFramePoint(): Vector3 {\n\t\tvar frameVal = this.getFrameVal();\n\t\treturn this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendSegmentsManager.ts\n **/","\nimport {Trend, ITrendOptions} from \"./Trend\";\nimport {Chart, IChartState} from \"./Chart\";\nimport { EventEmitter } from './EventEmmiter';\n\nexport interface ITrendsOptions {\n\t[trendName: string]: ITrendOptions;\n}\n\nconst EVENTS = {\n\tSEGMENTS_REBUILDED: 'segmentsRebuilded'\n};\n\n/**\n * Trends manager\n */\nexport class TrendsManager {\n\ttrends: {[name: string]: Trend} = {};\n\tcalculatedOptions: ITrendsOptions;\n\tprivate ee = new EventEmitter();\n\tprivate chartState: Chart;\n\t\n\tconstructor(state: Chart, initialState: IChartState) {\n\t\tthis.chartState = state;\n\t\tvar trendsCalculatedOptions: ITrendsOptions = {};\n\t\tfor (let trendName in initialState.trends) {\n\t\t\tlet trend = this.createTrend(state, trendName, initialState);\n\t\t\ttrendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t\t}\n\t\tthis.calculatedOptions = trendsCalculatedOptions;\n\t\tthis.bindEvents();\n\t}\n\n\tgetTrend(trendName: string) {\n\t\treturn this.trends[trendName];\n\t}\n\t\n\tgetEnabledTrends(): Trend[] {\n\t\tvar enabledTrends: Trend[] = [];\n\t\tvar allTrends = this.trends;\n\t\tfor (let trendName in allTrends) {\n\t\t\tlet trend = allTrends[trendName];\n\t\t\ttrend.getOptions().enabled && enabledTrends.push(trend);\n\t\t}\n\t\treturn enabledTrends;\n\t}\n\n\n\tgetStartXVal() {\n\t\tvar trends = this.getEnabledTrends();\n\t\treturn trends[0].getData()[0].xVal;\n\t}\n\n\n\tgetEndXVal(): number {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar firstTrendData = trends[0].getData();\n\t\treturn firstTrendData[firstTrendData.length - 1].xVal;\n\t}\n\t\n\t\n\tgetExtremumYVal(extremumIsMax: boolean, fromX?: number, toX?: number) {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar compareFn: Function;\n\t\tvar result: number;\n\t\tif (extremumIsMax) {\n\t\t\tresult = -Infinity;\n\t\t\tcompareFn = Math.max;\n\t\t} else {\n\t\t\tresult = Infinity;\n\t\t\tcompareFn = Math.min;\n\t\t}\n\t\tfor (let trend of trends) {\n\t\t\tvar trendData = trend.getData(fromX, toX);\n\t\t\tvar trendYValues = trendData.map((dataItem) => dataItem.yVal);\n\t\t\tresult = compareFn(result, ...trendYValues);\n\t\t}\n\t\tif (result == Infinity || result == -Infinity) result = NaN;\n\t\treturn result;\n\t}\n\n\tgetMaxYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(true, fromX, toX)}\n\tgetMinYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(false, fromX, toX)}\n\n\tonSegmentsRebuilded(cb: (trendName: string) => any) {\n\t\treturn this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t}\n\n\tprivate bindEvents() {\n\t\tthis.chartState.onInitialStateApplied(() => this.onInitialStateAppliedHandler());\n\t}\n\n\tprivate onInitialStateAppliedHandler() {\n\t\tfor (let trendName in this.trends) {\n\t\t\tthis.trends[trendName].segmentsManager.onRebuild(() => this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName));\n\t\t}\n\t}\n\n\tprivate createTrend(state: Chart, trendName: string, initialState: IChartState): Trend {\n\t\tlet trend = new Trend(state, trendName, initialState);\n\t\tthis.trends[trendName] = trend;\n\t\treturn trend;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendsManager.ts\n **/","import PerspectiveCamera = THREE.PerspectiveCamera;\nimport Vector3 = THREE.Vector3;\nimport {Chart, IChartState} from \"./Chart\";\nimport forestgreen = THREE.ColorKeywords.forestgreen;\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IScreenTransformOptions {\n\tscrollXVal?: number,\n\tscrollYVal?: number,\n\tscrollX?: number,\n\tscrollY?: number,\n\tzoomX?: number,\n\tzoomY?: number\n}\n\n/**\n * manage camera, and contains methods for transforming pixels to values\n */\nexport class Screen {\n\toptions: IScreenTransformOptions = {scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1};\n\tprivate chartState: Chart;\n\tprivate scrollXAnimation: TweenLite;\n\tprivate scrollYAnimation: TweenLite;\n\tprivate zoomXAnimation: TweenLite;\n\tprivate zoomYAnimation: TweenLite;\n\tprivate currentScrollX = {x: 0};\n\tprivate currentScrollY = {y: 0};\n\tprivate currentZoomX = {val: 1};\n\tprivate currentZoomY = {val: 1};\n\tprivate ee: EventEmitter;\n\n\tconstructor(chartState: Chart) {\n\t\tthis.chartState = chartState;\n\t\tvar {width: w, height: h} = chartState.state;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.transform({\n\t\t\tscrollY: this.valueToPxByYAxis(this.chartState.state.yAxis.range.scroll),\n\t\t\tzoomY: 1\n\t\t});\n\t\tthis.bindEvents();\n\n\t\t//camera.position.z = 1500;\n\t}\n\t\n\tgetCameraSettings() {\n\n\t\tvar {width: w, height: h} = this.chartState.state;\n\n\t\t// settings for pixel-perfect camera\n\t\tvar FOV = 75;\n\t\tvar vFOV = FOV * (Math.PI / 180);\n\t\t\n\t\treturn {\n\t\t\tFOV: FOV,\n\t\t\taspect: w / h,\n\t\t\tnear: 0.1,\n\t\t\tfar: 5000,\n\t\t\tz: h / (2 * Math.tan(vFOV / 2) ),\n\n\t\t\t// move 0,0 to left-bottom corner\n\t\t\tx: w / 2,\n\t\t\ty: h / 2\n\t\t}\n\t}\n\n\tonZoomFrame(cb: (zoomX: number, zoomY: number) => void): Function {\n\t\tvar eventName = 'zoomFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonScrollFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'scrollFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonTransformationFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'transformationFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tcameraIsMoving(): boolean {\n\t\treturn !!(\n\t\t\tthis.scrollXAnimation && this.scrollXAnimation.isActive() ||\n\t\t\t\tthis.zoomXAnimation && this.zoomXAnimation.isActive()\n\t\t);\n\t}\n\n\tprivate transform (options: IScreenTransformOptions, silent = false) {\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = options;\n\t\t\n\t\tif (scrollX != void 0) this.options.scrollX = scrollX;\n\t\tif (scrollY != void 0) this.options.scrollY = scrollY;\n\t\tif (zoomX != void 0) this.options.zoomX = zoomX;\n\t\tif (zoomY != void 0) this.options.zoomY = zoomY;\n\n\t\tif (scrollX != void 0 || zoomX) {\n\t\t\toptions.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t\t\tthis.options.scrollXVal = options.scrollXVal;\n\t\t}\n\n\t\tif (scrollY != void 0 || zoomY) {\n\t\t\toptions.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t\t\tthis.options.scrollYVal = options.scrollYVal;\n\t\t}\n\n\t\tif (silent) return;\n\n\t\tthis.ee.emit('transformationFrame', options);\n\t\t\n\t\tif (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t\t\tthis.ee.emit('scrollFrame', options);\n\t\t}\n\t\t\n\t\tif (options.zoomX != void 0 || options.zoomY != void 0) {\n\t\t\tthis.ee.emit('zoomFrame', options);\n\t\t}\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar state = this.chartState;\n\n\t\t// handle scroll and zoom\n\t\tstate.onChange((changedProps) => {\n\t\t\tif (changedProps.xAxis && changedProps.xAxis.range) {\n\t\t\t\tif (changedProps.xAxis.range.scroll != void 0) this.onScrollXHandler(changedProps);\n\t\t\t\tif (changedProps.xAxis.range.zoom) this.onZoomXHandler();\n\t\t\t}\n\t\t\tif (changedProps.yAxis && changedProps.yAxis.range){\n\t\t\t\tif (changedProps.yAxis.range.scroll != void 0) this.onScrollYHandler();\n\t\t\t\tif (changedProps.yAxis.range.zoom) this.onZoomYHandler();\n\t\t\t}\n\t\t});\n\t\tstate.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.scrollXAnimation && this.scrollXAnimation.kill();\n\t\tthis.scrollYAnimation && this.scrollYAnimation.kill();\n\t\tthis.zoomXAnimation && this.zoomXAnimation.kill();\n\t\tthis.zoomYAnimation && this.zoomYAnimation.kill();\n\t}\n\n\tprivate onScrollXHandler(changedProps: IChartState) {\n\t\tvar state = this.chartState;\n\t\tvar isDragMode = state.state.cursor.dragMode;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled && !isDragMode;\n\t\tvar zoomXChanged = changedProps.xAxis.range.zoom;\n\t\tvar isAutoscroll = state.state.autoScroll && !isDragMode && !zoomXChanged;\n\t\tvar time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t\tvar ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t\tif (this.scrollXAnimation) this.scrollXAnimation.pause();\n\n\t\tvar range = state.state.xAxis.range;\n\t\tvar targetX = range.scroll * range.scaleFactor * range.zoom;\n\t\tthis.currentScrollX.x = this.options.scrollX;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollX: this.currentScrollX.x});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t\t\t\tx: targetX, ease: ease\n\t\t\t});\n\t\t\tthis.scrollXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollX.x = targetX;\n\t\t\tcb();\n\t\t}\n\n\t}\n\n\tprivate onScrollYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tif (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t\tvar range = state.state.yAxis.range;\n\t\tvar targetY = range.scroll * range.scaleFactor * range.zoom;\n\n\t\tthis.currentScrollY.y = this.options.scrollY;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollY: this.currentScrollY.y});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t\t\t\ty: targetY, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.scrollYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollY.y = targetY;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomXHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.state.xAxis.range.zoom;\n\t\tif (this.zoomXAnimation) this.zoomXAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomX: this.currentZoomX.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomX.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.state.yAxis.range.zoom;\n\t\tif (this.zoomYAnimation) this.zoomYAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomY: this.currentZoomY.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomY.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zeroVal} = this.chartState.state.xAxis.range;\n\t\tvar zoom = this.options.zoomX;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zeroVal} =  this.chartState.state.yAxis.range;\n\t\tvar zoom = this.options.zoomY;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\n\t */\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\t\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.chartState.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.chartState.state.xAxis.range.scaleFactor * this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.chartState.state.yAxis.range.scaleFactor * this.options.zoomY;\n\t}\n\t\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.chartState.state.xAxis.range.scaleFactor / this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.chartState.state.yAxis.range.scaleFactor / this.options.zoomY;\n\t}\n\n\n\t/**\n\t *  returns scrollX value by screen scrollX coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\treturn this.chartState.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t}\n\t\n\t\n\t/**\n\t *  returns scrollY value by screen scrollY coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\treturn this.chartState.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t}\n\t\n\t//\n\t/**\n\t *  returns screen scrollX value by screen scrollY coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.chartState.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t// /**\n\t//  *  returns screen scrollY value by screen scrollY coordinate\n\t//  */\n\t// getScreenYByValue(scrollYVal: number): number {\n\t// \tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t// \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\n\t// }\n\t//\n\t//\n\t/**\n\t * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\t/**\n\t * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\n\t */\n\tgetPointByScreenY(screenY: number): number {\n\t\treturn this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t}\n\n\tgetTop(): number {\n\t\treturn this.getPointByScreenY(this.chartState.state.height);\n\t}\n\t\n\tgetBottom(): number {\n\t\treturn this.getPointByScreenY(0);\n\t}\n\n\tgetLeft(): number {\n\t\treturn this.getPointByScreenX(0);\n\t}\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.chartState.state.width);\n\t}\n\n\tgetTopVal() {\n\t\treturn this.getValueByScreenY(this.chartState.state.height);\n\t}\n\t\n\tgetBottomVal() {\n\t\treturn this.getValueByScreenY(0);\n\t}\n\n\tgetCenterYVal() {\n\t\treturn this.getValueByScreenY(this.chartState.state.height / 2);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Screen.ts\n **/","\nimport {Chart} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {AXIS_TYPE} from \"./interfaces\";\nimport {ITrendData, ITrendOptions} from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IAxisMarkUpdateOptions {\n\tvalue: number,\n\tdisplayedValue?: string\n}\n\nexport interface IAxisMarkOptions extends IAxisMarkUpdateOptions {\n\tname?: string;\n\ttitle?: string;\n\ttype?: string;\n\tlineColor?: string;\n\tlineWidth?: number;\n\tshowValue?: boolean;\n\tstickToEdges?: boolean;\n}\n\nconst AXIS_MARK_DEFAULT_OPTIONS: IAxisMarkOptions = {\n\ttype: 'simple',\n\tlineWidth: 1,\n\tvalue: 0,\n\tshowValue: false,\n\tstickToEdges: false,\n\tlineColor: '#FFFFFF',\n\ttitle: ''\n};\n\nexport class AxisMarks {\n\tprivate chartState: Chart;\n\tprivate axisType: AXIS_TYPE;\n\tprivate ee: EventEmitter;\n\tprivate items: {[name: string]: AxisMark} = {};\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.axisType = axisType;\n\t\tvar marks = this.items;\n\t\tvar axisMarksOptions = axisType == AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\n\t\t\n\t\tfor (let options of axisMarksOptions) {\n\t\t\tlet axisMark: AxisMark;\n\t\t\toptions = Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t\t\t\n\t\t\t// set mark name\n\t\t\tif (!options.name) options.name = Utils.getUid().toString();\n\t\t\tif (marks[options.name]) Utils.error('duplicated mark name ' + options.name);\n\t\t\t\n\t\t\t// create mark instance based on type option\n\t\t\tif (options.type == 'timeleft') {\n\t\t\t\taxisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t\t\t} else {\n\t\t\t\taxisMark = new AxisMark(chartState, axisType, options);\n\t\t\t}\n\t\t\tmarks[options.name] = axisMark;\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, newData)\n\t\t});\n\t\tthis.chartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tprivate onTrendChange(trendName: string, newData: ITrendData) {\n\t\tif (!newData) return;\n\t\tvar startVal = newData[0].xVal;\n\t\tvar endVal = newData[newData.length - 1].xVal;\n\t\tvar marks = this.items;\n\n\t\tfor (let markName in marks) {\n\t\t\tlet mark = marks[markName];\n\t\t\tlet markVal = mark.options.value;\n\t\t\tlet markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\n\t\t\tif (markWasCrossed) this.ee.emit('markCrossed', trendName, newData);\n\t\t}\n\t}\n\n\n\tgetItems() {\n\t\treturn this.items;\n\t}\n\t\n\tgetItem(markName: string) {\n\t\treturn this.items[markName];\n\t}\n\n}\n\nexport class AxisMark {\n\tstatic typeName = 'simple';\n\toptions: IAxisMarkOptions;\n\taxisType: AXIS_TYPE;\n\tprotected chartState: Chart;\n\tprotected renderOnTrendsChange = false;\n\tprotected ee: EventEmitter;\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE, options: IAxisMarkOptions) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.options = options;\n\t\tthis.axisType = axisType;\n\t\tthis.chartState = chartState;\n\t\tthis.bindEvents();\n\t}\n\t\n\tprotected bindEvents() {}\n\n\tsetOptions(newOptions: IAxisMarkUpdateOptions) {\n\t\tvar value = this.options.value;\n\t\tthis.options = Utils.deepMerge(this.options, newOptions);\n\t\tif (this.options.value !== value) this.ee.emit('valueChange');\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n\n\tgetDisplayedVal(): string {\n\t\tlet {value, displayedValue} = this.options;\n\t\treturn String(displayedValue !== void 0 ? displayedValue : value);\n\t}\n\n\tonMarkCrossed(cb: (trendName: string, newData: ITrendData) => void): Function {\n\t\tthis.ee.on('markCrossed', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('markCrossed', cb);\n\t\t}\n\t}\n\n\tonValueChange(cb: () => void) {\n\t\tthis.ee.on('valueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('valueChange', cb);\n\t\t}\n\t}\n\n\tonDisplayedValueChange(cb: () => void) {\n\t\tthis.ee.on('onDisplayedValueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('onDisplayedValueChange', cb);\n\t\t}\n\t}\n}\n\nexport class AxisTimeleftMark extends AxisMark {\n\tstatic typeName = 'timeleft';\n\tprotected renderOnTrendsChange = true;\n\t\n\tgetDisplayedVal(): string {\n\t\tvar markVal = this.options.value;\n\t\tvar maxXVal = this.chartState.state.computedData.trends.maxXVal;\n\t\tvar time = markVal - maxXVal;\n\t\tif (time < 0) time = 0;\n\t\treturn Utils.msToTimeString(time);\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendsChange(() => this.onTrendsChange());\n\t}\n\n\tprotected onTrendsChange() {\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AxisMarks.ts\n **/","\n\n/**\n * defines how axis range will be calculated\n * FIXED - directly use range.from and range.to value\n * AUTO - automatically sets range.from and range.to by visible part of opposite axis\n * RELATIVE_END - same as AUTO, but trend end always present in range\n * ALL - automatically sets range.from and range.to by all values of opposite axis\n *\n */\nimport {IAxisMarkOptions} from \"./AxisMarks\";\nimport {TChartColor} from \"./Color\";\nexport enum AXIS_RANGE_TYPE {\n\tFIXED,\n\tRELATIVE_END,\n\tAUTO,\n\tALL // TODO: AXIS_RANGE_TYPE.ALL\n}\n\n/**\n * Animation ease type\n */\nexport declare type TEase = Ease | Linear;\n\nexport declare type TIteralable = {[key: string]: any};\nexport interface IIteralable {[key: string]: any};\n\nexport enum AXIS_TYPE {X, Y}\n\nexport interface IAxisRange {\n\ttype?: AXIS_RANGE_TYPE,\n\tfrom?: number,\n\tto?: number,\n\tzoom?: number,\n\tscroll?: number,\n\n\t/**\n\t * Mode only for Y axis. When true displayed center of Y axis never changed. To use set range.zeroVal as center value.\n\t */\n\tisMirrorMode?: boolean,\n\n\tpadding?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmargin?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmaxLength?: number;\n\tminLength?: number;\n\n\t/**\n\t * value in world center coordinate\n\t */\n\tzeroVal?: number,\n\n\t/**\n\t * ratio between 1 pixel and 1 value for zoom = 1\n\t */\n\tscaleFactor?: number,\n}\n\nexport enum AXIS_DATA_TYPE {NUMBER, DATE}\n\nexport interface IAxisOptions {\n\trange?: IAxisRange;\n\tdataType?: AXIS_DATA_TYPE;\n\tautoScroll?: boolean;\n\tmarks?: IAxisMarkOptions[];\n\tgrid?: IGridOptions;\n\tcolor?: TChartColor;\n}\n\nexport interface IGridOptions {\n\tenabled: boolean;\n\tminSizePx?: number;\n\tcolor?: TChartColor;\n}\n\nexport interface IAnimationsOptions {\n\tenabled?: boolean,\n\ttrendChangeSpeed?: number,\n\ttrendChangeEase?: TEase,\n\tscrollSpeed?: number,\n\tscrollEase?: TEase,\n\tautoScrollSpeed?: number,\n\tautoScrollEase?: TEase,\n\tzoomSpeed?: number,\n\tzoomEase?: TEase,\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/interfaces.ts\n **/","import {Chart} from \"./Chart\";\nimport Object3D = THREE.Object3D;\n\nexport interface IChartWidgetConstructor {\n\tnew (): ChartWidget;\n\twidgetName: string;\n}\n\n/**\n * base class for all widgets\n * each widget must have widgetName static property\n */\nexport abstract class ChartWidget {\n\tstatic widgetName = '';\n\tprotected chart: Chart;\n\tprivate unbindList: Function[] = [];\n\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t}\n\n\tabstract onReadyHandler(): any;\n\tabstract getObject3D(): Object3D;\n\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unbindList: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunbindList.push(args[0] as Function);\n\t\t} else {\n\t\t\tunbindList.push(...args as Function[]);\n\t\t}\n\t\tthis.unbindList.push(...unbindList);\n\t}\n\tprotected unbindEvents() {\n\t\tthis.unbindList.forEach(unbindEvent => unbindEvent());\n\t\tthis.unbindList.length = 0;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Widget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport UVMapping = THREE.UVMapping;\nimport GridHelper = THREE.GridHelper;\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport {GridWidget, IGridParamsForAxis} from \"./GridWidget\";\nimport {Utils} from \"../Utils\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {AXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions} from \"../interfaces\";\nimport { ChartColor } from \"../Color\";\n\n/**\n * widget for drawing axis\n */\nexport class AxisWidget extends ChartWidget {\n\tstatic widgetName = 'Axis';\n\tprivate isDestroyed = false;\n\tprivate object3D: Object3D;\n\tprivate axisXObject: Object3D;\n\tprivate axisYObject: Object3D;\n\tprivate updateAxisXRequest: () => void;\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.axisXObject = new Object3D();\n\t\tthis.axisYObject = new Object3D();\n\t\tthis.object3D.add(this.axisXObject);\n\t\tthis.object3D.add(this.axisYObject);\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\n\t\t// canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\n\t\tthis.updateAxisXRequest = Utils.throttle(() => this.updateAxis(AXIS_TYPE.X), 1000);\n\n\t\tthis.onScrollChange(\n\t\t\tthis.chart.screen.options.scrollX,\n\t\t\tthis.chart.screen.options.scrollY\n\t\t);\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\tvar state = this.chart;\n\n\t\tthis.bindEvent(\n\t\t\tstate.screen.onTransformationFrame((options) => {\n\t\t\t\tthis.onScrollChange(options.scrollX, options.scrollY);\n\t\t\t}),\n\t\t\tstate.screen.onZoomFrame((options) => {this.onZoomFrame(options)}),\n\t\t\tstate.onDestroy(() => this.onDestroy()),\n\t\t\tstate.onResize(() => this.onResize())\n\t\t);\n\t}\n\n\tprivate onDestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.unbindEvents();\n\t}\n\n\tprivate onScrollChange(x: number, y: number) {\n\n\t\tif (y != void 0) {\n\t\t\tthis.axisYObject.position.y = y;\n\t\t\tthis.axisXObject.position.y = y;\n\t\t}\n\n\t\tif (x != void 0) {\n\t\t\tthis.axisYObject.position.x = x;\n\t\t\tthis.updateAxisXRequest();\n\t\t}\n\n\t}\n\n\tprivate onResize() {\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\t}\n\n\tprivate setupAxis(orientation: AXIS_TYPE) {\n\n\t\tlet isXAxis = orientation == AXIS_TYPE.X;\n\t\tlet {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tlet canvasWidth = 0, canvasHeight = 0;\n\t\tlet axisOptions: IAxisOptions;\n\n\t\t// clean meshes\n\t\tif (isXAxis) {\n\t\t\tthis.axisXObject.traverse(obj => this.axisXObject.remove(obj));\n\t\t\tcanvasWidth = visibleWidth * 3;\n\t\t\tcanvasHeight = 50;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t} else {\n\t\t\tthis.axisYObject.traverse(obj => this.axisYObject.remove(obj));\n\t\t\tcanvasWidth = 50;\n\t\t\tcanvasHeight = visibleHeight * 3;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t}\n\n\t\tvar texture = Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, (ctx) => {\n\t\t\tlet color = new ChartColor(axisOptions.color);\n\t\t\tctx.beginPath();\n\t\t\tctx.font = this.chart.state.font.m;\n\t\t\tctx.fillStyle = color.rgbaStr;\n\t\t\tctx.strokeStyle = color.rgbaStr;\n\t\t});\n\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tvar axisMesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(canvasWidth, canvasHeight),\n\t\t\tmaterial\n\t\t);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisXObject.add(axisMesh);\n\t\t} else {\n\t\t\taxisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisYObject.add(axisMesh);\n\t\t}\n\n\t\tthis.updateAxis(orientation);\n\n\t}\n\t\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate updateAxis(orientation: AXIS_TYPE) {\n\t\tif (this.isDestroyed) return;\n\t\tvar isXAxis = orientation == AXIS_TYPE.X;\n\t\tvar {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = this.chart.screen.options;\n\t\tvar axisOptions: IAxisOptions;\n\t\tvar axisMesh: Mesh;\n\t\tvar axisGridParams: IGridParamsForAxis;\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh = this.axisXObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t\t} else {\n\t\t\taxisMesh = this.axisYObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t\t}\n\n\t\tvar geometry = axisMesh.geometry as PlaneGeometry;\n\t\tvar canvasWidth = geometry.parameters.width;\n\t\tvar canvasHeight = geometry.parameters.height;\n\t\tvar texture = (axisMesh.material as MeshBasicMaterial).map;\n\t\tvar ctx = texture.image.getContext('2d');\n\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t\t}\n\n\n\t\t// TODO: draw text and lines in different loops\n\t\tvar edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t\tvar startVal = axisGridParams.start  - edgeOffset;\n\t\tvar endVal = axisGridParams.end + edgeOffset;\n\n\t\tctx.beginPath();\n\t\tfor (let val = startVal; val <= endVal; val += axisGridParams.step) {\n\t\t\tlet displayedValue = '';\n\t\t\tif (isXAxis) {\n\t\t\t\tlet pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(pxVal + 0.5, canvasHeight);\n\t\t\t\t// ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\n\t\t\t\tif (axisOptions.dataType == AXIS_DATA_TYPE.DATE) {\n\t\t\t\t\tdisplayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t\t\t\t} else {\n\t\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\t}\n\n\t\t\t\tctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t\t\t} else {\n\t\t\t\tlet pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\n\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(canvasWidth, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\n\n\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\tctx.fillText(displayedValue, canvasWidth - 15 , pxVal + 3);\n\n\t\t\t\t// uncomment for left-side axis\n\t\t\t\t// ctx.moveTo(0, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(5, pxVal + 0.5);\n\t\t\t\t// ctx.fillText(Number(val.toFixed(14)).toString(), 15 , pxVal + 3);\n\t\t\t}\n\t\t\tctx.stroke();\n\t\t}\n\t\t// uncomment to preview canvas borders\n\t\t// ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tif (options.zoomX) {\n\t\t\tthis.updateAxis(AXIS_TYPE.X);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.H)\n\t\t}\n\t\tif (options.zoomY) {\n\t\t\tthis.updateAxis(AXIS_TYPE.Y);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.V)\n\t\t}\n\t}\n\n\t// private temporaryHideAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar timeoutId = setTimeout(() => {\n\t// \t\t\tthis.showAxis(orientation);\n\t// \t}, 200);\n\t//\n\t// \tif (isXAxis) {\n\t// \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tclearTimeout(this.showAxisXTimeout);\n\t// \t\tthis.showAxisXTimeout =\ttimeoutId;\n\t// \t} else {\n\t// \t\tclearTimeout(this.showAxisYTimeout);\n\t// \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tthis.showAxisYTimeout = timeoutId;\n\t// \t}\n\t// }\n\n\t// private showAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar material: MeshBasicMaterial;\n\t// \tif (isXAxis) {\n\t// \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t} else {\n\t// \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t}\n\t// \tthis.updateAxis(orientation);\n\t// \tTweenLite.to(material, 0.3, {opacity: 1});\n\t// }\n\n\tstatic getDateStr(timestamp: number, gridParams: IGridParamsForAxis): string {\n\t\tvar sec = 1000;\n\t\tvar min = sec * 60;\n\t\tvar hour = min * 60;\n\t\tvar day = hour * 60;\n\t\tvar step = gridParams.step;\n\t\tvar d = new Date(timestamp);\n\t\tvar tf = (num: number) => Utils.toFixed(num, 2);\n\t\treturn tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport {ChartWidget} from \"../Widget\";\nimport LineSegments = THREE.LineSegments;\nimport {Utils} from \"../Utils\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {IAxisOptions} from \"../interfaces\";\nimport Color = THREE.Color;\nimport {ChartColor} from \"../Color\";\n\nexport interface IGridParamsForAxis {\n\tstart: number,\n\tend: number,\n\tstep: number,\n\tstepInPx: number,\n\tlength: number,\n\tsegmentsCount: number\n}\n\n/**\n * widget for drawing state grid\n */\nexport class GridWidget extends ChartWidget{\n\tstatic widgetName = 'Grid';\n\tprivate lineSegments: LineSegments;\n\tprivate gridSizeH: number;\n\tprivate gridSizeV: number;\n\tprivate isDestroyed = false;\n\n\tonReadyHandler() {\n\t\tvar {width, height, xAxis, yAxis} = this.chart.state;\n\t\tthis.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\n\t\tthis.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\n\t\tthis.initGrid();\n\t\tthis.updateGrid();\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\t// grid is bigger then screen, so it's no need to update it on each scroll event\n\t\tlet updateGridThrottled = Utils.throttle(() => this.updateGrid(), 1000);\n\t\tthis.bindEvent(this.chart.onScroll(() => updateGridThrottled()),\n\t\t\tthis.chart.screen.onZoomFrame((options) => {\n\t\t\t\tupdateGridThrottled();\n\t\t\t\tthis.onZoomFrame(options);\n\t\t\t}),\n\t\t\tthis.chart.onDestroy(() => {\n\t\t\t\tthis.isDestroyed = true;\n\t\t\t\tthis.unbindEvents();\n\t\t\t}),\n\t\t\tthis.chart.onResize(() => {\n\t\t\t\tthis.updateGrid();\n\t\t\t})\n\t\t);\n\n\t}\n\n\tprivate initGrid() {\n\t\tlet color = new ChartColor(this.chart.state.xAxis.grid.color);\n\t\tlet geometry = new THREE.Geometry();\n\t\tlet material = new THREE.LineBasicMaterial({linewidth: 1, color: color.value, opacity: color.a, transparent: true});\n\t\tlet xLinesCount = this.gridSizeH;\n\t\tlet yLinesCount = this.gridSizeV;\n\t\twhile (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\twhile (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\tthis.lineSegments = new LineSegments(geometry, material);\n\t\tthis.lineSegments.position.setZ(-1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t}\n\n\tprivate updateGrid() {\n\t\tif (this.isDestroyed) return;\n\t\tvar {yAxis, xAxis, width, height} = this.chart.state;\n\t\tvar axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t\tvar axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t\tvar scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t\tvar scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t\tvar gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t\tvar gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t\tvar startXVal = axisXGrid.start + gridScrollXVal;\n\t\tvar startYVal = axisYGrid.start + gridScrollYVal;\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tvar vertices = geometry.vertices;\n\t\tvar lineInd = 0;\n\n\t\tfor (let i =  -this.gridSizeH / 3; i < this.gridSizeH * 2/3; i++) {\n\t\t\tlet value = startXVal + i * axisXGrid.step;\n\t\t\tlet lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tfor (let i =  -this.gridSizeV / 3; i < this.gridSizeV * 2/3; i++) {\n\t\t\tlet value = startYVal + i * axisYGrid.step;\n\t\t\tlet lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\tthis.lineSegments.scale.set(\n\t\t\txAxis.range.scaleFactor * xAxis.range.zoom,\n\t\t\tyAxis.range.scaleFactor * yAxis.range.zoom,\n\t\t\t1\n\t\t)\n\t}\n\n\tprivate getHorizontalLineSegment(yVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\n\t\tvar widthVal = chartState.pxToValueByXAxis(chartState.state.width);\n\t\treturn [\n\t\t\tnew THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0 ),\n\t\t\tnew THREE.Vector3( -widthVal + scrollXVal, localYVal, 0 )\n\t\t];\n\t}\n\n\tprivate getVerticalLineSegment(xVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\n\t\tvar heightVal = chartState.pxToValueByYAxis(chartState.state.height);\n\t\treturn [\n\t\t\tnew THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0 ),\n\t\t\tnew THREE.Vector3(localXVal, -heightVal + scrollYVal, 0 )\n\t\t];\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar {xAxis, yAxis} = this.chart.state;\n\t\tif (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t\tif (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t}\n\n\n\t// TODO: move this code to core\n\tstatic getGridParamsForAxis(axisOptions: IAxisOptions, axisWidth: number, zoom: number): IGridParamsForAxis {\n\t\tlet axisRange = axisOptions.range;\n\t\tlet from = axisRange.from;\n\t\tlet to = axisRange.to;\n\t\tlet axisLength = to - from;\n\t\tlet gridStep = 0;\n\t\tlet gridStepInPixels = 0;\n\t\tlet minGridStepInPixels = axisOptions.grid.minSizePx;\n\t\tlet axisLengthStr = String(axisLength);\n\t\tlet axisLengthPointPosition = axisLengthStr.indexOf('.');\n\t\tlet intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\n\t\tlet gridStepFound = false;\n\t\tlet digitPos = 0;\n\t\twhile (!gridStepFound) {\n\n\t\t\tlet power = intPartLength - digitPos - 1;\n\t\t\tlet multiplier = (Math.pow(10, power) || 1);\n\t\t\tlet dividers = [1, 2, 5];\n\t\t\tfor (let dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t\t\t\tlet nextGridStep = multiplier / dividers[dividerInd];\n\t\t\t\tlet nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t\t\t\tif (nextGridStepInPixels >= minGridStepInPixels) {\n\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t} else {\n\t\t\t\t\tgridStepFound = true;\n\t\t\t\t\tif (gridStep === 0) {\n\t\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!gridStepFound) digitPos++\n\n\t\t}\n\n\t\tvar gridStart = Math.floor(from / gridStep) * gridStep;\n\t\tvar gridEnd = Math.floor(to / gridStep) * gridStep;\n\n\t\treturn {\n\t\t\tstart: gridStart,\n\t\t\tend: gridEnd,\n\t\t\tstep: gridStep,\n\t\t\tstepInPx: gridStepInPixels,\n\t\t\tlength: gridEnd - gridStart,\n\t\t\tsegmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t\t}\n\t}\n\t\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/GridWidget.ts\n **/","export declare type TChartColor = string | number;\n\n\nexport class ChartColor {\n\n\t/**!\n\t * @preserve $.parseColor\n\t * Copyright 2011 THEtheChad Elliott\n\t * Released under the MIT and GPL licenses.\n\t */\n\t/**\n\t * Parse hex/rgb{a} color syntax.\n\t * @input string\n\t * @returns array [r,g,b{,o}]\n\t */\n\tstatic parseColor(color: string): number[] {\n\n\t\tvar cache: any\n\t\t\t, p = parseInt // Use p as a byte saving reference to parseInt\n\t\t\t, color = color.replace(/\\s\\s*/g, '') // Remove all spaces\n\t\t\t;//var\n\n\t\t// Checks for 6 digit hex and converts string to integer\n\t\tif (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\n\n\t\t// Checks for 3 digit hex and converts string to integer\n\t\telse if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\n\t\t\tcache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\n\n\n\t\t// Checks for 6 digit hex with alpha and converts string to integer\n\t\telse if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\n\n\t\t// Checks for rgba and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3], +cache[4]];\n\n\t\t// Checks for rgb and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3]];\n\n\t\t// Otherwise throw an exception to make debugging easier\n\t\telse throw Error(color + ' is not supported by parseColor');\n\n\t\t// Performs RGBA conversion by default\n\t\tisNaN(cache[3]) && (cache[3] = 1);\n\t\treturn cache;\n\t\t// Adds or removes 4th value based on rgba support\n\t\t// Support is flipped twice to prevent erros if\n\t\t// it's not defined\n\t\t//return cache.slice(0,3 + !!$.support.rgba);\n\t}\n\n\tr: number;\n\tg: number;\n\tb: number;\n\ta: number;\n\tvalue: number;\n\thexStr: string;\n\trgbaStr: string;\n\n\tconstructor (color: TChartColor) {\n\t\tthis.set(color);\n\t}\n\n\tset(color: TChartColor) {\n\t\tif (typeof color == 'number') {\n\t\t\tcolor = (color as number).toString(16);\n\t\t\tcolor = '#' + '0'.repeat(6 - color.length) + color;\n\t\t}\n\t\tlet colorStr = color as string;\n\t\tlet rgba = ChartColor.parseColor(colorStr);\n\t\tthis.r = rgba[0];\n\t\tthis.g = rgba[1];\n\t\tthis.b = rgba[2];\n\t\tthis.a = rgba[3];\n\t\tthis.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\n\t\tthis.hexStr = '#' + this.value.toString(16);\n\t\tthis.rgbaStr = `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Color.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {ITrendOptions} from \"../Trend\";\nimport {Utils} from \"../Utils\";\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport { ChartColor } from '../Color';\n\nexport class TrendsGradientWidget extends TrendsWidget<TrendGradient> {\n\tstatic widgetName = \"TrendsGradient\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendGradient;\n\t}\n}\n\n\nexport class TrendGradient extends TrendWidget {\n\tprivate gradient: Mesh;\n\tprivate visibleSegmentsCnt = 0;\n\tprivate segmentsIds: Uint16Array;\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.hasBackground;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.trend = chartState.trendsManager.getTrend(trendName);\n\t\tthis.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments)\n\t\tthis.initGradient();\n\t\tthis.updateSegments();\n\t}\n\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\t// TODO: optimize updateSegments for onDisplayedRangeChanged\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.chart.onZoom(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t}\n\n\n\tgetObject3D(): Object3D {\n\t\treturn this.gradient;\n\t}\n\n\n\tinitGradient() {\n\t\tlet geometry = new Geometry();\n\n\n\t\tfor (let i = 0; i < this.segmentsIds.length; i++) {\n\t\t\tgeometry.vertices.push(\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3()\n\t\t\t);\n\t\t\tlet ind = i * 4;\n\n\t\t\t// gradient segment scheme\n\t\t\t//\n\t\t\t// vert0 +---+ vert3\n\t\t\t//       |\\  |\n\t\t\t// face1 | \\ | face2\n\t\t\t// \t     |  \\|\n\t\t\t// vert1 +---+ vert2\n\n\t\t\tgeometry.faces.push(\n\t\t\t\tnew THREE.Face3( ind, ind + 1, ind + 2 ),\n\t\t\t\tnew THREE.Face3( ind + 3, ind, ind + 2 )\n\t\t\t);\n\t\t}\n\n\t\tlet color = new ChartColor(this.trend.getOptions().backgroundColor);\n\t\tthis.gradient = new THREE.Mesh(\n\t\t\tgeometry,\n\t\t\tnew THREE.MeshBasicMaterial( {color: color.value, transparent: true, opacity: color.a} )\n\t\t);\n\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.gradient.frustumCulled = false;\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tvar currentScale = this.gradient.scale;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegmentsManager: TrendSegmentsManager) {\n\t\tlet animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n\t\tfor (let i = 0; i < this.visibleSegmentsCnt; i++) {\n\t\t\tlet segmentId = this.segmentsIds[i];\n\t\t\tif (!animatedSegmentsIds.includes(segmentId)) continue;\n\t\t\tthis.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n\t\t}\n\t\t(this.gradient.geometry as PlaneGeometry).verticesNeedUpdate = true;\n\t}\n\n\n\tprivate updateSegments() {\n\t\tlet geometry = this.gradient.geometry as PlaneGeometry;\n\t\tlet {\n\t\t\tsegments: trendSegments,\n\t\t\tfirstDisplayedSegmentInd: segmentInd,\n\t\t\tlastDisplayedSegmentInd\n\t\t} = this.trend.segmentsManager;\n\t\tlet prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n\t\tthis.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n\t\tlet segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n\n\t\tif (segmentsToProcessCnt > this.segmentsIds.length) {\n\t\t\tUtils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\n\t\t}\n\n\t\t// setup visible segments and collapse invisible\n\t\tfor (let i = 0; i <= segmentsToProcessCnt; i++) {\n\t\t\tif (segmentInd <= lastDisplayedSegmentInd) {\n\t\t\t\tlet segment = trendSegments[segmentInd];\n\t\t\t\tthis.setupSegmentVertices(i, segment.currentAnimationState);\n\t\t\t\tthis.segmentsIds[i] = segment.id;\n\t\t\t\tsegmentInd++;\n\t\t\t} else {\n\t\t\t\tthis.setupSegmentVertices(i);\n\t\t\t}\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\t/**\n\t * setup gradient segment by segmentState\n\t * if segmentState is undefined, then collapse vertices to 0,0,0\n\t */\n\tprivate setupSegmentVertices(segmentInd: number, segmentState?: ITrendSegmentState) {\n\t\tlet gradientSegmentInd = segmentInd * 4;\n\t\tlet vertices = (this.gradient.geometry as PlaneGeometry).vertices;\n\t\tlet\ttopLeft = vertices[gradientSegmentInd];\n\t\tlet\tbottomLeft = vertices[gradientSegmentInd + 1];\n\t\tlet\tbottomRight = vertices[gradientSegmentInd + 2];\n\t\tlet\ttopRight = vertices[gradientSegmentInd + 3];\n\t\tlet screenHeightVal = Math.max(\n\t\t\tthis.chart.pxToValueByYAxis(this.chart.state.height),\n\t\t\tthis.chart.screen.pxToValueByYAxis(this.chart.state.height)\n\t\t);\n\n\t\tif (segmentState) {\n\t\t\tlet startX = this.toLocalX(segmentState.startXVal);\n\t\t\tlet startY = this.toLocalY(segmentState.startYVal);\n\t\t\tlet endX = this.toLocalX(segmentState.endXVal);\n\t\t\tlet endY = this.toLocalY(segmentState.endYVal);\n\t\t\ttopLeft.set(startX, startY, 0);\n\t\t\ttopRight.set(endX, endY, 0);\n\t\t\tbottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n\t\t\tbottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n\t\t} else {\n\t\t\ttopLeft.set(0, 0, 0);\n\t\t\ttopRight.set(0, 0, 0);\n\t\t\tbottomLeft.set(0, 0, 0);\n\t\t\tbottomRight.set(0, 0, 0);\n\t\t}\n\n\t}\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsGradientWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport {ITrendOptions, ITrendData, Trend} from \"../Trend\";\nimport Vector2 = THREE.Vector2;\nimport Vector3 = THREE.Vector3;\nimport {TrendSegmentsManager} from \"../TrendSegmentsManager\";\nimport {IScreenTransformOptions} from \"../Screen\";\n\n\nexport interface ITrendWidgetClass<TrendWidgetType> {\n\tnew (chart: Chart, trendName: string): TrendWidgetType;\n\twidgetIsEnabled(trendOptions: ITrendOptions, chart: Chart): boolean;\n}\n\n/**\n * abstract manager class for all trends widgets\n */\nexport abstract class TrendsWidget<TrendWidgetType extends TrendWidget> extends ChartWidget {\n\tprotected abstract getTrendWidgetClass(): ITrendWidgetClass<TrendWidgetType>;\n\tprotected object3D: Object3D;\n\tprotected widgets: {[trendName: string]: TrendWidgetType} = {};\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.onTrendsChange();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tvar state = this.chart;\n\t\tstate.onTrendsChange(() => this.onTrendsChange());\n\t\tstate.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, changedOptions, newData)\n\t\t});\n\t}\n\n\tprotected onTrendsChange() {\n\t\tvar trendsOptions = this.chart.state.trends;\n\t\tvar TrendWidgetClass = this.getTrendWidgetClass();\n\t\tfor (let trendName in trendsOptions) {\n\t\t\tlet trendOptions = trendsOptions[trendName];\n\t\t\tlet widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\n\t\t\tif (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t\t\t\tthis.createTrendWidget(trendName);\n\t\t\t} else if (!widgetCanBeEnabled && this.widgets[trendName]){\n\t\t\t\tthis.destroyTrendWidget(trendName);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTrendChange(trendName: string, changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar widget = this.widgets[trendName];\n\t\tif (!widget) return;\n\t\twidget.onTrendChange(changedOptions);\n\t\tif (newData) {\n\t\t\tvar data = this.chart.getTrend(trendName).getData();\n\t\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\t\tisAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t\t}\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate createTrendWidget(trendName: string) {\n\t\tvar WidgetConstructor = this.getTrendWidgetClass();\n\t\tvar widget = new WidgetConstructor(this.chart, trendName);\n\t\tthis.widgets[trendName] = widget;\n\t\tvar widgetObject = widget.getObject3D();\n\t\twidgetObject.name = trendName;\n\t\tthis.object3D.add(widget.getObject3D());\n\t}\n\n\tprivate destroyTrendWidget(trendName: string) {\n\t\tthis.widgets[trendName].onDestroy();\n\t\tdelete this.widgets[trendName];\n\t\tvar widgetObject = this.object3D.getObjectByName(trendName);\n\t\tthis.object3D.remove(widgetObject);\n\t}\n}\n\n/**\n * based class for all trends widgets\n */\nexport abstract class TrendWidget {\n\tprotected trend: Trend;\n\tprotected unbindList: Function[] = [];\n\n\tconstructor (protected chart: Chart, protected trendName: string) {\n\t\tthis.trend = chart.trendsManager.getTrend(trendName);\n\t\tthis.chart = chart;\n\t\tthis.bindEvents();\n\t}\n\tabstract getObject3D(): Object3D;\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions, chart: Chart) {\n\t\treturn trendOptions.enabled;\n\t}\n\tappendData(newData: ITrendData) {};\n\tprependData(newData: ITrendData) {};\n\tonTrendChange(changedOptions?: ITrendOptions) {}\n\tonDestroy() {\n\t\tfor (let unsubscriber of this.unbindList) {\n\t\t\tunsubscriber();\n\t\t}\n\t}\n\tprotected onSegmentsAnimate(segments: TrendSegmentsManager) {\n\t}\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onTransformationFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onZoom() {\n\t}\n\n\n\tprotected bindEvents() {\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onAnimationFrame(\n\t\t\t(trendPoints: TrendSegmentsManager) => this.onSegmentsAnimate(trendPoints)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.screen.onTransformationFrame(\n\t\t\t(options) => this.onTransformationFrame(options)\n\t\t));\n\t\t\n\t\tthis.bindEvent(this.chart.screen.onZoomFrame(\n\t\t\t(options) => this.onZoomFrame(options)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.onZoom(() => this.onZoom()));\n\t};\n\n\tprotected bindEvent(unbind: Function) {\n\t\tthis.unbindList.push(unbind);\n\t}\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport { TrendSegmentsManager, ITrendSegmentState } from \"../TrendSegmentsManager\";\nimport LineSegments = THREE.LineSegments;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ITrendOptions, TREND_TYPE } from '../Trend';\nimport { Utils } from '../Utils';\n\n\n/**\n * widget for drawing trends lines\n */\nexport class TrendsLineWidget extends TrendsWidget<TrendLine> {\n\tstatic widgetName = \"TrendsLine\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendLine;\n\t}\n}\n\ninterface ILineSegment {\n\tind: number,\n\tsegmentId: number\n}\n\nexport class TrendLine extends TrendWidget {\n\tprivate material: LineBasicMaterial;\n\tprivate lineSegments: LineSegments;\n\tprivate vertices: Vector3[];\n\n\t// contains indexes of free segments\n\tprivate freeSegmentsInds: number[] = [];\n\n\t// contains segments to display\n\tprivate displayedSegments: {[segmentId: number]: ILineSegment} = {};\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.LINE;\n\t}\n\t\n\tconstructor (chart: Chart, trendName: string) {\n\t\tsuper(chart, trendName);\n\t\tvar options = this.trend.getOptions();\n\t\tthis.material = new LineBasicMaterial( { color: options.lineColor, linewidth: options.lineWidth } );\n\t\tthis.initLine();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroySegments();\n\t\t\tthis.setupSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupSegments();\n\t\t}));\n\t}\n\t\n\tprivate initLine() {\n\t\tlet geometry = new Geometry();\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.lineSegments = new LineSegments(geometry, this.material);\n\t\tthis.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t\tfor (let i = 0; i < this.chart.state.maxVisibleSegments; i++) {\n\t\t\tgeometry.vertices.push(new  Vector3(), new Vector3());\n\t\t\tthis.freeSegmentsInds.push(i);\n\t\t}\n\t\tthis.vertices = geometry.vertices;\n\t\tthis.setupSegments();\n\t}\n\n\tprivate setupSegments() {\n\t\tlet geometry = this.lineSegments.geometry as Geometry;\n\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.displayedSegments) {\n\t\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\t\tlet segment = this.trend.segmentsManager.segments[lineSegment.segmentId];\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupSegment(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate setupSegment(segmentId: number, segmentState: ITrendSegmentState) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tif (!lineSegment) {\n\t\t\tif (this.freeSegmentsInds.length == 0) Utils.error('Max allocated segments reached');\n\t\t\tlet ind = this.freeSegmentsInds.pop();\n\t\t\tlineSegment = this.displayedSegments[segmentId] = {segmentId, ind};\n\t\t}\n\t\tlet segmentInd = lineSegment.ind;\n\t\tlet lineStartVertex = this.vertices[segmentInd * 2];\n\t\tlet lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t\tlineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t\tlineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t}\n\n\tprivate destroySegments() {\n\t\tfor (let segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t}\n\n\tprivate destroySegment(segmentId: number) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tlet lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t\tlet lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t\tlineStartVertex.set(0, 0, 0);\n\t\tlineEndVertex.set(0, 0, 0);\n\t\tdelete this.displayedSegments[segmentId];\n\t\tthis.freeSegmentsInds.push(lineSegment.ind);\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.lineSegments.scale;\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.displayedSegments[segmentId]) continue;\n\t\t\tthis.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsLineWidget.ts\n **/","\n\nimport { TrendsWidget, TrendWidget } from './TrendsWidget';\nimport { Chart } from '../Chart';\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport Vector3 = THREE.Vector3;\nimport Mesh = THREE.Mesh;\nimport Line = THREE.Line;\nimport BoxGeometry = THREE.BoxGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { TREND_TYPE, ITrendOptions } from '../Trend';\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport remove = THREE.Cache.remove;\nimport { Utils } from '../Utils';\n\n\nconst RISE_COLOR = 0x2CAC40;\nconst FALL_COLOR = 0xEE5533;\nconst MARGIN_PERCENT = 0.3;\nconst MAX_CANDLES = 100;\n\n/**\n * widget for drawing trends candles\n */\nexport class TrendsCandlesWidget extends TrendsWidget<TrendCandlesWidget> {\n\tstatic widgetName = \"TrendsCandles\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendCandlesWidget;\n\t}\n}\n\n\nexport class TrendCandlesWidget extends TrendWidget {\n\tprivate scaleXFactor: number;\n\tprivate scaleYFactor: number;\n\tprivate object3D: Object3D;\n\t\n\t// contains indexes of free candles\n\tprivate freeCandlesInds: number[] = [];\n\tprivate candlesPool: CandleWidget[] = [];\n\tprivate candles: {[segmentId: number]: CandleWidget} = {};\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.CANDLE;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.initObject();\n\t}\n\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroyCandles();\n\t\t\tthis.setupCandles();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupCandles();\n\t\t}));\n\t}\n\t\n\tprivate initObject() {\n\t\tlet stateData = this.chart.state;\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = stateData.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = stateData.yAxis.range;\n\t\tthis.scaleXFactor = scaleXFactor;\n\t\tthis.scaleYFactor = scaleYFactor;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.object3D.frustumCulled = false;\n\t\tfor (let i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t\tthis.setupCandles();\n\t}\n\n\tprivate setupCandles() {\n\n\t\t// remove invisible\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.candles) {\n\t\t\tlet segment = this.candles[segmentId].segment;\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupCandle(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t}\n\n\tprivate destroyCandles() {\n\t\tfor (let segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t}\n\n\tprivate destroyCandle(segmentId: number) {\n\t\tlet candle = this.candles[segmentId];\n\t\tthis.object3D.remove(candle.getObject3D());\n\t\tdelete this.candles[segmentId];\n\t}\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.object3D.scale;\n\t\tif (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t}\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.candles[segmentId]) continue;\n\t\t\tlet segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t\t\tthis.setupCandle(segmentId, segmentState);\n\t\t}\n\t}\n\n\t/**\n\t * create or modify candle\n\t */\n\tprivate setupCandle(candleId: number, segmentState: ITrendSegmentState) {\n\t\tlet candleInd = candleId % MAX_CANDLES;\n\n\t\t// get candle from candlesPool to avoid creating new Objects by performance reasons\n\t\tlet candle = this.candlesPool[candleInd];\n\t\tif (!candle) {\n\t\t\tcandle = this.candlesPool[candleInd] = new CandleWidget();\n\t\t}\n\n\t\tif (!this.candles[candleId]) {\n\t\t\tthis.candles[candleId] = candle;\n\t\t\tthis.object3D.add(candle.getObject3D());\n\t\t}\n\t\tcandle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t\tcandle.setSegment(segmentState);\n\t}\n\n\ttoLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\ttoLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\ttoLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\nclass CandleWidget {\n\tsegment: ITrendSegmentState;\n\tprivate rect: Mesh;\n\tprivate vLine: Line;\n\tprivate hLine: Line;\n\tconstructor () {\n\t\tthis.initObject();\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.rect;\n\t}\n\n\tsetSegment(segment: ITrendSegmentState) {\n\t\tthis.segment = segment;\n\t\tlet color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\n\t\t// update rect\n\t\tlet geometry = this.rect.geometry as PlaneGeometry;\n\t\tlet material = this.rect.material as MeshBasicMaterial;\n\t\tlet width = segment.endXVal - segment.startXVal;\n\t\twidth -= width * MARGIN_PERCENT;\n\t\tlet height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t\tlet [leftTop, rightTop, leftBottom, rightBottom] = geometry.vertices;\n\t\tleftTop.set(-width / 2, height / 2, 0);\n\t\trightTop.set(width / 2, height / 2, 0);\n\t\tleftBottom.set(-width / 2, -height / 2, 0);\n\t\trightBottom.set(width / 2, -height / 2, 0);\n\n\t\t// prevent to draw bars with height < 1px\n\t\tif (Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t\t\tleftBottom.setY(leftBottom.y + 1);\n\t\t\trightBottom.setY(rightBottom.y + 1);\n\t\t}\n\n\t\tmaterial.color.set(color);\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\t// update lines\n\t\tlet vLineGeometry = this.vLine.geometry as Geometry;\n\t\tlet vLineMaterial = this.vLine.material as LineBasicMaterial;\n\t\tlet lineTop = segment.maxYVal - segment.yVal;\n\t\tlet lineBottom = segment.minYVal - segment.yVal;\n\t\tvLineGeometry.vertices[0].set(0, lineTop, 0);\n\t\tvLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t\tvLineMaterial.color.set(color);\n\t\tvLineGeometry.verticesNeedUpdate = true;\n\n\t\tlet hLineGeometry = this.hLine.geometry as Geometry;\n\t\tlet hLineMaterial = this.hLine.material as LineBasicMaterial;\n\t\tlet lineLeft = (-width) / 2;\n\t\tlet lineRight = width / 2;\n\t\thLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t\thLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t\thLineMaterial.color.set(color);\n\t\thLineGeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate initObject() {\n\t\tthis.rect = new Mesh(\n\t\t\tnew PlaneGeometry(1, 1),\n\t\t\tnew MeshBasicMaterial()\n\t\t);\n\t\tlet vLineGeometry = new Geometry();\n\t\tlet hLineGeometry = new Geometry();\n\t\tvLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\thLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\tthis.vLine = new Line(vLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.hLine = new Line(hLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.rect.add(this.vLine);\n\t\tthis.rect.add(this.hLine);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsCandleWidget.ts\n **/","export * from './deps'\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/index.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Vector3 = THREE.Vector3;\nimport {Utils} from \"../Utils\";\nimport Line = THREE.Line;\nimport Mesh = THREE.Mesh;\nimport Color = THREE.Color;\nimport Texture = THREE.Texture;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport {AxisMark, AxisMarks} from \"../AxisMarks\";\nimport {AXIS_TYPE} from \"../interfaces\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ChartColor } from '../Color';\n\n\n/**\n * widget for shows marks on axis\n */\nexport class AxisMarksWidget extends ChartWidget {\n\tstatic widgetName = 'AxisMarks';\n\n\tprivate object3D: Object3D;\n\tprivate axisMarksWidgets: AxisMarkWidget[] = [];\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tlet {xAxisMarks, yAxisMarks} = this.chart;\n\n\t\tlet items = xAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t\titems = yAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprivate createAxisMark(axisMark: AxisMark) {\n\t\tvar axisMarkWidget = new AxisMarkWidget(this.chart, axisMark);\n\t\tthis.axisMarksWidgets.push(axisMarkWidget);\n\t\tthis.object3D.add(axisMarkWidget.getObject3D());\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.bindEvent(\n\t\t\tthis.chart.screen.onTransformationFrame(() => this.updateMarksPositions()),\n\t\t\tthis.chart.onResize(() => this.updateMarksPositions())\n\t\t);\n\t}\n\n\tprivate updateMarksPositions() {\n\t\tfor (let widget of this.axisMarksWidgets) widget.updatePosition();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n}\n\n\n\nconst DEFAULT_INDICATOR_RENDER_FUNCTION = (axisMarkWidget: AxisMarkWidget, ctx: CanvasRenderingContext2D) => {\n\tvar axisMark = axisMarkWidget.axisMark;\n\tctx.fillStyle = axisMark.options.lineColor;\n\tctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\tlet xCoord = 15;\n\n\tif (axisMark.axisType == AXIS_TYPE.Y) {\n\t\tctx.textAlign = 'end';\n\t\txCoord = axisMarkWidget.indicatorWidth;\n\t}\n\n\tctx.fillText(axisMark.options.title, xCoord, 20);\n\tif (!axisMark.options.showValue) return;\n\n\tctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n\tctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n};\n\nlet INDICATOR_POS_Z = 0.1;\n\nclass AxisMarkWidget {\n\tstatic typeName = 'simple';\n\taxisMark: AxisMark;\n\tindicatorWidth = 128;\n\tindicatorHeight = 64;\n\tprotected indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\tprotected chartState: Chart;\n\tprotected axisType: AXIS_TYPE;\n\tprotected object3D: Object3D;\n\tprotected line: Line;\n\tprotected indicator: Mesh;\n\tprotected moveAnimation: TweenLite;\n\tprotected frameValue: number;\n\t\n\n\tconstructor(chartState: Chart, axisMark: AxisMark) {\n\t\tthis.chartState = chartState;\n\t\tthis.axisMark = axisMark;\n\t\tthis.axisType = axisMark.axisType;\n\t\tthis.frameValue = axisMark.options.value;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.position.setZ(-0.1);\n\n\t\tthis.line = this.createLine();\n\t\tthis.object3D.add(this.line);\n\t\tthis.indicator = this.createIndicator();\n\t\tthis.object3D.add(this.indicator);\n\t\tthis.renderIndicator();\n\t\tthis.updatePosition();\n\t\tthis.bindEvents();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected createLine(): Line {\n\t\tvar {lineWidth, lineColor} = this.axisMark.options;\n\t\tvar lineGeometry = new Geometry();\n\n\t\tlineGeometry.vertices.push(new Vector3(0,0,0), new Vector3(0,0,0));\n\t\treturn new Line(\n\t\t\tlineGeometry,\n\t\t\tnew LineBasicMaterial( { color: new ChartColor(lineColor).value, linewidth: lineWidth})\n\t\t);\n\t}\n\n\tprotected createIndicator(): Mesh {\n\t\tvar {indicatorWidth: width, indicatorHeight: height} = this;\n\t\tvar texture = Utils.createPixelPerfectTexture(width, height, (ctx) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.font = \"10px Arial\";\n\t\t});\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\treturn new Mesh(\n\t\t\tnew THREE.PlaneGeometry(width, height),\n\t\t\tmaterial\n\t\t);\n\t}\n\n\tprotected renderIndicator() {\n\t\tvar texture = (this.indicator.material as MeshBasicMaterial).map as Texture;\n\t\tvar ctx = (texture.image as HTMLCanvasElement).getContext('2d');\n\t\tDEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.axisMark.onDisplayedValueChange(() => this.renderIndicator());\n\t\tthis.axisMark.onValueChange(() => this.onValueChangeHandler());\n\t}\n\n\tprivate onValueChangeHandler() {\n\t\t// move mark to new position with animation\n\t\tif (this.moveAnimation) this.moveAnimation.kill();\n\t\tvar animations = this.chartState.state.animations;\n\t\tvar targetValue = this.axisMark.options.value;\n\t\tvar cb = () => {\n\t\t\tthis.updatePosition();\n\t\t};\n\t\tif (animations.enabled) {\n\t\t\tthis.moveAnimation = TweenLite.to(\n\t\t\t\tthis, animations.trendChangeSpeed,\n\t\t\t\t{frameValue: targetValue, ease: animations.trendChangeEase}\n\t\t\t);\n\t\t\tthis.moveAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.frameValue = targetValue;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tupdatePosition()  {\n\t\tlet chartState = this.chartState;\n\t\tlet screen = chartState.screen;\n\t\tlet isXAxis = this.axisType == AXIS_TYPE.X;\n\t\tlet lineGeometry = (this.line.geometry as Geometry);\n\t\tlet hasStickMode = this.axisMark.options.stickToEdges;\n\t\tlet {width, height} = this.chartState.state;\n\n\t\tif (isXAxis) {\n\t\t\t// TODO: make stickToEdges mode for AXIS_TYPE.X \n\t\t\tthis.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\tlineGeometry.vertices[1].setY(height);\n\t\t\tthis.indicator.position.set(\n\t\t\t\tthis.indicatorWidth / 2,\n\t\t\t\tchartState.state.height - this.indicatorHeight / 2,\n\t\t\t\tINDICATOR_POS_Z\n\t\t\t);\n\t\t} else {\n\t\t\tlet val = this.frameValue;\n\t\t\tlet bottomVal = screen.getBottomVal();\n\t\t\tlet topVal = screen.getTopVal();\n\t\t\tlet needToStickOnTop = hasStickMode && val > topVal;\n\t\t\tlet needToStickOnBottom = hasStickMode && val < bottomVal;\n\t\t\tlet centerYVal = screen.getCenterYVal();\n\t\t\tthis.object3D.position.x = screen.getLeft();\n\t\t\tif (needToStickOnTop) {\n\t\t\t\tthis.object3D.position.y = screen.getTop();\n\t\t\t} else if (needToStickOnBottom) {\n\t\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\t} else {\n\t\t\t\tthis.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t\t\t}\n\t\t\tlineGeometry.vertices[1].setX(width);\n\n\t\t\tlet indicatorPosY = val > centerYVal ? -35 : 10;\n\t\t\tthis.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t\t}\n\t\tlineGeometry.verticesNeedUpdate = true;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisMarksWidget.ts\n **/","export * from './AxisWidget';\nexport * from './GridWidget';\nexport * from './TrendsWidget';\nexport * from './TrendsLineWidget';\nexport * from './TrendsGradientWidget';\n\n// TODO: remove\nexport * from './AxisMarksWidget';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/index.ts\n **/"],"sourceRoot":""}