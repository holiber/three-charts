{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ThreeChart.js","webpack:///webpack/bootstrap 1f87fa5d0cf1819166dc","webpack:///./index.ts","webpack:///./src/index.ts","webpack:///./src/deps/deps.ts","webpack:///./~/three/examples/js/libs/stats.min.js","webpack:///./~/is-plain-object/index.js","webpack:///./~/isobject/index.js","webpack:///./~/eventemitter2/lib/eventemitter2.js","webpack:///./src/polyfills/es6-promise.js","webpack:///./~/css-element-queries/src/ResizeSensor.js","webpack:///./src/ChartView.ts","webpack:///./src/Plugin.ts","webpack:///./src/Utils.ts","webpack:///./src/EventEmmiter.ts","webpack:///./src/deps/index.ts","webpack:///./src/Chart.ts","webpack:///./src/Trend.ts","webpack:///./src/TrendSegmentsManager.ts","webpack:///./src/TrendsManager.ts","webpack:///./src/Screen.ts","webpack:///./src/AxisMarks.ts","webpack:///./src/interfaces.ts","webpack:///./src/AnimationManager.ts","webpack:///./src/Easing.ts","webpack:///./src/Widget.ts","webpack:///./src/widgets/AxisWidget.ts","webpack:///./src/widgets/GridWidget.ts","webpack:///./src/Color.ts","webpack:///./src/widgets/TrendsGradientWidget.ts","webpack:///./src/widgets/TrendsWidget.ts","webpack:///./src/widgets/TrendsLineWidget.ts","webpack:///./src/widgets/TrendsCandleWidget.ts","webpack:///./src/widgets/AxisMarksWidget.ts","webpack:///./src/widgets/index.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","__export","hasOwnProperty","window","TweenLite","TweenMax","Stats","isPlainObject","EE2","es6_promise_1","Promise","ResizeSensor","h","a","appendChild","dom","k","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","g","performance","Date","now","e","r","Panel","f","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","Infinity","Math","round","devicePixelRatio","u","n","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","min","max","drawImage","isObject","isObjectObject","o","Object","prototype","toString","ctor","prot","constructor","val","Array","isArray","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_isArray","obj","defaultMaxListeners","init","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","searchListenerTree","handlers","type","tree","i","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","push","concat","**","growListenerTree","listener","split","slice","name","shift","warned","console","error","trace","setMaxListeners","event","once","fn","many","ttl","Error","off","apply","arguments","_origin","on","emit","_all","args","handler","ns","onAny","addListener","leafs","iLeaf","position","splice","offAny","fns","removeListener","removeAllListeners","listenersAny","EventEmitter2","element","callback","EventQueue","add","ev","j","getComputedStyle","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","resizeSensor","className","styleChild","innerHTML","fixed","absolute","expand","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","el","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","detach","removeChild","__extends","__","create","Plugin_1","PerspectiveCamera","THREE","Chart_1","Widget_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsGradientWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","deps_1","Color_1","AxisMarksWidget_1","ChartBlankView","state","$container","pluginsAndWidgets","_this","widgets","Utils","parseInt","plugins","filter","pluginOrWidget","ChartPlugin","chart","Chart","zoomThrottled","throttle","zoomValue","origin","zoom","_a","w","showStats","autoRender","scene","Scene","isStopped","enabled","renderer","ChartView","renderers","antialias","alpha","backgroundColor","Color","setSize","setPixelRatio","setClearColor","value","$el","stats","setupCamera","initWidgets","bindEvents","renderLoop","preinstalledWidgetsClasses","preinstalledWidgets","customWidgets","forEach","ChartWidget","pluginWidgetClasses","providedWidgets","map","WidgetClass","widget","setupChart","onReadyHandler","getObject3D","isDestroyed","render","fpsLimit","fps","delay_1","setTimeout","requestAnimationFrame","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","getTrend","trendName","setState","controls","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","options","onScreenTransformHandler","onResize","onChartResize","remove","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","autoScroll","oldTrendsMaxX","prevState","computedData","trends","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","xAxis","range","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","autoScrollIsEnabled","then","CanvasRenderer","WebGLRenderer","_super","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsGradientWidget","AxisMarksWidget","EventEmmiter_1","DEFAULT_CONFIG","installPluginWidgets","config","initialState","deepMerge","NAME","ee","bindEvent","onInitialStateApplied","onInitialStateAppliedHandler","onReady","onDestroy","onDestroyHandler","onPluginsStateChange","changedPluginsStates","onStateChanged","getOptions","pluginsState","changedState","_i","unsubscriber","deepmerge","target","src","mergeArrays","array","dst","indexOf","keys","key","obj1","obj2","deepCopy","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","floor","intStr","lengthDiff","repeat","afterPointDigitsCount","afterPointStr","substr","createTexture","canvas","ctx","texture","Texture","needsUpdate","createNearestTexture","minFilter","NearestFilter","createPixelPerfectTexture","magFilter","msg","warn","getUid","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","random","copyProps","srcObject","dstObject","props","excludeProps","eventName","subscribe","listenersCount","Vector3","Trend_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","AnimationManager_1","Easing_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","LIGHT_BLUE","AXIS_RANGE_TYPE","ALL","from","to","padding","start","margin","dataType","AXIS_DATA_TYPE","NUMBER","grid","minSizePx","color","marks","yAxis","RELATIVE_END","animations","trendChangeSpeed","trendChangeEase","zoomSpeed","scrollSpeed","scrollEase","EASING","Quadratic","Out","zoomEase","autoScrollSpeed","autoScrollEase","Linear","None","trendDefaultState","TREND_TYPE","LINE","data","maxSegmentLength","lineWidth","lineColor","hasBackground","hasBeacon","settingsForTypes","CANDLE","minSegmentLengthInPx","maxSegmentLengthInPx","eventEmitterMaxListeners","maxVisibleSegments","animationManager","AnimationManager","isReady","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","xAxisMarks","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","initListeners","onChange","onTrendChange","onZoom","tick","newState","eventData","silent","stateData","newStateObj","changedProps","trendsData","trendOptions","newStateContainsData","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","zeroVal","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","getPlugin","changedTrends","newData","handleTrendsChange","animationOptions","isAnimationsEnabled","setAimationsEnabled","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","maxLength","rangeLessThenMinValue","minLength","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","abs","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","currentRange","nextRange","newScroll","resolve","animationTime","zoomToRange","scrollToEnd","endXVal","getPointOnXAxis","xVal","getPointOnYAxis","yVal","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","TrendSegmentsManager_1","EVENTS","PREPEND_REQUEST","Trend","chartState","minYVal","maxYVal","dataset","prepareData","segmentsManager","TrendSegmentsManager","checkForPrependRequest","changedOptions","getCalculatedOptions","appendData","rawData","getData","updatedTrendData","changeData","prependData","allData","newData_1","item","statePatch","fromX","toX","filteredData","data_1","getFirstItem","getLastItem","setOptions","onPrependRequest","onDataChange","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","reject","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","trend","segmentsById","segments","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getSegment","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","segmentLength","currentSegmentLengthInPx","Number","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","firstDisplayedSegmentInd","lastDisplayedSegmentInd","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","getNext","valueInPoint","onAnimationFrame","onRebuild","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","unshift","needRebuildSegments","trendData","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","complete","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","getPrev","prevPoint","getFrameVal","getFramePoint","frameVal","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getEnabledTrends","enabledTrends","allTrends","firstTrendData","getExtremumYVal","extremumIsMax","compareFn","trends_1","trendYValues","dataItem","NaN","onSegmentsRebuilded","_loop_1","this_1","SCREEN_EVENTS","ZOOM_FRAME","SCROLL_FRAME","TRANSFORMATION_FRAME","scrollXVal","scrollYVal","zoomX","zoomY","transform","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","isFinished","zoomXAnimation","scrollEventNeeded","zoomEventNeeded","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","isDragMode","zoomXChanged","isAutoscroll","targetX","onTick","targetY","scrollYAnimation","targetZoom","zoomYAnimation","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","AXIS_MARK_DEFAULT_OPTIONS","showValue","stickToEdges","title","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","getItem","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","timingFunction","Animation","lastTickTime","animateObj","source","isEnabled","i_1","completeAndStop","hasActiveAnimations","startTime","easing","progress","setProgress","needToFinish","onFinishHandler","sourceObj","initialObj","sourceIteralable","targetObj","targetObject","initialIteralable","onTickCb","onFinishCb","initialVal","targetVal","sourceVal","In","InOut","Cubic","Quartic","Quintic","Sinusoidal","cos","sin","Exponential","pow","Circular","sqrt","Elastic","Back","Bounce","unbindList","unbindEvent","widgetName","Mesh","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","axisOptions","traverse","beginPath","rgbaStr","strokeStyle","material","MeshBasicMaterial","side","FrontSide","transparent","axisMesh","PlaneGeometry","axisGridParams","getGridParamsForAxis","geometry","parameters","image","clearRect","edgeOffset","segmentsCount","step","pxVal","textAlign","DATE","getDateStr","stroke","closePath","gridParams","sec","hour","day","tf","getHours","getMinutes","getSeconds","LineSegments","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","Geometry","LineBasicMaterial","linewidth","opacity","xLinesCount","yLinesCount","vertices","lineSegments","setZ","frustumCulled","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","scale","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","parseColor","cache","replace","exec","isNaN","numberToHexStr","colorStr","rgba","hexStr","getTransparent","TrendsWidget_1","getTrendWidgetClass","TrendGradient","TrendsWidget","visibleSegmentsCnt","segmentsIds","Uint16Array","initGradient","updateSegments","widgetIsEnabled","gradient","faces","Face3","scaleXFactor","scaleYFactor","currentScale","onSegmentsAnimate","trendSegmentsManager","includes","setupSegmentVertices","segmentInd","prevVisibleSegmentsCnt","segmentsToProcessCnt","segmentState","gradientSegmentInd","topLeft","bottomLeft","bottomRight","topRight","screenHeightVal","startX","toLocalX","startY","toLocalY","endX","endY","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","WidgetConstructor","widgetObject","getObjectByName","unbind","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","segmentIsNotDisplayed","destroySegment","setupSegment","pop","lineStartVertex","lineEndVertex","toLocalVec","vec","Line","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","initObject","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","updatePosition","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","line","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY"],"mappings":"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","file":"ThreeChart.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(1));\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__webpack_require__(2);\r\n\t__export(__webpack_require__(9));\r\n\t__export(__webpack_require__(20));\r\n\t__export(__webpack_require__(19));\r\n\t__export(__webpack_require__(18));\r\n\t__export(__webpack_require__(14));\r\n\t__export(__webpack_require__(15));\r\n\t__export(__webpack_require__(16));\r\n\t__export(__webpack_require__(17));\r\n\t__export(__webpack_require__(11));\r\n\t__export(__webpack_require__(23));\r\n\t__export(__webpack_require__(10));\r\n\t__export(__webpack_require__(26));\r\n\t__export(__webpack_require__(21));\r\n\t__export(__webpack_require__(22));\r\n\t__export(__webpack_require__(32));\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"./ResizeSensor.ts\" />\r\n\t\"use strict\";\r\n\twindow.TweenLite = TweenMax;\r\n\twindow.Stats = __webpack_require__(3);\r\n\t// require('gsap/src/uncompressed/easing/EasePack.js');\r\n\t// require('three/examples/js/renderers/CanvasRenderer.js');\r\n\t// require('three/examples/js/renderers/Projector.js');\r\n\texports.isPlainObject = __webpack_require__(4);\r\n\texports.EE2 = __webpack_require__(6);\r\n\tvar es6_promise_1 = __webpack_require__(7);\r\n\texports.Promise = es6_promise_1.Promise;\r\n\texports.ResizeSensor = __webpack_require__(8);\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t// stats.js - http://github.com/mrdoob/stats.js\n\tvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\n\tif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\n\tStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\n\tv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tvar isObject = __webpack_require__(5);\n\t\n\tfunction isObjectObject(o) {\n\t  return isObject(o) === true\n\t    && Object.prototype.toString.call(o) === '[object Object]';\n\t}\n\t\n\tmodule.exports = function isPlainObject(o) {\n\t  var ctor,prot;\n\t  \n\t  if (isObjectObject(o) === false) return false;\n\t  \n\t  // If has modified constructor\n\t  ctor = o.constructor;\n\t  if (typeof ctor !== 'function') return false;\n\t  \n\t  // If has modified prototype\n\t  prot = ctor.prototype;\n\t  if (isObjectObject(prot) === false) return false;\n\t  \n\t  // If constructor does not have an Object-specific method\n\t  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n\t    return false;\n\t  }\n\t  \n\t  // Most likely a plain Object\n\t  return true;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tmodule.exports = function isObject(val) {\n\t  return val != null && typeof val === 'object'\n\t    && !Array.isArray(val);\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * EventEmitter2\n\t * https://github.com/hij1nx/EventEmitter2\n\t *\n\t * Copyright (c) 2013 hij1nx\n\t * Licensed under the MIT license.\n\t */\n\t;!function(undefined) {\n\t\n\t  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t    return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t  };\n\t  var defaultMaxListeners = 10;\n\t\n\t  function init() {\n\t    this._events = {};\n\t    if (this._conf) {\n\t      configure.call(this, this._conf);\n\t    }\n\t  }\n\t\n\t  function configure(conf) {\n\t    if (conf) {\n\t\n\t      this._conf = conf;\n\t\n\t      conf.delimiter && (this.delimiter = conf.delimiter);\n\t      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t      conf.wildcard && (this.wildcard = conf.wildcard);\n\t      conf.newListener && (this.newListener = conf.newListener);\n\t\n\t      if (this.wildcard) {\n\t        this.listenerTree = {};\n\t      }\n\t    }\n\t  }\n\t\n\t  function EventEmitter(conf) {\n\t    this._events = {};\n\t    this.newListener = false;\n\t    configure.call(this, conf);\n\t  }\n\t\n\t  //\n\t  // Attention, function return type now is array, always !\n\t  // It has zero elements if no any matches found and one or more\n\t  // elements (leafs) if there are matches\n\t  //\n\t  function searchListenerTree(handlers, type, tree, i) {\n\t    if (!tree) {\n\t      return [];\n\t    }\n\t    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n\t        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n\t    if (i === typeLength && tree._listeners) {\n\t      //\n\t      // If at the end of the event(s) list and the tree has listeners\n\t      // invoke those listeners.\n\t      //\n\t      if (typeof tree._listeners === 'function') {\n\t        handlers && handlers.push(tree._listeners);\n\t        return [tree];\n\t      } else {\n\t        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t          handlers && handlers.push(tree._listeners[leaf]);\n\t        }\n\t        return [tree];\n\t      }\n\t    }\n\t\n\t    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n\t      //\n\t      // If the event emitted is '*' at this part\n\t      // or there is a concrete match at this patch\n\t      //\n\t      if (currentType === '*') {\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n\t          }\n\t        }\n\t        return listeners;\n\t      } else if(currentType === '**') {\n\t        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n\t        if(endReached && tree._listeners) {\n\t          // The next element has a _listeners, add it to the handlers.\n\t          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t        }\n\t\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            if(branch === '*' || branch === '**') {\n\t              if(tree[branch]._listeners && !endReached) {\n\t                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t              }\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            } else if(branch === nextType) {\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n\t            } else {\n\t              // No match on this one, shift into the tree but not in the type array.\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            }\n\t          }\n\t        }\n\t        return listeners;\n\t      }\n\t\n\t      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n\t    }\n\t\n\t    xTree = tree['*'];\n\t    if (xTree) {\n\t      //\n\t      // If the listener tree will allow any match for this part,\n\t      // then recursively explore all branches of the tree\n\t      //\n\t      searchListenerTree(handlers, type, xTree, i+1);\n\t    }\n\t\n\t    xxTree = tree['**'];\n\t    if(xxTree) {\n\t      if(i < typeLength) {\n\t        if(xxTree._listeners) {\n\t          // If we have a listener on a '**', it will catch all, so add its handler.\n\t          searchListenerTree(handlers, type, xxTree, typeLength);\n\t        }\n\t\n\t        // Build arrays of matching next branches and others.\n\t        for(branch in xxTree) {\n\t          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n\t            if(branch === nextType) {\n\t              // We know the next element will match, so jump twice.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+2);\n\t            } else if(branch === currentType) {\n\t              // Current node matches, move into the tree.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+1);\n\t            } else {\n\t              isolatedBranch = {};\n\t              isolatedBranch[branch] = xxTree[branch];\n\t              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n\t            }\n\t          }\n\t        }\n\t      } else if(xxTree._listeners) {\n\t        // We have reached the end and still on a '**'\n\t        searchListenerTree(handlers, type, xxTree, typeLength);\n\t      } else if(xxTree['*'] && xxTree['*']._listeners) {\n\t        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n\t      }\n\t    }\n\t\n\t    return listeners;\n\t  }\n\t\n\t  function growListenerTree(type, listener) {\n\t\n\t    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t\n\t    //\n\t    // Looks for two consecutive '**', if so, don't add the event at all.\n\t    //\n\t    for(var i = 0, len = type.length; i+1 < len; i++) {\n\t      if(type[i] === '**' && type[i+1] === '**') {\n\t        return;\n\t      }\n\t    }\n\t\n\t    var tree = this.listenerTree;\n\t    var name = type.shift();\n\t\n\t    while (name) {\n\t\n\t      if (!tree[name]) {\n\t        tree[name] = {};\n\t      }\n\t\n\t      tree = tree[name];\n\t\n\t      if (type.length === 0) {\n\t\n\t        if (!tree._listeners) {\n\t          tree._listeners = listener;\n\t        }\n\t        else if(typeof tree._listeners === 'function') {\n\t          tree._listeners = [tree._listeners, listener];\n\t        }\n\t        else if (isArray(tree._listeners)) {\n\t\n\t          tree._listeners.push(listener);\n\t\n\t          if (!tree._listeners.warned) {\n\t\n\t            var m = defaultMaxListeners;\n\t\n\t            if (typeof this._events.maxListeners !== 'undefined') {\n\t              m = this._events.maxListeners;\n\t            }\n\t\n\t            if (m > 0 && tree._listeners.length > m) {\n\t\n\t              tree._listeners.warned = true;\n\t              console.error('(node) warning: possible EventEmitter memory ' +\n\t                            'leak detected. %d listeners added. ' +\n\t                            'Use emitter.setMaxListeners() to increase limit.',\n\t                            tree._listeners.length);\n\t              console.trace();\n\t            }\n\t          }\n\t        }\n\t        return true;\n\t      }\n\t      name = type.shift();\n\t    }\n\t    return true;\n\t  }\n\t\n\t  // By default EventEmitters will print a warning if more than\n\t  // 10 listeners are added to it. This is a useful default which\n\t  // helps finding memory leaks.\n\t  //\n\t  // Obviously not all Emitters should be limited to 10. This function allows\n\t  // that to be increased. Set to zero for unlimited.\n\t\n\t  EventEmitter.prototype.delimiter = '.';\n\t\n\t  EventEmitter.prototype.setMaxListeners = function(n) {\n\t    this._events || init.call(this);\n\t    this._events.maxListeners = n;\n\t    if (!this._conf) this._conf = {};\n\t    this._conf.maxListeners = n;\n\t  };\n\t\n\t  EventEmitter.prototype.event = '';\n\t\n\t  EventEmitter.prototype.once = function(event, fn) {\n\t    this.many(event, 1, fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.many = function(event, ttl, fn) {\n\t    var self = this;\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('many only accepts instances of Function');\n\t    }\n\t\n\t    function listener() {\n\t      if (--ttl === 0) {\n\t        self.off(event, listener);\n\t      }\n\t      fn.apply(this, arguments);\n\t    }\n\t\n\t    listener._origin = fn;\n\t\n\t    this.on(event, listener);\n\t\n\t    return self;\n\t  };\n\t\n\t  EventEmitter.prototype.emit = function() {\n\t\n\t    this._events || init.call(this);\n\t\n\t    var type = arguments[0];\n\t\n\t    if (type === 'newListener' && !this.newListener) {\n\t      if (!this._events.newListener) { return false; }\n\t    }\n\t\n\t    // Loop through the *_all* functions and invoke them.\n\t    if (this._all) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t      for (i = 0, l = this._all.length; i < l; i++) {\n\t        this.event = type;\n\t        this._all[i].apply(this, args);\n\t      }\n\t    }\n\t\n\t    // If there is no 'error' event listener then throw.\n\t    if (type === 'error') {\n\t\n\t      if (!this._all &&\n\t        !this._events.error &&\n\t        !(this.wildcard && this.listenerTree.error)) {\n\t\n\t        if (arguments[1] instanceof Error) {\n\t          throw arguments[1]; // Unhandled 'error' event\n\t        } else {\n\t          throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t        }\n\t        return false;\n\t      }\n\t    }\n\t\n\t    var handler;\n\t\n\t    if(this.wildcard) {\n\t      handler = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      handler = this._events[type];\n\t    }\n\t\n\t    if (typeof handler === 'function') {\n\t      this.event = type;\n\t      if (arguments.length === 1) {\n\t        handler.call(this);\n\t      }\n\t      else if (arguments.length > 1)\n\t        switch (arguments.length) {\n\t          case 2:\n\t            handler.call(this, arguments[1]);\n\t            break;\n\t          case 3:\n\t            handler.call(this, arguments[1], arguments[2]);\n\t            break;\n\t          // slower\n\t          default:\n\t            var l = arguments.length;\n\t            var args = new Array(l - 1);\n\t            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t            handler.apply(this, args);\n\t        }\n\t      return true;\n\t    }\n\t    else if (handler) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t\n\t      var listeners = handler.slice();\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        this.event = type;\n\t        listeners[i].apply(this, args);\n\t      }\n\t      return (listeners.length > 0) || !!this._all;\n\t    }\n\t    else {\n\t      return !!this._all;\n\t    }\n\t\n\t  };\n\t\n\t  EventEmitter.prototype.on = function(type, listener) {\n\t\n\t    if (typeof type === 'function') {\n\t      this.onAny(type);\n\t      return this;\n\t    }\n\t\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('on only accepts instances of Function');\n\t    }\n\t    this._events || init.call(this);\n\t\n\t    // To avoid recursion in the case that type == \"newListeners\"! Before\n\t    // adding it to the listeners, first emit \"newListeners\".\n\t    this.emit('newListener', type, listener);\n\t\n\t    if(this.wildcard) {\n\t      growListenerTree.call(this, type, listener);\n\t      return this;\n\t    }\n\t\n\t    if (!this._events[type]) {\n\t      // Optimize the case of one listener. Don't need the extra array object.\n\t      this._events[type] = listener;\n\t    }\n\t    else if(typeof this._events[type] === 'function') {\n\t      // Adding the second element, need to change to array.\n\t      this._events[type] = [this._events[type], listener];\n\t    }\n\t    else if (isArray(this._events[type])) {\n\t      // If we've already got an array, just append.\n\t      this._events[type].push(listener);\n\t\n\t      // Check for listener leak\n\t      if (!this._events[type].warned) {\n\t\n\t        var m = defaultMaxListeners;\n\t\n\t        if (typeof this._events.maxListeners !== 'undefined') {\n\t          m = this._events.maxListeners;\n\t        }\n\t\n\t        if (m > 0 && this._events[type].length > m) {\n\t\n\t          this._events[type].warned = true;\n\t          console.error('(node) warning: possible EventEmitter memory ' +\n\t                        'leak detected. %d listeners added. ' +\n\t                        'Use emitter.setMaxListeners() to increase limit.',\n\t                        this._events[type].length);\n\t          console.trace();\n\t        }\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.onAny = function(fn) {\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('onAny only accepts instances of Function');\n\t    }\n\t\n\t    if(!this._all) {\n\t      this._all = [];\n\t    }\n\t\n\t    // Add the function to the event listener collection.\n\t    this._all.push(fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  EventEmitter.prototype.off = function(type, listener) {\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('removeListener only takes instances of Function');\n\t    }\n\t\n\t    var handlers,leafs=[];\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      // does not use listeners(), so no side effect of creating _events[type]\n\t      if (!this._events[type]) return this;\n\t      handlers = this._events[type];\n\t      leafs.push({_listeners:handlers});\n\t    }\n\t\n\t    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t      var leaf = leafs[iLeaf];\n\t      handlers = leaf._listeners;\n\t      if (isArray(handlers)) {\n\t\n\t        var position = -1;\n\t\n\t        for (var i = 0, length = handlers.length; i < length; i++) {\n\t          if (handlers[i] === listener ||\n\t            (handlers[i].listener && handlers[i].listener === listener) ||\n\t            (handlers[i]._origin && handlers[i]._origin === listener)) {\n\t            position = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (position < 0) {\n\t          continue;\n\t        }\n\t\n\t        if(this.wildcard) {\n\t          leaf._listeners.splice(position, 1);\n\t        }\n\t        else {\n\t          this._events[type].splice(position, 1);\n\t        }\n\t\n\t        if (handlers.length === 0) {\n\t          if(this.wildcard) {\n\t            delete leaf._listeners;\n\t          }\n\t          else {\n\t            delete this._events[type];\n\t          }\n\t        }\n\t        return this;\n\t      }\n\t      else if (handlers === listener ||\n\t        (handlers.listener && handlers.listener === listener) ||\n\t        (handlers._origin && handlers._origin === listener)) {\n\t        if(this.wildcard) {\n\t          delete leaf._listeners;\n\t        }\n\t        else {\n\t          delete this._events[type];\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.offAny = function(fn) {\n\t    var i = 0, l = 0, fns;\n\t    if (fn && this._all && this._all.length > 0) {\n\t      fns = this._all;\n\t      for(i = 0, l = fns.length; i < l; i++) {\n\t        if(fn === fns[i]) {\n\t          fns.splice(i, 1);\n\t          return this;\n\t        }\n\t      }\n\t    } else {\n\t      this._all = [];\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t\n\t  EventEmitter.prototype.removeAllListeners = function(type) {\n\t    if (arguments.length === 0) {\n\t      !this._events || init.call(this);\n\t      return this;\n\t    }\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t\n\t      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t        var leaf = leafs[iLeaf];\n\t        leaf._listeners = null;\n\t      }\n\t    }\n\t    else {\n\t      if (!this._events[type]) return this;\n\t      this._events[type] = null;\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.listeners = function(type) {\n\t    if(this.wildcard) {\n\t      var handlers = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t      return handlers;\n\t    }\n\t\n\t    this._events || init.call(this);\n\t\n\t    if (!this._events[type]) this._events[type] = [];\n\t    if (!isArray(this._events[type])) {\n\t      this._events[type] = [this._events[type]];\n\t    }\n\t    return this._events[type];\n\t  };\n\t\n\t  EventEmitter.prototype.listenersAny = function() {\n\t\n\t    if(this._all) {\n\t      return this._all;\n\t    }\n\t    else {\n\t      return [];\n\t    }\n\t\n\t  };\n\t\n\t  if (true) {\n\t     // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return EventEmitter;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    // CommonJS\n\t    exports.EventEmitter2 = EventEmitter;\n\t  }\n\t  else {\n\t    // Browser global.\n\t    window.EventEmitter2 = EventEmitter;\n\t  }\n\t}();\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {Promise: window['Promise']}\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n\t * directory of this distribution and at\n\t * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n\t */\n\t;\n\t(function() {\n\t\n\t    /**\n\t     * Class for dimension change detection.\n\t     *\n\t     * @param {Element|Element[]|Elements|jQuery} element\n\t     * @param {Function} callback\n\t     *\n\t     * @constructor\n\t     */\n\t    var ResizeSensor = function(element, callback) {\n\t        /**\n\t         *\n\t         * @constructor\n\t         */\n\t        function EventQueue() {\n\t            this.q = [];\n\t            this.add = function(ev) {\n\t                this.q.push(ev);\n\t            };\n\t\n\t            var i, j;\n\t            this.call = function() {\n\t                for (i = 0, j = this.q.length; i < j; i++) {\n\t                    this.q[i].call();\n\t                }\n\t            };\n\t        }\n\t\n\t        /**\n\t         * @param {HTMLElement} element\n\t         * @param {String}      prop\n\t         * @returns {String|Number}\n\t         */\n\t        function getComputedStyle(element, prop) {\n\t            if (element.currentStyle) {\n\t                return element.currentStyle[prop];\n\t            } else if (window.getComputedStyle) {\n\t                return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t            } else {\n\t                return element.style[prop];\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @param {Function}    resized\n\t         */\n\t        function attachResizeEvent(element, resized) {\n\t            if (!element.resizedAttached) {\n\t                element.resizedAttached = new EventQueue();\n\t                element.resizedAttached.add(resized);\n\t            } else if (element.resizedAttached) {\n\t                element.resizedAttached.add(resized);\n\t                return;\n\t            }\n\t\n\t            element.resizeSensor = document.createElement('div');\n\t            element.resizeSensor.className = 'resize-sensor';\n\t            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n\t            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\t\n\t            element.resizeSensor.style.cssText = style;\n\t            element.resizeSensor.innerHTML =\n\t                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + '\"></div>' +\n\t                '</div>' +\n\t                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n\t                '</div>';\n\t            element.appendChild(element.resizeSensor);\n\t\n\t            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n\t                element.style.position = 'relative';\n\t            }\n\t\n\t            var expand = element.resizeSensor.childNodes[0];\n\t            var expandChild = expand.childNodes[0];\n\t            var shrink = element.resizeSensor.childNodes[1];\n\t            var shrinkChild = shrink.childNodes[0];\n\t\n\t            var lastWidth, lastHeight;\n\t\n\t            var reset = function() {\n\t                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n\t                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n\t                expand.scrollLeft = expand.scrollWidth;\n\t                expand.scrollTop = expand.scrollHeight;\n\t                shrink.scrollLeft = shrink.scrollWidth;\n\t                shrink.scrollTop = shrink.scrollHeight;\n\t                lastWidth = element.offsetWidth;\n\t                lastHeight = element.offsetHeight;\n\t            };\n\t\n\t            reset();\n\t\n\t            var changed = function() {\n\t                if (element.resizedAttached) {\n\t                    element.resizedAttached.call();\n\t                }\n\t            };\n\t\n\t            var addEvent = function(el, name, cb) {\n\t                if (el.attachEvent) {\n\t                    el.attachEvent('on' + name, cb);\n\t                } else {\n\t                    el.addEventListener(name, cb);\n\t                }\n\t            };\n\t\n\t            var onScroll = function() {\n\t              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                  changed();\n\t              }\n\t              reset();\n\t            };\n\t\n\t            addEvent(expand, 'scroll', onScroll);\n\t            addEvent(shrink, 'scroll', onScroll);\n\t        }\n\t\n\t        var elementType = Object.prototype.toString.call(element);\n\t        var isCollectionTyped = ('[object Array]' === elementType\n\t            || ('[object NodeList]' === elementType)\n\t            || ('[object HTMLCollection]' === elementType)\n\t            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n\t            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n\t        );\n\t\n\t        if (isCollectionTyped) {\n\t            var i = 0, j = element.length;\n\t            for (; i < j; i++) {\n\t                attachResizeEvent(element[i], callback);\n\t            }\n\t        } else {\n\t            attachResizeEvent(element, callback);\n\t        }\n\t\n\t        this.detach = function() {\n\t            if (isCollectionTyped) {\n\t                var i = 0, j = element.length;\n\t                for (; i < j; i++) {\n\t                    ResizeSensor.detach(element[i]);\n\t                }\n\t            } else {\n\t                ResizeSensor.detach(element);\n\t            }\n\t        };\n\t    };\n\t\n\t    ResizeSensor.detach = function(element) {\n\t        if (element.resizeSensor) {\n\t            element.removeChild(element.resizeSensor);\n\t            delete element.resizeSensor;\n\t            delete element.resizedAttached;\n\t        }\n\t    };\n\t\n\t    // make available to common module loader\n\t    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t        module.exports = ResizeSensor;\n\t    }\n\t    else {\n\t        window.ResizeSensor = ResizeSensor;\n\t    }\n\t\n\t})();\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Plugin_1 = __webpack_require__(10);\r\n\tvar PerspectiveCamera = THREE.PerspectiveCamera;\r\n\tvar Chart_1 = __webpack_require__(14);\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar AxisWidget_1 = __webpack_require__(24);\r\n\tvar GridWidget_1 = __webpack_require__(25);\r\n\tvar TrendsGradientWidget_1 = __webpack_require__(27);\r\n\tvar TrendsLineWidget_1 = __webpack_require__(29);\r\n\tvar TrendsCandleWidget_1 = __webpack_require__(30);\r\n\tvar deps_1 = __webpack_require__(13);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\tvar AxisMarksWidget_1 = __webpack_require__(31);\r\n\tvar ChartBlankView = (function () {\r\n\t    function ChartBlankView(state, $container, pluginsAndWidgets) {\r\n\t        var _this = this;\r\n\t        if (pluginsAndWidgets === void 0) { pluginsAndWidgets = []; }\r\n\t        this.widgets = [];\r\n\t        if (!THREE || !THREE.REVISION)\r\n\t            Utils_1.Utils.error('three.js not found');\r\n\t        if (!$container) {\r\n\t            Utils_1.Utils.error('$el must be set');\r\n\t        }\r\n\t        // calculate state size\r\n\t        var style = getComputedStyle($container);\r\n\t        state.width = parseInt(style.width);\r\n\t        state.height = parseInt(style.height);\r\n\t        var plugins = pluginsAndWidgets.filter(function (pluginOrWidget) { return pluginOrWidget instanceof Plugin_1.ChartPlugin; });\r\n\t        this.chart = new Chart_1.Chart(state, plugins);\r\n\t        this.pluginsAndWidgets = pluginsAndWidgets;\r\n\t        this.zoomThrottled = Utils_1.Utils.throttle(function (zoomValue, origin) { return _this.zoom(zoomValue, origin); }, 200);\r\n\t        this.$container = $container;\r\n\t        this.init($container);\r\n\t    }\r\n\t    ;\r\n\t    ChartBlankView.prototype.init = function ($container) {\r\n\t        var chart = this.chart;\r\n\t        var _a = chart.state, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\r\n\t        this.scene = new THREE.Scene();\r\n\t        this.isStopped = !autoRender.enabled;\r\n\t        var renderer = this.renderer = new ChartView.renderers[this.chart.state.renderer]({\r\n\t            antialias: true,\r\n\t            alpha: true\r\n\t        });\r\n\t        var backgroundColor = new Color_1.Color(chart.state.backgroundColor);\r\n\t        renderer.setSize(w, h);\r\n\t        renderer.setPixelRatio(ChartView.devicePixelRatio);\r\n\t        renderer.setClearColor(backgroundColor.value, backgroundColor.a);\r\n\t        $container.appendChild(renderer.domElement);\r\n\t        this.$el = renderer.domElement;\r\n\t        this.$el.style.display = 'block';\r\n\t        if (showStats) {\r\n\t            this.stats = new Stats();\r\n\t            $container.appendChild(this.stats.domElement);\r\n\t        }\r\n\t        this.setupCamera();\r\n\t        this.initWidgets();\r\n\t        this.bindEvents();\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\r\n\t     */\r\n\t    ChartBlankView.prototype.initWidgets = function () {\r\n\t        var _this = this;\r\n\t        var preinstalledWidgetsClasses = this.constructor.preinstalledWidgets.slice();\r\n\t        var customWidgets = [];\r\n\t        this.pluginsAndWidgets.forEach(function (pluginOrWidget) {\r\n\t            if (pluginOrWidget instanceof Widget_1.ChartWidget) {\r\n\t                customWidgets.push(pluginOrWidget);\r\n\t                return;\r\n\t            }\r\n\t            if (!(pluginOrWidget instanceof Plugin_1.ChartPlugin))\r\n\t                return;\r\n\t            var pluginWidgetClasses = pluginOrWidget.constructor.providedWidgets;\r\n\t            preinstalledWidgetsClasses.push.apply(preinstalledWidgetsClasses, pluginWidgetClasses);\r\n\t        });\r\n\t        this.widgets = customWidgets.concat(preinstalledWidgetsClasses.map(function (WidgetClass) { return new WidgetClass(); }));\r\n\t        this.widgets.forEach(function (widget) {\r\n\t            widget.setupChart(_this.chart);\r\n\t            widget.onReadyHandler();\r\n\t            _this.scene.add(widget.getObject3D());\r\n\t        });\r\n\t    };\r\n\t    ChartBlankView.prototype.renderLoop = function () {\r\n\t        var _this = this;\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        this.stats && this.stats.begin();\r\n\t        this.render();\r\n\t        if (this.isStopped)\r\n\t            return;\r\n\t        var fpsLimit = this.chart.state.autoRender.fps;\r\n\t        if (fpsLimit) {\r\n\t            var delay_1 = 1000 / fpsLimit;\r\n\t            setTimeout(function () { return requestAnimationFrame(function () { return _this.renderLoop(); }); }, delay_1);\r\n\t        }\r\n\t        else {\r\n\t            requestAnimationFrame(function () { return _this.renderLoop(); });\r\n\t        }\r\n\t        this.stats && this.stats.end();\r\n\t    };\r\n\t    ChartBlankView.prototype.render = function () {\r\n\t        this.chart.render();\r\n\t        this.renderer.render(this.scene, this.camera);\r\n\t    };\r\n\t    ChartBlankView.prototype.stop = function () {\r\n\t        this.isStopped = true;\r\n\t    };\r\n\t    ChartBlankView.prototype.run = function () {\r\n\t        this.isStopped = false;\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * call to destroy state an init garbage collection\r\n\t     */\r\n\t    ChartBlankView.prototype.destroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.stop();\r\n\t        this.chart.destroy();\r\n\t        this.unbindEvents();\r\n\t        // WARNING! undocumented method for free webgl context\r\n\t        try {\r\n\t            this.renderer.forceContextLoss();\r\n\t        }\r\n\t        catch (wtf) {\r\n\t        }\r\n\t        this.renderer.context = null;\r\n\t        this.renderer.domElement = null;\r\n\t        this.renderer = null;\r\n\t    };\r\n\t    ChartBlankView.prototype.getState = function () {\r\n\t        return this.chart.state;\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.getTrend\r\n\t     */\r\n\t    ChartBlankView.prototype.getTrend = function (trendName) {\r\n\t        return this.chart.getTrend(trendName);\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.setState\r\n\t     */\r\n\t    ChartBlankView.prototype.setState = function (state) {\r\n\t        return this.chart.setState(state);\r\n\t    };\r\n\t    ChartBlankView.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var $el = this.$el;\r\n\t        if (this.chart.state.controls.enabled) {\r\n\t            $el.addEventListener('mousewheel', function (ev) {\r\n\t                _this.onMouseWheel(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousemove', function (ev) {\r\n\t                _this.onMouseMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousedown', function (ev) { return _this.onMouseDown(ev); });\r\n\t            $el.addEventListener('mouseup', function (ev) { return _this.onMouseUp(ev); });\r\n\t            $el.addEventListener('touchmove', function (ev) {\r\n\t                _this.onTouchMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('touchend', function (ev) {\r\n\t                _this.onTouchEnd(ev);\r\n\t            });\r\n\t        }\r\n\t        if (this.chart.state.autoResize) {\r\n\t            this.resizeSensor = new deps_1.ResizeSensor(this.$container, function () {\r\n\t                _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\r\n\t            });\r\n\t        }\r\n\t        this.unsubscribers = [\r\n\t            this.chart.onTrendsChange(function () { return _this.autoscroll(); }),\r\n\t            this.chart.screen.onTransformationFrame(function (options) { return _this.onScreenTransformHandler(options); }),\r\n\t            this.chart.onResize(function (options) { return _this.onChartResize(); })\r\n\t        ];\r\n\t    };\r\n\t    ChartBlankView.prototype.unbindEvents = function () {\r\n\t        // TODO: unbind events correctly\r\n\t        try {\r\n\t            this.resizeSensor && this.resizeSensor.detach();\r\n\t        }\r\n\t        catch (e) {\r\n\t        }\r\n\t        this.$el.remove();\r\n\t        this.unsubscribers.forEach(function (unsubscribe) { return unsubscribe(); });\r\n\t    };\r\n\t    ChartBlankView.prototype.setupCamera = function () {\r\n\t        var camSettings = this.chart.screen.getCameraSettings();\r\n\t        if (!this.camera) {\r\n\t            this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\r\n\t            this.scene.add(this.camera);\r\n\t        }\r\n\t        else {\r\n\t            this.camera.fov = camSettings.FOV;\r\n\t            this.camera.aspect = camSettings.aspect;\r\n\t            this.camera.far = camSettings.far;\r\n\t            this.camera.near = camSettings.near;\r\n\t            this.camera.updateProjectionMatrix();\r\n\t        }\r\n\t        this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\r\n\t        this.cameraInitialPosition = this.camera.position.clone();\r\n\t        this.onScreenTransformHandler(this.chart.screen.options);\r\n\t    };\r\n\t    ChartBlankView.prototype.onScreenTransformHandler = function (options) {\r\n\t        if (options.scrollX != void 0) {\r\n\t            var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\r\n\t            // scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setX(scrollX_1);\r\n\t        }\r\n\t        if (options.scrollY != void 0) {\r\n\t            var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\r\n\t            // scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setY(scrollY_1);\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.autoscroll = function () {\r\n\t        var state = this.chart;\r\n\t        if (!state.state.autoScroll)\r\n\t            return;\r\n\t        var oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\r\n\t        var trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\r\n\t        if (trendsMaxXDelta > 0) {\r\n\t            var maxVisibleX = this.chart.screen.getScreenRightVal();\r\n\t            var paddingRightX = this.chart.getPaddingRight();\r\n\t            var currentScroll = state.state.xAxis.range.scroll;\r\n\t            if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\r\n\t                return;\r\n\t            }\r\n\t            var scrollDelta = trendsMaxXDelta;\r\n\t            this.setState({ xAxis: { range: { scroll: currentScroll + scrollDelta } } });\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.onScrollStop = function () {\r\n\t        // var tendsXMax = this.state.state.computedData.trends.maxX;\r\n\t        // var paddingRightX = this.state.getPaddingRight();\r\n\t        // if (tendsXMax < paddingRightX) {\r\n\t        // \tthis.state.scrollToEnd();\r\n\t        // }\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseDown = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseUp = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseMove = function (ev) {\r\n\t        if (this.chart.state.cursor.dragMode) {\r\n\t            this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseWheel = function (ev) {\r\n\t        ev.stopPropagation();\r\n\t        ev.preventDefault();\r\n\t        var zoomOrigin = ev.layerX / this.chart.state.width;\r\n\t        var zoomValue = 1 + ev.wheelDeltaY * 0.001;\r\n\t        this.zoom(zoomValue, zoomOrigin);\r\n\t    };\r\n\t    ChartBlankView.prototype.onTouchMove = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onTouchEnd = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onChartContainerResizeHandler = function (width, height) {\r\n\t        this.setState({ width: width, height: height });\r\n\t    };\r\n\t    ChartBlankView.prototype.onChartResize = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height;\r\n\t        this.renderer.setSize(width, height);\r\n\t        this.setupCamera();\r\n\t    };\r\n\t    ChartBlankView.prototype.zoom = function (zoomValue, zoomOrigin) {\r\n\t        var _this = this;\r\n\t        var MAX_ZOOM_VALUE = 1.5;\r\n\t        var MIN_ZOOM_VALUE = 0.7;\r\n\t        zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\r\n\t        zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\r\n\t        var autoScrollIsEnabled = this.chart.state.autoScroll;\r\n\t        if (autoScrollIsEnabled)\r\n\t            this.chart.setState({ autoScroll: false });\r\n\t        this.chart.zoom(zoomValue, zoomOrigin).then(function () {\r\n\t            if (autoScrollIsEnabled)\r\n\t                _this.setState({ autoScroll: true });\r\n\t        });\r\n\t    };\r\n\t    ChartBlankView.devicePixelRatio = window.devicePixelRatio;\r\n\t    ChartBlankView.preinstalledWidgets = [];\r\n\t    ChartBlankView.renderers = {\r\n\t        CanvasRenderer: THREE.CanvasRenderer,\r\n\t        WebGLRenderer: THREE.WebGLRenderer\r\n\t    };\r\n\t    return ChartBlankView;\r\n\t}());\r\n\texports.ChartBlankView = ChartBlankView;\r\n\tvar ChartView = (function (_super) {\r\n\t    __extends(ChartView, _super);\r\n\t    function ChartView() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    ChartView.preinstalledWidgets = [\r\n\t        TrendsLineWidget_1.TrendsLineWidget,\r\n\t        TrendsCandleWidget_1.TrendsCandlesWidget,\r\n\t        AxisWidget_1.AxisWidget,\r\n\t        GridWidget_1.GridWidget,\r\n\t        TrendsGradientWidget_1.TrendsGradientWidget,\r\n\t        // TODO: remove AxisMarksWidget from preinstalled widgets\r\n\t        AxisMarksWidget_1.AxisMarksWidget\r\n\t    ];\r\n\t    return ChartView;\r\n\t}(ChartBlankView));\r\n\texports.ChartView = ChartView;\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\texports.DEFAULT_CONFIG = {\r\n\t    installPluginWidgets: true\r\n\t};\r\n\t/**\r\n\t * base class for all plugins\r\n\t * NAME is mandatory\r\n\t */\r\n\tvar ChartPlugin = (function () {\r\n\t    function ChartPlugin(options, config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        this.unsubscribers = [];\r\n\t        this.initialState = options;\r\n\t        this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\r\n\t        this.name = this.constructor.NAME;\r\n\t        if (!this.name)\r\n\t            Utils_1.Utils.error('Unnamed plugin detected');\r\n\t    }\r\n\t    ChartPlugin.prototype.setupChart = function (chart) {\r\n\t        var _this = this;\r\n\t        this.chart = chart;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvent(this.chart.onInitialStateApplied(function (initialState) { return _this.onInitialStateAppliedHandler(initialState); }), this.chart.onReady(function () { return _this.onReadyHandler(); }), this.chart.onDestroy(function () { return _this.onDestroyHandler(); }), this.chart.onPluginsStateChange(function (changedPluginsStates) { return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]); }));\r\n\t    };\r\n\t    ChartPlugin.prototype.getOptions = function () {\r\n\t        return this.chart.state.pluginsState[this.name];\r\n\t    };\r\n\t    ChartPlugin.prototype.onInitialStateAppliedHandler = function (initialState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onReadyHandler = function () {\r\n\t    };\r\n\t    ChartPlugin.prototype.onStateChanged = function (changedState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t    };\r\n\t    ChartPlugin.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unsubscribers = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unsubscribers.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unsubscribers.push.apply(unsubscribers, (args));\r\n\t        }\r\n\t        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartPlugin.prototype.unbindEvents = function () {\r\n\t        this.unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); });\r\n\t        this.unsubscribers.length = 0;\r\n\t    };\r\n\t    ChartPlugin.NAME = '';\r\n\t    ChartPlugin.providedWidgets = [];\r\n\t    return ChartPlugin;\r\n\t}());\r\n\texports.ChartPlugin = ChartPlugin;\r\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(2);\r\n\tfunction deepmerge(target, src, mergeArrays) {\r\n\t    if (mergeArrays === void 0) { mergeArrays = true; }\r\n\t    var array = Array.isArray(src);\r\n\t    var dst = array && [] || {};\r\n\t    if (array) {\r\n\t        target = target || [];\r\n\t        if (mergeArrays) {\r\n\t            dst = dst.concat(target);\r\n\t        }\r\n\t        src.forEach(function (e, i) {\r\n\t            if (typeof dst[i] === 'undefined') {\r\n\t                dst[i] = e;\r\n\t            }\r\n\t            else if (typeof e === 'object') {\r\n\t                dst[i] = deepmerge(target[i], e, mergeArrays);\r\n\t            }\r\n\t            else {\r\n\t                if (target.indexOf(e) === -1) {\r\n\t                    dst.push(e);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    else {\r\n\t        if (target && typeof target === 'object') {\r\n\t            Object.keys(target).forEach(function (key) {\r\n\t                dst[key] = target[key];\r\n\t            });\r\n\t        }\r\n\t        Object.keys(src).forEach(function (key) {\r\n\t            if (typeof src[key] !== 'object' || !src[key]) {\r\n\t                dst[key] = src[key];\r\n\t            }\r\n\t            else {\r\n\t                if (!target[key]) {\r\n\t                    dst[key] = src[key];\r\n\t                }\r\n\t                else {\r\n\t                    dst[key] = deepmerge(target[key], src[key], mergeArrays);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    return dst;\r\n\t}\r\n\t/**\r\n\t * project utils static class\r\n\t */\r\n\tvar Utils = (function () {\r\n\t    function Utils() {\r\n\t    }\r\n\t    /**\r\n\t     * deepMerge based on https://www.npmjs.com/package/deepmerge\r\n\t     */\r\n\t    Utils.deepMerge = function (obj1, obj2, mergeArrays) {\r\n\t        return deepmerge(obj1, obj2, mergeArrays);\r\n\t    };\r\n\t    /**\r\n\t     * deepCopy based on JSON.stringify function\r\n\t     * @deprecated\r\n\t     */\r\n\t    Utils.deepCopy = function (obj) {\r\n\t        // TODO: use deepMerge function to copy\r\n\t        return JSON.parse(JSON.stringify(obj));\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * @example\r\n\t     * // returns \"000015\"\r\n\t     * Utils.toFixed(15, 6);\r\n\t     */\r\n\t    Utils.toFixed = function (num, digitsCount) {\r\n\t        var maxDigits = 15;\r\n\t        var result = '';\r\n\t        var intVal = Math.floor(num);\r\n\t        var intStr = intVal.toString();\r\n\t        var lengthDiff = digitsCount - intStr.length;\r\n\t        if (lengthDiff > 0) {\r\n\t            result = '0'.repeat(lengthDiff) + intStr;\r\n\t        }\r\n\t        else {\r\n\t            result = intStr;\r\n\t        }\r\n\t        var afterPointDigitsCount = maxDigits - intStr.length;\r\n\t        var afterPointStr = num.toString().split('.')[1];\r\n\t        if (afterPointStr) {\r\n\t            result += '.' + afterPointStr.substr(0, afterPointDigitsCount);\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    Utils.bindEvent = function () {\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createTexture = function (width, height, fn) {\r\n\t        var canvas = document.createElement('canvas');\r\n\t        canvas.width = width;\r\n\t        canvas.height = height;\r\n\t        var ctx = canvas.getContext('2d');\r\n\t        fn(ctx);\r\n\t        var texture = new THREE.Texture(canvas);\r\n\t        texture.needsUpdate = true;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context with NearestFilter\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createNearestTexture = function (width, height, fn) {\r\n\t        var texture = this.createTexture(width, height, fn);\r\n\t        texture.minFilter = THREE.NearestFilter;\r\n\t        return texture;\r\n\t    };\r\n\t    Utils.createPixelPerfectTexture = function (width, height, fn) {\r\n\t        var texture = this.createTexture(width, height, fn);\r\n\t        texture.magFilter = THREE.NearestFilter;\r\n\t        texture.minFilter = THREE.NearestFilter;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.error = function (msg) {\r\n\t        console.error('Chart error: ' + msg);\r\n\t        throw 'Chart: ' + msg;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.warn = function (msg) {\r\n\t        console.warn('Chart warning: ' + msg);\r\n\t    };\r\n\t    /**\r\n\t     * @returns new unique id\r\n\t     */\r\n\t    Utils.getUid = function () {\r\n\t        return this.currentId++;\r\n\t    };\r\n\t    /**\r\n\t     * @returns distance between numbers\r\n\t     */\r\n\t    Utils.getDistance = function (num1, num2) {\r\n\t        return Math.max(num1, num2) - Math.min(num1, num2);\r\n\t    };\r\n\t    Utils.binarySearchClosestInd = function (arr, num, key) {\r\n\t        var mid;\r\n\t        var lo = 0;\r\n\t        var hi = arr.length - 1;\r\n\t        while (hi - lo > 1) {\r\n\t            mid = Math.floor((lo + hi) / 2);\r\n\t            if (arr[mid][key] < num) {\r\n\t                lo = mid;\r\n\t            }\r\n\t            else {\r\n\t                hi = mid;\r\n\t            }\r\n\t        }\r\n\t        if (num - arr[lo][key] <= arr[hi][key] - num) {\r\n\t            return lo;\r\n\t        }\r\n\t        return hi;\r\n\t    };\r\n\t    Utils.binarySearchClosest = function (arr, num, key) {\r\n\t        var ind = this.binarySearchClosestInd(arr, num, key);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.rectsIntersect = function (r1, r2) {\r\n\t        var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\r\n\t        var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\r\n\t        var _a = [left1 + width1, left2 + width2, top1 + height1, top2 + height2], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\r\n\t        return !(left2 > right1 ||\r\n\t            right2 < left1 ||\r\n\t            top2 > bottom1 ||\r\n\t            bottom2 < top1);\r\n\t    };\r\n\t    Utils.throttle = function (func, ms) {\r\n\t        var isThrottled = false, savedArgs, savedThis;\r\n\t        function wrapper() {\r\n\t            if (isThrottled) {\r\n\t                savedArgs = arguments;\r\n\t                savedThis = this;\r\n\t                return;\r\n\t            }\r\n\t            func.apply(this, arguments); // (1)\r\n\t            isThrottled = true;\r\n\t            setTimeout(function () {\r\n\t                isThrottled = false; // (3)\r\n\t                if (savedArgs) {\r\n\t                    wrapper.apply(savedThis, savedArgs);\r\n\t                    savedArgs = savedThis = null;\r\n\t                }\r\n\t            }, ms);\r\n\t        }\r\n\t        return wrapper;\r\n\t    };\r\n\t    Utils.msToTimeString = function (timestamp) {\r\n\t        var h = Math.floor(timestamp / 360000);\r\n\t        var m = Math.floor(timestamp / 60000);\r\n\t        var s = Math.floor(timestamp / 1000);\r\n\t        return h + ':' + m + ':' + s;\r\n\t    };\r\n\t    Utils.getRandomItem = function (arr) {\r\n\t        var ind = Math.floor(Math.random() * arr.length);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.copyProps = function (srcObject, dstObject, props, excludeProps) {\r\n\t        if (excludeProps === void 0) { excludeProps = []; }\r\n\t        for (var key in props) {\r\n\t            if (excludeProps.indexOf(key) !== -1)\r\n\t                continue;\r\n\t            if (srcObject[key] == void 0)\r\n\t                continue;\r\n\t            if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\r\n\t                this.copyProps(srcObject[key], dstObject[key], props[key]);\r\n\t            }\r\n\t            else {\r\n\t                dstObject[key] = this.deepCopy(srcObject[key]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Utils.currentId = 1;\r\n\t    return Utils;\r\n\t}());\r\n\texports.Utils = Utils;\r\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(13);\r\n\t/**\r\n\t * this class uses as proxy for EventEmitter2\r\n\t */\r\n\tvar EventEmitter = (function () {\r\n\t    function EventEmitter() {\r\n\t        this.ee = new deps_1.EE2();\r\n\t    }\r\n\t    EventEmitter.prototype.emit = function (eventName) {\r\n\t        var args = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            args[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        (_a = this.ee).emit.apply(_a, [eventName].concat(args));\r\n\t        var _a;\r\n\t    };\r\n\t    EventEmitter.prototype.on = function (eventName, callback) {\r\n\t        return this.ee.on(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.off = function (eventName, callback) {\r\n\t        return this.ee.off(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.subscribe = function (eventName, callback) {\r\n\t        var _this = this;\r\n\t        this.on(eventName, callback);\r\n\t        return function () { return _this.off(eventName, callback); };\r\n\t    };\r\n\t    EventEmitter.prototype.setMaxListeners = function (listenersCount) {\r\n\t        this.ee.setMaxListeners(listenersCount);\r\n\t    };\r\n\t    EventEmitter.prototype.removeAllListeners = function (eventName) {\r\n\t        this.ee.removeAllListeners(eventName);\r\n\t    };\r\n\t    return EventEmitter;\r\n\t}());\r\n\texports.EventEmitter = EventEmitter;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(2));\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar TrendsManager_1 = __webpack_require__(17);\r\n\tvar Screen_1 = __webpack_require__(18);\r\n\tvar AxisMarks_1 = __webpack_require__(19);\r\n\tvar interfaces_1 = __webpack_require__(20);\r\n\tvar deps_1 = __webpack_require__(2);\r\n\tvar AnimationManager_1 = __webpack_require__(21);\r\n\tvar Easing_1 = __webpack_require__(22);\r\n\tvar CHART_STATE_EVENTS = {\r\n\t    INITIAL_STATE_APPLIED: 'initialStateApplied',\r\n\t    READY: 'ready',\r\n\t    DESTROY: 'destroy',\r\n\t    CHANGE: 'change',\r\n\t    TREND_CHANGE: 'trendChange',\r\n\t    TRENDS_CHANGE: 'trendsChange',\r\n\t    ZOOM: 'zoom',\r\n\t    RESIZE: 'resize',\r\n\t    SCROLL: 'scroll',\r\n\t    SCROLL_STOP: 'scrollStop',\r\n\t    PLUGINS_STATE_CHANGED: 'pluginsStateChanged'\r\n\t};\r\n\tvar LIGHT_BLUE = '#5273bd';\r\n\t/**\r\n\t *  all state changes caused only by Chart.setState method\r\n\t */\r\n\tvar Chart = (function () {\r\n\t    function Chart(initialState, plugins) {\r\n\t        if (plugins === void 0) { plugins = []; }\r\n\t        this.state = {\r\n\t            prevState: {},\r\n\t            zoom: 0,\r\n\t            xAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.ALL,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    scroll: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 0, end: 5 },\r\n\t                    margin: { start: 0, end: 5 }\r\n\t                },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                grid: { enabled: true, minSizePx: 100, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                autoScroll: true,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            yAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 5, end: 5 },\r\n\t                    margin: { start: 5, end: 5 },\r\n\t                },\r\n\t                grid: { enabled: true, minSizePx: 50, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            animations: {\r\n\t                enabled: true,\r\n\t                trendChangeSpeed: 0.5,\r\n\t                trendChangeEase: void 0,\r\n\t                zoomSpeed: 250,\r\n\t                scrollSpeed: 1000,\r\n\t                scrollEase: Easing_1.EASING.Quadratic.Out,\r\n\t                zoomEase: Easing_1.EASING.Quadratic.Out,\r\n\t                autoScrollSpeed: 1000,\r\n\t                autoScrollEase: Easing_1.EASING.Linear.None,\r\n\t            },\r\n\t            autoRender: { enabled: true, fps: 0 },\r\n\t            autoResize: true,\r\n\t            renderer: 'WebGLRenderer',\r\n\t            autoScroll: true,\r\n\t            controls: { enabled: true },\r\n\t            trendDefaultState: {\r\n\t                enabled: true,\r\n\t                type: Trend_1.TREND_TYPE.LINE,\r\n\t                data: [],\r\n\t                maxSegmentLength: 1000,\r\n\t                lineWidth: 2,\r\n\t                lineColor: 0xFFFFFF,\r\n\t                hasBackground: true,\r\n\t                backgroundColor: 'rgba(#FFFFFF, 0.07)',\r\n\t                hasBeacon: false,\r\n\t                settingsForTypes: {\r\n\t                    CANDLE: {\r\n\t                        minSegmentLengthInPx: 20,\r\n\t                        maxSegmentLengthInPx: 40,\r\n\t                    },\r\n\t                    LINE: {\r\n\t                        minSegmentLengthInPx: 2,\r\n\t                        maxSegmentLengthInPx: 10,\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            cursor: {\r\n\t                dragMode: false,\r\n\t                x: 0,\r\n\t                y: 0\r\n\t            },\r\n\t            font: {\r\n\t                s: '11px Arial',\r\n\t                m: '12px Arial',\r\n\t                l: '13px Arial'\r\n\t            },\r\n\t            backgroundColor: 0x000c2a,\r\n\t            showStats: false,\r\n\t            pluginsState: {},\r\n\t            eventEmitterMaxListeners: 20,\r\n\t            maxVisibleSegments: 1280\r\n\t        };\r\n\t        this.plugins = {};\r\n\t        this.animationManager = new AnimationManager_1.AnimationManager();\r\n\t        /**\r\n\t         * true then state was initialized and ready to use\r\n\t         */\r\n\t        this.isReady = false;\r\n\t        this.isDestroyed = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, initialState);\r\n\t        this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\r\n\t        initialState.trends = this.trendsManager.calculatedOptions;\r\n\t        initialState = this.installPlugins(plugins, initialState);\r\n\t        this.setState(initialState);\r\n\t        this.setState({ computedData: this.getComputedData() });\r\n\t        this.savePrevState();\r\n\t        this.screen = new Screen_1.Screen(this);\r\n\t        this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\r\n\t        this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\r\n\t        this.initListeners();\r\n\t        // message to other modules that Chart.state is ready for use\r\n\t        this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\r\n\t        // message to other modules that Chart is ready for use\r\n\t        this.isReady = true;\r\n\t        this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\r\n\t    }\r\n\t    /**\r\n\t     * destroy chart, use ChartView.destroy to completely destroy Chart\r\n\t     */\r\n\t    Chart.prototype.destroy = function () {\r\n\t        this.ee.emit(CHART_STATE_EVENTS.DESTROY);\r\n\t        this.ee.removeAllListeners();\r\n\t        this.state = {};\r\n\t        this.isDestroyed = true;\r\n\t    };\r\n\t    Chart.prototype.onDestroy = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\r\n\t    };\r\n\t    Chart.prototype.onInitialStateApplied = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\r\n\t    };\r\n\t    Chart.prototype.onReady = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\r\n\t    };\r\n\t    Chart.prototype.onChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendsChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onScrollStop = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\r\n\t    };\r\n\t    Chart.prototype.onScroll = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\r\n\t    };\r\n\t    Chart.prototype.onZoom = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\r\n\t    };\r\n\t    Chart.prototype.onResize = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\r\n\t    };\r\n\t    Chart.prototype.onPluginsStateChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\r\n\t    };\r\n\t    Chart.prototype.getTrend = function (trendName) {\r\n\t        return this.trendsManager.getTrend(trendName);\r\n\t    };\r\n\t    Chart.prototype.render = function () {\r\n\t        this.animationManager.tick();\r\n\t    };\r\n\t    Chart.prototype.setState = function (newState, eventData, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        if (this.isDestroyed) {\r\n\t            Utils_1.Utils.error('You have tried to change state of destroyed Chart instance');\r\n\t        }\r\n\t        var stateData = this.state;\r\n\t        var newStateObj = newState;\r\n\t        var changedProps = {};\r\n\t        for (var key in newStateObj) {\r\n\t            if (stateData[key] !== newStateObj[key]) {\r\n\t                changedProps[key] = newStateObj[key];\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(changedProps);\r\n\t        // temporary remove trends state from newState by performance reasons\r\n\t        var trendsData = {};\r\n\t        if (newState.trends)\r\n\t            for (var trendName in newState.trends) {\r\n\t                var trendOptions = newState.trends[trendName];\r\n\t                if (trendOptions.data)\r\n\t                    trendsData[trendName] = trendOptions.data;\r\n\t                delete trendOptions.data;\r\n\t            }\r\n\t        var newStateContainsData = Object.keys(trendsData).length > 0;\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, newState, false);\r\n\t        // return state to state\r\n\t        if (newStateContainsData)\r\n\t            for (var trendName in trendsData) {\r\n\t                this.state.trends[trendName].data = trendsData[trendName];\r\n\t            }\r\n\t        if (silent)\r\n\t            return;\r\n\t        // recalculate all dynamic state props\r\n\t        var recalculateResult = this.recalculateState(changedProps);\r\n\t        changedProps = recalculateResult.changedProps;\r\n\t        this.emitChangedStateEvents(changedProps, eventData);\r\n\t    };\r\n\t    /**\r\n\t     * recalculate all computed state props\r\n\t     */\r\n\t    Chart.prototype.recalculateState = function (changedProps) {\r\n\t        var data = this.state;\r\n\t        var patch = {};\r\n\t        var actualData = Utils_1.Utils.deepMerge({}, data);\r\n\t        // recalculate scroll position by changed cursor options\r\n\t        var cursorOptions = changedProps.cursor;\r\n\t        var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\r\n\t        if (isMouseDrag) {\r\n\t            var oldX = data.prevState.cursor.x;\r\n\t            var currentX = cursorOptions.x;\r\n\t            var currentScroll = data.xAxis.range.scroll;\r\n\t            var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\r\n\t            patch.xAxis = { range: { scroll: currentScroll + deltaXVal } };\r\n\t            actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: patch.xAxis });\r\n\t        }\r\n\t        var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\r\n\t        var scrollXChanged = false;\r\n\t        var needToRecalculateXAxis = (isMouseDrag ||\r\n\t            chartWasResized ||\r\n\t            (changedProps.xAxis && (changedProps.xAxis.range)) ||\r\n\t            this.state.xAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateXAxis) {\r\n\t            var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\r\n\t            if (xAxisPatch) {\r\n\t                scrollXChanged = true;\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { xAxis: xAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: xAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        // recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\r\n\t        var needToRecalculateYAxis = (chartWasResized ||\r\n\t            (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END ||\r\n\t                data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO ||\r\n\t                data.yAxis.range.isMirrorMode) &&\r\n\t                (scrollXChanged || changedProps.trends || changedProps.yAxis) ||\r\n\t            this.state.yAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateYAxis) {\r\n\t            var yAxisPatch = this.recalculateYAxis(actualData);\r\n\t            if (yAxisPatch) {\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { yAxis: yAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { yAxis: yAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(patch);\r\n\t        var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\r\n\t        patch.computedData = this.getComputedData(allChangedProps);\r\n\t        this.savePrevState(patch);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, patch);\r\n\t        return { changedProps: allChangedProps, patch: patch };\r\n\t    };\r\n\t    Chart.prototype.getComputedData = function (changedProps) {\r\n\t        var computeAll = !changedProps;\r\n\t        var computedData = {};\r\n\t        if (computeAll || changedProps.trends && this.trendsManager) {\r\n\t            computedData.trends = {\r\n\t                maxXVal: this.trendsManager.getEndXVal(),\r\n\t                minXVal: this.trendsManager.getStartXVal()\r\n\t            };\r\n\t        }\r\n\t        return computedData;\r\n\t    };\r\n\t    Chart.prototype.savePrevState = function (changedProps) {\r\n\t        if (!changedProps)\r\n\t            changedProps = this.state;\r\n\t        var prevState = this.state.prevState;\r\n\t        // prevent to store prev trend state by performance reasons\r\n\t        Utils_1.Utils.copyProps(this.state, prevState, changedProps, ['trends']);\r\n\t    };\r\n\t    Chart.prototype.emitChangedStateEvents = function (changedProps, eventData) {\r\n\t        var prevState = this.state.prevState;\r\n\t        // emit common change event\r\n\t        this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\r\n\t        // emit event for each changed state property\r\n\t        for (var key in changedProps) {\r\n\t            this.ee.emit(key + 'Change', changedProps[key], eventData);\r\n\t        }\r\n\t        if (!this.isReady)\r\n\t            return;\r\n\t        // emit special events based on changed state\r\n\t        var scrollStopEventNeeded = (changedProps.cursor &&\r\n\t            changedProps.cursor.dragMode === false &&\r\n\t            prevState.cursor.dragMode === true);\r\n\t        scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\r\n\t        var scrollChangeEventsNeeded = (changedProps.xAxis &&\r\n\t            changedProps.xAxis.range &&\r\n\t            changedProps.xAxis.range.scroll !== void 0);\r\n\t        scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\r\n\t        var zoomEventsNeeded = ((changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\r\n\t            (changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom));\r\n\t        zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\r\n\t        var resizeEventNeeded = (changedProps.width || changedProps.height);\r\n\t        resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\r\n\t        var pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\r\n\t        pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\r\n\t    };\r\n\t    /**\r\n\t     * init plugins and save plugins options in initialState\r\n\t     */\r\n\t    Chart.prototype.installPlugins = function (plugins, initialState) {\r\n\t        var _this = this;\r\n\t        initialState.pluginsState = {};\r\n\t        plugins.forEach(function (plugin) {\r\n\t            var PluginClass = plugin.constructor;\r\n\t            var pluginName = PluginClass.NAME;\r\n\t            initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\r\n\t            _this.plugins[pluginName] = plugin;\r\n\t            plugin.setupChart(_this);\r\n\t        });\r\n\t        return initialState;\r\n\t    };\r\n\t    /**\r\n\t     * returns plugin instance by plugin name\r\n\t     * @example\r\n\t     */\r\n\t    Chart.prototype.getPlugin = function (pluginName) {\r\n\t        return this.plugins[pluginName];\r\n\t    };\r\n\t    Chart.prototype.initListeners = function () {\r\n\t        var _this = this;\r\n\t        this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function (changedTrends, newData) {\r\n\t            _this.handleTrendsChange(changedTrends, newData);\r\n\t        });\r\n\t        this.ee.on('animationsChange', function (animationOptions) {\r\n\t            if (animationOptions.enabled !== _this.animationManager.isAnimationsEnabled) {\r\n\t                _this.animationManager.setAimationsEnabled(animationOptions.enabled);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.handleTrendsChange = function (changedTrends, newData) {\r\n\t        for (var trendName in changedTrends) {\r\n\t            this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\r\n\t        }\r\n\t    };\r\n\t    Chart.prototype.recalculateXAxis = function (actualData, changedProps) {\r\n\t        var axisRange = actualData.xAxis.range;\r\n\t        var patch = { range: {} };\r\n\t        var isInitialize = axisRange.zeroVal == void 0;\r\n\t        var zeroVal, scaleFactor;\r\n\t        var zoom = axisRange.zoom;\r\n\t        if (axisRange.isMirrorMode) {\r\n\t            Utils_1.Utils.error('range.isMirrorMode available only for yAxis.range');\r\n\t        }\r\n\t        if (isInitialize) {\r\n\t            zeroVal = axisRange.from;\r\n\t            scaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t        }\r\n\t        else {\r\n\t            zeroVal = axisRange.zeroVal;\r\n\t            scaleFactor = axisRange.scaleFactor;\r\n\t            // recalculate range.zoom and range.scroll then range.from or range.to was changed\r\n\t            if (changedProps.xAxis &&\r\n\t                (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\r\n\t                if (changedProps.xAxis.range.zoom) {\r\n\t                    Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\r\n\t                }\r\n\t                var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t                patch.range.scroll = axisRange.from - zeroVal;\r\n\t                patch.range.zoom = currentScaleFactor / scaleFactor;\r\n\t                return patch;\r\n\t            }\r\n\t        }\r\n\t        // recalculate range.from and range.to then range.zoom or range.scroll was changed\r\n\t        do {\r\n\t            var from = zeroVal + axisRange.scroll;\r\n\t            var to = from + actualData.width / (scaleFactor * zoom);\r\n\t            var rangeLength = to - from;\r\n\t            var needToRecalculateZoom = false;\r\n\t            var rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\r\n\t            var rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\r\n\t            needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\r\n\t            if (needToRecalculateZoom) {\r\n\t                var fixScale = rangeLength > axisRange.maxLength ?\r\n\t                    rangeLength / axisRange.maxLength :\r\n\t                    rangeLength / axisRange.minLength;\r\n\t                var zoom = zoom * fixScale;\r\n\t                patch.range.zoom = zoom;\r\n\t            }\r\n\t        } while (needToRecalculateZoom);\r\n\t        patch.range.from = from;\r\n\t        patch.range.to = to;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.recalculateYAxis = function (actualData) {\r\n\t        var patch = { range: {} };\r\n\t        var yAxisRange = actualData.yAxis.range;\r\n\t        var isInitialize = yAxisRange.scaleFactor == void 0;\r\n\t        var trends = this.trendsManager;\r\n\t        var trendsEndXVal = trends.getEndXVal();\r\n\t        var trendsStartXVal = trends.getStartXVal();\r\n\t        var xRange = actualData.xAxis.range;\r\n\t        var xFrom = xRange.from, xTo = xRange.to;\r\n\t        var xRangeLength = xTo - xFrom;\r\n\t        var zeroVal, scaleFactor, scroll, zoom, needToZoom;\r\n\t        // check situation when state was scrolled behind trends end or before trends start\r\n\t        if (xTo > trendsEndXVal) {\r\n\t            xTo = trendsEndXVal;\r\n\t            xFrom = xTo - xRangeLength;\r\n\t        }\r\n\t        else if (xFrom < trendsStartXVal) {\r\n\t            xFrom = trendsStartXVal;\r\n\t            xTo = xFrom + xRangeLength;\r\n\t        }\r\n\t        var maxY = trends.getMaxYVal(xFrom, xTo);\r\n\t        var minY = trends.getMinYVal(xFrom, xTo);\r\n\t        var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\r\n\t        if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\r\n\t            if (trendLastY > maxY)\r\n\t                maxY = trendLastY;\r\n\t            if (trendLastY < minY)\r\n\t                minY = trendLastY;\r\n\t        }\r\n\t        if (yAxisRange.isMirrorMode) {\r\n\t            if (yAxisRange.zeroVal == void 0)\r\n\t                Utils_1.Utils.error('range.zeroVal must be set when range.isMirrorMode');\r\n\t            var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\r\n\t            var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\r\n\t            var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\r\n\t            maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\r\n\t            minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\r\n\t        }\r\n\t        var margin = yAxisRange.margin;\r\n\t        var padding = {\r\n\t            start: yAxisRange.padding.start + margin.start,\r\n\t            end: yAxisRange.padding.end + margin.end\r\n\t        };\r\n\t        if (padding.end + padding.start >= actualData.height) {\r\n\t            Utils_1.Utils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\r\n\t        }\r\n\t        var rangeLength = maxY - minY;\r\n\t        var paddingTopInPercents = padding.end / actualData.height;\r\n\t        var paddingBottomInPercents = padding.start / actualData.height;\r\n\t        var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\r\n\t        var visibleRangeLength = rangeLength / rangeLengthInPercents;\r\n\t        var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\r\n\t        var toVal = maxY + visibleRangeLength * paddingTopInPercents;\r\n\t        if (isInitialize) {\r\n\t            zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\r\n\t            scaleFactor = actualData.height / (toVal - fromVal);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t            needToZoom = true;\r\n\t        }\r\n\t        else {\r\n\t            scaleFactor = yAxisRange.scaleFactor;\r\n\t            zeroVal = yAxisRange.zeroVal;\r\n\t            var maxScreenY = Math.round(this.getScreenYByValue(maxY));\r\n\t            var minScreenY = Math.round(this.getScreenYByValue(minY));\r\n\t            needToZoom = (maxScreenY > actualData.height - margin.end ||\r\n\t                maxScreenY < actualData.height - padding.end ||\r\n\t                minScreenY < margin.start ||\r\n\t                minScreenY > padding.start);\r\n\t        }\r\n\t        if (!needToZoom)\r\n\t            return null;\r\n\t        scroll = fromVal - zeroVal;\r\n\t        zoom = (actualData.height / (toVal - fromVal)) / scaleFactor;\r\n\t        var currentAxisRange = this.state.yAxis.range;\r\n\t        if (currentAxisRange.from !== fromVal)\r\n\t            patch.range.from = fromVal;\r\n\t        if (currentAxisRange.to !== toVal)\r\n\t            patch.range.to = toVal;\r\n\t        if (currentAxisRange.scroll !== scroll)\r\n\t            patch.range.scroll = scroll;\r\n\t        if (currentAxisRange.zoom !== zoom)\r\n\t            patch.range.zoom = zoom;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.zoom = function (zoomValue, origin) {\r\n\t        var _this = this;\r\n\t        if (origin === void 0) { origin = 0.5; }\r\n\t        var _a = this.state.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\r\n\t        var newZoom = zoom * zoomValue;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        var nextRange = this.state.width / (scaleFactor * newZoom);\r\n\t        var newScroll = scroll + (currentRange - nextRange) * origin;\r\n\t        this.setState({ xAxis: { range: { zoom: newZoom, scroll: newScroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.zoomSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.zoomToRange = function (range, origin) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        return this.zoom(currentRange / range, origin);\r\n\t    };\r\n\t    Chart.prototype.scrollToEnd = function () {\r\n\t        var _this = this;\r\n\t        var state = this.state;\r\n\t        var endXVal = this.trendsManager.getEndXVal();\r\n\t        var range = state.xAxis.range;\r\n\t        var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\r\n\t        this.setState({ xAxis: { range: { scroll: scroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.scrollSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to xVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to yVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     * returns xVal by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Chart.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert xVal to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert xVal to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to xVal by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to xVal by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns x xVal by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenX = function (x) {\r\n\t        var _a = this.state.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns y xVal by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenY = function (y) {\r\n\t        var _a = this.state.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen x xVal by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen y xVal by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenYByValue = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByYAxis(yVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal xVal\r\n\t     */\r\n\t    Chart.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal xVal by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    Chart.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    Chart.prototype.getScreenLeftVal = function () {\r\n\t        return this.getValueByScreenX(0);\r\n\t    };\r\n\t    Chart.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.state.width);\r\n\t    };\r\n\t    Chart.prototype.getPaddingRight = function () {\r\n\t        return this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\r\n\t    };\r\n\t    return Chart;\r\n\t}());\r\n\texports.Chart = Chart;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar TrendSegmentsManager_1 = __webpack_require__(16);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar deps_1 = __webpack_require__(2);\r\n\tvar EVENTS = {\r\n\t    CHANGE: 'Change',\r\n\t    PREPEND_REQUEST: 'prependRequest'\r\n\t};\r\n\t(function (TREND_TYPE) {\r\n\t    TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\r\n\t    TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\r\n\t})(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\r\n\tvar TREND_TYPE = exports.TREND_TYPE;\r\n\tvar Trend = (function () {\r\n\t    function Trend(chartState, trendName, initialState) {\r\n\t        this.minXVal = Infinity;\r\n\t        this.minYVal = Infinity;\r\n\t        this.maxXVal = -Infinity;\r\n\t        this.maxYVal = -Infinity;\r\n\t        var options = initialState.trends[trendName];\r\n\t        this.name = trendName;\r\n\t        this.chart = chartState;\r\n\t        this.calculatedOptions = Utils_1.Utils.deepMerge(this.chart.state.trendDefaultState, options);\r\n\t        this.calculatedOptions.name = trendName;\r\n\t        if (options.dataset)\r\n\t            this.calculatedOptions.data = Trend.prepareData(options.dataset);\r\n\t        this.calculatedOptions.dataset = [];\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    Trend.prototype.onInitialStateApplied = function () {\r\n\t        this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chart, this);\r\n\t    };\r\n\t    Trend.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var chartState = this.chart;\r\n\t        chartState.onInitialStateApplied(function () { return _this.onInitialStateApplied(); });\r\n\t        chartState.onScrollStop(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onZoom(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onTrendChange(function (trendName, changedOptions, newData) { return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData); });\r\n\t        chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    Trend.prototype.getCalculatedOptions = function () {\r\n\t        return this.calculatedOptions;\r\n\t    };\r\n\t    Trend.prototype.appendData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData());\r\n\t        var updatedTrendData = options.data.concat(newData);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.prependData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData(), true);\r\n\t        var updatedTrendData = newData.concat(options.data);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.changeData = function (allData, newData) {\r\n\t        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\r\n\t            var item = newData_1[_i];\r\n\t            if (item.xVal < this.minXVal)\r\n\t                this.minXVal = item.xVal;\r\n\t            if (item.xVal > this.maxXVal)\r\n\t                this.maxXVal = item.xVal;\r\n\t            if (item.yVal < this.minYVal)\r\n\t                this.minYVal = item.yVal;\r\n\t            if (item.yVal > this.maxYVal)\r\n\t                this.maxYVal = item.yVal;\r\n\t        }\r\n\t        var options = this.getOptions();\r\n\t        var statePatch = { trends: (_a = {}, _a[options.name] = { data: allData }, _a) };\r\n\t        this.chart.setState(statePatch, newData);\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.getData = function (fromX, toX) {\r\n\t        var data = this.getOptions().data;\r\n\t        if (fromX == void 0 && toX == void 0)\r\n\t            return data;\r\n\t        fromX = fromX !== void 0 ? fromX : data[0].xVal;\r\n\t        toX = toX !== void 0 ? toX : data[data.length].xVal;\r\n\t        var filteredData = [];\r\n\t        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\r\n\t            var item = data_1[_i];\r\n\t            if (item.xVal < fromX)\r\n\t                continue;\r\n\t            if (item.xVal > toX)\r\n\t                break;\r\n\t            filteredData.push(item);\r\n\t        }\r\n\t        return filteredData;\r\n\t    };\r\n\t    Trend.prototype.getFirstItem = function () {\r\n\t        return this.getOptions().data[0];\r\n\t    };\r\n\t    Trend.prototype.getLastItem = function () {\r\n\t        var data = this.getOptions().data;\r\n\t        return data[data.length - 1];\r\n\t    };\r\n\t    Trend.prototype.getOptions = function () {\r\n\t        return this.chart.state.trends[this.name];\r\n\t    };\r\n\t    Trend.prototype.setOptions = function (options) {\r\n\t        this.chart.setState({ trends: (_a = {}, _a[this.name] = options, _a) });\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.onPrependRequest = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.PREPEND_REQUEST, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for Chart.onTrendChange\r\n\t     */\r\n\t    Trend.prototype.onChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.CHANGE, cb);\r\n\t        return function () { _this.ee.off(EVENTS.CHANGE, cb); };\r\n\t    };\r\n\t    Trend.prototype.onDataChange = function (cb) {\r\n\t        var _this = this;\r\n\t        var onChangeCb = function (changedOptions, newData) {\r\n\t            if (newData)\r\n\t                cb(newData);\r\n\t        };\r\n\t        this.ee.on(EVENTS.CHANGE, onChangeCb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.CHANGE, onChangeCb);\r\n\t        };\r\n\t    };\r\n\t    Trend.prototype.checkForPrependRequest = function () {\r\n\t        var _this = this;\r\n\t        if (this.prependRequest)\r\n\t            return;\r\n\t        var chartState = this.chart;\r\n\t        var minXVal = chartState.state.computedData.trends.minXVal;\r\n\t        var minScreenX = chartState.getScreenXByValue(minXVal);\r\n\t        var needToRequest = minScreenX > 0;\r\n\t        var _a = chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var requestedDataLength = to - from;\r\n\t        if (!needToRequest)\r\n\t            return;\r\n\t        this.prependRequest = new deps_1.Promise(function (resolve, reject) {\r\n\t            _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\r\n\t        });\r\n\t        this.prependRequest.then(function (newData) {\r\n\t            _this.prependData(newData);\r\n\t            _this.prependRequest = null;\r\n\t        }, function () {\r\n\t            _this.prependRequest = null;\r\n\t        });\r\n\t    };\r\n\t    Trend.prepareData = function (newData, currentData, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var data = [];\r\n\t        if (typeof newData[0] == 'number') {\r\n\t            currentData = currentData || [];\r\n\t            var initialItem = void 0;\r\n\t            var xVal = void 0;\r\n\t            if (isPrepend) {\r\n\t                initialItem = currentData[0];\r\n\t                xVal = initialItem.xVal - newData.length;\r\n\t            }\r\n\t            else {\r\n\t                initialItem = currentData[currentData.length - 1];\r\n\t                xVal = initialItem ? initialItem.xVal + 1 : 0;\r\n\t            }\r\n\t            for (var _i = 0, _a = newData; _i < _a.length; _i++) {\r\n\t                var yVal = _a[_i];\r\n\t                data.push({ xVal: xVal, yVal: yVal, id: Utils_1.Utils.getUid() });\r\n\t                xVal++;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            data = newData;\r\n\t        }\r\n\t        return data;\r\n\t    };\r\n\t    return Trend;\r\n\t}());\r\n\texports.Trend = Trend;\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar MAX_ANIMATED_SEGMENTS = 100;\r\n\tvar EVENTS = {\r\n\t    REBUILD: 'rebuild',\r\n\t    DISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\r\n\t    ANIMATION_FRAME: 'animationFrame'\r\n\t};\r\n\t/**\r\n\t *  Class helps to display and animate trends segments\r\n\t */\r\n\tvar TrendSegmentsManager = (function () {\r\n\t    function TrendSegmentsManager(chartState, trend) {\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.segmentsLength = 0;\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForPrepend = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.trend = trend;\r\n\t        this.maxSegmentLength = trend.getOptions().maxSegmentLength;\r\n\t        this.tryToRebuildSegments();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendSegmentsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.trend.onChange(function (changedOptions, newData) { return _this.onTrendChangeHandler(changedOptions, newData); });\r\n\t        this.chartState.onZoom(function () { return _this.onZoomHandler(); });\r\n\t        this.chartState.onScroll(function () { return _this.recalculateDisplayedRange(); });\r\n\t        this.chartState.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.appendAnimation && this.appendAnimation.kill();\r\n\t        this.prependAnimation && this.prependAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onZoomHandler = function () {\r\n\t        var segmentsRebuilded = this.tryToRebuildSegments();\r\n\t        if (!segmentsRebuilded) {\r\n\t            this.recalculateDisplayedRange();\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onTrendChangeHandler = function (changedOptions, newData) {\r\n\t        var needToRebuildSegments = (changedOptions.type != void 0 ||\r\n\t            changedOptions.maxSegmentLength != void 0);\r\n\t        if (needToRebuildSegments) {\r\n\t            this.tryToRebuildSegments(true);\r\n\t            return;\r\n\t        }\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var data = this.trend.getData();\r\n\t        var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t        isAppend ? this.appendData(newData) : this.prependData(newData);\r\n\t        this.recalculateDisplayedRange();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getSegment = function (id) {\r\n\t        return this.segmentsById[id];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getEndSegment = function () {\r\n\t        return this.segmentsById[this.endSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getStartSegment = function () {\r\n\t        return this.segmentsById[this.startSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.tryToRebuildSegments = function (force) {\r\n\t        if (force === void 0) { force = false; }\r\n\t        var options = this.trend.getOptions();\r\n\t        var trendTypeName = Trend_1.TREND_TYPE[options.type];\r\n\t        var trendTypesSettings = options.settingsForTypes;\r\n\t        var trendTypeSettings = trendTypesSettings[trendTypeName];\r\n\t        var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\r\n\t        var needToRebuild = this.segments.length === 0 || force;\r\n\t        var segmentLength = this.maxSegmentLength;\r\n\t        // call toFixed(2) to prevent floating segment error compare\r\n\t        var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\r\n\t        var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\r\n\t        if (currentSegmentLengthInPx < minSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\r\n\t        }\r\n\t        else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\r\n\t        }\r\n\t        if (!needToRebuild)\r\n\t            return false;\r\n\t        this.maxSegmentLength = segmentLength;\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.segmentsLength = 0;\r\n\t        this.stopAllAnimations();\r\n\t        this.appendData(null, true);\r\n\t        this.recalculateDisplayedRange(true);\r\n\t        this.ee.emit(EVENTS.REBUILD);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.stopAllAnimations = function () {\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        if (this.prependAnimation)\r\n\t            this.prependAnimation.kill();\r\n\t        if (this.appendAnimation)\r\n\t            this.appendAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.recalculateDisplayedRange = function (segmentsAreRebuilded) {\r\n\t        if (segmentsAreRebuilded === void 0) { segmentsAreRebuilded = false; }\r\n\t        var _a = this.chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\r\n\t        var displayedRange = to - from;\r\n\t        this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\r\n\t        this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\r\n\t        this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\r\n\t        this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\r\n\t        if (segmentsAreRebuilded)\r\n\t            return;\r\n\t        var displayedRangeChanged = (firstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\r\n\t            lastDisplayedSegment.id !== this.lastDisplayedSegment.id);\r\n\t        if (displayedRangeChanged)\r\n\t            this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\r\n\t    };\r\n\t    // getSegments(fromX?: number, toX?: number): TrendSegment[] {\r\n\t    // \tvar segments = this.segments;\r\n\t    // \tif (fromX == void 0 && toX == void 0) return segments;\r\n\t    // \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\r\n\t    // \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\r\n\t    // \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\r\n\t    // \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\r\n\t    // \treturn segments.slice(startSegmentInd, endSegmentInd);\r\n\t    // }\r\n\t    /**\r\n\t     * returns array of segments for values array\r\n\t     * values must be sorted!\r\n\t     */\r\n\t    TrendSegmentsManager.prototype.getSegmentsForXValues = function (values) {\r\n\t        var valueInd = 0;\r\n\t        var value = values[valueInd];\r\n\t        var lastValueInd = values.length - 1;\r\n\t        var results = [];\r\n\t        var segment = this.getStartSegment();\r\n\t        if (!segment.hasValue)\r\n\t            return [];\r\n\t        while (segment) {\r\n\t            while (value < segment.startXVal) {\r\n\t                results.push(void 0);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            while (value > segment.endXVal) {\r\n\t                segment = segment.getNext();\r\n\t                if (!segment)\r\n\t                    break;\r\n\t            }\r\n\t            var valueInPoint = (segment.startXVal == value || segment.endXVal == value ||\r\n\t                (segment.startXVal < value && segment.endXVal > value));\r\n\t            if (valueInPoint) {\r\n\t                results.push(segment);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            if (valueInd > lastValueInd)\r\n\t                break;\r\n\t        }\r\n\t        return results;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrame = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onRebuild = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.REBUILD, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDisplayedRangeChanged = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocateNextSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var prevSegment = this.segmentsById[this.endSegmentId];\r\n\t        if (prevSegment && prevSegment.hasValue) {\r\n\t            prevSegment.nextId = id;\r\n\t            segment.prevId = prevSegment.id;\r\n\t        }\r\n\t        this.endSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.push(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocatePrevSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var nextSegment = this.segmentsById[this.startSegmentId];\r\n\t        if (nextSegment && nextSegment.hasValue) {\r\n\t            nextSegment.prevId = id;\r\n\t            segment.nextId = nextSegment.id;\r\n\t        }\r\n\t        this.startSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.unshift(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.appendData = function (newData, needRebuildSegments) {\r\n\t        // WARNING: bottleneck method!\r\n\t        if (needRebuildSegments === void 0) { needRebuildSegments = false; }\r\n\t        // var t1 = performance.now();\r\n\t        var trendData = this.trend.getData();\r\n\t        if (needRebuildSegments) {\r\n\t            newData = trendData;\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t        }\r\n\t        var startItemInd = trendData.length - newData.length;\r\n\t        var segment = this.getEndSegment() || this.allocateNextSegment();\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        var itemInd = 0;\r\n\t        while (itemInd < newData.length) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.appendItem(item);\r\n\t            var isLastItem = itemInd == newData.length - 1;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd++;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForAppend.length > 0) {\r\n\t                    segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\r\n\t                    segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForAppend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocateNextSegment();\r\n\t            var prevItem = trendData[startItemInd + itemInd - 1];\r\n\t            segment.appendItem(prevItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        // var t2 = performance.now();\r\n\t        // console.log(t2 - t1);\r\n\t        // do not create animation if segments was rebuilded\r\n\t        if (needRebuildSegments) {\r\n\t            for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\r\n\t                var segmentId = _a[_i];\r\n\t                var segment_1 = this.segmentsById[segmentId];\r\n\t                segment_1.currentAnimationState = segment_1.createAnimationState();\r\n\t            }\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t            return;\r\n\t        }\r\n\t        if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time);\r\n\t    };\r\n\t    // TODO: refactor duplicated code from appendData\r\n\t    TrendSegmentsManager.prototype.prependData = function (newData) {\r\n\t        var trendData = this.trend.getData();\r\n\t        var segment = this.getStartSegment() || this.segmentsById[0];\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var itemInd = newData.length - 1;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        while (itemInd >= 0) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.prependItem(item);\r\n\t            var isLastItem = itemInd == 0;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd--;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForPrepend.length > 0) {\r\n\t                    segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\r\n\t                    segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForPrepend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocatePrevSegment();\r\n\t            var nextItem = trendData[itemInd + 1];\r\n\t            segment.prependItem(nextItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time, true);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.animate = function (time, isPrepend) {\r\n\t        var _this = this;\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\r\n\t        if ((animation && animation.isActive()) || time == 0) {\r\n\t            if (animation)\r\n\t                animation.kill();\r\n\t            this.onAnimationFrameHandler(1, isPrepend);\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            return;\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var ease = animationsOptions.trendChangeEase;\r\n\t        var objectToAnimate = { animationValue: 0 };\r\n\t        animation = TweenLite.to(objectToAnimate, time, { animationValue: 1, ease: ease });\r\n\t        animation.eventCallback('onUpdate', function () { return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend); });\r\n\t        animation.eventCallback('onComplete', function () {\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            _this.appendAnimation = null;\r\n\t        });\r\n\t        if (isPrepend) {\r\n\t            this.prependAnimation = animation;\r\n\t        }\r\n\t        else {\r\n\t            this.appendAnimation = animation;\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrameHandler = function (coefficient, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\r\n\t            var segmentId = animatedSegmentsIds_1[_i];\r\n\t            var segment = this.segmentsById[segmentId];\r\n\t            for (var key in segment.targetAnimationState) {\r\n\t                var targetValue = segment.targetAnimationState[key];\r\n\t                var initialValue = segment.initialAnimationState[key];\r\n\t                var currentValue = initialValue + (targetValue - initialValue) * coefficient;\r\n\t                segment.currentAnimationState[key] = currentValue;\r\n\t            }\r\n\t        }\r\n\t        this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\r\n\t        this.ee.emit(EVENTS.ANIMATION_FRAME, this);\r\n\t    };\r\n\t    return TrendSegmentsManager;\r\n\t}());\r\n\texports.TrendSegmentsManager = TrendSegmentsManager;\r\n\tvar TrendSegment = (function () {\r\n\t    function TrendSegment(trendPoints, id) {\r\n\t        this.isCompleted = false;\r\n\t        this.items = [];\r\n\t        this.initialAnimationState = {};\r\n\t        this.targetAnimationState = {};\r\n\t        this.currentAnimationState = {};\r\n\t        this.trendSegments = trendPoints;\r\n\t        this.id = id;\r\n\t        this.maxLength = trendPoints.maxSegmentLength;\r\n\t    }\r\n\t    TrendSegment.prototype.createAnimationState = function () {\r\n\t        var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\r\n\t        return {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal,\r\n\t            startXVal: startXVal,\r\n\t            startYVal: startYVal,\r\n\t            endXVal: endXVal,\r\n\t            endYVal: endYVal,\r\n\t            maxYVal: maxYVal,\r\n\t            minYVal: minYVal,\r\n\t            maxLength: maxLength\r\n\t        };\r\n\t    };\r\n\t    ;\r\n\t    TrendSegment.prototype.appendItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.push(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var startXVal = items[0].xVal;\r\n\t        if (item.xVal - startXVal > this.maxLength)\r\n\t            return false;\r\n\t        items.push(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.prependItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.unshift(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var endXVal = items[items.length - 1].xVal;\r\n\t        if (endXVal - item.xVal > this.maxLength)\r\n\t            return false;\r\n\t        items.unshift(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.complete = function () {\r\n\t        this.isCompleted = true;\r\n\t        this.recalculateItems();\r\n\t        this.items = []; // free memory for completed ranges\r\n\t    };\r\n\t    TrendSegment.prototype.recalculateItems = function () {\r\n\t        var items = this.items;\r\n\t        var itemsLength = items.length;\r\n\t        if (itemsLength === 0)\r\n\t            Utils_1.Utils.error('Unable to create TrendSegment without TrendItems');\r\n\t        var endItem = items[itemsLength - 1];\r\n\t        var endXVal = endItem.xVal, endYVal = endItem.yVal;\r\n\t        var startXVal, startYVal;\r\n\t        var startItem = items[0];\r\n\t        startXVal = startItem.xVal;\r\n\t        startYVal = startItem.yVal;\r\n\t        var minX = Math.min(startXVal, endXVal);\r\n\t        var maxX = Math.max(startXVal, endXVal);\r\n\t        var middleXVal = minX + (maxX - minX) / 2;\r\n\t        var minY = Math.min(startYVal, endYVal);\r\n\t        var maxY = Math.max(startYVal, endYVal);\r\n\t        var middleYVal = minY + (maxY - minY) / 2;\r\n\t        var yVals = items.map(function (item) { return item.yVal; });\r\n\t        this.startXVal = startXVal;\r\n\t        this.startYVal = startYVal;\r\n\t        this.endXVal = endXVal;\r\n\t        this.endYVal = endYVal;\r\n\t        this.xVal = middleXVal;\r\n\t        this.yVal = middleYVal;\r\n\t        this.maxYVal = Math.max.apply(Math, yVals);\r\n\t        this.minYVal = Math.min.apply(Math, yVals);\r\n\t        if (!this.currentAnimationState)\r\n\t            this.currentAnimationState = this.createAnimationState();\r\n\t    };\r\n\t    TrendSegment.prototype.getNext = function () {\r\n\t        var nextPoint = this.trendSegments.segmentsById[this.nextId];\r\n\t        return nextPoint && nextPoint.hasValue ? nextPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getPrev = function () {\r\n\t        var prevPoint = this.trendSegments.segmentsById[this.prevId];\r\n\t        return prevPoint && prevPoint.hasValue ? prevPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getFrameVal = function () {\r\n\t        var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\r\n\t        return new Vector3(xVal, yVal, 0);\r\n\t    };\r\n\t    TrendSegment.prototype.getFramePoint = function () {\r\n\t        var frameVal = this.getFrameVal();\r\n\t        return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\r\n\t    };\r\n\t    return TrendSegment;\r\n\t}());\r\n\texports.TrendSegment = TrendSegment;\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar EVENTS = {\r\n\t    SEGMENTS_REBUILDED: 'segmentsRebuilded'\r\n\t};\r\n\t/**\r\n\t * Trends manager\r\n\t */\r\n\tvar TrendsManager = (function () {\r\n\t    function TrendsManager(state, initialState) {\r\n\t        this.trends = {};\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.chartState = state;\r\n\t        var trendsCalculatedOptions = {};\r\n\t        for (var trendName in initialState.trends) {\r\n\t            var trend = this.createTrend(state, trendName, initialState);\r\n\t            trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\r\n\t        }\r\n\t        this.calculatedOptions = trendsCalculatedOptions;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendsManager.prototype.getTrend = function (trendName) {\r\n\t        return this.trends[trendName];\r\n\t    };\r\n\t    TrendsManager.prototype.getEnabledTrends = function () {\r\n\t        var enabledTrends = [];\r\n\t        var allTrends = this.trends;\r\n\t        for (var trendName in allTrends) {\r\n\t            var trend = allTrends[trendName];\r\n\t            trend.getOptions().enabled && enabledTrends.push(trend);\r\n\t        }\r\n\t        return enabledTrends;\r\n\t    };\r\n\t    TrendsManager.prototype.getStartXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        return trends[0].getData()[0].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getEndXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var firstTrendData = trends[0].getData();\r\n\t        return firstTrendData[firstTrendData.length - 1].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getExtremumYVal = function (extremumIsMax, fromX, toX) {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var compareFn;\r\n\t        var result;\r\n\t        if (extremumIsMax) {\r\n\t            result = -Infinity;\r\n\t            compareFn = Math.max;\r\n\t        }\r\n\t        else {\r\n\t            result = Infinity;\r\n\t            compareFn = Math.min;\r\n\t        }\r\n\t        for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\r\n\t            var trend = trends_1[_i];\r\n\t            var trendData = trend.getData(fromX, toX);\r\n\t            var trendYValues = trendData.map(function (dataItem) { return dataItem.yVal; });\r\n\t            result = compareFn.apply(void 0, [result].concat(trendYValues));\r\n\t        }\r\n\t        if (result == Infinity || result == -Infinity)\r\n\t            result = NaN;\r\n\t        return result;\r\n\t    };\r\n\t    TrendsManager.prototype.getMaxYVal = function (fromX, toX) { return this.getExtremumYVal(true, fromX, toX); };\r\n\t    TrendsManager.prototype.getMinYVal = function (fromX, toX) { return this.getExtremumYVal(false, fromX, toX); };\r\n\t    TrendsManager.prototype.onSegmentsRebuilded = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\r\n\t    };\r\n\t    TrendsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onInitialStateApplied(function () { return _this.onInitialStateAppliedHandler(); });\r\n\t    };\r\n\t    TrendsManager.prototype.onInitialStateAppliedHandler = function () {\r\n\t        var _this = this;\r\n\t        var _loop_1 = function(trendName) {\r\n\t            this_1.trends[trendName].segmentsManager.onRebuild(function () { return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName); });\r\n\t        };\r\n\t        var this_1 = this;\r\n\t        for (var trendName in this.trends) {\r\n\t            _loop_1(trendName);\r\n\t        }\r\n\t    };\r\n\t    TrendsManager.prototype.createTrend = function (state, trendName, initialState) {\r\n\t        var trend = new Trend_1.Trend(state, trendName, initialState);\r\n\t        this.trends[trendName] = trend;\r\n\t        return trend;\r\n\t    };\r\n\t    return TrendsManager;\r\n\t}());\r\n\texports.TrendsManager = TrendsManager;\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar SCREEN_EVENTS = {\r\n\t    ZOOM_FRAME: 'zoomFrame',\r\n\t    SCROLL_FRAME: 'scrollFrame',\r\n\t    TRANSFORMATION_FRAME: 'transformationFrame'\r\n\t};\r\n\t/**\r\n\t * manage camera, and contains methods for transforming pixels to values\r\n\t */\r\n\tvar Screen = (function () {\r\n\t    function Screen(chartState) {\r\n\t        // TODO: make own interface for Chart and Screen for calculating screen positions\r\n\t        this.options = { scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1 };\r\n\t        this.chart = chartState;\r\n\t        var _a = chartState.state, w = _a.width, h = _a.height;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.transform({\r\n\t            scrollY: this.valueToPxByYAxis(this.chart.state.yAxis.range.scroll),\r\n\t            zoomY: 1\r\n\t        });\r\n\t        this.bindEvents();\r\n\t        //camera.position.z = 1500;\r\n\t    }\r\n\t    Screen.prototype.getCameraSettings = function () {\r\n\t        var _a = this.chart.state, w = _a.width, h = _a.height;\r\n\t        // settings for pixel-perfect camera\r\n\t        var FOV = 75;\r\n\t        var vFOV = FOV * (Math.PI / 180);\r\n\t        return {\r\n\t            FOV: FOV,\r\n\t            aspect: w / h,\r\n\t            near: 0.1,\r\n\t            far: 5000,\r\n\t            z: h / (2 * Math.tan(vFOV / 2)),\r\n\t            // move 0,0 to left-bottom corner\r\n\t            x: w / 2,\r\n\t            y: h / 2\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onZoomFrame = function (cb) {\r\n\t        return this.ee.subscribe(SCREEN_EVENTS.ZOOM_FRAME, cb);\r\n\t    };\r\n\t    Screen.prototype.onScrollFrame = function (cb) {\r\n\t        return this.ee.subscribe(SCREEN_EVENTS.SCROLL_FRAME, cb);\r\n\t    };\r\n\t    Screen.prototype.onTransformationFrame = function (cb) {\r\n\t        return this.ee.subscribe(SCREEN_EVENTS.TRANSFORMATION_FRAME, cb);\r\n\t    };\r\n\t    Screen.prototype.cameraIsMoving = function () {\r\n\t        return !!(this.scrollXAnimation && !this.scrollXAnimation.isFinished ||\r\n\t            this.zoomXAnimation && !this.zoomXAnimation.isFinished);\r\n\t    };\r\n\t    /**\r\n\t     * setup zoom and scroll\r\n\t     */\r\n\t    Screen.prototype.transform = function (options, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\r\n\t        if (scrollX != void 0)\r\n\t            this.options.scrollX = scrollX;\r\n\t        if (scrollY != void 0)\r\n\t            this.options.scrollY = scrollY;\r\n\t        if (zoomX != void 0)\r\n\t            this.options.zoomX = zoomX;\r\n\t        if (zoomY != void 0)\r\n\t            this.options.zoomY = zoomY;\r\n\t        if (scrollX != void 0 || zoomX) {\r\n\t            options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\r\n\t            this.options.scrollXVal = options.scrollXVal;\r\n\t        }\r\n\t        if (scrollY != void 0 || zoomY) {\r\n\t            options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\r\n\t            this.options.scrollYVal = options.scrollYVal;\r\n\t        }\r\n\t        if (silent)\r\n\t            return;\r\n\t        this.ee.emit(SCREEN_EVENTS.TRANSFORMATION_FRAME, options);\r\n\t        var scrollEventNeeded = options.scrollXVal != void 0 || options.scrollYVal != void 0;\r\n\t        if (scrollEventNeeded)\r\n\t            this.ee.emit(SCREEN_EVENTS.SCROLL_FRAME, options);\r\n\t        var zoomEventNeeded = options.zoomX != void 0 || options.zoomY != void 0;\r\n\t        if (zoomEventNeeded)\r\n\t            this.ee.emit(SCREEN_EVENTS.ZOOM_FRAME, options);\r\n\t    };\r\n\t    Screen.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        // handle scroll and zoom\r\n\t        state.onChange(function (changedProps) {\r\n\t            if (changedProps.xAxis && changedProps.xAxis.range) {\r\n\t                if (changedProps.xAxis.range.scroll != void 0)\r\n\t                    _this.onScrollXHandler(changedProps);\r\n\t                if (changedProps.xAxis.range.zoom)\r\n\t                    _this.onZoomXHandler();\r\n\t            }\r\n\t            if (changedProps.yAxis && changedProps.yAxis.range) {\r\n\t                if (changedProps.yAxis.range.scroll != void 0)\r\n\t                    _this.onScrollYHandler();\r\n\t                if (changedProps.yAxis.range.zoom)\r\n\t                    _this.onZoomYHandler();\r\n\t            }\r\n\t        });\r\n\t        state.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    Screen.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t    };\r\n\t    Screen.prototype.onScrollXHandler = function (changedProps) {\r\n\t        var _this = this;\r\n\t        var chart = this.chart;\r\n\t        var isDragMode = chart.state.cursor.dragMode;\r\n\t        var animations = chart.state.animations;\r\n\t        var zoomXChanged = changedProps.xAxis.range.zoom;\r\n\t        var isAutoscroll = chart.state.autoScroll && !isDragMode && !zoomXChanged;\r\n\t        var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\r\n\t        var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\r\n\t        var range = chart.state.xAxis.range;\r\n\t        var targetX = range.scroll * range.scaleFactor * range.zoom;\r\n\t        if (this.scrollXAnimation)\r\n\t            this.scrollXAnimation.stop();\r\n\t        this.scrollXAnimation = chart.animationManager.animate(time, ease)\r\n\t            .from(this.options.scrollX)\r\n\t            .to(targetX)\r\n\t            .onTick(function (value) {\r\n\t            _this.transform({ scrollX: value });\r\n\t        });\r\n\t    };\r\n\t    Screen.prototype.onScrollYHandler = function () {\r\n\t        var _this = this;\r\n\t        var chart = this.chart;\r\n\t        var animations = chart.state.animations;\r\n\t        var range = chart.state.yAxis.range;\r\n\t        var targetY = range.scroll * range.scaleFactor * range.zoom;\r\n\t        if (this.scrollYAnimation)\r\n\t            this.scrollYAnimation.stop();\r\n\t        this.scrollYAnimation = chart.animationManager.animate(animations.zoomSpeed, animations.zoomEase)\r\n\t            .from(this.options.scrollY)\r\n\t            .to(targetY)\r\n\t            .onTick(function (value) {\r\n\t            _this.transform({ scrollY: value });\r\n\t        });\r\n\t    };\r\n\t    Screen.prototype.onZoomXHandler = function () {\r\n\t        var _this = this;\r\n\t        var chart = this.chart;\r\n\t        var animations = chart.state.animations;\r\n\t        var targetZoom = chart.state.xAxis.range.zoom;\r\n\t        if (this.zoomXAnimation)\r\n\t            this.zoomXAnimation.stop();\r\n\t        this.zoomXAnimation = chart.animationManager\r\n\t            .animate(animations.zoomSpeed, animations.zoomEase)\r\n\t            .from(this.options.zoomX)\r\n\t            .to(targetZoom)\r\n\t            .onTick(function (value) {\r\n\t            _this.transform({ zoomX: value });\r\n\t        });\r\n\t    };\r\n\t    Screen.prototype.onZoomYHandler = function () {\r\n\t        var _this = this;\r\n\t        var chart = this.chart;\r\n\t        var targetZoom = chart.state.yAxis.range.zoom;\r\n\t        var animations = chart.state.animations;\r\n\t        if (this.zoomYAnimation)\r\n\t            this.zoomYAnimation.stop();\r\n\t        this.zoomYAnimation = chart.animationManager\r\n\t            .animate(animations.zoomSpeed, animations.zoomEase)\r\n\t            .from(this.options.zoomY)\r\n\t            .to(targetZoom)\r\n\t            .onTick(function (value) {\r\n\t            _this.transform({ zoomY: value });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.chart.state.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomX;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.chart.state.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomY;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    /**\r\n\t     * returns xVal by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Screen.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.chart.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert xVal to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.chart.state.xAxis.range.scaleFactor * this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert xVal to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.chart.state.yAxis.range.scaleFactor * this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to xVal by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.chart.state.xAxis.range.scaleFactor / this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to xVal by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.chart.state.yAxis.range.scaleFactor / this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollX xVal by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenX = function (x) {\r\n\t        return this.chart.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollY xVal by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenY = function (y) {\r\n\t        return this.chart.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    //\r\n\t    /**\r\n\t     *  returns screen scrollX xVal by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.chart.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    // /**\r\n\t    //  *  returns screen scrollY xVal by screen scrollY coordinate\r\n\t    //  */\r\n\t    // getScreenYByValue(scrollYVal: number): number {\r\n\t    // \tvar {scroll, zeroVal} = this.state.yAxis.range;\r\n\t    // \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\r\n\t    // }\r\n\t    //\r\n\t    //\r\n\t    /**\r\n\t     * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal xVal\r\n\t     */\r\n\t    Screen.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal xVal by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from yAxis.range.zeroVal xVal by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenY = function (screenY) {\r\n\t        return this.getPointOnYAxis(this.getValueByScreenY(screenY));\r\n\t    };\r\n\t    Screen.prototype.getTop = function () {\r\n\t        return this.getPointByScreenY(this.chart.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottom = function () {\r\n\t        return this.getPointByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getLeft = function () {\r\n\t        return this.getPointByScreenX(0);\r\n\t    };\r\n\t    Screen.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.chart.state.width);\r\n\t    };\r\n\t    Screen.prototype.getTopVal = function () {\r\n\t        return this.getValueByScreenY(this.chart.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottomVal = function () {\r\n\t        return this.getValueByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getCenterYVal = function () {\r\n\t        return this.getValueByScreenY(this.chart.state.height / 2);\r\n\t    };\r\n\t    return Screen;\r\n\t}());\r\n\texports.Screen = Screen;\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar interfaces_1 = __webpack_require__(20);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar AXIS_MARK_DEFAULT_OPTIONS = {\r\n\t    type: 'simple',\r\n\t    lineWidth: 1,\r\n\t    value: 0,\r\n\t    showValue: false,\r\n\t    stickToEdges: false,\r\n\t    lineColor: '#FFFFFF',\r\n\t    title: ''\r\n\t};\r\n\tvar AxisMarks = (function () {\r\n\t    function AxisMarks(chartState, axisType) {\r\n\t        this.items = {};\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.axisType = axisType;\r\n\t        var marks = this.items;\r\n\t        var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\r\n\t        for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\r\n\t            var options = axisMarksOptions_1[_i];\r\n\t            var axisMark = void 0;\r\n\t            options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\r\n\t            // set mark name\r\n\t            if (!options.name)\r\n\t                options.name = Utils_1.Utils.getUid().toString();\r\n\t            if (marks[options.name])\r\n\t                Utils_1.Utils.error('duplicated mark name ' + options.name);\r\n\t            // create mark instance based on type option\r\n\t            if (options.type == 'timeleft') {\r\n\t                axisMark = new AxisTimeleftMark(chartState, axisType, options);\r\n\t            }\r\n\t            else {\r\n\t                axisMark = new AxisMark(chartState, axisType, options);\r\n\t            }\r\n\t            marks[options.name] = axisMark;\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarks.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, newData);\r\n\t        });\r\n\t        this.chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    AxisMarks.prototype.onTrendChange = function (trendName, newData) {\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var startVal = newData[0].xVal;\r\n\t        var endVal = newData[newData.length - 1].xVal;\r\n\t        var marks = this.items;\r\n\t        for (var markName in marks) {\r\n\t            var mark = marks[markName];\r\n\t            var markVal = mark.options.value;\r\n\t            var markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\r\n\t            if (markWasCrossed)\r\n\t                this.ee.emit('markCrossed', trendName, newData);\r\n\t        }\r\n\t    };\r\n\t    AxisMarks.prototype.getItems = function () {\r\n\t        return this.items;\r\n\t    };\r\n\t    AxisMarks.prototype.getItem = function (markName) {\r\n\t        return this.items[markName];\r\n\t    };\r\n\t    return AxisMarks;\r\n\t}());\r\n\texports.AxisMarks = AxisMarks;\r\n\tvar AxisMark = (function () {\r\n\t    function AxisMark(chartState, axisType, options) {\r\n\t        this.renderOnTrendsChange = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.options = options;\r\n\t        this.axisType = axisType;\r\n\t        this.chartState = chartState;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMark.prototype.bindEvents = function () { };\r\n\t    AxisMark.prototype.setOptions = function (newOptions) {\r\n\t        var value = this.options.value;\r\n\t        this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\r\n\t        if (this.options.value !== value)\r\n\t            this.ee.emit('valueChange');\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisMark.prototype.getDisplayedVal = function () {\r\n\t        var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\r\n\t        return String(displayedValue !== void 0 ? displayedValue : value);\r\n\t    };\r\n\t    AxisMark.prototype.onMarkCrossed = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('markCrossed', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('markCrossed', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('valueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('valueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onDisplayedValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('onDisplayedValueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('onDisplayedValueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.typeName = 'simple';\r\n\t    return AxisMark;\r\n\t}());\r\n\texports.AxisMark = AxisMark;\r\n\tvar AxisTimeleftMark = (function (_super) {\r\n\t    __extends(AxisTimeleftMark, _super);\r\n\t    function AxisTimeleftMark() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.renderOnTrendsChange = true;\r\n\t    }\r\n\t    AxisTimeleftMark.prototype.getDisplayedVal = function () {\r\n\t        var markVal = this.options.value;\r\n\t        var maxXVal = this.chartState.state.computedData.trends.maxXVal;\r\n\t        var time = markVal - maxXVal;\r\n\t        if (time < 0)\r\n\t            time = 0;\r\n\t        return Utils_1.Utils.msToTimeString(time);\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.onTrendsChange = function () {\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisTimeleftMark.typeName = 'timeleft';\r\n\t    return AxisTimeleftMark;\r\n\t}(AxisMark));\r\n\texports.AxisTimeleftMark = AxisTimeleftMark;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t(function (AXIS_RANGE_TYPE) {\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\"; // TODO: AXIS_RANGE_TYPE.ALL\r\n\t})(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\r\n\tvar AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\r\n\t;\r\n\t(function (AXIS_TYPE) {\r\n\t    AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\r\n\t    AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\r\n\t})(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\r\n\tvar AXIS_TYPE = exports.AXIS_TYPE;\r\n\t(function (AXIS_DATA_TYPE) {\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\r\n\t})(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\r\n\tvar AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Easing_1 = __webpack_require__(22);\r\n\t// TODO: transfer AnimationManager to own repo\r\n\tvar AnimationManager = (function () {\r\n\t    function AnimationManager() {\r\n\t        this.isAnimationsEnabled = true;\r\n\t        this.animations = [];\r\n\t    }\r\n\t    AnimationManager.prototype.animate = function (time, timingFunction) {\r\n\t        var animation = new Animation(this, time, this.lastTickTime, timingFunction);\r\n\t        this.animations.push(animation);\r\n\t        return animation;\r\n\t    };\r\n\t    AnimationManager.prototype.animateObj = function (source, target) {\r\n\t    };\r\n\t    AnimationManager.prototype.setAimationsEnabled = function (isEnabled) {\r\n\t        this.isAnimationsEnabled = isEnabled;\r\n\t    };\r\n\t    AnimationManager.prototype.tick = function () {\r\n\t        var now = Date.now();\r\n\t        var animations = this.animations;\r\n\t        // call tick for each animation\r\n\t        for (var i_1 = 0; i_1 < animations.length; i_1++) {\r\n\t            var animation = animations[i_1];\r\n\t            if (this.isAnimationsEnabled) {\r\n\t                animation.tick(now);\r\n\t            }\r\n\t            else {\r\n\t                animation.completeAndStop();\r\n\t            }\r\n\t        }\r\n\t        // cleanup completed animations\r\n\t        var i = animations.length;\r\n\t        while (i--)\r\n\t            if (animations[i].isFinished)\r\n\t                animations.splice(i, 1);\r\n\t        this.lastTickTime = Date.now();\r\n\t    };\r\n\t    AnimationManager.prototype.hasActiveAnimations = function () {\r\n\t        return this.animations.length > 0;\r\n\t    };\r\n\t    return AnimationManager;\r\n\t}());\r\n\texports.AnimationManager = AnimationManager;\r\n\tvar Animation = (function () {\r\n\t    function Animation(animationManager, time, startTime, easing) {\r\n\t        if (easing === void 0) { easing = Easing_1.EASING.Quadratic.Out; }\r\n\t        this.animationManager = animationManager;\r\n\t        this.time = time;\r\n\t        this.startTime = startTime;\r\n\t        this.easing = easing;\r\n\t        this.progress = 0;\r\n\t        this.isFinished = false;\r\n\t        this.isStopped = false;\r\n\t    }\r\n\t    Animation.prototype.tick = function (now) {\r\n\t        if (!this.isStopped) {\r\n\t            var progress = this.time > 0 ? ((now - this.startTime) / this.time) : 1;\r\n\t            this.setProgress(progress);\r\n\t        }\r\n\t        var needToFinish = (this.progress == 1 || this.isStopped) && !this.isFinished;\r\n\t        if (needToFinish)\r\n\t            this.onFinishHandler();\r\n\t    };\r\n\t    Animation.prototype.from = function (sourceObj) {\r\n\t        if (typeof sourceObj == 'object') {\r\n\t            this.sourceObj = sourceObj;\r\n\t            this.initialObj = {};\r\n\t            var sourceIteralable = sourceObj;\r\n\t            for (var key in sourceIteralable)\r\n\t                if (typeof sourceIteralable[key] == 'number') {\r\n\t                    this.initialObj[key] = sourceIteralable[key];\r\n\t                }\r\n\t        }\r\n\t        else if (typeof sourceObj == 'number') {\r\n\t            this.sourceObj = sourceObj;\r\n\t            this.initialObj = sourceObj;\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    Animation.prototype.to = function (targetObj) {\r\n\t        this.targetObject = targetObj;\r\n\t        if (typeof this.initialObj == 'object') {\r\n\t            var initialIteralable = this.initialObj;\r\n\t            for (var key in this.targetObject) {\r\n\t                if (initialIteralable[key] == void 0)\r\n\t                    delete initialIteralable[key];\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    Animation.prototype.onTick = function (onTickCb) {\r\n\t        this.onTickCb = onTickCb;\r\n\t        return this;\r\n\t    };\r\n\t    Animation.prototype.then = function (onFinishCb) {\r\n\t        this.onFinishCb = onFinishCb;\r\n\t        return this;\r\n\t    };\r\n\t    Animation.prototype.stop = function () {\r\n\t        this.isStopped = true;\r\n\t    };\r\n\t    Animation.prototype.completeAndStop = function () {\r\n\t        this.setProgress(1);\r\n\t        this.stop();\r\n\t    };\r\n\t    Animation.prototype.setProgress = function (progress) {\r\n\t        progress = Math.min(progress, 1);\r\n\t        this.progress = progress;\r\n\t        var k = this.easing(progress);\r\n\t        if (typeof this.sourceObj == 'number') {\r\n\t            var initialVal = this.initialObj;\r\n\t            var targetVal = this.targetObject;\r\n\t            var sourceVal = this.sourceObj;\r\n\t            this.sourceObj = (initialVal + (targetVal - initialVal) * k);\r\n\t        }\r\n\t        else if (this.sourceObj && this.targetObject) {\r\n\t            for (var key in this.initialObj) {\r\n\t                var initialVal = this.initialObj[key];\r\n\t                var targetVal = this.targetObject[key];\r\n\t                this.sourceObj[key] = initialVal + (targetVal - initialVal) * k;\r\n\t            }\r\n\t        }\r\n\t        if (this.onTickCb)\r\n\t            this.onTickCb(this.sourceObj, progress, k);\r\n\t    };\r\n\t    Animation.prototype.onFinishHandler = function () {\r\n\t        this.onFinishCb && this.onFinishCb(this.progress);\r\n\t        this.isFinished = true;\r\n\t    };\r\n\t    return Animation;\r\n\t}());\r\n\texports.Animation = Animation;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * Easing from tween.js lib https://github.com/tweenjs/tween.js\r\n\t **/\r\n\texports.EASING = {\r\n\t    Linear: {\r\n\t        None: function (k) {\r\n\t            return k;\r\n\t        }\r\n\t    },\r\n\t    Quadratic: {\r\n\t        In: function (k) {\r\n\t            return k * k;\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return k * (2 - k);\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k;\r\n\t            }\r\n\t            return -0.5 * (--k * (k - 2) - 1);\r\n\t        }\r\n\t    },\r\n\t    Cubic: {\r\n\t        In: function (k) {\r\n\t            return k * k * k;\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return --k * k * k + 1;\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k * k;\r\n\t            }\r\n\t            return 0.5 * ((k -= 2) * k * k + 2);\r\n\t        }\r\n\t    },\r\n\t    Quartic: {\r\n\t        In: function (k) {\r\n\t            return k * k * k * k;\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return 1 - (--k * k * k * k);\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k * k * k;\r\n\t            }\r\n\t            return -0.5 * ((k -= 2) * k * k * k - 2);\r\n\t        }\r\n\t    },\r\n\t    Quintic: {\r\n\t        In: function (k) {\r\n\t            return k * k * k * k * k;\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return --k * k * k * k * k + 1;\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k * k * k * k;\r\n\t            }\r\n\t            return 0.5 * ((k -= 2) * k * k * k * k + 2);\r\n\t        }\r\n\t    },\r\n\t    Sinusoidal: {\r\n\t        In: function (k) {\r\n\t            return 1 - Math.cos(k * Math.PI / 2);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return Math.sin(k * Math.PI / 2);\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            return 0.5 * (1 - Math.cos(Math.PI * k));\r\n\t        }\r\n\t    },\r\n\t    Exponential: {\r\n\t        In: function (k) {\r\n\t            return k === 0 ? 0 : Math.pow(1024, k - 1);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * Math.pow(1024, k - 1);\r\n\t            }\r\n\t            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\r\n\t        }\r\n\t    },\r\n\t    Circular: {\r\n\t        In: function (k) {\r\n\t            return 1 - Math.sqrt(1 - k * k);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return Math.sqrt(1 - (--k * k));\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return -0.5 * (Math.sqrt(1 - k * k) - 1);\r\n\t            }\r\n\t            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\r\n\t        }\r\n\t    },\r\n\t    Elastic: {\r\n\t        In: function (k) {\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            k *= 2;\r\n\t            if (k < 1) {\r\n\t                return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\r\n\t            }\r\n\t            return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\r\n\t        }\r\n\t    },\r\n\t    Back: {\r\n\t        In: function (k) {\r\n\t            var s = 1.70158;\r\n\t            return k * k * ((s + 1) * k - s);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            var s = 1.70158;\r\n\t            return --k * k * ((s + 1) * k + s) + 1;\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            var s = 1.70158 * 1.525;\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * (k * k * ((s + 1) * k - s));\r\n\t            }\r\n\t            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\r\n\t        }\r\n\t    },\r\n\t    Bounce: {\r\n\t        In: function (k) {\r\n\t            return 1 - exports.EASING.Bounce.Out(1 - k);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            if (k < (1 / 2.75)) {\r\n\t                return 7.5625 * k * k;\r\n\t            }\r\n\t            else if (k < (2 / 2.75)) {\r\n\t                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\r\n\t            }\r\n\t            else if (k < (2.5 / 2.75)) {\r\n\t                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\r\n\t            }\r\n\t            else {\r\n\t                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\r\n\t            }\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if (k < 0.5) {\r\n\t                return exports.EASING.Bounce.In(k * 2) * 0.5;\r\n\t            }\r\n\t            return exports.EASING.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\r\n\t        }\r\n\t    }\r\n\t};\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * base class for all widgets\r\n\t * each widget must have widgetName static property\r\n\t */\r\n\tvar ChartWidget = (function () {\r\n\t    function ChartWidget() {\r\n\t        this.unbindList = [];\r\n\t    }\r\n\t    ChartWidget.prototype.setupChart = function (chart) {\r\n\t        this.chart = chart;\r\n\t    };\r\n\t    ChartWidget.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unbindList = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unbindList.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unbindList.push.apply(unbindList, (args));\r\n\t        }\r\n\t        (_a = this.unbindList).push.apply(_a, unbindList);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartWidget.prototype.unbindEvents = function () {\r\n\t        this.unbindList.forEach(function (unbindEvent) { return unbindEvent(); });\r\n\t        this.unbindList.length = 0;\r\n\t    };\r\n\t    ChartWidget.widgetName = '';\r\n\t    return ChartWidget;\r\n\t}());\r\n\texports.ChartWidget = ChartWidget;\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar GridWidget_1 = __webpack_require__(25);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar interfaces_1 = __webpack_require__(20);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\t/**\r\n\t * widget for drawing axis\r\n\t */\r\n\tvar AxisWidget = (function (_super) {\r\n\t    __extends(AxisWidget, _super);\r\n\t    function AxisWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    AxisWidget.prototype.onReadyHandler = function () {\r\n\t        var _this = this;\r\n\t        this.object3D = new Object3D();\r\n\t        this.axisXObject = new Object3D();\r\n\t        this.axisYObject = new Object3D();\r\n\t        this.object3D.add(this.axisXObject);\r\n\t        this.object3D.add(this.axisYObject);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        // canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\r\n\t        this.updateAxisXRequest = Utils_1.Utils.throttle(function () { return _this.updateAxis(interfaces_1.AXIS_TYPE.X); }, 1000);\r\n\t        this.onScrollChange(this.chart.screen.options.scrollX, this.chart.screen.options.scrollY);\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        this.bindEvent(state.screen.onTransformationFrame(function (options) {\r\n\t            _this.onScrollChange(options.scrollX, options.scrollY);\r\n\t        }), state.screen.onZoomFrame(function (options) { _this.onZoomFrame(options); }), state.onDestroy(function () { return _this.onDestroy(); }), state.onResize(function () { return _this.onResize(); }));\r\n\t    };\r\n\t    AxisWidget.prototype.onDestroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.unbindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.onScrollChange = function (x, y) {\r\n\t        if (y != void 0) {\r\n\t            this.axisYObject.position.y = y;\r\n\t            this.axisXObject.position.y = y;\r\n\t        }\r\n\t        if (x != void 0) {\r\n\t            this.axisYObject.position.x = x;\r\n\t            this.updateAxisXRequest();\r\n\t        }\r\n\t    };\r\n\t    AxisWidget.prototype.onResize = function () {\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t    };\r\n\t    AxisWidget.prototype.setupAxis = function (orientation) {\r\n\t        var _this = this;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var canvasWidth = 0, canvasHeight = 0;\r\n\t        var axisOptions;\r\n\t        // clean meshes\r\n\t        if (isXAxis) {\r\n\t            this.axisXObject.traverse(function (obj) { return _this.axisXObject.remove(obj); });\r\n\t            canvasWidth = visibleWidth * 3;\r\n\t            canvasHeight = 50;\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t        }\r\n\t        else {\r\n\t            this.axisYObject.traverse(function (obj) { return _this.axisYObject.remove(obj); });\r\n\t            canvasWidth = 50;\r\n\t            canvasHeight = visibleHeight * 3;\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t        }\r\n\t        var texture = Utils_1.Utils.createNearestTexture(canvasWidth, canvasHeight, function (ctx) {\r\n\t            var color = new Color_1.Color(axisOptions.color);\r\n\t            ctx.beginPath();\r\n\t            ctx.font = _this.chart.state.font.m;\r\n\t            ctx.fillStyle = color.rgbaStr;\r\n\t            ctx.strokeStyle = color.rgbaStr;\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisXObject.add(axisMesh);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisYObject.add(axisMesh);\r\n\t        }\r\n\t        this.updateAxis(orientation);\r\n\t    };\r\n\t    AxisWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisWidget.prototype.updateAxis = function (orientation) {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var _b = this.chart.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\r\n\t        var axisOptions;\r\n\t        var axisMesh;\r\n\t        var axisGridParams;\r\n\t        if (isXAxis) {\r\n\t            axisMesh = this.axisXObject.children[0];\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh = this.axisYObject.children[0];\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\r\n\t        }\r\n\t        var geometry = axisMesh.geometry;\r\n\t        var canvasWidth = geometry.parameters.width;\r\n\t        var canvasHeight = geometry.parameters.height;\r\n\t        var texture = axisMesh.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\r\n\t        }\r\n\t        // TODO: draw text and lines in different loops\r\n\t        var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\r\n\t        var startVal = axisGridParams.start - edgeOffset;\r\n\t        var endVal = axisGridParams.end + edgeOffset;\r\n\t        ctx.beginPath();\r\n\t        for (var val = startVal; val <= endVal; val += axisGridParams.step) {\r\n\t            var displayedValue = '';\r\n\t            if (isXAxis) {\r\n\t                var pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\r\n\t                ctx.textAlign = \"center\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(pxVal + 0.5, canvasHeight);\r\n\t                // ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\r\n\t                if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\r\n\t                    displayedValue = AxisWidget.getDateStr(val, axisGridParams);\r\n\t                }\r\n\t                else {\r\n\t                    displayedValue = Number(val.toFixed(14)).toString();\r\n\t                }\r\n\t                ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\r\n\t            }\r\n\t            else {\r\n\t                var pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\r\n\t                ctx.textAlign = \"right\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(canvasWidth, pxVal + 0.5);\r\n\t                // ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\r\n\t                displayedValue = Number(val.toFixed(14)).toString();\r\n\t                ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\r\n\t            }\r\n\t            ctx.stroke();\r\n\t        }\r\n\t        // uncomment to preview canvas borders\r\n\t        // ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t        ctx.stroke();\r\n\t        ctx.closePath();\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisWidget.prototype.onZoomFrame = function (options) {\r\n\t        if (options.zoomX) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        }\r\n\t        if (options.zoomY) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        }\r\n\t    };\r\n\t    // private temporaryHideAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar timeoutId = setTimeout(() => {\r\n\t    // \t\t\tthis.showAxis(orientation);\r\n\t    // \t}, 200);\r\n\t    //\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tclearTimeout(this.showAxisXTimeout);\r\n\t    // \t\tthis.showAxisXTimeout =\ttimeoutId;\r\n\t    // \t} else {\r\n\t    // \t\tclearTimeout(this.showAxisYTimeout);\r\n\t    // \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tthis.showAxisYTimeout = timeoutId;\r\n\t    // \t}\r\n\t    // }\r\n\t    // private showAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar material: MeshBasicMaterial;\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t} else {\r\n\t    // \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t}\r\n\t    // \tthis.updateAxis(orientation);\r\n\t    // \tTweenLite.to(material, 0.3, {opacity: 1});\r\n\t    // }\r\n\t    AxisWidget.getDateStr = function (timestamp, gridParams) {\r\n\t        var sec = 1000;\r\n\t        var min = sec * 60;\r\n\t        var hour = min * 60;\r\n\t        var day = hour * 60;\r\n\t        var step = gridParams.step;\r\n\t        var d = new Date(timestamp);\r\n\t        var tf = function (num) { return Utils_1.Utils.toFixed(num, 2); };\r\n\t        return tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\r\n\t    };\r\n\t    AxisWidget.widgetName = 'Axis';\r\n\t    return AxisWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisWidget = AxisWidget;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\t/**\r\n\t * widget for drawing state grid\r\n\t */\r\n\tvar GridWidget = (function (_super) {\r\n\t    __extends(GridWidget, _super);\r\n\t    function GridWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    GridWidget.prototype.onReadyHandler = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        this.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\r\n\t        this.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\r\n\t        this.initGrid();\r\n\t        this.updateGrid();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    GridWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        // grid is bigger then screen, so it's no need to update it on each scroll event\r\n\t        var updateGridThrottled = Utils_1.Utils.throttle(function () { return _this.updateGrid(); }, 1000);\r\n\t        this.bindEvent(this.chart.onScroll(function () { return updateGridThrottled(); }), this.chart.screen.onZoomFrame(function (options) {\r\n\t            updateGridThrottled();\r\n\t            _this.onZoomFrame(options);\r\n\t        }), this.chart.onDestroy(function () {\r\n\t            _this.isDestroyed = true;\r\n\t            _this.unbindEvents();\r\n\t        }), this.chart.onResize(function () {\r\n\t            _this.updateGrid();\r\n\t        }));\r\n\t    };\r\n\t    GridWidget.prototype.initGrid = function () {\r\n\t        var color = new Color_1.Color(this.chart.state.xAxis.grid.color);\r\n\t        var geometry = new THREE.Geometry();\r\n\t        var material = new THREE.LineBasicMaterial({ linewidth: 1, color: color.value, opacity: color.a, transparent: true });\r\n\t        var xLinesCount = this.gridSizeH;\r\n\t        var yLinesCount = this.gridSizeV;\r\n\t        while (xLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        while (yLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        this.lineSegments = new LineSegments(geometry, material);\r\n\t        this.lineSegments.position.setZ(-1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t    };\r\n\t    GridWidget.prototype.updateGrid = function () {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var _a = this.chart.state, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\r\n\t        var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\r\n\t        var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\r\n\t        var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\r\n\t        var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\r\n\t        var gridScrollXVal = scrollXInSegments * axisXGrid.step;\r\n\t        var gridScrollYVal = scrollYInSegments * axisYGrid.step;\r\n\t        var startXVal = axisXGrid.start + gridScrollXVal;\r\n\t        var startYVal = axisYGrid.start + gridScrollYVal;\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var vertices = geometry.vertices;\r\n\t        var lineInd = 0;\r\n\t        for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\r\n\t            var value = startXVal + i * axisXGrid.step;\r\n\t            var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\r\n\t            var value = startYVal + i * axisYGrid.step;\r\n\t            var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\r\n\t    };\r\n\t    GridWidget.prototype.getHorizontalLineSegment = function (yVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\r\n\t        var widthVal = chartState.pxToValueByXAxis(chartState.state.width);\r\n\t        return [\r\n\t            new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0),\r\n\t            new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.getVerticalLineSegment = function (xVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\r\n\t        var heightVal = chartState.pxToValueByYAxis(chartState.state.height);\r\n\t        return [\r\n\t            new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0),\r\n\t            new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.onZoomFrame = function (options) {\r\n\t        var _a = this.chart.state, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        if (options.zoomX)\r\n\t            this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\r\n\t    };\r\n\t    // TODO: move this code to core\r\n\t    GridWidget.getGridParamsForAxis = function (axisOptions, axisWidth, zoom) {\r\n\t        var axisRange = axisOptions.range;\r\n\t        var from = axisRange.from;\r\n\t        var to = axisRange.to;\r\n\t        var axisLength = to - from;\r\n\t        var gridStep = 0;\r\n\t        var gridStepInPixels = 0;\r\n\t        var minGridStepInPixels = axisOptions.grid.minSizePx;\r\n\t        var axisLengthStr = String(axisLength);\r\n\t        var axisLengthPointPosition = axisLengthStr.indexOf('.');\r\n\t        var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\r\n\t        var gridStepFound = false;\r\n\t        var digitPos = 0;\r\n\t        while (!gridStepFound) {\r\n\t            var power = intPartLength - digitPos - 1;\r\n\t            var multiplier = (Math.pow(10, power) || 1);\r\n\t            var dividers = [1, 2, 5];\r\n\t            for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\r\n\t                var nextGridStep = multiplier / dividers[dividerInd];\r\n\t                var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\r\n\t                if (nextGridStepInPixels >= minGridStepInPixels) {\r\n\t                    gridStep = nextGridStep;\r\n\t                    gridStepInPixels = nextGridStepInPixels;\r\n\t                }\r\n\t                else {\r\n\t                    gridStepFound = true;\r\n\t                    if (gridStep === 0) {\r\n\t                        gridStep = nextGridStep;\r\n\t                        gridStepInPixels = nextGridStepInPixels;\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (!gridStepFound)\r\n\t                digitPos++;\r\n\t        }\r\n\t        var gridStart = Math.floor(from / gridStep) * gridStep;\r\n\t        var gridEnd = Math.floor(to / gridStep) * gridStep;\r\n\t        return {\r\n\t            start: gridStart,\r\n\t            end: gridEnd,\r\n\t            step: gridStep,\r\n\t            stepInPx: gridStepInPixels,\r\n\t            length: gridEnd - gridStart,\r\n\t            segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\r\n\t        };\r\n\t    };\r\n\t    GridWidget.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    GridWidget.widgetName = 'Grid';\r\n\t    return GridWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.GridWidget = GridWidget;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar Color = (function () {\r\n\t    function Color(color) {\r\n\t        this.set(color);\r\n\t    }\r\n\t    /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\r\n\t    /**\r\n\t     * Parse hex/rgb{a} color syntax.\r\n\t     * @input string\r\n\t     * @returns array [r,g,b{,o}]\r\n\t     */\r\n\t    Color.parseColor = function (color) {\r\n\t        var cache, p = parseInt // Use p as a byte saving reference to parseInt\r\n\t        , color = color.replace(/\\s\\s*/g, ''); //var\r\n\t        // Checks for 6 digit hex and converts string to integer\r\n\t        if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\r\n\t        else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\r\n\t            cache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\r\n\t        else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\r\n\t        else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3], +cache[4]];\r\n\t        else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3]];\r\n\t        else\r\n\t            throw Error(color + ' is not supported by parseColor');\r\n\t        // Performs RGBA conversion by default\r\n\t        isNaN(cache[3]) && (cache[3] = 1);\r\n\t        return cache;\r\n\t        // Adds or removes 4th xVal based on rgba support\r\n\t        // Support is flipped twice to prevent erros if\r\n\t        // it's not defined\r\n\t        //return cache.slice(0,3 + !!$.support.rgba);\r\n\t    };\r\n\t    Color.numberToHexStr = function (value) {\r\n\t        var result = value.toString(16);\r\n\t        return '#' + '0'.repeat(6 - result.length) + result;\r\n\t    };\r\n\t    Color.prototype.set = function (color) {\r\n\t        if (typeof color == 'number')\r\n\t            color = Color.numberToHexStr(color);\r\n\t        var colorStr = color;\r\n\t        var rgba = Color.parseColor(colorStr);\r\n\t        this.r = rgba[0];\r\n\t        this.g = rgba[1];\r\n\t        this.b = rgba[2];\r\n\t        this.a = rgba[3];\r\n\t        this.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\r\n\t        this.hexStr = Color.numberToHexStr(this.value);\r\n\t        this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\r\n\t    };\r\n\t    Color.prototype.getTransparent = function (opacity) {\r\n\t        return new Color(\"rgba(\" + this.hexStr + \", \" + opacity + \")\");\r\n\t    };\r\n\t    return Color;\r\n\t}());\r\n\texports.Color = Color;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar TrendsWidget_1 = __webpack_require__(28);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\tvar TrendsGradientWidget = (function (_super) {\r\n\t    __extends(TrendsGradientWidget, _super);\r\n\t    function TrendsGradientWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsGradientWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendGradient;\r\n\t    };\r\n\t    TrendsGradientWidget.widgetName = \"TrendsGradient\";\r\n\t    return TrendsGradientWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsGradientWidget = TrendsGradientWidget;\r\n\tvar TrendGradient = (function (_super) {\r\n\t    __extends(TrendGradient, _super);\r\n\t    function TrendGradient(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        this.visibleSegmentsCnt = 0;\r\n\t        this.trend = chartState.trendsManager.getTrend(trendName);\r\n\t        this.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments);\r\n\t        this.initGradient();\r\n\t        this.updateSegments();\r\n\t    }\r\n\t    TrendGradient.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.hasBackground;\r\n\t    };\r\n\t    TrendGradient.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            // TODO: optimize updateSegments for onDisplayedRangeChanged\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.chart.onZoom(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendGradient.prototype.getObject3D = function () {\r\n\t        return this.gradient;\r\n\t    };\r\n\t    TrendGradient.prototype.initGradient = function () {\r\n\t        var geometry = new Geometry();\r\n\t        for (var i = 0; i < this.segmentsIds.length; i++) {\r\n\t            geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\r\n\t            var ind = i * 4;\r\n\t            // gradient segment scheme\r\n\t            //\r\n\t            // vert0 +---+ vert3\r\n\t            //       |\\  |\r\n\t            // face1 | \\ | face2\r\n\t            // \t     |  \\|\r\n\t            // vert1 +---+ vert2\r\n\t            geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\r\n\t        }\r\n\t        var color = new Color_1.Color(this.trend.getOptions().backgroundColor);\r\n\t        this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color: color.value, transparent: true, opacity: color.a }));\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.gradient.frustumCulled = false;\r\n\t    };\r\n\t    TrendGradient.prototype.onZoomFrame = function (options) {\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        var currentScale = this.gradient.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendGradient.prototype.onSegmentsAnimate = function (trendSegmentsManager) {\r\n\t        var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\r\n\t        for (var i = 0; i < this.visibleSegmentsCnt; i++) {\r\n\t            var segmentId = this.segmentsIds[i];\r\n\t            if (!animatedSegmentsIds.includes(segmentId))\r\n\t                continue;\r\n\t            this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\r\n\t        }\r\n\t        this.gradient.geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendGradient.prototype.updateSegments = function () {\r\n\t        var geometry = this.gradient.geometry;\r\n\t        var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\r\n\t        var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\r\n\t        this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\r\n\t        var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\r\n\t        if (segmentsToProcessCnt > this.segmentsIds.length) {\r\n\t            Utils_1.Utils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\r\n\t        }\r\n\t        // setup visible segments and collapse invisible\r\n\t        for (var i = 0; i <= segmentsToProcessCnt; i++) {\r\n\t            if (segmentInd <= lastDisplayedSegmentInd) {\r\n\t                var segment = trendSegments[segmentInd];\r\n\t                this.setupSegmentVertices(i, segment.currentAnimationState);\r\n\t                this.segmentsIds[i] = segment.id;\r\n\t                segmentInd++;\r\n\t            }\r\n\t            else {\r\n\t                this.setupSegmentVertices(i);\r\n\t            }\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    /**\r\n\t     * setup gradient segment by segmentState\r\n\t     * if segmentState is undefined, then collapse vertices to 0,0,0\r\n\t     */\r\n\t    TrendGradient.prototype.setupSegmentVertices = function (segmentInd, segmentState) {\r\n\t        var gradientSegmentInd = segmentInd * 4;\r\n\t        var vertices = this.gradient.geometry.vertices;\r\n\t        var topLeft = vertices[gradientSegmentInd];\r\n\t        var bottomLeft = vertices[gradientSegmentInd + 1];\r\n\t        var bottomRight = vertices[gradientSegmentInd + 2];\r\n\t        var topRight = vertices[gradientSegmentInd + 3];\r\n\t        var screenHeightVal = Math.max(this.chart.pxToValueByYAxis(this.chart.state.height), this.chart.screen.pxToValueByYAxis(this.chart.state.height));\r\n\t        if (segmentState) {\r\n\t            var startX = this.toLocalX(segmentState.startXVal);\r\n\t            var startY = this.toLocalY(segmentState.startYVal);\r\n\t            var endX = this.toLocalX(segmentState.endXVal);\r\n\t            var endY = this.toLocalY(segmentState.endYVal);\r\n\t            topLeft.set(startX, startY, 0);\r\n\t            topRight.set(endX, endY, 0);\r\n\t            bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\r\n\t            bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\r\n\t        }\r\n\t        else {\r\n\t            topLeft.set(0, 0, 0);\r\n\t            topRight.set(0, 0, 0);\r\n\t            bottomLeft.set(0, 0, 0);\r\n\t            bottomRight.set(0, 0, 0);\r\n\t        }\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    return TrendGradient;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendGradient = TrendGradient;\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar Object3D = THREE.Object3D;\r\n\t/**\r\n\t * abstract manager class for all trends widgets\r\n\t */\r\n\tvar TrendsWidget = (function (_super) {\r\n\t    __extends(TrendsWidget, _super);\r\n\t    function TrendsWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.widgets = {};\r\n\t    }\r\n\t    TrendsWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        this.onTrendsChange();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    TrendsWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        state.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t        state.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, changedOptions, newData);\r\n\t        });\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendsChange = function () {\r\n\t        var trendsOptions = this.chart.state.trends;\r\n\t        var TrendWidgetClass = this.getTrendWidgetClass();\r\n\t        for (var trendName in trendsOptions) {\r\n\t            var trendOptions = trendsOptions[trendName];\r\n\t            var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\r\n\t            if (widgetCanBeEnabled && !this.widgets[trendName]) {\r\n\t                this.createTrendWidget(trendName);\r\n\t            }\r\n\t            else if (!widgetCanBeEnabled && this.widgets[trendName]) {\r\n\t                this.destroyTrendWidget(trendName);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendChange = function (trendName, changedOptions, newData) {\r\n\t        var widget = this.widgets[trendName];\r\n\t        if (!widget)\r\n\t            return;\r\n\t        widget.onTrendChange(changedOptions);\r\n\t        if (newData) {\r\n\t            var data = this.chart.getTrend(trendName).getData();\r\n\t            var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t            isAppend ? widget.appendData(newData) : widget.prependData(newData);\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendsWidget.prototype.createTrendWidget = function (trendName) {\r\n\t        var WidgetConstructor = this.getTrendWidgetClass();\r\n\t        var widget = new WidgetConstructor(this.chart, trendName);\r\n\t        this.widgets[trendName] = widget;\r\n\t        var widgetObject = widget.getObject3D();\r\n\t        widgetObject.name = trendName;\r\n\t        this.object3D.add(widget.getObject3D());\r\n\t    };\r\n\t    TrendsWidget.prototype.destroyTrendWidget = function (trendName) {\r\n\t        this.widgets[trendName].onDestroy();\r\n\t        delete this.widgets[trendName];\r\n\t        var widgetObject = this.object3D.getObjectByName(trendName);\r\n\t        this.object3D.remove(widgetObject);\r\n\t    };\r\n\t    return TrendsWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.TrendsWidget = TrendsWidget;\r\n\t/**\r\n\t * based class for all trends widgets\r\n\t */\r\n\tvar TrendWidget = (function () {\r\n\t    function TrendWidget(chart, trendName) {\r\n\t        this.chart = chart;\r\n\t        this.trendName = trendName;\r\n\t        this.unbindList = [];\r\n\t        this.trend = chart.trendsManager.getTrend(trendName);\r\n\t        this.chart = chart;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendWidget.widgetIsEnabled = function (trendOptions, chart) {\r\n\t        return trendOptions.enabled;\r\n\t    };\r\n\t    TrendWidget.prototype.appendData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.prependData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.onTrendChange = function (changedOptions) { };\r\n\t    TrendWidget.prototype.onDestroy = function () {\r\n\t        for (var _i = 0, _a = this.unbindList; _i < _a.length; _i++) {\r\n\t            var unsubscriber = _a[_i];\r\n\t            unsubscriber();\r\n\t        }\r\n\t    };\r\n\t    TrendWidget.prototype.onSegmentsAnimate = function (segments) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoomFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onTransformationFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoom = function () {\r\n\t    };\r\n\t    TrendWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function (trendPoints) { return _this.onSegmentsAnimate(trendPoints); }));\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function (options) { return _this.onTransformationFrame(options); }));\r\n\t        this.bindEvent(this.chart.screen.onZoomFrame(function (options) { return _this.onZoomFrame(options); }));\r\n\t        this.bindEvent(this.chart.onZoom(function () { return _this.onZoom(); }));\r\n\t    };\r\n\t    ;\r\n\t    TrendWidget.prototype.bindEvent = function (unbind) {\r\n\t        this.unbindList.push(unbind);\r\n\t    };\r\n\t    return TrendWidget;\r\n\t}());\r\n\texports.TrendWidget = TrendWidget;\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar TrendsWidget_1 = __webpack_require__(28);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\t/**\r\n\t * widget for drawing trends lines\r\n\t */\r\n\tvar TrendsLineWidget = (function (_super) {\r\n\t    __extends(TrendsLineWidget, _super);\r\n\t    function TrendsLineWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsLineWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendLine;\r\n\t    };\r\n\t    TrendsLineWidget.widgetName = \"TrendsLine\";\r\n\t    return TrendsLineWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsLineWidget = TrendsLineWidget;\r\n\tvar TrendLine = (function (_super) {\r\n\t    __extends(TrendLine, _super);\r\n\t    function TrendLine(chart, trendName) {\r\n\t        _super.call(this, chart, trendName);\r\n\t        // contains indexes of free segments\r\n\t        this.freeSegmentsInds = [];\r\n\t        // contains segments to display\r\n\t        this.displayedSegments = {};\r\n\t        var options = this.trend.getOptions();\r\n\t        this.material = new LineBasicMaterial({ color: options.lineColor, linewidth: options.lineWidth });\r\n\t        this.initLine();\r\n\t    }\r\n\t    TrendLine.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\r\n\t    };\r\n\t    TrendLine.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    TrendLine.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroySegments();\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendLine.prototype.initLine = function () {\r\n\t        var geometry = new Geometry();\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.lineSegments = new LineSegments(geometry, this.material);\r\n\t        this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t        for (var i = 0; i < this.chart.state.maxVisibleSegments; i++) {\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t            this.freeSegmentsInds.push(i);\r\n\t        }\r\n\t        this.vertices = geometry.vertices;\r\n\t        this.setupSegments();\r\n\t    };\r\n\t    TrendLine.prototype.setupSegments = function () {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.displayedSegments) {\r\n\t            var lineSegment = this.displayedSegments[segmentId];\r\n\t            var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroySegment(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupSegment(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.setupSegment = function (segmentId, segmentState) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        if (!lineSegment) {\r\n\t            if (this.freeSegmentsInds.length == 0)\r\n\t                Utils_1.Utils.error('Max allocated segments reached');\r\n\t            var ind = this.freeSegmentsInds.pop();\r\n\t            lineSegment = this.displayedSegments[segmentId] = { segmentId: segmentId, ind: ind };\r\n\t        }\r\n\t        var segmentInd = lineSegment.ind;\r\n\t        var lineStartVertex = this.vertices[segmentInd * 2];\r\n\t        var lineEndVertex = this.vertices[segmentInd * 2 + 1];\r\n\t        lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\r\n\t        lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\r\n\t    };\r\n\t    TrendLine.prototype.destroySegments = function () {\r\n\t        for (var segmentId in this.displayedSegments)\r\n\t            this.destroySegment(Number(segmentId));\r\n\t    };\r\n\t    TrendLine.prototype.destroySegment = function (segmentId) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        var lineStartVertex = this.vertices[lineSegment.ind * 2];\r\n\t        var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\r\n\t        lineStartVertex.set(0, 0, 0);\r\n\t        lineEndVertex.set(0, 0, 0);\r\n\t        delete this.displayedSegments[segmentId];\r\n\t        this.freeSegmentsInds.push(lineSegment.ind);\r\n\t    };\r\n\t    TrendLine.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.lineSegments.scale;\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendLine.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.displayedSegments[segmentId])\r\n\t                continue;\r\n\t            this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendLine;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendLine = TrendLine;\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar TrendsWidget_1 = __webpack_require__(28);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Line = THREE.Line;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar PlaneGeometry = THREE.PlaneGeometry;\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar RISE_COLOR = 0x2CAC40;\r\n\tvar FALL_COLOR = 0xEE5533;\r\n\tvar MARGIN_PERCENT = 0.3;\r\n\tvar MAX_CANDLES = 100;\r\n\t/**\r\n\t * widget for drawing trends candles\r\n\t */\r\n\tvar TrendsCandlesWidget = (function (_super) {\r\n\t    __extends(TrendsCandlesWidget, _super);\r\n\t    function TrendsCandlesWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsCandlesWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendCandlesWidget;\r\n\t    };\r\n\t    TrendsCandlesWidget.widgetName = \"TrendsCandles\";\r\n\t    return TrendsCandlesWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsCandlesWidget = TrendsCandlesWidget;\r\n\tvar TrendCandlesWidget = (function (_super) {\r\n\t    __extends(TrendCandlesWidget, _super);\r\n\t    function TrendCandlesWidget(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        // contains indexes of free candles\r\n\t        this.freeCandlesInds = [];\r\n\t        this.candlesPool = [];\r\n\t        this.candles = {};\r\n\t        this.initObject();\r\n\t    }\r\n\t    TrendCandlesWidget.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroyCandles();\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.initObject = function () {\r\n\t        var stateData = this.chart.state;\r\n\t        var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.scaleXFactor = scaleXFactor;\r\n\t        this.scaleYFactor = scaleYFactor;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.object3D.frustumCulled = false;\r\n\t        for (var i = 0; i < MAX_CANDLES; i++)\r\n\t            this.freeCandlesInds.push(i);\r\n\t        this.setupCandles();\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.setupCandles = function () {\r\n\t        // remove invisible\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.candles) {\r\n\t            var segment_1 = this.candles[segmentId].segment;\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroyCandle(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupCandle(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandles = function () {\r\n\t        for (var segmentId in this.candles)\r\n\t            this.destroyCandle(Number(segmentId));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandle = function (segmentId) {\r\n\t        var candle = this.candles[segmentId];\r\n\t        this.object3D.remove(candle.getObject3D());\r\n\t        delete this.candles[segmentId];\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.object3D.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(this.scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(this.scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.candles[segmentId])\r\n\t                continue;\r\n\t            var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\r\n\t            this.setupCandle(segmentId, segmentState);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * create or modify candle\r\n\t     */\r\n\t    TrendCandlesWidget.prototype.setupCandle = function (candleId, segmentState) {\r\n\t        var candleInd = candleId % MAX_CANDLES;\r\n\t        // get candle from candlesPool to avoid creating new Objects by performance reasons\r\n\t        var candle = this.candlesPool[candleInd];\r\n\t        if (!candle) {\r\n\t            candle = this.candlesPool[candleInd] = new CandleWidget();\r\n\t        }\r\n\t        if (!this.candles[candleId]) {\r\n\t            this.candles[candleId] = candle;\r\n\t            this.object3D.add(candle.getObject3D());\r\n\t        }\r\n\t        candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\r\n\t        candle.setSegment(segmentState);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendCandlesWidget;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendCandlesWidget = TrendCandlesWidget;\r\n\tvar CandleWidget = (function () {\r\n\t    function CandleWidget() {\r\n\t        this.initObject();\r\n\t    }\r\n\t    CandleWidget.prototype.getObject3D = function () {\r\n\t        return this.rect;\r\n\t    };\r\n\t    CandleWidget.prototype.setSegment = function (segment) {\r\n\t        this.segment = segment;\r\n\t        var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\r\n\t        // update rect\r\n\t        var geometry = this.rect.geometry;\r\n\t        var material = this.rect.material;\r\n\t        var width = segment.endXVal - segment.startXVal;\r\n\t        width -= width * MARGIN_PERCENT;\r\n\t        var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\r\n\t        var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\r\n\t        leftTop.set(-width / 2, height / 2, 0);\r\n\t        rightTop.set(width / 2, height / 2, 0);\r\n\t        leftBottom.set(-width / 2, -height / 2, 0);\r\n\t        rightBottom.set(width / 2, -height / 2, 0);\r\n\t        // prevent to draw bars with height < 1px\r\n\t        if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\r\n\t            leftBottom.setY(leftBottom.y + 1);\r\n\t            rightBottom.setY(rightBottom.y + 1);\r\n\t        }\r\n\t        material.color.set(color);\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        // update lines\r\n\t        var vLineGeometry = this.vLine.geometry;\r\n\t        var vLineMaterial = this.vLine.material;\r\n\t        var lineTop = segment.maxYVal - segment.yVal;\r\n\t        var lineBottom = segment.minYVal - segment.yVal;\r\n\t        vLineGeometry.vertices[0].set(0, lineTop, 0);\r\n\t        vLineGeometry.vertices[1].set(0, lineBottom, 0);\r\n\t        vLineMaterial.color.set(color);\r\n\t        vLineGeometry.verticesNeedUpdate = true;\r\n\t        var hLineGeometry = this.hLine.geometry;\r\n\t        var hLineMaterial = this.hLine.material;\r\n\t        var lineLeft = (-width) / 2;\r\n\t        var lineRight = width / 2;\r\n\t        hLineGeometry.vertices[0].set(lineLeft, 0, 0);\r\n\t        hLineGeometry.vertices[1].set(lineRight, 0, 0);\r\n\t        hLineMaterial.color.set(color);\r\n\t        hLineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    CandleWidget.prototype.initObject = function () {\r\n\t        this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\r\n\t        var vLineGeometry = new Geometry();\r\n\t        var hLineGeometry = new Geometry();\r\n\t        vLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        hLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        this.vLine = new Line(vLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.hLine = new Line(hLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.rect.add(this.vLine);\r\n\t        this.rect.add(this.hLine);\r\n\t    };\r\n\t    return CandleWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar Line = THREE.Line;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar interfaces_1 = __webpack_require__(20);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\t/**\r\n\t * widget for shows marks on axis\r\n\t */\r\n\tvar AxisMarksWidget = (function (_super) {\r\n\t    __extends(AxisMarksWidget, _super);\r\n\t    function AxisMarksWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.axisMarksWidgets = [];\r\n\t    }\r\n\t    AxisMarksWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        var _a = this.chart, xAxisMarks = _a.xAxisMarks, yAxisMarks = _a.yAxisMarks;\r\n\t        var items = xAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t        items = yAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    AxisMarksWidget.prototype.createAxisMark = function (axisMark) {\r\n\t        var axisMarkWidget = new AxisMarkWidget(this.chart, axisMark);\r\n\t        this.axisMarksWidgets.push(axisMarkWidget);\r\n\t        this.object3D.add(axisMarkWidget.getObject3D());\r\n\t    };\r\n\t    AxisMarksWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function () { return _this.updateMarksPositions(); }), this.chart.onResize(function () { return _this.updateMarksPositions(); }));\r\n\t    };\r\n\t    AxisMarksWidget.prototype.updateMarksPositions = function () {\r\n\t        for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\r\n\t            var widget = _a[_i];\r\n\t            widget.updatePosition();\r\n\t        }\r\n\t    };\r\n\t    AxisMarksWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarksWidget.widgetName = 'AxisMarks';\r\n\t    return AxisMarksWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisMarksWidget = AxisMarksWidget;\r\n\tvar DEFAULT_INDICATOR_RENDER_FUNCTION = function (axisMarkWidget, ctx) {\r\n\t    var axisMark = axisMarkWidget.axisMark;\r\n\t    ctx.fillStyle = axisMark.options.lineColor;\r\n\t    ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\r\n\t    var xCoord = 15;\r\n\t    if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\r\n\t        ctx.textAlign = 'end';\r\n\t        xCoord = axisMarkWidget.indicatorWidth;\r\n\t    }\r\n\t    ctx.fillText(axisMark.options.title, xCoord, 20);\r\n\t    if (!axisMark.options.showValue)\r\n\t        return;\r\n\t    ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\r\n\t    ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\r\n\t};\r\n\tvar INDICATOR_POS_Z = 0.1;\r\n\tvar AxisMarkWidget = (function () {\r\n\t    function AxisMarkWidget(chartState, axisMark) {\r\n\t        this.indicatorWidth = 128;\r\n\t        this.indicatorHeight = 64;\r\n\t        this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\r\n\t        this.chartState = chartState;\r\n\t        this.axisMark = axisMark;\r\n\t        this.axisType = axisMark.axisType;\r\n\t        this.frameValue = axisMark.options.value;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.position.setZ(-0.1);\r\n\t        this.line = this.createLine();\r\n\t        this.object3D.add(this.line);\r\n\t        this.indicator = this.createIndicator();\r\n\t        this.object3D.add(this.indicator);\r\n\t        this.renderIndicator();\r\n\t        this.updatePosition();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarkWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createLine = function () {\r\n\t        var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\r\n\t        var lineGeometry = new Geometry();\r\n\t        lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n\t        return new Line(lineGeometry, new LineBasicMaterial({ color: new Color_1.Color(lineColor).value, linewidth: lineWidth }));\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createIndicator = function () {\r\n\t        var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\r\n\t        var texture = Utils_1.Utils.createNearestTexture(width, height, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.font = \"10px Arial\";\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        return new Mesh(new THREE.PlaneGeometry(width, height), material);\r\n\t    };\r\n\t    AxisMarkWidget.prototype.renderIndicator = function () {\r\n\t        var texture = this.indicator.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.axisMark.onDisplayedValueChange(function () { return _this.renderIndicator(); });\r\n\t        this.axisMark.onValueChange(function () { return _this.onValueChangeHandler(); });\r\n\t    };\r\n\t    AxisMarkWidget.prototype.onValueChangeHandler = function () {\r\n\t        var _this = this;\r\n\t        // move mark to new position with animation\r\n\t        if (this.moveAnimation)\r\n\t            this.moveAnimation.kill();\r\n\t        var animations = this.chartState.state.animations;\r\n\t        var targetValue = this.axisMark.options.value;\r\n\t        var cb = function () {\r\n\t            _this.updatePosition();\r\n\t        };\r\n\t        if (animations.enabled) {\r\n\t            this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, { frameValue: targetValue, ease: animations.trendChangeEase });\r\n\t            this.moveAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.frameValue = targetValue;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    AxisMarkWidget.prototype.updatePosition = function () {\r\n\t        var chartState = this.chartState;\r\n\t        var screen = chartState.screen;\r\n\t        var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\r\n\t        var lineGeometry = this.line.geometry;\r\n\t        var hasStickMode = this.axisMark.options.stickToEdges;\r\n\t        var _a = this.chartState.state, width = _a.width, height = _a.height;\r\n\t        if (isXAxis) {\r\n\t            // TODO: make stickToEdges mode for AXIS_TYPE.X \r\n\t            this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\r\n\t            this.object3D.position.y = screen.getBottom();\r\n\t            lineGeometry.vertices[1].setY(height);\r\n\t            this.indicator.position.set(this.indicatorWidth / 2, chartState.state.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\r\n\t        }\r\n\t        else {\r\n\t            var val = this.frameValue;\r\n\t            var bottomVal = screen.getBottomVal();\r\n\t            var topVal = screen.getTopVal();\r\n\t            var needToStickOnTop = hasStickMode && val > topVal;\r\n\t            var needToStickOnBottom = hasStickMode && val < bottomVal;\r\n\t            var centerYVal = screen.getCenterYVal();\r\n\t            this.object3D.position.x = screen.getLeft();\r\n\t            if (needToStickOnTop) {\r\n\t                this.object3D.position.y = screen.getTop();\r\n\t            }\r\n\t            else if (needToStickOnBottom) {\r\n\t                this.object3D.position.y = screen.getBottom();\r\n\t            }\r\n\t            else {\r\n\t                this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\r\n\t            }\r\n\t            lineGeometry.vertices[1].setX(width);\r\n\t            var indicatorPosY = val > centerYVal ? -35 : 10;\r\n\t            this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\r\n\t        }\r\n\t        lineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.typeName = 'simple';\r\n\t    return AxisMarkWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(24));\r\n\t__export(__webpack_require__(25));\r\n\t__export(__webpack_require__(28));\r\n\t__export(__webpack_require__(29));\r\n\t__export(__webpack_require__(27));\r\n\t// TODO: remove\r\n\t__export(__webpack_require__(31));\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ThreeChart.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1f87fa5d0cf1819166dc\n **/","export * from './src/index';\n\n\n/** WEBPACK FOOTER **\n ** ./index.ts\n **/","require('./deps/deps');\nexport * from './ChartView';\nexport * from './interfaces';\nexport * from './AxisMarks';\nexport * from './Screen';\nexport * from './Chart';\nexport * from './Trend';\nexport * from './TrendSegmentsManager';\nexport * from './TrendsManager';\nexport * from './Utils';\nexport * from './Widget';\nexport * from './Plugin';\nexport * from './Color';\nexport * from './AnimationManager';\nexport * from './Easing';\nexport * from './widgets';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.ts\n **/","/// <reference path=\"./ResizeSensor.ts\" />\n\n// TODO: think about different bundles\n\nimport { ResizeSensorType } from './ResizeSensor';\n(<any>window).TweenLite = TweenMax;\n(<any>window).Stats = require('three/examples/js/libs/stats.min');\n\n// require('gsap/src/uncompressed/easing/EasePack.js');\n// require('three/examples/js/renderers/CanvasRenderer.js');\n// require('three/examples/js/renderers/Projector.js');\nexport const isPlainObject = require('is-plain-object') as Function;\nexport const EE2 = require('eventemitter2') as typeof EventEmitter2;\n\n\nexport { Promise } from '../polyfills/es6-promise';\n\nexport * from './ResizeSensor';\nexport const ResizeSensor = require('css-element-queries/src/ResizeSensor') as ResizeSensorType;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/deps.ts\n **/","// stats.js - http://github.com/mrdoob/stats.js\nvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\nif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\nStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\nv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/examples/js/libs/stats.min.js\n ** module id = 3\n ** module chunks = 0\n **/","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nmodule.exports = function isPlainObject(o) {\n  var ctor,prot;\n  \n  if (isObjectObject(o) === false) return false;\n  \n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n  \n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n  \n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n  \n  // Most likely a plain Object\n  return true;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/is-plain-object/index.js\n ** module id = 4\n ** module chunks = 0\n **/","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isObject(val) {\n  return val != null && typeof val === 'object'\n    && !Array.isArray(val);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/isobject/index.js\n ** module id = 5\n ** module chunks = 0\n **/","/*!\n * EventEmitter2\n * https://github.com/hij1nx/EventEmitter2\n *\n * Copyright (c) 2013 hij1nx\n * Licensed under the MIT license.\n */\n;!function(undefined) {\n\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = {};\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n\n      this._conf = conf;\n\n      conf.delimiter && (this.delimiter = conf.delimiter);\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this.newListener = conf.newListener);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this.newListener = false;\n    configure.call(this, conf);\n  }\n\n  //\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return [];\n    }\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n    if (i === typeLength && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return [tree];\n      } else {\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n        return [tree];\n      }\n    }\n\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (currentType === '*') {\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n          }\n        }\n        return listeners;\n      } else if(currentType === '**') {\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n        if(endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n        }\n\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            if(branch === '*' || branch === '**') {\n              if(tree[branch]._listeners && !endReached) {\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n              }\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            } else if(branch === nextType) {\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            }\n          }\n        }\n        return listeners;\n      }\n\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n    }\n\n    xTree = tree['*'];\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i+1);\n    }\n\n    xxTree = tree['**'];\n    if(xxTree) {\n      if(i < typeLength) {\n        if(xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength);\n        }\n\n        // Build arrays of matching next branches and others.\n        for(branch in xxTree) {\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n            if(branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\n            } else if(branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n            }\n          }\n        }\n      } else if(xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength);\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener) {\n\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n    //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n    for(var i = 0, len = type.length; i+1 < len; i++) {\n      if(type[i] === '**' && type[i+1] === '**') {\n        return;\n      }\n    }\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n\n      if (!tree[name]) {\n        tree[name] = {};\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        }\n        else if(typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        }\n        else if (isArray(tree._listeners)) {\n\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n\n            var m = defaultMaxListeners;\n\n            if (typeof this._events.maxListeners !== 'undefined') {\n              m = this._events.maxListeners;\n            }\n\n            if (m > 0 && tree._listeners.length > m) {\n\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' +\n                            'leak detected. %d listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit.',\n                            tree._listeners.length);\n              console.trace();\n            }\n          }\n        }\n        return true;\n      }\n      name = type.shift();\n    }\n    return true;\n  }\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n    if (!this._conf) this._conf = {};\n    this._conf.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n\n    this.on(event, listener);\n\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function() {\n\n    this._events || init.call(this);\n\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) { return false; }\n    }\n\n    // Loop through the *_all* functions and invoke them.\n    if (this._all) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        this._all[i].apply(this, args);\n      }\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n\n      if (!this._all &&\n        !this._events.error &&\n        !(this.wildcard && this.listenerTree.error)) {\n\n        if (arguments[1] instanceof Error) {\n          throw arguments[1]; // Unhandled 'error' event\n        } else {\n          throw new Error(\"Uncaught, unspecified 'error' event.\");\n        }\n        return false;\n      }\n    }\n\n    var handler;\n\n    if(this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    }\n    else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      if (arguments.length === 1) {\n        handler.call(this);\n      }\n      else if (arguments.length > 1)\n        switch (arguments.length) {\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n          // slower\n          default:\n            var l = arguments.length;\n            var args = new Array(l - 1);\n            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n            handler.apply(this, args);\n        }\n      return true;\n    }\n    else if (handler) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        this.event = type;\n        listeners[i].apply(this, args);\n      }\n      return (listeners.length > 0) || !!this._all;\n    }\n    else {\n      return !!this._all;\n    }\n\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n\n    if (typeof type === 'function') {\n      this.onAny(type);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n    this._events || init.call(this);\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    this.emit('newListener', type, listener);\n\n    if(this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    }\n    else if(typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n    else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n      // Check for listener leak\n      if (!this._events[type].warned) {\n\n        var m = defaultMaxListeners;\n\n        if (typeof this._events.maxListeners !== 'undefined') {\n          m = this._events.maxListeners;\n        }\n\n        if (m > 0 && this._events[type].length > m) {\n\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' +\n                        'leak detected. %d listeners added. ' +\n                        'Use emitter.setMaxListeners() to increase limit.',\n                        this._events[type].length);\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if(!this._all) {\n      this._all = [];\n    }\n\n    // Add the function to the event listener collection.\n    this._all.push(fn);\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,leafs=[];\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n    }\n    else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({_listeners:handlers});\n    }\n\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n      if (isArray(handlers)) {\n\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener ||\n            (handlers[i].listener && handlers[i].listener === listener) ||\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if(this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        }\n        else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if(this.wildcard) {\n            delete leaf._listeners;\n          }\n          else {\n            delete this._events[type];\n          }\n        }\n        return this;\n      }\n      else if (handlers === listener ||\n        (handlers.listener && handlers.listener === listener) ||\n        (handlers._origin && handlers._origin === listener)) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function(type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n        var leaf = leafs[iLeaf];\n        leaf._listeners = null;\n      }\n    }\n    else {\n      if (!this._events[type]) return this;\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function(type) {\n    if(this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n\n    if (!this._events[type]) this._events[type] = [];\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  if (typeof define === 'function' && define.amd) {\n     // AMD. Register as an anonymous module.\n    define(function() {\n      return EventEmitter;\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    exports.EventEmitter2 = EventEmitter;\n  }\n  else {\n    // Browser global.\n    window.EventEmitter2 = EventEmitter;\n  }\n}();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/eventemitter2/lib/eventemitter2.js\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = {Promise: window['Promise']}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/polyfills/es6-promise.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var shrinkChild = shrink.childNodes[0];\n\n            var lastWidth, lastHeight;\n\n            var reset = function() {\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n                expand.scrollLeft = expand.scrollWidth;\n                expand.scrollTop = expand.scrollHeight;\n                shrink.scrollLeft = shrink.scrollWidth;\n                shrink.scrollTop = shrink.scrollHeight;\n                lastWidth = element.offsetWidth;\n                lastHeight = element.offsetHeight;\n            };\n\n            reset();\n\n            var changed = function() {\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            var onScroll = function() {\n              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                  changed();\n              }\n              reset();\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        var elementType = Object.prototype.toString.call(element);\n        var isCollectionTyped = ('[object Array]' === elementType\n            || ('[object NodeList]' === elementType)\n            || ('[object HTMLCollection]' === elementType)\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n        );\n\n        if (isCollectionTyped) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n\n        this.detach = function() {\n            if (isCollectionTyped) {\n                var i = 0, j = element.length;\n                for (; i < j; i++) {\n                    ResizeSensor.detach(element[i]);\n                }\n            } else {\n                ResizeSensor.detach(element);\n            }\n        };\n    };\n\n    ResizeSensor.detach = function(element) {\n        if (element.resizeSensor) {\n            element.removeChild(element.resizeSensor);\n            delete element.resizeSensor;\n            delete element.resizedAttached;\n        }\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ResizeSensor;\n    }\n    else {\n        window.ResizeSensor = ResizeSensor;\n    }\n\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-element-queries/src/ResizeSensor.js\n ** module id = 8\n ** module chunks = 0\n **/","\nimport { ChartPlugin } from './Plugin';\nimport { Trend } from \"./Trend\";\nimport Vector3 = THREE.Vector3;\nimport PerspectiveCamera = THREE.PerspectiveCamera;\nimport Scene = THREE.Scene;\nimport Renderer = THREE.Renderer;\nimport WebGLRenderer = THREE.WebGLRenderer;\nimport Object3D = THREE.Object3D;\nimport { Chart, IChartState } from \"./Chart\";\nimport { ChartWidget, IChartWidgetConstructor } from \"./Widget\";\nimport { Utils } from \"./Utils\";\nimport { IScreenTransformOptions } from \"./Screen\";\nimport { AxisWidget } from \"./widgets/AxisWidget\";\nimport { GridWidget } from \"./widgets/GridWidget\";\nimport { TrendsGradientWidget } from \"./widgets/TrendsGradientWidget\";\nimport { TrendsLineWidget } from \"./widgets/TrendsLineWidget\";\nimport { TrendsCandlesWidget } from './widgets/TrendsCandleWidget';\nimport { ResizeSensor, ResizeSensorType } from './deps';\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {Color} from \"./Color\";\nimport { AxisMarksWidget } from \"./widgets/AxisMarksWidget\";\n\n\nexport class ChartBlankView {\n\n\tstatic devicePixelRatio = window.devicePixelRatio;\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [];\n\tstatic renderers: {[rendererName: string]: any} = {\n\t\tCanvasRenderer: (THREE as any).CanvasRenderer,\n\t\tWebGLRenderer: THREE.WebGLRenderer\n\t};\n\n\tchart: Chart;\n\tisStopped: boolean;\n\tisDestroyed: boolean;\n\tprivate $container: Element;\n\tprivate $el: HTMLElement;\n\tprivate renderer: Renderer;\n\tprivate scene: Scene;\n\tprivate camera: PerspectiveCamera;\n\tprivate cameraInitialPosition: Vector3;\n\tprivate widgets: Array<ChartWidget> = [];\n\tprivate stats: Stats;\n\tprivate zoomThrottled: Function;\n\tprivate unsubscribers: Function[];\n\tprivate resizeSensor: ResizeSensorType;\n\tprivate pluginsAndWidgets: Array<ChartPlugin | ChartWidget>;\n\n\tconstructor(state: IChartState, $container: Element, pluginsAndWidgets: Array<ChartPlugin | ChartWidget> = []) {\n\n\t\tif (!THREE || !THREE.REVISION) Utils.error('three.js not found');\n\n\t\tif (!$container) {\n\t\t\tUtils.error('$el must be set');\n\t\t}\n\t\t// calculate state size\n\t\tlet style = getComputedStyle($container);\n\t\tstate.width = parseInt(style.width);\n\t\tstate.height = parseInt(style.height);\n\n\t\tlet plugins = pluginsAndWidgets.filter(pluginOrWidget => pluginOrWidget instanceof ChartPlugin) as ChartPlugin[];\n\n\t\tthis.chart = new Chart(state, plugins);\n\t\tthis.pluginsAndWidgets = pluginsAndWidgets;\n\t\tthis.zoomThrottled = Utils.throttle((zoomValue: number, origin: number) => this.zoom(zoomValue, origin), 200);\n\t\tthis.$container = $container;\n\t\tthis.init($container);\n\t};\n\n\tprivate init($container: Element) {\n\t\tvar chart = this.chart;\n\t\tvar {width: w, height: h, showStats, autoRender} = chart.state;\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.isStopped = !autoRender.enabled;\n\n\t\tvar renderer = this.renderer = new (ChartView.renderers[this.chart.state.renderer] as any)({\n\t\t\tantialias: true,\n\t\t\talpha: true\n\t\t});\n\t\tlet backgroundColor = new Color(chart.state.backgroundColor);\n\t\trenderer.setSize(w, h);\n\t\trenderer.setPixelRatio(ChartView.devicePixelRatio);\n\t\trenderer.setClearColor(backgroundColor.value, backgroundColor.a);\n\t\t$container.appendChild(renderer.domElement);\n\t\tthis.$el = renderer.domElement;\n\t\tthis.$el.style.display = 'block';\n\n\t\tif (showStats) {\n\t\t\tthis.stats = new Stats();\n\t\t\t$container.appendChild(this.stats.domElement);\n\t\t}\n\n\t\tthis.setupCamera();\n\t\tthis.initWidgets();\n\t\tthis.bindEvents();\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\n\t */\n\tprivate initWidgets() {\n\t\tlet preinstalledWidgetsClasses = (this.constructor as typeof ChartView).preinstalledWidgets.slice();\n\t\tlet customWidgets: ChartWidget[] = [];\n\n\t\tthis.pluginsAndWidgets.forEach(pluginOrWidget => {\n\t\t\tif (pluginOrWidget instanceof ChartWidget) {\n\t\t\t\tcustomWidgets.push(pluginOrWidget);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!(pluginOrWidget instanceof ChartPlugin)) return;\n\t\t\tlet pluginWidgetClasses = (pluginOrWidget.constructor as typeof ChartPlugin).providedWidgets;\n\t\t\tpreinstalledWidgetsClasses.push(...pluginWidgetClasses);\n\t\t});\n\n\t\tthis.widgets = customWidgets.concat(\n\t\t\tpreinstalledWidgetsClasses.map((WidgetClass: IChartWidgetConstructor) => new WidgetClass())\n\t\t);\n\n\t\tthis.widgets.forEach(widget => {\n\t\t\twidget.setupChart(this.chart);\n\t\t\twidget.onReadyHandler();\n\t\t\tthis.scene.add(widget.getObject3D());\n\t\t});\n\t}\n\n\tprivate renderLoop() {\n\t\tif (this.isDestroyed) return;\n\t\tthis.stats && this.stats.begin();\n\t\tthis.render();\n\t\tif (this.isStopped) return;\n\t\tvar fpsLimit = this.chart.state.autoRender.fps;\n\n\t\tif (fpsLimit) {\n\t\t\tlet delay = 1000 / fpsLimit;\n\t\t\tsetTimeout(() => requestAnimationFrame(() => this.renderLoop()), delay);\n\t\t} else {\n\t\t\trequestAnimationFrame(() => this.renderLoop());\n\t\t}\n\t\tthis.stats && this.stats.end();\n\t}\n\n\trender() {\n\t\tthis.chart.render();\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n\n\tstop() {\n\t\tthis.isStopped = true;\n\t}\n\n\trun() {\n\t\tthis.isStopped = false;\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * call to destroy state an init garbage collection\n\t */\n\tdestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.stop();\n\t\tthis.chart.destroy();\n\t\tthis.unbindEvents();\n\t\t// WARNING! undocumented method for free webgl context\n\t\ttry {\n\t\t\t(this.renderer as any).forceContextLoss();\n\t\t} catch (wtf) {\n\t\t\t// sometimes with many state instances forceContextLoss not working\n\t\t}\n\t\t(this.renderer as any).context = null;\n\t\tthis.renderer.domElement = null;\n\t\tthis.renderer = null;\n\t}\n\n\tgetState(): IChartState {\n\t\treturn this.chart.state\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.getTrend\n\t */\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.chart.getTrend(trendName);\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.setState\n\t */\n\tsetState(state: IChartState) {\n\t\treturn this.chart.setState(state);\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar $el = this.$el;\n\t\tif (this.chart.state.controls.enabled) {\n\t\t\t$el.addEventListener('mousewheel', (ev: MouseWheelEvent) => {\n\t\t\t\tthis.onMouseWheel(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousemove', (ev: MouseEvent) => {\n\t\t\t\tthis.onMouseMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousedown', (ev: MouseEvent) => this.onMouseDown(ev));\n\t\t\t$el.addEventListener('mouseup', (ev: MouseEvent) => this.onMouseUp(ev));\n\t\t\t$el.addEventListener('touchmove', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('touchend', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchEnd(ev)\n\t\t\t});\n\t\t}\n\t\tif (this.chart.state.autoResize) {\n\t\t\tthis.resizeSensor = new ResizeSensor(this.$container, () => {\n\t\t\t\tthis.onChartContainerResizeHandler(this.$container.clientWidth, this.$container.clientHeight);\n\t\t\t});\n\t\t}\n\n\t\tthis.unsubscribers = [\n\t\t\tthis.chart.onTrendsChange(() => this.autoscroll()),\n\t\t\tthis.chart.screen.onTransformationFrame((options) => this.onScreenTransformHandler(options)),\n\t\t\tthis.chart.onResize((options) => this.onChartResize())\n\t\t];\n\t}\n\n\tprivate unbindEvents() {\n\t\t// TODO: unbind events correctly\n\t\ttry {\n\t\t\tthis.resizeSensor && this.resizeSensor.detach();\n\t\t} catch (e) {\n\t\t\t// ups.. somebody already removed resizeSensor childNode\n\t\t\t// detected in angular2 apps\n\t\t}\n\t\tthis.$el.remove();\n\t\tthis.unsubscribers.forEach(unsubscribe => unsubscribe());\n\t}\n\n\tprivate setupCamera() {\n\t\tlet camSettings = this.chart.screen.getCameraSettings();\n\t\tif (!this.camera) {\n\t\t\tthis.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t\t\tthis.scene.add(this.camera);\n\t\t} else {\n\t\t\tthis.camera.fov = camSettings.FOV;\n\t\t\tthis.camera.aspect = camSettings.aspect;\n\t\t\tthis.camera.far = camSettings.far;\n\t\t\tthis.camera.near = camSettings.near;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\t\tthis.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t\tthis.cameraInitialPosition = this.camera.position.clone();\n\t\tthis.onScreenTransformHandler(this.chart.screen.options);\n\t}\n\n\tprivate onScreenTransformHandler(options: IScreenTransformOptions) {\n\t\tif (options.scrollX != void 0) {\n\t\t\tlet scrollX = this.cameraInitialPosition.x + options.scrollX;\n\t\t\t// scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setX(scrollX);\n\t\t}\n\t\tif (options.scrollY != void 0) {\n\t\t\tlet scrollY = this.cameraInitialPosition.y + options.scrollY;\n\t\t\t// scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setY(scrollY);\n\t\t}\n\t}\n\n\tprivate autoscroll() {\n\t\tvar state = this.chart;\n\t\tif (!state.state.autoScroll) return;\n\t\tvar oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\n\t\tvar trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\n\t\tif (trendsMaxXDelta > 0) {\n\t\t\tvar maxVisibleX = this.chart.screen.getScreenRightVal();\n\t\t\tvar paddingRightX = this.chart.getPaddingRight();\n\t\t\tvar currentScroll = state.state.xAxis.range.scroll;\n\t\t\tif (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar scrollDelta = trendsMaxXDelta;\n\t\t\tthis.setState({xAxis: {range: {scroll: currentScroll + scrollDelta}}});\n\t\t}\n\t}\n\n\tprivate onScrollStop() {\n\t\t// var tendsXMax = this.state.state.computedData.trends.maxX;\n\t\t// var paddingRightX = this.state.getPaddingRight();\n\t\t// if (tendsXMax < paddingRightX) {\n\t\t// \tthis.state.scrollToEnd();\n\t\t// }\n\t}\n\n\tprivate onMouseDown(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t}\n\n\tprivate onMouseUp(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onMouseMove(ev: MouseEvent) {\n\t\tif (this.chart.state.cursor.dragMode) {\n\t\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t\t}\n\t}\n\n\tprivate onMouseWheel(ev: MouseWheelEvent) {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t\tlet zoomOrigin = ev.layerX / this.chart.state.width;\n\t\tlet zoomValue = 1 + ev.wheelDeltaY * 0.001;\n\t\tthis.zoom(zoomValue, zoomOrigin);\n\t}\n\n\tprivate onTouchMove(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY}});\n\t}\n\n\tprivate onTouchEnd(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onChartContainerResizeHandler(width: number, height: number) {\n\t\tthis.setState({width, height});\n\t}\n\n\tprivate onChartResize() {\n\t\tlet {width, height} = this.chart.state;\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.setupCamera();\n\t}\n\n\tprivate zoom(zoomValue: number, zoomOrigin: number) {\n\t\tconst MAX_ZOOM_VALUE = 1.5;\n\t\tconst MIN_ZOOM_VALUE = 0.7;\n\t\tzoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t\tzoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t\tlet autoScrollIsEnabled = this.chart.state.autoScroll;\n\t\tif (autoScrollIsEnabled) this.chart.setState({autoScroll: false});\n\t\tthis.chart.zoom(zoomValue, zoomOrigin).then(() => {\n\t\t\tif (autoScrollIsEnabled) this.setState({autoScroll: true});\n\t\t});\n\t}\n\n\n}\n\n\nexport class ChartView extends ChartBlankView {\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [\n\t\tTrendsLineWidget,\n\t\tTrendsCandlesWidget,\n\t\tAxisWidget,\n\t\tGridWidget,\n\t\tTrendsGradientWidget,\n\t\t// TODO: remove AxisMarksWidget from preinstalled widgets\n\t\tAxisMarksWidget\n\t]\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ChartView.ts\n **/","import { Chart, IChartState } from \"./Chart\";\nimport { Utils } from './Utils';\nimport { EventEmitter } from './EventEmmiter';\nimport { ChartWidget } from './Widget';\n\nexport interface IChartPluginState {\n}\n\nexport interface IChartPluginConfig {\n\tinstallPluginWidgets?: boolean;\n}\n\nexport const DEFAULT_CONFIG: IChartPluginConfig = {\n\tinstallPluginWidgets: true\n};\n\n/**\n * base class for all plugins\n * NAME is mandatory\n */\nexport abstract class ChartPlugin {\n\tstatic NAME: string = '';\n\tstatic providedWidgets: typeof ChartWidget[] = [];\n\n\tinitialState: IChartPluginState;\n\tconfig: IChartPluginConfig;\n\tname: string;\n\tprotected chart: Chart;\n\tprotected unsubscribers: Function[] = [];\n\tprotected ee: EventEmitter;\n\n\tconstructor (options?: IChartPluginState, config: IChartPluginConfig = {}) {\n\t\tthis.initialState = options;\n\t\tthis.config = Utils.deepMerge(DEFAULT_CONFIG, config);\n\t\tthis.name = (this.constructor as typeof ChartPlugin).NAME;\n\t\tif (!this.name) Utils.error('Unnamed plugin detected');\n\t}\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvent(\n\t\t\tthis.chart.onInitialStateApplied(initialState => this.onInitialStateAppliedHandler(initialState)),\n\t\t\tthis.chart.onReady(() => this.onReadyHandler()),\n\t\t\tthis.chart.onDestroy(() => this.onDestroyHandler()),\n\t\t\tthis.chart.onPluginsStateChange(changedPluginsStates => changedPluginsStates[this.name] && this.onStateChanged(changedPluginsStates[this.name]))\n\t\t)\n\t}\n\n\tgetOptions(): IChartPluginState {\n\t\treturn this.chart.state.pluginsState[this.name];\n\t}\n\n\tprotected onInitialStateAppliedHandler(initialState: IChartState) {\n\t}\n\n\tprotected onReadyHandler() {\n\t}\n\n\tprotected onStateChanged(changedState: IChartPluginState) {\n\t}\n\n\tprotected onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t}\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unsubscribers: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunsubscribers.push(args[0] as Function);\n\t\t} else {\n\t\t\tunsubscribers.push(...args as Function[]);\n\t\t}\n\t\tthis.unsubscribers.push(...unsubscribers);\n\t}\n\n\n\tprotected unbindEvents() {\n\t\tthis.unsubscribers.forEach(unsubscriber => unsubscriber());\n\t\tthis.unsubscribers.length = 0;\n\t}\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Plugin.ts\n **/","import Texture = THREE.Texture;\nimport Color = THREE.Color;\nimport { TIteralable, IIteralable } from \"./interfaces\";\nimport { isPlainObject } from './deps/deps';\n\nfunction deepmerge(target: any, src: any, mergeArrays = true) {\n\tvar array = Array.isArray(src);\n\tvar dst: any = array && [] || {};\n\n\tif (array) {\n\t\ttarget = target || [];\n\t\tif (mergeArrays) {\n\t\t\tdst = dst.concat(target);\n\t\t}\n\t\tsrc.forEach(function(e: any, i: any) {\n\t\t\tif (typeof dst[i] === 'undefined') {\n\t\t\t\tdst[i] = e;\n\t\t\t} else if (typeof e === 'object') {\n\t\t\t\tdst[i] = deepmerge(target[i], e, mergeArrays);\n\t\t\t} else {\n\t\t\t\tif (target.indexOf(e) === -1) {\n\t\t\t\t\tdst.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tif (target && typeof target === 'object') {\n\t\t\tObject.keys(target).forEach(function (key) {\n\t\t\t\tdst[key] = target[key];\n\t\t\t})\n\t\t}\n\t\tObject.keys(src).forEach(function (key) {\n\t\t\tif (typeof src[key] !== 'object' || !src[key]) {\n\t\t\t\tdst[key] = src[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t} else {\n\t\t\t\t\tdst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn dst;\n}\n\n\n\nexport declare type TUid = number;\n\n/**\n * project utils static class\n */\nexport class Utils {\n\n\tprivate static currentId: TUid = 1;\n\n\t/**\n\t * deepMerge based on https://www.npmjs.com/package/deepmerge\n\t */\n\tstatic deepMerge<T> (obj1: T, obj2: T, mergeArrays?: boolean) {\n\t\treturn deepmerge(obj1, obj2, mergeArrays) as T;\n\t}\n\n\t/**\n\t * deepCopy based on JSON.stringify function\n\t * @deprecated\n\t */\n\tstatic deepCopy<T> (obj: T) {\n\t\t// TODO: use deepMerge function to copy\n\t\treturn JSON.parse(JSON.stringify(obj)) as T;\n\t}\n\n\t/**\n\t *\n\t * @example\n\t * // returns \"000015\"\n\t * Utils.toFixed(15, 6);\n\t */\n\tstatic toFixed(num: number, digitsCount: number): string {\n\t\tvar maxDigits = 15;\n\t\tvar result = '';\n\t\tvar intVal = Math.floor(num);\n\t\tvar intStr = intVal.toString();\n\t\tvar lengthDiff = digitsCount - intStr.length;\n\t\tif (lengthDiff > 0 ) {\n\t\t\tresult = (<any>'0').repeat(lengthDiff) + intStr;\n\t\t} else {\n\t\t\tresult = intStr;\n\t\t}\n\t\tvar afterPointDigitsCount = maxDigits - intStr.length;\n\t\tvar afterPointStr = num.toString().split('.')[1];\n\t\tif (afterPointStr) {\n\t\t\tresult += '.' + afterPointStr.substr(0, afterPointDigitsCount);\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic bindEvent() {\n\n\t}\n\n\t/**\n\t * generate texture from canvas context\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture {\n\t\tvar canvas: HTMLCanvasElement = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tvar ctx = canvas.getContext('2d');\n\t\tfn(ctx);\n\t\tvar texture = new THREE.Texture(canvas);\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * generate texture from canvas context with NearestFilter\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createNearestTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture{\n\t\tvar texture = this.createTexture(width, height, fn);\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\treturn texture;\n\t}\n\n\tstatic createPixelPerfectTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture{\n\t\tvar texture = this.createTexture(width, height, fn);\n\t\ttexture.magFilter = THREE.NearestFilter;\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic error(msg: string) {\n\t\tconsole.error('Chart error: ' + msg);\n\t\tthrow 'Chart: ' + msg;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic warn(msg: string) {\n\t\tconsole.warn('Chart warning: ' + msg);\n\t}\n\n\t/**\n\t * @returns new unique id\n\t */\n\tstatic getUid(): TUid {\n\t\treturn this.currentId++;\n\t}\n\n\t/**\n\t * @returns distance between numbers\n\t */\n\tstatic getDistance(num1: number, num2: number) {\n\t\treturn Math.max(num1, num2) - Math.min(num1, num2);\n\t}\n\n\tstatic binarySearchClosestInd(arr: IIteralable[], num: number, key: string): number {\n\t\tvar mid: number;\n\t\tvar lo = 0;\n\t\tvar hi = arr.length - 1;\n\t\twhile (hi - lo > 1) {\n\t\t\tmid = Math.floor ((lo + hi) / 2);\n\t\t\tif (arr[mid][key] < num) {\n\t\t\t\tlo = mid;\n\t\t\t} else {\n\t\t\t\thi = mid;\n\t\t\t}\n\t\t}\n\t\tif (num - arr[lo][key] <= arr[hi][key] - num) {\n\t\t\treturn lo;\n\t\t}\n\t\treturn hi;\n\t}\n\t\n\tstatic binarySearchClosest<ArrayItem>(arr: ArrayItem[], num: number, key: string): ArrayItem {\n\t\tlet ind = this.binarySearchClosestInd(arr, num, key);\n\t\treturn arr[ind];\n\t}\n\n\n\tstatic rectsIntersect(r1: number[], r2: number[]) {\n\t\tlet [left1, top1, width1, height1] = r1;\n\t\tlet [left2, top2, width2, height2] = r2;\n\t\tlet [right1, right2, bottom1, bottom2] = [left1 + width1, left2 + width2, top1 + height1, top2 + height2];\n\t\treturn !(left2 > right1 ||\n\t\t\tright2 < left1 ||\n\t\t\ttop2 > bottom1 ||\n\t\t\tbottom2 < top1\n\t\t);\n\t}\n\n\n\tstatic throttle(func: Function, ms: number) {\n\n\t\tvar isThrottled = false,\n\t\t\tsavedArgs: any,\n\t\t\tsavedThis: any;\n\n\t\tfunction wrapper() {\n\n\t\t\tif (isThrottled) { // (2)\n\t\t\t\tsavedArgs = arguments;\n\t\t\t\tsavedThis = this;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunc.apply(this, arguments); // (1)\n\n\t\t\tisThrottled = true;\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tisThrottled = false; // (3)\n\t\t\t\tif (savedArgs) {\n\t\t\t\t\twrapper.apply(savedThis, savedArgs);\n\t\t\t\t\tsavedArgs = savedThis = null;\n\t\t\t\t}\n\t\t\t}, ms);\n\t\t}\n\n\t\treturn wrapper;\n\t}\n\n\tstatic msToTimeString(timestamp: number) {\n\t\tvar h = Math.floor(timestamp / 360000);\n\t\tvar m =  Math.floor(timestamp / 60000);\n\t\tvar s =  Math.floor(timestamp / 1000);\n\t\treturn h + ':' + m + ':' + s;\n\t}\n\t\n\tstatic getRandomItem<T>(arr: Array<T>): T {\n\t\tvar ind = Math.floor(Math.random() * arr.length);\n\t\treturn arr[ind];\n\t}\n\n\tstatic copyProps(srcObject: TIteralable, dstObject: TIteralable, props: TIteralable, excludeProps: string[] = []) {\n\t\tfor (var key in props) {\n\t\t\tif (excludeProps.indexOf(key) !== -1) continue;\n\t\t\tif (srcObject[key] == void 0) continue;\n\t\t\tif (isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t\t\t\tthis.copyProps(srcObject[key], dstObject[key], props[key])\n\t\t\t} else {\n\t\t\t\tdstObject[key] = this.deepCopy(srcObject[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Utils.ts\n **/","import {EE2} from './deps';\n\n/**\n * this class uses as proxy for EventEmitter2\n */\nexport class EventEmitter {\n\tprivate ee: EventEmitter2;\n\tconstructor() {\n\t\tthis.ee = new EE2();\n\t}\n\temit(eventName: string, ...args: any[]) {\n\t\tthis.ee.emit(eventName, ...args)\n\t}\n\ton(eventName: string, callback: Function) {\n\t\treturn this.ee.on(eventName, callback)\n\t}\n\toff(eventName: string, callback: Function) {\n\t\treturn this.ee.off(eventName, callback);\n\t}\n\tsubscribe(eventName: string, callback: Function): Function {\n\t\tthis.on(eventName, callback);\n\t\treturn () => this.off(eventName, callback);\n\t}\n\tsetMaxListeners(listenersCount: number) {\n\t\tthis.ee.setMaxListeners(listenersCount);\n\t}\n\tremoveAllListeners(eventName?: string) {\n\t\tthis.ee.removeAllListeners(eventName);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventEmmiter.ts\n **/","export * from './deps'\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/index.ts\n **/","import Vector3 = THREE.Vector3;\nimport { ITrendOptions, Trend, ITrendData, TREND_TYPE } from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Utils} from './Utils';\nimport {TrendsManager, ITrendsOptions} from \"./TrendsManager\";\nimport {Screen} from \"./Screen\";\nimport {AxisMarks} from \"./AxisMarks\";\nimport {\n\tAXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions, IAnimationsOptions, AXIS_RANGE_TYPE\n} from \"./interfaces\";\nimport { Promise } from './deps/deps';\nimport { ChartPlugin } from './Plugin';\nimport {TColor} from \"./Color\";\nimport { AnimationManager } from \"./AnimationManager\";\nimport { EASING } from './Easing';\n\ninterface IRecalculatedStateResult {\n\tchangedProps: IChartState,\n\tpatch: IChartState\n}\n\nconst CHART_STATE_EVENTS = {\n\tINITIAL_STATE_APPLIED: 'initialStateApplied',\n\tREADY: 'ready',\n\tDESTROY: 'destroy',\n\tCHANGE: 'change',\n\tTREND_CHANGE: 'trendChange',\n\tTRENDS_CHANGE: 'trendsChange',\n\tZOOM: 'zoom',\n\tRESIZE: 'resize',\n\tSCROLL: 'scroll',\n\tSCROLL_STOP: 'scrollStop',\n\tPLUGINS_STATE_CHANGED: 'pluginsStateChanged'\n};\n\n/**\n * readonly computed state state\n * calculated after recalculateState() call\n * contains cached values\n */\nexport interface IChartStateComputedData {\n\ttrends?: {\n\t\tmaxXVal: number,\n\t\tminXVal: number\n\t}\n}\n\nexport interface IChartState {\n\tprevState?: IChartState,\n\twidth?: number;\n\theight?: number;\n\tzoom?: number;\n\txAxis?: IAxisOptions,\n\tyAxis?: IAxisOptions,\n\tanimations?: IAnimationsOptions,\n\ttrends?: ITrendsOptions,\n\ttrendDefaultState?: ITrendOptions;\n\tcursor?: {\n\t\tdragMode?: boolean,\n\t\tx?: number,\n\t\ty?: number\n\t},\n\n\t/**\n\t * use fps = 0 for no limits\n\t */\n\tautoRender?: {enabled?: boolean, fps?: number};\n\n\t/**\n\t * by default 'WebGLRenderer'\n\t * also available 'CanvasRenderer'\n\t */\n\trenderer?: 'WebGLRenderer' | 'CanvasRenderer';\n\tfont?: {s?: string, m?: string, l?:string}\n\n\n\t/**\n\t * buffer size for displayed segments\n\t * used by widgets\n\t */\n\tmaxVisibleSegments?: number;\n\tautoResize?: boolean;\n\tcontrols?: {enabled: boolean};\n\tautoScroll?: boolean;\n\n\t//TODO: exclude stats in plugin\n\tshowStats?: boolean;\n\tbackgroundColor?: TColor;\n\tcomputedData?: IChartStateComputedData,\n\tpluginsState?: {[pluginName: string]: any};\n\teventEmitterMaxListeners?: number;\n}\n\nconst LIGHT_BLUE = '#5273bd';\n\n/**\n *  all state changes caused only by Chart.setState method\n */\nexport class Chart {\n\n\tstate: IChartState = {\n\t\tprevState: {},\n\t\tzoom: 0,\n\t\txAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.ALL,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tscroll: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 0, end: 5},\n\t\t\t\tmargin: {start: 0, end: 5}\n\t\t\t},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tgrid: {enabled: true, minSizePx:  100, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tautoScroll: true,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tyAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.RELATIVE_END,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 5, end: 5},\n\t\t\t\tmargin: {start: 5, end: 5},\n\t\t\t},\n\t\t\tgrid: {enabled: true, minSizePx:  50, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tanimations: {\n\t\t\tenabled: true,\n\t\t\ttrendChangeSpeed: 0.5,\n\t\t\ttrendChangeEase: void 0,\n\t\t\tzoomSpeed: 250,\n\t\t\tscrollSpeed: 1000,\n\t\t\tscrollEase: EASING.Quadratic.Out,\n\t\t\tzoomEase: EASING.Quadratic.Out,\n\t\t\tautoScrollSpeed: 1000,\n\t\t\tautoScrollEase: EASING.Linear.None,\n\t\t},\n\t\tautoRender: {enabled: true, fps: 0},\n\t\tautoResize: true,\n\t\trenderer: 'WebGLRenderer',\n\t\tautoScroll: true,\n\t\tcontrols: {enabled: true},\n\t\ttrendDefaultState: {\n\t\t\tenabled: true,\n\t\t\ttype: TREND_TYPE.LINE,\n\t\t\tdata: [],\n\t\t\tmaxSegmentLength: 1000,\n\t\t\tlineWidth: 2,\n\t\t\tlineColor: 0xFFFFFF,\n\t\t\thasBackground: true,\n\t\t\tbackgroundColor: 'rgba(#FFFFFF, 0.07)',\n\t\t\thasBeacon: false,\n\t\t\tsettingsForTypes: {\n\t\t\t\tCANDLE: {\n\t\t\t\t\tminSegmentLengthInPx: 20,\n\t\t\t\t\tmaxSegmentLengthInPx: 40,\n\t\t\t\t},\n\t\t\t\tLINE: {\n\t\t\t\t\tminSegmentLengthInPx: 2,\n\t\t\t\t\tmaxSegmentLengthInPx: 10,\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcursor: {\n\t\t\tdragMode: false,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\tfont: {\n\t\t\ts: '11px Arial',\n\t\t\tm: '12px Arial',\n\t\t\tl: '13px Arial'\n\t\t},\n\t\tbackgroundColor: 0x000c2a,\n\t\tshowStats: false,\n\t\tpluginsState: {},\n\t\teventEmitterMaxListeners: 20,\n\t\tmaxVisibleSegments: 1280\n\t};\n\tplugins: {[pluginName: string]: ChartPlugin} = {};\n\ttrendsManager: TrendsManager;\n\tanimationManager = new AnimationManager();\n\tscreen: Screen;\n\txAxisMarks: AxisMarks;\n\tyAxisMarks: AxisMarks;\n\n\t/**\n\t * true then state was initialized and ready to use\n\t */\n\tisReady = false;\n\tisDestroyed = false;\n\n\n\tprivate ee: EventEmitter;\n\n\tconstructor(\n\t\tinitialState: IChartState,\n\t\tplugins: ChartPlugin[] = []\n\t) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\n\n\t\tthis.state = Utils.deepMerge(this.state, initialState);\n\t\tthis.trendsManager = new TrendsManager(this, initialState);\n\t\tinitialState.trends = this.trendsManager.calculatedOptions;\n\t\tinitialState = this.installPlugins(plugins, initialState);\n\t\tthis.setState(initialState);\n\t\tthis.setState({computedData: this.getComputedData()});\n\t\tthis.savePrevState();\n\n\t\tthis.screen = new Screen(this);\n\t\tthis.xAxisMarks = new AxisMarks(this, AXIS_TYPE.X);\n\t\tthis.yAxisMarks = new AxisMarks(this, AXIS_TYPE.Y);\n\t\tthis.initListeners();\n\t\t\n\t\t// message to other modules that Chart.state is ready for use\n\t\tthis.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\n\t\t// message to other modules that Chart is ready for use\n\t\tthis.isReady = true;\n\t\tthis.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t}\n\n\t/**\n\t * destroy chart, use ChartView.destroy to completely destroy Chart\n\t */\n\tdestroy() {\n\t\tthis.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t\tthis.ee.removeAllListeners();\n\t\tthis.state = {};\n\t\tthis.isDestroyed = true;\n\t}\n\n\tonDestroy(cb: Function) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t}\n\n\tonInitialStateApplied(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t}\n\n\tonReady(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t}\n\n\tonChange(cb: (changedProps: IChartState) => void ) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t}\n\n\tonTrendChange(cb: (trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t}\n\n\tonTrendsChange(cb: (trendsOptions: ITrendsOptions) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t}\n\n\tonScrollStop(cb: () => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t}\n\n\tonScroll(cb: (scrollOptions: {deltaX: number}) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t}\n\n\tonZoom(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t}\n\n\tonResize(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t}\n\n\tonPluginsStateChange(cb: (changedPluginsStates: {[pluginName: string]: Plugin}) => any) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t}\n\t\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.trendsManager.getTrend(trendName);\n\t}\n\n\trender() {\n\t\tthis.animationManager.tick();\n\t}\n\n\tsetState(newState: IChartState, eventData?: any, silent = false) {\n\n\t\tif (this.isDestroyed) {\n\t\t\tUtils.error('You have tried to change state of destroyed Chart instance');\n\t\t}\n\n\t\tlet stateData = this.state as {[key: string]: any};\n\t\tlet newStateObj = newState as {[key: string]: any};\n\n\t\tvar changedProps: {[key: string]: any} = {};\n\t\tfor (let key in newStateObj) {\n\t\t\tif (stateData[key] !== newStateObj[key]) {\n\t\t\t\tchangedProps[key] = newStateObj[key] as any;\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(changedProps as IChartState);\n\n\n\t\t// temporary remove trends state from newState by performance reasons\n\t\tlet trendsData: {[trendName: string]: ITrendData} = {};\n\t\tif (newState.trends) for (let trendName in newState.trends) {\n\t\t\tlet trendOptions = newState.trends[trendName];\n\t\t\tif (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t\t\tdelete trendOptions.data;\n\t\t}\n\t\tlet newStateContainsData = Object.keys(trendsData).length > 0;\n\t\t\n\n\t\tthis.state = Utils.deepMerge(this.state, newState, false);\n\n\t\t// return state to state\n\t\tif (newStateContainsData) for (let trendName in trendsData) {\n\t\t\tthis.state.trends[trendName].data = trendsData[trendName];\n\t\t}\n\n\t\tif (silent) return;\n\n\t\t// recalculate all dynamic state props\n\t\tvar recalculateResult = this.recalculateState(changedProps);\n\t\tchangedProps = recalculateResult.changedProps;\n\t\t\n\t\tthis.emitChangedStateEvents(changedProps, eventData);\n\n\t}\n\n\t/**\n\t * recalculate all computed state props\n\t */\n\tprivate recalculateState(changedProps?: IChartState): IRecalculatedStateResult {\n\t\tvar data = this.state;\n\t\tvar patch: IChartState = {};\n\t\tvar actualData = Utils.deepMerge({}, data);\n\n\t\t// recalculate scroll position by changed cursor options\n\t\tvar cursorOptions = changedProps.cursor;\n\t\tvar isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t\tif (isMouseDrag) {\n\t\t\tvar oldX = data.prevState.cursor.x;\n\t\t\tvar currentX =  cursorOptions.x;\n\t\t\tvar currentScroll = data.xAxis.range.scroll;\n\t\t\tvar deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t\t\tpatch.xAxis = {range: {scroll: currentScroll + deltaXVal}};\n\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: patch.xAxis} as IChartState)\n\t\t}\n\n\t\tlet chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\n\t\tlet scrollXChanged = false;\n\t\tlet needToRecalculateXAxis = (\n\t\t\tisMouseDrag ||\n\t\t\tchartWasResized ||\n\t\t\t(changedProps.xAxis && (changedProps.xAxis.range)) ||\n\t\t\tthis.state.xAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateXAxis) {\n\t\t\tlet xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t\t\tif (xAxisPatch) {\n\t\t\t\tscrollXChanged = true;\n\t\t\t\tpatch = Utils.deepMerge(patch, {xAxis: xAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: xAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\n\n\t\t// recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\n\t\tlet needToRecalculateYAxis = (\n\t\t\tchartWasResized ||\n\t\t\t(\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.RELATIVE_END ||\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.AUTO ||\n\t\t\t\tdata.yAxis.range.isMirrorMode\n\t\t\t) &&\n\t\t\t(scrollXChanged || changedProps.trends || changedProps.yAxis) ||\n\t\t\tthis.state.yAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateYAxis){\n\t\t\tlet yAxisPatch = this.recalculateYAxis(actualData);\n\t\t\tif (yAxisPatch) {\n\t\t\t\tpatch = Utils.deepMerge(patch, {yAxis: yAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {yAxis: yAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(patch);\n\t\tlet allChangedProps = Utils.deepMerge(changedProps, patch);\n\t\tpatch.computedData = this.getComputedData(allChangedProps);\n\t\tthis.savePrevState(patch);\n\t\tthis.state = Utils.deepMerge(this.state, patch);\n\t\treturn {changedProps: allChangedProps, patch: patch}\n\t}\n\n\tprivate getComputedData(changedProps?: IChartState): IChartStateComputedData {\n\t\tvar computeAll = !changedProps;\n\t\tvar computedData: IChartStateComputedData = {};\n\n\t\tif (computeAll || changedProps.trends && this.trendsManager) {\n\t\t\tcomputedData.trends = {\n\t\t\t\tmaxXVal: this.trendsManager.getEndXVal(),\n\t\t\t\tminXVal: this.trendsManager.getStartXVal()\n\t\t\t}\n\t\t}\n\t\treturn computedData;\n\t}\n\n\tprivate savePrevState(changedProps?: IChartState) {\n\t\tif (!changedProps) changedProps = this.state;\n\t\tvar prevState = this.state.prevState;\n\n\t\t// prevent to store prev trend state by performance reasons\n\t\tUtils.copyProps(this.state, prevState, changedProps, ['trends']);\n\n\t}\n\n\tprivate emitChangedStateEvents(changedProps: IChartState, eventData: any) {\n\t\tvar prevState = this.state.prevState;\n\n\t\t// emit common change event\n\t\tthis.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\n\t\t// emit event for each changed state property\n\t\tfor (let key in changedProps) {\n\t\t\tthis.ee.emit(key + 'Change', (changedProps as {[key: string]: any})[key], eventData);\n\t\t}\n\n\t\tif (!this.isReady) return;\n\n\t\t// emit special events based on changed state\n\t\tlet scrollStopEventNeeded = (\n\t\t\tchangedProps.cursor &&\n\t\t\tchangedProps.cursor.dragMode === false &&\n\t\t\tprevState.cursor.dragMode === true\n\t\t);\n\t\tscrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\n\t\tlet scrollChangeEventsNeeded = (\n\t\t\tchangedProps.xAxis &&\n\t\t\tchangedProps.xAxis.range &&\n\t\t\tchangedProps.xAxis.range.scroll !== void 0\n\t\t);\n\t\tscrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\n\t\tlet zoomEventsNeeded = (\n\t\t\t(changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\n\t\t\t(changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom)\n\t\t);\n\t\tzoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\n\t\tlet resizeEventNeeded = (changedProps.width || changedProps.height);\n\t\tresizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\n\t\tlet pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\n\t\tpluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t}\n\n\n\t/**\n\t * init plugins and save plugins options in initialState\n\t */\n\tprivate installPlugins(plugins: ChartPlugin[], initialState: IChartState): IChartState {\n\t\tinitialState.pluginsState = {};\n\t\tplugins.forEach(plugin => {\n\t\t\tlet PluginClass = plugin.constructor as typeof ChartPlugin;\n\t\t\tlet pluginName = PluginClass.NAME;\n\t\t\tinitialState.pluginsState[pluginName] = Utils.deepMerge({}, plugin.initialState);\n\t\t\tthis.plugins[pluginName] = plugin;\n\t\t\tplugin.setupChart(this);\n\t\t});\n\t\treturn initialState;\n\t}\n\n\n\t/**\n\t * returns plugin instance by plugin name\n\t * @example\n\t */\n\tgetPlugin(pluginName: string): ChartPlugin {\n\t\treturn this.plugins[pluginName];\n\t}\n\n\n\tprivate initListeners() {\n\t\tthis.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, (changedTrends: ITrendsOptions, newData: ITrendData) => {\n\t\t\tthis.handleTrendsChange(changedTrends, newData)\n\t\t});\n\t\tthis.ee.on('animationsChange', (animationOptions: IAnimationsOptions) => {\n\t\t\tif (animationOptions.enabled !== this.animationManager.isAnimationsEnabled) {\n\t\t\t\tthis.animationManager.setAimationsEnabled(animationOptions.enabled);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handleTrendsChange(changedTrends: ITrendsOptions, newData: ITrendData) {\n\t\tfor (let trendName in changedTrends) {\n\t\t\tthis.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t\t}\n\t}\n\n\tprivate recalculateXAxis(actualData: IChartState, changedProps: IChartState): IAxisOptions {\n\t\tvar axisRange = actualData.xAxis.range;\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar isInitialize = axisRange.zeroVal == void 0;\n\t\tvar zeroVal: number, scaleFactor: number;\n\t\tvar zoom = axisRange.zoom;\n\n\t\tif (axisRange.isMirrorMode) {\n\t\t\tUtils.error('range.isMirrorMode available only for yAxis.range');\n\t\t}\n\n\t\tif (isInitialize) {\n\t\t\tzeroVal = axisRange.from;\n\t\t\tscaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t} else {\n\t\t\tzeroVal = axisRange.zeroVal;\n\t\t\tscaleFactor = axisRange.scaleFactor;\n\n\t\t\t// recalculate range.zoom and range.scroll then range.from or range.to was changed\n\t\t\tif (\n\t\t\t\tchangedProps.xAxis &&\n\t\t\t\t(changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)\n\t\t\t) {\n\t\t\t\tif (changedProps.xAxis.range.zoom) {\n\t\t\t\t\tUtils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t\t\t\t}\n\t\t\t\tlet currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\t\tpatch.range.scroll = axisRange.from - zeroVal;\n\t\t\t\tpatch.range.zoom = currentScaleFactor / scaleFactor;\n\t\t\t\treturn patch;\n\t\t\t}\n\t\t}\n\n\n\t\t// recalculate range.from and range.to then range.zoom or range.scroll was changed\n\t\tdo {\n\t\t\tvar from = zeroVal + axisRange.scroll;\n\t\t\tvar to = from + actualData.width / (scaleFactor * zoom);\n\t\t\tvar rangeLength = to - from;\n\t\t\tvar needToRecalculateZoom = false;\n\t\t\tvar rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\n\t\t\tvar rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\n\t\t\tneedToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t\t\tif (needToRecalculateZoom) {\n\t\t\t\tvar fixScale = rangeLength > axisRange.maxLength ?\n\t\t\t\t\trangeLength / axisRange.maxLength :\n\t\t\t\t\trangeLength / axisRange.minLength;\n\t\t\t\tvar zoom = zoom * fixScale;\n\t\t\t\tpatch.range.zoom = zoom;\n\t\t\t}\n\t\t} while (needToRecalculateZoom);\n\n\t\tpatch.range.from = from;\n\t\tpatch.range.to = to;\n\t\treturn patch;\n\t}\n\n\n\tprivate recalculateYAxis(actualData: IChartState): IAxisOptions {\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar yAxisRange = actualData.yAxis.range;\n\t\tvar isInitialize = yAxisRange.scaleFactor == void 0;\n\t\tvar trends = this.trendsManager;\n\t\tvar trendsEndXVal = trends.getEndXVal();\n\t\tvar trendsStartXVal = trends.getStartXVal();\n\t\tvar xRange = actualData.xAxis.range;\n\t\tvar {from: xFrom, to: xTo} = xRange;\n\t\tvar xRangeLength = xTo - xFrom;\n\t\tvar zeroVal: number, scaleFactor: number, scroll: number, zoom: number, needToZoom: boolean;\n\n\t\t// check situation when state was scrolled behind trends end or before trends start\n\t\tif (xTo > trendsEndXVal) {\n\t\t\txTo = trendsEndXVal;\n\t\t\txFrom = xTo - xRangeLength;\n\t\t} else if (xFrom < trendsStartXVal) {\n\t\t\txFrom = trendsStartXVal;\n\t\t\txTo = xFrom + xRangeLength;\n\t\t}\n\n\t\tvar maxY = trends.getMaxYVal(xFrom, xTo);\n\t\tvar minY = trends.getMinYVal(xFrom, xTo);\n\n\t\tvar trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t\tif (yAxisRange.type == AXIS_RANGE_TYPE.RELATIVE_END) {\n\t\t\tif (trendLastY > maxY) maxY = trendLastY;\n\t\t\tif (trendLastY < minY) minY = trendLastY;\n\t\t}\n\n\t\tif (yAxisRange.isMirrorMode) {\n\t\t\tif (yAxisRange.zeroVal == void 0) Utils.error('range.zeroVal must be set when range.isMirrorMode');\n\t\t\tlet distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t\t\tlet distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t\t\tlet maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t\t\tmaxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t\t\tminY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t\t}\n\t\tlet margin = yAxisRange.margin;\n\t\tlet padding = {\n\t\t\tstart: yAxisRange.padding.start + margin.start,\n\t\t\tend: yAxisRange.padding.end + margin.end\n\t\t};\n\n\t\tif (padding.end + padding.start >= actualData.height) {\n\t\t\tUtils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\n\t\t}\n\n\t\tlet rangeLength = maxY - minY;\n\t\tlet paddingTopInPercents = padding.end / actualData.height;\n\t\tlet paddingBottomInPercents = padding.start / actualData.height;\n\t\tlet rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t\tlet visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t\tlet fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t\tlet toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t\t\n\t\tif (isInitialize) {\n\t\t\tzeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t\t\tscaleFactor = actualData.height / (toVal - fromVal);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t\tneedToZoom = true;\n\t\t} else {\n\t\t\tscaleFactor = yAxisRange.scaleFactor;\n\t\t\tzeroVal = yAxisRange.zeroVal;\n\n\t\t\tlet maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t\t\tlet minScreenY = Math.round(this.getScreenYByValue(minY));\n\t\t\tneedToZoom = (\n\t\t\t\tmaxScreenY > actualData.height - margin.end ||\n\t\t\t\tmaxScreenY < actualData.height - padding.end ||\n\t\t\t\tminScreenY < margin.start ||\n\t\t\t\tminScreenY > padding.start\n\t\t\t);\n\t\t}\n\n\t\tif (!needToZoom) return null;\n\n\t\tscroll = fromVal - zeroVal;\n\t\tzoom = (actualData.height / (toVal - fromVal)) / scaleFactor ;\n\n\t\tvar currentAxisRange = this.state.yAxis.range;\n\t\tif (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t\tif (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t\tif (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t\tif (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t\t\n\t\treturn patch;\n\t}\n\n\tzoom(zoomValue: number, origin = 0.5): Promise<void> {\n\t\tlet {zoom, scroll, scaleFactor} = this.state.xAxis.range;\n\t\tlet newZoom = zoom * zoomValue;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\tlet nextRange = this.state.width / (scaleFactor * newZoom);\n\t\tlet newScroll = scroll + (currentRange - nextRange) * origin;\n\t\tthis.setState({xAxis: {range: {zoom: newZoom, scroll: newScroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.zoomSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\t\n\tzoomToRange(range: number, origin?: number): Promise<void> {\n\t\tvar {scaleFactor, zoom} = this.state.xAxis.range;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\treturn this.zoom(currentRange / range, origin);\n\t}\n\n\tscrollToEnd(): Promise<void> {\n\t\tlet state = this.state;\n\t\tlet endXVal = this.trendsManager.getEndXVal();\n\t\tlet range = state.xAxis.range;\n\t\tvar scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t\tthis.setState({xAxis: {range: {scroll: scroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.scrollSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to xVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.xAxis.range;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to yVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.yAxis.range;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t * returns xVal by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert xVal to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert xVal to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\n\t}\n\n\t/**\n\t *  convert pixels to xVal by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert pixels to xVal by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  returns x xVal by screen x coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\tvar {zeroVal, scroll} = this.state.xAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  returns y xVal by screen y coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\tvar {zeroVal, scroll} = this.state.yAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByYAxis(y);\n\t}\n\n\n\t/**\n\t *  returns screen x xVal by screen y coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t/**\n\t *  returns screen y xVal by screen y coordinate\n\t */\n\tgetScreenYByValue(yVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t\treturn this.valueToPxByYAxis(yVal - zeroVal - scroll)\n\t}\n\n\n\t/**\n\t * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal xVal\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal xVal by screen x coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\n\n\tgetScreenLeftVal() {\n\t\treturn this.getValueByScreenX(0);\n\t}\n\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.state.width);\n\t}\n\n\n\tgetPaddingRight(): number {\n\t\treturn this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Chart.ts\n **/","import {Chart, IChartState} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {TrendSegmentsManager} from \"./TrendSegmentsManager\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Promise} from './deps/deps';\nimport { TColor } from './Color';\n\nexport interface IPrependPromiseExecutor {\n\t(requestedDataLength: number, resolve: (data: TTrendRawData) => void, reject: () => void): void;\n}\nconst EVENTS = {\n\tCHANGE: 'Change',\n\tPREPEND_REQUEST: 'prependRequest'\n};\nexport enum TREND_TYPE {LINE, CANDLE}\nexport type TTrendRawData = ITrendData | number[];\nexport interface ITrendItem {xVal: number, yVal: number, id?: number}\nexport interface ITrendData extends Array<ITrendItem>{}\nexport interface ITrendTypeSettings {\n\tminSegmentLengthInPx?: number;\n\tmaxSegmentLengthInPx?: number;\n}\nexport interface ITrendOptions {\n\tenabled?: boolean,\n\tdata?: ITrendData\n\tdataset?: ITrendData | number[];\n\tname?: string;\n\ttype?: TREND_TYPE;\n\tlineWidth?: number;\n\tlineColor?: TColor;\n\tbackgroundColor?: TColor;\n\thasIndicator?: boolean;\n\thasBackground?: boolean;\n\thasBeacon?: boolean;\n\tmaxSegmentLength?: number;\n\tsettingsForTypes?: {\n\t\tCANDLE?: ITrendTypeSettings,\n\t\tLINE?: ITrendTypeSettings\n\t}\n}\n\nexport class Trend {\n\tname: string;\n\tsegmentsManager: TrendSegmentsManager;\n\tminXVal = Infinity;\n\tminYVal = Infinity;\n\tmaxXVal = -Infinity;\n\tmaxYVal = -Infinity;\n\tprivate chart: Chart;\n\tprivate calculatedOptions: ITrendOptions;\n\tprivate prependRequest: Promise<TTrendRawData>;\n\tprivate ee: EventEmitter;\n\t\n\tconstructor(chartState: Chart, trendName: string, initialState: IChartState) {\n\t\tvar options = initialState.trends[trendName];\n\t\tthis.name = trendName;\n\t\tthis.chart = chartState;\n\t\tthis.calculatedOptions = Utils.deepMerge(this.chart.state.trendDefaultState, options);\n\t\tthis.calculatedOptions.name = trendName;\n\t\tif (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t\tthis.calculatedOptions.dataset = [];\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvents();\n\t}\n\n\tprivate onInitialStateApplied() {\n\t\tthis.segmentsManager = new TrendSegmentsManager(this.chart, this);\n\t}\n\n\tprivate bindEvents() {\n\t\tvar chartState = this.chart;\n\t\tchartState.onInitialStateApplied(() => this.onInitialStateApplied());\n\t\tchartState.onScrollStop(() => this.checkForPrependRequest());\n\t\tchartState.onZoom(() => this.checkForPrependRequest());\n\t\tchartState.onTrendChange((trendName, changedOptions, newData) => this.ee.emit(EVENTS.CHANGE, changedOptions, newData));\n\t\tchartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tgetCalculatedOptions() {\n\t\treturn this.calculatedOptions;\n\t}\n\n\tappendData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData());\n\t\tvar updatedTrendData = options.data.concat(newData);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprependData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData(), true);\n\t\tvar updatedTrendData = newData.concat(options.data);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprivate changeData(allData: ITrendData, newData: ITrendData) {\n\t\tfor (let item of newData) {\n\t\t\tif (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t\t\tif (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t\t\tif (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t\t\tif (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t\t}\n\t\tvar options = this.getOptions();\n\t\tvar statePatch: IChartState = {trends: {[options.name]: {data: allData}}};\n\t\tthis.chart.setState(statePatch, newData);\n\t}\n\t\n\tgetData(fromX?: number, toX?: number): ITrendData {\n\t\tvar data = this.getOptions().data;\n\t\tif (fromX == void 0 && toX == void 0) return data;\n\n\t\tfromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t\ttoX = toX !== void 0 ? toX : data[data.length].xVal;\n\t\tvar filteredData: ITrendData = [];\n\t\tfor (let item of data) {\n\t\t\tif (item.xVal < fromX) continue;\n\t\t\tif (item.xVal > toX) break;\n\t\t\tfilteredData.push(item)\n\t\t}\n\t\treturn filteredData;\n\t}\n\n\tgetFirstItem(): ITrendItem {\n\t\treturn this.getOptions().data[0];\n\t}\n\t\n\tgetLastItem(): ITrendItem {\n\t\tvar data = this.getOptions().data;\n\t\treturn data[data.length - 1];\n\t}\n\n\tgetOptions() {\n\t\treturn this.chart.state.trends[this.name]\n\t}\n\n\tsetOptions(options: ITrendOptions) {\n\t\tthis.chart.setState({trends: {[this.name]: options}});\n\t}\n\n\tonPrependRequest(cb: IPrependPromiseExecutor): Function {\n\t\tthis.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t\t}\n\t}\n\n\t/**\n\t * shortcut for Chart.onTrendChange\n\t */\n\tonChange(cb: (changedOptions: ITrendOptions, newData: ITrendData) => void): Function {\n\t\tthis.ee.on(EVENTS.CHANGE, cb);\n\t\treturn () => { this.ee.off(EVENTS.CHANGE, cb);}\n\t}\n\n\tonDataChange(cb: (newData: ITrendData) => void): Function {\n\t\tvar onChangeCb = (changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tif (newData) cb(newData);\n\t\t};\n\t\tthis.ee.on(EVENTS.CHANGE, onChangeCb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.CHANGE, onChangeCb);\n\t\t}\n\t}\n\n\tprivate checkForPrependRequest() {\n\t\tif (this.prependRequest) return;\n\t\tvar chartState = this.chart;\n\t\tvar minXVal = chartState.state.computedData.trends.minXVal;\n\t\tvar minScreenX = chartState.getScreenXByValue(minXVal);\n\t\tvar needToRequest = minScreenX > 0;\n\t\tvar {from, to} = chartState.state.xAxis.range;\n\t\tvar requestedDataLength = to - from;\n\t\tif (!needToRequest) return;\n\t\t\n\t\tthis.prependRequest = new Promise<TTrendRawData>((resolve: Function, reject: Function) => {\n\t\t\tthis.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t\t});\n\n\t\tthis.prependRequest.then((newData: TTrendRawData) => {\n\t\t\tthis.prependData(newData);\n\t\t\tthis.prependRequest = null;\n\t\t}, () => {\n\t\t\tthis.prependRequest = null;\n\t\t})\n\t\n\t}\n\n\tstatic prepareData (newData: TTrendRawData, currentData?: ITrendData, isPrepend = false): ITrendData {\n\t\tvar data: ITrendData = [];\n\t\tif (typeof newData[0] == 'number') {\n\t\t\tcurrentData = currentData || [];\n\t\t\tlet initialItem: ITrendItem;\n\t\t\tlet xVal: number;\n\t\t\tif (isPrepend) {\n\t\t\t\tinitialItem = currentData[0];\n\t\t\t\txVal = initialItem.xVal - newData.length;\n\t\t\t} else {\n\t\t\t\tinitialItem = currentData[currentData.length - 1];\n\t\t\t\txVal = initialItem ? initialItem.xVal + 1 : 0;\n\t\t\t}\n\t\t\tfor (let yVal of newData as number[]) {\n\t\t\t\tdata.push({xVal: xVal, yVal: yVal, id: Utils.getUid()});\n\t\t\t\txVal++;\n\t\t\t}\n\t\t} else {\n\t\t\tdata = newData as ITrendData;\n\t\t}\n\t\treturn data;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Trend.ts\n **/","import { IIteralable } from \"./interfaces\";\nimport { EventEmitter } from './EventEmmiter';\nimport { Chart } from \"./Chart\";\nimport Vector3 = THREE.Vector3;\nimport { ITrendData, ITrendOptions, ITrendItem, Trend, TREND_TYPE, ITrendTypeSettings } from \"./Trend\";\nimport { Utils } from \"./Utils\";\n\nconst MAX_ANIMATED_SEGMENTS = 100;\nconst EVENTS = {\n\tREBUILD: 'rebuild',\n\tDISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\n\tANIMATION_FRAME: 'animationFrame'\n};\n\n/**\n *  Class helps to display and animate trends segments\n */\nexport class TrendSegmentsManager {\n\tsegmentsById: {[id: string]: TrendSegment} = {};\n\tsegments: TrendSegment[] = [];\n\tchartState: Chart;\n\tanimatedSegmentsIds: number[] = [];\n\tmaxSegmentLength: number;\n\tsegmentsLength = 0;\n\tfirstDisplayedSegmentInd: number;\n\tfirstDisplayedSegment: TrendSegment;\n\tlastDisplayedSegmentInd: number;\n\tlastDisplayedSegment: TrendSegment;\n\tprivate appendAnimation: TweenLite;\n\tprivate prependAnimation: TweenLite;\n\tprivate animatedSegmentsForAppend: number[] = [];\n\tprivate animatedSegmentsForPrepend: number[] = [];\n\tprivate nextEmptyId = 0;\n\tprivate startSegmentId = 0;\n\tprivate endSegmentId = 0;\n\tprivate trend: Trend;\n\tprivate ee: EventEmitter;\n\n\tconstructor (chartState: Chart, trend: Trend) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.trend = trend;\n\t\tthis.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t\tthis.tryToRebuildSegments();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.trend.onChange((changedOptions, newData) => this.onTrendChangeHandler(changedOptions, newData));\n\t\tthis.chartState.onZoom(() => this.onZoomHandler());\n\t\tthis.chartState.onScroll(() => this.recalculateDisplayedRange());\n\t\tthis.chartState.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.appendAnimation && this.appendAnimation.kill();\n\t\tthis.prependAnimation && this.prependAnimation.kill();\n\t}\n\n\tprivate onZoomHandler() {\n\t\tlet segmentsRebuilded = this.tryToRebuildSegments();\n\t\tif (!segmentsRebuilded) {\n\t\t\tthis.recalculateDisplayedRange()\n\t\t}\n\t}\n\n\tprivate onTrendChangeHandler(changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar needToRebuildSegments = (\n\t\t\tchangedOptions.type != void 0 ||\n\t\t\tchangedOptions.maxSegmentLength != void 0\n\t\t);\n\n\n\t\tif (needToRebuildSegments) {\n\t\t\tthis.tryToRebuildSegments(true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!newData) return;\n\n\t\tvar data = this.trend.getData();\n\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\tisAppend ? this.appendData(newData) : this.prependData(newData);\n\t\tthis.recalculateDisplayedRange();\n\t}\n\n\tgetSegment(id: number) {\n\t\treturn this.segmentsById[id];\n\t}\n\n\tgetEndSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.endSegmentId];\n\t}\n\n\tgetStartSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.startSegmentId];\n\t}\n\t\n\tprivate tryToRebuildSegments(force = false): boolean {\n\t\tlet options = this.trend.getOptions();\n\t\tlet trendTypeName = TREND_TYPE[options.type] as string;\n\t\tlet trendTypesSettings =  options.settingsForTypes as IIteralable;\n\t\tlet trendTypeSettings = trendTypesSettings[trendTypeName] as ITrendTypeSettings;\n\t\tlet {\n\t\t\tminSegmentLengthInPx,\n\t\t\tmaxSegmentLengthInPx\n\t\t} = trendTypeSettings;\n\n\t\tlet needToRebuild = this.segments.length === 0 || force;\n\t\tlet segmentLength = this.maxSegmentLength;\n\n\t\t// call toFixed(2) to prevent floating segment error compare\n\t\tlet currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t\tlet currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\n\t\tif (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t\t} else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t\t}\n\n\t\tif (!needToRebuild) return false;\n\n\t\tthis.maxSegmentLength = segmentLength;\n\t\tthis.segmentsById = {};\n\t\tthis.segments = [];\n\t\tthis.nextEmptyId = 0;\n\t\tthis.startSegmentId = 0;\n\t\tthis.endSegmentId = 0;\n\t\tthis.segmentsLength = 0;\n\t\tthis.stopAllAnimations();\n\t\tthis.appendData(null, true);\n\t\tthis.recalculateDisplayedRange(true);\n\t\tthis.ee.emit(EVENTS.REBUILD);\n\t}\n\n\tprivate stopAllAnimations() {\n\t\tthis.animatedSegmentsIds = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tif (this.prependAnimation) this.prependAnimation.kill();\n\t\tif (this.appendAnimation) this.appendAnimation.kill();\n\t}\n\t\n\tprivate recalculateDisplayedRange(segmentsAreRebuilded = false) {\n\t\tvar {from, to} = this.chartState.state.xAxis.range;\n\t\tvar {firstDisplayedSegment, lastDisplayedSegment} = this;\n\t\tvar displayedRange = to - from;\n\n\t\tthis.firstDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\n\t\tthis.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n\t\tthis.lastDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\n\t\tthis.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n\t\tif (segmentsAreRebuilded) return;\n\n\t\tvar displayedRangeChanged = (\n\t\t\tfirstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\n\t\t\tlastDisplayedSegment.id !== this.lastDisplayedSegment.id\n\t\t);\n\t\tif (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t}\n\n\t// getSegments(fromX?: number, toX?: number): TrendSegment[] {\n\t// \tvar segments = this.segments;\n\t// \tif (fromX == void 0 && toX == void 0) return segments;\n\t// \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\n\t// \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\n\t// \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\n\t// \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\n\t// \treturn segments.slice(startSegmentInd, endSegmentInd);\n\t// }\n\n\t/**\n\t * returns array of segments for values array\n\t * values must be sorted!\n\t */\n\tgetSegmentsForXValues(values: number[]): TrendSegment[] {\n\t\tvar valueInd = 0;\n\t\tvar value = values[valueInd];\n\t\tvar lastValueInd = values.length - 1;\n\t\tvar results: TrendSegment[] = [];\n\t\tvar segment = this.getStartSegment();\n\t\tif (!segment.hasValue) return [];\n\t\twhile (segment) {\n\t\t\n\t\t\twhile (value < segment.startXVal) {\n\t\t\t\tresults.push(void 0);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\n\t\t\twhile (value > segment.endXVal) {\n\t\t\t\tsegment = segment.getNext();\n\t\t\t\tif (!segment) break;\n\t\t\t}\n\t\t\n\t\t\tvar valueInPoint = (\n\t\t\t\tsegment.startXVal == value || segment.endXVal == value ||\n\t\t\t\t(segment.startXVal < value && segment.endXVal > value)\n\t\t\t);\n\t\t\tif (valueInPoint) {\n\t\t\t\tresults.push(segment);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\tif (valueInd > lastValueInd) break;\n\t\t}\n\t\treturn results;\n\t}\n\n\tonAnimationFrame(cb: (animationState: TrendSegmentsManager) => void): Function {\n\t\treturn this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t}\n\n\tonRebuild(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.REBUILD, cb);\n\t}\n\n\tonDisplayedRangeChanged(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t}\n\t\n\tallocateNextSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar prevSegment = this.segmentsById[this.endSegmentId];\n\t\tif (prevSegment && prevSegment.hasValue) {\n\t\t\tprevSegment.nextId = id;\n\t\t\tsegment.prevId = prevSegment.id;\n\t\t}\n\t\tthis.endSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.push(segment);\n\t\treturn segment;\n\t}\n\n\tallocatePrevSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar nextSegment = this.segmentsById[this.startSegmentId];\n\t\tif (nextSegment && nextSegment.hasValue) {\n\t\t\tnextSegment.prevId = id;\n\t\t\tsegment.nextId = nextSegment.id;\n\t\t}\n\t\tthis.startSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.unshift(segment);\n\t\treturn segment;\n\t}\n\n\tprivate appendData(newData: ITrendData, needRebuildSegments = false) {\n\n\t\t// WARNING: bottleneck method!\n\n\t\t// var t1 = performance.now();\n\t\tvar trendData = this.trend.getData();\n\t\tif (needRebuildSegments) {\n\t\t\tnewData = trendData;\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t}\n\n\t\tvar startItemInd = trendData.length - newData.length;\n\t\tvar segment = this.getEndSegment() || this.allocateNextSegment();\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\tvar itemInd = 0;\n\t\twhile (itemInd < newData.length) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.appendItem(item);\n\t\t\tlet isLastItem = itemInd == newData.length - 1;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd++;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForAppend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t\t\t\t\tsegment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForAppend.push(id);\n\n\t\t\t}\n\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocateNextSegment();\n\t\t\tlet prevItem = trendData[startItemInd + itemInd - 1];\n\t\t\tsegment.appendItem(prevItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\t// var t2 = performance.now();\n\t\t// console.log(t2 - t1);\n\n\t\t// do not create animation if segments was rebuilded\n\t\tif (needRebuildSegments) {\n\t\t\tfor (let segmentId of this.animatedSegmentsForAppend) {\n\t\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\t\tsegment.currentAnimationState = segment.createAnimationState();\n\t\t\t}\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t\treturn;\n\t\t}\n\t\tif (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time);\n\t}\n\n\n\t// TODO: refactor duplicated code from appendData\n\tprivate prependData(newData: ITrendData) {\n\t\tvar trendData = this.trend.getData();\n\t\tvar segment = this.getStartSegment() || this.segmentsById[0];\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar itemInd = newData.length - 1;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\twhile (itemInd >= 0) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.prependItem(item);\n\t\t\tlet isLastItem = itemInd == 0;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd--;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForPrepend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t\t\t\t\tsegment.initialAnimationState.endYVal =  initialAnimationState.startYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForPrepend.push(id);\n\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocatePrevSegment();\n\t\t\tlet nextItem = trendData[itemInd + 1];\n\t\t\tsegment.prependItem(nextItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\tif (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time, true);\n\t}\n\n\tprivate animate(time: number, isPrepend = false) {\n\n\t\tvar animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tvar animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\n\t\tif ((animation && animation.isActive()) || time == 0) {\n\t\t\tif (animation) animation.kill();\n\t\t\tthis.onAnimationFrameHandler(1, isPrepend);\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar ease = animationsOptions.trendChangeEase;\n\t\tvar objectToAnimate = {animationValue: 0};\n\t\tanimation = TweenLite.to(objectToAnimate, time, {animationValue: 1, ease});\n\t\tanimation.eventCallback('onUpdate', () => this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend));\n\t\tanimation.eventCallback('onComplete', () => {\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\tthis.appendAnimation = null;\n\t\t});\n\n\t\tif (isPrepend) {\n\t\t\tthis.prependAnimation = animation;\n\t\t} else {\n\t\t\tthis.appendAnimation = animation;\n\t\t}\n\t}\n\n\tprivate onAnimationFrameHandler(coefficient: number, isPrepend = false) {\n\t\tlet animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tfor (let segmentId of animatedSegmentsIds) {\n\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\tfor (let key in segment.targetAnimationState) {\n\t\t\t\tlet targetValue = segment.targetAnimationState[key] as number;\n\t\t\t\tlet initialValue = segment.initialAnimationState[key] as number;\n\t\t\t\tlet currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t\t\t\tsegment.currentAnimationState[key] = currentValue;\n\t\t\t}\n\t\t}\n\t\tthis.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t\tthis.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t}\n\n}\n\nexport interface ITrendSegmentState extends IIteralable {\n\txVal?: number;\n\tyVal?: number;\n\tstartXVal?: number;\n\tstartYVal?: number;\n\tendXVal?: number;\n\tendYVal?: number;\n\tmaxYVal?: number;\n\tminYVal?: number;\n\tmaxLength?: number;\n}\n\nexport class TrendSegment implements ITrendSegmentState {\n\tid: number;\n\tprevId: number;\n\tnextId: number;\n\thasValue: boolean;\n\txVal: number;\n\tyVal: number;\n\tstartXVal: number;\n\tstartYVal: number;\n\tendXVal: number;\n\tendYVal: number;\n\tmaxYVal: number;\n\tminYVal: number;\n\tisCompleted = false;\n\tmaxLength: number;\n\titems: ITrendItem[] = [];\n\n\tinitialAnimationState: ITrendSegmentState = {};\n\ttargetAnimationState: ITrendSegmentState = {};\n\tcurrentAnimationState: ITrendSegmentState = {};\n\n\tprivate trendSegments: TrendSegmentsManager;\n\t\n\tconstructor(trendPoints: TrendSegmentsManager, id: number) {\n\t\tthis.trendSegments = trendPoints;\n\t\tthis.id = id;\n\t\tthis.maxLength = trendPoints.maxSegmentLength;\n\t}\n\n\tcreateAnimationState(): ITrendSegmentState {\n\t\tvar {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t} = this;\n\t\treturn {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t}\n\t};\n\t\n\tappendItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.push(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar startXVal = items[0].xVal;\n\t\tif (item.xVal - startXVal > this.maxLength) return false;\n\t\titems.push(item);\n\t\treturn true;\n\t}\n\n\tprependItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.unshift(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar endXVal = items[items.length - 1].xVal;\n\t\tif (endXVal - item.xVal > this.maxLength) return false;\n\t\titems.unshift(item);\n\t\treturn true;\n\t}\n\n\tcomplete() {\n\t\tthis.isCompleted = true;\n\t\tthis.recalculateItems();\n\t\tthis.items = []; // free memory for completed ranges\n\t}\n\n\trecalculateItems() {\n\t\tlet items = this.items;\n\t\tlet itemsLength = items.length;\n\t\tif (itemsLength === 0) Utils.error('Unable to create TrendSegment without TrendItems');\n\t\tlet endItem = items[itemsLength - 1];\n\t\tlet {xVal: endXVal, yVal: endYVal} = endItem;\n\t\tlet startXVal: number, startYVal: number;\n\n\n\t\tlet startItem = items[0];\n\t\tstartXVal = startItem.xVal;\n\t\tstartYVal = startItem.yVal;\n\n\t\tlet minX = Math.min(startXVal, endXVal);\n\t\tlet maxX = Math.max(startXVal, endXVal);\n\t\tlet middleXVal = minX + (maxX - minX) / 2;\n\n\t\tlet minY = Math.min(startYVal, endYVal);\n\t\tlet maxY = Math.max(startYVal, endYVal);\n\t\tlet middleYVal = minY + (maxY - minY) / 2;\n\n\t\tlet yVals = items.map(item => item.yVal);\n\n\t\tthis.startXVal = startXVal;\n\t\tthis.startYVal = startYVal;\n\t\tthis.endXVal = endXVal;\n\t\tthis.endYVal = endYVal;\n\t\tthis.xVal = middleXVal;\n\t\tthis.yVal = middleYVal;\n\t\tthis.maxYVal = Math.max(...yVals);\n\t\tthis.minYVal = Math.min(...yVals);\n\t\tif (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t}\n\n\tgetNext() {\n\t\tvar nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t\treturn nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t}\n\n\tgetPrev() {\n\t\tvar prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t\treturn prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t}\n\t\n\tgetFrameVal(): Vector3 {\n\t\tlet {xVal, yVal} = this.createAnimationState();\n\t\treturn new Vector3(xVal, yVal, 0);\n\t}\n\n\tgetFramePoint(): Vector3 {\n\t\tvar frameVal = this.getFrameVal();\n\t\treturn this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendSegmentsManager.ts\n **/","\nimport {Trend, ITrendOptions} from \"./Trend\";\nimport {Chart, IChartState} from \"./Chart\";\nimport { EventEmitter } from './EventEmmiter';\n\nexport interface ITrendsOptions {\n\t[trendName: string]: ITrendOptions;\n}\n\nconst EVENTS = {\n\tSEGMENTS_REBUILDED: 'segmentsRebuilded'\n};\n\n/**\n * Trends manager\n */\nexport class TrendsManager {\n\ttrends: {[name: string]: Trend} = {};\n\tcalculatedOptions: ITrendsOptions;\n\tprivate ee = new EventEmitter();\n\tprivate chartState: Chart;\n\t\n\tconstructor(state: Chart, initialState: IChartState) {\n\t\tthis.chartState = state;\n\t\tvar trendsCalculatedOptions: ITrendsOptions = {};\n\t\tfor (let trendName in initialState.trends) {\n\t\t\tlet trend = this.createTrend(state, trendName, initialState);\n\t\t\ttrendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t\t}\n\t\tthis.calculatedOptions = trendsCalculatedOptions;\n\t\tthis.bindEvents();\n\t}\n\n\tgetTrend(trendName: string) {\n\t\treturn this.trends[trendName];\n\t}\n\t\n\tgetEnabledTrends(): Trend[] {\n\t\tvar enabledTrends: Trend[] = [];\n\t\tvar allTrends = this.trends;\n\t\tfor (let trendName in allTrends) {\n\t\t\tlet trend = allTrends[trendName];\n\t\t\ttrend.getOptions().enabled && enabledTrends.push(trend);\n\t\t}\n\t\treturn enabledTrends;\n\t}\n\n\n\tgetStartXVal() {\n\t\tvar trends = this.getEnabledTrends();\n\t\treturn trends[0].getData()[0].xVal;\n\t}\n\n\n\tgetEndXVal(): number {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar firstTrendData = trends[0].getData();\n\t\treturn firstTrendData[firstTrendData.length - 1].xVal;\n\t}\n\t\n\t\n\tgetExtremumYVal(extremumIsMax: boolean, fromX?: number, toX?: number) {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar compareFn: Function;\n\t\tvar result: number;\n\t\tif (extremumIsMax) {\n\t\t\tresult = -Infinity;\n\t\t\tcompareFn = Math.max;\n\t\t} else {\n\t\t\tresult = Infinity;\n\t\t\tcompareFn = Math.min;\n\t\t}\n\t\tfor (let trend of trends) {\n\t\t\tvar trendData = trend.getData(fromX, toX);\n\t\t\tvar trendYValues = trendData.map((dataItem) => dataItem.yVal);\n\t\t\tresult = compareFn(result, ...trendYValues);\n\t\t}\n\t\tif (result == Infinity || result == -Infinity) result = NaN;\n\t\treturn result;\n\t}\n\n\tgetMaxYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(true, fromX, toX)}\n\tgetMinYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(false, fromX, toX)}\n\n\tonSegmentsRebuilded(cb: (trendName: string) => any) {\n\t\treturn this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t}\n\n\tprivate bindEvents() {\n\t\tthis.chartState.onInitialStateApplied(() => this.onInitialStateAppliedHandler());\n\t}\n\n\tprivate onInitialStateAppliedHandler() {\n\t\tfor (let trendName in this.trends) {\n\t\t\tthis.trends[trendName].segmentsManager.onRebuild(() => this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName));\n\t\t}\n\t}\n\n\tprivate createTrend(state: Chart, trendName: string, initialState: IChartState): Trend {\n\t\tlet trend = new Trend(state, trendName, initialState);\n\t\tthis.trends[trendName] = trend;\n\t\treturn trend;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendsManager.ts\n **/","import PerspectiveCamera = THREE.PerspectiveCamera;\nimport Vector3 = THREE.Vector3;\nimport {Chart, IChartState} from \"./Chart\";\nimport { EventEmitter } from './EventEmmiter';\nimport { Animation } from './AnimationManager';\n\nexport interface IScreenTransformOptions {\n\tscrollXVal?: number,\n\tscrollYVal?: number,\n\tscrollX?: number,\n\tscrollY?: number,\n\tzoomX?: number,\n\tzoomY?: number\n}\n\nconst SCREEN_EVENTS = {\n\tZOOM_FRAME: 'zoomFrame',\n\tSCROLL_FRAME: 'scrollFrame',\n\tTRANSFORMATION_FRAME: 'transformationFrame'\n};\n\n/**\n * manage camera, and contains methods for transforming pixels to values\n */\nexport class Screen {\n\t// TODO: make own interface for Chart and Screen for calculating screen positions\n\n\toptions: IScreenTransformOptions = {scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1};\n\tprivate chart: Chart;\n\tprivate scrollXAnimation: Animation<number>;\n\tprivate scrollYAnimation: Animation<number>;\n\tprivate zoomXAnimation: Animation<number>;\n\tprivate zoomYAnimation: Animation<number>;\n\tprivate ee: EventEmitter;\n\n\tconstructor(chartState: Chart) {\n\t\tthis.chart = chartState;\n\t\tvar {width: w, height: h} = chartState.state;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.transform({\n\t\t\tscrollY: this.valueToPxByYAxis(this.chart.state.yAxis.range.scroll),\n\t\t\tzoomY: 1\n\t\t});\n\t\tthis.bindEvents();\n\n\t\t//camera.position.z = 1500;\n\t}\n\t\n\tgetCameraSettings() {\n\n\t\tvar {width: w, height: h} = this.chart.state;\n\n\t\t// settings for pixel-perfect camera\n\t\tvar FOV = 75;\n\t\tvar vFOV = FOV * (Math.PI / 180);\n\t\t\n\t\treturn {\n\t\t\tFOV: FOV,\n\t\t\taspect: w / h,\n\t\t\tnear: 0.1,\n\t\t\tfar: 5000,\n\t\t\tz: h / (2 * Math.tan(vFOV / 2) ),\n\n\t\t\t// move 0,0 to left-bottom corner\n\t\t\tx: w / 2,\n\t\t\ty: h / 2\n\t\t}\n\t}\n\n\tonZoomFrame(cb: (zoomX: number, zoomY: number) => void): Function {\n\t\treturn this.ee.subscribe(SCREEN_EVENTS.ZOOM_FRAME, cb);\n\t}\n\n\tonScrollFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\treturn this.ee.subscribe(SCREEN_EVENTS.SCROLL_FRAME, cb);\n\t}\n\n\tonTransformationFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\treturn this.ee.subscribe(SCREEN_EVENTS.TRANSFORMATION_FRAME, cb);\n\t}\n\n\tcameraIsMoving(): boolean {\n\t\treturn !!(\n\t\t\tthis.scrollXAnimation && !this.scrollXAnimation.isFinished ||\n\t\t\t\tthis.zoomXAnimation && !this.zoomXAnimation.isFinished\n\t\t);\n\t}\n\n\t/**\n\t * setup zoom and scroll\n\t */\n\tprivate transform (options: IScreenTransformOptions, silent = false) {\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = options;\n\t\t\n\t\tif (scrollX != void 0) this.options.scrollX = scrollX;\n\t\tif (scrollY != void 0) this.options.scrollY = scrollY;\n\t\tif (zoomX != void 0) this.options.zoomX = zoomX;\n\t\tif (zoomY != void 0) this.options.zoomY = zoomY;\n\n\t\tif (scrollX != void 0 || zoomX) {\n\t\t\toptions.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t\t\tthis.options.scrollXVal = options.scrollXVal;\n\t\t}\n\n\t\tif (scrollY != void 0 || zoomY) {\n\t\t\toptions.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t\t\tthis.options.scrollYVal = options.scrollYVal;\n\t\t}\n\n\t\tif (silent) return;\n\n\t\tthis.ee.emit(SCREEN_EVENTS.TRANSFORMATION_FRAME, options);\n\n\t\tlet scrollEventNeeded = options.scrollXVal != void 0 || options.scrollYVal != void 0;\n\t\tif (scrollEventNeeded) this.ee.emit(SCREEN_EVENTS.SCROLL_FRAME, options);\n\n\t\tlet zoomEventNeeded = options.zoomX != void 0 || options.zoomY != void 0;\n\t\tif (zoomEventNeeded) this.ee.emit(SCREEN_EVENTS.ZOOM_FRAME, options);\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar state = this.chart;\n\n\t\t// handle scroll and zoom\n\t\tstate.onChange((changedProps) => {\n\t\t\tif (changedProps.xAxis && changedProps.xAxis.range) {\n\t\t\t\tif (changedProps.xAxis.range.scroll != void 0) this.onScrollXHandler(changedProps);\n\t\t\t\tif (changedProps.xAxis.range.zoom) this.onZoomXHandler();\n\t\t\t}\n\t\t\tif (changedProps.yAxis && changedProps.yAxis.range){\n\t\t\t\tif (changedProps.yAxis.range.scroll != void 0) this.onScrollYHandler();\n\t\t\t\tif (changedProps.yAxis.range.zoom) this.onZoomYHandler();\n\t\t\t}\n\t\t});\n\t\tstate.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t}\n\n\tprivate onScrollXHandler(changedProps: IChartState) {\n\t\tlet chart = this.chart;\n\t\tlet isDragMode = chart.state.cursor.dragMode;\n\t\tlet animations =  chart.state.animations;\n\t\tlet zoomXChanged = changedProps.xAxis.range.zoom;\n\t\tlet isAutoscroll = chart.state.autoScroll && !isDragMode && !zoomXChanged;\n\t\tlet time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t\tlet ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t\tlet range = chart.state.xAxis.range;\n\t\tlet targetX = range.scroll * range.scaleFactor * range.zoom;\n\n\t\tif (this.scrollXAnimation) this.scrollXAnimation.stop();\n\n\t\tthis.scrollXAnimation = chart.animationManager.animate(time, ease)\n\t\t\t.from(this.options.scrollX)\n\t\t\t.to(targetX)\n\t\t\t.onTick((value) => {\n\t\t\t\tthis.transform({scrollX: value});\n\t\t\t});\n\t}\n\n\tprivate onScrollYHandler() {\n\t\tlet chart = this.chart;\n\t\tlet animations =  chart.state.animations;\n\t\tlet range = chart.state.yAxis.range;\n\t\tlet targetY = range.scroll * range.scaleFactor * range.zoom;\n\n\t\tif (this.scrollYAnimation) this.scrollYAnimation.stop();\n\n\t\tthis.scrollYAnimation = chart.animationManager.animate(animations.zoomSpeed, animations.zoomEase)\n\t\t\t.from(this.options.scrollY)\n\t\t\t.to(targetY)\n\t\t\t.onTick((value) => {\n\t\t\t\tthis.transform({scrollY: value});\n\t\t\t});\n\t}\n\n\n\tprivate onZoomXHandler() {\n\t\tlet chart = this.chart;\n\t\tlet animations =  chart.state.animations;\n\t\tlet targetZoom = chart.state.xAxis.range.zoom;\n\t\tif (this.zoomXAnimation) this.zoomXAnimation.stop();\n\n\t\tthis.zoomXAnimation = chart.animationManager\n\t\t\t.animate(animations.zoomSpeed, animations.zoomEase)\n\t\t\t.from(this.options.zoomX)\n\t\t\t.to(targetZoom)\n\t\t\t.onTick((value) => {\n\t\t\t\tthis.transform({zoomX: value});\n\t\t\t});\n\t}\n\n\n\tprivate onZoomYHandler() {\n\t\tlet chart = this.chart;\n\t\tlet targetZoom = chart.state.yAxis.range.zoom;\n\t\tlet animations =  chart.state.animations;\n\t\tif (this.zoomYAnimation) this.zoomYAnimation.stop();\n\n\t\tthis.zoomYAnimation = chart.animationManager\n\t\t\t.animate(animations.zoomSpeed, animations.zoomEase)\n\t\t\t.from(this.options.zoomY)\n\t\t\t.to(targetZoom)\n\t\t\t.onTick((value) => {\n\t\t\t\tthis.transform({zoomY: value});\n\t\t\t});\n\t}\n\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zeroVal} = this.chart.state.xAxis.range;\n\t\tvar zoom = this.options.zoomX;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zeroVal} =  this.chart.state.yAxis.range;\n\t\tvar zoom = this.options.zoomY;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\n\t */\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\t\n\t/**\n\t * returns xVal by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.chart.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert xVal to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.chart.state.xAxis.range.scaleFactor * this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert xVal to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.chart.state.yAxis.range.scaleFactor * this.options.zoomY;\n\t}\n\t\n\t/**\n\t *  convert pixels to xVal by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.chart.state.xAxis.range.scaleFactor / this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert pixels to xVal by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.chart.state.yAxis.range.scaleFactor / this.options.zoomY;\n\t}\n\n\n\t/**\n\t *  returns scrollX xVal by screen scrollX coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\treturn this.chart.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t}\n\t\n\t\n\t/**\n\t *  returns scrollY xVal by screen scrollY coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\treturn this.chart.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t}\n\t\n\t//\n\t/**\n\t *  returns screen scrollX xVal by screen scrollY coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.chart.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t// /**\n\t//  *  returns screen scrollY xVal by screen scrollY coordinate\n\t//  */\n\t// getScreenYByValue(scrollYVal: number): number {\n\t// \tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t// \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\n\t// }\n\t//\n\t//\n\t/**\n\t * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal xVal\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal xVal by screen scrollX coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\t/**\n\t * returns offset in pixels from yAxis.range.zeroVal xVal by screen scrollY coordinate\n\t */\n\tgetPointByScreenY(screenY: number): number {\n\t\treturn this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t}\n\n\tgetTop(): number {\n\t\treturn this.getPointByScreenY(this.chart.state.height);\n\t}\n\t\n\tgetBottom(): number {\n\t\treturn this.getPointByScreenY(0);\n\t}\n\n\tgetLeft(): number {\n\t\treturn this.getPointByScreenX(0);\n\t}\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.chart.state.width);\n\t}\n\n\tgetTopVal() {\n\t\treturn this.getValueByScreenY(this.chart.state.height);\n\t}\n\t\n\tgetBottomVal() {\n\t\treturn this.getValueByScreenY(0);\n\t}\n\n\tgetCenterYVal() {\n\t\treturn this.getValueByScreenY(this.chart.state.height / 2);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Screen.ts\n **/","\nimport {Chart} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {AXIS_TYPE} from \"./interfaces\";\nimport {ITrendData, ITrendOptions} from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IAxisMarkUpdateOptions {\n\tvalue: number,\n\tdisplayedValue?: string\n}\n\nexport interface IAxisMarkOptions extends IAxisMarkUpdateOptions {\n\tname?: string;\n\ttitle?: string;\n\ttype?: string;\n\tlineColor?: string;\n\tlineWidth?: number;\n\tshowValue?: boolean;\n\tstickToEdges?: boolean;\n}\n\nconst AXIS_MARK_DEFAULT_OPTIONS: IAxisMarkOptions = {\n\ttype: 'simple',\n\tlineWidth: 1,\n\tvalue: 0,\n\tshowValue: false,\n\tstickToEdges: false,\n\tlineColor: '#FFFFFF',\n\ttitle: ''\n};\n\nexport class AxisMarks {\n\tprivate chartState: Chart;\n\tprivate axisType: AXIS_TYPE;\n\tprivate ee: EventEmitter;\n\tprivate items: {[name: string]: AxisMark} = {};\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.axisType = axisType;\n\t\tvar marks = this.items;\n\t\tvar axisMarksOptions = axisType == AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\n\t\t\n\t\tfor (let options of axisMarksOptions) {\n\t\t\tlet axisMark: AxisMark;\n\t\t\toptions = Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t\t\t\n\t\t\t// set mark name\n\t\t\tif (!options.name) options.name = Utils.getUid().toString();\n\t\t\tif (marks[options.name]) Utils.error('duplicated mark name ' + options.name);\n\t\t\t\n\t\t\t// create mark instance based on type option\n\t\t\tif (options.type == 'timeleft') {\n\t\t\t\taxisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t\t\t} else {\n\t\t\t\taxisMark = new AxisMark(chartState, axisType, options);\n\t\t\t}\n\t\t\tmarks[options.name] = axisMark;\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, newData)\n\t\t});\n\t\tthis.chartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tprivate onTrendChange(trendName: string, newData: ITrendData) {\n\t\tif (!newData) return;\n\t\tvar startVal = newData[0].xVal;\n\t\tvar endVal = newData[newData.length - 1].xVal;\n\t\tvar marks = this.items;\n\n\t\tfor (let markName in marks) {\n\t\t\tlet mark = marks[markName];\n\t\t\tlet markVal = mark.options.value;\n\t\t\tlet markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\n\t\t\tif (markWasCrossed) this.ee.emit('markCrossed', trendName, newData);\n\t\t}\n\t}\n\n\n\tgetItems() {\n\t\treturn this.items;\n\t}\n\t\n\tgetItem(markName: string) {\n\t\treturn this.items[markName];\n\t}\n\n}\n\nexport class AxisMark {\n\tstatic typeName = 'simple';\n\toptions: IAxisMarkOptions;\n\taxisType: AXIS_TYPE;\n\tprotected chartState: Chart;\n\tprotected renderOnTrendsChange = false;\n\tprotected ee: EventEmitter;\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE, options: IAxisMarkOptions) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.options = options;\n\t\tthis.axisType = axisType;\n\t\tthis.chartState = chartState;\n\t\tthis.bindEvents();\n\t}\n\t\n\tprotected bindEvents() {}\n\n\tsetOptions(newOptions: IAxisMarkUpdateOptions) {\n\t\tvar value = this.options.value;\n\t\tthis.options = Utils.deepMerge(this.options, newOptions);\n\t\tif (this.options.value !== value) this.ee.emit('valueChange');\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n\n\tgetDisplayedVal(): string {\n\t\tlet {value, displayedValue} = this.options;\n\t\treturn String(displayedValue !== void 0 ? displayedValue : value);\n\t}\n\n\tonMarkCrossed(cb: (trendName: string, newData: ITrendData) => void): Function {\n\t\tthis.ee.on('markCrossed', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('markCrossed', cb);\n\t\t}\n\t}\n\n\tonValueChange(cb: () => void) {\n\t\tthis.ee.on('valueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('valueChange', cb);\n\t\t}\n\t}\n\n\tonDisplayedValueChange(cb: () => void) {\n\t\tthis.ee.on('onDisplayedValueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('onDisplayedValueChange', cb);\n\t\t}\n\t}\n}\n\nexport class AxisTimeleftMark extends AxisMark {\n\tstatic typeName = 'timeleft';\n\tprotected renderOnTrendsChange = true;\n\t\n\tgetDisplayedVal(): string {\n\t\tvar markVal = this.options.value;\n\t\tvar maxXVal = this.chartState.state.computedData.trends.maxXVal;\n\t\tvar time = markVal - maxXVal;\n\t\tif (time < 0) time = 0;\n\t\treturn Utils.msToTimeString(time);\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendsChange(() => this.onTrendsChange());\n\t}\n\n\tprotected onTrendsChange() {\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AxisMarks.ts\n **/","\n\n/**\n * defines how axis range will be calculated\n * FIXED - directly use range.from and range.to xVal\n * AUTO - automatically sets range.from and range.to by visible part of opposite axis\n * RELATIVE_END - same as AUTO, but trend end always present in range\n * ALL - automatically sets range.from and range.to by all values of opposite axis\n *\n */\nimport {IAxisMarkOptions} from \"./AxisMarks\";\nimport {TColor} from \"./Color\";\nexport enum AXIS_RANGE_TYPE {\n\tFIXED,\n\tRELATIVE_END,\n\tAUTO,\n\tALL // TODO: AXIS_RANGE_TYPE.ALL\n}\n\n/**\n * Animation ease type\n */\nexport declare type TEase = Ease | Linear;\n\nexport declare type TIteralable = {[key: string]: any};\nexport interface IIteralable {[key: string]: any};\n\nexport enum AXIS_TYPE {X, Y}\n\nexport interface IAxisRange {\n\ttype?: AXIS_RANGE_TYPE,\n\tfrom?: number,\n\tto?: number,\n\tzoom?: number,\n\tscroll?: number,\n\n\t/**\n\t * Mode only for Y axis. When true displayed center of Y axis never changed. To use set range.zeroVal as center value.\n\t */\n\tisMirrorMode?: boolean,\n\n\tpadding?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmargin?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmaxLength?: number;\n\tminLength?: number;\n\n\t/**\n\t * value in world center coordinate\n\t */\n\tzeroVal?: number,\n\n\t/**\n\t * ratio between 1 pixel and 1 value for zoom = 1\n\t */\n\tscaleFactor?: number,\n}\n\nexport enum AXIS_DATA_TYPE {NUMBER, DATE}\n\nexport interface IAxisOptions {\n\trange?: IAxisRange;\n\tdataType?: AXIS_DATA_TYPE;\n\tautoScroll?: boolean;\n\tmarks?: IAxisMarkOptions[];\n\tgrid?: IGridOptions;\n\tcolor?: TColor;\n}\n\nexport interface IGridOptions {\n\tenabled: boolean;\n\tminSizePx?: number;\n\tcolor?: TColor;\n}\n\nexport interface IAnimationsOptions {\n\tenabled?: boolean,\n\ttrendChangeSpeed?: number,\n\ttrendChangeEase?: TEase,\n\tscrollSpeed?: number,\n\tscrollEase?: (progress: number) => number,\n\tautoScrollSpeed?: number,\n\tautoScrollEase?: (progress: number) => number,\n\tzoomSpeed?: number,\n\tzoomEase?: (progress: number) => number,\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/interfaces.ts\n **/","import { IIteralable } from './interfaces';\nimport { EASING } from  './Easing';\n\n// TODO: transfer AnimationManager to own repo\nexport class AnimationManager {\n\n\tisAnimationsEnabled = true;\n\tprivate animations: Animation<any>[] = [];\n\tprivate lastTickTime: number;\n\n\tconstructor() {\n\t}\n\n\tanimate(time: number, timingFunction?: (progress: number) => number): Animation<IIteralable|number> {\n\t\tlet animation = new Animation(this, time, this.lastTickTime, timingFunction);\n\t\tthis.animations.push(animation);\n\t\treturn animation;\n\t}\n\n\tanimateObj(source: IIteralable, target: IIteralable, ) {\n\n\t}\n\n\tsetAimationsEnabled(isEnabled: boolean) {\n\t\tthis.isAnimationsEnabled = isEnabled;\n\t}\n\n\ttick() {\n\t\tlet now = Date.now();\n\t\tlet animations = this.animations;\n\n\t\t// call tick for each animation\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tlet animation = animations[i];\n\t\t\tif (this.isAnimationsEnabled) {\n\t\t\t\tanimation.tick(now);\n\t\t\t} else {\n\t\t\t\tanimation.completeAndStop();\n\t\t\t}\n\t\t}\n\n\t\t// cleanup completed animations\n\t\tlet i = animations.length;\n\t\twhile (i--) if (animations[i].isFinished) animations.splice(i, 1);\n\n\t\tthis.lastTickTime = Date.now();\n\t}\n\n\thasActiveAnimations(): boolean {\n\t\treturn this.animations.length > 0;\n\t}\n\n}\n\nexport class Animation<AnimatedObjectType> {\n\n\tprogress = 0;\n\tisFinished = false;\n\tinitialObj: AnimatedObjectType;\n\tsourceObj: AnimatedObjectType;\n\ttargetObject: AnimatedObjectType;\n\tprivate onFinishCb: (progress: number) => any;\n\tprivate onTickCb: (source: AnimatedObjectType, progress: number, k: number) => any;\n\tprivate isStopped = false;\n\n\tconstructor(\n\t\tprivate animationManager: AnimationManager,\n\t\tpublic time: number,\n\t\tprivate startTime: number,\n\t\tpublic easing: (k: number) => any = EASING.Quadratic.Out)\n\t{\n\t}\n\n\ttick(now: number) {\n\t\tif (!this.isStopped) {\n\t\t\tlet progress = this.time > 0 ? ((now - this.startTime) / this.time) : 1;\n\t\t\tthis.setProgress(progress);\n\t\t}\n\t\tlet needToFinish = (this.progress == 1 || this.isStopped) && !this.isFinished;\n\t\tif (needToFinish) this.onFinishHandler();\n\t}\n\n\tfrom<T>(sourceObj: T): Animation<T> {\n\t\tif (typeof sourceObj == 'object') {\n\t\t\tthis.sourceObj = sourceObj as any;\n\t\t\tthis.initialObj = {} as any;\n\t\t\tlet sourceIteralable = sourceObj as IIteralable;\n\t\t\tfor (let key in sourceIteralable) if (typeof sourceIteralable[key] == 'number') {\n\t\t\t\t(this.initialObj as IIteralable)[key] = sourceIteralable[key];\n\t\t\t}\n\n\t\t} else if (typeof sourceObj == 'number') {\n\t\t\tthis.sourceObj = sourceObj;\n\t\t\tthis.initialObj = sourceObj;\n\t\t}\n\t\treturn (this as any) as Animation<T>;\n\t}\n\n\tto(targetObj: AnimatedObjectType): this {\n\t\tthis.targetObject = targetObj;\n\t\tif (typeof this.initialObj == 'object') {\n\t\t\tlet initialIteralable = this.initialObj as IIteralable;\n\t\t\tfor (let key in this.targetObject) {\n\t\t\t\tif (initialIteralable[key] == void 0) delete initialIteralable[key];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tonTick(onTickCb: (source: AnimatedObjectType, progress: number, k: number) => any): this {\n\t\tthis.onTickCb = onTickCb;\n\t\treturn this;\n\t}\n\n\tthen(onFinishCb: (progress: number) => any): this {\n\t\tthis.onFinishCb = onFinishCb;\n\t\treturn this;\n\t}\n\n\tstop() {\n\t\tthis.isStopped = true;\n\t}\n\n\tcompleteAndStop() {\n\t\tthis.setProgress(1);\n\t\tthis.stop();\n\t}\n\n\tprivate setProgress(progress: number) {\n\t\tprogress = Math.min(progress, 1);\n\t\tthis.progress = progress;\n\t\tlet k = this.easing(progress);\n\n\t\tif (typeof this.sourceObj == 'number') {\n\t\t\tlet initialVal = this.initialObj as any as number;\n\t\t\tlet targetVal = this.targetObject as any as number;\n\t\t\tlet sourceVal = this.sourceObj as any as number;\n\t\t\tthis.sourceObj = (initialVal + (targetVal - initialVal) * k) as any as AnimatedObjectType;\n\t\t} else if (this.sourceObj && this.targetObject) {\n\t\t\tfor (let key in this.initialObj) {\n\t\t\t\tlet initialVal = (this.initialObj as IIteralable)[key] as number;\n\t\t\t\tlet targetVal = (this.targetObject as IIteralable)[key] as number;\n\t\t\t\t(this.sourceObj as IIteralable)[key] = initialVal + (targetVal - initialVal) * k;\n\t\t\t}\n\t\t}\n\t\tif (this.onTickCb) this.onTickCb(this.sourceObj, progress, k);\n\t}\n\n\tprivate onFinishHandler() {\n\t\tthis.onFinishCb && this.onFinishCb(this.progress);\n\t\tthis.isFinished = true;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AnimationManager.ts\n **/","/**\n * Easing from tween.js lib https://github.com/tweenjs/tween.js\n **/\nexport const EASING = {\n\n\tLinear: {\n\n\t\tNone: function (k: number) {\n\n\t\t\treturn k;\n\n\t\t}\n\n\t},\n\n\tQuadratic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k * k;\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn k * (2 - k);\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * (--k * (k - 2) - 1);\n\n\t\t}\n\n\t},\n\n\tCubic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k * k * k;\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn --k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tQuartic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn 1 - (--k * k * k * k);\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * ((k -= 2) * k * k * k - 2);\n\n\t\t}\n\n\t},\n\n\tQuintic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k * k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn --k * k * k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tSinusoidal: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn 1 - Math.cos(k * Math.PI / 2);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn Math.sin(k * Math.PI / 2);\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * k));\n\n\t\t}\n\n\t},\n\n\tExponential: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k === 0 ? 0 : Math.pow(1024, k - 1);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn k === 1 ? 1 : 1 - Math.pow(2, - 10 * k);\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, k - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (- Math.pow(2, - 10 * (k - 1)) + 2);\n\n\t\t}\n\n\t},\n\n\tCircular: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn 1 - Math.sqrt(1 - k * k);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn Math.sqrt(1 - (--k * k));\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn - 0.5 * (Math.sqrt(1 - k * k) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\n\t\t}\n\n\t},\n\n\tElastic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tk *= 2;\n\n\t\t\tif (k < 1) {\n\t\t\t\treturn -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t\t}\n\n\t\t\treturn 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\n\n\t\t}\n\n\t},\n\n\tBack: {\n\n\t\tIn: function (k: number) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn k * k * ((s + 1) * k - s);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn --k * k * ((s + 1) * k + s) + 1;\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tvar s = 1.70158 * 1.525;\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * (k * k * ((s + 1) * k - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\n\t\t}\n\n\t},\n\n\tBounce: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn 1 - EASING.Bounce.Out(1 - k);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\tif (k < (1 / 2.75)) {\n\t\t\t\treturn 7.5625 * k * k;\n\t\t\t} else if (k < (2 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n\t\t\t} else if (k < (2.5 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n\t\t\t} else {\n\t\t\t\treturn 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n\t\t\t}\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif (k < 0.5) {\n\t\t\t\treturn EASING.Bounce.In(k * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn EASING.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n\n\t\t}\n\n\t}\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Easing.ts\n **/","import {Chart} from \"./Chart\";\nimport Object3D = THREE.Object3D;\n\nexport interface IChartWidgetConstructor {\n\tnew (): ChartWidget;\n\twidgetName: string;\n}\n\n/**\n * base class for all widgets\n * each widget must have widgetName static property\n */\nexport abstract class ChartWidget {\n\tstatic widgetName = '';\n\tprotected chart: Chart;\n\tprivate unbindList: Function[] = [];\n\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t}\n\n\tabstract onReadyHandler(): any;\n\tabstract getObject3D(): Object3D;\n\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unbindList: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunbindList.push(args[0] as Function);\n\t\t} else {\n\t\t\tunbindList.push(...args as Function[]);\n\t\t}\n\t\tthis.unbindList.push(...unbindList);\n\t}\n\tprotected unbindEvents() {\n\t\tthis.unbindList.forEach(unbindEvent => unbindEvent());\n\t\tthis.unbindList.length = 0;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Widget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport UVMapping = THREE.UVMapping;\nimport GridHelper = THREE.GridHelper;\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport {GridWidget, IGridParamsForAxis} from \"./GridWidget\";\nimport {Utils} from \"../Utils\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {AXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions} from \"../interfaces\";\nimport { Color } from \"../Color\";\n\n/**\n * widget for drawing axis\n */\nexport class AxisWidget extends ChartWidget {\n\tstatic widgetName = 'Axis';\n\tprivate isDestroyed = false;\n\tprivate object3D: Object3D;\n\tprivate axisXObject: Object3D;\n\tprivate axisYObject: Object3D;\n\tprivate updateAxisXRequest: () => void;\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.axisXObject = new Object3D();\n\t\tthis.axisYObject = new Object3D();\n\t\tthis.object3D.add(this.axisXObject);\n\t\tthis.object3D.add(this.axisYObject);\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\n\t\t// canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\n\t\tthis.updateAxisXRequest = Utils.throttle(() => this.updateAxis(AXIS_TYPE.X), 1000);\n\n\t\tthis.onScrollChange(\n\t\t\tthis.chart.screen.options.scrollX,\n\t\t\tthis.chart.screen.options.scrollY\n\t\t);\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\tvar state = this.chart;\n\n\t\tthis.bindEvent(\n\t\t\tstate.screen.onTransformationFrame((options) => {\n\t\t\t\tthis.onScrollChange(options.scrollX, options.scrollY);\n\t\t\t}),\n\t\t\tstate.screen.onZoomFrame((options) => {this.onZoomFrame(options)}),\n\t\t\tstate.onDestroy(() => this.onDestroy()),\n\t\t\tstate.onResize(() => this.onResize())\n\t\t);\n\t}\n\n\tprivate onDestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.unbindEvents();\n\t}\n\n\tprivate onScrollChange(x: number, y: number) {\n\n\t\tif (y != void 0) {\n\t\t\tthis.axisYObject.position.y = y;\n\t\t\tthis.axisXObject.position.y = y;\n\t\t}\n\n\t\tif (x != void 0) {\n\t\t\tthis.axisYObject.position.x = x;\n\t\t\tthis.updateAxisXRequest();\n\t\t}\n\n\t}\n\n\tprivate onResize() {\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\t}\n\n\tprivate setupAxis(orientation: AXIS_TYPE) {\n\n\t\tlet isXAxis = orientation == AXIS_TYPE.X;\n\t\tlet {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tlet canvasWidth = 0, canvasHeight = 0;\n\t\tlet axisOptions: IAxisOptions;\n\n\t\t// clean meshes\n\t\tif (isXAxis) {\n\t\t\tthis.axisXObject.traverse(obj => this.axisXObject.remove(obj));\n\t\t\tcanvasWidth = visibleWidth * 3;\n\t\t\tcanvasHeight = 50;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t} else {\n\t\t\tthis.axisYObject.traverse(obj => this.axisYObject.remove(obj));\n\t\t\tcanvasWidth = 50;\n\t\t\tcanvasHeight = visibleHeight * 3;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t}\n\n\t\tvar texture = Utils.createNearestTexture(canvasWidth, canvasHeight, (ctx) => {\n\t\t\tlet color = new Color(axisOptions.color);\n\t\t\tctx.beginPath();\n\t\t\tctx.font = this.chart.state.font.m;\n\t\t\tctx.fillStyle = color.rgbaStr;\n\t\t\tctx.strokeStyle = color.rgbaStr;\n\t\t});\n\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tvar axisMesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(canvasWidth, canvasHeight),\n\t\t\tmaterial\n\t\t);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisXObject.add(axisMesh);\n\t\t} else {\n\t\t\taxisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisYObject.add(axisMesh);\n\t\t}\n\n\t\tthis.updateAxis(orientation);\n\n\t}\n\t\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate updateAxis(orientation: AXIS_TYPE) {\n\t\tif (this.isDestroyed) return;\n\t\tvar isXAxis = orientation == AXIS_TYPE.X;\n\t\tvar {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = this.chart.screen.options;\n\t\tvar axisOptions: IAxisOptions;\n\t\tvar axisMesh: Mesh;\n\t\tvar axisGridParams: IGridParamsForAxis;\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh = this.axisXObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t\t} else {\n\t\t\taxisMesh = this.axisYObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t\t}\n\n\t\tvar geometry = axisMesh.geometry as PlaneGeometry;\n\t\tvar canvasWidth = geometry.parameters.width;\n\t\tvar canvasHeight = geometry.parameters.height;\n\t\tvar texture = (axisMesh.material as MeshBasicMaterial).map;\n\t\tvar ctx = texture.image.getContext('2d');\n\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t\t}\n\n\n\t\t// TODO: draw text and lines in different loops\n\t\tvar edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t\tvar startVal = axisGridParams.start  - edgeOffset;\n\t\tvar endVal = axisGridParams.end + edgeOffset;\n\n\t\tctx.beginPath();\n\t\tfor (let val = startVal; val <= endVal; val += axisGridParams.step) {\n\t\t\tlet displayedValue = '';\n\t\t\tif (isXAxis) {\n\t\t\t\tlet pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(pxVal + 0.5, canvasHeight);\n\t\t\t\t// ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\n\t\t\t\tif (axisOptions.dataType == AXIS_DATA_TYPE.DATE) {\n\t\t\t\t\tdisplayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t\t\t\t} else {\n\t\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\t}\n\n\t\t\t\tctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t\t\t} else {\n\t\t\t\tlet pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\n\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(canvasWidth, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\n\n\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\tctx.fillText(displayedValue, canvasWidth - 15 , pxVal + 3);\n\n\t\t\t\t// uncomment for left-side axis\n\t\t\t\t// ctx.moveTo(0, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(5, pxVal + 0.5);\n\t\t\t\t// ctx.fillText(Number(val.toFixed(14)).toString(), 15 , pxVal + 3);\n\t\t\t}\n\t\t\tctx.stroke();\n\t\t}\n\t\t// uncomment to preview canvas borders\n\t\t// ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tif (options.zoomX) {\n\t\t\tthis.updateAxis(AXIS_TYPE.X);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.H)\n\t\t}\n\t\tif (options.zoomY) {\n\t\t\tthis.updateAxis(AXIS_TYPE.Y);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.V)\n\t\t}\n\t}\n\n\t// private temporaryHideAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar timeoutId = setTimeout(() => {\n\t// \t\t\tthis.showAxis(orientation);\n\t// \t}, 200);\n\t//\n\t// \tif (isXAxis) {\n\t// \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tclearTimeout(this.showAxisXTimeout);\n\t// \t\tthis.showAxisXTimeout =\ttimeoutId;\n\t// \t} else {\n\t// \t\tclearTimeout(this.showAxisYTimeout);\n\t// \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tthis.showAxisYTimeout = timeoutId;\n\t// \t}\n\t// }\n\n\t// private showAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar material: MeshBasicMaterial;\n\t// \tif (isXAxis) {\n\t// \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t} else {\n\t// \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t}\n\t// \tthis.updateAxis(orientation);\n\t// \tTweenLite.to(material, 0.3, {opacity: 1});\n\t// }\n\n\tstatic getDateStr(timestamp: number, gridParams: IGridParamsForAxis): string {\n\t\tvar sec = 1000;\n\t\tvar min = sec * 60;\n\t\tvar hour = min * 60;\n\t\tvar day = hour * 60;\n\t\tvar step = gridParams.step;\n\t\tvar d = new Date(timestamp);\n\t\tvar tf = (num: number) => Utils.toFixed(num, 2);\n\t\treturn tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport { ChartWidget } from \"../Widget\";\nimport LineSegments = THREE.LineSegments;\nimport { Utils } from \"../Utils\";\nimport { IScreenTransformOptions } from \"../Screen\";\nimport { IAxisOptions } from \"../interfaces\";\nimport { Color } from \"../Color\";\n\nexport interface IGridParamsForAxis {\n\tstart: number,\n\tend: number,\n\tstep: number,\n\tstepInPx: number,\n\tlength: number,\n\tsegmentsCount: number\n}\n\n/**\n * widget for drawing state grid\n */\nexport class GridWidget extends ChartWidget{\n\tstatic widgetName = 'Grid';\n\tprivate lineSegments: LineSegments;\n\tprivate gridSizeH: number;\n\tprivate gridSizeV: number;\n\tprivate isDestroyed = false;\n\n\tonReadyHandler() {\n\t\tvar {width, height, xAxis, yAxis} = this.chart.state;\n\t\tthis.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\n\t\tthis.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\n\t\tthis.initGrid();\n\t\tthis.updateGrid();\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\t// grid is bigger then screen, so it's no need to update it on each scroll event\n\t\tlet updateGridThrottled = Utils.throttle(() => this.updateGrid(), 1000);\n\t\tthis.bindEvent(this.chart.onScroll(() => updateGridThrottled()),\n\t\t\tthis.chart.screen.onZoomFrame((options) => {\n\t\t\t\tupdateGridThrottled();\n\t\t\t\tthis.onZoomFrame(options);\n\t\t\t}),\n\t\t\tthis.chart.onDestroy(() => {\n\t\t\t\tthis.isDestroyed = true;\n\t\t\t\tthis.unbindEvents();\n\t\t\t}),\n\t\t\tthis.chart.onResize(() => {\n\t\t\t\tthis.updateGrid();\n\t\t\t})\n\t\t);\n\n\t}\n\n\tprivate initGrid() {\n\t\tlet color = new Color(this.chart.state.xAxis.grid.color);\n\t\tlet geometry = new THREE.Geometry();\n\t\tlet material = new THREE.LineBasicMaterial({linewidth: 1, color: color.value, opacity: color.a, transparent: true});\n\t\tlet xLinesCount = this.gridSizeH;\n\t\tlet yLinesCount = this.gridSizeV;\n\t\twhile (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\twhile (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\tthis.lineSegments = new LineSegments(geometry, material);\n\t\tthis.lineSegments.position.setZ(-1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t}\n\n\tprivate updateGrid() {\n\t\tif (this.isDestroyed) return;\n\t\tvar {yAxis, xAxis, width, height} = this.chart.state;\n\t\tvar axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t\tvar axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t\tvar scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t\tvar scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t\tvar gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t\tvar gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t\tvar startXVal = axisXGrid.start + gridScrollXVal;\n\t\tvar startYVal = axisYGrid.start + gridScrollYVal;\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tvar vertices = geometry.vertices;\n\t\tvar lineInd = 0;\n\n\t\tfor (let i =  -this.gridSizeH / 3; i < this.gridSizeH * 2/3; i++) {\n\t\t\tlet value = startXVal + i * axisXGrid.step;\n\t\t\tlet lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tfor (let i =  -this.gridSizeV / 3; i < this.gridSizeV * 2/3; i++) {\n\t\t\tlet value = startYVal + i * axisYGrid.step;\n\t\t\tlet lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\tthis.lineSegments.scale.set(\n\t\t\txAxis.range.scaleFactor * xAxis.range.zoom,\n\t\t\tyAxis.range.scaleFactor * yAxis.range.zoom,\n\t\t\t1\n\t\t)\n\t}\n\n\tprivate getHorizontalLineSegment(yVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\n\t\tvar widthVal = chartState.pxToValueByXAxis(chartState.state.width);\n\t\treturn [\n\t\t\tnew THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0 ),\n\t\t\tnew THREE.Vector3( -widthVal + scrollXVal, localYVal, 0 )\n\t\t];\n\t}\n\n\tprivate getVerticalLineSegment(xVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\n\t\tvar heightVal = chartState.pxToValueByYAxis(chartState.state.height);\n\t\treturn [\n\t\t\tnew THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0 ),\n\t\t\tnew THREE.Vector3(localXVal, -heightVal + scrollYVal, 0 )\n\t\t];\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar {xAxis, yAxis} = this.chart.state;\n\t\tif (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t\tif (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t}\n\n\n\t// TODO: move this code to core\n\tstatic getGridParamsForAxis(axisOptions: IAxisOptions, axisWidth: number, zoom: number): IGridParamsForAxis {\n\t\tlet axisRange = axisOptions.range;\n\t\tlet from = axisRange.from;\n\t\tlet to = axisRange.to;\n\t\tlet axisLength = to - from;\n\t\tlet gridStep = 0;\n\t\tlet gridStepInPixels = 0;\n\t\tlet minGridStepInPixels = axisOptions.grid.minSizePx;\n\t\tlet axisLengthStr = String(axisLength);\n\t\tlet axisLengthPointPosition = axisLengthStr.indexOf('.');\n\t\tlet intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\n\t\tlet gridStepFound = false;\n\t\tlet digitPos = 0;\n\t\twhile (!gridStepFound) {\n\n\t\t\tlet power = intPartLength - digitPos - 1;\n\t\t\tlet multiplier = (Math.pow(10, power) || 1);\n\t\t\tlet dividers = [1, 2, 5];\n\t\t\tfor (let dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t\t\t\tlet nextGridStep = multiplier / dividers[dividerInd];\n\t\t\t\tlet nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t\t\t\tif (nextGridStepInPixels >= minGridStepInPixels) {\n\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t} else {\n\t\t\t\t\tgridStepFound = true;\n\t\t\t\t\tif (gridStep === 0) {\n\t\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!gridStepFound) digitPos++\n\n\t\t}\n\n\t\tvar gridStart = Math.floor(from / gridStep) * gridStep;\n\t\tvar gridEnd = Math.floor(to / gridStep) * gridStep;\n\n\t\treturn {\n\t\t\tstart: gridStart,\n\t\t\tend: gridEnd,\n\t\t\tstep: gridStep,\n\t\t\tstepInPx: gridStepInPixels,\n\t\t\tlength: gridEnd - gridStart,\n\t\t\tsegmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t\t}\n\t}\n\t\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/GridWidget.ts\n **/","export declare type TColor = string | number;\n\n\nexport class Color {\n\n\t/**!\n\t * @preserve $.parseColor\n\t * Copyright 2011 THEtheChad Elliott\n\t * Released under the MIT and GPL licenses.\n\t */\n\t/**\n\t * Parse hex/rgb{a} color syntax.\n\t * @input string\n\t * @returns array [r,g,b{,o}]\n\t */\n\tstatic parseColor(color: string): number[] {\n\n\t\tvar cache: any\n\t\t\t, p = parseInt // Use p as a byte saving reference to parseInt\n\t\t\t, color = color.replace(/\\s\\s*/g, '') // Remove all spaces\n\t\t\t;//var\n\n\t\t// Checks for 6 digit hex and converts string to integer\n\t\tif (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\n\n\t\t// Checks for 3 digit hex and converts string to integer\n\t\telse if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\n\t\t\tcache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\n\n\n\t\t// Checks for 6 digit hex with alpha and converts string to integer\n\t\telse if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\n\n\t\t// Checks for rgba and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3], +cache[4]];\n\n\t\t// Checks for rgb and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3]];\n\n\t\t// Otherwise throw an exception to make debugging easier\n\t\telse throw Error(color + ' is not supported by parseColor');\n\n\t\t// Performs RGBA conversion by default\n\t\tisNaN(cache[3]) && (cache[3] = 1);\n\t\treturn cache;\n\t\t// Adds or removes 4th xVal based on rgba support\n\t\t// Support is flipped twice to prevent erros if\n\t\t// it's not defined\n\t\t//return cache.slice(0,3 + !!$.support.rgba);\n\t}\n\n\tr: number;\n\tg: number;\n\tb: number;\n\ta: number;\n\tvalue: number;\n\thexStr: string;\n\trgbaStr: string;\n\n\tconstructor (color: TColor) {\n\t\tthis.set(color);\n\t}\n\n\tstatic numberToHexStr(value: number): string {\n\t\tlet result = value.toString(16);\n\t\treturn '#' + '0'.repeat(6 - result.length) + result;\n\t}\n\n\n\tset(color: TColor) {\n\t\tif (typeof color == 'number') color = Color.numberToHexStr(color);\n\t\tlet colorStr = color as string;\n\t\tlet rgba = Color.parseColor(colorStr);\n\t\tthis.r = rgba[0];\n\t\tthis.g = rgba[1];\n\t\tthis.b = rgba[2];\n\t\tthis.a = rgba[3];\n\t\tthis.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\n\t\tthis.hexStr = Color.numberToHexStr(this.value);\n\t\tthis.rgbaStr = `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n\t}\n\n\tgetTransparent(opacity: number) {\n\t\treturn new Color(`rgba(${this.hexStr}, ${opacity})`);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Color.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {ITrendOptions} from \"../Trend\";\nimport {Utils} from \"../Utils\";\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport { Color } from '../Color';\n\nexport class TrendsGradientWidget extends TrendsWidget<TrendGradient> {\n\tstatic widgetName = \"TrendsGradient\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendGradient;\n\t}\n}\n\n\nexport class TrendGradient extends TrendWidget {\n\tprivate gradient: Mesh;\n\tprivate visibleSegmentsCnt = 0;\n\tprivate segmentsIds: Uint16Array;\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.hasBackground;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.trend = chartState.trendsManager.getTrend(trendName);\n\t\tthis.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments)\n\t\tthis.initGradient();\n\t\tthis.updateSegments();\n\t}\n\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\t// TODO: optimize updateSegments for onDisplayedRangeChanged\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.chart.onZoom(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t}\n\n\n\tgetObject3D(): Object3D {\n\t\treturn this.gradient;\n\t}\n\n\n\tinitGradient() {\n\t\tlet geometry = new Geometry();\n\n\n\t\tfor (let i = 0; i < this.segmentsIds.length; i++) {\n\t\t\tgeometry.vertices.push(\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3()\n\t\t\t);\n\t\t\tlet ind = i * 4;\n\n\t\t\t// gradient segment scheme\n\t\t\t//\n\t\t\t// vert0 +---+ vert3\n\t\t\t//       |\\  |\n\t\t\t// face1 | \\ | face2\n\t\t\t// \t     |  \\|\n\t\t\t// vert1 +---+ vert2\n\n\t\t\tgeometry.faces.push(\n\t\t\t\tnew THREE.Face3( ind, ind + 1, ind + 2 ),\n\t\t\t\tnew THREE.Face3( ind + 3, ind, ind + 2 )\n\t\t\t);\n\t\t}\n\n\t\tlet color = new Color(this.trend.getOptions().backgroundColor);\n\t\tthis.gradient = new THREE.Mesh(\n\t\t\tgeometry,\n\t\t\tnew THREE.MeshBasicMaterial( {color: color.value, transparent: true, opacity: color.a} )\n\t\t);\n\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.gradient.frustumCulled = false;\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tvar currentScale = this.gradient.scale;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegmentsManager: TrendSegmentsManager) {\n\t\tlet animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n\t\tfor (let i = 0; i < this.visibleSegmentsCnt; i++) {\n\t\t\tlet segmentId = this.segmentsIds[i];\n\t\t\tif (!animatedSegmentsIds.includes(segmentId)) continue;\n\t\t\tthis.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n\t\t}\n\t\t(this.gradient.geometry as PlaneGeometry).verticesNeedUpdate = true;\n\t}\n\n\n\tprivate updateSegments() {\n\t\tlet geometry = this.gradient.geometry as PlaneGeometry;\n\t\tlet {\n\t\t\tsegments: trendSegments,\n\t\t\tfirstDisplayedSegmentInd: segmentInd,\n\t\t\tlastDisplayedSegmentInd\n\t\t} = this.trend.segmentsManager;\n\t\tlet prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n\t\tthis.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n\t\tlet segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n\n\t\tif (segmentsToProcessCnt > this.segmentsIds.length) {\n\t\t\tUtils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\n\t\t}\n\n\t\t// setup visible segments and collapse invisible\n\t\tfor (let i = 0; i <= segmentsToProcessCnt; i++) {\n\t\t\tif (segmentInd <= lastDisplayedSegmentInd) {\n\t\t\t\tlet segment = trendSegments[segmentInd];\n\t\t\t\tthis.setupSegmentVertices(i, segment.currentAnimationState);\n\t\t\t\tthis.segmentsIds[i] = segment.id;\n\t\t\t\tsegmentInd++;\n\t\t\t} else {\n\t\t\t\tthis.setupSegmentVertices(i);\n\t\t\t}\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\t/**\n\t * setup gradient segment by segmentState\n\t * if segmentState is undefined, then collapse vertices to 0,0,0\n\t */\n\tprivate setupSegmentVertices(segmentInd: number, segmentState?: ITrendSegmentState) {\n\t\tlet gradientSegmentInd = segmentInd * 4;\n\t\tlet vertices = (this.gradient.geometry as PlaneGeometry).vertices;\n\t\tlet\ttopLeft = vertices[gradientSegmentInd];\n\t\tlet\tbottomLeft = vertices[gradientSegmentInd + 1];\n\t\tlet\tbottomRight = vertices[gradientSegmentInd + 2];\n\t\tlet\ttopRight = vertices[gradientSegmentInd + 3];\n\t\tlet screenHeightVal = Math.max(\n\t\t\tthis.chart.pxToValueByYAxis(this.chart.state.height),\n\t\t\tthis.chart.screen.pxToValueByYAxis(this.chart.state.height)\n\t\t);\n\n\t\tif (segmentState) {\n\t\t\tlet startX = this.toLocalX(segmentState.startXVal);\n\t\t\tlet startY = this.toLocalY(segmentState.startYVal);\n\t\t\tlet endX = this.toLocalX(segmentState.endXVal);\n\t\t\tlet endY = this.toLocalY(segmentState.endYVal);\n\t\t\ttopLeft.set(startX, startY, 0);\n\t\t\ttopRight.set(endX, endY, 0);\n\t\t\tbottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n\t\t\tbottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n\t\t} else {\n\t\t\ttopLeft.set(0, 0, 0);\n\t\t\ttopRight.set(0, 0, 0);\n\t\t\tbottomLeft.set(0, 0, 0);\n\t\t\tbottomRight.set(0, 0, 0);\n\t\t}\n\n\t}\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsGradientWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport {ITrendOptions, ITrendData, Trend} from \"../Trend\";\nimport Vector2 = THREE.Vector2;\nimport Vector3 = THREE.Vector3;\nimport {TrendSegmentsManager} from \"../TrendSegmentsManager\";\nimport {IScreenTransformOptions} from \"../Screen\";\n\n\nexport interface ITrendWidgetClass<TrendWidgetType> {\n\tnew (chart: Chart, trendName: string): TrendWidgetType;\n\twidgetIsEnabled(trendOptions: ITrendOptions, chart: Chart): boolean;\n}\n\n/**\n * abstract manager class for all trends widgets\n */\nexport abstract class TrendsWidget<TrendWidgetType extends TrendWidget> extends ChartWidget {\n\tprotected abstract getTrendWidgetClass(): ITrendWidgetClass<TrendWidgetType>;\n\tprotected object3D: Object3D;\n\tprotected widgets: {[trendName: string]: TrendWidgetType} = {};\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.onTrendsChange();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tvar state = this.chart;\n\t\tstate.onTrendsChange(() => this.onTrendsChange());\n\t\tstate.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, changedOptions, newData)\n\t\t});\n\t}\n\n\tprotected onTrendsChange() {\n\t\tvar trendsOptions = this.chart.state.trends;\n\t\tvar TrendWidgetClass = this.getTrendWidgetClass();\n\t\tfor (let trendName in trendsOptions) {\n\t\t\tlet trendOptions = trendsOptions[trendName];\n\t\t\tlet widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\n\t\t\tif (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t\t\t\tthis.createTrendWidget(trendName);\n\t\t\t} else if (!widgetCanBeEnabled && this.widgets[trendName]){\n\t\t\t\tthis.destroyTrendWidget(trendName);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTrendChange(trendName: string, changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar widget = this.widgets[trendName];\n\t\tif (!widget) return;\n\t\twidget.onTrendChange(changedOptions);\n\t\tif (newData) {\n\t\t\tvar data = this.chart.getTrend(trendName).getData();\n\t\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\t\tisAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t\t}\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate createTrendWidget(trendName: string) {\n\t\tvar WidgetConstructor = this.getTrendWidgetClass();\n\t\tvar widget = new WidgetConstructor(this.chart, trendName);\n\t\tthis.widgets[trendName] = widget;\n\t\tvar widgetObject = widget.getObject3D();\n\t\twidgetObject.name = trendName;\n\t\tthis.object3D.add(widget.getObject3D());\n\t}\n\n\tprivate destroyTrendWidget(trendName: string) {\n\t\tthis.widgets[trendName].onDestroy();\n\t\tdelete this.widgets[trendName];\n\t\tvar widgetObject = this.object3D.getObjectByName(trendName);\n\t\tthis.object3D.remove(widgetObject);\n\t}\n}\n\n/**\n * based class for all trends widgets\n */\nexport abstract class TrendWidget {\n\tprotected trend: Trend;\n\tprotected unbindList: Function[] = [];\n\n\tconstructor (protected chart: Chart, protected trendName: string) {\n\t\tthis.trend = chart.trendsManager.getTrend(trendName);\n\t\tthis.chart = chart;\n\t\tthis.bindEvents();\n\t}\n\tabstract getObject3D(): Object3D;\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions, chart: Chart) {\n\t\treturn trendOptions.enabled;\n\t}\n\tappendData(newData: ITrendData) {};\n\tprependData(newData: ITrendData) {};\n\tonTrendChange(changedOptions?: ITrendOptions) {}\n\tonDestroy() {\n\t\tfor (let unsubscriber of this.unbindList) {\n\t\t\tunsubscriber();\n\t\t}\n\t}\n\tprotected onSegmentsAnimate(segments: TrendSegmentsManager) {\n\t}\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onTransformationFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onZoom() {\n\t}\n\n\n\tprotected bindEvents() {\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onAnimationFrame(\n\t\t\t(trendPoints: TrendSegmentsManager) => this.onSegmentsAnimate(trendPoints)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.screen.onTransformationFrame(\n\t\t\t(options) => this.onTransformationFrame(options)\n\t\t));\n\t\t\n\t\tthis.bindEvent(this.chart.screen.onZoomFrame(\n\t\t\t(options) => this.onZoomFrame(options)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.onZoom(() => this.onZoom()));\n\t};\n\n\tprotected bindEvent(unbind: Function) {\n\t\tthis.unbindList.push(unbind);\n\t}\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport { TrendSegmentsManager, ITrendSegmentState } from \"../TrendSegmentsManager\";\nimport LineSegments = THREE.LineSegments;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ITrendOptions, TREND_TYPE } from '../Trend';\nimport { Utils } from '../Utils';\n\n\n/**\n * widget for drawing trends lines\n */\nexport class TrendsLineWidget extends TrendsWidget<TrendLine> {\n\tstatic widgetName = \"TrendsLine\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendLine;\n\t}\n}\n\ninterface ILineSegment {\n\tind: number,\n\tsegmentId: number\n}\n\nexport class TrendLine extends TrendWidget {\n\tprivate material: LineBasicMaterial;\n\tprivate lineSegments: LineSegments;\n\tprivate vertices: Vector3[];\n\n\t// contains indexes of free segments\n\tprivate freeSegmentsInds: number[] = [];\n\n\t// contains segments to display\n\tprivate displayedSegments: {[segmentId: number]: ILineSegment} = {};\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.LINE;\n\t}\n\t\n\tconstructor (chart: Chart, trendName: string) {\n\t\tsuper(chart, trendName);\n\t\tvar options = this.trend.getOptions();\n\t\tthis.material = new LineBasicMaterial( { color: options.lineColor, linewidth: options.lineWidth } );\n\t\tthis.initLine();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroySegments();\n\t\t\tthis.setupSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupSegments();\n\t\t}));\n\t}\n\t\n\tprivate initLine() {\n\t\tlet geometry = new Geometry();\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.lineSegments = new LineSegments(geometry, this.material);\n\t\tthis.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t\tfor (let i = 0; i < this.chart.state.maxVisibleSegments; i++) {\n\t\t\tgeometry.vertices.push(new  Vector3(), new Vector3());\n\t\t\tthis.freeSegmentsInds.push(i);\n\t\t}\n\t\tthis.vertices = geometry.vertices;\n\t\tthis.setupSegments();\n\t}\n\n\tprivate setupSegments() {\n\t\tlet geometry = this.lineSegments.geometry as Geometry;\n\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.displayedSegments) {\n\t\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\t\tlet segment = this.trend.segmentsManager.segments[lineSegment.segmentId];\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupSegment(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate setupSegment(segmentId: number, segmentState: ITrendSegmentState) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tif (!lineSegment) {\n\t\t\tif (this.freeSegmentsInds.length == 0) Utils.error('Max allocated segments reached');\n\t\t\tlet ind = this.freeSegmentsInds.pop();\n\t\t\tlineSegment = this.displayedSegments[segmentId] = {segmentId, ind};\n\t\t}\n\t\tlet segmentInd = lineSegment.ind;\n\t\tlet lineStartVertex = this.vertices[segmentInd * 2];\n\t\tlet lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t\tlineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t\tlineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t}\n\n\tprivate destroySegments() {\n\t\tfor (let segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t}\n\n\tprivate destroySegment(segmentId: number) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tlet lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t\tlet lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t\tlineStartVertex.set(0, 0, 0);\n\t\tlineEndVertex.set(0, 0, 0);\n\t\tdelete this.displayedSegments[segmentId];\n\t\tthis.freeSegmentsInds.push(lineSegment.ind);\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.lineSegments.scale;\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.displayedSegments[segmentId]) continue;\n\t\t\tthis.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsLineWidget.ts\n **/","\n\nimport { TrendsWidget, TrendWidget } from './TrendsWidget';\nimport { Chart } from '../Chart';\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport Vector3 = THREE.Vector3;\nimport Mesh = THREE.Mesh;\nimport Line = THREE.Line;\nimport BoxGeometry = THREE.BoxGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { TREND_TYPE, ITrendOptions } from '../Trend';\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport remove = THREE.Cache.remove;\nimport { Utils } from '../Utils';\n\n\nconst RISE_COLOR = 0x2CAC40;\nconst FALL_COLOR = 0xEE5533;\nconst MARGIN_PERCENT = 0.3;\nconst MAX_CANDLES = 100;\n\n/**\n * widget for drawing trends candles\n */\nexport class TrendsCandlesWidget extends TrendsWidget<TrendCandlesWidget> {\n\tstatic widgetName = \"TrendsCandles\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendCandlesWidget;\n\t}\n}\n\n\nexport class TrendCandlesWidget extends TrendWidget {\n\tprivate scaleXFactor: number;\n\tprivate scaleYFactor: number;\n\tprivate object3D: Object3D;\n\t\n\t// contains indexes of free candles\n\tprivate freeCandlesInds: number[] = [];\n\tprivate candlesPool: CandleWidget[] = [];\n\tprivate candles: {[segmentId: number]: CandleWidget} = {};\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.CANDLE;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.initObject();\n\t}\n\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroyCandles();\n\t\t\tthis.setupCandles();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupCandles();\n\t\t}));\n\t}\n\t\n\tprivate initObject() {\n\t\tlet stateData = this.chart.state;\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = stateData.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = stateData.yAxis.range;\n\t\tthis.scaleXFactor = scaleXFactor;\n\t\tthis.scaleYFactor = scaleYFactor;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.object3D.frustumCulled = false;\n\t\tfor (let i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t\tthis.setupCandles();\n\t}\n\n\tprivate setupCandles() {\n\n\t\t// remove invisible\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.candles) {\n\t\t\tlet segment = this.candles[segmentId].segment;\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupCandle(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t}\n\n\tprivate destroyCandles() {\n\t\tfor (let segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t}\n\n\tprivate destroyCandle(segmentId: number) {\n\t\tlet candle = this.candles[segmentId];\n\t\tthis.object3D.remove(candle.getObject3D());\n\t\tdelete this.candles[segmentId];\n\t}\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.object3D.scale;\n\t\tif (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t}\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.candles[segmentId]) continue;\n\t\t\tlet segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t\t\tthis.setupCandle(segmentId, segmentState);\n\t\t}\n\t}\n\n\t/**\n\t * create or modify candle\n\t */\n\tprivate setupCandle(candleId: number, segmentState: ITrendSegmentState) {\n\t\tlet candleInd = candleId % MAX_CANDLES;\n\n\t\t// get candle from candlesPool to avoid creating new Objects by performance reasons\n\t\tlet candle = this.candlesPool[candleInd];\n\t\tif (!candle) {\n\t\t\tcandle = this.candlesPool[candleInd] = new CandleWidget();\n\t\t}\n\n\t\tif (!this.candles[candleId]) {\n\t\t\tthis.candles[candleId] = candle;\n\t\t\tthis.object3D.add(candle.getObject3D());\n\t\t}\n\t\tcandle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t\tcandle.setSegment(segmentState);\n\t}\n\n\ttoLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\ttoLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\ttoLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\nclass CandleWidget {\n\tsegment: ITrendSegmentState;\n\tprivate rect: Mesh;\n\tprivate vLine: Line;\n\tprivate hLine: Line;\n\tconstructor () {\n\t\tthis.initObject();\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.rect;\n\t}\n\n\tsetSegment(segment: ITrendSegmentState) {\n\t\tthis.segment = segment;\n\t\tlet color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\n\t\t// update rect\n\t\tlet geometry = this.rect.geometry as PlaneGeometry;\n\t\tlet material = this.rect.material as MeshBasicMaterial;\n\t\tlet width = segment.endXVal - segment.startXVal;\n\t\twidth -= width * MARGIN_PERCENT;\n\t\tlet height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t\tlet [leftTop, rightTop, leftBottom, rightBottom] = geometry.vertices;\n\t\tleftTop.set(-width / 2, height / 2, 0);\n\t\trightTop.set(width / 2, height / 2, 0);\n\t\tleftBottom.set(-width / 2, -height / 2, 0);\n\t\trightBottom.set(width / 2, -height / 2, 0);\n\n\t\t// prevent to draw bars with height < 1px\n\t\tif (Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t\t\tleftBottom.setY(leftBottom.y + 1);\n\t\t\trightBottom.setY(rightBottom.y + 1);\n\t\t}\n\n\t\tmaterial.color.set(color);\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\t// update lines\n\t\tlet vLineGeometry = this.vLine.geometry as Geometry;\n\t\tlet vLineMaterial = this.vLine.material as LineBasicMaterial;\n\t\tlet lineTop = segment.maxYVal - segment.yVal;\n\t\tlet lineBottom = segment.minYVal - segment.yVal;\n\t\tvLineGeometry.vertices[0].set(0, lineTop, 0);\n\t\tvLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t\tvLineMaterial.color.set(color);\n\t\tvLineGeometry.verticesNeedUpdate = true;\n\n\t\tlet hLineGeometry = this.hLine.geometry as Geometry;\n\t\tlet hLineMaterial = this.hLine.material as LineBasicMaterial;\n\t\tlet lineLeft = (-width) / 2;\n\t\tlet lineRight = width / 2;\n\t\thLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t\thLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t\thLineMaterial.color.set(color);\n\t\thLineGeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate initObject() {\n\t\tthis.rect = new Mesh(\n\t\t\tnew PlaneGeometry(1, 1),\n\t\t\tnew MeshBasicMaterial()\n\t\t);\n\t\tlet vLineGeometry = new Geometry();\n\t\tlet hLineGeometry = new Geometry();\n\t\tvLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\thLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\tthis.vLine = new Line(vLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.hLine = new Line(hLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.rect.add(this.vLine);\n\t\tthis.rect.add(this.hLine);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsCandleWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Vector3 = THREE.Vector3;\nimport {Utils} from \"../Utils\";\nimport Line = THREE.Line;\nimport Mesh = THREE.Mesh;\nimport Texture = THREE.Texture;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport {AxisMark, AxisMarks} from \"../AxisMarks\";\nimport {AXIS_TYPE} from \"../interfaces\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { Color } from '../Color';\n\n\n/**\n * widget for shows marks on axis\n */\nexport class AxisMarksWidget extends ChartWidget {\n\tstatic widgetName = 'AxisMarks';\n\n\tprivate object3D: Object3D;\n\tprivate axisMarksWidgets: AxisMarkWidget[] = [];\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tlet {xAxisMarks, yAxisMarks} = this.chart;\n\n\t\tlet items = xAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t\titems = yAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprivate createAxisMark(axisMark: AxisMark) {\n\t\tvar axisMarkWidget = new AxisMarkWidget(this.chart, axisMark);\n\t\tthis.axisMarksWidgets.push(axisMarkWidget);\n\t\tthis.object3D.add(axisMarkWidget.getObject3D());\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.bindEvent(\n\t\t\tthis.chart.screen.onTransformationFrame(() => this.updateMarksPositions()),\n\t\t\tthis.chart.onResize(() => this.updateMarksPositions())\n\t\t);\n\t}\n\n\tprivate updateMarksPositions() {\n\t\tfor (let widget of this.axisMarksWidgets) widget.updatePosition();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n}\n\n\n\nconst DEFAULT_INDICATOR_RENDER_FUNCTION = (axisMarkWidget: AxisMarkWidget, ctx: CanvasRenderingContext2D) => {\n\tvar axisMark = axisMarkWidget.axisMark;\n\tctx.fillStyle = axisMark.options.lineColor;\n\tctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\tlet xCoord = 15;\n\n\tif (axisMark.axisType == AXIS_TYPE.Y) {\n\t\tctx.textAlign = 'end';\n\t\txCoord = axisMarkWidget.indicatorWidth;\n\t}\n\n\tctx.fillText(axisMark.options.title, xCoord, 20);\n\tif (!axisMark.options.showValue) return;\n\n\tctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n\tctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n};\n\nlet INDICATOR_POS_Z = 0.1;\n\nclass AxisMarkWidget {\n\tstatic typeName = 'simple';\n\taxisMark: AxisMark;\n\tindicatorWidth = 128;\n\tindicatorHeight = 64;\n\tprotected indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\tprotected chartState: Chart;\n\tprotected axisType: AXIS_TYPE;\n\tprotected object3D: Object3D;\n\tprotected line: Line;\n\tprotected indicator: Mesh;\n\tprotected moveAnimation: TweenLite;\n\tprotected frameValue: number;\n\t\n\n\tconstructor(chartState: Chart, axisMark: AxisMark) {\n\t\tthis.chartState = chartState;\n\t\tthis.axisMark = axisMark;\n\t\tthis.axisType = axisMark.axisType;\n\t\tthis.frameValue = axisMark.options.value;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.position.setZ(-0.1);\n\n\t\tthis.line = this.createLine();\n\t\tthis.object3D.add(this.line);\n\t\tthis.indicator = this.createIndicator();\n\t\tthis.object3D.add(this.indicator);\n\t\tthis.renderIndicator();\n\t\tthis.updatePosition();\n\t\tthis.bindEvents();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected createLine(): Line {\n\t\tvar {lineWidth, lineColor} = this.axisMark.options;\n\t\tvar lineGeometry = new Geometry();\n\n\t\tlineGeometry.vertices.push(new Vector3(0,0,0), new Vector3(0,0,0));\n\t\treturn new Line(\n\t\t\tlineGeometry,\n\t\t\tnew LineBasicMaterial( { color: new Color(lineColor).value, linewidth: lineWidth})\n\t\t);\n\t}\n\n\tprotected createIndicator(): Mesh {\n\t\tvar {indicatorWidth: width, indicatorHeight: height} = this;\n\t\tvar texture = Utils.createNearestTexture(width, height, (ctx) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.font = \"10px Arial\";\n\t\t});\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\treturn new Mesh(\n\t\t\tnew THREE.PlaneGeometry(width, height),\n\t\t\tmaterial\n\t\t);\n\t}\n\n\tprotected renderIndicator() {\n\t\tvar texture = (this.indicator.material as MeshBasicMaterial).map as Texture;\n\t\tvar ctx = (texture.image as HTMLCanvasElement).getContext('2d');\n\t\tDEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.axisMark.onDisplayedValueChange(() => this.renderIndicator());\n\t\tthis.axisMark.onValueChange(() => this.onValueChangeHandler());\n\t}\n\n\tprivate onValueChangeHandler() {\n\t\t// move mark to new position with animation\n\t\tif (this.moveAnimation) this.moveAnimation.kill();\n\t\tvar animations = this.chartState.state.animations;\n\t\tvar targetValue = this.axisMark.options.value;\n\t\tvar cb = () => {\n\t\t\tthis.updatePosition();\n\t\t};\n\t\tif (animations.enabled) {\n\t\t\tthis.moveAnimation = TweenLite.to(\n\t\t\t\tthis, animations.trendChangeSpeed,\n\t\t\t\t{frameValue: targetValue, ease: animations.trendChangeEase}\n\t\t\t);\n\t\t\tthis.moveAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.frameValue = targetValue;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tupdatePosition()  {\n\t\tlet chartState = this.chartState;\n\t\tlet screen = chartState.screen;\n\t\tlet isXAxis = this.axisType == AXIS_TYPE.X;\n\t\tlet lineGeometry = (this.line.geometry as Geometry);\n\t\tlet hasStickMode = this.axisMark.options.stickToEdges;\n\t\tlet {width, height} = this.chartState.state;\n\n\t\tif (isXAxis) {\n\t\t\t// TODO: make stickToEdges mode for AXIS_TYPE.X \n\t\t\tthis.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\tlineGeometry.vertices[1].setY(height);\n\t\t\tthis.indicator.position.set(\n\t\t\t\tthis.indicatorWidth / 2,\n\t\t\t\tchartState.state.height - this.indicatorHeight / 2,\n\t\t\t\tINDICATOR_POS_Z\n\t\t\t);\n\t\t} else {\n\t\t\tlet val = this.frameValue;\n\t\t\tlet bottomVal = screen.getBottomVal();\n\t\t\tlet topVal = screen.getTopVal();\n\t\t\tlet needToStickOnTop = hasStickMode && val > topVal;\n\t\t\tlet needToStickOnBottom = hasStickMode && val < bottomVal;\n\t\t\tlet centerYVal = screen.getCenterYVal();\n\t\t\tthis.object3D.position.x = screen.getLeft();\n\t\t\tif (needToStickOnTop) {\n\t\t\t\tthis.object3D.position.y = screen.getTop();\n\t\t\t} else if (needToStickOnBottom) {\n\t\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\t} else {\n\t\t\t\tthis.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t\t\t}\n\t\t\tlineGeometry.vertices[1].setX(width);\n\n\t\t\tlet indicatorPosY = val > centerYVal ? -35 : 10;\n\t\t\tthis.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t\t}\n\t\tlineGeometry.verticesNeedUpdate = true;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisMarksWidget.ts\n **/","export * from './AxisWidget';\nexport * from './GridWidget';\nexport * from './TrendsWidget';\nexport * from './TrendsLineWidget';\nexport * from './TrendsGradientWidget';\n\n// TODO: remove\nexport * from './AxisMarksWidget';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/index.ts\n **/"],"sourceRoot":""}