{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///demoApp.js","webpack:///webpack/bootstrap f6b679f896d1888d36a0?87cf","webpack:///./demo/demoApp.ts","webpack:///./src/index.ts?eac3","webpack:///./src/ChartView.ts?958f","webpack:///./src/Plugin.ts?e59a","webpack:///./src/Utils.ts?fbb5","webpack:///./src/deps/deps.ts?8fcc","webpack:///./~/three/examples/js/libs/stats.min.js?9b50","webpack:///./~/is-plain-object/index.js?2af1","webpack:///./~/isobject/index.js?cf96","webpack:///./~/eventemitter2/lib/eventemitter2.js?847a","webpack:///./src/polyfills/es6-promise.js?de39","webpack:///./~/css-element-queries/src/ResizeSensor.js?9f87","webpack:///./src/EventEmmiter.ts?e60a","webpack:///./src/Chart.ts?8278","webpack:///./src/Trend.ts?84c2","webpack:///./src/TrendSegmentsManager.ts?2220","webpack:///./src/TrendsManager.ts?c94d","webpack:///./src/Screen.ts?9286","webpack:///./src/AxisMarks.ts?f3fd","webpack:///./src/interfaces.ts?f1fb","webpack:///./src/Widget.ts?d904","webpack:///./src/widgets/AxisWidget.ts?5f76","webpack:///./src/widgets/GridWidget.ts?61b2","webpack:///./src/Color.ts?1948","webpack:///./src/widgets/TrendsGradientWidget.ts?4409","webpack:///./src/widgets/TrendsWidget.ts?6f55","webpack:///./src/widgets/TrendsLineWidget.ts?d378","webpack:///./src/widgets/TrendsCandleWidget.ts?9d04","webpack:///./src/deps/index.ts?3285","webpack:///./src/widgets/AxisMarksWidget.ts?4b9b","webpack:///./src/widgets/index.ts?2583"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","src_1","chart","DataSourse","data","sec","val","startTime","Date","now","push","xVal","yVal","Math","random","endTime","length","prototype","getData","Utils","deepCopy","getNext","lastVal","item","getPrev","firstVal","unshift","window","onload","initListeners","dsMain","dsRed","dsBlue","ChartView","yAxis","marks","value","name","title","lineColor","stickToEdges","range","padding","end","start","margin","zeroVal","xAxis","dataType","AXIS_DATA_TYPE","DATE","type","AXIS_RANGE_TYPE","FIXED","from","to","maxLength","minLength","showValue","trends","main","TREND_TYPE","LINE","dataset","hasBeacon","hasIndicator","hasBackground","showStats","trendDefaultState","settingsForTypes","minSegmentLengthInPx","document","querySelector","setState","animations","enabled","mainTrend","getTrend","deadlineMark","xAxisMarks","getItem","closeMark","onDataChange","closeValue","options","getLastItem","setOptions","i","onPrependRequest","requestedLength","resolve","reject","responseData","ticksCount","round","setTimeout","setInterval","appendData","$checkboxMaintrend","addEventListener","checked","$checkboxRedtrend","red","$checkboxBluetrend","blue","$switchLineBtn","$switchBarsBtn","CANDLE","currentRange","state","timeframeButtons","querySelectorAll","Number","getAttribute","segmentLength","autoScroll","zoomToRange","scrollToEnd","then","__export","hasOwnProperty","__extends","d","b","__","constructor","Object","create","Plugin_1","PerspectiveCamera","THREE","Chart_1","Widget_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsGradientWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","deps_1","Color_1","AxisMarksWidget_1","ChartBlankView","$container","pluginsAndWidgets","_this","widgets","REVISION","error","style","getComputedStyle","width","parseInt","height","plugins","filter","pluginOrWidget","ChartPlugin","Chart","zoomThrottled","throttle","zoomValue","origin","zoom","init","_a","w","h","autoRender","scene","Scene","isStopped","renderer","renderers","antialias","alpha","backgroundColor","ChartColor","setSize","setPixelRatio","devicePixelRatio","setClearColor","a","appendChild","domElement","$el","display","stats","Stats","setupCamera","initWidgets","bindEvents","renderLoop","preinstalledWidgetsClasses","preinstalledWidgets","customWidgets","forEach","ChartWidget","pluginWidgetClasses","providedWidgets","apply","concat","map","WidgetClass","widget","setupChart","onReadyHandler","add","getObject3D","isDestroyed","begin","render","fpsLimit","fps","delay_1","requestAnimationFrame","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","trendName","controls","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","oldTrendsMaxX","prevState","computedData","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","min","max","autoScrollIsEnabled","CanvasRenderer","WebGLRenderer","_super","arguments","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsGradientWidget","AxisMarksWidget","EventEmmiter_1","DEFAULT_CONFIG","installPluginWidgets","config","initialState","deepMerge","NAME","ee","EventEmitter","bindEvent","onInitialStateApplied","onInitialStateAppliedHandler","onReady","onDestroy","onDestroyHandler","onPluginsStateChange","changedPluginsStates","onStateChanged","getOptions","pluginsState","changedState","removeAllListeners","args","_i","Array","isArray","unsubscriber","deepmerge","target","src","mergeArrays","array","dst","indexOf","keys","key","obj1","obj2","obj","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","floor","intStr","toString","lengthDiff","repeat","afterPointDigitsCount","afterPointStr","split","substr","createTexture","fn","canvas","createElement","ctx","getContext","texture","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","console","warn","getUid","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","copyProps","srcObject","dstObject","props","excludeProps","isPlainObject","TweenLite","TweenMax","EE2","es6_promise_1","Promise","dom","k","children","l","cssText","g","performance","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","u","n","q","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","isObject","isObjectObject","o","ctor","prot","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_isArray","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","**","growListenerTree","listener","slice","shift","warned","trace","setMaxListeners","event","once","many","ttl","Error","off","_origin","on","emit","_all","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","listenersAny","EventEmitter2","element","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","expand","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","el","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","eventName","subscribe","listenersCount","Vector3","Trend_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","LIGHT_BLUE","ALL","NUMBER","grid","minSizePx","color","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","scrollSpeed","scrollEase","Linear","easeNone","autoScrollSpeed","autoScrollEase","maxSegmentLength","lineWidth","maxSegmentLengthInPx","eventEmitterMaxListeners","maxVisibleSegments","isReady","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","onChange","onTrendChange","onZoom","newState","eventData","silent","stateData","newStateObj","changedProps","trendsData","trendOptions","newStateContainsData","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","rangeLessThenMinValue","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","abs","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","nextRange","newScroll","animationTime","endXVal","getPointOnXAxis","getPointOnYAxis","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","TrendSegmentsManager_1","EVENTS","PREPEND_REQUEST","Trend","chartState","minYVal","maxYVal","prepareData","segmentsManager","TrendSegmentsManager","checkForPrependRequest","changedOptions","getCalculatedOptions","rawData","updatedTrendData","changeData","prependData","allData","newData_1","statePatch","fromX","toX","filteredData","data_1","getFirstItem","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","trend","segmentsById","segments","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getSegment","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","currentSegmentLengthInPx","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","firstDisplayedSegmentInd","lastDisplayedSegmentInd","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","valueInPoint","onAnimationFrame","onRebuild","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","needRebuildSegments","trendData","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","complete","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","prevPoint","getFrameVal","getFramePoint","frameVal","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getEnabledTrends","enabledTrends","allTrends","firstTrendData","getExtremumYVal","extremumIsMax","compareFn","trends_1","trendYValues","dataItem","NaN","onSegmentsRebuilded","_loop_1","this_1","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","transform","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","AXIS_MARK_DEFAULT_OPTIONS","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","unbindList","unbindEvent","widgetName","Mesh","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","axisOptions","traverse","beginPath","rgbaStr","strokeStyle","material","MeshBasicMaterial","side","FrontSide","transparent","axisMesh","PlaneGeometry","axisGridParams","getGridParamsForAxis","geometry","parameters","image","clearRect","edgeOffset","segmentsCount","step","pxVal","textAlign","getDateStr","stroke","closePath","gridParams","hour","day","tf","getHours","getMinutes","getSeconds","LineSegments","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","Geometry","LineBasicMaterial","linewidth","opacity","xLinesCount","yLinesCount","vertices","lineSegments","setZ","frustumCulled","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","scale","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","parseColor","cache","replace","exec","isNaN","colorStr","rgba","hexStr","TrendsWidget_1","getTrendWidgetClass","TrendGradient","TrendsWidget","visibleSegmentsCnt","segmentsIds","Uint16Array","initGradient","updateSegments","widgetIsEnabled","gradient","faces","Face3","scaleXFactor","scaleYFactor","currentScale","onSegmentsAnimate","trendSegmentsManager","includes","setupSegmentVertices","segmentInd","prevVisibleSegmentsCnt","segmentsToProcessCnt","segmentState","gradientSegmentInd","topLeft","bottomLeft","bottomRight","topRight","screenHeightVal","startX","toLocalX","startY","toLocalY","endX","endY","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","WidgetConstructor","widgetObject","getObjectByName","unbind","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","segmentIsNotDisplayed","destroySegment","setupSegment","pop","lineStartVertex","lineEndVertex","toLocalVec","vec","Line","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","initObject","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","updatePosition","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","line","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY"],"mappings":"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","file":"demoApp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar src_1 = __webpack_require__(1);\r\n\t// import { ChartView, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from 'three-charts';\r\n\t// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/TrendsMarksPlugin';\r\n\t// import { TrendsBeaconWidget } from '../plugins/build/TrendsBeaconWidget';\r\n\t// import { TrendsLoadingWidget } from '../plugins/build/TrendsLoadingWidget';\r\n\t// import { TrendsIndicatorWidget } from '../plugins/build/TrendsIndicatorWidget';\r\n\t// ChartView.preinstalledWidgets.push(TrendsLoadingWidget, TrendsBeaconWidget, TrendsIndicatorWidget);\r\n\tvar chart;\r\n\tvar DataSourse = (function () {\r\n\t    function DataSourse() {\r\n\t        this.data = [];\r\n\t        var sec = 0;\r\n\t        var val = 70;\r\n\t        this.startTime = Date.now();\r\n\t        while (sec < 100) {\r\n\t            this.data.push({\r\n\t                xVal: this.startTime + sec * 1000,\r\n\t                yVal: val\r\n\t            });\r\n\t            val += Math.random() * 14 - 7;\r\n\t            sec++;\r\n\t        }\r\n\t        this.endTime = this.data[this.data.length - 1].xVal;\r\n\t    }\r\n\t    DataSourse.prototype.getData = function () {\r\n\t        return src_1.Utils.deepCopy(this.data);\r\n\t    };\r\n\t    DataSourse.prototype.getNext = function () {\r\n\t        var lastVal = this.data[this.data.length - 1];\r\n\t        var yVal = lastVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.endTime + 1000;\r\n\t        this.endTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.push(item);\r\n\t        return item;\r\n\t    };\r\n\t    DataSourse.prototype.getPrev = function () {\r\n\t        var firstVal = this.data[0];\r\n\t        var yVal = firstVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.startTime - 1000;\r\n\t        this.startTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.unshift(item);\r\n\t        return item;\r\n\t    };\r\n\t    return DataSourse;\r\n\t}());\r\n\t// class MarksSource {\r\n\t// \tstatic getNext(val: number): ITrendMarkOptions {\r\n\t// \t\tif (Math.random() > 0.2) return null;\r\n\t// \t\treturn this.generate(val);\r\n\t// \t}\r\n\t//\r\n\t// \tstatic generate(val: number): ITrendMarkOptions {\r\n\t// \t\tlet descriptionColor = 'rgb(40,136,75)';\r\n\t// \t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\r\n\t// \t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\r\n\t// \t\t\tdescriptionColor = 'rgb(219,73,49)';\r\n\t// \t\t}\r\n\t//\r\n\t// \t\treturn {\r\n\t// \t\t\ttrendName: 'main',\r\n\t// \t\t\tvalue: val,\r\n\t// \t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\r\n\t// \t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\r\n\t// \t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\r\n\t// \t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\r\n\t// \t\t\torientation: orientation,\r\n\t// \t\t\tdescriptionColor: descriptionColor\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\twindow.onload = function () {\r\n\t    initListeners();\r\n\t    var dsMain = new DataSourse();\r\n\t    var dsRed = new DataSourse();\r\n\t    var dsBlue = new DataSourse();\r\n\t    var now = Date.now();\r\n\t    chart = new src_1.ChartView({\r\n\t        yAxis: {\r\n\t            marks: [\r\n\t                { value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true },\r\n\t            ],\r\n\t            range: {\r\n\t                padding: { end: 100, start: 100 },\r\n\t                margin: { end: 50, start: 50 },\r\n\t                zeroVal: 70\r\n\t            }\r\n\t        },\r\n\t        xAxis: {\r\n\t            //range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\r\n\t            dataType: src_1.AXIS_DATA_TYPE.DATE,\r\n\t            range: {\r\n\t                type: src_1.AXIS_RANGE_TYPE.FIXED,\r\n\t                from: Date.now(),\r\n\t                to: Date.now() + 20000,\r\n\t                padding: { end: 200, start: 0 },\r\n\t                maxLength: 5000000,\r\n\t                minLength: 5000\r\n\t            },\r\n\t            marks: [\r\n\t                { value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true },\r\n\t                { value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true }\r\n\t            ]\r\n\t        },\r\n\t        trends: {\r\n\t            'main': {\r\n\t                type: src_1.TREND_TYPE.LINE,\r\n\t                dataset: dsMain.getData(),\r\n\t                hasBeacon: true,\r\n\t                hasIndicator: true,\r\n\t                hasBackground: true,\r\n\t            },\r\n\t        },\r\n\t        showStats: true,\r\n\t        // autoRender: {fps: 100},\r\n\t        // animations: {enabled: false},\r\n\t        trendDefaultState: {\r\n\t            settingsForTypes: {\r\n\t                LINE: {\r\n\t                    minSegmentLengthInPx: 10\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }, document.querySelector('.chart'));\r\n\t    chart.setState({ animations: { enabled: false } });\r\n\t    chart.setState({ animations: { enabled: true } });\r\n\t    window['chart'] = chart;\r\n\t    var mainTrend = chart.getTrend('main');\r\n\t    var deadlineMark = chart.chart.xAxisMarks.getItem('deadline');\r\n\t    var closeMark = chart.chart.xAxisMarks.getItem('close');\r\n\t    mainTrend.onDataChange(function () {\r\n\t        var closeValue = closeMark.options.value;\r\n\t        if (mainTrend.getLastItem().xVal >= closeValue) {\r\n\t            deadlineMark.setOptions({ value: closeValue + 10000 });\r\n\t            closeMark.setOptions({ value: closeValue + 20000 });\r\n\t        }\r\n\t        // var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\r\n\t        // if (markOptions) setTimeout(() => {\r\n\t        // \tlet trendsMarks = state.state.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\r\n\t        // \ttrendsMarks.createMark(markOptions);\r\n\t        // }, 500);\r\n\t    });\r\n\t    // var previewChart1 = ChartView.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-state')[0],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.state, hasBeacon: true}\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart2 = ChartView.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-state')[1],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.state, hasBeacon: true}\r\n\t    // \t},\r\n\t    //\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart3 = ChartView.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-state')[2],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.state, hasBeacon: true},\r\n\t    // \t\t'red': {dataset: dsRed.state, lineColor: 0xFF2222},\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    var i = 0;\r\n\t    chart.getTrend('main').onPrependRequest(function (requestedLength, resolve, reject) {\r\n\t        var responseData = [];\r\n\t        var ticksCount = Math.round(requestedLength / 1000);\r\n\t        while (ticksCount--)\r\n\t            responseData.unshift(dsMain.getPrev());\r\n\t        setTimeout(function () {\r\n\t            resolve(responseData);\r\n\t        }, 2000);\r\n\t    });\r\n\t    setInterval(function () {\r\n\t        i++;\r\n\t        var val = dsMain.getNext();\r\n\t        // [i % 2 ? 10 : 20]\r\n\t        chart.getTrend('main').appendData([val]);\r\n\t        // state.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\r\n\t        // state.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // state.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // state.getTrend('red').appendData([val + 10 + Math.random() * 20]);\r\n\t        // state.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.getTrend('main').appendData([val]);\r\n\t        // previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\r\n\t        // previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.appendData(dataToAppend1);\r\n\t        //\r\n\t        // var chartData2 = previewChart2.state.state.trends[0].state;\r\n\t        // var lastItem2 = chartData2[chartData.length - 1];\r\n\t        // var dataToAppend2 = [\r\n\t        // \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\r\n\t        // ];\r\n\t        // previewChart2.appendData(dataToAppend2);\r\n\t        // previewChart3.appendData(dataToAppend2);\r\n\t    }, 1000);\r\n\t};\r\n\tfunction initListeners() {\r\n\t    var $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]');\r\n\t    $checkboxMaintrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { main: { enabled: $checkboxMaintrend.checked } } });\r\n\t    });\r\n\t    var $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]');\r\n\t    $checkboxRedtrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { red: { enabled: $checkboxRedtrend.checked } } });\r\n\t    });\r\n\t    var $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]');\r\n\t    $checkboxBluetrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { blue: { enabled: $checkboxBluetrend.checked } } });\r\n\t    });\r\n\t    var $switchLineBtn = document.querySelector('[name=\"switch-line\"]');\r\n\t    $switchLineBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: src_1.TREND_TYPE.LINE });\r\n\t    });\r\n\t    var $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]');\r\n\t    $switchBarsBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: src_1.TREND_TYPE.CANDLE });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-left\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.chart.state.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { from: currentRange.from - 2000 } } });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-right\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.chart.state.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { to: currentRange.to + 2000 } } });\r\n\t    });\r\n\t    var timeframeButtons = document.querySelectorAll(\".timeframe\");\r\n\t    for (var i = 0; i < timeframeButtons.length; i++) {\r\n\t        timeframeButtons[i].addEventListener(\"click\", function () {\r\n\t            var range = Number(this.getAttribute('data-range'));\r\n\t            var segmentLength = Number(this.getAttribute('data-segment-length'));\r\n\t            chart.chart.setState({ autoScroll: false });\r\n\t            chart.chart.zoomToRange(range);\r\n\t            chart.chart.scrollToEnd().then(function () {\r\n\t                chart.chart.setState({ autoScroll: true });\r\n\t            });\r\n\t        });\r\n\t    }\r\n\t}\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(2));\r\n\t__export(__webpack_require__(19));\r\n\t__export(__webpack_require__(18));\r\n\t__export(__webpack_require__(17));\r\n\t__export(__webpack_require__(13));\r\n\t__export(__webpack_require__(14));\r\n\t__export(__webpack_require__(15));\r\n\t__export(__webpack_require__(16));\r\n\t__export(__webpack_require__(4));\r\n\t__export(__webpack_require__(20));\r\n\t__export(__webpack_require__(3));\r\n\t__export(__webpack_require__(23));\r\n\t__export(__webpack_require__(30));\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\t// deps must be always on top\r\n\tvar Plugin_1 = __webpack_require__(3);\r\n\t__webpack_require__(5);\r\n\tvar PerspectiveCamera = THREE.PerspectiveCamera;\r\n\tvar Chart_1 = __webpack_require__(13);\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar AxisWidget_1 = __webpack_require__(21);\r\n\tvar GridWidget_1 = __webpack_require__(22);\r\n\tvar TrendsGradientWidget_1 = __webpack_require__(24);\r\n\tvar TrendsLineWidget_1 = __webpack_require__(26);\r\n\tvar TrendsCandleWidget_1 = __webpack_require__(27);\r\n\tvar deps_1 = __webpack_require__(28);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\tvar AxisMarksWidget_1 = __webpack_require__(29);\r\n\tvar ChartBlankView = (function () {\r\n\t    function ChartBlankView(state, $container, pluginsAndWidgets) {\r\n\t        var _this = this;\r\n\t        if (pluginsAndWidgets === void 0) { pluginsAndWidgets = []; }\r\n\t        this.widgets = [];\r\n\t        if (!THREE || !THREE.REVISION)\r\n\t            Utils_1.Utils.error('three.js not found');\r\n\t        if (!$container) {\r\n\t            Utils_1.Utils.error('$el must be set');\r\n\t        }\r\n\t        // calculate state size\r\n\t        var style = getComputedStyle($container);\r\n\t        state.width = parseInt(style.width);\r\n\t        state.height = parseInt(style.height);\r\n\t        var plugins = pluginsAndWidgets.filter(function (pluginOrWidget) { return pluginOrWidget instanceof Plugin_1.ChartPlugin; });\r\n\t        this.chart = new Chart_1.Chart(state, plugins);\r\n\t        this.pluginsAndWidgets = pluginsAndWidgets;\r\n\t        this.zoomThrottled = Utils_1.Utils.throttle(function (zoomValue, origin) { return _this.zoom(zoomValue, origin); }, 200);\r\n\t        this.$container = $container;\r\n\t        this.init($container);\r\n\t    }\r\n\t    ;\r\n\t    ChartBlankView.prototype.init = function ($container) {\r\n\t        var chart = this.chart;\r\n\t        var _a = chart.state, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\r\n\t        this.scene = new THREE.Scene();\r\n\t        this.isStopped = !autoRender.enabled;\r\n\t        var renderer = this.renderer = new ChartView.renderers[this.chart.state.renderer]({\r\n\t            antialias: true,\r\n\t            alpha: true\r\n\t        });\r\n\t        var backgroundColor = new Color_1.ChartColor(chart.state.backgroundColor);\r\n\t        renderer.setSize(w, h);\r\n\t        renderer.setPixelRatio(ChartView.devicePixelRatio);\r\n\t        renderer.setClearColor(backgroundColor.value, backgroundColor.a);\r\n\t        $container.appendChild(renderer.domElement);\r\n\t        this.$el = renderer.domElement;\r\n\t        this.$el.style.display = 'block';\r\n\t        if (showStats) {\r\n\t            this.stats = new Stats();\r\n\t            $container.appendChild(this.stats.domElement);\r\n\t        }\r\n\t        this.setupCamera();\r\n\t        this.initWidgets();\r\n\t        this.bindEvents();\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\r\n\t     */\r\n\t    ChartBlankView.prototype.initWidgets = function () {\r\n\t        var _this = this;\r\n\t        var preinstalledWidgetsClasses = this.constructor.preinstalledWidgets;\r\n\t        var customWidgets = [];\r\n\t        this.pluginsAndWidgets.forEach(function (pluginOrWidget) {\r\n\t            if (pluginOrWidget instanceof Widget_1.ChartWidget) {\r\n\t                customWidgets.push(pluginOrWidget);\r\n\t                return;\r\n\t            }\r\n\t            if (!(pluginOrWidget instanceof Plugin_1.ChartPlugin))\r\n\t                return;\r\n\t            var pluginWidgetClasses = pluginOrWidget.constructor.providedWidgets;\r\n\t            preinstalledWidgetsClasses.push.apply(preinstalledWidgetsClasses, pluginWidgetClasses);\r\n\t        });\r\n\t        this.widgets = customWidgets.concat(preinstalledWidgetsClasses.map(function (WidgetClass) { return new WidgetClass(); }));\r\n\t        this.widgets.forEach(function (widget) {\r\n\t            widget.setupChart(_this.chart);\r\n\t            widget.onReadyHandler();\r\n\t            _this.scene.add(widget.getObject3D());\r\n\t        });\r\n\t    };\r\n\t    ChartBlankView.prototype.renderLoop = function () {\r\n\t        var _this = this;\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        this.stats && this.stats.begin();\r\n\t        this.render();\r\n\t        if (this.isStopped)\r\n\t            return;\r\n\t        var fpsLimit = this.chart.state.autoRender.fps;\r\n\t        if (fpsLimit) {\r\n\t            var delay_1 = 1000 / fpsLimit;\r\n\t            setTimeout(function () { return requestAnimationFrame(function () { return _this.renderLoop(); }); }, delay_1);\r\n\t        }\r\n\t        else {\r\n\t            requestAnimationFrame(function () { return _this.renderLoop(); });\r\n\t        }\r\n\t        this.stats && this.stats.end();\r\n\t    };\r\n\t    ChartBlankView.prototype.render = function () {\r\n\t        this.renderer.render(this.scene, this.camera);\r\n\t    };\r\n\t    ChartBlankView.prototype.stop = function () {\r\n\t        this.isStopped = true;\r\n\t    };\r\n\t    ChartBlankView.prototype.run = function () {\r\n\t        this.isStopped = false;\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * call to destroy state an init garbage collection\r\n\t     */\r\n\t    ChartBlankView.prototype.destroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.stop();\r\n\t        this.chart.destroy();\r\n\t        this.unbindEvents();\r\n\t        // WARNING! undocumented method for free webgl context\r\n\t        try {\r\n\t            this.renderer.forceContextLoss();\r\n\t        }\r\n\t        catch (wtf) {\r\n\t        }\r\n\t        this.renderer.context = null;\r\n\t        this.renderer.domElement = null;\r\n\t        this.renderer = null;\r\n\t    };\r\n\t    ChartBlankView.prototype.getState = function () {\r\n\t        return this.chart.state;\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.getTrend\r\n\t     */\r\n\t    ChartBlankView.prototype.getTrend = function (trendName) {\r\n\t        return this.chart.getTrend(trendName);\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.setState\r\n\t     */\r\n\t    ChartBlankView.prototype.setState = function (state) {\r\n\t        return this.chart.setState(state);\r\n\t    };\r\n\t    ChartBlankView.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var $el = this.$el;\r\n\t        if (this.chart.state.controls.enabled) {\r\n\t            $el.addEventListener('mousewheel', function (ev) {\r\n\t                _this.onMouseWheel(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousemove', function (ev) {\r\n\t                _this.onMouseMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousedown', function (ev) { return _this.onMouseDown(ev); });\r\n\t            $el.addEventListener('mouseup', function (ev) { return _this.onMouseUp(ev); });\r\n\t            $el.addEventListener('touchmove', function (ev) {\r\n\t                _this.onTouchMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('touchend', function (ev) {\r\n\t                _this.onTouchEnd(ev);\r\n\t            });\r\n\t        }\r\n\t        if (this.chart.state.autoResize) {\r\n\t            this.resizeSensor = new deps_1.ResizeSensor(this.$container, function () {\r\n\t                _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\r\n\t            });\r\n\t        }\r\n\t        this.unsubscribers = [\r\n\t            this.chart.onTrendsChange(function () { return _this.autoscroll(); }),\r\n\t            this.chart.screen.onTransformationFrame(function (options) { return _this.onScreenTransformHandler(options); }),\r\n\t            this.chart.onResize(function (options) { return _this.onChartResize(); })\r\n\t        ];\r\n\t    };\r\n\t    ChartBlankView.prototype.unbindEvents = function () {\r\n\t        // TODO: unbind events correctly\r\n\t        try {\r\n\t            this.resizeSensor && this.resizeSensor.detach();\r\n\t        }\r\n\t        catch (e) {\r\n\t        }\r\n\t        this.$el.remove();\r\n\t        this.unsubscribers.forEach(function (unsubscribe) { return unsubscribe(); });\r\n\t    };\r\n\t    ChartBlankView.prototype.setupCamera = function () {\r\n\t        var camSettings = this.chart.screen.getCameraSettings();\r\n\t        if (!this.camera) {\r\n\t            this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\r\n\t            this.scene.add(this.camera);\r\n\t        }\r\n\t        else {\r\n\t            this.camera.fov = camSettings.FOV;\r\n\t            this.camera.aspect = camSettings.aspect;\r\n\t            this.camera.far = camSettings.far;\r\n\t            this.camera.near = camSettings.near;\r\n\t            this.camera.updateProjectionMatrix();\r\n\t        }\r\n\t        this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\r\n\t        this.cameraInitialPosition = this.camera.position.clone();\r\n\t        this.onScreenTransformHandler(this.chart.screen.options);\r\n\t    };\r\n\t    ChartBlankView.prototype.onScreenTransformHandler = function (options) {\r\n\t        if (options.scrollX != void 0) {\r\n\t            var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\r\n\t            // scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setX(scrollX_1);\r\n\t        }\r\n\t        if (options.scrollY != void 0) {\r\n\t            var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\r\n\t            // scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setY(scrollY_1);\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.autoscroll = function () {\r\n\t        var state = this.chart;\r\n\t        if (!state.state.autoScroll)\r\n\t            return;\r\n\t        var oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\r\n\t        var trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\r\n\t        if (trendsMaxXDelta > 0) {\r\n\t            var maxVisibleX = this.chart.screen.getScreenRightVal();\r\n\t            var paddingRightX = this.chart.getPaddingRight();\r\n\t            var currentScroll = state.state.xAxis.range.scroll;\r\n\t            if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\r\n\t                return;\r\n\t            }\r\n\t            var scrollDelta = trendsMaxXDelta;\r\n\t            this.setState({ xAxis: { range: { scroll: currentScroll + scrollDelta } } });\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.onScrollStop = function () {\r\n\t        // var tendsXMax = this.state.state.computedData.trends.maxX;\r\n\t        // var paddingRightX = this.state.getPaddingRight();\r\n\t        // if (tendsXMax < paddingRightX) {\r\n\t        // \tthis.state.scrollToEnd();\r\n\t        // }\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseDown = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseUp = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseMove = function (ev) {\r\n\t        if (this.chart.state.cursor.dragMode) {\r\n\t            this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseWheel = function (ev) {\r\n\t        ev.stopPropagation();\r\n\t        ev.preventDefault();\r\n\t        var zoomOrigin = ev.layerX / this.chart.state.width;\r\n\t        var zoomValue = 1 + ev.wheelDeltaY * 0.001;\r\n\t        this.zoom(zoomValue, zoomOrigin);\r\n\t    };\r\n\t    ChartBlankView.prototype.onTouchMove = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onTouchEnd = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onChartContainerResizeHandler = function (width, height) {\r\n\t        this.setState({ width: width, height: height });\r\n\t    };\r\n\t    ChartBlankView.prototype.onChartResize = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height;\r\n\t        this.renderer.setSize(width, height);\r\n\t        this.setupCamera();\r\n\t    };\r\n\t    ChartBlankView.prototype.zoom = function (zoomValue, zoomOrigin) {\r\n\t        var _this = this;\r\n\t        var MAX_ZOOM_VALUE = 1.5;\r\n\t        var MIN_ZOOM_VALUE = 0.7;\r\n\t        zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\r\n\t        zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\r\n\t        var autoScrollIsEnabled = this.chart.state.autoScroll;\r\n\t        if (autoScrollIsEnabled)\r\n\t            this.chart.setState({ autoScroll: false });\r\n\t        this.chart.zoom(zoomValue, zoomOrigin).then(function () {\r\n\t            if (autoScrollIsEnabled)\r\n\t                _this.setState({ autoScroll: true });\r\n\t        });\r\n\t    };\r\n\t    ChartBlankView.devicePixelRatio = window.devicePixelRatio;\r\n\t    ChartBlankView.preinstalledWidgets = [];\r\n\t    ChartBlankView.renderers = {\r\n\t        CanvasRenderer: THREE.CanvasRenderer,\r\n\t        WebGLRenderer: THREE.WebGLRenderer\r\n\t    };\r\n\t    return ChartBlankView;\r\n\t}());\r\n\texports.ChartBlankView = ChartBlankView;\r\n\tvar ChartView = (function (_super) {\r\n\t    __extends(ChartView, _super);\r\n\t    function ChartView() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    ChartView.preinstalledWidgets = [\r\n\t        TrendsLineWidget_1.TrendsLineWidget,\r\n\t        TrendsCandleWidget_1.TrendsCandlesWidget,\r\n\t        AxisWidget_1.AxisWidget,\r\n\t        GridWidget_1.GridWidget,\r\n\t        TrendsGradientWidget_1.TrendsGradientWidget,\r\n\t        // TODO: remove AxisMarksWidget from preinstalled widgets\r\n\t        AxisMarksWidget_1.AxisMarksWidget\r\n\t    ];\r\n\t    return ChartView;\r\n\t}(ChartBlankView));\r\n\texports.ChartView = ChartView;\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\texports.DEFAULT_CONFIG = {\r\n\t    installPluginWidgets: true\r\n\t};\r\n\t/**\r\n\t * base class for all plugins\r\n\t * NAME is mandatory\r\n\t */\r\n\tvar ChartPlugin = (function () {\r\n\t    function ChartPlugin(options, config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        this.unsubscribers = [];\r\n\t        this.initialState = options;\r\n\t        this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\r\n\t        this.name = this.constructor.NAME;\r\n\t        if (!this.name)\r\n\t            Utils_1.Utils.error('Unnamed plugin detected');\r\n\t    }\r\n\t    ChartPlugin.prototype.setupChart = function (chart) {\r\n\t        var _this = this;\r\n\t        this.chart = chart;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvent(this.chart.onInitialStateApplied(function (initialState) { return _this.onInitialStateAppliedHandler(initialState); }), this.chart.onReady(function () { return _this.onReadyHandler(); }), this.chart.onDestroy(function () { return _this.onDestroyHandler(); }), this.chart.onPluginsStateChange(function (changedPluginsStates) { return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]); }));\r\n\t    };\r\n\t    ChartPlugin.prototype.getOptions = function () {\r\n\t        return this.chart.state.pluginsState[this.name];\r\n\t    };\r\n\t    ChartPlugin.prototype.onInitialStateAppliedHandler = function (initialState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onReadyHandler = function () {\r\n\t    };\r\n\t    ChartPlugin.prototype.onStateChanged = function (changedState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t    };\r\n\t    ChartPlugin.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unsubscribers = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unsubscribers.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unsubscribers.push.apply(unsubscribers, (args));\r\n\t        }\r\n\t        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartPlugin.prototype.unbindEvents = function () {\r\n\t        this.unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); });\r\n\t        this.unsubscribers.length = 0;\r\n\t    };\r\n\t    ChartPlugin.NAME = '';\r\n\t    ChartPlugin.providedWidgets = [];\r\n\t    return ChartPlugin;\r\n\t}());\r\n\texports.ChartPlugin = ChartPlugin;\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tfunction deepmerge(target, src, mergeArrays) {\r\n\t    if (mergeArrays === void 0) { mergeArrays = true; }\r\n\t    var array = Array.isArray(src);\r\n\t    var dst = array && [] || {};\r\n\t    if (array) {\r\n\t        target = target || [];\r\n\t        if (mergeArrays) {\r\n\t            dst = dst.concat(target);\r\n\t        }\r\n\t        src.forEach(function (e, i) {\r\n\t            if (typeof dst[i] === 'undefined') {\r\n\t                dst[i] = e;\r\n\t            }\r\n\t            else if (typeof e === 'object') {\r\n\t                dst[i] = deepmerge(target[i], e, mergeArrays);\r\n\t            }\r\n\t            else {\r\n\t                if (target.indexOf(e) === -1) {\r\n\t                    dst.push(e);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    else {\r\n\t        if (target && typeof target === 'object') {\r\n\t            Object.keys(target).forEach(function (key) {\r\n\t                dst[key] = target[key];\r\n\t            });\r\n\t        }\r\n\t        Object.keys(src).forEach(function (key) {\r\n\t            if (typeof src[key] !== 'object' || !src[key]) {\r\n\t                dst[key] = src[key];\r\n\t            }\r\n\t            else {\r\n\t                if (!target[key]) {\r\n\t                    dst[key] = src[key];\r\n\t                }\r\n\t                else {\r\n\t                    dst[key] = deepmerge(target[key], src[key], mergeArrays);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    return dst;\r\n\t}\r\n\t/**\r\n\t * project utils static class\r\n\t */\r\n\tvar Utils = (function () {\r\n\t    function Utils() {\r\n\t    }\r\n\t    /**\r\n\t     * deepMerge based on https://www.npmjs.com/package/deepmerge\r\n\t     */\r\n\t    Utils.deepMerge = function (obj1, obj2, mergeArrays) {\r\n\t        return deepmerge(obj1, obj2, mergeArrays);\r\n\t    };\r\n\t    /**\r\n\t     * deepCopy based on JSON.stringify function\r\n\t     * @deprecated\r\n\t     */\r\n\t    Utils.deepCopy = function (obj) {\r\n\t        // TODO: use deepMerge function to copy\r\n\t        return JSON.parse(JSON.stringify(obj));\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * @example\r\n\t     * // returns \"000015\"\r\n\t     * Utils.toFixed(15, 6);\r\n\t     */\r\n\t    Utils.toFixed = function (num, digitsCount) {\r\n\t        var maxDigits = 15;\r\n\t        var result = '';\r\n\t        var intVal = Math.floor(num);\r\n\t        var intStr = intVal.toString();\r\n\t        var lengthDiff = digitsCount - intStr.length;\r\n\t        if (lengthDiff > 0) {\r\n\t            result = '0'.repeat(lengthDiff) + intStr;\r\n\t        }\r\n\t        else {\r\n\t            result = intStr;\r\n\t        }\r\n\t        var afterPointDigitsCount = maxDigits - intStr.length;\r\n\t        var afterPointStr = num.toString().split('.')[1];\r\n\t        if (afterPointStr) {\r\n\t            result += '.' + afterPointStr.substr(0, afterPointDigitsCount);\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    Utils.bindEvent = function () {\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createTexture = function (width, height, fn) {\r\n\t        var canvas = document.createElement('canvas');\r\n\t        canvas.width = width;\r\n\t        canvas.height = height;\r\n\t        var ctx = canvas.getContext('2d');\r\n\t        fn(ctx);\r\n\t        var texture = new THREE.Texture(canvas);\r\n\t        texture.needsUpdate = true;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context with NearestFilter\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createPixelPerfectTexture = function (width, height, fn) {\r\n\t        var texture = this.createTexture(width, height, fn);\r\n\t        // texture.magFilter = THREE.NearestFilter;\r\n\t        texture.minFilter = THREE.NearestFilter;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.error = function (msg) {\r\n\t        console.error('Chart error: ' + msg);\r\n\t        throw 'Chart: ' + msg;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.warn = function (msg) {\r\n\t        console.warn('Chart warning: ' + msg);\r\n\t    };\r\n\t    /**\r\n\t     * @returns new unique id\r\n\t     */\r\n\t    Utils.getUid = function () {\r\n\t        return this.currentId++;\r\n\t    };\r\n\t    /**\r\n\t     * @returns distance between numbers\r\n\t     */\r\n\t    Utils.getDistance = function (num1, num2) {\r\n\t        return Math.max(num1, num2) - Math.min(num1, num2);\r\n\t    };\r\n\t    Utils.binarySearchClosestInd = function (arr, num, key) {\r\n\t        var mid;\r\n\t        var lo = 0;\r\n\t        var hi = arr.length - 1;\r\n\t        while (hi - lo > 1) {\r\n\t            mid = Math.floor((lo + hi) / 2);\r\n\t            if (arr[mid][key] < num) {\r\n\t                lo = mid;\r\n\t            }\r\n\t            else {\r\n\t                hi = mid;\r\n\t            }\r\n\t        }\r\n\t        if (num - arr[lo][key] <= arr[hi][key] - num) {\r\n\t            return lo;\r\n\t        }\r\n\t        return hi;\r\n\t    };\r\n\t    Utils.binarySearchClosest = function (arr, num, key) {\r\n\t        var ind = this.binarySearchClosestInd(arr, num, key);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.rectsIntersect = function (r1, r2) {\r\n\t        var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\r\n\t        var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\r\n\t        var _a = [left1 + width1, left2 + width2, top1 + height1, top2 + height2], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\r\n\t        return !(left2 > right1 ||\r\n\t            right2 < left1 ||\r\n\t            top2 > bottom1 ||\r\n\t            bottom2 < top1);\r\n\t    };\r\n\t    Utils.throttle = function (func, ms) {\r\n\t        var isThrottled = false, savedArgs, savedThis;\r\n\t        function wrapper() {\r\n\t            if (isThrottled) {\r\n\t                savedArgs = arguments;\r\n\t                savedThis = this;\r\n\t                return;\r\n\t            }\r\n\t            func.apply(this, arguments); // (1)\r\n\t            isThrottled = true;\r\n\t            setTimeout(function () {\r\n\t                isThrottled = false; // (3)\r\n\t                if (savedArgs) {\r\n\t                    wrapper.apply(savedThis, savedArgs);\r\n\t                    savedArgs = savedThis = null;\r\n\t                }\r\n\t            }, ms);\r\n\t        }\r\n\t        return wrapper;\r\n\t    };\r\n\t    Utils.msToTimeString = function (timestamp) {\r\n\t        var h = Math.floor(timestamp / 360000);\r\n\t        var m = Math.floor(timestamp / 60000);\r\n\t        var s = Math.floor(timestamp / 1000);\r\n\t        return h + ':' + m + ':' + s;\r\n\t    };\r\n\t    Utils.getRandomItem = function (arr) {\r\n\t        var ind = Math.floor(Math.random() * arr.length);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.copyProps = function (srcObject, dstObject, props, excludeProps) {\r\n\t        if (excludeProps === void 0) { excludeProps = []; }\r\n\t        for (var key in props) {\r\n\t            if (excludeProps.indexOf(key) !== -1)\r\n\t                continue;\r\n\t            if (srcObject[key] == void 0)\r\n\t                continue;\r\n\t            if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\r\n\t                this.copyProps(srcObject[key], dstObject[key], props[key]);\r\n\t            }\r\n\t            else {\r\n\t                dstObject[key] = this.deepCopy(srcObject[key]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Utils.currentId = 1;\r\n\t    return Utils;\r\n\t}());\r\n\texports.Utils = Utils;\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"./ResizeSensor.ts\" />\r\n\t\"use strict\";\r\n\twindow.TweenLite = TweenMax;\r\n\twindow.Stats = __webpack_require__(6);\r\n\t// require('gsap/src/uncompressed/easing/EasePack.js');\r\n\t// require('three/examples/js/renderers/CanvasRenderer.js');\r\n\t// require('three/examples/js/renderers/Projector.js');\r\n\texports.isPlainObject = __webpack_require__(7);\r\n\texports.EE2 = __webpack_require__(9);\r\n\tvar es6_promise_1 = __webpack_require__(10);\r\n\texports.Promise = es6_promise_1.Promise;\r\n\texports.ResizeSensor = __webpack_require__(11);\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// stats.js - http://github.com/mrdoob/stats.js\n\tvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\n\tif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\n\tStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\n\tv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tvar isObject = __webpack_require__(8);\n\t\n\tfunction isObjectObject(o) {\n\t  return isObject(o) === true\n\t    && Object.prototype.toString.call(o) === '[object Object]';\n\t}\n\t\n\tmodule.exports = function isPlainObject(o) {\n\t  var ctor,prot;\n\t  \n\t  if (isObjectObject(o) === false) return false;\n\t  \n\t  // If has modified constructor\n\t  ctor = o.constructor;\n\t  if (typeof ctor !== 'function') return false;\n\t  \n\t  // If has modified prototype\n\t  prot = ctor.prototype;\n\t  if (isObjectObject(prot) === false) return false;\n\t  \n\t  // If constructor does not have an Object-specific method\n\t  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n\t    return false;\n\t  }\n\t  \n\t  // Most likely a plain Object\n\t  return true;\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tmodule.exports = function isObject(val) {\n\t  return val != null && typeof val === 'object'\n\t    && !Array.isArray(val);\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * EventEmitter2\n\t * https://github.com/hij1nx/EventEmitter2\n\t *\n\t * Copyright (c) 2013 hij1nx\n\t * Licensed under the MIT license.\n\t */\n\t;!function(undefined) {\n\t\n\t  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t    return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t  };\n\t  var defaultMaxListeners = 10;\n\t\n\t  function init() {\n\t    this._events = {};\n\t    if (this._conf) {\n\t      configure.call(this, this._conf);\n\t    }\n\t  }\n\t\n\t  function configure(conf) {\n\t    if (conf) {\n\t\n\t      this._conf = conf;\n\t\n\t      conf.delimiter && (this.delimiter = conf.delimiter);\n\t      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t      conf.wildcard && (this.wildcard = conf.wildcard);\n\t      conf.newListener && (this.newListener = conf.newListener);\n\t\n\t      if (this.wildcard) {\n\t        this.listenerTree = {};\n\t      }\n\t    }\n\t  }\n\t\n\t  function EventEmitter(conf) {\n\t    this._events = {};\n\t    this.newListener = false;\n\t    configure.call(this, conf);\n\t  }\n\t\n\t  //\n\t  // Attention, function return type now is array, always !\n\t  // It has zero elements if no any matches found and one or more\n\t  // elements (leafs) if there are matches\n\t  //\n\t  function searchListenerTree(handlers, type, tree, i) {\n\t    if (!tree) {\n\t      return [];\n\t    }\n\t    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n\t        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n\t    if (i === typeLength && tree._listeners) {\n\t      //\n\t      // If at the end of the event(s) list and the tree has listeners\n\t      // invoke those listeners.\n\t      //\n\t      if (typeof tree._listeners === 'function') {\n\t        handlers && handlers.push(tree._listeners);\n\t        return [tree];\n\t      } else {\n\t        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t          handlers && handlers.push(tree._listeners[leaf]);\n\t        }\n\t        return [tree];\n\t      }\n\t    }\n\t\n\t    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n\t      //\n\t      // If the event emitted is '*' at this part\n\t      // or there is a concrete match at this patch\n\t      //\n\t      if (currentType === '*') {\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n\t          }\n\t        }\n\t        return listeners;\n\t      } else if(currentType === '**') {\n\t        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n\t        if(endReached && tree._listeners) {\n\t          // The next element has a _listeners, add it to the handlers.\n\t          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t        }\n\t\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            if(branch === '*' || branch === '**') {\n\t              if(tree[branch]._listeners && !endReached) {\n\t                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t              }\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            } else if(branch === nextType) {\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n\t            } else {\n\t              // No match on this one, shift into the tree but not in the type array.\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            }\n\t          }\n\t        }\n\t        return listeners;\n\t      }\n\t\n\t      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n\t    }\n\t\n\t    xTree = tree['*'];\n\t    if (xTree) {\n\t      //\n\t      // If the listener tree will allow any match for this part,\n\t      // then recursively explore all branches of the tree\n\t      //\n\t      searchListenerTree(handlers, type, xTree, i+1);\n\t    }\n\t\n\t    xxTree = tree['**'];\n\t    if(xxTree) {\n\t      if(i < typeLength) {\n\t        if(xxTree._listeners) {\n\t          // If we have a listener on a '**', it will catch all, so add its handler.\n\t          searchListenerTree(handlers, type, xxTree, typeLength);\n\t        }\n\t\n\t        // Build arrays of matching next branches and others.\n\t        for(branch in xxTree) {\n\t          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n\t            if(branch === nextType) {\n\t              // We know the next element will match, so jump twice.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+2);\n\t            } else if(branch === currentType) {\n\t              // Current node matches, move into the tree.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+1);\n\t            } else {\n\t              isolatedBranch = {};\n\t              isolatedBranch[branch] = xxTree[branch];\n\t              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n\t            }\n\t          }\n\t        }\n\t      } else if(xxTree._listeners) {\n\t        // We have reached the end and still on a '**'\n\t        searchListenerTree(handlers, type, xxTree, typeLength);\n\t      } else if(xxTree['*'] && xxTree['*']._listeners) {\n\t        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n\t      }\n\t    }\n\t\n\t    return listeners;\n\t  }\n\t\n\t  function growListenerTree(type, listener) {\n\t\n\t    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t\n\t    //\n\t    // Looks for two consecutive '**', if so, don't add the event at all.\n\t    //\n\t    for(var i = 0, len = type.length; i+1 < len; i++) {\n\t      if(type[i] === '**' && type[i+1] === '**') {\n\t        return;\n\t      }\n\t    }\n\t\n\t    var tree = this.listenerTree;\n\t    var name = type.shift();\n\t\n\t    while (name) {\n\t\n\t      if (!tree[name]) {\n\t        tree[name] = {};\n\t      }\n\t\n\t      tree = tree[name];\n\t\n\t      if (type.length === 0) {\n\t\n\t        if (!tree._listeners) {\n\t          tree._listeners = listener;\n\t        }\n\t        else if(typeof tree._listeners === 'function') {\n\t          tree._listeners = [tree._listeners, listener];\n\t        }\n\t        else if (isArray(tree._listeners)) {\n\t\n\t          tree._listeners.push(listener);\n\t\n\t          if (!tree._listeners.warned) {\n\t\n\t            var m = defaultMaxListeners;\n\t\n\t            if (typeof this._events.maxListeners !== 'undefined') {\n\t              m = this._events.maxListeners;\n\t            }\n\t\n\t            if (m > 0 && tree._listeners.length > m) {\n\t\n\t              tree._listeners.warned = true;\n\t              console.error('(node) warning: possible EventEmitter memory ' +\n\t                            'leak detected. %d listeners added. ' +\n\t                            'Use emitter.setMaxListeners() to increase limit.',\n\t                            tree._listeners.length);\n\t              console.trace();\n\t            }\n\t          }\n\t        }\n\t        return true;\n\t      }\n\t      name = type.shift();\n\t    }\n\t    return true;\n\t  }\n\t\n\t  // By default EventEmitters will print a warning if more than\n\t  // 10 listeners are added to it. This is a useful default which\n\t  // helps finding memory leaks.\n\t  //\n\t  // Obviously not all Emitters should be limited to 10. This function allows\n\t  // that to be increased. Set to zero for unlimited.\n\t\n\t  EventEmitter.prototype.delimiter = '.';\n\t\n\t  EventEmitter.prototype.setMaxListeners = function(n) {\n\t    this._events || init.call(this);\n\t    this._events.maxListeners = n;\n\t    if (!this._conf) this._conf = {};\n\t    this._conf.maxListeners = n;\n\t  };\n\t\n\t  EventEmitter.prototype.event = '';\n\t\n\t  EventEmitter.prototype.once = function(event, fn) {\n\t    this.many(event, 1, fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.many = function(event, ttl, fn) {\n\t    var self = this;\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('many only accepts instances of Function');\n\t    }\n\t\n\t    function listener() {\n\t      if (--ttl === 0) {\n\t        self.off(event, listener);\n\t      }\n\t      fn.apply(this, arguments);\n\t    }\n\t\n\t    listener._origin = fn;\n\t\n\t    this.on(event, listener);\n\t\n\t    return self;\n\t  };\n\t\n\t  EventEmitter.prototype.emit = function() {\n\t\n\t    this._events || init.call(this);\n\t\n\t    var type = arguments[0];\n\t\n\t    if (type === 'newListener' && !this.newListener) {\n\t      if (!this._events.newListener) { return false; }\n\t    }\n\t\n\t    // Loop through the *_all* functions and invoke them.\n\t    if (this._all) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t      for (i = 0, l = this._all.length; i < l; i++) {\n\t        this.event = type;\n\t        this._all[i].apply(this, args);\n\t      }\n\t    }\n\t\n\t    // If there is no 'error' event listener then throw.\n\t    if (type === 'error') {\n\t\n\t      if (!this._all &&\n\t        !this._events.error &&\n\t        !(this.wildcard && this.listenerTree.error)) {\n\t\n\t        if (arguments[1] instanceof Error) {\n\t          throw arguments[1]; // Unhandled 'error' event\n\t        } else {\n\t          throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t        }\n\t        return false;\n\t      }\n\t    }\n\t\n\t    var handler;\n\t\n\t    if(this.wildcard) {\n\t      handler = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      handler = this._events[type];\n\t    }\n\t\n\t    if (typeof handler === 'function') {\n\t      this.event = type;\n\t      if (arguments.length === 1) {\n\t        handler.call(this);\n\t      }\n\t      else if (arguments.length > 1)\n\t        switch (arguments.length) {\n\t          case 2:\n\t            handler.call(this, arguments[1]);\n\t            break;\n\t          case 3:\n\t            handler.call(this, arguments[1], arguments[2]);\n\t            break;\n\t          // slower\n\t          default:\n\t            var l = arguments.length;\n\t            var args = new Array(l - 1);\n\t            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t            handler.apply(this, args);\n\t        }\n\t      return true;\n\t    }\n\t    else if (handler) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t\n\t      var listeners = handler.slice();\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        this.event = type;\n\t        listeners[i].apply(this, args);\n\t      }\n\t      return (listeners.length > 0) || !!this._all;\n\t    }\n\t    else {\n\t      return !!this._all;\n\t    }\n\t\n\t  };\n\t\n\t  EventEmitter.prototype.on = function(type, listener) {\n\t\n\t    if (typeof type === 'function') {\n\t      this.onAny(type);\n\t      return this;\n\t    }\n\t\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('on only accepts instances of Function');\n\t    }\n\t    this._events || init.call(this);\n\t\n\t    // To avoid recursion in the case that type == \"newListeners\"! Before\n\t    // adding it to the listeners, first emit \"newListeners\".\n\t    this.emit('newListener', type, listener);\n\t\n\t    if(this.wildcard) {\n\t      growListenerTree.call(this, type, listener);\n\t      return this;\n\t    }\n\t\n\t    if (!this._events[type]) {\n\t      // Optimize the case of one listener. Don't need the extra array object.\n\t      this._events[type] = listener;\n\t    }\n\t    else if(typeof this._events[type] === 'function') {\n\t      // Adding the second element, need to change to array.\n\t      this._events[type] = [this._events[type], listener];\n\t    }\n\t    else if (isArray(this._events[type])) {\n\t      // If we've already got an array, just append.\n\t      this._events[type].push(listener);\n\t\n\t      // Check for listener leak\n\t      if (!this._events[type].warned) {\n\t\n\t        var m = defaultMaxListeners;\n\t\n\t        if (typeof this._events.maxListeners !== 'undefined') {\n\t          m = this._events.maxListeners;\n\t        }\n\t\n\t        if (m > 0 && this._events[type].length > m) {\n\t\n\t          this._events[type].warned = true;\n\t          console.error('(node) warning: possible EventEmitter memory ' +\n\t                        'leak detected. %d listeners added. ' +\n\t                        'Use emitter.setMaxListeners() to increase limit.',\n\t                        this._events[type].length);\n\t          console.trace();\n\t        }\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.onAny = function(fn) {\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('onAny only accepts instances of Function');\n\t    }\n\t\n\t    if(!this._all) {\n\t      this._all = [];\n\t    }\n\t\n\t    // Add the function to the event listener collection.\n\t    this._all.push(fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  EventEmitter.prototype.off = function(type, listener) {\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('removeListener only takes instances of Function');\n\t    }\n\t\n\t    var handlers,leafs=[];\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      // does not use listeners(), so no side effect of creating _events[type]\n\t      if (!this._events[type]) return this;\n\t      handlers = this._events[type];\n\t      leafs.push({_listeners:handlers});\n\t    }\n\t\n\t    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t      var leaf = leafs[iLeaf];\n\t      handlers = leaf._listeners;\n\t      if (isArray(handlers)) {\n\t\n\t        var position = -1;\n\t\n\t        for (var i = 0, length = handlers.length; i < length; i++) {\n\t          if (handlers[i] === listener ||\n\t            (handlers[i].listener && handlers[i].listener === listener) ||\n\t            (handlers[i]._origin && handlers[i]._origin === listener)) {\n\t            position = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (position < 0) {\n\t          continue;\n\t        }\n\t\n\t        if(this.wildcard) {\n\t          leaf._listeners.splice(position, 1);\n\t        }\n\t        else {\n\t          this._events[type].splice(position, 1);\n\t        }\n\t\n\t        if (handlers.length === 0) {\n\t          if(this.wildcard) {\n\t            delete leaf._listeners;\n\t          }\n\t          else {\n\t            delete this._events[type];\n\t          }\n\t        }\n\t        return this;\n\t      }\n\t      else if (handlers === listener ||\n\t        (handlers.listener && handlers.listener === listener) ||\n\t        (handlers._origin && handlers._origin === listener)) {\n\t        if(this.wildcard) {\n\t          delete leaf._listeners;\n\t        }\n\t        else {\n\t          delete this._events[type];\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.offAny = function(fn) {\n\t    var i = 0, l = 0, fns;\n\t    if (fn && this._all && this._all.length > 0) {\n\t      fns = this._all;\n\t      for(i = 0, l = fns.length; i < l; i++) {\n\t        if(fn === fns[i]) {\n\t          fns.splice(i, 1);\n\t          return this;\n\t        }\n\t      }\n\t    } else {\n\t      this._all = [];\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t\n\t  EventEmitter.prototype.removeAllListeners = function(type) {\n\t    if (arguments.length === 0) {\n\t      !this._events || init.call(this);\n\t      return this;\n\t    }\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t\n\t      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t        var leaf = leafs[iLeaf];\n\t        leaf._listeners = null;\n\t      }\n\t    }\n\t    else {\n\t      if (!this._events[type]) return this;\n\t      this._events[type] = null;\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.listeners = function(type) {\n\t    if(this.wildcard) {\n\t      var handlers = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t      return handlers;\n\t    }\n\t\n\t    this._events || init.call(this);\n\t\n\t    if (!this._events[type]) this._events[type] = [];\n\t    if (!isArray(this._events[type])) {\n\t      this._events[type] = [this._events[type]];\n\t    }\n\t    return this._events[type];\n\t  };\n\t\n\t  EventEmitter.prototype.listenersAny = function() {\n\t\n\t    if(this._all) {\n\t      return this._all;\n\t    }\n\t    else {\n\t      return [];\n\t    }\n\t\n\t  };\n\t\n\t  if (true) {\n\t     // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return EventEmitter;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    // CommonJS\n\t    exports.EventEmitter2 = EventEmitter;\n\t  }\n\t  else {\n\t    // Browser global.\n\t    window.EventEmitter2 = EventEmitter;\n\t  }\n\t}();\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {Promise: window['Promise']}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n\t * directory of this distribution and at\n\t * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n\t */\n\t;\n\t(function() {\n\t\n\t    /**\n\t     * Class for dimension change detection.\n\t     *\n\t     * @param {Element|Element[]|Elements|jQuery} element\n\t     * @param {Function} callback\n\t     *\n\t     * @constructor\n\t     */\n\t    var ResizeSensor = function(element, callback) {\n\t        /**\n\t         *\n\t         * @constructor\n\t         */\n\t        function EventQueue() {\n\t            this.q = [];\n\t            this.add = function(ev) {\n\t                this.q.push(ev);\n\t            };\n\t\n\t            var i, j;\n\t            this.call = function() {\n\t                for (i = 0, j = this.q.length; i < j; i++) {\n\t                    this.q[i].call();\n\t                }\n\t            };\n\t        }\n\t\n\t        /**\n\t         * @param {HTMLElement} element\n\t         * @param {String}      prop\n\t         * @returns {String|Number}\n\t         */\n\t        function getComputedStyle(element, prop) {\n\t            if (element.currentStyle) {\n\t                return element.currentStyle[prop];\n\t            } else if (window.getComputedStyle) {\n\t                return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t            } else {\n\t                return element.style[prop];\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @param {Function}    resized\n\t         */\n\t        function attachResizeEvent(element, resized) {\n\t            if (!element.resizedAttached) {\n\t                element.resizedAttached = new EventQueue();\n\t                element.resizedAttached.add(resized);\n\t            } else if (element.resizedAttached) {\n\t                element.resizedAttached.add(resized);\n\t                return;\n\t            }\n\t\n\t            element.resizeSensor = document.createElement('div');\n\t            element.resizeSensor.className = 'resize-sensor';\n\t            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n\t            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\t\n\t            element.resizeSensor.style.cssText = style;\n\t            element.resizeSensor.innerHTML =\n\t                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + '\"></div>' +\n\t                '</div>' +\n\t                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n\t                '</div>';\n\t            element.appendChild(element.resizeSensor);\n\t\n\t            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n\t                element.style.position = 'relative';\n\t            }\n\t\n\t            var expand = element.resizeSensor.childNodes[0];\n\t            var expandChild = expand.childNodes[0];\n\t            var shrink = element.resizeSensor.childNodes[1];\n\t            var shrinkChild = shrink.childNodes[0];\n\t\n\t            var lastWidth, lastHeight;\n\t\n\t            var reset = function() {\n\t                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n\t                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n\t                expand.scrollLeft = expand.scrollWidth;\n\t                expand.scrollTop = expand.scrollHeight;\n\t                shrink.scrollLeft = shrink.scrollWidth;\n\t                shrink.scrollTop = shrink.scrollHeight;\n\t                lastWidth = element.offsetWidth;\n\t                lastHeight = element.offsetHeight;\n\t            };\n\t\n\t            reset();\n\t\n\t            var changed = function() {\n\t                if (element.resizedAttached) {\n\t                    element.resizedAttached.call();\n\t                }\n\t            };\n\t\n\t            var addEvent = function(el, name, cb) {\n\t                if (el.attachEvent) {\n\t                    el.attachEvent('on' + name, cb);\n\t                } else {\n\t                    el.addEventListener(name, cb);\n\t                }\n\t            };\n\t\n\t            var onScroll = function() {\n\t              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                  changed();\n\t              }\n\t              reset();\n\t            };\n\t\n\t            addEvent(expand, 'scroll', onScroll);\n\t            addEvent(shrink, 'scroll', onScroll);\n\t        }\n\t\n\t        var elementType = Object.prototype.toString.call(element);\n\t        var isCollectionTyped = ('[object Array]' === elementType\n\t            || ('[object NodeList]' === elementType)\n\t            || ('[object HTMLCollection]' === elementType)\n\t            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n\t            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n\t        );\n\t\n\t        if (isCollectionTyped) {\n\t            var i = 0, j = element.length;\n\t            for (; i < j; i++) {\n\t                attachResizeEvent(element[i], callback);\n\t            }\n\t        } else {\n\t            attachResizeEvent(element, callback);\n\t        }\n\t\n\t        this.detach = function() {\n\t            if (isCollectionTyped) {\n\t                var i = 0, j = element.length;\n\t                for (; i < j; i++) {\n\t                    ResizeSensor.detach(element[i]);\n\t                }\n\t            } else {\n\t                ResizeSensor.detach(element);\n\t            }\n\t        };\n\t    };\n\t\n\t    ResizeSensor.detach = function(element) {\n\t        if (element.resizeSensor) {\n\t            element.removeChild(element.resizeSensor);\n\t            delete element.resizeSensor;\n\t            delete element.resizedAttached;\n\t        }\n\t    };\n\t\n\t    // make available to common module loader\n\t    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t        module.exports = ResizeSensor;\n\t    }\n\t    else {\n\t        window.ResizeSensor = ResizeSensor;\n\t    }\n\t\n\t})();\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(5);\r\n\t/**\r\n\t * this class uses as proxy for EventEmitter2\r\n\t */\r\n\tvar EventEmitter = (function () {\r\n\t    function EventEmitter() {\r\n\t        this.ee = new deps_1.EE2();\r\n\t    }\r\n\t    EventEmitter.prototype.emit = function (eventName) {\r\n\t        var args = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            args[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        (_a = this.ee).emit.apply(_a, [eventName].concat(args));\r\n\t        var _a;\r\n\t    };\r\n\t    EventEmitter.prototype.on = function (eventName, callback) {\r\n\t        return this.ee.on(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.off = function (eventName, callback) {\r\n\t        return this.ee.off(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.subscribe = function (eventName, callback) {\r\n\t        var _this = this;\r\n\t        this.on(eventName, callback);\r\n\t        return function () { return _this.off(eventName, callback); };\r\n\t    };\r\n\t    EventEmitter.prototype.setMaxListeners = function (listenersCount) {\r\n\t        this.ee.setMaxListeners(listenersCount);\r\n\t    };\r\n\t    EventEmitter.prototype.removeAllListeners = function (eventName) {\r\n\t        this.ee.removeAllListeners(eventName);\r\n\t    };\r\n\t    return EventEmitter;\r\n\t}());\r\n\texports.EventEmitter = EventEmitter;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendsManager_1 = __webpack_require__(16);\r\n\tvar Screen_1 = __webpack_require__(17);\r\n\tvar AxisMarks_1 = __webpack_require__(18);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tvar CHART_STATE_EVENTS = {\r\n\t    INITIAL_STATE_APPLIED: 'initialStateApplied',\r\n\t    READY: 'ready',\r\n\t    DESTROY: 'destroy',\r\n\t    CHANGE: 'change',\r\n\t    TREND_CHANGE: 'trendChange',\r\n\t    TRENDS_CHANGE: 'trendsChange',\r\n\t    ZOOM: 'zoom',\r\n\t    RESIZE: 'resize',\r\n\t    SCROLL: 'scroll',\r\n\t    SCROLL_STOP: 'scrollStop',\r\n\t    PLUGINS_STATE_CHANGED: 'pluginsStateChanged'\r\n\t};\r\n\tvar LIGHT_BLUE = '#5273bd';\r\n\t/**\r\n\t *  all state changes caused only by Chart.setState method\r\n\t */\r\n\tvar Chart = (function () {\r\n\t    function Chart(initialState, plugins) {\r\n\t        if (plugins === void 0) { plugins = []; }\r\n\t        this.state = {\r\n\t            prevState: {},\r\n\t            zoom: 0,\r\n\t            xAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.ALL,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    scroll: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 0, end: 5 },\r\n\t                    margin: { start: 0, end: 5 }\r\n\t                },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                grid: { enabled: true, minSizePx: 100, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                autoScroll: true,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            yAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 5, end: 5 },\r\n\t                    margin: { start: 5, end: 5 },\r\n\t                },\r\n\t                grid: { enabled: true, minSizePx: 50, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            animations: {\r\n\t                enabled: true,\r\n\t                trendChangeSpeed: 0.5,\r\n\t                trendChangeEase: void 0,\r\n\t                zoomSpeed: 0.25,\r\n\t                zoomEase: void 0,\r\n\t                scrollSpeed: 0.5,\r\n\t                scrollEase: Linear.easeNone,\r\n\t                autoScrollSpeed: 1,\r\n\t                autoScrollEase: Linear.easeNone,\r\n\t            },\r\n\t            autoRender: { enabled: true, fps: 0 },\r\n\t            autoResize: true,\r\n\t            renderer: 'WebGLRenderer',\r\n\t            autoScroll: true,\r\n\t            controls: { enabled: true },\r\n\t            trendDefaultState: {\r\n\t                enabled: true,\r\n\t                type: Trend_1.TREND_TYPE.LINE,\r\n\t                data: [],\r\n\t                maxSegmentLength: 1000,\r\n\t                lineWidth: 2,\r\n\t                lineColor: 0xFFFFFF,\r\n\t                hasBackground: true,\r\n\t                backgroundColor: 'rgba(#FFFFFF, 0.07)',\r\n\t                hasBeacon: false,\r\n\t                settingsForTypes: {\r\n\t                    CANDLE: {\r\n\t                        minSegmentLengthInPx: 20,\r\n\t                        maxSegmentLengthInPx: 40,\r\n\t                    },\r\n\t                    LINE: {\r\n\t                        minSegmentLengthInPx: 2,\r\n\t                        maxSegmentLengthInPx: 10,\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            cursor: {\r\n\t                dragMode: false,\r\n\t                x: 0,\r\n\t                y: 0\r\n\t            },\r\n\t            font: {\r\n\t                s: '11px Arial',\r\n\t                m: '12px Arial',\r\n\t                l: '13px Arial'\r\n\t            },\r\n\t            backgroundColor: 0x000c2a,\r\n\t            showStats: false,\r\n\t            pluginsState: {},\r\n\t            eventEmitterMaxListeners: 20,\r\n\t            maxVisibleSegments: 1280\r\n\t        };\r\n\t        this.plugins = {};\r\n\t        /**\r\n\t         * true then state was initialized and ready to use\r\n\t         */\r\n\t        this.isReady = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, initialState);\r\n\t        this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\r\n\t        initialState.trends = this.trendsManager.calculatedOptions;\r\n\t        initialState = this.installPlugins(plugins, initialState);\r\n\t        this.setState(initialState);\r\n\t        this.setState({ computedData: this.getComputedData() });\r\n\t        this.savePrevState();\r\n\t        this.screen = new Screen_1.Screen(this);\r\n\t        this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\r\n\t        this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\r\n\t        this.initListeners();\r\n\t        // message to other modules that Chart.state is ready for use\r\n\t        this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\r\n\t        // message to other modules that Chart is ready for use\r\n\t        this.isReady = true;\r\n\t        this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\r\n\t    }\r\n\t    /**\r\n\t     * destroy state, use ChartView.destroy to completely destroy state\r\n\t     */\r\n\t    Chart.prototype.destroy = function () {\r\n\t        this.ee.emit(CHART_STATE_EVENTS.DESTROY);\r\n\t        this.ee.removeAllListeners();\r\n\t        this.state = {};\r\n\t    };\r\n\t    Chart.prototype.onDestroy = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\r\n\t    };\r\n\t    Chart.prototype.onInitialStateApplied = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\r\n\t    };\r\n\t    Chart.prototype.onReady = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\r\n\t    };\r\n\t    Chart.prototype.onChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendsChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onScrollStop = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\r\n\t    };\r\n\t    Chart.prototype.onScroll = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\r\n\t    };\r\n\t    Chart.prototype.onZoom = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\r\n\t    };\r\n\t    Chart.prototype.onResize = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\r\n\t    };\r\n\t    Chart.prototype.onPluginsStateChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\r\n\t    };\r\n\t    Chart.prototype.getTrend = function (trendName) {\r\n\t        return this.trendsManager.getTrend(trendName);\r\n\t    };\r\n\t    Chart.prototype.setState = function (newState, eventData, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var stateData = this.state;\r\n\t        var newStateObj = newState;\r\n\t        var changedProps = {};\r\n\t        for (var key in newStateObj) {\r\n\t            if (stateData[key] !== newStateObj[key]) {\r\n\t                changedProps[key] = newStateObj[key];\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(changedProps);\r\n\t        // temporary remove trends state from newState by performance reasons\r\n\t        var trendsData = {};\r\n\t        if (newState.trends)\r\n\t            for (var trendName in newState.trends) {\r\n\t                var trendOptions = newState.trends[trendName];\r\n\t                if (trendOptions.data)\r\n\t                    trendsData[trendName] = trendOptions.data;\r\n\t                delete trendOptions.data;\r\n\t            }\r\n\t        var newStateContainsData = Object.keys(trendsData).length > 0;\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, newState, false);\r\n\t        // return state to state\r\n\t        if (newStateContainsData)\r\n\t            for (var trendName in trendsData) {\r\n\t                this.state.trends[trendName].data = trendsData[trendName];\r\n\t            }\r\n\t        if (silent)\r\n\t            return;\r\n\t        // recalculate all dynamic state props\r\n\t        var recalculateResult = this.recalculateState(changedProps);\r\n\t        changedProps = recalculateResult.changedProps;\r\n\t        this.emitChangedStateEvents(changedProps, eventData);\r\n\t    };\r\n\t    /**\r\n\t     * recalculate all computed state props\r\n\t     */\r\n\t    Chart.prototype.recalculateState = function (changedProps) {\r\n\t        var data = this.state;\r\n\t        var patch = {};\r\n\t        var actualData = Utils_1.Utils.deepMerge({}, data);\r\n\t        // recalculate scroll position by changed cursor options\r\n\t        var cursorOptions = changedProps.cursor;\r\n\t        var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\r\n\t        if (isMouseDrag) {\r\n\t            var oldX = data.prevState.cursor.x;\r\n\t            var currentX = cursorOptions.x;\r\n\t            var currentScroll = data.xAxis.range.scroll;\r\n\t            var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\r\n\t            patch.xAxis = { range: { scroll: currentScroll + deltaXVal } };\r\n\t            actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: patch.xAxis });\r\n\t        }\r\n\t        var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\r\n\t        var scrollXChanged = false;\r\n\t        var needToRecalculateXAxis = (isMouseDrag ||\r\n\t            chartWasResized ||\r\n\t            (changedProps.xAxis && (changedProps.xAxis.range)) ||\r\n\t            this.state.xAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateXAxis) {\r\n\t            var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\r\n\t            if (xAxisPatch) {\r\n\t                scrollXChanged = true;\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { xAxis: xAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: xAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        // recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\r\n\t        var needToRecalculateYAxis = (chartWasResized ||\r\n\t            (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END ||\r\n\t                data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO ||\r\n\t                data.yAxis.range.isMirrorMode) &&\r\n\t                (scrollXChanged || changedProps.trends || changedProps.yAxis) ||\r\n\t            this.state.yAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateYAxis) {\r\n\t            var yAxisPatch = this.recalculateYAxis(actualData);\r\n\t            if (yAxisPatch) {\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { yAxis: yAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { yAxis: yAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(patch);\r\n\t        var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\r\n\t        patch.computedData = this.getComputedData(allChangedProps);\r\n\t        this.savePrevState(patch);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, patch);\r\n\t        return { changedProps: allChangedProps, patch: patch };\r\n\t    };\r\n\t    Chart.prototype.getComputedData = function (changedProps) {\r\n\t        var computeAll = !changedProps;\r\n\t        var computedData = {};\r\n\t        if (computeAll || changedProps.trends && this.trendsManager) {\r\n\t            computedData.trends = {\r\n\t                maxXVal: this.trendsManager.getEndXVal(),\r\n\t                minXVal: this.trendsManager.getStartXVal()\r\n\t            };\r\n\t        }\r\n\t        return computedData;\r\n\t    };\r\n\t    Chart.prototype.savePrevState = function (changedProps) {\r\n\t        if (!changedProps)\r\n\t            changedProps = this.state;\r\n\t        var prevState = this.state.prevState;\r\n\t        // prevent to store prev trend state by performance reasons\r\n\t        Utils_1.Utils.copyProps(this.state, prevState, changedProps, ['trends']);\r\n\t    };\r\n\t    Chart.prototype.emitChangedStateEvents = function (changedProps, eventData) {\r\n\t        var prevState = this.state.prevState;\r\n\t        // emit common change event\r\n\t        this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\r\n\t        // emit event for each changed state property\r\n\t        for (var key in changedProps) {\r\n\t            this.ee.emit(key + 'Change', changedProps[key], eventData);\r\n\t        }\r\n\t        if (!this.isReady)\r\n\t            return;\r\n\t        // emit special events based on changed state\r\n\t        var scrollStopEventNeeded = (changedProps.cursor &&\r\n\t            changedProps.cursor.dragMode === false &&\r\n\t            prevState.cursor.dragMode === true);\r\n\t        scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\r\n\t        var scrollChangeEventsNeeded = (changedProps.xAxis &&\r\n\t            changedProps.xAxis.range &&\r\n\t            changedProps.xAxis.range.scroll !== void 0);\r\n\t        scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\r\n\t        var zoomEventsNeeded = ((changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\r\n\t            (changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom));\r\n\t        zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\r\n\t        var resizeEventNeeded = (changedProps.width || changedProps.height);\r\n\t        resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\r\n\t        var pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\r\n\t        pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\r\n\t    };\r\n\t    /**\r\n\t     * init plugins and save plugins options in initialState\r\n\t     */\r\n\t    Chart.prototype.installPlugins = function (plugins, initialState) {\r\n\t        var _this = this;\r\n\t        initialState.pluginsState = {};\r\n\t        plugins.forEach(function (plugin) {\r\n\t            var PluginClass = plugin.constructor;\r\n\t            var pluginName = PluginClass.NAME;\r\n\t            initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\r\n\t            _this.plugins[pluginName] = plugin;\r\n\t            plugin.setupChart(_this);\r\n\t        });\r\n\t        return initialState;\r\n\t    };\r\n\t    /**\r\n\t     * returns plugin instance by plugin name\r\n\t     * @example\r\n\t     */\r\n\t    Chart.prototype.getPlugin = function (pluginName) {\r\n\t        return this.plugins[pluginName];\r\n\t    };\r\n\t    Chart.prototype.initListeners = function () {\r\n\t        var _this = this;\r\n\t        this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function (changedTrends, newData) {\r\n\t            _this.handleTrendsChange(changedTrends, newData);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.handleTrendsChange = function (changedTrends, newData) {\r\n\t        for (var trendName in changedTrends) {\r\n\t            this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\r\n\t        }\r\n\t    };\r\n\t    Chart.prototype.recalculateXAxis = function (actualData, changedProps) {\r\n\t        var axisRange = actualData.xAxis.range;\r\n\t        var patch = { range: {} };\r\n\t        var isInitialize = axisRange.zeroVal == void 0;\r\n\t        var zeroVal, scaleFactor;\r\n\t        var zoom = axisRange.zoom;\r\n\t        if (axisRange.isMirrorMode) {\r\n\t            Utils_1.Utils.error('range.isMirrorMode available only for yAxis.range');\r\n\t        }\r\n\t        if (isInitialize) {\r\n\t            zeroVal = axisRange.from;\r\n\t            scaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t        }\r\n\t        else {\r\n\t            zeroVal = axisRange.zeroVal;\r\n\t            scaleFactor = axisRange.scaleFactor;\r\n\t            // recalculate range.zoom and range.scroll then range.from or range.to was changed\r\n\t            if (changedProps.xAxis &&\r\n\t                (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\r\n\t                if (changedProps.xAxis.range.zoom) {\r\n\t                    Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\r\n\t                }\r\n\t                var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t                patch.range.scroll = axisRange.from - zeroVal;\r\n\t                patch.range.zoom = currentScaleFactor / scaleFactor;\r\n\t                return patch;\r\n\t            }\r\n\t        }\r\n\t        // recalculate range.from and range.to then range.zoom or range.scroll was changed\r\n\t        do {\r\n\t            var from = zeroVal + axisRange.scroll;\r\n\t            var to = from + actualData.width / (scaleFactor * zoom);\r\n\t            var rangeLength = to - from;\r\n\t            var needToRecalculateZoom = false;\r\n\t            var rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\r\n\t            var rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\r\n\t            needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\r\n\t            if (needToRecalculateZoom) {\r\n\t                var fixScale = rangeLength > axisRange.maxLength ?\r\n\t                    rangeLength / axisRange.maxLength :\r\n\t                    rangeLength / axisRange.minLength;\r\n\t                var zoom = zoom * fixScale;\r\n\t                patch.range.zoom = zoom;\r\n\t            }\r\n\t        } while (needToRecalculateZoom);\r\n\t        patch.range.from = from;\r\n\t        patch.range.to = to;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.recalculateYAxis = function (actualData) {\r\n\t        var patch = { range: {} };\r\n\t        var yAxisRange = actualData.yAxis.range;\r\n\t        var isInitialize = yAxisRange.scaleFactor == void 0;\r\n\t        var trends = this.trendsManager;\r\n\t        var trendsEndXVal = trends.getEndXVal();\r\n\t        var trendsStartXVal = trends.getStartXVal();\r\n\t        var xRange = actualData.xAxis.range;\r\n\t        var xFrom = xRange.from, xTo = xRange.to;\r\n\t        var xRangeLength = xTo - xFrom;\r\n\t        var zeroVal, scaleFactor, scroll, zoom, needToZoom;\r\n\t        // check situation when state was scrolled behind trends end or before trends start\r\n\t        if (xTo > trendsEndXVal) {\r\n\t            xTo = trendsEndXVal;\r\n\t            xFrom = xTo - xRangeLength;\r\n\t        }\r\n\t        else if (xFrom < trendsStartXVal) {\r\n\t            xFrom = trendsStartXVal;\r\n\t            xTo = xFrom + xRangeLength;\r\n\t        }\r\n\t        var maxY = trends.getMaxYVal(xFrom, xTo);\r\n\t        var minY = trends.getMinYVal(xFrom, xTo);\r\n\t        var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\r\n\t        if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\r\n\t            if (trendLastY > maxY)\r\n\t                maxY = trendLastY;\r\n\t            if (trendLastY < minY)\r\n\t                minY = trendLastY;\r\n\t        }\r\n\t        if (yAxisRange.isMirrorMode) {\r\n\t            if (yAxisRange.zeroVal == void 0)\r\n\t                Utils_1.Utils.error('range.zeroVal must be set when range.isMirrorMode');\r\n\t            var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\r\n\t            var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\r\n\t            var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\r\n\t            maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\r\n\t            minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\r\n\t        }\r\n\t        var margin = yAxisRange.margin;\r\n\t        var padding = {\r\n\t            start: yAxisRange.padding.start + margin.start,\r\n\t            end: yAxisRange.padding.end + margin.end\r\n\t        };\r\n\t        if (padding.end + padding.start >= actualData.height) {\r\n\t            Utils_1.Utils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\r\n\t        }\r\n\t        var rangeLength = maxY - minY;\r\n\t        var paddingTopInPercents = padding.end / actualData.height;\r\n\t        var paddingBottomInPercents = padding.start / actualData.height;\r\n\t        var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\r\n\t        var visibleRangeLength = rangeLength / rangeLengthInPercents;\r\n\t        var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\r\n\t        var toVal = maxY + visibleRangeLength * paddingTopInPercents;\r\n\t        if (isInitialize) {\r\n\t            zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\r\n\t            scaleFactor = actualData.height / (toVal - fromVal);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t            needToZoom = true;\r\n\t        }\r\n\t        else {\r\n\t            scaleFactor = yAxisRange.scaleFactor;\r\n\t            zeroVal = yAxisRange.zeroVal;\r\n\t            var maxScreenY = Math.round(this.getScreenYByValue(maxY));\r\n\t            var minScreenY = Math.round(this.getScreenYByValue(minY));\r\n\t            needToZoom = (maxScreenY > actualData.height - margin.end ||\r\n\t                maxScreenY < actualData.height - padding.end ||\r\n\t                minScreenY < margin.start ||\r\n\t                minScreenY > padding.start);\r\n\t        }\r\n\t        if (!needToZoom)\r\n\t            return null;\r\n\t        scroll = fromVal - zeroVal;\r\n\t        zoom = (actualData.height / (toVal - fromVal)) / scaleFactor;\r\n\t        var currentAxisRange = this.state.yAxis.range;\r\n\t        if (currentAxisRange.from !== fromVal)\r\n\t            patch.range.from = fromVal;\r\n\t        if (currentAxisRange.to !== toVal)\r\n\t            patch.range.to = toVal;\r\n\t        if (currentAxisRange.scroll !== scroll)\r\n\t            patch.range.scroll = scroll;\r\n\t        if (currentAxisRange.zoom !== zoom)\r\n\t            patch.range.zoom = zoom;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.zoom = function (zoomValue, origin) {\r\n\t        var _this = this;\r\n\t        if (origin === void 0) { origin = 0.5; }\r\n\t        var _a = this.state.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\r\n\t        var newZoom = zoom * zoomValue;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        var nextRange = this.state.width / (scaleFactor * newZoom);\r\n\t        var newScroll = scroll + (currentRange - nextRange) * origin;\r\n\t        this.setState({ xAxis: { range: { zoom: newZoom, scroll: newScroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.zoomSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.zoomToRange = function (range, origin) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        return this.zoom(currentRange / range, origin);\r\n\t    };\r\n\t    Chart.prototype.scrollToEnd = function () {\r\n\t        var _this = this;\r\n\t        var state = this.state;\r\n\t        var endXVal = this.trendsManager.getEndXVal();\r\n\t        var range = state.xAxis.range;\r\n\t        var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\r\n\t        this.setState({ xAxis: { range: { scroll: scroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.scrollSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to xVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to yVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Chart.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns x value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenX = function (x) {\r\n\t        var _a = this.state.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenY = function (y) {\r\n\t        var _a = this.state.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen x value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenYByValue = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByYAxis(yVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Chart.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    Chart.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    Chart.prototype.getScreenLeftVal = function () {\r\n\t        return this.getValueByScreenX(0);\r\n\t    };\r\n\t    Chart.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.state.width);\r\n\t    };\r\n\t    Chart.prototype.getPaddingRight = function () {\r\n\t        return this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\r\n\t    };\r\n\t    return Chart;\r\n\t}());\r\n\texports.Chart = Chart;\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendSegmentsManager_1 = __webpack_require__(15);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tvar EVENTS = {\r\n\t    CHANGE: 'Change',\r\n\t    PREPEND_REQUEST: 'prependRequest'\r\n\t};\r\n\t(function (TREND_TYPE) {\r\n\t    TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\r\n\t    TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\r\n\t})(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\r\n\tvar TREND_TYPE = exports.TREND_TYPE;\r\n\tvar Trend = (function () {\r\n\t    function Trend(chartState, trendName, initialState) {\r\n\t        this.minXVal = Infinity;\r\n\t        this.minYVal = Infinity;\r\n\t        this.maxXVal = -Infinity;\r\n\t        this.maxYVal = -Infinity;\r\n\t        var options = initialState.trends[trendName];\r\n\t        this.name = trendName;\r\n\t        this.chartState = chartState;\r\n\t        this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.state.trendDefaultState, options);\r\n\t        this.calculatedOptions.name = trendName;\r\n\t        if (options.dataset)\r\n\t            this.calculatedOptions.data = Trend.prepareData(options.dataset);\r\n\t        this.calculatedOptions.dataset = [];\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    Trend.prototype.onInitialStateApplied = function () {\r\n\t        this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\r\n\t    };\r\n\t    Trend.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var chartState = this.chartState;\r\n\t        chartState.onInitialStateApplied(function () { return _this.onInitialStateApplied(); });\r\n\t        chartState.onScrollStop(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onZoom(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onTrendChange(function (trendName, changedOptions, newData) { return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData); });\r\n\t        chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    Trend.prototype.getCalculatedOptions = function () {\r\n\t        return this.calculatedOptions;\r\n\t    };\r\n\t    Trend.prototype.appendData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData());\r\n\t        var updatedTrendData = options.data.concat(newData);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.prependData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData(), true);\r\n\t        var updatedTrendData = newData.concat(options.data);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.changeData = function (allData, newData) {\r\n\t        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\r\n\t            var item = newData_1[_i];\r\n\t            if (item.xVal < this.minXVal)\r\n\t                this.minXVal = item.xVal;\r\n\t            if (item.xVal > this.maxXVal)\r\n\t                this.maxXVal = item.xVal;\r\n\t            if (item.yVal < this.minYVal)\r\n\t                this.minYVal = item.yVal;\r\n\t            if (item.yVal > this.maxYVal)\r\n\t                this.maxYVal = item.yVal;\r\n\t        }\r\n\t        var options = this.getOptions();\r\n\t        var statePatch = { trends: (_a = {}, _a[options.name] = { data: allData }, _a) };\r\n\t        this.chartState.setState(statePatch, newData);\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.getData = function (fromX, toX) {\r\n\t        var data = this.getOptions().data;\r\n\t        if (fromX == void 0 && toX == void 0)\r\n\t            return data;\r\n\t        fromX = fromX !== void 0 ? fromX : data[0].xVal;\r\n\t        toX = toX !== void 0 ? toX : data[data.length].xVal;\r\n\t        var filteredData = [];\r\n\t        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\r\n\t            var item = data_1[_i];\r\n\t            if (item.xVal < fromX)\r\n\t                continue;\r\n\t            if (item.xVal > toX)\r\n\t                break;\r\n\t            filteredData.push(item);\r\n\t        }\r\n\t        return filteredData;\r\n\t    };\r\n\t    Trend.prototype.getFirstItem = function () {\r\n\t        return this.getOptions().data[0];\r\n\t    };\r\n\t    Trend.prototype.getLastItem = function () {\r\n\t        var data = this.getOptions().data;\r\n\t        return data[data.length - 1];\r\n\t    };\r\n\t    Trend.prototype.getOptions = function () {\r\n\t        return this.chartState.state.trends[this.name];\r\n\t    };\r\n\t    Trend.prototype.setOptions = function (options) {\r\n\t        this.chartState.setState({ trends: (_a = {}, _a[this.name] = options, _a) });\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.onPrependRequest = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.PREPEND_REQUEST, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for Chart.onTrendChange\r\n\t     */\r\n\t    Trend.prototype.onChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.CHANGE, cb);\r\n\t        return function () { _this.ee.off(EVENTS.CHANGE, cb); };\r\n\t    };\r\n\t    Trend.prototype.onDataChange = function (cb) {\r\n\t        var _this = this;\r\n\t        var onChangeCb = function (changedOptions, newData) {\r\n\t            if (newData)\r\n\t                cb(newData);\r\n\t        };\r\n\t        this.ee.on(EVENTS.CHANGE, onChangeCb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.CHANGE, onChangeCb);\r\n\t        };\r\n\t    };\r\n\t    Trend.prototype.checkForPrependRequest = function () {\r\n\t        var _this = this;\r\n\t        if (this.prependRequest)\r\n\t            return;\r\n\t        var chartState = this.chartState;\r\n\t        var minXVal = chartState.state.computedData.trends.minXVal;\r\n\t        var minScreenX = chartState.getScreenXByValue(minXVal);\r\n\t        var needToRequest = minScreenX > 0;\r\n\t        var _a = chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var requestedDataLength = to - from;\r\n\t        if (!needToRequest)\r\n\t            return;\r\n\t        this.prependRequest = new deps_1.Promise(function (resolve, reject) {\r\n\t            _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\r\n\t        });\r\n\t        this.prependRequest.then(function (newData) {\r\n\t            _this.prependData(newData);\r\n\t            _this.prependRequest = null;\r\n\t        }, function () {\r\n\t            _this.prependRequest = null;\r\n\t        });\r\n\t    };\r\n\t    Trend.prepareData = function (newData, currentData, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var data = [];\r\n\t        if (typeof newData[0] == 'number') {\r\n\t            currentData = currentData || [];\r\n\t            var initialItem = void 0;\r\n\t            var xVal = void 0;\r\n\t            if (isPrepend) {\r\n\t                initialItem = currentData[0];\r\n\t                xVal = initialItem.xVal - newData.length;\r\n\t            }\r\n\t            else {\r\n\t                initialItem = currentData[currentData.length - 1];\r\n\t                xVal = initialItem ? initialItem.xVal + 1 : 0;\r\n\t            }\r\n\t            for (var _i = 0, _a = newData; _i < _a.length; _i++) {\r\n\t                var yVal = _a[_i];\r\n\t                data.push({ xVal: xVal, yVal: yVal, id: Utils_1.Utils.getUid() });\r\n\t                xVal++;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            data = newData;\r\n\t        }\r\n\t        return data;\r\n\t    };\r\n\t    return Trend;\r\n\t}());\r\n\texports.Trend = Trend;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar MAX_ANIMATED_SEGMENTS = 100;\r\n\tvar EVENTS = {\r\n\t    REBUILD: 'rebuild',\r\n\t    DISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\r\n\t    ANIMATION_FRAME: 'animationFrame'\r\n\t};\r\n\t/**\r\n\t *  Class helps to display and animate trends segments\r\n\t */\r\n\tvar TrendSegmentsManager = (function () {\r\n\t    function TrendSegmentsManager(chartState, trend) {\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.segmentsLength = 0;\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForPrepend = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.trend = trend;\r\n\t        this.maxSegmentLength = trend.getOptions().maxSegmentLength;\r\n\t        this.tryToRebuildSegments();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendSegmentsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.trend.onChange(function (changedOptions, newData) { return _this.onTrendChangeHandler(changedOptions, newData); });\r\n\t        this.chartState.onZoom(function () { return _this.onZoomHandler(); });\r\n\t        this.chartState.onScroll(function () { return _this.recalculateDisplayedRange(); });\r\n\t        this.chartState.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.appendAnimation && this.appendAnimation.kill();\r\n\t        this.prependAnimation && this.prependAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onZoomHandler = function () {\r\n\t        var segmentsRebuilded = this.tryToRebuildSegments();\r\n\t        if (!segmentsRebuilded) {\r\n\t            this.recalculateDisplayedRange();\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onTrendChangeHandler = function (changedOptions, newData) {\r\n\t        var needToRebuildSegments = (changedOptions.type != void 0 ||\r\n\t            changedOptions.maxSegmentLength != void 0);\r\n\t        if (needToRebuildSegments) {\r\n\t            this.tryToRebuildSegments(true);\r\n\t            return;\r\n\t        }\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var data = this.trend.getData();\r\n\t        var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t        isAppend ? this.appendData(newData) : this.prependData(newData);\r\n\t        this.recalculateDisplayedRange();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getSegment = function (id) {\r\n\t        return this.segmentsById[id];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getEndSegment = function () {\r\n\t        return this.segmentsById[this.endSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getStartSegment = function () {\r\n\t        return this.segmentsById[this.startSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.tryToRebuildSegments = function (force) {\r\n\t        if (force === void 0) { force = false; }\r\n\t        var options = this.trend.getOptions();\r\n\t        var trendTypeName = Trend_1.TREND_TYPE[options.type];\r\n\t        var trendTypesSettings = options.settingsForTypes;\r\n\t        var trendTypeSettings = trendTypesSettings[trendTypeName];\r\n\t        var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\r\n\t        var needToRebuild = this.segments.length === 0 || force;\r\n\t        var segmentLength = this.maxSegmentLength;\r\n\t        // call toFixed(2) to prevent floating segment error compare\r\n\t        var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\r\n\t        var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\r\n\t        if (currentSegmentLengthInPx < minSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\r\n\t        }\r\n\t        else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\r\n\t        }\r\n\t        if (!needToRebuild)\r\n\t            return false;\r\n\t        this.maxSegmentLength = segmentLength;\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.segmentsLength = 0;\r\n\t        this.stopAllAnimations();\r\n\t        this.appendData(null, true);\r\n\t        this.recalculateDisplayedRange(true);\r\n\t        this.ee.emit(EVENTS.REBUILD);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.stopAllAnimations = function () {\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        if (this.prependAnimation)\r\n\t            this.prependAnimation.kill();\r\n\t        if (this.appendAnimation)\r\n\t            this.appendAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.recalculateDisplayedRange = function (segmentsAreRebuilded) {\r\n\t        if (segmentsAreRebuilded === void 0) { segmentsAreRebuilded = false; }\r\n\t        var _a = this.chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\r\n\t        var displayedRange = to - from;\r\n\t        this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\r\n\t        this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\r\n\t        this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\r\n\t        this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\r\n\t        if (segmentsAreRebuilded)\r\n\t            return;\r\n\t        var displayedRangeChanged = (firstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\r\n\t            lastDisplayedSegment.id !== this.lastDisplayedSegment.id);\r\n\t        if (displayedRangeChanged)\r\n\t            this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\r\n\t    };\r\n\t    // getSegments(fromX?: number, toX?: number): TrendSegment[] {\r\n\t    // \tvar segments = this.segments;\r\n\t    // \tif (fromX == void 0 && toX == void 0) return segments;\r\n\t    // \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\r\n\t    // \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\r\n\t    // \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\r\n\t    // \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\r\n\t    // \treturn segments.slice(startSegmentInd, endSegmentInd);\r\n\t    // }\r\n\t    /**\r\n\t     * returns array of segments for values array\r\n\t     * values must be sorted!\r\n\t     */\r\n\t    TrendSegmentsManager.prototype.getSegmentsForXValues = function (values) {\r\n\t        var valueInd = 0;\r\n\t        var value = values[valueInd];\r\n\t        var lastValueInd = values.length - 1;\r\n\t        var results = [];\r\n\t        var segment = this.getStartSegment();\r\n\t        if (!segment.hasValue)\r\n\t            return [];\r\n\t        while (segment) {\r\n\t            while (value < segment.startXVal) {\r\n\t                results.push(void 0);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            while (value > segment.endXVal) {\r\n\t                segment = segment.getNext();\r\n\t                if (!segment)\r\n\t                    break;\r\n\t            }\r\n\t            var valueInPoint = (segment.startXVal == value || segment.endXVal == value ||\r\n\t                (segment.startXVal < value && segment.endXVal > value));\r\n\t            if (valueInPoint) {\r\n\t                results.push(segment);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            if (valueInd > lastValueInd)\r\n\t                break;\r\n\t        }\r\n\t        return results;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrame = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onRebuild = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.REBUILD, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDisplayedRangeChanged = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocateNextSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var prevSegment = this.segmentsById[this.endSegmentId];\r\n\t        if (prevSegment && prevSegment.hasValue) {\r\n\t            prevSegment.nextId = id;\r\n\t            segment.prevId = prevSegment.id;\r\n\t        }\r\n\t        this.endSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.push(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocatePrevSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var nextSegment = this.segmentsById[this.startSegmentId];\r\n\t        if (nextSegment && nextSegment.hasValue) {\r\n\t            nextSegment.prevId = id;\r\n\t            segment.nextId = nextSegment.id;\r\n\t        }\r\n\t        this.startSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.unshift(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.appendData = function (newData, needRebuildSegments) {\r\n\t        // WARNING: bottleneck method!\r\n\t        if (needRebuildSegments === void 0) { needRebuildSegments = false; }\r\n\t        // var t1 = performance.now();\r\n\t        var trendData = this.trend.getData();\r\n\t        if (needRebuildSegments) {\r\n\t            newData = trendData;\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t        }\r\n\t        var startItemInd = trendData.length - newData.length;\r\n\t        var segment = this.getEndSegment() || this.allocateNextSegment();\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        var itemInd = 0;\r\n\t        while (itemInd < newData.length) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.appendItem(item);\r\n\t            var isLastItem = itemInd == newData.length - 1;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd++;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForAppend.length > 0) {\r\n\t                    segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\r\n\t                    segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForAppend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocateNextSegment();\r\n\t            var prevItem = trendData[startItemInd + itemInd - 1];\r\n\t            segment.appendItem(prevItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        // var t2 = performance.now();\r\n\t        // console.log(t2 - t1);\r\n\t        // do not create animation if segments was rebuilded\r\n\t        if (needRebuildSegments) {\r\n\t            for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\r\n\t                var segmentId = _a[_i];\r\n\t                var segment_1 = this.segmentsById[segmentId];\r\n\t                segment_1.currentAnimationState = segment_1.createAnimationState();\r\n\t            }\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t            return;\r\n\t        }\r\n\t        if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time);\r\n\t    };\r\n\t    // TODO: refactor duplicated code from appendData\r\n\t    TrendSegmentsManager.prototype.prependData = function (newData) {\r\n\t        var trendData = this.trend.getData();\r\n\t        var segment = this.getStartSegment() || this.segmentsById[0];\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var itemInd = newData.length - 1;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        while (itemInd >= 0) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.prependItem(item);\r\n\t            var isLastItem = itemInd == 0;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd--;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForPrepend.length > 0) {\r\n\t                    segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\r\n\t                    segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForPrepend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocatePrevSegment();\r\n\t            var nextItem = trendData[itemInd + 1];\r\n\t            segment.prependItem(nextItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time, true);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.animate = function (time, isPrepend) {\r\n\t        var _this = this;\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\r\n\t        if ((animation && animation.isActive()) || time == 0) {\r\n\t            if (animation)\r\n\t                animation.kill();\r\n\t            this.onAnimationFrameHandler(1, isPrepend);\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            return;\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var ease = animationsOptions.trendChangeEase;\r\n\t        var objectToAnimate = { animationValue: 0 };\r\n\t        animation = TweenLite.to(objectToAnimate, time, { animationValue: 1, ease: ease });\r\n\t        animation.eventCallback('onUpdate', function () { return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend); });\r\n\t        animation.eventCallback('onComplete', function () {\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            _this.appendAnimation = null;\r\n\t        });\r\n\t        if (isPrepend) {\r\n\t            this.prependAnimation = animation;\r\n\t        }\r\n\t        else {\r\n\t            this.appendAnimation = animation;\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrameHandler = function (coefficient, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\r\n\t            var segmentId = animatedSegmentsIds_1[_i];\r\n\t            var segment = this.segmentsById[segmentId];\r\n\t            for (var key in segment.targetAnimationState) {\r\n\t                var targetValue = segment.targetAnimationState[key];\r\n\t                var initialValue = segment.initialAnimationState[key];\r\n\t                var currentValue = initialValue + (targetValue - initialValue) * coefficient;\r\n\t                segment.currentAnimationState[key] = currentValue;\r\n\t            }\r\n\t        }\r\n\t        this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\r\n\t        this.ee.emit(EVENTS.ANIMATION_FRAME, this);\r\n\t    };\r\n\t    return TrendSegmentsManager;\r\n\t}());\r\n\texports.TrendSegmentsManager = TrendSegmentsManager;\r\n\tvar TrendSegment = (function () {\r\n\t    function TrendSegment(trendPoints, id) {\r\n\t        this.isCompleted = false;\r\n\t        this.items = [];\r\n\t        this.initialAnimationState = {};\r\n\t        this.targetAnimationState = {};\r\n\t        this.currentAnimationState = {};\r\n\t        this.trendSegments = trendPoints;\r\n\t        this.id = id;\r\n\t        this.maxLength = trendPoints.maxSegmentLength;\r\n\t    }\r\n\t    TrendSegment.prototype.createAnimationState = function () {\r\n\t        var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\r\n\t        return {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal,\r\n\t            startXVal: startXVal,\r\n\t            startYVal: startYVal,\r\n\t            endXVal: endXVal,\r\n\t            endYVal: endYVal,\r\n\t            maxYVal: maxYVal,\r\n\t            minYVal: minYVal,\r\n\t            maxLength: maxLength\r\n\t        };\r\n\t    };\r\n\t    ;\r\n\t    TrendSegment.prototype.appendItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.push(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var startXVal = items[0].xVal;\r\n\t        if (item.xVal - startXVal > this.maxLength)\r\n\t            return false;\r\n\t        items.push(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.prependItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.unshift(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var endXVal = items[items.length - 1].xVal;\r\n\t        if (endXVal - item.xVal > this.maxLength)\r\n\t            return false;\r\n\t        items.unshift(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.complete = function () {\r\n\t        this.isCompleted = true;\r\n\t        this.recalculateItems();\r\n\t        this.items = []; // free memory for completed ranges\r\n\t    };\r\n\t    TrendSegment.prototype.recalculateItems = function () {\r\n\t        var items = this.items;\r\n\t        var itemsLength = items.length;\r\n\t        if (itemsLength === 0)\r\n\t            Utils_1.Utils.error('Unable to create TrendSegment without TrendItems');\r\n\t        var endItem = items[itemsLength - 1];\r\n\t        var endXVal = endItem.xVal, endYVal = endItem.yVal;\r\n\t        var startXVal, startYVal;\r\n\t        var startItem = items[0];\r\n\t        startXVal = startItem.xVal;\r\n\t        startYVal = startItem.yVal;\r\n\t        var minX = Math.min(startXVal, endXVal);\r\n\t        var maxX = Math.max(startXVal, endXVal);\r\n\t        var middleXVal = minX + (maxX - minX) / 2;\r\n\t        var minY = Math.min(startYVal, endYVal);\r\n\t        var maxY = Math.max(startYVal, endYVal);\r\n\t        var middleYVal = minY + (maxY - minY) / 2;\r\n\t        var yVals = items.map(function (item) { return item.yVal; });\r\n\t        this.startXVal = startXVal;\r\n\t        this.startYVal = startYVal;\r\n\t        this.endXVal = endXVal;\r\n\t        this.endYVal = endYVal;\r\n\t        this.xVal = middleXVal;\r\n\t        this.yVal = middleYVal;\r\n\t        this.maxYVal = Math.max.apply(Math, yVals);\r\n\t        this.minYVal = Math.min.apply(Math, yVals);\r\n\t        if (!this.currentAnimationState)\r\n\t            this.currentAnimationState = this.createAnimationState();\r\n\t    };\r\n\t    TrendSegment.prototype.getNext = function () {\r\n\t        var nextPoint = this.trendSegments.segmentsById[this.nextId];\r\n\t        return nextPoint && nextPoint.hasValue ? nextPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getPrev = function () {\r\n\t        var prevPoint = this.trendSegments.segmentsById[this.prevId];\r\n\t        return prevPoint && prevPoint.hasValue ? prevPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getFrameVal = function () {\r\n\t        var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\r\n\t        return new Vector3(xVal, yVal, 0);\r\n\t    };\r\n\t    TrendSegment.prototype.getFramePoint = function () {\r\n\t        var frameVal = this.getFrameVal();\r\n\t        return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\r\n\t    };\r\n\t    return TrendSegment;\r\n\t}());\r\n\texports.TrendSegment = TrendSegment;\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar EVENTS = {\r\n\t    SEGMENTS_REBUILDED: 'segmentsRebuilded'\r\n\t};\r\n\t/**\r\n\t * Trends manager\r\n\t */\r\n\tvar TrendsManager = (function () {\r\n\t    function TrendsManager(state, initialState) {\r\n\t        this.trends = {};\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.chartState = state;\r\n\t        var trendsCalculatedOptions = {};\r\n\t        for (var trendName in initialState.trends) {\r\n\t            var trend = this.createTrend(state, trendName, initialState);\r\n\t            trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\r\n\t        }\r\n\t        this.calculatedOptions = trendsCalculatedOptions;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendsManager.prototype.getTrend = function (trendName) {\r\n\t        return this.trends[trendName];\r\n\t    };\r\n\t    TrendsManager.prototype.getEnabledTrends = function () {\r\n\t        var enabledTrends = [];\r\n\t        var allTrends = this.trends;\r\n\t        for (var trendName in allTrends) {\r\n\t            var trend = allTrends[trendName];\r\n\t            trend.getOptions().enabled && enabledTrends.push(trend);\r\n\t        }\r\n\t        return enabledTrends;\r\n\t    };\r\n\t    TrendsManager.prototype.getStartXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        return trends[0].getData()[0].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getEndXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var firstTrendData = trends[0].getData();\r\n\t        return firstTrendData[firstTrendData.length - 1].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getExtremumYVal = function (extremumIsMax, fromX, toX) {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var compareFn;\r\n\t        var result;\r\n\t        if (extremumIsMax) {\r\n\t            result = -Infinity;\r\n\t            compareFn = Math.max;\r\n\t        }\r\n\t        else {\r\n\t            result = Infinity;\r\n\t            compareFn = Math.min;\r\n\t        }\r\n\t        for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\r\n\t            var trend = trends_1[_i];\r\n\t            var trendData = trend.getData(fromX, toX);\r\n\t            var trendYValues = trendData.map(function (dataItem) { return dataItem.yVal; });\r\n\t            result = compareFn.apply(void 0, [result].concat(trendYValues));\r\n\t        }\r\n\t        if (result == Infinity || result == -Infinity)\r\n\t            result = NaN;\r\n\t        return result;\r\n\t    };\r\n\t    TrendsManager.prototype.getMaxYVal = function (fromX, toX) { return this.getExtremumYVal(true, fromX, toX); };\r\n\t    TrendsManager.prototype.getMinYVal = function (fromX, toX) { return this.getExtremumYVal(false, fromX, toX); };\r\n\t    TrendsManager.prototype.onSegmentsRebuilded = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\r\n\t    };\r\n\t    TrendsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onInitialStateApplied(function () { return _this.onInitialStateAppliedHandler(); });\r\n\t    };\r\n\t    TrendsManager.prototype.onInitialStateAppliedHandler = function () {\r\n\t        var _this = this;\r\n\t        var _loop_1 = function(trendName) {\r\n\t            this_1.trends[trendName].segmentsManager.onRebuild(function () { return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName); });\r\n\t        };\r\n\t        var this_1 = this;\r\n\t        for (var trendName in this.trends) {\r\n\t            _loop_1(trendName);\r\n\t        }\r\n\t    };\r\n\t    TrendsManager.prototype.createTrend = function (state, trendName, initialState) {\r\n\t        var trend = new Trend_1.Trend(state, trendName, initialState);\r\n\t        this.trends[trendName] = trend;\r\n\t        return trend;\r\n\t    };\r\n\t    return TrendsManager;\r\n\t}());\r\n\texports.TrendsManager = TrendsManager;\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\t/**\r\n\t * manage camera, and contains methods for transforming pixels to values\r\n\t */\r\n\tvar Screen = (function () {\r\n\t    function Screen(chartState) {\r\n\t        this.options = { scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1 };\r\n\t        this.currentScrollX = { x: 0 };\r\n\t        this.currentScrollY = { y: 0 };\r\n\t        this.currentZoomX = { val: 1 };\r\n\t        this.currentZoomY = { val: 1 };\r\n\t        this.chartState = chartState;\r\n\t        var _a = chartState.state, w = _a.width, h = _a.height;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.transform({\r\n\t            scrollY: this.valueToPxByYAxis(this.chartState.state.yAxis.range.scroll),\r\n\t            zoomY: 1\r\n\t        });\r\n\t        this.bindEvents();\r\n\t        //camera.position.z = 1500;\r\n\t    }\r\n\t    Screen.prototype.getCameraSettings = function () {\r\n\t        var _a = this.chartState.state, w = _a.width, h = _a.height;\r\n\t        // settings for pixel-perfect camera\r\n\t        var FOV = 75;\r\n\t        var vFOV = FOV * (Math.PI / 180);\r\n\t        return {\r\n\t            FOV: FOV,\r\n\t            aspect: w / h,\r\n\t            near: 0.1,\r\n\t            far: 5000,\r\n\t            z: h / (2 * Math.tan(vFOV / 2)),\r\n\t            // move 0,0 to left-bottom corner\r\n\t            x: w / 2,\r\n\t            y: h / 2\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onZoomFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'zoomFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onScrollFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'scrollFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onTransformationFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'transformationFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.cameraIsMoving = function () {\r\n\t        return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() ||\r\n\t            this.zoomXAnimation && this.zoomXAnimation.isActive());\r\n\t    };\r\n\t    Screen.prototype.transform = function (options, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\r\n\t        if (scrollX != void 0)\r\n\t            this.options.scrollX = scrollX;\r\n\t        if (scrollY != void 0)\r\n\t            this.options.scrollY = scrollY;\r\n\t        if (zoomX != void 0)\r\n\t            this.options.zoomX = zoomX;\r\n\t        if (zoomY != void 0)\r\n\t            this.options.zoomY = zoomY;\r\n\t        if (scrollX != void 0 || zoomX) {\r\n\t            options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\r\n\t            this.options.scrollXVal = options.scrollXVal;\r\n\t        }\r\n\t        if (scrollY != void 0 || zoomY) {\r\n\t            options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\r\n\t            this.options.scrollYVal = options.scrollYVal;\r\n\t        }\r\n\t        if (silent)\r\n\t            return;\r\n\t        this.ee.emit('transformationFrame', options);\r\n\t        if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\r\n\t            this.ee.emit('scrollFrame', options);\r\n\t        }\r\n\t        if (options.zoomX != void 0 || options.zoomY != void 0) {\r\n\t            this.ee.emit('zoomFrame', options);\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        // handle scroll and zoom\r\n\t        state.onChange(function (changedProps) {\r\n\t            if (changedProps.xAxis && changedProps.xAxis.range) {\r\n\t                if (changedProps.xAxis.range.scroll != void 0)\r\n\t                    _this.onScrollXHandler(changedProps);\r\n\t                if (changedProps.xAxis.range.zoom)\r\n\t                    _this.onZoomXHandler();\r\n\t            }\r\n\t            if (changedProps.yAxis && changedProps.yAxis.range) {\r\n\t                if (changedProps.yAxis.range.scroll != void 0)\r\n\t                    _this.onScrollYHandler();\r\n\t                if (changedProps.yAxis.range.zoom)\r\n\t                    _this.onZoomYHandler();\r\n\t            }\r\n\t        });\r\n\t        state.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    Screen.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.scrollXAnimation && this.scrollXAnimation.kill();\r\n\t        this.scrollYAnimation && this.scrollYAnimation.kill();\r\n\t        this.zoomXAnimation && this.zoomXAnimation.kill();\r\n\t        this.zoomYAnimation && this.zoomYAnimation.kill();\r\n\t    };\r\n\t    Screen.prototype.onScrollXHandler = function (changedProps) {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var isDragMode = state.state.cursor.dragMode;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled && !isDragMode;\r\n\t        var zoomXChanged = changedProps.xAxis.range.zoom;\r\n\t        var isAutoscroll = state.state.autoScroll && !isDragMode && !zoomXChanged;\r\n\t        var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\r\n\t        var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\r\n\t        if (this.scrollXAnimation)\r\n\t            this.scrollXAnimation.pause();\r\n\t        var range = state.state.xAxis.range;\r\n\t        var targetX = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollX.x = this.options.scrollX;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollX: _this.currentScrollX.x });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\r\n\t                x: targetX, ease: ease\r\n\t            });\r\n\t            this.scrollXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollX.x = targetX;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onScrollYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        if (this.scrollYAnimation)\r\n\t            this.scrollYAnimation.pause();\r\n\t        var range = state.state.yAxis.range;\r\n\t        var targetY = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollY.y = this.options.scrollY;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollY: _this.currentScrollY.y });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\r\n\t                y: targetY, ease: animations.zoomEase\r\n\t            });\r\n\t            this.scrollYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollY.y = targetY;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomXHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.state.xAxis.range.zoom;\r\n\t        if (this.zoomXAnimation)\r\n\t            this.zoomXAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomX: _this.currentZoomX.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomX.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.state.yAxis.range.zoom;\r\n\t        if (this.zoomYAnimation)\r\n\t            this.zoomYAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomY: _this.currentZoomY.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomY.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.chartState.state.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomX;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.chartState.state.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomY;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Screen.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.chartState.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.chartState.state.xAxis.range.scaleFactor * this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.chartState.state.yAxis.range.scaleFactor * this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.chartState.state.xAxis.range.scaleFactor / this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.chartState.state.yAxis.range.scaleFactor / this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollX value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenX = function (x) {\r\n\t        return this.chartState.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollY value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenY = function (y) {\r\n\t        return this.chartState.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    //\r\n\t    /**\r\n\t     *  returns screen scrollX value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.chartState.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    // /**\r\n\t    //  *  returns screen scrollY value by screen scrollY coordinate\r\n\t    //  */\r\n\t    // getScreenYByValue(scrollYVal: number): number {\r\n\t    // \tvar {scroll, zeroVal} = this.state.yAxis.range;\r\n\t    // \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\r\n\t    // }\r\n\t    //\r\n\t    //\r\n\t    /**\r\n\t     * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Screen.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenY = function (screenY) {\r\n\t        return this.getPointOnYAxis(this.getValueByScreenY(screenY));\r\n\t    };\r\n\t    Screen.prototype.getTop = function () {\r\n\t        return this.getPointByScreenY(this.chartState.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottom = function () {\r\n\t        return this.getPointByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getLeft = function () {\r\n\t        return this.getPointByScreenX(0);\r\n\t    };\r\n\t    Screen.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.chartState.state.width);\r\n\t    };\r\n\t    Screen.prototype.getTopVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottomVal = function () {\r\n\t        return this.getValueByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getCenterYVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.state.height / 2);\r\n\t    };\r\n\t    return Screen;\r\n\t}());\r\n\texports.Screen = Screen;\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar AXIS_MARK_DEFAULT_OPTIONS = {\r\n\t    type: 'simple',\r\n\t    lineWidth: 1,\r\n\t    value: 0,\r\n\t    showValue: false,\r\n\t    stickToEdges: false,\r\n\t    lineColor: '#FFFFFF',\r\n\t    title: ''\r\n\t};\r\n\tvar AxisMarks = (function () {\r\n\t    function AxisMarks(chartState, axisType) {\r\n\t        this.items = {};\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.axisType = axisType;\r\n\t        var marks = this.items;\r\n\t        var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\r\n\t        for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\r\n\t            var options = axisMarksOptions_1[_i];\r\n\t            var axisMark = void 0;\r\n\t            options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\r\n\t            // set mark name\r\n\t            if (!options.name)\r\n\t                options.name = Utils_1.Utils.getUid().toString();\r\n\t            if (marks[options.name])\r\n\t                Utils_1.Utils.error('duplicated mark name ' + options.name);\r\n\t            // create mark instance based on type option\r\n\t            if (options.type == 'timeleft') {\r\n\t                axisMark = new AxisTimeleftMark(chartState, axisType, options);\r\n\t            }\r\n\t            else {\r\n\t                axisMark = new AxisMark(chartState, axisType, options);\r\n\t            }\r\n\t            marks[options.name] = axisMark;\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarks.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, newData);\r\n\t        });\r\n\t        this.chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    AxisMarks.prototype.onTrendChange = function (trendName, newData) {\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var startVal = newData[0].xVal;\r\n\t        var endVal = newData[newData.length - 1].xVal;\r\n\t        var marks = this.items;\r\n\t        for (var markName in marks) {\r\n\t            var mark = marks[markName];\r\n\t            var markVal = mark.options.value;\r\n\t            var markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\r\n\t            if (markWasCrossed)\r\n\t                this.ee.emit('markCrossed', trendName, newData);\r\n\t        }\r\n\t    };\r\n\t    AxisMarks.prototype.getItems = function () {\r\n\t        return this.items;\r\n\t    };\r\n\t    AxisMarks.prototype.getItem = function (markName) {\r\n\t        return this.items[markName];\r\n\t    };\r\n\t    return AxisMarks;\r\n\t}());\r\n\texports.AxisMarks = AxisMarks;\r\n\tvar AxisMark = (function () {\r\n\t    function AxisMark(chartState, axisType, options) {\r\n\t        this.renderOnTrendsChange = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.options = options;\r\n\t        this.axisType = axisType;\r\n\t        this.chartState = chartState;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMark.prototype.bindEvents = function () { };\r\n\t    AxisMark.prototype.setOptions = function (newOptions) {\r\n\t        var value = this.options.value;\r\n\t        this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\r\n\t        if (this.options.value !== value)\r\n\t            this.ee.emit('valueChange');\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisMark.prototype.getDisplayedVal = function () {\r\n\t        var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\r\n\t        return String(displayedValue !== void 0 ? displayedValue : value);\r\n\t    };\r\n\t    AxisMark.prototype.onMarkCrossed = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('markCrossed', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('markCrossed', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('valueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('valueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onDisplayedValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('onDisplayedValueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('onDisplayedValueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.typeName = 'simple';\r\n\t    return AxisMark;\r\n\t}());\r\n\texports.AxisMark = AxisMark;\r\n\tvar AxisTimeleftMark = (function (_super) {\r\n\t    __extends(AxisTimeleftMark, _super);\r\n\t    function AxisTimeleftMark() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.renderOnTrendsChange = true;\r\n\t    }\r\n\t    AxisTimeleftMark.prototype.getDisplayedVal = function () {\r\n\t        var markVal = this.options.value;\r\n\t        var maxXVal = this.chartState.state.computedData.trends.maxXVal;\r\n\t        var time = markVal - maxXVal;\r\n\t        if (time < 0)\r\n\t            time = 0;\r\n\t        return Utils_1.Utils.msToTimeString(time);\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.onTrendsChange = function () {\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisTimeleftMark.typeName = 'timeleft';\r\n\t    return AxisTimeleftMark;\r\n\t}(AxisMark));\r\n\texports.AxisTimeleftMark = AxisTimeleftMark;\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t(function (AXIS_RANGE_TYPE) {\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\"; // TODO: AXIS_RANGE_TYPE.ALL\r\n\t})(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\r\n\tvar AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\r\n\t;\r\n\t(function (AXIS_TYPE) {\r\n\t    AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\r\n\t    AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\r\n\t})(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\r\n\tvar AXIS_TYPE = exports.AXIS_TYPE;\r\n\t(function (AXIS_DATA_TYPE) {\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\r\n\t})(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\r\n\tvar AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * base class for all widgets\r\n\t * each widget must have widgetName static property\r\n\t */\r\n\tvar ChartWidget = (function () {\r\n\t    function ChartWidget() {\r\n\t        this.unbindList = [];\r\n\t    }\r\n\t    ChartWidget.prototype.setupChart = function (chart) {\r\n\t        this.chart = chart;\r\n\t    };\r\n\t    ChartWidget.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unbindList = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unbindList.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unbindList.push.apply(unbindList, (args));\r\n\t        }\r\n\t        (_a = this.unbindList).push.apply(_a, unbindList);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartWidget.prototype.unbindEvents = function () {\r\n\t        this.unbindList.forEach(function (unbindEvent) { return unbindEvent(); });\r\n\t        this.unbindList.length = 0;\r\n\t    };\r\n\t    ChartWidget.widgetName = '';\r\n\t    return ChartWidget;\r\n\t}());\r\n\texports.ChartWidget = ChartWidget;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar GridWidget_1 = __webpack_require__(22);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\t/**\r\n\t * widget for drawing axis\r\n\t */\r\n\tvar AxisWidget = (function (_super) {\r\n\t    __extends(AxisWidget, _super);\r\n\t    function AxisWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    AxisWidget.prototype.onReadyHandler = function () {\r\n\t        var _this = this;\r\n\t        this.object3D = new Object3D();\r\n\t        this.axisXObject = new Object3D();\r\n\t        this.axisYObject = new Object3D();\r\n\t        this.object3D.add(this.axisXObject);\r\n\t        this.object3D.add(this.axisYObject);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        // canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\r\n\t        this.updateAxisXRequest = Utils_1.Utils.throttle(function () { return _this.updateAxis(interfaces_1.AXIS_TYPE.X); }, 1000);\r\n\t        this.onScrollChange(this.chart.screen.options.scrollX, this.chart.screen.options.scrollY);\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        this.bindEvent(state.screen.onTransformationFrame(function (options) {\r\n\t            _this.onScrollChange(options.scrollX, options.scrollY);\r\n\t        }), state.screen.onZoomFrame(function (options) { _this.onZoomFrame(options); }), state.onDestroy(function () { return _this.onDestroy(); }), state.onResize(function () { return _this.onResize(); }));\r\n\t    };\r\n\t    AxisWidget.prototype.onDestroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.unbindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.onScrollChange = function (x, y) {\r\n\t        if (y != void 0) {\r\n\t            this.axisYObject.position.y = y;\r\n\t            this.axisXObject.position.y = y;\r\n\t        }\r\n\t        if (x != void 0) {\r\n\t            this.axisYObject.position.x = x;\r\n\t            this.updateAxisXRequest();\r\n\t        }\r\n\t    };\r\n\t    AxisWidget.prototype.onResize = function () {\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t    };\r\n\t    AxisWidget.prototype.setupAxis = function (orientation) {\r\n\t        var _this = this;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var canvasWidth = 0, canvasHeight = 0;\r\n\t        var axisOptions;\r\n\t        // clean meshes\r\n\t        if (isXAxis) {\r\n\t            this.axisXObject.traverse(function (obj) { return _this.axisXObject.remove(obj); });\r\n\t            canvasWidth = visibleWidth * 3;\r\n\t            canvasHeight = 50;\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t        }\r\n\t        else {\r\n\t            this.axisYObject.traverse(function (obj) { return _this.axisYObject.remove(obj); });\r\n\t            canvasWidth = 50;\r\n\t            canvasHeight = visibleHeight * 3;\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t        }\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function (ctx) {\r\n\t            var color = new Color_1.ChartColor(axisOptions.color);\r\n\t            ctx.beginPath();\r\n\t            ctx.font = _this.chart.state.font.m;\r\n\t            ctx.fillStyle = color.rgbaStr;\r\n\t            ctx.strokeStyle = color.rgbaStr;\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisXObject.add(axisMesh);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisYObject.add(axisMesh);\r\n\t        }\r\n\t        this.updateAxis(orientation);\r\n\t    };\r\n\t    AxisWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisWidget.prototype.updateAxis = function (orientation) {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var _b = this.chart.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\r\n\t        var axisOptions;\r\n\t        var axisMesh;\r\n\t        var axisGridParams;\r\n\t        if (isXAxis) {\r\n\t            axisMesh = this.axisXObject.children[0];\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh = this.axisYObject.children[0];\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\r\n\t        }\r\n\t        var geometry = axisMesh.geometry;\r\n\t        var canvasWidth = geometry.parameters.width;\r\n\t        var canvasHeight = geometry.parameters.height;\r\n\t        var texture = axisMesh.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\r\n\t        }\r\n\t        // TODO: draw text and lines in different loops\r\n\t        var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\r\n\t        var startVal = axisGridParams.start - edgeOffset;\r\n\t        var endVal = axisGridParams.end + edgeOffset;\r\n\t        ctx.beginPath();\r\n\t        for (var val = startVal; val <= endVal; val += axisGridParams.step) {\r\n\t            var displayedValue = '';\r\n\t            if (isXAxis) {\r\n\t                var pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\r\n\t                ctx.textAlign = \"center\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(pxVal + 0.5, canvasHeight);\r\n\t                // ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\r\n\t                if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\r\n\t                    displayedValue = AxisWidget.getDateStr(val, axisGridParams);\r\n\t                }\r\n\t                else {\r\n\t                    displayedValue = Number(val.toFixed(14)).toString();\r\n\t                }\r\n\t                ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\r\n\t            }\r\n\t            else {\r\n\t                var pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\r\n\t                ctx.textAlign = \"right\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(canvasWidth, pxVal + 0.5);\r\n\t                // ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\r\n\t                displayedValue = Number(val.toFixed(14)).toString();\r\n\t                ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\r\n\t            }\r\n\t            ctx.stroke();\r\n\t        }\r\n\t        // uncomment to preview canvas borders\r\n\t        // ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t        ctx.stroke();\r\n\t        ctx.closePath();\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisWidget.prototype.onZoomFrame = function (options) {\r\n\t        if (options.zoomX) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        }\r\n\t        if (options.zoomY) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        }\r\n\t    };\r\n\t    // private temporaryHideAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar timeoutId = setTimeout(() => {\r\n\t    // \t\t\tthis.showAxis(orientation);\r\n\t    // \t}, 200);\r\n\t    //\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tclearTimeout(this.showAxisXTimeout);\r\n\t    // \t\tthis.showAxisXTimeout =\ttimeoutId;\r\n\t    // \t} else {\r\n\t    // \t\tclearTimeout(this.showAxisYTimeout);\r\n\t    // \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tthis.showAxisYTimeout = timeoutId;\r\n\t    // \t}\r\n\t    // }\r\n\t    // private showAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar material: MeshBasicMaterial;\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t} else {\r\n\t    // \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t}\r\n\t    // \tthis.updateAxis(orientation);\r\n\t    // \tTweenLite.to(material, 0.3, {opacity: 1});\r\n\t    // }\r\n\t    AxisWidget.getDateStr = function (timestamp, gridParams) {\r\n\t        var sec = 1000;\r\n\t        var min = sec * 60;\r\n\t        var hour = min * 60;\r\n\t        var day = hour * 60;\r\n\t        var step = gridParams.step;\r\n\t        var d = new Date(timestamp);\r\n\t        var tf = function (num) { return Utils_1.Utils.toFixed(num, 2); };\r\n\t        return tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\r\n\t    };\r\n\t    AxisWidget.widgetName = 'Axis';\r\n\t    return AxisWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisWidget = AxisWidget;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\t/**\r\n\t * widget for drawing state grid\r\n\t */\r\n\tvar GridWidget = (function (_super) {\r\n\t    __extends(GridWidget, _super);\r\n\t    function GridWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    GridWidget.prototype.onReadyHandler = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        this.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\r\n\t        this.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\r\n\t        this.initGrid();\r\n\t        this.updateGrid();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    GridWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        // grid is bigger then screen, so it's no need to update it on each scroll event\r\n\t        var updateGridThrottled = Utils_1.Utils.throttle(function () { return _this.updateGrid(); }, 1000);\r\n\t        this.bindEvent(this.chart.onScroll(function () { return updateGridThrottled(); }), this.chart.screen.onZoomFrame(function (options) {\r\n\t            updateGridThrottled();\r\n\t            _this.onZoomFrame(options);\r\n\t        }), this.chart.onDestroy(function () {\r\n\t            _this.isDestroyed = true;\r\n\t            _this.unbindEvents();\r\n\t        }), this.chart.onResize(function () {\r\n\t            _this.updateGrid();\r\n\t        }));\r\n\t    };\r\n\t    GridWidget.prototype.initGrid = function () {\r\n\t        var color = new Color_1.ChartColor(this.chart.state.xAxis.grid.color);\r\n\t        var geometry = new THREE.Geometry();\r\n\t        var material = new THREE.LineBasicMaterial({ linewidth: 1, color: color.value, opacity: color.a, transparent: true });\r\n\t        var xLinesCount = this.gridSizeH;\r\n\t        var yLinesCount = this.gridSizeV;\r\n\t        while (xLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        while (yLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        this.lineSegments = new LineSegments(geometry, material);\r\n\t        this.lineSegments.position.setZ(-1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t    };\r\n\t    GridWidget.prototype.updateGrid = function () {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var _a = this.chart.state, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\r\n\t        var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\r\n\t        var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\r\n\t        var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\r\n\t        var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\r\n\t        var gridScrollXVal = scrollXInSegments * axisXGrid.step;\r\n\t        var gridScrollYVal = scrollYInSegments * axisYGrid.step;\r\n\t        var startXVal = axisXGrid.start + gridScrollXVal;\r\n\t        var startYVal = axisYGrid.start + gridScrollYVal;\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var vertices = geometry.vertices;\r\n\t        var lineInd = 0;\r\n\t        for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\r\n\t            var value = startXVal + i * axisXGrid.step;\r\n\t            var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\r\n\t            var value = startYVal + i * axisYGrid.step;\r\n\t            var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\r\n\t    };\r\n\t    GridWidget.prototype.getHorizontalLineSegment = function (yVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\r\n\t        var widthVal = chartState.pxToValueByXAxis(chartState.state.width);\r\n\t        return [\r\n\t            new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0),\r\n\t            new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.getVerticalLineSegment = function (xVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\r\n\t        var heightVal = chartState.pxToValueByYAxis(chartState.state.height);\r\n\t        return [\r\n\t            new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0),\r\n\t            new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.onZoomFrame = function (options) {\r\n\t        var _a = this.chart.state, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        if (options.zoomX)\r\n\t            this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\r\n\t    };\r\n\t    // TODO: move this code to core\r\n\t    GridWidget.getGridParamsForAxis = function (axisOptions, axisWidth, zoom) {\r\n\t        var axisRange = axisOptions.range;\r\n\t        var from = axisRange.from;\r\n\t        var to = axisRange.to;\r\n\t        var axisLength = to - from;\r\n\t        var gridStep = 0;\r\n\t        var gridStepInPixels = 0;\r\n\t        var minGridStepInPixels = axisOptions.grid.minSizePx;\r\n\t        var axisLengthStr = String(axisLength);\r\n\t        var axisLengthPointPosition = axisLengthStr.indexOf('.');\r\n\t        var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\r\n\t        var gridStepFound = false;\r\n\t        var digitPos = 0;\r\n\t        while (!gridStepFound) {\r\n\t            var power = intPartLength - digitPos - 1;\r\n\t            var multiplier = (Math.pow(10, power) || 1);\r\n\t            var dividers = [1, 2, 5];\r\n\t            for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\r\n\t                var nextGridStep = multiplier / dividers[dividerInd];\r\n\t                var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\r\n\t                if (nextGridStepInPixels >= minGridStepInPixels) {\r\n\t                    gridStep = nextGridStep;\r\n\t                    gridStepInPixels = nextGridStepInPixels;\r\n\t                }\r\n\t                else {\r\n\t                    gridStepFound = true;\r\n\t                    if (gridStep === 0) {\r\n\t                        gridStep = nextGridStep;\r\n\t                        gridStepInPixels = nextGridStepInPixels;\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (!gridStepFound)\r\n\t                digitPos++;\r\n\t        }\r\n\t        var gridStart = Math.floor(from / gridStep) * gridStep;\r\n\t        var gridEnd = Math.floor(to / gridStep) * gridStep;\r\n\t        return {\r\n\t            start: gridStart,\r\n\t            end: gridEnd,\r\n\t            step: gridStep,\r\n\t            stepInPx: gridStepInPixels,\r\n\t            length: gridEnd - gridStart,\r\n\t            segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\r\n\t        };\r\n\t    };\r\n\t    GridWidget.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    GridWidget.widgetName = 'Grid';\r\n\t    return GridWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.GridWidget = GridWidget;\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar ChartColor = (function () {\r\n\t    function ChartColor(color) {\r\n\t        this.set(color);\r\n\t    }\r\n\t    /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\r\n\t    /**\r\n\t     * Parse hex/rgb{a} color syntax.\r\n\t     * @input string\r\n\t     * @returns array [r,g,b{,o}]\r\n\t     */\r\n\t    ChartColor.parseColor = function (color) {\r\n\t        var cache, p = parseInt // Use p as a byte saving reference to parseInt\r\n\t        , color = color.replace(/\\s\\s*/g, ''); //var\r\n\t        // Checks for 6 digit hex and converts string to integer\r\n\t        if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\r\n\t        else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\r\n\t            cache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\r\n\t        else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\r\n\t        else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3], +cache[4]];\r\n\t        else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3]];\r\n\t        else\r\n\t            throw Error(color + ' is not supported by parseColor');\r\n\t        // Performs RGBA conversion by default\r\n\t        isNaN(cache[3]) && (cache[3] = 1);\r\n\t        return cache;\r\n\t        // Adds or removes 4th value based on rgba support\r\n\t        // Support is flipped twice to prevent erros if\r\n\t        // it's not defined\r\n\t        //return cache.slice(0,3 + !!$.support.rgba);\r\n\t    };\r\n\t    ChartColor.prototype.set = function (color) {\r\n\t        if (typeof color == 'number') {\r\n\t            color = color.toString(16);\r\n\t            color = '#' + '0'.repeat(6 - color.length) + color;\r\n\t        }\r\n\t        var colorStr = color;\r\n\t        var rgba = ChartColor.parseColor(colorStr);\r\n\t        this.r = rgba[0];\r\n\t        this.g = rgba[1];\r\n\t        this.b = rgba[2];\r\n\t        this.a = rgba[3];\r\n\t        this.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\r\n\t        this.hexStr = '#' + this.value.toString(16);\r\n\t        this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\r\n\t    };\r\n\t    return ChartColor;\r\n\t}());\r\n\texports.ChartColor = ChartColor;\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\tvar TrendsGradientWidget = (function (_super) {\r\n\t    __extends(TrendsGradientWidget, _super);\r\n\t    function TrendsGradientWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsGradientWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendGradient;\r\n\t    };\r\n\t    TrendsGradientWidget.widgetName = \"TrendsGradient\";\r\n\t    return TrendsGradientWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsGradientWidget = TrendsGradientWidget;\r\n\tvar TrendGradient = (function (_super) {\r\n\t    __extends(TrendGradient, _super);\r\n\t    function TrendGradient(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        this.visibleSegmentsCnt = 0;\r\n\t        this.trend = chartState.trendsManager.getTrend(trendName);\r\n\t        this.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments);\r\n\t        this.initGradient();\r\n\t        this.updateSegments();\r\n\t    }\r\n\t    TrendGradient.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.hasBackground;\r\n\t    };\r\n\t    TrendGradient.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            // TODO: optimize updateSegments for onDisplayedRangeChanged\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.chart.onZoom(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendGradient.prototype.getObject3D = function () {\r\n\t        return this.gradient;\r\n\t    };\r\n\t    TrendGradient.prototype.initGradient = function () {\r\n\t        var geometry = new Geometry();\r\n\t        for (var i = 0; i < this.segmentsIds.length; i++) {\r\n\t            geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\r\n\t            var ind = i * 4;\r\n\t            // gradient segment scheme\r\n\t            //\r\n\t            // vert0 +---+ vert3\r\n\t            //       |\\  |\r\n\t            // face1 | \\ | face2\r\n\t            // \t     |  \\|\r\n\t            // vert1 +---+ vert2\r\n\t            geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\r\n\t        }\r\n\t        var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\r\n\t        this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color: color.value, transparent: true, opacity: color.a }));\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.gradient.frustumCulled = false;\r\n\t    };\r\n\t    TrendGradient.prototype.onZoomFrame = function (options) {\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        var currentScale = this.gradient.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendGradient.prototype.onSegmentsAnimate = function (trendSegmentsManager) {\r\n\t        var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\r\n\t        for (var i = 0; i < this.visibleSegmentsCnt; i++) {\r\n\t            var segmentId = this.segmentsIds[i];\r\n\t            if (!animatedSegmentsIds.includes(segmentId))\r\n\t                continue;\r\n\t            this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\r\n\t        }\r\n\t        this.gradient.geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendGradient.prototype.updateSegments = function () {\r\n\t        var geometry = this.gradient.geometry;\r\n\t        var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\r\n\t        var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\r\n\t        this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\r\n\t        var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\r\n\t        if (segmentsToProcessCnt > this.segmentsIds.length) {\r\n\t            Utils_1.Utils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\r\n\t        }\r\n\t        // setup visible segments and collapse invisible\r\n\t        for (var i = 0; i <= segmentsToProcessCnt; i++) {\r\n\t            if (segmentInd <= lastDisplayedSegmentInd) {\r\n\t                var segment = trendSegments[segmentInd];\r\n\t                this.setupSegmentVertices(i, segment.currentAnimationState);\r\n\t                this.segmentsIds[i] = segment.id;\r\n\t                segmentInd++;\r\n\t            }\r\n\t            else {\r\n\t                this.setupSegmentVertices(i);\r\n\t            }\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    /**\r\n\t     * setup gradient segment by segmentState\r\n\t     * if segmentState is undefined, then collapse vertices to 0,0,0\r\n\t     */\r\n\t    TrendGradient.prototype.setupSegmentVertices = function (segmentInd, segmentState) {\r\n\t        var gradientSegmentInd = segmentInd * 4;\r\n\t        var vertices = this.gradient.geometry.vertices;\r\n\t        var topLeft = vertices[gradientSegmentInd];\r\n\t        var bottomLeft = vertices[gradientSegmentInd + 1];\r\n\t        var bottomRight = vertices[gradientSegmentInd + 2];\r\n\t        var topRight = vertices[gradientSegmentInd + 3];\r\n\t        var screenHeightVal = Math.max(this.chart.pxToValueByYAxis(this.chart.state.height), this.chart.screen.pxToValueByYAxis(this.chart.state.height));\r\n\t        if (segmentState) {\r\n\t            var startX = this.toLocalX(segmentState.startXVal);\r\n\t            var startY = this.toLocalY(segmentState.startYVal);\r\n\t            var endX = this.toLocalX(segmentState.endXVal);\r\n\t            var endY = this.toLocalY(segmentState.endYVal);\r\n\t            topLeft.set(startX, startY, 0);\r\n\t            topRight.set(endX, endY, 0);\r\n\t            bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\r\n\t            bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\r\n\t        }\r\n\t        else {\r\n\t            topLeft.set(0, 0, 0);\r\n\t            topRight.set(0, 0, 0);\r\n\t            bottomLeft.set(0, 0, 0);\r\n\t            bottomRight.set(0, 0, 0);\r\n\t        }\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    return TrendGradient;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendGradient = TrendGradient;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Object3D = THREE.Object3D;\r\n\t/**\r\n\t * abstract manager class for all trends widgets\r\n\t */\r\n\tvar TrendsWidget = (function (_super) {\r\n\t    __extends(TrendsWidget, _super);\r\n\t    function TrendsWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.widgets = {};\r\n\t    }\r\n\t    TrendsWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        this.onTrendsChange();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    TrendsWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        state.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t        state.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, changedOptions, newData);\r\n\t        });\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendsChange = function () {\r\n\t        var trendsOptions = this.chart.state.trends;\r\n\t        var TrendWidgetClass = this.getTrendWidgetClass();\r\n\t        for (var trendName in trendsOptions) {\r\n\t            var trendOptions = trendsOptions[trendName];\r\n\t            var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\r\n\t            if (widgetCanBeEnabled && !this.widgets[trendName]) {\r\n\t                this.createTrendWidget(trendName);\r\n\t            }\r\n\t            else if (!widgetCanBeEnabled && this.widgets[trendName]) {\r\n\t                this.destroyTrendWidget(trendName);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendChange = function (trendName, changedOptions, newData) {\r\n\t        var widget = this.widgets[trendName];\r\n\t        if (!widget)\r\n\t            return;\r\n\t        widget.onTrendChange(changedOptions);\r\n\t        if (newData) {\r\n\t            var data = this.chart.getTrend(trendName).getData();\r\n\t            var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t            isAppend ? widget.appendData(newData) : widget.prependData(newData);\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendsWidget.prototype.createTrendWidget = function (trendName) {\r\n\t        var WidgetConstructor = this.getTrendWidgetClass();\r\n\t        var widget = new WidgetConstructor(this.chart, trendName);\r\n\t        this.widgets[trendName] = widget;\r\n\t        var widgetObject = widget.getObject3D();\r\n\t        widgetObject.name = trendName;\r\n\t        this.object3D.add(widget.getObject3D());\r\n\t    };\r\n\t    TrendsWidget.prototype.destroyTrendWidget = function (trendName) {\r\n\t        this.widgets[trendName].onDestroy();\r\n\t        delete this.widgets[trendName];\r\n\t        var widgetObject = this.object3D.getObjectByName(trendName);\r\n\t        this.object3D.remove(widgetObject);\r\n\t    };\r\n\t    return TrendsWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.TrendsWidget = TrendsWidget;\r\n\t/**\r\n\t * based class for all trends widgets\r\n\t */\r\n\tvar TrendWidget = (function () {\r\n\t    function TrendWidget(chart, trendName) {\r\n\t        this.chart = chart;\r\n\t        this.trendName = trendName;\r\n\t        this.unbindList = [];\r\n\t        this.trend = chart.trendsManager.getTrend(trendName);\r\n\t        this.chart = chart;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendWidget.widgetIsEnabled = function (trendOptions, chart) {\r\n\t        return trendOptions.enabled;\r\n\t    };\r\n\t    TrendWidget.prototype.appendData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.prependData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.onTrendChange = function (changedOptions) { };\r\n\t    TrendWidget.prototype.onDestroy = function () {\r\n\t        for (var _i = 0, _a = this.unbindList; _i < _a.length; _i++) {\r\n\t            var unsubscriber = _a[_i];\r\n\t            unsubscriber();\r\n\t        }\r\n\t    };\r\n\t    TrendWidget.prototype.onSegmentsAnimate = function (segments) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoomFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onTransformationFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoom = function () {\r\n\t    };\r\n\t    TrendWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function (trendPoints) { return _this.onSegmentsAnimate(trendPoints); }));\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function (options) { return _this.onTransformationFrame(options); }));\r\n\t        this.bindEvent(this.chart.screen.onZoomFrame(function (options) { return _this.onZoomFrame(options); }));\r\n\t        this.bindEvent(this.chart.onZoom(function () { return _this.onZoom(); }));\r\n\t    };\r\n\t    ;\r\n\t    TrendWidget.prototype.bindEvent = function (unbind) {\r\n\t        this.unbindList.push(unbind);\r\n\t    };\r\n\t    return TrendWidget;\r\n\t}());\r\n\texports.TrendWidget = TrendWidget;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\t/**\r\n\t * widget for drawing trends lines\r\n\t */\r\n\tvar TrendsLineWidget = (function (_super) {\r\n\t    __extends(TrendsLineWidget, _super);\r\n\t    function TrendsLineWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsLineWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendLine;\r\n\t    };\r\n\t    TrendsLineWidget.widgetName = \"TrendsLine\";\r\n\t    return TrendsLineWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsLineWidget = TrendsLineWidget;\r\n\tvar TrendLine = (function (_super) {\r\n\t    __extends(TrendLine, _super);\r\n\t    function TrendLine(chart, trendName) {\r\n\t        _super.call(this, chart, trendName);\r\n\t        // contains indexes of free segments\r\n\t        this.freeSegmentsInds = [];\r\n\t        // contains segments to display\r\n\t        this.displayedSegments = {};\r\n\t        var options = this.trend.getOptions();\r\n\t        this.material = new LineBasicMaterial({ color: options.lineColor, linewidth: options.lineWidth });\r\n\t        this.initLine();\r\n\t    }\r\n\t    TrendLine.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\r\n\t    };\r\n\t    TrendLine.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    TrendLine.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroySegments();\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendLine.prototype.initLine = function () {\r\n\t        var geometry = new Geometry();\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.lineSegments = new LineSegments(geometry, this.material);\r\n\t        this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t        for (var i = 0; i < this.chart.state.maxVisibleSegments; i++) {\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t            this.freeSegmentsInds.push(i);\r\n\t        }\r\n\t        this.vertices = geometry.vertices;\r\n\t        this.setupSegments();\r\n\t    };\r\n\t    TrendLine.prototype.setupSegments = function () {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.displayedSegments) {\r\n\t            var lineSegment = this.displayedSegments[segmentId];\r\n\t            var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroySegment(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupSegment(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.setupSegment = function (segmentId, segmentState) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        if (!lineSegment) {\r\n\t            if (this.freeSegmentsInds.length == 0)\r\n\t                Utils_1.Utils.error('Max allocated segments reached');\r\n\t            var ind = this.freeSegmentsInds.pop();\r\n\t            lineSegment = this.displayedSegments[segmentId] = { segmentId: segmentId, ind: ind };\r\n\t        }\r\n\t        var segmentInd = lineSegment.ind;\r\n\t        var lineStartVertex = this.vertices[segmentInd * 2];\r\n\t        var lineEndVertex = this.vertices[segmentInd * 2 + 1];\r\n\t        lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\r\n\t        lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\r\n\t    };\r\n\t    TrendLine.prototype.destroySegments = function () {\r\n\t        for (var segmentId in this.displayedSegments)\r\n\t            this.destroySegment(Number(segmentId));\r\n\t    };\r\n\t    TrendLine.prototype.destroySegment = function (segmentId) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        var lineStartVertex = this.vertices[lineSegment.ind * 2];\r\n\t        var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\r\n\t        lineStartVertex.set(0, 0, 0);\r\n\t        lineEndVertex.set(0, 0, 0);\r\n\t        delete this.displayedSegments[segmentId];\r\n\t        this.freeSegmentsInds.push(lineSegment.ind);\r\n\t    };\r\n\t    TrendLine.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.lineSegments.scale;\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendLine.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.displayedSegments[segmentId])\r\n\t                continue;\r\n\t            this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendLine;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendLine = TrendLine;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Line = THREE.Line;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar PlaneGeometry = THREE.PlaneGeometry;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar RISE_COLOR = 0x2CAC40;\r\n\tvar FALL_COLOR = 0xEE5533;\r\n\tvar MARGIN_PERCENT = 0.3;\r\n\tvar MAX_CANDLES = 100;\r\n\t/**\r\n\t * widget for drawing trends candles\r\n\t */\r\n\tvar TrendsCandlesWidget = (function (_super) {\r\n\t    __extends(TrendsCandlesWidget, _super);\r\n\t    function TrendsCandlesWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsCandlesWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendCandlesWidget;\r\n\t    };\r\n\t    TrendsCandlesWidget.widgetName = \"TrendsCandles\";\r\n\t    return TrendsCandlesWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsCandlesWidget = TrendsCandlesWidget;\r\n\tvar TrendCandlesWidget = (function (_super) {\r\n\t    __extends(TrendCandlesWidget, _super);\r\n\t    function TrendCandlesWidget(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        // contains indexes of free candles\r\n\t        this.freeCandlesInds = [];\r\n\t        this.candlesPool = [];\r\n\t        this.candles = {};\r\n\t        this.initObject();\r\n\t    }\r\n\t    TrendCandlesWidget.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroyCandles();\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.initObject = function () {\r\n\t        var stateData = this.chart.state;\r\n\t        var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.scaleXFactor = scaleXFactor;\r\n\t        this.scaleYFactor = scaleYFactor;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.object3D.frustumCulled = false;\r\n\t        for (var i = 0; i < MAX_CANDLES; i++)\r\n\t            this.freeCandlesInds.push(i);\r\n\t        this.setupCandles();\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.setupCandles = function () {\r\n\t        // remove invisible\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.candles) {\r\n\t            var segment_1 = this.candles[segmentId].segment;\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroyCandle(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupCandle(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandles = function () {\r\n\t        for (var segmentId in this.candles)\r\n\t            this.destroyCandle(Number(segmentId));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandle = function (segmentId) {\r\n\t        var candle = this.candles[segmentId];\r\n\t        this.object3D.remove(candle.getObject3D());\r\n\t        delete this.candles[segmentId];\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.object3D.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(this.scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(this.scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.candles[segmentId])\r\n\t                continue;\r\n\t            var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\r\n\t            this.setupCandle(segmentId, segmentState);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * create or modify candle\r\n\t     */\r\n\t    TrendCandlesWidget.prototype.setupCandle = function (candleId, segmentState) {\r\n\t        var candleInd = candleId % MAX_CANDLES;\r\n\t        // get candle from candlesPool to avoid creating new Objects by performance reasons\r\n\t        var candle = this.candlesPool[candleInd];\r\n\t        if (!candle) {\r\n\t            candle = this.candlesPool[candleInd] = new CandleWidget();\r\n\t        }\r\n\t        if (!this.candles[candleId]) {\r\n\t            this.candles[candleId] = candle;\r\n\t            this.object3D.add(candle.getObject3D());\r\n\t        }\r\n\t        candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\r\n\t        candle.setSegment(segmentState);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendCandlesWidget;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendCandlesWidget = TrendCandlesWidget;\r\n\tvar CandleWidget = (function () {\r\n\t    function CandleWidget() {\r\n\t        this.initObject();\r\n\t    }\r\n\t    CandleWidget.prototype.getObject3D = function () {\r\n\t        return this.rect;\r\n\t    };\r\n\t    CandleWidget.prototype.setSegment = function (segment) {\r\n\t        this.segment = segment;\r\n\t        var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\r\n\t        // update rect\r\n\t        var geometry = this.rect.geometry;\r\n\t        var material = this.rect.material;\r\n\t        var width = segment.endXVal - segment.startXVal;\r\n\t        width -= width * MARGIN_PERCENT;\r\n\t        var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\r\n\t        var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\r\n\t        leftTop.set(-width / 2, height / 2, 0);\r\n\t        rightTop.set(width / 2, height / 2, 0);\r\n\t        leftBottom.set(-width / 2, -height / 2, 0);\r\n\t        rightBottom.set(width / 2, -height / 2, 0);\r\n\t        // prevent to draw bars with height < 1px\r\n\t        if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\r\n\t            leftBottom.setY(leftBottom.y + 1);\r\n\t            rightBottom.setY(rightBottom.y + 1);\r\n\t        }\r\n\t        material.color.set(color);\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        // update lines\r\n\t        var vLineGeometry = this.vLine.geometry;\r\n\t        var vLineMaterial = this.vLine.material;\r\n\t        var lineTop = segment.maxYVal - segment.yVal;\r\n\t        var lineBottom = segment.minYVal - segment.yVal;\r\n\t        vLineGeometry.vertices[0].set(0, lineTop, 0);\r\n\t        vLineGeometry.vertices[1].set(0, lineBottom, 0);\r\n\t        vLineMaterial.color.set(color);\r\n\t        vLineGeometry.verticesNeedUpdate = true;\r\n\t        var hLineGeometry = this.hLine.geometry;\r\n\t        var hLineMaterial = this.hLine.material;\r\n\t        var lineLeft = (-width) / 2;\r\n\t        var lineRight = width / 2;\r\n\t        hLineGeometry.vertices[0].set(lineLeft, 0, 0);\r\n\t        hLineGeometry.vertices[1].set(lineRight, 0, 0);\r\n\t        hLineMaterial.color.set(color);\r\n\t        hLineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    CandleWidget.prototype.initObject = function () {\r\n\t        this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\r\n\t        var vLineGeometry = new Geometry();\r\n\t        var hLineGeometry = new Geometry();\r\n\t        vLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        hLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        this.vLine = new Line(vLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.hLine = new Line(hLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.rect.add(this.vLine);\r\n\t        this.rect.add(this.hLine);\r\n\t    };\r\n\t    return CandleWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(5));\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar Line = THREE.Line;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\t/**\r\n\t * widget for shows marks on axis\r\n\t */\r\n\tvar AxisMarksWidget = (function (_super) {\r\n\t    __extends(AxisMarksWidget, _super);\r\n\t    function AxisMarksWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.axisMarksWidgets = [];\r\n\t    }\r\n\t    AxisMarksWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        var _a = this.chart, xAxisMarks = _a.xAxisMarks, yAxisMarks = _a.yAxisMarks;\r\n\t        var items = xAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t        items = yAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t    };\r\n\t    AxisMarksWidget.prototype.createAxisMark = function (axisMark) {\r\n\t        var axisMarkWidget = new AxisMarkWidget(this.chart, axisMark);\r\n\t        this.axisMarksWidgets.push(axisMarkWidget);\r\n\t        this.object3D.add(axisMarkWidget.getObject3D());\r\n\t    };\r\n\t    AxisMarksWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function () { return _this.updateMarksPositions(); }), this.chart.onResize(function () { return _this.updateMarksPositions(); }));\r\n\t    };\r\n\t    AxisMarksWidget.prototype.updateMarksPositions = function () {\r\n\t        for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\r\n\t            var widget = _a[_i];\r\n\t            widget.updatePosition();\r\n\t        }\r\n\t    };\r\n\t    AxisMarksWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarksWidget.widgetName = 'AxisMarks';\r\n\t    return AxisMarksWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisMarksWidget = AxisMarksWidget;\r\n\tvar DEFAULT_INDICATOR_RENDER_FUNCTION = function (axisMarkWidget, ctx) {\r\n\t    var axisMark = axisMarkWidget.axisMark;\r\n\t    ctx.fillStyle = axisMark.options.lineColor;\r\n\t    ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\r\n\t    var xCoord = 15;\r\n\t    if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\r\n\t        ctx.textAlign = 'end';\r\n\t        xCoord = axisMarkWidget.indicatorWidth;\r\n\t    }\r\n\t    ctx.fillText(axisMark.options.title, xCoord, 20);\r\n\t    if (!axisMark.options.showValue)\r\n\t        return;\r\n\t    ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\r\n\t    ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\r\n\t};\r\n\tvar INDICATOR_POS_Z = 0.1;\r\n\tvar AxisMarkWidget = (function () {\r\n\t    function AxisMarkWidget(chartState, axisMark) {\r\n\t        this.indicatorWidth = 128;\r\n\t        this.indicatorHeight = 64;\r\n\t        this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\r\n\t        this.chartState = chartState;\r\n\t        this.axisMark = axisMark;\r\n\t        this.axisType = axisMark.axisType;\r\n\t        this.frameValue = axisMark.options.value;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.position.setZ(-0.1);\r\n\t        this.line = this.createLine();\r\n\t        this.object3D.add(this.line);\r\n\t        this.indicator = this.createIndicator();\r\n\t        this.object3D.add(this.indicator);\r\n\t        this.renderIndicator();\r\n\t        this.updatePosition();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarkWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createLine = function () {\r\n\t        var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\r\n\t        var lineGeometry = new Geometry();\r\n\t        lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n\t        return new Line(lineGeometry, new LineBasicMaterial({ color: new Color_1.ChartColor(lineColor).value, linewidth: lineWidth }));\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createIndicator = function () {\r\n\t        var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.font = \"10px Arial\";\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        return new Mesh(new THREE.PlaneGeometry(width, height), material);\r\n\t    };\r\n\t    AxisMarkWidget.prototype.renderIndicator = function () {\r\n\t        var texture = this.indicator.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.axisMark.onDisplayedValueChange(function () { return _this.renderIndicator(); });\r\n\t        this.axisMark.onValueChange(function () { return _this.onValueChangeHandler(); });\r\n\t    };\r\n\t    AxisMarkWidget.prototype.onValueChangeHandler = function () {\r\n\t        var _this = this;\r\n\t        // move mark to new position with animation\r\n\t        if (this.moveAnimation)\r\n\t            this.moveAnimation.kill();\r\n\t        var animations = this.chartState.state.animations;\r\n\t        var targetValue = this.axisMark.options.value;\r\n\t        var cb = function () {\r\n\t            _this.updatePosition();\r\n\t        };\r\n\t        if (animations.enabled) {\r\n\t            this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, { frameValue: targetValue, ease: animations.trendChangeEase });\r\n\t            this.moveAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.frameValue = targetValue;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    AxisMarkWidget.prototype.updatePosition = function () {\r\n\t        var chartState = this.chartState;\r\n\t        var screen = chartState.screen;\r\n\t        var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\r\n\t        var lineGeometry = this.line.geometry;\r\n\t        var hasStickMode = this.axisMark.options.stickToEdges;\r\n\t        var _a = this.chartState.state, width = _a.width, height = _a.height;\r\n\t        if (isXAxis) {\r\n\t            // TODO: make stickToEdges mode for AXIS_TYPE.X \r\n\t            this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\r\n\t            this.object3D.position.y = screen.getBottom();\r\n\t            lineGeometry.vertices[1].setY(height);\r\n\t            this.indicator.position.set(this.indicatorWidth / 2, chartState.state.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\r\n\t        }\r\n\t        else {\r\n\t            var val = this.frameValue;\r\n\t            var bottomVal = screen.getBottomVal();\r\n\t            var topVal = screen.getTopVal();\r\n\t            var needToStickOnTop = hasStickMode && val > topVal;\r\n\t            var needToStickOnBottom = hasStickMode && val < bottomVal;\r\n\t            var centerYVal = screen.getCenterYVal();\r\n\t            this.object3D.position.x = screen.getLeft();\r\n\t            if (needToStickOnTop) {\r\n\t                this.object3D.position.y = screen.getTop();\r\n\t            }\r\n\t            else if (needToStickOnBottom) {\r\n\t                this.object3D.position.y = screen.getBottom();\r\n\t            }\r\n\t            else {\r\n\t                this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\r\n\t            }\r\n\t            lineGeometry.vertices[1].setX(width);\r\n\t            var indicatorPosY = val > centerYVal ? -35 : 10;\r\n\t            this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\r\n\t        }\r\n\t        lineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.typeName = 'simple';\r\n\t    return AxisMarkWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(21));\r\n\t__export(__webpack_require__(22));\r\n\t__export(__webpack_require__(25));\r\n\t__export(__webpack_require__(26));\r\n\t__export(__webpack_require__(24));\r\n\t// TODO: remove\r\n\t__export(__webpack_require__(29));\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** demoApp.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f6b679f896d1888d36a0\n **/","\nimport { ChartView, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from '../src';\n\n// import { ChartView, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from 'three-charts';\n// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/TrendsMarksPlugin';\n// import { TrendsBeaconWidget } from '../plugins/build/TrendsBeaconWidget';\n// import { TrendsLoadingWidget } from '../plugins/build/TrendsLoadingWidget';\n// import { TrendsIndicatorWidget } from '../plugins/build/TrendsIndicatorWidget';\n// ChartView.preinstalledWidgets.push(TrendsLoadingWidget, TrendsBeaconWidget, TrendsIndicatorWidget);\n\nvar chart: ChartView;\n\nclass DataSourse {\n\tdata: ITrendItem[] = [];\n\tstartTime: number;\n\tendTime: number;\n\n\tconstructor() {\n\t\tlet sec = 0;\n\t\tlet val = 70;\n\t\tthis.startTime = Date.now();\n\n\t\twhile (sec < 100) { //2592000\n\t\t\tthis.data.push({\n\t\t\t\txVal: this.startTime + sec * 1000,\n\t\t\t\tyVal: val\n\t\t\t});\n\t\t\tval += Math.random() * 14 - 7;\n\t\t\tsec++;\n\t\t}\n\t\tthis.endTime = this.data[this.data.length - 1].xVal;\n\t}\n\n\tgetData() {\n\t\treturn Utils.deepCopy(this.data);\n\t}\n\n\tgetNext() {\n\t\tvar lastVal = this.data[this.data.length - 1];\n\t\tvar yVal = lastVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.endTime + 1000;\n\t\tthis.endTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.push(item);\n\t\treturn item;\n\t}\n\n\tgetPrev() {\n\t\tvar firstVal = this.data[0];\n\t\tvar yVal = firstVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.startTime - 1000;\n\t\tthis.startTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.unshift(item);\n\t\treturn item;\n\t}\n}\n\n// class MarksSource {\n// \tstatic getNext(val: number): ITrendMarkOptions {\n// \t\tif (Math.random() > 0.2) return null;\n// \t\treturn this.generate(val);\n// \t}\n//\n// \tstatic generate(val: number): ITrendMarkOptions {\n// \t\tlet descriptionColor = 'rgb(40,136,75)';\n// \t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\n// \t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\n// \t\t\tdescriptionColor = 'rgb(219,73,49)';\n// \t\t}\n//\n// \t\treturn {\n// \t\t\ttrendName: 'main',\n// \t\t\tvalue: val,\n// \t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\n// \t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\n// \t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\n// \t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\n// \t\t\torientation: orientation,\n// \t\t\tdescriptionColor: descriptionColor\n// \t\t}\n// \t}\n// }\n\nwindow.onload = function () {\n\n\tinitListeners();\n\n\tvar dsMain = new DataSourse();\n\tvar dsRed = new DataSourse();\n\tvar dsBlue = new DataSourse();\n\tvar now = Date.now();\n\n\n\n\tchart = new ChartView({\n\t\tyAxis: {\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true},\n\t\t\t],\n\t\t\trange: {\n\n\t\t\t\tpadding: {end: 100, start: 100},\n\t\t\t\tmargin: {end: 50, start: 50},\n\t\t\t\tzeroVal: 70\n\t\t\t}\n\t\t},\n\t\txAxis: {\n\t\t\t//range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\n\t\t\tdataType: AXIS_DATA_TYPE.DATE,\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.FIXED,\n\t\t\t\tfrom: Date.now(),\n\t\t\t\tto: Date.now() + 20000,\n\t\t\t\tpadding: {end: 200, start: 0},\n\t\t\t\tmaxLength: 5000000,\n\t\t\t\tminLength: 5000\n\t\t\t},\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true},\n\t\t\t\t{value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true}\n\t\t\t]\n\t\t\t// range: {\n\t\t\t// \tfrom: 80,\n\t\t\t// \tto: 90\n\t\t\t// }\n\t\t},\n\t\ttrends: {\n\t\t\t'main': {\n\t\t\t\ttype: TREND_TYPE.LINE,\n\t\t\t\tdataset: dsMain.getData(),\n\t\t\t\thasBeacon: true,\n\t\t\t\thasIndicator: true,\n\t\t\t\thasBackground: true,\n\t\t\t},\n\t\t\t// 'red': {dataset: dsRed.state, lineColor: 0xFF2222, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t\t// 'blue': {dataset: dsBlue.state, lineColor: 0x2222FF, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t},\n\t\tshowStats: true,\n\t\t// autoRender: {fps: 100},\n\t\t// animations: {enabled: false},\n\n\t\ttrendDefaultState: {\n\t\t\tsettingsForTypes: {\n\t\t\t\tLINE: {\n\t\t\t\t\tminSegmentLengthInPx: 10\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tdocument.querySelector('.chart')\n\t// \t,\n\t// [\n\t// \tnew TrendsMarksPlugin({items: [MarksSource.generate(now + 3000), MarksSource.generate(now + 3000), MarksSource.generate(now + 4000)]})\n\t// ]\n\t);\n\n\tchart.setState({animations: {enabled: false}});\n\tchart.setState({animations: {enabled: true}});\n\t\n\t(<any>window)['chart'] = chart;\n\n\tvar mainTrend = chart.getTrend('main');\n\tvar deadlineMark = chart.chart.xAxisMarks.getItem('deadline');\n\tvar closeMark = chart.chart.xAxisMarks.getItem('close');\n\n\tmainTrend.onDataChange(() => {\n\t\tvar closeValue = closeMark.options.value;\n\t\tif (mainTrend.getLastItem().xVal >= closeValue) {\n\t\t\tdeadlineMark.setOptions({value: closeValue + 10000});\n\t\t\tcloseMark.setOptions({value: closeValue + 20000})\n\t\t}\n\t\t// var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\n\t\t// if (markOptions) setTimeout(() => {\n\t\t// \tlet trendsMarks = state.state.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\n\t\t// \ttrendsMarks.createMark(markOptions);\n\t\t// }, 500);\n\t});\n\n\n\t// var previewChart1 = ChartView.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-state')[0],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.state, hasBeacon: true}\n\t// \t}\n\t// });\n\t//\n\t// var previewChart2 = ChartView.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-state')[1],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.state, hasBeacon: true}\n\t// \t},\n\t//\n\t// });\n\t//\n\t// var previewChart3 = ChartView.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-state')[2],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.state, hasBeacon: true},\n\t// \t\t'red': {dataset: dsRed.state, lineColor: 0xFF2222},\n\t// \t}\n\t// });\n\t//\n\n\tvar i = 0;\n\n\tchart.getTrend('main').onPrependRequest((requestedLength, resolve, reject) => {\n\t\tvar responseData: ITrendItem[] = [];\n\t\tvar ticksCount = Math.round(requestedLength / 1000) ;\n\t\twhile (ticksCount--) responseData.unshift(dsMain.getPrev());\n\t\tsetTimeout(() => {\n\t\t\tresolve(responseData);\n\t\t}, 2000)\n\t});\n\n\tsetInterval(() => {\n\t\ti++;\n\t\tvar val = dsMain.getNext();\n\n\t\t// [i % 2 ? 10 : 20]\n\n\t\t chart.getTrend('main').appendData([val]);\n\t\t// state.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\n\t\t// state.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// state.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// state.getTrend('red').appendData([val + 10 + Math.random() * 20]);\n\t\t// state.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\n\n\n\n\t\t// previewChart1.getTrend('main').appendData([val]);\n\t\t// previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\n\t\t// previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\n\t\t\n\t\t// previewChart1.appendData(dataToAppend1);\n\t\t//\n\t\t// var chartData2 = previewChart2.state.state.trends[0].state;\n\t\t// var lastItem2 = chartData2[chartData.length - 1];\n\t\t// var dataToAppend2 = [\n\t\t// \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\n\t\t// ];\n\t\t// previewChart2.appendData(dataToAppend2);\n\t\t// previewChart3.appendData(dataToAppend2);\n\t}, 1000);\n};\n\n\nfunction initListeners() {\n\tvar $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]') as HTMLInputElement;\n\t$checkboxMaintrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {main: {enabled: $checkboxMaintrend.checked}}});\n\t});\n\tvar $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]') as HTMLInputElement;\n\t$checkboxRedtrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {red: {enabled: $checkboxRedtrend.checked}}});\n\t});\n\tvar $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]') as HTMLInputElement;\n\t$checkboxBluetrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {blue: {enabled: $checkboxBluetrend.checked}}});\n\t});\n\n\tvar $switchLineBtn = document.querySelector('[name=\"switch-line\"]') as HTMLInputElement;\n\t$switchLineBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.LINE});\n\t});\n\n\tvar $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]') as HTMLInputElement;\n\t$switchBarsBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.CANDLE});\n\t});\n\n\tdocument.querySelector('[name=\"move-left\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.chart.state.xAxis.range;\n\t\tchart.setState({xAxis: {range: {from: currentRange.from - 2000}}});\n\t});\n\n\tdocument.querySelector('[name=\"move-right\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.chart.state.xAxis.range;\n\t\tchart.setState({xAxis: {range: {to: currentRange.to + 2000}}});\n\t});\n\t\n\tvar timeframeButtons = document.querySelectorAll(\".timeframe\");\n\tfor (var i = 0; i < timeframeButtons.length; i++) {\n\t\ttimeframeButtons[i].addEventListener(\"click\", function() {\n\t\t\tvar range = Number(this.getAttribute('data-range'));\n\t\t\tvar segmentLength = Number(this.getAttribute('data-segment-length'));\n\n\n\t\t\tchart.chart.setState({autoScroll: false});\n\t\t\tchart.chart.zoomToRange(range);\n\t\t\tchart.chart.scrollToEnd().then(() => {\n\t\t\t\tchart.chart.setState({autoScroll: true});\n\t\t\t});\n\t\t});\n\t}\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demoApp.ts\n **/","export * from './ChartView';\nexport * from './interfaces';\nexport * from './AxisMarks';\nexport * from './Screen';\nexport * from './Chart';\nexport * from './Trend';\nexport * from './TrendSegmentsManager';\nexport * from './TrendsManager';\nexport * from './Utils';\nexport * from './Widget';\nexport * from './Plugin';\nexport * from './Color';\nexport * from './widgets';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.ts\n **/","// deps must be always on top\nimport { ChartPlugin } from './Plugin';\nrequire('./deps/deps');\n\nimport { Trend } from \"./Trend\";\nimport Vector3 = THREE.Vector3;\nimport PerspectiveCamera = THREE.PerspectiveCamera;\nimport Scene = THREE.Scene;\nimport Renderer = THREE.Renderer;\nimport WebGLRenderer = THREE.WebGLRenderer;\nimport Object3D = THREE.Object3D;\nimport { Chart, IChartState } from \"./Chart\";\nimport { ChartWidget, IChartWidgetConstructor } from \"./Widget\";\nimport { Utils } from \"./Utils\";\nimport { IScreenTransformOptions } from \"./Screen\";\nimport { AxisWidget } from \"./widgets/AxisWidget\";\nimport { GridWidget } from \"./widgets/GridWidget\";\nimport { TrendsGradientWidget } from \"./widgets/TrendsGradientWidget\";\nimport { TrendsLineWidget } from \"./widgets/TrendsLineWidget\";\nimport { TrendsCandlesWidget } from './widgets/TrendsCandleWidget';\nimport { ResizeSensor, ResizeSensorType } from './deps';\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {ChartColor} from \"./Color\";\nimport { AxisMarksWidget } from \"./widgets/AxisMarksWidget\";\n\n\nexport class ChartBlankView {\n\n\tstatic devicePixelRatio = window.devicePixelRatio;\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [];\n\tstatic renderers: {[rendererName: string]: any} = {\n\t\tCanvasRenderer: (THREE as any).CanvasRenderer,\n\t\tWebGLRenderer: THREE.WebGLRenderer\n\t};\n\n\tchart: Chart;\n\tisStopped: boolean;\n\tisDestroyed: boolean;\n\tprivate $container: Element;\n\tprivate $el: HTMLElement;\n\tprivate renderer: Renderer;\n\tprivate scene: Scene;\n\tprivate camera: PerspectiveCamera;\n\tprivate cameraInitialPosition: Vector3;\n\tprivate widgets: Array<ChartWidget> = [];\n\tprivate stats: Stats;\n\tprivate zoomThrottled: Function;\n\tprivate unsubscribers: Function[];\n\tprivate resizeSensor: ResizeSensorType;\n\tprivate pluginsAndWidgets: Array<ChartPlugin | ChartWidget>;\n\n\tconstructor(state: IChartState, $container: Element, pluginsAndWidgets: Array<ChartPlugin | ChartWidget> = []) {\n\n\t\tif (!THREE || !THREE.REVISION) Utils.error('three.js not found');\n\n\t\tif (!$container) {\n\t\t\tUtils.error('$el must be set');\n\t\t}\n\t\t// calculate state size\n\t\tlet style = getComputedStyle($container);\n\t\tstate.width = parseInt(style.width);\n\t\tstate.height = parseInt(style.height);\n\n\t\tlet plugins = pluginsAndWidgets.filter(pluginOrWidget => pluginOrWidget instanceof ChartPlugin) as ChartPlugin[];\n\n\t\tthis.chart = new Chart(state, plugins);\n\t\tthis.pluginsAndWidgets = pluginsAndWidgets;\n\t\tthis.zoomThrottled = Utils.throttle((zoomValue: number, origin: number) => this.zoom(zoomValue, origin), 200);\n\t\tthis.$container = $container;\n\t\tthis.init($container);\n\t};\n\n\tprivate init($container: Element) {\n\t\tvar chart = this.chart;\n\t\tvar {width: w, height: h, showStats, autoRender} = chart.state;\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.isStopped = !autoRender.enabled;\n\n\t\tvar renderer = this.renderer = new (ChartView.renderers[this.chart.state.renderer] as any)({\n\t\t\tantialias: true,\n\t\t\talpha: true\n\t\t});\n\t\tlet backgroundColor = new ChartColor(chart.state.backgroundColor);\n\t\trenderer.setSize(w, h);\n\t\trenderer.setPixelRatio(ChartView.devicePixelRatio);\n\t\trenderer.setClearColor(backgroundColor.value, backgroundColor.a);\n\t\t$container.appendChild(renderer.domElement);\n\t\tthis.$el = renderer.domElement;\n\t\tthis.$el.style.display = 'block';\n\n\t\tif (showStats) {\n\t\t\tthis.stats = new Stats();\n\t\t\t$container.appendChild(this.stats.domElement);\n\t\t}\n\n\t\tthis.setupCamera();\n\t\tthis.initWidgets();\n\t\tthis.bindEvents();\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\n\t */\n\tprivate initWidgets() {\n\t\tlet preinstalledWidgetsClasses = (this.constructor as typeof ChartView).preinstalledWidgets;\n\t\tlet customWidgets: ChartWidget[] = [];\n\n\t\tthis.pluginsAndWidgets.forEach(pluginOrWidget => {\n\t\t\tif (pluginOrWidget instanceof ChartWidget) {\n\t\t\t\tcustomWidgets.push(pluginOrWidget);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!(pluginOrWidget instanceof ChartPlugin)) return;\n\t\t\tlet pluginWidgetClasses = (pluginOrWidget.constructor as typeof ChartPlugin).providedWidgets;\n\t\t\tpreinstalledWidgetsClasses.push(...pluginWidgetClasses);\n\t\t});\n\n\t\tthis.widgets = customWidgets.concat(\n\t\t\tpreinstalledWidgetsClasses.map((WidgetClass: IChartWidgetConstructor) => new WidgetClass())\n\t\t);\n\n\t\tthis.widgets.forEach(widget => {\n\t\t\twidget.setupChart(this.chart);\n\t\t\twidget.onReadyHandler();\n\t\t\tthis.scene.add(widget.getObject3D());\n\t\t});\n\t}\n\n\tprivate renderLoop() {\n\t\tif (this.isDestroyed) return;\n\t\tthis.stats && this.stats.begin();\n\t\tthis.render();\n\t\tif (this.isStopped) return;\n\t\tvar fpsLimit = this.chart.state.autoRender.fps;\n\n\t\tif (fpsLimit) {\n\t\t\tlet delay = 1000 / fpsLimit;\n\t\t\tsetTimeout(() => requestAnimationFrame(() => this.renderLoop()), delay);\n\t\t} else {\n\t\t\trequestAnimationFrame(() => this.renderLoop());\n\t\t}\n\t\tthis.stats && this.stats.end();\n\t}\n\n\trender() {\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n\n\tstop() {\n\t\tthis.isStopped = true;\n\t}\n\n\trun() {\n\t\tthis.isStopped = false;\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * call to destroy state an init garbage collection\n\t */\n\tdestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.stop();\n\t\tthis.chart.destroy();\n\t\tthis.unbindEvents();\n\t\t// WARNING! undocumented method for free webgl context\n\t\ttry {\n\t\t\t(this.renderer as any).forceContextLoss();\n\t\t} catch (wtf) {\n\t\t\t// sometimes with many state instances forceContextLoss not working\n\t\t}\n\t\t(this.renderer as any).context = null;\n\t\tthis.renderer.domElement = null;\n\t\tthis.renderer = null;\n\t}\n\n\tgetState(): IChartState {\n\t\treturn this.chart.state\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.getTrend\n\t */\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.chart.getTrend(trendName);\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.setState\n\t */\n\tsetState(state: IChartState) {\n\t\treturn this.chart.setState(state);\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar $el = this.$el;\n\t\tif (this.chart.state.controls.enabled) {\n\t\t\t$el.addEventListener('mousewheel', (ev: MouseWheelEvent) => {\n\t\t\t\tthis.onMouseWheel(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousemove', (ev: MouseEvent) => {\n\t\t\t\tthis.onMouseMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousedown', (ev: MouseEvent) => this.onMouseDown(ev));\n\t\t\t$el.addEventListener('mouseup', (ev: MouseEvent) => this.onMouseUp(ev));\n\t\t\t$el.addEventListener('touchmove', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('touchend', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchEnd(ev)\n\t\t\t});\n\t\t}\n\t\tif (this.chart.state.autoResize) {\n\t\t\tthis.resizeSensor = new ResizeSensor(this.$container, () => {\n\t\t\t\tthis.onChartContainerResizeHandler(this.$container.clientWidth, this.$container.clientHeight);\n\t\t\t});\n\t\t}\n\n\t\tthis.unsubscribers = [\n\t\t\tthis.chart.onTrendsChange(() => this.autoscroll()),\n\t\t\tthis.chart.screen.onTransformationFrame((options) => this.onScreenTransformHandler(options)),\n\t\t\tthis.chart.onResize((options) => this.onChartResize())\n\t\t];\n\t}\n\n\tprivate unbindEvents() {\n\t\t// TODO: unbind events correctly\n\t\ttry {\n\t\t\tthis.resizeSensor && this.resizeSensor.detach();\n\t\t} catch (e) {\n\t\t\t// ups.. somebody already removed resizeSensor childNode\n\t\t\t// detected in angular2 apps\n\t\t}\n\t\tthis.$el.remove();\n\t\tthis.unsubscribers.forEach(unsubscribe => unsubscribe());\n\t}\n\n\tprivate setupCamera() {\n\t\tlet camSettings = this.chart.screen.getCameraSettings();\n\t\tif (!this.camera) {\n\t\t\tthis.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t\t\tthis.scene.add(this.camera);\n\t\t} else {\n\t\t\tthis.camera.fov = camSettings.FOV;\n\t\t\tthis.camera.aspect = camSettings.aspect;\n\t\t\tthis.camera.far = camSettings.far;\n\t\t\tthis.camera.near = camSettings.near;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\t\tthis.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t\tthis.cameraInitialPosition = this.camera.position.clone();\n\t\tthis.onScreenTransformHandler(this.chart.screen.options);\n\t}\n\n\tprivate onScreenTransformHandler(options: IScreenTransformOptions) {\n\t\tif (options.scrollX != void 0) {\n\t\t\tlet scrollX = this.cameraInitialPosition.x + options.scrollX;\n\t\t\t// scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setX(scrollX);\n\t\t}\n\t\tif (options.scrollY != void 0) {\n\t\t\tlet scrollY = this.cameraInitialPosition.y + options.scrollY;\n\t\t\t// scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setY(scrollY);\n\t\t}\n\t}\n\n\tprivate autoscroll() {\n\t\tvar state = this.chart;\n\t\tif (!state.state.autoScroll) return;\n\t\tvar oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\n\t\tvar trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\n\t\tif (trendsMaxXDelta > 0) {\n\t\t\tvar maxVisibleX = this.chart.screen.getScreenRightVal();\n\t\t\tvar paddingRightX = this.chart.getPaddingRight();\n\t\t\tvar currentScroll = state.state.xAxis.range.scroll;\n\t\t\tif (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar scrollDelta = trendsMaxXDelta;\n\t\t\tthis.setState({xAxis: {range: {scroll: currentScroll + scrollDelta}}});\n\t\t}\n\t}\n\n\tprivate onScrollStop() {\n\t\t// var tendsXMax = this.state.state.computedData.trends.maxX;\n\t\t// var paddingRightX = this.state.getPaddingRight();\n\t\t// if (tendsXMax < paddingRightX) {\n\t\t// \tthis.state.scrollToEnd();\n\t\t// }\n\t}\n\n\tprivate onMouseDown(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t}\n\n\tprivate onMouseUp(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onMouseMove(ev: MouseEvent) {\n\t\tif (this.chart.state.cursor.dragMode) {\n\t\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t\t}\n\t}\n\n\tprivate onMouseWheel(ev: MouseWheelEvent) {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t\tlet zoomOrigin = ev.layerX / this.chart.state.width;\n\t\tlet zoomValue = 1 + ev.wheelDeltaY * 0.001;\n\t\tthis.zoom(zoomValue, zoomOrigin);\n\t}\n\n\tprivate onTouchMove(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY}});\n\t}\n\n\tprivate onTouchEnd(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onChartContainerResizeHandler(width: number, height: number) {\n\t\tthis.setState({width, height});\n\t}\n\n\tprivate onChartResize() {\n\t\tlet {width, height} = this.chart.state;\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.setupCamera();\n\t}\n\n\tprivate zoom(zoomValue: number, zoomOrigin: number) {\n\t\tconst MAX_ZOOM_VALUE = 1.5;\n\t\tconst MIN_ZOOM_VALUE = 0.7;\n\t\tzoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t\tzoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t\tlet autoScrollIsEnabled = this.chart.state.autoScroll;\n\t\tif (autoScrollIsEnabled) this.chart.setState({autoScroll: false});\n\t\tthis.chart.zoom(zoomValue, zoomOrigin).then(() => {\n\t\t\tif (autoScrollIsEnabled) this.setState({autoScroll: true});\n\t\t});\n\t}\n\n\n}\n\n\nexport class ChartView extends ChartBlankView {\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [\n\t\tTrendsLineWidget,\n\t\tTrendsCandlesWidget,\n\t\tAxisWidget,\n\t\tGridWidget,\n\t\tTrendsGradientWidget,\n\t\t// TODO: remove AxisMarksWidget from preinstalled widgets\n\t\tAxisMarksWidget\n\t]\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ChartView.ts\n **/","import { Chart, IChartState } from \"./Chart\";\nimport { Utils } from './Utils';\nimport { EventEmitter } from './EventEmmiter';\nimport { ChartWidget } from './Widget';\n\nexport interface IChartPluginState {\n}\n\nexport interface IChartPluginConfig {\n\tinstallPluginWidgets?: boolean;\n}\n\nexport const DEFAULT_CONFIG: IChartPluginConfig = {\n\tinstallPluginWidgets: true\n};\n\n/**\n * base class for all plugins\n * NAME is mandatory\n */\nexport abstract class ChartPlugin {\n\tstatic NAME: string = '';\n\tstatic providedWidgets: typeof ChartWidget[] = [];\n\n\tinitialState: IChartPluginState;\n\tconfig: IChartPluginConfig;\n\tname: string;\n\tprotected chart: Chart;\n\tprotected unsubscribers: Function[] = [];\n\tprotected ee: EventEmitter;\n\n\tconstructor (options?: IChartPluginState, config: IChartPluginConfig = {}) {\n\t\tthis.initialState = options;\n\t\tthis.config = Utils.deepMerge(DEFAULT_CONFIG, config);\n\t\tthis.name = (this.constructor as typeof ChartPlugin).NAME;\n\t\tif (!this.name) Utils.error('Unnamed plugin detected');\n\t}\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvent(\n\t\t\tthis.chart.onInitialStateApplied(initialState => this.onInitialStateAppliedHandler(initialState)),\n\t\t\tthis.chart.onReady(() => this.onReadyHandler()),\n\t\t\tthis.chart.onDestroy(() => this.onDestroyHandler()),\n\t\t\tthis.chart.onPluginsStateChange(changedPluginsStates => changedPluginsStates[this.name] && this.onStateChanged(changedPluginsStates[this.name]))\n\t\t)\n\t}\n\n\tgetOptions(): IChartPluginState {\n\t\treturn this.chart.state.pluginsState[this.name];\n\t}\n\n\tprotected onInitialStateAppliedHandler(initialState: IChartState) {\n\t}\n\n\tprotected onReadyHandler() {\n\t}\n\n\tprotected onStateChanged(changedState: IChartPluginState) {\n\t}\n\n\tprotected onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t}\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unsubscribers: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunsubscribers.push(args[0] as Function);\n\t\t} else {\n\t\t\tunsubscribers.push(...args as Function[]);\n\t\t}\n\t\tthis.unsubscribers.push(...unsubscribers);\n\t}\n\n\n\tprotected unbindEvents() {\n\t\tthis.unsubscribers.forEach(unsubscriber => unsubscriber());\n\t\tthis.unsubscribers.length = 0;\n\t}\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Plugin.ts\n **/","import Texture = THREE.Texture;\nimport Color = THREE.Color;\nimport { TIteralable, IIteralable } from \"./interfaces\";\nimport { isPlainObject } from './deps/deps';\n\nfunction deepmerge(target: any, src: any, mergeArrays = true) {\n\tvar array = Array.isArray(src);\n\tvar dst: any = array && [] || {};\n\n\tif (array) {\n\t\ttarget = target || [];\n\t\tif (mergeArrays) {\n\t\t\tdst = dst.concat(target);\n\t\t}\n\t\tsrc.forEach(function(e: any, i: any) {\n\t\t\tif (typeof dst[i] === 'undefined') {\n\t\t\t\tdst[i] = e;\n\t\t\t} else if (typeof e === 'object') {\n\t\t\t\tdst[i] = deepmerge(target[i], e, mergeArrays);\n\t\t\t} else {\n\t\t\t\tif (target.indexOf(e) === -1) {\n\t\t\t\t\tdst.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tif (target && typeof target === 'object') {\n\t\t\tObject.keys(target).forEach(function (key) {\n\t\t\t\tdst[key] = target[key];\n\t\t\t})\n\t\t}\n\t\tObject.keys(src).forEach(function (key) {\n\t\t\tif (typeof src[key] !== 'object' || !src[key]) {\n\t\t\t\tdst[key] = src[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t} else {\n\t\t\t\t\tdst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn dst;\n}\n\n\n\nexport declare type TUid = number;\n\n/**\n * project utils static class\n */\nexport class Utils {\n\n\tprivate static currentId: TUid = 1;\n\n\t/**\n\t * deepMerge based on https://www.npmjs.com/package/deepmerge\n\t */\n\tstatic deepMerge<T> (obj1: T, obj2: T, mergeArrays?: boolean) {\n\t\treturn deepmerge(obj1, obj2, mergeArrays) as T;\n\t}\n\n\t/**\n\t * deepCopy based on JSON.stringify function\n\t * @deprecated\n\t */\n\tstatic deepCopy<T> (obj: T) {\n\t\t// TODO: use deepMerge function to copy\n\t\treturn JSON.parse(JSON.stringify(obj)) as T;\n\t}\n\n\t/**\n\t *\n\t * @example\n\t * // returns \"000015\"\n\t * Utils.toFixed(15, 6);\n\t */\n\tstatic toFixed(num: number, digitsCount: number): string {\n\t\tvar maxDigits = 15;\n\t\tvar result = '';\n\t\tvar intVal = Math.floor(num);\n\t\tvar intStr = intVal.toString();\n\t\tvar lengthDiff = digitsCount - intStr.length;\n\t\tif (lengthDiff > 0 ) {\n\t\t\tresult = (<any>'0').repeat(lengthDiff) + intStr;\n\t\t} else {\n\t\t\tresult = intStr;\n\t\t}\n\t\tvar afterPointDigitsCount = maxDigits - intStr.length;\n\t\tvar afterPointStr = num.toString().split('.')[1];\n\t\tif (afterPointStr) {\n\t\t\tresult += '.' + afterPointStr.substr(0, afterPointDigitsCount);\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic bindEvent() {\n\n\t}\n\n\t/**\n\t * generate texture from canvas context\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture {\n\t\tvar canvas: HTMLCanvasElement = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tvar ctx = canvas.getContext('2d');\n\t\tfn(ctx);\n\t\tvar texture = new THREE.Texture(canvas);\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * generate texture from canvas context with NearestFilter\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createPixelPerfectTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture{\n\t\tvar texture = this.createTexture(width, height, fn);\n\t\t// texture.magFilter = THREE.NearestFilter;\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic error(msg: string) {\n\t\tconsole.error('Chart error: ' + msg);\n\t\tthrow 'Chart: ' + msg;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic warn(msg: string) {\n\t\tconsole.warn('Chart warning: ' + msg);\n\t}\n\n\t/**\n\t * @returns new unique id\n\t */\n\tstatic getUid(): TUid {\n\t\treturn this.currentId++;\n\t}\n\n\t/**\n\t * @returns distance between numbers\n\t */\n\tstatic getDistance(num1: number, num2: number) {\n\t\treturn Math.max(num1, num2) - Math.min(num1, num2);\n\t}\n\n\tstatic binarySearchClosestInd(arr: IIteralable[], num: number, key: string): number {\n\t\tvar mid: number;\n\t\tvar lo = 0;\n\t\tvar hi = arr.length - 1;\n\t\twhile (hi - lo > 1) {\n\t\t\tmid = Math.floor ((lo + hi) / 2);\n\t\t\tif (arr[mid][key] < num) {\n\t\t\t\tlo = mid;\n\t\t\t} else {\n\t\t\t\thi = mid;\n\t\t\t}\n\t\t}\n\t\tif (num - arr[lo][key] <= arr[hi][key] - num) {\n\t\t\treturn lo;\n\t\t}\n\t\treturn hi;\n\t}\n\t\n\tstatic binarySearchClosest<ArrayItem>(arr: ArrayItem[], num: number, key: string): ArrayItem {\n\t\tlet ind = this.binarySearchClosestInd(arr, num, key);\n\t\treturn arr[ind];\n\t}\n\n\n\tstatic rectsIntersect(r1: number[], r2: number[]) {\n\t\tlet [left1, top1, width1, height1] = r1;\n\t\tlet [left2, top2, width2, height2] = r2;\n\t\tlet [right1, right2, bottom1, bottom2] = [left1 + width1, left2 + width2, top1 + height1, top2 + height2];\n\t\treturn !(left2 > right1 ||\n\t\t\tright2 < left1 ||\n\t\t\ttop2 > bottom1 ||\n\t\t\tbottom2 < top1\n\t\t);\n\t}\n\n\n\tstatic throttle(func: Function, ms: number) {\n\n\t\tvar isThrottled = false,\n\t\t\tsavedArgs: any,\n\t\t\tsavedThis: any;\n\n\t\tfunction wrapper() {\n\n\t\t\tif (isThrottled) { // (2)\n\t\t\t\tsavedArgs = arguments;\n\t\t\t\tsavedThis = this;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunc.apply(this, arguments); // (1)\n\n\t\t\tisThrottled = true;\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tisThrottled = false; // (3)\n\t\t\t\tif (savedArgs) {\n\t\t\t\t\twrapper.apply(savedThis, savedArgs);\n\t\t\t\t\tsavedArgs = savedThis = null;\n\t\t\t\t}\n\t\t\t}, ms);\n\t\t}\n\n\t\treturn wrapper;\n\t}\n\n\tstatic msToTimeString(timestamp: number) {\n\t\tvar h = Math.floor(timestamp / 360000);\n\t\tvar m =  Math.floor(timestamp / 60000);\n\t\tvar s =  Math.floor(timestamp / 1000);\n\t\treturn h + ':' + m + ':' + s;\n\t}\n\t\n\tstatic getRandomItem<T>(arr: Array<T>): T {\n\t\tvar ind = Math.floor(Math.random() * arr.length);\n\t\treturn arr[ind];\n\t}\n\n\tstatic copyProps(srcObject: TIteralable, dstObject: TIteralable, props: TIteralable, excludeProps: string[] = []) {\n\t\tfor (var key in props) {\n\t\t\tif (excludeProps.indexOf(key) !== -1) continue;\n\t\t\tif (srcObject[key] == void 0) continue;\n\t\t\tif (isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t\t\t\tthis.copyProps(srcObject[key], dstObject[key], props[key])\n\t\t\t} else {\n\t\t\t\tdstObject[key] = this.deepCopy(srcObject[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Utils.ts\n **/","/// <reference path=\"./ResizeSensor.ts\" />\n\n// TODO: think about different bundles\n\nimport { ResizeSensorType } from './ResizeSensor';\n(<any>window).TweenLite = TweenMax;\n(<any>window).Stats = require('three/examples/js/libs/stats.min');\n\n// require('gsap/src/uncompressed/easing/EasePack.js');\n// require('three/examples/js/renderers/CanvasRenderer.js');\n// require('three/examples/js/renderers/Projector.js');\nexport const isPlainObject = require('is-plain-object') as Function;\nexport const EE2 = require('eventemitter2') as typeof EventEmitter2;\n\n\nexport { Promise } from '../polyfills/es6-promise';\n\nexport * from './ResizeSensor';\nexport const ResizeSensor = require('css-element-queries/src/ResizeSensor') as ResizeSensorType;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/deps.ts\n **/","// stats.js - http://github.com/mrdoob/stats.js\nvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\nif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\nStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\nv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/examples/js/libs/stats.min.js\n ** module id = 6\n ** module chunks = 0 1\n **/","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nmodule.exports = function isPlainObject(o) {\n  var ctor,prot;\n  \n  if (isObjectObject(o) === false) return false;\n  \n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n  \n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n  \n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n  \n  // Most likely a plain Object\n  return true;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/is-plain-object/index.js\n ** module id = 7\n ** module chunks = 0 1\n **/","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isObject(val) {\n  return val != null && typeof val === 'object'\n    && !Array.isArray(val);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/isobject/index.js\n ** module id = 8\n ** module chunks = 0 1\n **/","/*!\n * EventEmitter2\n * https://github.com/hij1nx/EventEmitter2\n *\n * Copyright (c) 2013 hij1nx\n * Licensed under the MIT license.\n */\n;!function(undefined) {\n\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = {};\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n\n      this._conf = conf;\n\n      conf.delimiter && (this.delimiter = conf.delimiter);\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this.newListener = conf.newListener);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this.newListener = false;\n    configure.call(this, conf);\n  }\n\n  //\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return [];\n    }\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n    if (i === typeLength && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return [tree];\n      } else {\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n        return [tree];\n      }\n    }\n\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (currentType === '*') {\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n          }\n        }\n        return listeners;\n      } else if(currentType === '**') {\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n        if(endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n        }\n\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            if(branch === '*' || branch === '**') {\n              if(tree[branch]._listeners && !endReached) {\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n              }\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            } else if(branch === nextType) {\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            }\n          }\n        }\n        return listeners;\n      }\n\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n    }\n\n    xTree = tree['*'];\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i+1);\n    }\n\n    xxTree = tree['**'];\n    if(xxTree) {\n      if(i < typeLength) {\n        if(xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength);\n        }\n\n        // Build arrays of matching next branches and others.\n        for(branch in xxTree) {\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n            if(branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\n            } else if(branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n            }\n          }\n        }\n      } else if(xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength);\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener) {\n\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n    //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n    for(var i = 0, len = type.length; i+1 < len; i++) {\n      if(type[i] === '**' && type[i+1] === '**') {\n        return;\n      }\n    }\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n\n      if (!tree[name]) {\n        tree[name] = {};\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        }\n        else if(typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        }\n        else if (isArray(tree._listeners)) {\n\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n\n            var m = defaultMaxListeners;\n\n            if (typeof this._events.maxListeners !== 'undefined') {\n              m = this._events.maxListeners;\n            }\n\n            if (m > 0 && tree._listeners.length > m) {\n\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' +\n                            'leak detected. %d listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit.',\n                            tree._listeners.length);\n              console.trace();\n            }\n          }\n        }\n        return true;\n      }\n      name = type.shift();\n    }\n    return true;\n  }\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n    if (!this._conf) this._conf = {};\n    this._conf.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n\n    this.on(event, listener);\n\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function() {\n\n    this._events || init.call(this);\n\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) { return false; }\n    }\n\n    // Loop through the *_all* functions and invoke them.\n    if (this._all) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        this._all[i].apply(this, args);\n      }\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n\n      if (!this._all &&\n        !this._events.error &&\n        !(this.wildcard && this.listenerTree.error)) {\n\n        if (arguments[1] instanceof Error) {\n          throw arguments[1]; // Unhandled 'error' event\n        } else {\n          throw new Error(\"Uncaught, unspecified 'error' event.\");\n        }\n        return false;\n      }\n    }\n\n    var handler;\n\n    if(this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    }\n    else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      if (arguments.length === 1) {\n        handler.call(this);\n      }\n      else if (arguments.length > 1)\n        switch (arguments.length) {\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n          // slower\n          default:\n            var l = arguments.length;\n            var args = new Array(l - 1);\n            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n            handler.apply(this, args);\n        }\n      return true;\n    }\n    else if (handler) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        this.event = type;\n        listeners[i].apply(this, args);\n      }\n      return (listeners.length > 0) || !!this._all;\n    }\n    else {\n      return !!this._all;\n    }\n\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n\n    if (typeof type === 'function') {\n      this.onAny(type);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n    this._events || init.call(this);\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    this.emit('newListener', type, listener);\n\n    if(this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    }\n    else if(typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n    else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n      // Check for listener leak\n      if (!this._events[type].warned) {\n\n        var m = defaultMaxListeners;\n\n        if (typeof this._events.maxListeners !== 'undefined') {\n          m = this._events.maxListeners;\n        }\n\n        if (m > 0 && this._events[type].length > m) {\n\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' +\n                        'leak detected. %d listeners added. ' +\n                        'Use emitter.setMaxListeners() to increase limit.',\n                        this._events[type].length);\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if(!this._all) {\n      this._all = [];\n    }\n\n    // Add the function to the event listener collection.\n    this._all.push(fn);\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,leafs=[];\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n    }\n    else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({_listeners:handlers});\n    }\n\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n      if (isArray(handlers)) {\n\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener ||\n            (handlers[i].listener && handlers[i].listener === listener) ||\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if(this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        }\n        else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if(this.wildcard) {\n            delete leaf._listeners;\n          }\n          else {\n            delete this._events[type];\n          }\n        }\n        return this;\n      }\n      else if (handlers === listener ||\n        (handlers.listener && handlers.listener === listener) ||\n        (handlers._origin && handlers._origin === listener)) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function(type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n        var leaf = leafs[iLeaf];\n        leaf._listeners = null;\n      }\n    }\n    else {\n      if (!this._events[type]) return this;\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function(type) {\n    if(this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n\n    if (!this._events[type]) this._events[type] = [];\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  if (typeof define === 'function' && define.amd) {\n     // AMD. Register as an anonymous module.\n    define(function() {\n      return EventEmitter;\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    exports.EventEmitter2 = EventEmitter;\n  }\n  else {\n    // Browser global.\n    window.EventEmitter2 = EventEmitter;\n  }\n}();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/eventemitter2/lib/eventemitter2.js\n ** module id = 9\n ** module chunks = 0 1\n **/","module.exports = {Promise: window['Promise']}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/polyfills/es6-promise.js\n ** module id = 10\n ** module chunks = 0 1\n **/","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var shrinkChild = shrink.childNodes[0];\n\n            var lastWidth, lastHeight;\n\n            var reset = function() {\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n                expand.scrollLeft = expand.scrollWidth;\n                expand.scrollTop = expand.scrollHeight;\n                shrink.scrollLeft = shrink.scrollWidth;\n                shrink.scrollTop = shrink.scrollHeight;\n                lastWidth = element.offsetWidth;\n                lastHeight = element.offsetHeight;\n            };\n\n            reset();\n\n            var changed = function() {\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            var onScroll = function() {\n              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                  changed();\n              }\n              reset();\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        var elementType = Object.prototype.toString.call(element);\n        var isCollectionTyped = ('[object Array]' === elementType\n            || ('[object NodeList]' === elementType)\n            || ('[object HTMLCollection]' === elementType)\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n        );\n\n        if (isCollectionTyped) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n\n        this.detach = function() {\n            if (isCollectionTyped) {\n                var i = 0, j = element.length;\n                for (; i < j; i++) {\n                    ResizeSensor.detach(element[i]);\n                }\n            } else {\n                ResizeSensor.detach(element);\n            }\n        };\n    };\n\n    ResizeSensor.detach = function(element) {\n        if (element.resizeSensor) {\n            element.removeChild(element.resizeSensor);\n            delete element.resizeSensor;\n            delete element.resizedAttached;\n        }\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ResizeSensor;\n    }\n    else {\n        window.ResizeSensor = ResizeSensor;\n    }\n\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-element-queries/src/ResizeSensor.js\n ** module id = 11\n ** module chunks = 0 1\n **/","import {EE2} from './deps/deps';\n\n/**\n * this class uses as proxy for EventEmitter2\n */\nexport class EventEmitter {\n\tprivate ee: EventEmitter2;\n\tconstructor() {\n\t\tthis.ee = new EE2();\n\t}\n\temit(eventName: string, ...args: any[]) {\n\t\tthis.ee.emit(eventName, ...args)\n\t}\n\ton(eventName: string, callback: Function) {\n\t\treturn this.ee.on(eventName, callback)\n\t}\n\toff(eventName: string, callback: Function) {\n\t\treturn this.ee.off(eventName, callback);\n\t}\n\tsubscribe(eventName: string, callback: Function): Function {\n\t\tthis.on(eventName, callback);\n\t\treturn () => this.off(eventName, callback);\n\t}\n\tsetMaxListeners(listenersCount: number) {\n\t\tthis.ee.setMaxListeners(listenersCount);\n\t}\n\tremoveAllListeners(eventName?: string) {\n\t\tthis.ee.removeAllListeners(eventName);\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventEmmiter.ts\n **/","import Vector3 = THREE.Vector3;\nimport { ITrendOptions, Trend, ITrendData, TREND_TYPE } from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Utils} from './Utils';\nimport {TrendsManager, ITrendsOptions} from \"./TrendsManager\";\nimport {Screen} from \"./Screen\";\nimport {AxisMarks} from \"./AxisMarks\";\nimport {\n\tAXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions, IAnimationsOptions, AXIS_RANGE_TYPE\n} from \"./interfaces\";\nimport { Promise } from './deps/deps';\nimport { ChartPlugin } from './Plugin';\nimport {TChartColor} from \"./Color\";\n\n\ninterface IRecalculatedStateResult {\n\tchangedProps: IChartState,\n\tpatch: IChartState\n}\n\nconst CHART_STATE_EVENTS = {\n\tINITIAL_STATE_APPLIED: 'initialStateApplied',\n\tREADY: 'ready',\n\tDESTROY: 'destroy',\n\tCHANGE: 'change',\n\tTREND_CHANGE: 'trendChange',\n\tTRENDS_CHANGE: 'trendsChange',\n\tZOOM: 'zoom',\n\tRESIZE: 'resize',\n\tSCROLL: 'scroll',\n\tSCROLL_STOP: 'scrollStop',\n\tPLUGINS_STATE_CHANGED: 'pluginsStateChanged'\n};\n\n/**\n * readonly computed state state\n * calculated after recalculateState() call\n * contains cached values\n */\nexport interface IChartStateComputedData {\n\ttrends?: {\n\t\tmaxXVal: number,\n\t\tminXVal: number\n\t}\n}\n\nexport interface IChartState {\n\tprevState?: IChartState,\n\twidth?: number;\n\theight?: number;\n\tzoom?: number;\n\txAxis?: IAxisOptions,\n\tyAxis?: IAxisOptions,\n\tanimations?: IAnimationsOptions,\n\ttrends?: ITrendsOptions,\n\ttrendDefaultState?: ITrendOptions;\n\tcursor?: {\n\t\tdragMode?: boolean,\n\t\tx?: number,\n\t\ty?: number\n\t},\n\n\t/**\n\t * use fps = 0 for no limits\n\t */\n\tautoRender?: {enabled?: boolean, fps?: number};\n\n\t/**\n\t * by default 'WebGLRenderer'\n\t * also available 'CanvasRenderer'\n\t */\n\trenderer?: 'WebGLRenderer' | 'CanvasRenderer';\n\tfont?: {s?: string, m?: string, l?:string}\n\n\n\t/**\n\t * buffer size for displayed segments\n\t * used by widgets\n\t */\n\tmaxVisibleSegments?: number;\n\tautoResize?: boolean;\n\tcontrols?: {enabled: boolean};\n\tautoScroll?: boolean;\n\tshowStats?: boolean;\n\tbackgroundColor?: TChartColor;\n\tcomputedData?: IChartStateComputedData,\n\tpluginsState?: {[pluginName: string]: any};\n\teventEmitterMaxListeners?: number;\n}\n\nconst LIGHT_BLUE = '#5273bd';\n\n/**\n *  all state changes caused only by Chart.setState method\n */\nexport class Chart {\n\n\tstate: IChartState = {\n\t\tprevState: {},\n\t\tzoom: 0,\n\t\txAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.ALL,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tscroll: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 0, end: 5},\n\t\t\t\tmargin: {start: 0, end: 5}\n\t\t\t},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tgrid: {enabled: true, minSizePx:  100, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tautoScroll: true,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tyAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.RELATIVE_END,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 5, end: 5},\n\t\t\t\tmargin: {start: 5, end: 5},\n\t\t\t},\n\t\t\tgrid: {enabled: true, minSizePx:  50, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tanimations: {\n\t\t\tenabled: true,\n\t\t\ttrendChangeSpeed: 0.5,\n\t\t\ttrendChangeEase: void 0,\n\t\t\tzoomSpeed: 0.25,\n\t\t\tzoomEase:  void 0,\n\t\t\tscrollSpeed: 0.5,\n\t\t\tscrollEase: Linear.easeNone,\n\t\t\tautoScrollSpeed: 1,\n\t\t\tautoScrollEase: Linear.easeNone,\n\t\t},\n\t\tautoRender: {enabled: true, fps: 0},\n\t\tautoResize: true,\n\t\trenderer: 'WebGLRenderer',\n\t\tautoScroll: true,\n\t\tcontrols: {enabled: true},\n\t\ttrendDefaultState: {\n\t\t\tenabled: true,\n\t\t\ttype: TREND_TYPE.LINE,\n\t\t\tdata: [],\n\t\t\tmaxSegmentLength: 1000,\n\t\t\tlineWidth: 2,\n\t\t\tlineColor: 0xFFFFFF,\n\t\t\thasBackground: true,\n\t\t\tbackgroundColor: 'rgba(#FFFFFF, 0.07)',\n\t\t\thasBeacon: false,\n\t\t\tsettingsForTypes: {\n\t\t\t\tCANDLE: {\n\t\t\t\t\tminSegmentLengthInPx: 20,\n\t\t\t\t\tmaxSegmentLengthInPx: 40,\n\t\t\t\t},\n\t\t\t\tLINE: {\n\t\t\t\t\tminSegmentLengthInPx: 2,\n\t\t\t\t\tmaxSegmentLengthInPx: 10,\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcursor: {\n\t\t\tdragMode: false,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\tfont: {\n\t\t\ts: '11px Arial',\n\t\t\tm: '12px Arial',\n\t\t\tl: '13px Arial'\n\t\t},\n\t\tbackgroundColor: 0x000c2a,\n\t\tshowStats: false,\n\t\tpluginsState: {},\n\t\teventEmitterMaxListeners: 20,\n\t\tmaxVisibleSegments: 1280\n\t};\n\tplugins: {[pluginName: string]: ChartPlugin} = {};\n\ttrendsManager: TrendsManager;\n\tscreen: Screen;\n\txAxisMarks: AxisMarks;\n\tyAxisMarks: AxisMarks;\n\n\t/**\n\t * true then state was initialized and ready to use\n\t */\n\tisReady = false;\n\n\n\tprivate ee: EventEmitter;\n\n\tconstructor(\n\t\tinitialState: IChartState,\n\t\tplugins: ChartPlugin[] = []\n\t) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\n\n\t\tthis.state = Utils.deepMerge(this.state, initialState);\n\t\tthis.trendsManager = new TrendsManager(this, initialState);\n\t\tinitialState.trends = this.trendsManager.calculatedOptions;\n\t\tinitialState = this.installPlugins(plugins, initialState);\n\t\tthis.setState(initialState);\n\t\tthis.setState({computedData: this.getComputedData()});\n\t\tthis.savePrevState();\n\n\t\tthis.screen = new Screen(this);\n\t\tthis.xAxisMarks = new AxisMarks(this, AXIS_TYPE.X);\n\t\tthis.yAxisMarks = new AxisMarks(this, AXIS_TYPE.Y);\n\t\tthis.initListeners();\n\t\t\n\t\t// message to other modules that Chart.state is ready for use\n\t\tthis.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\n\t\t// message to other modules that Chart is ready for use\n\t\tthis.isReady = true;\n\t\tthis.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t}\n\n\t/**\n\t * destroy state, use ChartView.destroy to completely destroy state\n\t */\n\tdestroy() {\n\t\tthis.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t\tthis.ee.removeAllListeners();\n\t\tthis.state = {};\n\t}\n\n\tonDestroy(cb: Function) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t}\n\n\tonInitialStateApplied(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t}\n\n\tonReady(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t}\n\n\tonChange(cb: (changedProps: IChartState) => void ) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t}\n\n\tonTrendChange(cb: (trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t}\n\n\tonTrendsChange(cb: (trendsOptions: ITrendsOptions) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t}\n\n\tonScrollStop(cb: () => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t}\n\n\tonScroll(cb: (scrollOptions: {deltaX: number}) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t}\n\n\tonZoom(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t}\n\n\tonResize(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t}\n\n\tonPluginsStateChange(cb: (changedPluginsStates: {[pluginName: string]: Plugin}) => any) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t}\n\t\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.trendsManager.getTrend(trendName);\n\t}\n\n\tsetState(newState: IChartState, eventData?: any, silent = false) {\n\t\tlet stateData = this.state as {[key: string]: any};\n\t\tlet newStateObj = newState as {[key: string]: any};\n\n\t\tvar changedProps: {[key: string]: any} = {};\n\t\tfor (let key in newStateObj) {\n\t\t\tif (stateData[key] !== newStateObj[key]) {\n\t\t\t\tchangedProps[key] = newStateObj[key] as any;\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(changedProps as IChartState);\n\n\n\t\t// temporary remove trends state from newState by performance reasons\n\t\tlet trendsData: {[trendName: string]: ITrendData} = {};\n\t\tif (newState.trends) for (let trendName in newState.trends) {\n\t\t\tlet trendOptions = newState.trends[trendName];\n\t\t\tif (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t\t\tdelete trendOptions.data;\n\t\t}\n\t\tlet newStateContainsData = Object.keys(trendsData).length > 0;\n\t\t\n\n\t\tthis.state = Utils.deepMerge(this.state, newState, false);\n\n\t\t// return state to state\n\t\tif (newStateContainsData) for (let trendName in trendsData) {\n\t\t\tthis.state.trends[trendName].data = trendsData[trendName];\n\t\t}\n\n\t\tif (silent) return;\n\n\t\t// recalculate all dynamic state props\n\t\tvar recalculateResult = this.recalculateState(changedProps);\n\t\tchangedProps = recalculateResult.changedProps;\n\t\t\n\t\tthis.emitChangedStateEvents(changedProps, eventData);\n\n\t}\n\n\t/**\n\t * recalculate all computed state props\n\t */\n\tprivate recalculateState(changedProps?: IChartState): IRecalculatedStateResult {\n\t\tvar data = this.state;\n\t\tvar patch: IChartState = {};\n\t\tvar actualData = Utils.deepMerge({}, data);\n\n\t\t// recalculate scroll position by changed cursor options\n\t\tvar cursorOptions = changedProps.cursor;\n\t\tvar isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t\tif (isMouseDrag) {\n\t\t\tvar oldX = data.prevState.cursor.x;\n\t\t\tvar currentX =  cursorOptions.x;\n\t\t\tvar currentScroll = data.xAxis.range.scroll;\n\t\t\tvar deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t\t\tpatch.xAxis = {range: {scroll: currentScroll + deltaXVal}};\n\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: patch.xAxis} as IChartState)\n\t\t}\n\n\t\tlet chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\n\t\tlet scrollXChanged = false;\n\t\tlet needToRecalculateXAxis = (\n\t\t\tisMouseDrag ||\n\t\t\tchartWasResized ||\n\t\t\t(changedProps.xAxis && (changedProps.xAxis.range)) ||\n\t\t\tthis.state.xAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateXAxis) {\n\t\t\tlet xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t\t\tif (xAxisPatch) {\n\t\t\t\tscrollXChanged = true;\n\t\t\t\tpatch = Utils.deepMerge(patch, {xAxis: xAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: xAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\n\n\t\t// recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\n\t\tlet needToRecalculateYAxis = (\n\t\t\tchartWasResized ||\n\t\t\t(\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.RELATIVE_END ||\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.AUTO ||\n\t\t\t\tdata.yAxis.range.isMirrorMode\n\t\t\t) &&\n\t\t\t(scrollXChanged || changedProps.trends || changedProps.yAxis) ||\n\t\t\tthis.state.yAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateYAxis){\n\t\t\tlet yAxisPatch = this.recalculateYAxis(actualData);\n\t\t\tif (yAxisPatch) {\n\t\t\t\tpatch = Utils.deepMerge(patch, {yAxis: yAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {yAxis: yAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(patch);\n\t\tlet allChangedProps = Utils.deepMerge(changedProps, patch);\n\t\tpatch.computedData = this.getComputedData(allChangedProps);\n\t\tthis.savePrevState(patch);\n\t\tthis.state = Utils.deepMerge(this.state, patch);\n\t\treturn {changedProps: allChangedProps, patch: patch}\n\t}\n\n\tprivate getComputedData(changedProps?: IChartState): IChartStateComputedData {\n\t\tvar computeAll = !changedProps;\n\t\tvar computedData: IChartStateComputedData = {};\n\n\t\tif (computeAll || changedProps.trends && this.trendsManager) {\n\t\t\tcomputedData.trends = {\n\t\t\t\tmaxXVal: this.trendsManager.getEndXVal(),\n\t\t\t\tminXVal: this.trendsManager.getStartXVal()\n\t\t\t}\n\t\t}\n\t\treturn computedData;\n\t}\n\n\tprivate savePrevState(changedProps?: IChartState) {\n\t\tif (!changedProps) changedProps = this.state;\n\t\tvar prevState = this.state.prevState;\n\n\t\t// prevent to store prev trend state by performance reasons\n\t\tUtils.copyProps(this.state, prevState, changedProps, ['trends']);\n\n\t}\n\n\tprivate emitChangedStateEvents(changedProps: IChartState, eventData: any) {\n\t\tvar prevState = this.state.prevState;\n\n\t\t// emit common change event\n\t\tthis.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\n\t\t// emit event for each changed state property\n\t\tfor (let key in changedProps) {\n\t\t\tthis.ee.emit(key + 'Change', (changedProps as {[key: string]: any})[key], eventData);\n\t\t}\n\n\t\tif (!this.isReady) return;\n\n\t\t// emit special events based on changed state\n\t\tlet scrollStopEventNeeded = (\n\t\t\tchangedProps.cursor &&\n\t\t\tchangedProps.cursor.dragMode === false &&\n\t\t\tprevState.cursor.dragMode === true\n\t\t);\n\t\tscrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\n\t\tlet scrollChangeEventsNeeded = (\n\t\t\tchangedProps.xAxis &&\n\t\t\tchangedProps.xAxis.range &&\n\t\t\tchangedProps.xAxis.range.scroll !== void 0\n\t\t);\n\t\tscrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\n\t\tlet zoomEventsNeeded = (\n\t\t\t(changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\n\t\t\t(changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom)\n\t\t);\n\t\tzoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\n\t\tlet resizeEventNeeded = (changedProps.width || changedProps.height);\n\t\tresizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\n\t\tlet pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\n\t\tpluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t}\n\n\n\t/**\n\t * init plugins and save plugins options in initialState\n\t */\n\tprivate installPlugins(plugins: ChartPlugin[], initialState: IChartState): IChartState {\n\t\tinitialState.pluginsState = {};\n\t\tplugins.forEach(plugin => {\n\t\t\tlet PluginClass = plugin.constructor as typeof ChartPlugin;\n\t\t\tlet pluginName = PluginClass.NAME;\n\t\t\tinitialState.pluginsState[pluginName] = Utils.deepMerge({}, plugin.initialState);\n\t\t\tthis.plugins[pluginName] = plugin;\n\t\t\tplugin.setupChart(this);\n\t\t});\n\t\treturn initialState;\n\t}\n\n\n\t/**\n\t * returns plugin instance by plugin name\n\t * @example\n\t */\n\tgetPlugin(pluginName: string): ChartPlugin {\n\t\treturn this.plugins[pluginName];\n\t}\n\n\n\tprivate initListeners() {\n\t\tthis.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, (changedTrends: ITrendsOptions, newData: ITrendData) => {\n\t\t\tthis.handleTrendsChange(changedTrends, newData)\n\t\t});\n\t}\n\n\tprivate handleTrendsChange(changedTrends: ITrendsOptions, newData: ITrendData) {\n\t\tfor (let trendName in changedTrends) {\n\t\t\tthis.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t\t}\n\t}\n\n\tprivate recalculateXAxis(actualData: IChartState, changedProps: IChartState): IAxisOptions {\n\t\tvar axisRange = actualData.xAxis.range;\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar isInitialize = axisRange.zeroVal == void 0;\n\t\tvar zeroVal: number, scaleFactor: number;\n\t\tvar zoom = axisRange.zoom;\n\n\t\tif (axisRange.isMirrorMode) {\n\t\t\tUtils.error('range.isMirrorMode available only for yAxis.range');\n\t\t}\n\n\t\tif (isInitialize) {\n\t\t\tzeroVal = axisRange.from;\n\t\t\tscaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t} else {\n\t\t\tzeroVal = axisRange.zeroVal;\n\t\t\tscaleFactor = axisRange.scaleFactor;\n\n\t\t\t// recalculate range.zoom and range.scroll then range.from or range.to was changed\n\t\t\tif (\n\t\t\t\tchangedProps.xAxis &&\n\t\t\t\t(changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)\n\t\t\t) {\n\t\t\t\tif (changedProps.xAxis.range.zoom) {\n\t\t\t\t\tUtils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t\t\t\t}\n\t\t\t\tlet currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\t\tpatch.range.scroll = axisRange.from - zeroVal;\n\t\t\t\tpatch.range.zoom = currentScaleFactor / scaleFactor;\n\t\t\t\treturn patch;\n\t\t\t}\n\t\t}\n\n\n\t\t// recalculate range.from and range.to then range.zoom or range.scroll was changed\n\t\tdo {\n\t\t\tvar from = zeroVal + axisRange.scroll;\n\t\t\tvar to = from + actualData.width / (scaleFactor * zoom);\n\t\t\tvar rangeLength = to - from;\n\t\t\tvar needToRecalculateZoom = false;\n\t\t\tvar rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\n\t\t\tvar rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\n\t\t\tneedToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t\t\tif (needToRecalculateZoom) {\n\t\t\t\tvar fixScale = rangeLength > axisRange.maxLength ?\n\t\t\t\t\trangeLength / axisRange.maxLength :\n\t\t\t\t\trangeLength / axisRange.minLength;\n\t\t\t\tvar zoom = zoom * fixScale;\n\t\t\t\tpatch.range.zoom = zoom;\n\t\t\t}\n\t\t} while (needToRecalculateZoom);\n\n\t\tpatch.range.from = from;\n\t\tpatch.range.to = to;\n\t\treturn patch;\n\t}\n\n\n\tprivate recalculateYAxis(actualData: IChartState): IAxisOptions {\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar yAxisRange = actualData.yAxis.range;\n\t\tvar isInitialize = yAxisRange.scaleFactor == void 0;\n\t\tvar trends = this.trendsManager;\n\t\tvar trendsEndXVal = trends.getEndXVal();\n\t\tvar trendsStartXVal = trends.getStartXVal();\n\t\tvar xRange = actualData.xAxis.range;\n\t\tvar {from: xFrom, to: xTo} = xRange;\n\t\tvar xRangeLength = xTo - xFrom;\n\t\tvar zeroVal: number, scaleFactor: number, scroll: number, zoom: number, needToZoom: boolean;\n\n\t\t// check situation when state was scrolled behind trends end or before trends start\n\t\tif (xTo > trendsEndXVal) {\n\t\t\txTo = trendsEndXVal;\n\t\t\txFrom = xTo - xRangeLength;\n\t\t} else if (xFrom < trendsStartXVal) {\n\t\t\txFrom = trendsStartXVal;\n\t\t\txTo = xFrom + xRangeLength;\n\t\t}\n\n\t\tvar maxY = trends.getMaxYVal(xFrom, xTo);\n\t\tvar minY = trends.getMinYVal(xFrom, xTo);\n\n\t\tvar trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t\tif (yAxisRange.type == AXIS_RANGE_TYPE.RELATIVE_END) {\n\t\t\tif (trendLastY > maxY) maxY = trendLastY;\n\t\t\tif (trendLastY < minY) minY = trendLastY;\n\t\t}\n\n\t\tif (yAxisRange.isMirrorMode) {\n\t\t\tif (yAxisRange.zeroVal == void 0) Utils.error('range.zeroVal must be set when range.isMirrorMode');\n\t\t\tlet distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t\t\tlet distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t\t\tlet maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t\t\tmaxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t\t\tminY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t\t}\n\t\tlet margin = yAxisRange.margin;\n\t\tlet padding = {\n\t\t\tstart: yAxisRange.padding.start + margin.start,\n\t\t\tend: yAxisRange.padding.end + margin.end\n\t\t};\n\n\t\tif (padding.end + padding.start >= actualData.height) {\n\t\t\tUtils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\n\t\t}\n\n\t\tlet rangeLength = maxY - minY;\n\t\tlet paddingTopInPercents = padding.end / actualData.height;\n\t\tlet paddingBottomInPercents = padding.start / actualData.height;\n\t\tlet rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t\tlet visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t\tlet fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t\tlet toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t\t\n\t\tif (isInitialize) {\n\t\t\tzeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t\t\tscaleFactor = actualData.height / (toVal - fromVal);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t\tneedToZoom = true;\n\t\t} else {\n\t\t\tscaleFactor = yAxisRange.scaleFactor;\n\t\t\tzeroVal = yAxisRange.zeroVal;\n\n\t\t\tlet maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t\t\tlet minScreenY = Math.round(this.getScreenYByValue(minY));\n\t\t\tneedToZoom = (\n\t\t\t\tmaxScreenY > actualData.height - margin.end ||\n\t\t\t\tmaxScreenY < actualData.height - padding.end ||\n\t\t\t\tminScreenY < margin.start ||\n\t\t\t\tminScreenY > padding.start\n\t\t\t);\n\t\t}\n\n\t\tif (!needToZoom) return null;\n\n\t\tscroll = fromVal - zeroVal;\n\t\tzoom = (actualData.height / (toVal - fromVal)) / scaleFactor ;\n\n\t\tvar currentAxisRange = this.state.yAxis.range;\n\t\tif (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t\tif (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t\tif (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t\tif (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t\t\n\t\treturn patch;\n\t}\n\n\tzoom(zoomValue: number, origin = 0.5): Promise<void> {\n\t\tlet {zoom, scroll, scaleFactor} = this.state.xAxis.range;\n\t\tlet newZoom = zoom * zoomValue;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\tlet nextRange = this.state.width / (scaleFactor * newZoom);\n\t\tlet newScroll = scroll + (currentRange - nextRange) * origin;\n\t\tthis.setState({xAxis: {range: {zoom: newZoom, scroll: newScroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.zoomSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\t\n\tzoomToRange(range: number, origin?: number): Promise<void> {\n\t\tvar {scaleFactor, zoom} = this.state.xAxis.range;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\treturn this.zoom(currentRange / range, origin);\n\t}\n\n\tscrollToEnd(): Promise<void> {\n\t\tlet state = this.state;\n\t\tlet endXVal = this.trendsManager.getEndXVal();\n\t\tlet range = state.xAxis.range;\n\t\tvar scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t\tthis.setState({xAxis: {range: {scroll: scroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.scrollSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to xVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.xAxis.range;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to yVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.yAxis.range;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\n\t}\n\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  returns x value by screen x coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\tvar {zeroVal, scroll} = this.state.xAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  returns y value by screen y coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\tvar {zeroVal, scroll} = this.state.yAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByYAxis(y);\n\t}\n\n\n\t/**\n\t *  returns screen x value by screen y coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t/**\n\t *  returns screen y value by screen y coordinate\n\t */\n\tgetScreenYByValue(yVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t\treturn this.valueToPxByYAxis(yVal - zeroVal - scroll)\n\t}\n\n\n\t/**\n\t * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\n\n\tgetScreenLeftVal() {\n\t\treturn this.getValueByScreenX(0);\n\t}\n\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.state.width);\n\t}\n\n\n\tgetPaddingRight(): number {\n\t\treturn this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Chart.ts\n **/","import {Chart, IChartState} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {TrendSegmentsManager} from \"./TrendSegmentsManager\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Promise} from './deps/deps';\nimport { TChartColor } from './Color';\n\nexport interface IPrependPromiseExecutor {\n\t(requestedDataLength: number, resolve: (data: TTrendRawData) => void, reject: () => void): void;\n}\nconst EVENTS = {\n\tCHANGE: 'Change',\n\tPREPEND_REQUEST: 'prependRequest'\n};\nexport enum TREND_TYPE {LINE, CANDLE}\nexport type TTrendRawData = ITrendData | number[];\nexport interface ITrendItem {xVal: number, yVal: number, id?: number}\nexport interface ITrendData extends Array<ITrendItem>{}\nexport interface ITrendTypeSettings {\n\tminSegmentLengthInPx?: number;\n\tmaxSegmentLengthInPx?: number;\n}\nexport interface ITrendOptions {\n\tenabled?: boolean,\n\tdata?: ITrendData\n\tdataset?: ITrendData | number[];\n\tname?: string;\n\ttype?: TREND_TYPE;\n\tlineWidth?: number;\n\tlineColor?: TChartColor;\n\tbackgroundColor?: TChartColor;\n\thasIndicator?: boolean;\n\thasBackground?: boolean;\n\thasBeacon?: boolean;\n\tmaxSegmentLength?: number;\n\tsettingsForTypes?: {\n\t\tCANDLE?: ITrendTypeSettings,\n\t\tLINE?: ITrendTypeSettings\n\t}\n}\n\nexport class Trend {\n\tname: string;\n\tsegmentsManager: TrendSegmentsManager;\n\tminXVal = Infinity;\n\tminYVal = Infinity;\n\tmaxXVal = -Infinity;\n\tmaxYVal = -Infinity;\n\tprivate chartState: Chart;\n\tprivate calculatedOptions: ITrendOptions;\n\tprivate prependRequest: Promise<TTrendRawData>;\n\tprivate ee: EventEmitter;\n\t\n\tconstructor(chartState: Chart, trendName: string, initialState: IChartState) {\n\t\tvar options = initialState.trends[trendName];\n\t\tthis.name = trendName;\n\t\tthis.chartState = chartState;\n\t\tthis.calculatedOptions = Utils.deepMerge(this.chartState.state.trendDefaultState, options);\n\t\tthis.calculatedOptions.name = trendName;\n\t\tif (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t\tthis.calculatedOptions.dataset = [];\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvents();\n\t}\n\n\tprivate onInitialStateApplied() {\n\t\tthis.segmentsManager = new TrendSegmentsManager(this.chartState, this);\n\t}\n\n\tprivate bindEvents() {\n\t\tvar chartState = this.chartState;\n\t\tchartState.onInitialStateApplied(() => this.onInitialStateApplied());\n\t\tchartState.onScrollStop(() => this.checkForPrependRequest());\n\t\tchartState.onZoom(() => this.checkForPrependRequest());\n\t\tchartState.onTrendChange((trendName, changedOptions, newData) => this.ee.emit(EVENTS.CHANGE, changedOptions, newData));\n\t\tchartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tgetCalculatedOptions() {\n\t\treturn this.calculatedOptions;\n\t}\n\n\tappendData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData());\n\t\tvar updatedTrendData = options.data.concat(newData);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprependData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData(), true);\n\t\tvar updatedTrendData = newData.concat(options.data);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprivate changeData(allData: ITrendData, newData: ITrendData) {\n\t\tfor (let item of newData) {\n\t\t\tif (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t\t\tif (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t\t\tif (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t\t\tif (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t\t}\n\t\tvar options = this.getOptions();\n\t\tvar statePatch: IChartState = {trends: {[options.name]: {data: allData}}};\n\t\tthis.chartState.setState(statePatch, newData);\n\t}\n\t\n\tgetData(fromX?: number, toX?: number): ITrendData {\n\t\tvar data = this.getOptions().data;\n\t\tif (fromX == void 0 && toX == void 0) return data;\n\n\t\tfromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t\ttoX = toX !== void 0 ? toX : data[data.length].xVal;\n\t\tvar filteredData: ITrendData = [];\n\t\tfor (let item of data) {\n\t\t\tif (item.xVal < fromX) continue;\n\t\t\tif (item.xVal > toX) break;\n\t\t\tfilteredData.push(item)\n\t\t}\n\t\treturn filteredData;\n\t}\n\n\tgetFirstItem(): ITrendItem {\n\t\treturn this.getOptions().data[0];\n\t}\n\t\n\tgetLastItem(): ITrendItem {\n\t\tvar data = this.getOptions().data;\n\t\treturn data[data.length - 1];\n\t}\n\n\tgetOptions() {\n\t\treturn this.chartState.state.trends[this.name]\n\t}\n\n\tsetOptions(options: ITrendOptions) {\n\t\tthis.chartState.setState({trends: {[this.name]: options}});\n\t}\n\n\tonPrependRequest(cb: IPrependPromiseExecutor): Function {\n\t\tthis.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t\t}\n\t}\n\n\t/**\n\t * shortcut for Chart.onTrendChange\n\t */\n\tonChange(cb: (changedOptions: ITrendOptions, newData: ITrendData) => void): Function {\n\t\tthis.ee.on(EVENTS.CHANGE, cb);\n\t\treturn () => { this.ee.off(EVENTS.CHANGE, cb);}\n\t}\n\n\tonDataChange(cb: (newData: ITrendData) => void): Function {\n\t\tvar onChangeCb = (changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tif (newData) cb(newData);\n\t\t};\n\t\tthis.ee.on(EVENTS.CHANGE, onChangeCb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.CHANGE, onChangeCb);\n\t\t}\n\t}\n\n\tprivate checkForPrependRequest() {\n\t\tif (this.prependRequest) return;\n\t\tvar chartState = this.chartState;\n\t\tvar minXVal = chartState.state.computedData.trends.minXVal;\n\t\tvar minScreenX = chartState.getScreenXByValue(minXVal);\n\t\tvar needToRequest = minScreenX > 0;\n\t\tvar {from, to} = chartState.state.xAxis.range;\n\t\tvar requestedDataLength = to - from;\n\t\tif (!needToRequest) return;\n\t\t\n\t\tthis.prependRequest = new Promise<TTrendRawData>((resolve: Function, reject: Function) => {\n\t\t\tthis.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t\t});\n\n\t\tthis.prependRequest.then((newData: TTrendRawData) => {\n\t\t\tthis.prependData(newData);\n\t\t\tthis.prependRequest = null;\n\t\t}, () => {\n\t\t\tthis.prependRequest = null;\n\t\t})\n\t\n\t}\n\n\tstatic prepareData (newData: TTrendRawData, currentData?: ITrendData, isPrepend = false): ITrendData {\n\t\tvar data: ITrendData = [];\n\t\tif (typeof newData[0] == 'number') {\n\t\t\tcurrentData = currentData || [];\n\t\t\tlet initialItem: ITrendItem;\n\t\t\tlet xVal: number;\n\t\t\tif (isPrepend) {\n\t\t\t\tinitialItem = currentData[0];\n\t\t\t\txVal = initialItem.xVal - newData.length;\n\t\t\t} else {\n\t\t\t\tinitialItem = currentData[currentData.length - 1];\n\t\t\t\txVal = initialItem ? initialItem.xVal + 1 : 0;\n\t\t\t}\n\t\t\tfor (let yVal of newData as number[]) {\n\t\t\t\tdata.push({xVal: xVal, yVal: yVal, id: Utils.getUid()});\n\t\t\t\txVal++;\n\t\t\t}\n\t\t} else {\n\t\t\tdata = newData as ITrendData;\n\t\t}\n\t\treturn data;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Trend.ts\n **/","import { IIteralable } from \"./interfaces\";\nimport { EventEmitter } from './EventEmmiter';\nimport { Chart } from \"./Chart\";\nimport Vector3 = THREE.Vector3;\nimport { ITrendData, ITrendOptions, ITrendItem, Trend, TREND_TYPE, ITrendTypeSettings } from \"./Trend\";\nimport { Utils } from \"./Utils\";\n\nconst MAX_ANIMATED_SEGMENTS = 100;\nconst EVENTS = {\n\tREBUILD: 'rebuild',\n\tDISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\n\tANIMATION_FRAME: 'animationFrame'\n};\n\n/**\n *  Class helps to display and animate trends segments\n */\nexport class TrendSegmentsManager {\n\tsegmentsById: {[id: string]: TrendSegment} = {};\n\tsegments: TrendSegment[] = [];\n\tchartState: Chart;\n\tanimatedSegmentsIds: number[] = [];\n\tmaxSegmentLength: number;\n\tsegmentsLength = 0;\n\tfirstDisplayedSegmentInd: number;\n\tfirstDisplayedSegment: TrendSegment;\n\tlastDisplayedSegmentInd: number;\n\tlastDisplayedSegment: TrendSegment;\n\tprivate appendAnimation: TweenLite;\n\tprivate prependAnimation: TweenLite;\n\tprivate animatedSegmentsForAppend: number[] = [];\n\tprivate animatedSegmentsForPrepend: number[] = [];\n\tprivate nextEmptyId = 0;\n\tprivate startSegmentId = 0;\n\tprivate endSegmentId = 0;\n\tprivate trend: Trend;\n\tprivate ee: EventEmitter;\n\n\tconstructor (chartState: Chart, trend: Trend) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.trend = trend;\n\t\tthis.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t\tthis.tryToRebuildSegments();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.trend.onChange((changedOptions, newData) => this.onTrendChangeHandler(changedOptions, newData));\n\t\tthis.chartState.onZoom(() => this.onZoomHandler());\n\t\tthis.chartState.onScroll(() => this.recalculateDisplayedRange());\n\t\tthis.chartState.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.appendAnimation && this.appendAnimation.kill();\n\t\tthis.prependAnimation && this.prependAnimation.kill();\n\t}\n\n\tprivate onZoomHandler() {\n\t\tlet segmentsRebuilded = this.tryToRebuildSegments();\n\t\tif (!segmentsRebuilded) {\n\t\t\tthis.recalculateDisplayedRange()\n\t\t}\n\t}\n\n\tprivate onTrendChangeHandler(changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar needToRebuildSegments = (\n\t\t\tchangedOptions.type != void 0 ||\n\t\t\tchangedOptions.maxSegmentLength != void 0\n\t\t);\n\n\n\t\tif (needToRebuildSegments) {\n\t\t\tthis.tryToRebuildSegments(true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!newData) return;\n\n\t\tvar data = this.trend.getData();\n\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\tisAppend ? this.appendData(newData) : this.prependData(newData);\n\t\tthis.recalculateDisplayedRange();\n\t}\n\n\tgetSegment(id: number) {\n\t\treturn this.segmentsById[id];\n\t}\n\n\tgetEndSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.endSegmentId];\n\t}\n\n\tgetStartSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.startSegmentId];\n\t}\n\t\n\tprivate tryToRebuildSegments(force = false): boolean {\n\t\tlet options = this.trend.getOptions();\n\t\tlet trendTypeName = TREND_TYPE[options.type] as string;\n\t\tlet trendTypesSettings =  options.settingsForTypes as IIteralable;\n\t\tlet trendTypeSettings = trendTypesSettings[trendTypeName] as ITrendTypeSettings;\n\t\tlet {\n\t\t\tminSegmentLengthInPx,\n\t\t\tmaxSegmentLengthInPx\n\t\t} = trendTypeSettings;\n\n\t\tlet needToRebuild = this.segments.length === 0 || force;\n\t\tlet segmentLength = this.maxSegmentLength;\n\n\t\t// call toFixed(2) to prevent floating segment error compare\n\t\tlet currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t\tlet currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\n\t\tif (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t\t} else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t\t}\n\n\t\tif (!needToRebuild) return false;\n\n\t\tthis.maxSegmentLength = segmentLength;\n\t\tthis.segmentsById = {};\n\t\tthis.segments = [];\n\t\tthis.nextEmptyId = 0;\n\t\tthis.startSegmentId = 0;\n\t\tthis.endSegmentId = 0;\n\t\tthis.segmentsLength = 0;\n\t\tthis.stopAllAnimations();\n\t\tthis.appendData(null, true);\n\t\tthis.recalculateDisplayedRange(true);\n\t\tthis.ee.emit(EVENTS.REBUILD);\n\t}\n\n\tprivate stopAllAnimations() {\n\t\tthis.animatedSegmentsIds = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tif (this.prependAnimation) this.prependAnimation.kill();\n\t\tif (this.appendAnimation) this.appendAnimation.kill();\n\t}\n\t\n\tprivate recalculateDisplayedRange(segmentsAreRebuilded = false) {\n\t\tvar {from, to} = this.chartState.state.xAxis.range;\n\t\tvar {firstDisplayedSegment, lastDisplayedSegment} = this;\n\t\tvar displayedRange = to - from;\n\n\t\tthis.firstDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\n\t\tthis.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n\t\tthis.lastDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\n\t\tthis.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n\t\tif (segmentsAreRebuilded) return;\n\n\t\tvar displayedRangeChanged = (\n\t\t\tfirstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\n\t\t\tlastDisplayedSegment.id !== this.lastDisplayedSegment.id\n\t\t);\n\t\tif (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t}\n\n\t// getSegments(fromX?: number, toX?: number): TrendSegment[] {\n\t// \tvar segments = this.segments;\n\t// \tif (fromX == void 0 && toX == void 0) return segments;\n\t// \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\n\t// \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\n\t// \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\n\t// \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\n\t// \treturn segments.slice(startSegmentInd, endSegmentInd);\n\t// }\n\n\t/**\n\t * returns array of segments for values array\n\t * values must be sorted!\n\t */\n\tgetSegmentsForXValues(values: number[]): TrendSegment[] {\n\t\tvar valueInd = 0;\n\t\tvar value = values[valueInd];\n\t\tvar lastValueInd = values.length - 1;\n\t\tvar results: TrendSegment[] = [];\n\t\tvar segment = this.getStartSegment();\n\t\tif (!segment.hasValue) return [];\n\t\twhile (segment) {\n\t\t\n\t\t\twhile (value < segment.startXVal) {\n\t\t\t\tresults.push(void 0);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\n\t\t\twhile (value > segment.endXVal) {\n\t\t\t\tsegment = segment.getNext();\n\t\t\t\tif (!segment) break;\n\t\t\t}\n\t\t\n\t\t\tvar valueInPoint = (\n\t\t\t\tsegment.startXVal == value || segment.endXVal == value ||\n\t\t\t\t(segment.startXVal < value && segment.endXVal > value)\n\t\t\t);\n\t\t\tif (valueInPoint) {\n\t\t\t\tresults.push(segment);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\tif (valueInd > lastValueInd) break;\n\t\t}\n\t\treturn results;\n\t}\n\n\tonAnimationFrame(cb: (animationState: TrendSegmentsManager) => void): Function {\n\t\treturn this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t}\n\n\tonRebuild(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.REBUILD, cb);\n\t}\n\n\tonDisplayedRangeChanged(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t}\n\t\n\tallocateNextSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar prevSegment = this.segmentsById[this.endSegmentId];\n\t\tif (prevSegment && prevSegment.hasValue) {\n\t\t\tprevSegment.nextId = id;\n\t\t\tsegment.prevId = prevSegment.id;\n\t\t}\n\t\tthis.endSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.push(segment);\n\t\treturn segment;\n\t}\n\n\tallocatePrevSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar nextSegment = this.segmentsById[this.startSegmentId];\n\t\tif (nextSegment && nextSegment.hasValue) {\n\t\t\tnextSegment.prevId = id;\n\t\t\tsegment.nextId = nextSegment.id;\n\t\t}\n\t\tthis.startSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.unshift(segment);\n\t\treturn segment;\n\t}\n\n\tprivate appendData(newData: ITrendData, needRebuildSegments = false) {\n\n\t\t// WARNING: bottleneck method!\n\n\t\t// var t1 = performance.now();\n\t\tvar trendData = this.trend.getData();\n\t\tif (needRebuildSegments) {\n\t\t\tnewData = trendData;\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t}\n\n\t\tvar startItemInd = trendData.length - newData.length;\n\t\tvar segment = this.getEndSegment() || this.allocateNextSegment();\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\tvar itemInd = 0;\n\t\twhile (itemInd < newData.length) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.appendItem(item);\n\t\t\tlet isLastItem = itemInd == newData.length - 1;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd++;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForAppend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t\t\t\t\tsegment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForAppend.push(id);\n\n\t\t\t}\n\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocateNextSegment();\n\t\t\tlet prevItem = trendData[startItemInd + itemInd - 1];\n\t\t\tsegment.appendItem(prevItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\t// var t2 = performance.now();\n\t\t// console.log(t2 - t1);\n\n\t\t// do not create animation if segments was rebuilded\n\t\tif (needRebuildSegments) {\n\t\t\tfor (let segmentId of this.animatedSegmentsForAppend) {\n\t\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\t\tsegment.currentAnimationState = segment.createAnimationState();\n\t\t\t}\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t\treturn;\n\t\t}\n\t\tif (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time);\n\t}\n\n\n\t// TODO: refactor duplicated code from appendData\n\tprivate prependData(newData: ITrendData) {\n\t\tvar trendData = this.trend.getData();\n\t\tvar segment = this.getStartSegment() || this.segmentsById[0];\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar itemInd = newData.length - 1;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\twhile (itemInd >= 0) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.prependItem(item);\n\t\t\tlet isLastItem = itemInd == 0;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd--;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForPrepend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t\t\t\t\tsegment.initialAnimationState.endYVal =  initialAnimationState.startYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForPrepend.push(id);\n\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocatePrevSegment();\n\t\t\tlet nextItem = trendData[itemInd + 1];\n\t\t\tsegment.prependItem(nextItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\tif (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time, true);\n\t}\n\n\tprivate animate(time: number, isPrepend = false) {\n\n\t\tvar animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tvar animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\n\t\tif ((animation && animation.isActive()) || time == 0) {\n\t\t\tif (animation) animation.kill();\n\t\t\tthis.onAnimationFrameHandler(1, isPrepend);\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar ease = animationsOptions.trendChangeEase;\n\t\tvar objectToAnimate = {animationValue: 0};\n\t\tanimation = TweenLite.to(objectToAnimate, time, {animationValue: 1, ease});\n\t\tanimation.eventCallback('onUpdate', () => this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend));\n\t\tanimation.eventCallback('onComplete', () => {\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\tthis.appendAnimation = null;\n\t\t});\n\n\t\tif (isPrepend) {\n\t\t\tthis.prependAnimation = animation;\n\t\t} else {\n\t\t\tthis.appendAnimation = animation;\n\t\t}\n\t}\n\n\tprivate onAnimationFrameHandler(coefficient: number, isPrepend = false) {\n\t\tlet animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tfor (let segmentId of animatedSegmentsIds) {\n\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\tfor (let key in segment.targetAnimationState) {\n\t\t\t\tlet targetValue = segment.targetAnimationState[key] as number;\n\t\t\t\tlet initialValue = segment.initialAnimationState[key] as number;\n\t\t\t\tlet currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t\t\t\tsegment.currentAnimationState[key] = currentValue;\n\t\t\t}\n\t\t}\n\t\tthis.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t\tthis.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t}\n\n}\n\nexport interface ITrendSegmentState extends IIteralable {\n\txVal?: number;\n\tyVal?: number;\n\tstartXVal?: number;\n\tstartYVal?: number;\n\tendXVal?: number;\n\tendYVal?: number;\n\tmaxYVal?: number;\n\tminYVal?: number;\n\tmaxLength?: number;\n}\n\nexport class TrendSegment implements ITrendSegmentState {\n\tid: number;\n\tprevId: number;\n\tnextId: number;\n\thasValue: boolean;\n\txVal: number;\n\tyVal: number;\n\tstartXVal: number;\n\tstartYVal: number;\n\tendXVal: number;\n\tendYVal: number;\n\tmaxYVal: number;\n\tminYVal: number;\n\tisCompleted = false;\n\tmaxLength: number;\n\titems: ITrendItem[] = [];\n\n\tinitialAnimationState: ITrendSegmentState = {};\n\ttargetAnimationState: ITrendSegmentState = {};\n\tcurrentAnimationState: ITrendSegmentState = {};\n\n\tprivate trendSegments: TrendSegmentsManager;\n\t\n\tconstructor(trendPoints: TrendSegmentsManager, id: number) {\n\t\tthis.trendSegments = trendPoints;\n\t\tthis.id = id;\n\t\tthis.maxLength = trendPoints.maxSegmentLength;\n\t}\n\n\tcreateAnimationState(): ITrendSegmentState {\n\t\tvar {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t} = this;\n\t\treturn {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t}\n\t};\n\t\n\tappendItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.push(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar startXVal = items[0].xVal;\n\t\tif (item.xVal - startXVal > this.maxLength) return false;\n\t\titems.push(item);\n\t\treturn true;\n\t}\n\n\tprependItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.unshift(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar endXVal = items[items.length - 1].xVal;\n\t\tif (endXVal - item.xVal > this.maxLength) return false;\n\t\titems.unshift(item);\n\t\treturn true;\n\t}\n\n\tcomplete() {\n\t\tthis.isCompleted = true;\n\t\tthis.recalculateItems();\n\t\tthis.items = []; // free memory for completed ranges\n\t}\n\n\trecalculateItems() {\n\t\tlet items = this.items;\n\t\tlet itemsLength = items.length;\n\t\tif (itemsLength === 0) Utils.error('Unable to create TrendSegment without TrendItems');\n\t\tlet endItem = items[itemsLength - 1];\n\t\tlet {xVal: endXVal, yVal: endYVal} = endItem;\n\t\tlet startXVal: number, startYVal: number;\n\n\n\t\tlet startItem = items[0];\n\t\tstartXVal = startItem.xVal;\n\t\tstartYVal = startItem.yVal;\n\n\t\tlet minX = Math.min(startXVal, endXVal);\n\t\tlet maxX = Math.max(startXVal, endXVal);\n\t\tlet middleXVal = minX + (maxX - minX) / 2;\n\n\t\tlet minY = Math.min(startYVal, endYVal);\n\t\tlet maxY = Math.max(startYVal, endYVal);\n\t\tlet middleYVal = minY + (maxY - minY) / 2;\n\n\t\tlet yVals = items.map(item => item.yVal);\n\n\t\tthis.startXVal = startXVal;\n\t\tthis.startYVal = startYVal;\n\t\tthis.endXVal = endXVal;\n\t\tthis.endYVal = endYVal;\n\t\tthis.xVal = middleXVal;\n\t\tthis.yVal = middleYVal;\n\t\tthis.maxYVal = Math.max(...yVals);\n\t\tthis.minYVal = Math.min(...yVals);\n\t\tif (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t}\n\n\tgetNext() {\n\t\tvar nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t\treturn nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t}\n\n\tgetPrev() {\n\t\tvar prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t\treturn prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t}\n\t\n\tgetFrameVal(): Vector3 {\n\t\tlet {xVal, yVal} = this.createAnimationState();\n\t\treturn new Vector3(xVal, yVal, 0);\n\t}\n\n\tgetFramePoint(): Vector3 {\n\t\tvar frameVal = this.getFrameVal();\n\t\treturn this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendSegmentsManager.ts\n **/","\nimport {Trend, ITrendOptions} from \"./Trend\";\nimport {Chart, IChartState} from \"./Chart\";\nimport { EventEmitter } from './EventEmmiter';\n\nexport interface ITrendsOptions {\n\t[trendName: string]: ITrendOptions;\n}\n\nconst EVENTS = {\n\tSEGMENTS_REBUILDED: 'segmentsRebuilded'\n};\n\n/**\n * Trends manager\n */\nexport class TrendsManager {\n\ttrends: {[name: string]: Trend} = {};\n\tcalculatedOptions: ITrendsOptions;\n\tprivate ee = new EventEmitter();\n\tprivate chartState: Chart;\n\t\n\tconstructor(state: Chart, initialState: IChartState) {\n\t\tthis.chartState = state;\n\t\tvar trendsCalculatedOptions: ITrendsOptions = {};\n\t\tfor (let trendName in initialState.trends) {\n\t\t\tlet trend = this.createTrend(state, trendName, initialState);\n\t\t\ttrendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t\t}\n\t\tthis.calculatedOptions = trendsCalculatedOptions;\n\t\tthis.bindEvents();\n\t}\n\n\tgetTrend(trendName: string) {\n\t\treturn this.trends[trendName];\n\t}\n\t\n\tgetEnabledTrends(): Trend[] {\n\t\tvar enabledTrends: Trend[] = [];\n\t\tvar allTrends = this.trends;\n\t\tfor (let trendName in allTrends) {\n\t\t\tlet trend = allTrends[trendName];\n\t\t\ttrend.getOptions().enabled && enabledTrends.push(trend);\n\t\t}\n\t\treturn enabledTrends;\n\t}\n\n\n\tgetStartXVal() {\n\t\tvar trends = this.getEnabledTrends();\n\t\treturn trends[0].getData()[0].xVal;\n\t}\n\n\n\tgetEndXVal(): number {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar firstTrendData = trends[0].getData();\n\t\treturn firstTrendData[firstTrendData.length - 1].xVal;\n\t}\n\t\n\t\n\tgetExtremumYVal(extremumIsMax: boolean, fromX?: number, toX?: number) {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar compareFn: Function;\n\t\tvar result: number;\n\t\tif (extremumIsMax) {\n\t\t\tresult = -Infinity;\n\t\t\tcompareFn = Math.max;\n\t\t} else {\n\t\t\tresult = Infinity;\n\t\t\tcompareFn = Math.min;\n\t\t}\n\t\tfor (let trend of trends) {\n\t\t\tvar trendData = trend.getData(fromX, toX);\n\t\t\tvar trendYValues = trendData.map((dataItem) => dataItem.yVal);\n\t\t\tresult = compareFn(result, ...trendYValues);\n\t\t}\n\t\tif (result == Infinity || result == -Infinity) result = NaN;\n\t\treturn result;\n\t}\n\n\tgetMaxYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(true, fromX, toX)}\n\tgetMinYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(false, fromX, toX)}\n\n\tonSegmentsRebuilded(cb: (trendName: string) => any) {\n\t\treturn this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t}\n\n\tprivate bindEvents() {\n\t\tthis.chartState.onInitialStateApplied(() => this.onInitialStateAppliedHandler());\n\t}\n\n\tprivate onInitialStateAppliedHandler() {\n\t\tfor (let trendName in this.trends) {\n\t\t\tthis.trends[trendName].segmentsManager.onRebuild(() => this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName));\n\t\t}\n\t}\n\n\tprivate createTrend(state: Chart, trendName: string, initialState: IChartState): Trend {\n\t\tlet trend = new Trend(state, trendName, initialState);\n\t\tthis.trends[trendName] = trend;\n\t\treturn trend;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendsManager.ts\n **/","import PerspectiveCamera = THREE.PerspectiveCamera;\nimport Vector3 = THREE.Vector3;\nimport {Chart, IChartState} from \"./Chart\";\nimport forestgreen = THREE.ColorKeywords.forestgreen;\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IScreenTransformOptions {\n\tscrollXVal?: number,\n\tscrollYVal?: number,\n\tscrollX?: number,\n\tscrollY?: number,\n\tzoomX?: number,\n\tzoomY?: number\n}\n\n/**\n * manage camera, and contains methods for transforming pixels to values\n */\nexport class Screen {\n\toptions: IScreenTransformOptions = {scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1};\n\tprivate chartState: Chart;\n\tprivate scrollXAnimation: TweenLite;\n\tprivate scrollYAnimation: TweenLite;\n\tprivate zoomXAnimation: TweenLite;\n\tprivate zoomYAnimation: TweenLite;\n\tprivate currentScrollX = {x: 0};\n\tprivate currentScrollY = {y: 0};\n\tprivate currentZoomX = {val: 1};\n\tprivate currentZoomY = {val: 1};\n\tprivate ee: EventEmitter;\n\n\tconstructor(chartState: Chart) {\n\t\tthis.chartState = chartState;\n\t\tvar {width: w, height: h} = chartState.state;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.transform({\n\t\t\tscrollY: this.valueToPxByYAxis(this.chartState.state.yAxis.range.scroll),\n\t\t\tzoomY: 1\n\t\t});\n\t\tthis.bindEvents();\n\n\t\t//camera.position.z = 1500;\n\t}\n\t\n\tgetCameraSettings() {\n\n\t\tvar {width: w, height: h} = this.chartState.state;\n\n\t\t// settings for pixel-perfect camera\n\t\tvar FOV = 75;\n\t\tvar vFOV = FOV * (Math.PI / 180);\n\t\t\n\t\treturn {\n\t\t\tFOV: FOV,\n\t\t\taspect: w / h,\n\t\t\tnear: 0.1,\n\t\t\tfar: 5000,\n\t\t\tz: h / (2 * Math.tan(vFOV / 2) ),\n\n\t\t\t// move 0,0 to left-bottom corner\n\t\t\tx: w / 2,\n\t\t\ty: h / 2\n\t\t}\n\t}\n\n\tonZoomFrame(cb: (zoomX: number, zoomY: number) => void): Function {\n\t\tvar eventName = 'zoomFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonScrollFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'scrollFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonTransformationFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'transformationFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tcameraIsMoving(): boolean {\n\t\treturn !!(\n\t\t\tthis.scrollXAnimation && this.scrollXAnimation.isActive() ||\n\t\t\t\tthis.zoomXAnimation && this.zoomXAnimation.isActive()\n\t\t);\n\t}\n\n\tprivate transform (options: IScreenTransformOptions, silent = false) {\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = options;\n\t\t\n\t\tif (scrollX != void 0) this.options.scrollX = scrollX;\n\t\tif (scrollY != void 0) this.options.scrollY = scrollY;\n\t\tif (zoomX != void 0) this.options.zoomX = zoomX;\n\t\tif (zoomY != void 0) this.options.zoomY = zoomY;\n\n\t\tif (scrollX != void 0 || zoomX) {\n\t\t\toptions.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t\t\tthis.options.scrollXVal = options.scrollXVal;\n\t\t}\n\n\t\tif (scrollY != void 0 || zoomY) {\n\t\t\toptions.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t\t\tthis.options.scrollYVal = options.scrollYVal;\n\t\t}\n\n\t\tif (silent) return;\n\n\t\tthis.ee.emit('transformationFrame', options);\n\t\t\n\t\tif (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t\t\tthis.ee.emit('scrollFrame', options);\n\t\t}\n\t\t\n\t\tif (options.zoomX != void 0 || options.zoomY != void 0) {\n\t\t\tthis.ee.emit('zoomFrame', options);\n\t\t}\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar state = this.chartState;\n\n\t\t// handle scroll and zoom\n\t\tstate.onChange((changedProps) => {\n\t\t\tif (changedProps.xAxis && changedProps.xAxis.range) {\n\t\t\t\tif (changedProps.xAxis.range.scroll != void 0) this.onScrollXHandler(changedProps);\n\t\t\t\tif (changedProps.xAxis.range.zoom) this.onZoomXHandler();\n\t\t\t}\n\t\t\tif (changedProps.yAxis && changedProps.yAxis.range){\n\t\t\t\tif (changedProps.yAxis.range.scroll != void 0) this.onScrollYHandler();\n\t\t\t\tif (changedProps.yAxis.range.zoom) this.onZoomYHandler();\n\t\t\t}\n\t\t});\n\t\tstate.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.scrollXAnimation && this.scrollXAnimation.kill();\n\t\tthis.scrollYAnimation && this.scrollYAnimation.kill();\n\t\tthis.zoomXAnimation && this.zoomXAnimation.kill();\n\t\tthis.zoomYAnimation && this.zoomYAnimation.kill();\n\t}\n\n\tprivate onScrollXHandler(changedProps: IChartState) {\n\t\tvar state = this.chartState;\n\t\tvar isDragMode = state.state.cursor.dragMode;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled && !isDragMode;\n\t\tvar zoomXChanged = changedProps.xAxis.range.zoom;\n\t\tvar isAutoscroll = state.state.autoScroll && !isDragMode && !zoomXChanged;\n\t\tvar time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t\tvar ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t\tif (this.scrollXAnimation) this.scrollXAnimation.pause();\n\n\t\tvar range = state.state.xAxis.range;\n\t\tvar targetX = range.scroll * range.scaleFactor * range.zoom;\n\t\tthis.currentScrollX.x = this.options.scrollX;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollX: this.currentScrollX.x});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t\t\t\tx: targetX, ease: ease\n\t\t\t});\n\t\t\tthis.scrollXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollX.x = targetX;\n\t\t\tcb();\n\t\t}\n\n\t}\n\n\tprivate onScrollYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tif (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t\tvar range = state.state.yAxis.range;\n\t\tvar targetY = range.scroll * range.scaleFactor * range.zoom;\n\n\t\tthis.currentScrollY.y = this.options.scrollY;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollY: this.currentScrollY.y});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t\t\t\ty: targetY, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.scrollYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollY.y = targetY;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomXHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.state.xAxis.range.zoom;\n\t\tif (this.zoomXAnimation) this.zoomXAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomX: this.currentZoomX.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomX.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.state.yAxis.range.zoom;\n\t\tif (this.zoomYAnimation) this.zoomYAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomY: this.currentZoomY.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomY.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zeroVal} = this.chartState.state.xAxis.range;\n\t\tvar zoom = this.options.zoomX;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zeroVal} =  this.chartState.state.yAxis.range;\n\t\tvar zoom = this.options.zoomY;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\n\t */\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\t\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.chartState.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.chartState.state.xAxis.range.scaleFactor * this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.chartState.state.yAxis.range.scaleFactor * this.options.zoomY;\n\t}\n\t\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.chartState.state.xAxis.range.scaleFactor / this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.chartState.state.yAxis.range.scaleFactor / this.options.zoomY;\n\t}\n\n\n\t/**\n\t *  returns scrollX value by screen scrollX coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\treturn this.chartState.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t}\n\t\n\t\n\t/**\n\t *  returns scrollY value by screen scrollY coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\treturn this.chartState.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t}\n\t\n\t//\n\t/**\n\t *  returns screen scrollX value by screen scrollY coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.chartState.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t// /**\n\t//  *  returns screen scrollY value by screen scrollY coordinate\n\t//  */\n\t// getScreenYByValue(scrollYVal: number): number {\n\t// \tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t// \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\n\t// }\n\t//\n\t//\n\t/**\n\t * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\t/**\n\t * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\n\t */\n\tgetPointByScreenY(screenY: number): number {\n\t\treturn this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t}\n\n\tgetTop(): number {\n\t\treturn this.getPointByScreenY(this.chartState.state.height);\n\t}\n\t\n\tgetBottom(): number {\n\t\treturn this.getPointByScreenY(0);\n\t}\n\n\tgetLeft(): number {\n\t\treturn this.getPointByScreenX(0);\n\t}\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.chartState.state.width);\n\t}\n\n\tgetTopVal() {\n\t\treturn this.getValueByScreenY(this.chartState.state.height);\n\t}\n\t\n\tgetBottomVal() {\n\t\treturn this.getValueByScreenY(0);\n\t}\n\n\tgetCenterYVal() {\n\t\treturn this.getValueByScreenY(this.chartState.state.height / 2);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Screen.ts\n **/","\nimport {Chart} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {AXIS_TYPE} from \"./interfaces\";\nimport {ITrendData, ITrendOptions} from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IAxisMarkUpdateOptions {\n\tvalue: number,\n\tdisplayedValue?: string\n}\n\nexport interface IAxisMarkOptions extends IAxisMarkUpdateOptions {\n\tname?: string;\n\ttitle?: string;\n\ttype?: string;\n\tlineColor?: string;\n\tlineWidth?: number;\n\tshowValue?: boolean;\n\tstickToEdges?: boolean;\n}\n\nconst AXIS_MARK_DEFAULT_OPTIONS: IAxisMarkOptions = {\n\ttype: 'simple',\n\tlineWidth: 1,\n\tvalue: 0,\n\tshowValue: false,\n\tstickToEdges: false,\n\tlineColor: '#FFFFFF',\n\ttitle: ''\n};\n\nexport class AxisMarks {\n\tprivate chartState: Chart;\n\tprivate axisType: AXIS_TYPE;\n\tprivate ee: EventEmitter;\n\tprivate items: {[name: string]: AxisMark} = {};\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.axisType = axisType;\n\t\tvar marks = this.items;\n\t\tvar axisMarksOptions = axisType == AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\n\t\t\n\t\tfor (let options of axisMarksOptions) {\n\t\t\tlet axisMark: AxisMark;\n\t\t\toptions = Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t\t\t\n\t\t\t// set mark name\n\t\t\tif (!options.name) options.name = Utils.getUid().toString();\n\t\t\tif (marks[options.name]) Utils.error('duplicated mark name ' + options.name);\n\t\t\t\n\t\t\t// create mark instance based on type option\n\t\t\tif (options.type == 'timeleft') {\n\t\t\t\taxisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t\t\t} else {\n\t\t\t\taxisMark = new AxisMark(chartState, axisType, options);\n\t\t\t}\n\t\t\tmarks[options.name] = axisMark;\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, newData)\n\t\t});\n\t\tthis.chartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tprivate onTrendChange(trendName: string, newData: ITrendData) {\n\t\tif (!newData) return;\n\t\tvar startVal = newData[0].xVal;\n\t\tvar endVal = newData[newData.length - 1].xVal;\n\t\tvar marks = this.items;\n\n\t\tfor (let markName in marks) {\n\t\t\tlet mark = marks[markName];\n\t\t\tlet markVal = mark.options.value;\n\t\t\tlet markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\n\t\t\tif (markWasCrossed) this.ee.emit('markCrossed', trendName, newData);\n\t\t}\n\t}\n\n\n\tgetItems() {\n\t\treturn this.items;\n\t}\n\t\n\tgetItem(markName: string) {\n\t\treturn this.items[markName];\n\t}\n\n}\n\nexport class AxisMark {\n\tstatic typeName = 'simple';\n\toptions: IAxisMarkOptions;\n\taxisType: AXIS_TYPE;\n\tprotected chartState: Chart;\n\tprotected renderOnTrendsChange = false;\n\tprotected ee: EventEmitter;\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE, options: IAxisMarkOptions) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.options = options;\n\t\tthis.axisType = axisType;\n\t\tthis.chartState = chartState;\n\t\tthis.bindEvents();\n\t}\n\t\n\tprotected bindEvents() {}\n\n\tsetOptions(newOptions: IAxisMarkUpdateOptions) {\n\t\tvar value = this.options.value;\n\t\tthis.options = Utils.deepMerge(this.options, newOptions);\n\t\tif (this.options.value !== value) this.ee.emit('valueChange');\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n\n\tgetDisplayedVal(): string {\n\t\tlet {value, displayedValue} = this.options;\n\t\treturn String(displayedValue !== void 0 ? displayedValue : value);\n\t}\n\n\tonMarkCrossed(cb: (trendName: string, newData: ITrendData) => void): Function {\n\t\tthis.ee.on('markCrossed', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('markCrossed', cb);\n\t\t}\n\t}\n\n\tonValueChange(cb: () => void) {\n\t\tthis.ee.on('valueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('valueChange', cb);\n\t\t}\n\t}\n\n\tonDisplayedValueChange(cb: () => void) {\n\t\tthis.ee.on('onDisplayedValueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('onDisplayedValueChange', cb);\n\t\t}\n\t}\n}\n\nexport class AxisTimeleftMark extends AxisMark {\n\tstatic typeName = 'timeleft';\n\tprotected renderOnTrendsChange = true;\n\t\n\tgetDisplayedVal(): string {\n\t\tvar markVal = this.options.value;\n\t\tvar maxXVal = this.chartState.state.computedData.trends.maxXVal;\n\t\tvar time = markVal - maxXVal;\n\t\tif (time < 0) time = 0;\n\t\treturn Utils.msToTimeString(time);\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendsChange(() => this.onTrendsChange());\n\t}\n\n\tprotected onTrendsChange() {\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AxisMarks.ts\n **/","\n\n/**\n * defines how axis range will be calculated\n * FIXED - directly use range.from and range.to value\n * AUTO - automatically sets range.from and range.to by visible part of opposite axis\n * RELATIVE_END - same as AUTO, but trend end always present in range\n * ALL - automatically sets range.from and range.to by all values of opposite axis\n *\n */\nimport {IAxisMarkOptions} from \"./AxisMarks\";\nimport {TChartColor} from \"./Color\";\nexport enum AXIS_RANGE_TYPE {\n\tFIXED,\n\tRELATIVE_END,\n\tAUTO,\n\tALL // TODO: AXIS_RANGE_TYPE.ALL\n}\n\n/**\n * Animation ease type\n */\nexport declare type TEase = Ease | Linear;\n\nexport declare type TIteralable = {[key: string]: any};\nexport interface IIteralable {[key: string]: any};\n\nexport enum AXIS_TYPE {X, Y}\n\nexport interface IAxisRange {\n\ttype?: AXIS_RANGE_TYPE,\n\tfrom?: number,\n\tto?: number,\n\tzoom?: number,\n\tscroll?: number,\n\n\t/**\n\t * Mode only for Y axis. When true displayed center of Y axis never changed. To use set range.zeroVal as center value.\n\t */\n\tisMirrorMode?: boolean,\n\n\tpadding?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmargin?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmaxLength?: number;\n\tminLength?: number;\n\n\t/**\n\t * value in world center coordinate\n\t */\n\tzeroVal?: number,\n\n\t/**\n\t * ratio between 1 pixel and 1 value for zoom = 1\n\t */\n\tscaleFactor?: number,\n}\n\nexport enum AXIS_DATA_TYPE {NUMBER, DATE}\n\nexport interface IAxisOptions {\n\trange?: IAxisRange;\n\tdataType?: AXIS_DATA_TYPE;\n\tautoScroll?: boolean;\n\tmarks?: IAxisMarkOptions[];\n\tgrid?: IGridOptions;\n\tcolor?: TChartColor;\n}\n\nexport interface IGridOptions {\n\tenabled: boolean;\n\tminSizePx?: number;\n\tcolor?: TChartColor;\n}\n\nexport interface IAnimationsOptions {\n\tenabled?: boolean,\n\ttrendChangeSpeed?: number,\n\ttrendChangeEase?: TEase,\n\tscrollSpeed?: number,\n\tscrollEase?: TEase,\n\tautoScrollSpeed?: number,\n\tautoScrollEase?: TEase,\n\tzoomSpeed?: number,\n\tzoomEase?: TEase,\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/interfaces.ts\n **/","import {Chart} from \"./Chart\";\nimport Object3D = THREE.Object3D;\n\nexport interface IChartWidgetConstructor {\n\tnew (): ChartWidget;\n\twidgetName: string;\n}\n\n/**\n * base class for all widgets\n * each widget must have widgetName static property\n */\nexport abstract class ChartWidget {\n\tstatic widgetName = '';\n\tprotected chart: Chart;\n\tprivate unbindList: Function[] = [];\n\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t}\n\n\tabstract onReadyHandler(): any;\n\tabstract getObject3D(): Object3D;\n\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unbindList: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunbindList.push(args[0] as Function);\n\t\t} else {\n\t\t\tunbindList.push(...args as Function[]);\n\t\t}\n\t\tthis.unbindList.push(...unbindList);\n\t}\n\tprotected unbindEvents() {\n\t\tthis.unbindList.forEach(unbindEvent => unbindEvent());\n\t\tthis.unbindList.length = 0;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Widget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport UVMapping = THREE.UVMapping;\nimport GridHelper = THREE.GridHelper;\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport {GridWidget, IGridParamsForAxis} from \"./GridWidget\";\nimport {Utils} from \"../Utils\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {AXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions} from \"../interfaces\";\nimport { ChartColor } from \"../Color\";\n\n/**\n * widget for drawing axis\n */\nexport class AxisWidget extends ChartWidget {\n\tstatic widgetName = 'Axis';\n\tprivate isDestroyed = false;\n\tprivate object3D: Object3D;\n\tprivate axisXObject: Object3D;\n\tprivate axisYObject: Object3D;\n\tprivate updateAxisXRequest: () => void;\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.axisXObject = new Object3D();\n\t\tthis.axisYObject = new Object3D();\n\t\tthis.object3D.add(this.axisXObject);\n\t\tthis.object3D.add(this.axisYObject);\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\n\t\t// canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\n\t\tthis.updateAxisXRequest = Utils.throttle(() => this.updateAxis(AXIS_TYPE.X), 1000);\n\n\t\tthis.onScrollChange(\n\t\t\tthis.chart.screen.options.scrollX,\n\t\t\tthis.chart.screen.options.scrollY\n\t\t);\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\tvar state = this.chart;\n\n\t\tthis.bindEvent(\n\t\t\tstate.screen.onTransformationFrame((options) => {\n\t\t\t\tthis.onScrollChange(options.scrollX, options.scrollY);\n\t\t\t}),\n\t\t\tstate.screen.onZoomFrame((options) => {this.onZoomFrame(options)}),\n\t\t\tstate.onDestroy(() => this.onDestroy()),\n\t\t\tstate.onResize(() => this.onResize())\n\t\t);\n\t}\n\n\tprivate onDestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.unbindEvents();\n\t}\n\n\tprivate onScrollChange(x: number, y: number) {\n\n\t\tif (y != void 0) {\n\t\t\tthis.axisYObject.position.y = y;\n\t\t\tthis.axisXObject.position.y = y;\n\t\t}\n\n\t\tif (x != void 0) {\n\t\t\tthis.axisYObject.position.x = x;\n\t\t\tthis.updateAxisXRequest();\n\t\t}\n\n\t}\n\n\tprivate onResize() {\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\t}\n\n\tprivate setupAxis(orientation: AXIS_TYPE) {\n\n\t\tlet isXAxis = orientation == AXIS_TYPE.X;\n\t\tlet {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tlet canvasWidth = 0, canvasHeight = 0;\n\t\tlet axisOptions: IAxisOptions;\n\n\t\t// clean meshes\n\t\tif (isXAxis) {\n\t\t\tthis.axisXObject.traverse(obj => this.axisXObject.remove(obj));\n\t\t\tcanvasWidth = visibleWidth * 3;\n\t\t\tcanvasHeight = 50;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t} else {\n\t\t\tthis.axisYObject.traverse(obj => this.axisYObject.remove(obj));\n\t\t\tcanvasWidth = 50;\n\t\t\tcanvasHeight = visibleHeight * 3;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t}\n\n\t\tvar texture = Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, (ctx) => {\n\t\t\tlet color = new ChartColor(axisOptions.color);\n\t\t\tctx.beginPath();\n\t\t\tctx.font = this.chart.state.font.m;\n\t\t\tctx.fillStyle = color.rgbaStr;\n\t\t\tctx.strokeStyle = color.rgbaStr;\n\t\t});\n\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tvar axisMesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(canvasWidth, canvasHeight),\n\t\t\tmaterial\n\t\t);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisXObject.add(axisMesh);\n\t\t} else {\n\t\t\taxisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisYObject.add(axisMesh);\n\t\t}\n\n\t\tthis.updateAxis(orientation);\n\n\t}\n\t\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate updateAxis(orientation: AXIS_TYPE) {\n\t\tif (this.isDestroyed) return;\n\t\tvar isXAxis = orientation == AXIS_TYPE.X;\n\t\tvar {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = this.chart.screen.options;\n\t\tvar axisOptions: IAxisOptions;\n\t\tvar axisMesh: Mesh;\n\t\tvar axisGridParams: IGridParamsForAxis;\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh = this.axisXObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t\t} else {\n\t\t\taxisMesh = this.axisYObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t\t}\n\n\t\tvar geometry = axisMesh.geometry as PlaneGeometry;\n\t\tvar canvasWidth = geometry.parameters.width;\n\t\tvar canvasHeight = geometry.parameters.height;\n\t\tvar texture = (axisMesh.material as MeshBasicMaterial).map;\n\t\tvar ctx = texture.image.getContext('2d');\n\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t\t}\n\n\n\t\t// TODO: draw text and lines in different loops\n\t\tvar edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t\tvar startVal = axisGridParams.start  - edgeOffset;\n\t\tvar endVal = axisGridParams.end + edgeOffset;\n\n\t\tctx.beginPath();\n\t\tfor (let val = startVal; val <= endVal; val += axisGridParams.step) {\n\t\t\tlet displayedValue = '';\n\t\t\tif (isXAxis) {\n\t\t\t\tlet pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(pxVal + 0.5, canvasHeight);\n\t\t\t\t// ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\n\t\t\t\tif (axisOptions.dataType == AXIS_DATA_TYPE.DATE) {\n\t\t\t\t\tdisplayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t\t\t\t} else {\n\t\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\t}\n\n\t\t\t\tctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t\t\t} else {\n\t\t\t\tlet pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\n\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(canvasWidth, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\n\n\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\tctx.fillText(displayedValue, canvasWidth - 15 , pxVal + 3);\n\n\t\t\t\t// uncomment for left-side axis\n\t\t\t\t// ctx.moveTo(0, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(5, pxVal + 0.5);\n\t\t\t\t// ctx.fillText(Number(val.toFixed(14)).toString(), 15 , pxVal + 3);\n\t\t\t}\n\t\t\tctx.stroke();\n\t\t}\n\t\t// uncomment to preview canvas borders\n\t\t// ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tif (options.zoomX) {\n\t\t\tthis.updateAxis(AXIS_TYPE.X);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.H)\n\t\t}\n\t\tif (options.zoomY) {\n\t\t\tthis.updateAxis(AXIS_TYPE.Y);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.V)\n\t\t}\n\t}\n\n\t// private temporaryHideAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar timeoutId = setTimeout(() => {\n\t// \t\t\tthis.showAxis(orientation);\n\t// \t}, 200);\n\t//\n\t// \tif (isXAxis) {\n\t// \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tclearTimeout(this.showAxisXTimeout);\n\t// \t\tthis.showAxisXTimeout =\ttimeoutId;\n\t// \t} else {\n\t// \t\tclearTimeout(this.showAxisYTimeout);\n\t// \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tthis.showAxisYTimeout = timeoutId;\n\t// \t}\n\t// }\n\n\t// private showAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar material: MeshBasicMaterial;\n\t// \tif (isXAxis) {\n\t// \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t} else {\n\t// \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t}\n\t// \tthis.updateAxis(orientation);\n\t// \tTweenLite.to(material, 0.3, {opacity: 1});\n\t// }\n\n\tstatic getDateStr(timestamp: number, gridParams: IGridParamsForAxis): string {\n\t\tvar sec = 1000;\n\t\tvar min = sec * 60;\n\t\tvar hour = min * 60;\n\t\tvar day = hour * 60;\n\t\tvar step = gridParams.step;\n\t\tvar d = new Date(timestamp);\n\t\tvar tf = (num: number) => Utils.toFixed(num, 2);\n\t\treturn tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport {ChartWidget} from \"../Widget\";\nimport LineSegments = THREE.LineSegments;\nimport {Utils} from \"../Utils\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {IAxisOptions} from \"../interfaces\";\nimport Color = THREE.Color;\nimport {ChartColor} from \"../Color\";\n\nexport interface IGridParamsForAxis {\n\tstart: number,\n\tend: number,\n\tstep: number,\n\tstepInPx: number,\n\tlength: number,\n\tsegmentsCount: number\n}\n\n/**\n * widget for drawing state grid\n */\nexport class GridWidget extends ChartWidget{\n\tstatic widgetName = 'Grid';\n\tprivate lineSegments: LineSegments;\n\tprivate gridSizeH: number;\n\tprivate gridSizeV: number;\n\tprivate isDestroyed = false;\n\n\tonReadyHandler() {\n\t\tvar {width, height, xAxis, yAxis} = this.chart.state;\n\t\tthis.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\n\t\tthis.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\n\t\tthis.initGrid();\n\t\tthis.updateGrid();\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\t// grid is bigger then screen, so it's no need to update it on each scroll event\n\t\tlet updateGridThrottled = Utils.throttle(() => this.updateGrid(), 1000);\n\t\tthis.bindEvent(this.chart.onScroll(() => updateGridThrottled()),\n\t\t\tthis.chart.screen.onZoomFrame((options) => {\n\t\t\t\tupdateGridThrottled();\n\t\t\t\tthis.onZoomFrame(options);\n\t\t\t}),\n\t\t\tthis.chart.onDestroy(() => {\n\t\t\t\tthis.isDestroyed = true;\n\t\t\t\tthis.unbindEvents();\n\t\t\t}),\n\t\t\tthis.chart.onResize(() => {\n\t\t\t\tthis.updateGrid();\n\t\t\t})\n\t\t);\n\n\t}\n\n\tprivate initGrid() {\n\t\tlet color = new ChartColor(this.chart.state.xAxis.grid.color);\n\t\tlet geometry = new THREE.Geometry();\n\t\tlet material = new THREE.LineBasicMaterial({linewidth: 1, color: color.value, opacity: color.a, transparent: true});\n\t\tlet xLinesCount = this.gridSizeH;\n\t\tlet yLinesCount = this.gridSizeV;\n\t\twhile (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\twhile (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\tthis.lineSegments = new LineSegments(geometry, material);\n\t\tthis.lineSegments.position.setZ(-1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t}\n\n\tprivate updateGrid() {\n\t\tif (this.isDestroyed) return;\n\t\tvar {yAxis, xAxis, width, height} = this.chart.state;\n\t\tvar axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t\tvar axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t\tvar scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t\tvar scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t\tvar gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t\tvar gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t\tvar startXVal = axisXGrid.start + gridScrollXVal;\n\t\tvar startYVal = axisYGrid.start + gridScrollYVal;\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tvar vertices = geometry.vertices;\n\t\tvar lineInd = 0;\n\n\t\tfor (let i =  -this.gridSizeH / 3; i < this.gridSizeH * 2/3; i++) {\n\t\t\tlet value = startXVal + i * axisXGrid.step;\n\t\t\tlet lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tfor (let i =  -this.gridSizeV / 3; i < this.gridSizeV * 2/3; i++) {\n\t\t\tlet value = startYVal + i * axisYGrid.step;\n\t\t\tlet lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\tthis.lineSegments.scale.set(\n\t\t\txAxis.range.scaleFactor * xAxis.range.zoom,\n\t\t\tyAxis.range.scaleFactor * yAxis.range.zoom,\n\t\t\t1\n\t\t)\n\t}\n\n\tprivate getHorizontalLineSegment(yVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\n\t\tvar widthVal = chartState.pxToValueByXAxis(chartState.state.width);\n\t\treturn [\n\t\t\tnew THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0 ),\n\t\t\tnew THREE.Vector3( -widthVal + scrollXVal, localYVal, 0 )\n\t\t];\n\t}\n\n\tprivate getVerticalLineSegment(xVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\n\t\tvar heightVal = chartState.pxToValueByYAxis(chartState.state.height);\n\t\treturn [\n\t\t\tnew THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0 ),\n\t\t\tnew THREE.Vector3(localXVal, -heightVal + scrollYVal, 0 )\n\t\t];\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar {xAxis, yAxis} = this.chart.state;\n\t\tif (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t\tif (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t}\n\n\n\t// TODO: move this code to core\n\tstatic getGridParamsForAxis(axisOptions: IAxisOptions, axisWidth: number, zoom: number): IGridParamsForAxis {\n\t\tlet axisRange = axisOptions.range;\n\t\tlet from = axisRange.from;\n\t\tlet to = axisRange.to;\n\t\tlet axisLength = to - from;\n\t\tlet gridStep = 0;\n\t\tlet gridStepInPixels = 0;\n\t\tlet minGridStepInPixels = axisOptions.grid.minSizePx;\n\t\tlet axisLengthStr = String(axisLength);\n\t\tlet axisLengthPointPosition = axisLengthStr.indexOf('.');\n\t\tlet intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\n\t\tlet gridStepFound = false;\n\t\tlet digitPos = 0;\n\t\twhile (!gridStepFound) {\n\n\t\t\tlet power = intPartLength - digitPos - 1;\n\t\t\tlet multiplier = (Math.pow(10, power) || 1);\n\t\t\tlet dividers = [1, 2, 5];\n\t\t\tfor (let dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t\t\t\tlet nextGridStep = multiplier / dividers[dividerInd];\n\t\t\t\tlet nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t\t\t\tif (nextGridStepInPixels >= minGridStepInPixels) {\n\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t} else {\n\t\t\t\t\tgridStepFound = true;\n\t\t\t\t\tif (gridStep === 0) {\n\t\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!gridStepFound) digitPos++\n\n\t\t}\n\n\t\tvar gridStart = Math.floor(from / gridStep) * gridStep;\n\t\tvar gridEnd = Math.floor(to / gridStep) * gridStep;\n\n\t\treturn {\n\t\t\tstart: gridStart,\n\t\t\tend: gridEnd,\n\t\t\tstep: gridStep,\n\t\t\tstepInPx: gridStepInPixels,\n\t\t\tlength: gridEnd - gridStart,\n\t\t\tsegmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t\t}\n\t}\n\t\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/GridWidget.ts\n **/","export declare type TChartColor = string | number;\n\n\nexport class ChartColor {\n\n\t/**!\n\t * @preserve $.parseColor\n\t * Copyright 2011 THEtheChad Elliott\n\t * Released under the MIT and GPL licenses.\n\t */\n\t/**\n\t * Parse hex/rgb{a} color syntax.\n\t * @input string\n\t * @returns array [r,g,b{,o}]\n\t */\n\tstatic parseColor(color: string): number[] {\n\n\t\tvar cache: any\n\t\t\t, p = parseInt // Use p as a byte saving reference to parseInt\n\t\t\t, color = color.replace(/\\s\\s*/g, '') // Remove all spaces\n\t\t\t;//var\n\n\t\t// Checks for 6 digit hex and converts string to integer\n\t\tif (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\n\n\t\t// Checks for 3 digit hex and converts string to integer\n\t\telse if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\n\t\t\tcache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\n\n\n\t\t// Checks for 6 digit hex with alpha and converts string to integer\n\t\telse if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\n\n\t\t// Checks for rgba and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3], +cache[4]];\n\n\t\t// Checks for rgb and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3]];\n\n\t\t// Otherwise throw an exception to make debugging easier\n\t\telse throw Error(color + ' is not supported by parseColor');\n\n\t\t// Performs RGBA conversion by default\n\t\tisNaN(cache[3]) && (cache[3] = 1);\n\t\treturn cache;\n\t\t// Adds or removes 4th value based on rgba support\n\t\t// Support is flipped twice to prevent erros if\n\t\t// it's not defined\n\t\t//return cache.slice(0,3 + !!$.support.rgba);\n\t}\n\n\tr: number;\n\tg: number;\n\tb: number;\n\ta: number;\n\tvalue: number;\n\thexStr: string;\n\trgbaStr: string;\n\n\tconstructor (color: TChartColor) {\n\t\tthis.set(color);\n\t}\n\n\tset(color: TChartColor) {\n\t\tif (typeof color == 'number') {\n\t\t\tcolor = (color as number).toString(16);\n\t\t\tcolor = '#' + '0'.repeat(6 - color.length) + color;\n\t\t}\n\t\tlet colorStr = color as string;\n\t\tlet rgba = ChartColor.parseColor(colorStr);\n\t\tthis.r = rgba[0];\n\t\tthis.g = rgba[1];\n\t\tthis.b = rgba[2];\n\t\tthis.a = rgba[3];\n\t\tthis.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\n\t\tthis.hexStr = '#' + this.value.toString(16);\n\t\tthis.rgbaStr = `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Color.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {ITrendOptions} from \"../Trend\";\nimport {Utils} from \"../Utils\";\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport { ChartColor } from '../Color';\n\nexport class TrendsGradientWidget extends TrendsWidget<TrendGradient> {\n\tstatic widgetName = \"TrendsGradient\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendGradient;\n\t}\n}\n\n\nexport class TrendGradient extends TrendWidget {\n\tprivate gradient: Mesh;\n\tprivate visibleSegmentsCnt = 0;\n\tprivate segmentsIds: Uint16Array;\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.hasBackground;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.trend = chartState.trendsManager.getTrend(trendName);\n\t\tthis.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments)\n\t\tthis.initGradient();\n\t\tthis.updateSegments();\n\t}\n\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\t// TODO: optimize updateSegments for onDisplayedRangeChanged\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.chart.onZoom(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t}\n\n\n\tgetObject3D(): Object3D {\n\t\treturn this.gradient;\n\t}\n\n\n\tinitGradient() {\n\t\tlet geometry = new Geometry();\n\n\n\t\tfor (let i = 0; i < this.segmentsIds.length; i++) {\n\t\t\tgeometry.vertices.push(\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3()\n\t\t\t);\n\t\t\tlet ind = i * 4;\n\n\t\t\t// gradient segment scheme\n\t\t\t//\n\t\t\t// vert0 +---+ vert3\n\t\t\t//       |\\  |\n\t\t\t// face1 | \\ | face2\n\t\t\t// \t     |  \\|\n\t\t\t// vert1 +---+ vert2\n\n\t\t\tgeometry.faces.push(\n\t\t\t\tnew THREE.Face3( ind, ind + 1, ind + 2 ),\n\t\t\t\tnew THREE.Face3( ind + 3, ind, ind + 2 )\n\t\t\t);\n\t\t}\n\n\t\tlet color = new ChartColor(this.trend.getOptions().backgroundColor);\n\t\tthis.gradient = new THREE.Mesh(\n\t\t\tgeometry,\n\t\t\tnew THREE.MeshBasicMaterial( {color: color.value, transparent: true, opacity: color.a} )\n\t\t);\n\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.gradient.frustumCulled = false;\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tvar currentScale = this.gradient.scale;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegmentsManager: TrendSegmentsManager) {\n\t\tlet animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n\t\tfor (let i = 0; i < this.visibleSegmentsCnt; i++) {\n\t\t\tlet segmentId = this.segmentsIds[i];\n\t\t\tif (!animatedSegmentsIds.includes(segmentId)) continue;\n\t\t\tthis.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n\t\t}\n\t\t(this.gradient.geometry as PlaneGeometry).verticesNeedUpdate = true;\n\t}\n\n\n\tprivate updateSegments() {\n\t\tlet geometry = this.gradient.geometry as PlaneGeometry;\n\t\tlet {\n\t\t\tsegments: trendSegments,\n\t\t\tfirstDisplayedSegmentInd: segmentInd,\n\t\t\tlastDisplayedSegmentInd\n\t\t} = this.trend.segmentsManager;\n\t\tlet prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n\t\tthis.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n\t\tlet segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n\n\t\tif (segmentsToProcessCnt > this.segmentsIds.length) {\n\t\t\tUtils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\n\t\t}\n\n\t\t// setup visible segments and collapse invisible\n\t\tfor (let i = 0; i <= segmentsToProcessCnt; i++) {\n\t\t\tif (segmentInd <= lastDisplayedSegmentInd) {\n\t\t\t\tlet segment = trendSegments[segmentInd];\n\t\t\t\tthis.setupSegmentVertices(i, segment.currentAnimationState);\n\t\t\t\tthis.segmentsIds[i] = segment.id;\n\t\t\t\tsegmentInd++;\n\t\t\t} else {\n\t\t\t\tthis.setupSegmentVertices(i);\n\t\t\t}\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\t/**\n\t * setup gradient segment by segmentState\n\t * if segmentState is undefined, then collapse vertices to 0,0,0\n\t */\n\tprivate setupSegmentVertices(segmentInd: number, segmentState?: ITrendSegmentState) {\n\t\tlet gradientSegmentInd = segmentInd * 4;\n\t\tlet vertices = (this.gradient.geometry as PlaneGeometry).vertices;\n\t\tlet\ttopLeft = vertices[gradientSegmentInd];\n\t\tlet\tbottomLeft = vertices[gradientSegmentInd + 1];\n\t\tlet\tbottomRight = vertices[gradientSegmentInd + 2];\n\t\tlet\ttopRight = vertices[gradientSegmentInd + 3];\n\t\tlet screenHeightVal = Math.max(\n\t\t\tthis.chart.pxToValueByYAxis(this.chart.state.height),\n\t\t\tthis.chart.screen.pxToValueByYAxis(this.chart.state.height)\n\t\t);\n\n\t\tif (segmentState) {\n\t\t\tlet startX = this.toLocalX(segmentState.startXVal);\n\t\t\tlet startY = this.toLocalY(segmentState.startYVal);\n\t\t\tlet endX = this.toLocalX(segmentState.endXVal);\n\t\t\tlet endY = this.toLocalY(segmentState.endYVal);\n\t\t\ttopLeft.set(startX, startY, 0);\n\t\t\ttopRight.set(endX, endY, 0);\n\t\t\tbottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n\t\t\tbottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n\t\t} else {\n\t\t\ttopLeft.set(0, 0, 0);\n\t\t\ttopRight.set(0, 0, 0);\n\t\t\tbottomLeft.set(0, 0, 0);\n\t\t\tbottomRight.set(0, 0, 0);\n\t\t}\n\n\t}\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsGradientWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport {ITrendOptions, ITrendData, Trend} from \"../Trend\";\nimport Vector2 = THREE.Vector2;\nimport Vector3 = THREE.Vector3;\nimport {TrendSegmentsManager} from \"../TrendSegmentsManager\";\nimport {IScreenTransformOptions} from \"../Screen\";\n\n\nexport interface ITrendWidgetClass<TrendWidgetType> {\n\tnew (chart: Chart, trendName: string): TrendWidgetType;\n\twidgetIsEnabled(trendOptions: ITrendOptions, chart: Chart): boolean;\n}\n\n/**\n * abstract manager class for all trends widgets\n */\nexport abstract class TrendsWidget<TrendWidgetType extends TrendWidget> extends ChartWidget {\n\tprotected abstract getTrendWidgetClass(): ITrendWidgetClass<TrendWidgetType>;\n\tprotected object3D: Object3D;\n\tprotected widgets: {[trendName: string]: TrendWidgetType} = {};\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.onTrendsChange();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tvar state = this.chart;\n\t\tstate.onTrendsChange(() => this.onTrendsChange());\n\t\tstate.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, changedOptions, newData)\n\t\t});\n\t}\n\n\tprotected onTrendsChange() {\n\t\tvar trendsOptions = this.chart.state.trends;\n\t\tvar TrendWidgetClass = this.getTrendWidgetClass();\n\t\tfor (let trendName in trendsOptions) {\n\t\t\tlet trendOptions = trendsOptions[trendName];\n\t\t\tlet widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\n\t\t\tif (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t\t\t\tthis.createTrendWidget(trendName);\n\t\t\t} else if (!widgetCanBeEnabled && this.widgets[trendName]){\n\t\t\t\tthis.destroyTrendWidget(trendName);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTrendChange(trendName: string, changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar widget = this.widgets[trendName];\n\t\tif (!widget) return;\n\t\twidget.onTrendChange(changedOptions);\n\t\tif (newData) {\n\t\t\tvar data = this.chart.getTrend(trendName).getData();\n\t\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\t\tisAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t\t}\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate createTrendWidget(trendName: string) {\n\t\tvar WidgetConstructor = this.getTrendWidgetClass();\n\t\tvar widget = new WidgetConstructor(this.chart, trendName);\n\t\tthis.widgets[trendName] = widget;\n\t\tvar widgetObject = widget.getObject3D();\n\t\twidgetObject.name = trendName;\n\t\tthis.object3D.add(widget.getObject3D());\n\t}\n\n\tprivate destroyTrendWidget(trendName: string) {\n\t\tthis.widgets[trendName].onDestroy();\n\t\tdelete this.widgets[trendName];\n\t\tvar widgetObject = this.object3D.getObjectByName(trendName);\n\t\tthis.object3D.remove(widgetObject);\n\t}\n}\n\n/**\n * based class for all trends widgets\n */\nexport abstract class TrendWidget {\n\tprotected trend: Trend;\n\tprotected unbindList: Function[] = [];\n\n\tconstructor (protected chart: Chart, protected trendName: string) {\n\t\tthis.trend = chart.trendsManager.getTrend(trendName);\n\t\tthis.chart = chart;\n\t\tthis.bindEvents();\n\t}\n\tabstract getObject3D(): Object3D;\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions, chart: Chart) {\n\t\treturn trendOptions.enabled;\n\t}\n\tappendData(newData: ITrendData) {};\n\tprependData(newData: ITrendData) {};\n\tonTrendChange(changedOptions?: ITrendOptions) {}\n\tonDestroy() {\n\t\tfor (let unsubscriber of this.unbindList) {\n\t\t\tunsubscriber();\n\t\t}\n\t}\n\tprotected onSegmentsAnimate(segments: TrendSegmentsManager) {\n\t}\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onTransformationFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onZoom() {\n\t}\n\n\n\tprotected bindEvents() {\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onAnimationFrame(\n\t\t\t(trendPoints: TrendSegmentsManager) => this.onSegmentsAnimate(trendPoints)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.screen.onTransformationFrame(\n\t\t\t(options) => this.onTransformationFrame(options)\n\t\t));\n\t\t\n\t\tthis.bindEvent(this.chart.screen.onZoomFrame(\n\t\t\t(options) => this.onZoomFrame(options)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.onZoom(() => this.onZoom()));\n\t};\n\n\tprotected bindEvent(unbind: Function) {\n\t\tthis.unbindList.push(unbind);\n\t}\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport { TrendSegmentsManager, ITrendSegmentState } from \"../TrendSegmentsManager\";\nimport LineSegments = THREE.LineSegments;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ITrendOptions, TREND_TYPE } from '../Trend';\nimport { Utils } from '../Utils';\n\n\n/**\n * widget for drawing trends lines\n */\nexport class TrendsLineWidget extends TrendsWidget<TrendLine> {\n\tstatic widgetName = \"TrendsLine\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendLine;\n\t}\n}\n\ninterface ILineSegment {\n\tind: number,\n\tsegmentId: number\n}\n\nexport class TrendLine extends TrendWidget {\n\tprivate material: LineBasicMaterial;\n\tprivate lineSegments: LineSegments;\n\tprivate vertices: Vector3[];\n\n\t// contains indexes of free segments\n\tprivate freeSegmentsInds: number[] = [];\n\n\t// contains segments to display\n\tprivate displayedSegments: {[segmentId: number]: ILineSegment} = {};\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.LINE;\n\t}\n\t\n\tconstructor (chart: Chart, trendName: string) {\n\t\tsuper(chart, trendName);\n\t\tvar options = this.trend.getOptions();\n\t\tthis.material = new LineBasicMaterial( { color: options.lineColor, linewidth: options.lineWidth } );\n\t\tthis.initLine();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroySegments();\n\t\t\tthis.setupSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupSegments();\n\t\t}));\n\t}\n\t\n\tprivate initLine() {\n\t\tlet geometry = new Geometry();\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.lineSegments = new LineSegments(geometry, this.material);\n\t\tthis.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t\tfor (let i = 0; i < this.chart.state.maxVisibleSegments; i++) {\n\t\t\tgeometry.vertices.push(new  Vector3(), new Vector3());\n\t\t\tthis.freeSegmentsInds.push(i);\n\t\t}\n\t\tthis.vertices = geometry.vertices;\n\t\tthis.setupSegments();\n\t}\n\n\tprivate setupSegments() {\n\t\tlet geometry = this.lineSegments.geometry as Geometry;\n\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.displayedSegments) {\n\t\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\t\tlet segment = this.trend.segmentsManager.segments[lineSegment.segmentId];\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupSegment(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate setupSegment(segmentId: number, segmentState: ITrendSegmentState) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tif (!lineSegment) {\n\t\t\tif (this.freeSegmentsInds.length == 0) Utils.error('Max allocated segments reached');\n\t\t\tlet ind = this.freeSegmentsInds.pop();\n\t\t\tlineSegment = this.displayedSegments[segmentId] = {segmentId, ind};\n\t\t}\n\t\tlet segmentInd = lineSegment.ind;\n\t\tlet lineStartVertex = this.vertices[segmentInd * 2];\n\t\tlet lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t\tlineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t\tlineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t}\n\n\tprivate destroySegments() {\n\t\tfor (let segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t}\n\n\tprivate destroySegment(segmentId: number) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tlet lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t\tlet lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t\tlineStartVertex.set(0, 0, 0);\n\t\tlineEndVertex.set(0, 0, 0);\n\t\tdelete this.displayedSegments[segmentId];\n\t\tthis.freeSegmentsInds.push(lineSegment.ind);\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.lineSegments.scale;\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.displayedSegments[segmentId]) continue;\n\t\t\tthis.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsLineWidget.ts\n **/","\n\nimport { TrendsWidget, TrendWidget } from './TrendsWidget';\nimport { Chart } from '../Chart';\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport Vector3 = THREE.Vector3;\nimport Mesh = THREE.Mesh;\nimport Line = THREE.Line;\nimport BoxGeometry = THREE.BoxGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { TREND_TYPE, ITrendOptions } from '../Trend';\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport remove = THREE.Cache.remove;\nimport { Utils } from '../Utils';\n\n\nconst RISE_COLOR = 0x2CAC40;\nconst FALL_COLOR = 0xEE5533;\nconst MARGIN_PERCENT = 0.3;\nconst MAX_CANDLES = 100;\n\n/**\n * widget for drawing trends candles\n */\nexport class TrendsCandlesWidget extends TrendsWidget<TrendCandlesWidget> {\n\tstatic widgetName = \"TrendsCandles\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendCandlesWidget;\n\t}\n}\n\n\nexport class TrendCandlesWidget extends TrendWidget {\n\tprivate scaleXFactor: number;\n\tprivate scaleYFactor: number;\n\tprivate object3D: Object3D;\n\t\n\t// contains indexes of free candles\n\tprivate freeCandlesInds: number[] = [];\n\tprivate candlesPool: CandleWidget[] = [];\n\tprivate candles: {[segmentId: number]: CandleWidget} = {};\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.CANDLE;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.initObject();\n\t}\n\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroyCandles();\n\t\t\tthis.setupCandles();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupCandles();\n\t\t}));\n\t}\n\t\n\tprivate initObject() {\n\t\tlet stateData = this.chart.state;\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = stateData.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = stateData.yAxis.range;\n\t\tthis.scaleXFactor = scaleXFactor;\n\t\tthis.scaleYFactor = scaleYFactor;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.object3D.frustumCulled = false;\n\t\tfor (let i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t\tthis.setupCandles();\n\t}\n\n\tprivate setupCandles() {\n\n\t\t// remove invisible\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.candles) {\n\t\t\tlet segment = this.candles[segmentId].segment;\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupCandle(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t}\n\n\tprivate destroyCandles() {\n\t\tfor (let segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t}\n\n\tprivate destroyCandle(segmentId: number) {\n\t\tlet candle = this.candles[segmentId];\n\t\tthis.object3D.remove(candle.getObject3D());\n\t\tdelete this.candles[segmentId];\n\t}\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.object3D.scale;\n\t\tif (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t}\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.candles[segmentId]) continue;\n\t\t\tlet segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t\t\tthis.setupCandle(segmentId, segmentState);\n\t\t}\n\t}\n\n\t/**\n\t * create or modify candle\n\t */\n\tprivate setupCandle(candleId: number, segmentState: ITrendSegmentState) {\n\t\tlet candleInd = candleId % MAX_CANDLES;\n\n\t\t// get candle from candlesPool to avoid creating new Objects by performance reasons\n\t\tlet candle = this.candlesPool[candleInd];\n\t\tif (!candle) {\n\t\t\tcandle = this.candlesPool[candleInd] = new CandleWidget();\n\t\t}\n\n\t\tif (!this.candles[candleId]) {\n\t\t\tthis.candles[candleId] = candle;\n\t\t\tthis.object3D.add(candle.getObject3D());\n\t\t}\n\t\tcandle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t\tcandle.setSegment(segmentState);\n\t}\n\n\ttoLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\ttoLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\ttoLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\nclass CandleWidget {\n\tsegment: ITrendSegmentState;\n\tprivate rect: Mesh;\n\tprivate vLine: Line;\n\tprivate hLine: Line;\n\tconstructor () {\n\t\tthis.initObject();\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.rect;\n\t}\n\n\tsetSegment(segment: ITrendSegmentState) {\n\t\tthis.segment = segment;\n\t\tlet color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\n\t\t// update rect\n\t\tlet geometry = this.rect.geometry as PlaneGeometry;\n\t\tlet material = this.rect.material as MeshBasicMaterial;\n\t\tlet width = segment.endXVal - segment.startXVal;\n\t\twidth -= width * MARGIN_PERCENT;\n\t\tlet height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t\tlet [leftTop, rightTop, leftBottom, rightBottom] = geometry.vertices;\n\t\tleftTop.set(-width / 2, height / 2, 0);\n\t\trightTop.set(width / 2, height / 2, 0);\n\t\tleftBottom.set(-width / 2, -height / 2, 0);\n\t\trightBottom.set(width / 2, -height / 2, 0);\n\n\t\t// prevent to draw bars with height < 1px\n\t\tif (Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t\t\tleftBottom.setY(leftBottom.y + 1);\n\t\t\trightBottom.setY(rightBottom.y + 1);\n\t\t}\n\n\t\tmaterial.color.set(color);\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\t// update lines\n\t\tlet vLineGeometry = this.vLine.geometry as Geometry;\n\t\tlet vLineMaterial = this.vLine.material as LineBasicMaterial;\n\t\tlet lineTop = segment.maxYVal - segment.yVal;\n\t\tlet lineBottom = segment.minYVal - segment.yVal;\n\t\tvLineGeometry.vertices[0].set(0, lineTop, 0);\n\t\tvLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t\tvLineMaterial.color.set(color);\n\t\tvLineGeometry.verticesNeedUpdate = true;\n\n\t\tlet hLineGeometry = this.hLine.geometry as Geometry;\n\t\tlet hLineMaterial = this.hLine.material as LineBasicMaterial;\n\t\tlet lineLeft = (-width) / 2;\n\t\tlet lineRight = width / 2;\n\t\thLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t\thLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t\thLineMaterial.color.set(color);\n\t\thLineGeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate initObject() {\n\t\tthis.rect = new Mesh(\n\t\t\tnew PlaneGeometry(1, 1),\n\t\t\tnew MeshBasicMaterial()\n\t\t);\n\t\tlet vLineGeometry = new Geometry();\n\t\tlet hLineGeometry = new Geometry();\n\t\tvLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\thLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\tthis.vLine = new Line(vLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.hLine = new Line(hLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.rect.add(this.vLine);\n\t\tthis.rect.add(this.hLine);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsCandleWidget.ts\n **/","export * from './deps'\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/index.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Vector3 = THREE.Vector3;\nimport {Utils} from \"../Utils\";\nimport Line = THREE.Line;\nimport Mesh = THREE.Mesh;\nimport Color = THREE.Color;\nimport Texture = THREE.Texture;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport {AxisMark, AxisMarks} from \"../AxisMarks\";\nimport {AXIS_TYPE} from \"../interfaces\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ChartColor } from '../Color';\n\n\n/**\n * widget for shows marks on axis\n */\nexport class AxisMarksWidget extends ChartWidget {\n\tstatic widgetName = 'AxisMarks';\n\n\tprivate object3D: Object3D;\n\tprivate axisMarksWidgets: AxisMarkWidget[] = [];\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tlet {xAxisMarks, yAxisMarks} = this.chart;\n\n\t\tlet items = xAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t\titems = yAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t}\n\n\tprivate createAxisMark(axisMark: AxisMark) {\n\t\tvar axisMarkWidget = new AxisMarkWidget(this.chart, axisMark);\n\t\tthis.axisMarksWidgets.push(axisMarkWidget);\n\t\tthis.object3D.add(axisMarkWidget.getObject3D());\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.bindEvent(\n\t\t\tthis.chart.screen.onTransformationFrame(() => this.updateMarksPositions()),\n\t\t\tthis.chart.onResize(() => this.updateMarksPositions())\n\t\t);\n\t}\n\n\tprivate updateMarksPositions() {\n\t\tfor (let widget of this.axisMarksWidgets) widget.updatePosition();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n}\n\n\n\nconst DEFAULT_INDICATOR_RENDER_FUNCTION = (axisMarkWidget: AxisMarkWidget, ctx: CanvasRenderingContext2D) => {\n\tvar axisMark = axisMarkWidget.axisMark;\n\tctx.fillStyle = axisMark.options.lineColor;\n\tctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\tlet xCoord = 15;\n\n\tif (axisMark.axisType == AXIS_TYPE.Y) {\n\t\tctx.textAlign = 'end';\n\t\txCoord = axisMarkWidget.indicatorWidth;\n\t}\n\n\tctx.fillText(axisMark.options.title, xCoord, 20);\n\tif (!axisMark.options.showValue) return;\n\n\tctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n\tctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n};\n\nlet INDICATOR_POS_Z = 0.1;\n\nclass AxisMarkWidget {\n\tstatic typeName = 'simple';\n\taxisMark: AxisMark;\n\tindicatorWidth = 128;\n\tindicatorHeight = 64;\n\tprotected indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\tprotected chartState: Chart;\n\tprotected axisType: AXIS_TYPE;\n\tprotected object3D: Object3D;\n\tprotected line: Line;\n\tprotected indicator: Mesh;\n\tprotected moveAnimation: TweenLite;\n\tprotected frameValue: number;\n\t\n\n\tconstructor(chartState: Chart, axisMark: AxisMark) {\n\t\tthis.chartState = chartState;\n\t\tthis.axisMark = axisMark;\n\t\tthis.axisType = axisMark.axisType;\n\t\tthis.frameValue = axisMark.options.value;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.position.setZ(-0.1);\n\n\t\tthis.line = this.createLine();\n\t\tthis.object3D.add(this.line);\n\t\tthis.indicator = this.createIndicator();\n\t\tthis.object3D.add(this.indicator);\n\t\tthis.renderIndicator();\n\t\tthis.updatePosition();\n\t\tthis.bindEvents();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected createLine(): Line {\n\t\tvar {lineWidth, lineColor} = this.axisMark.options;\n\t\tvar lineGeometry = new Geometry();\n\n\t\tlineGeometry.vertices.push(new Vector3(0,0,0), new Vector3(0,0,0));\n\t\treturn new Line(\n\t\t\tlineGeometry,\n\t\t\tnew LineBasicMaterial( { color: new ChartColor(lineColor).value, linewidth: lineWidth})\n\t\t);\n\t}\n\n\tprotected createIndicator(): Mesh {\n\t\tvar {indicatorWidth: width, indicatorHeight: height} = this;\n\t\tvar texture = Utils.createPixelPerfectTexture(width, height, (ctx) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.font = \"10px Arial\";\n\t\t});\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\treturn new Mesh(\n\t\t\tnew THREE.PlaneGeometry(width, height),\n\t\t\tmaterial\n\t\t);\n\t}\n\n\tprotected renderIndicator() {\n\t\tvar texture = (this.indicator.material as MeshBasicMaterial).map as Texture;\n\t\tvar ctx = (texture.image as HTMLCanvasElement).getContext('2d');\n\t\tDEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.axisMark.onDisplayedValueChange(() => this.renderIndicator());\n\t\tthis.axisMark.onValueChange(() => this.onValueChangeHandler());\n\t}\n\n\tprivate onValueChangeHandler() {\n\t\t// move mark to new position with animation\n\t\tif (this.moveAnimation) this.moveAnimation.kill();\n\t\tvar animations = this.chartState.state.animations;\n\t\tvar targetValue = this.axisMark.options.value;\n\t\tvar cb = () => {\n\t\t\tthis.updatePosition();\n\t\t};\n\t\tif (animations.enabled) {\n\t\t\tthis.moveAnimation = TweenLite.to(\n\t\t\t\tthis, animations.trendChangeSpeed,\n\t\t\t\t{frameValue: targetValue, ease: animations.trendChangeEase}\n\t\t\t);\n\t\t\tthis.moveAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.frameValue = targetValue;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tupdatePosition()  {\n\t\tlet chartState = this.chartState;\n\t\tlet screen = chartState.screen;\n\t\tlet isXAxis = this.axisType == AXIS_TYPE.X;\n\t\tlet lineGeometry = (this.line.geometry as Geometry);\n\t\tlet hasStickMode = this.axisMark.options.stickToEdges;\n\t\tlet {width, height} = this.chartState.state;\n\n\t\tif (isXAxis) {\n\t\t\t// TODO: make stickToEdges mode for AXIS_TYPE.X \n\t\t\tthis.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\tlineGeometry.vertices[1].setY(height);\n\t\t\tthis.indicator.position.set(\n\t\t\t\tthis.indicatorWidth / 2,\n\t\t\t\tchartState.state.height - this.indicatorHeight / 2,\n\t\t\t\tINDICATOR_POS_Z\n\t\t\t);\n\t\t} else {\n\t\t\tlet val = this.frameValue;\n\t\t\tlet bottomVal = screen.getBottomVal();\n\t\t\tlet topVal = screen.getTopVal();\n\t\t\tlet needToStickOnTop = hasStickMode && val > topVal;\n\t\t\tlet needToStickOnBottom = hasStickMode && val < bottomVal;\n\t\t\tlet centerYVal = screen.getCenterYVal();\n\t\t\tthis.object3D.position.x = screen.getLeft();\n\t\t\tif (needToStickOnTop) {\n\t\t\t\tthis.object3D.position.y = screen.getTop();\n\t\t\t} else if (needToStickOnBottom) {\n\t\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\t} else {\n\t\t\t\tthis.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t\t\t}\n\t\t\tlineGeometry.vertices[1].setX(width);\n\n\t\t\tlet indicatorPosY = val > centerYVal ? -35 : 10;\n\t\t\tthis.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t\t}\n\t\tlineGeometry.verticesNeedUpdate = true;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisMarksWidget.ts\n **/","export * from './AxisWidget';\nexport * from './GridWidget';\nexport * from './TrendsWidget';\nexport * from './TrendsLineWidget';\nexport * from './TrendsGradientWidget';\n\n// TODO: remove\nexport * from './AxisMarksWidget';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/index.ts\n **/"],"sourceRoot":""}