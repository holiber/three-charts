{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///demoApp.js","webpack:///webpack/bootstrap 41657cc064614dd14632?aab6","webpack:///./demo/demoApp.ts","webpack:///./~/three-charts/build/index.js","webpack:///./~/three-charts/build/ThreeChart.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","0","three_charts_1","chart","DataSourse","data","sec","val","startTime","Date","now","push","xVal","yVal","Math","random","endTime","length","prototype","getData","Utils","deepCopy","getNext","lastVal","item","getPrev","firstVal","unshift","window","onload","initListeners","dsMain","dsRed","dsBlue","Chart","yAxis","marks","value","name","title","lineColor","stickToEdges","range","padding","end","start","margin","zeroVal","xAxis","dataType","AXIS_DATA_TYPE","DATE","type","AXIS_RANGE_TYPE","FIXED","from","to","maxLength","minLength","showValue","trends","main","TREND_TYPE","LINE","dataset","hasBeacon","hasIndicator","hasBackground","showStats","trendDefaultState","settingsForTypes","minSegmentLengthInPx","document","querySelector","setState","animations","enabled","mainTrend","getTrend","deadlineMark","state","xAxisMarks","getItem","closeMark","onDataChange","closeValue","options","getLastItem","setOptions","i","onPrependRequest","requestedLength","resolve","reject","responseData","ticksCount","round","setTimeout","setInterval","appendData","$checkboxMaintrend","addEventListener","checked","$checkboxRedtrend","red","$checkboxBluetrend","blue","$switchLineBtn","$switchBarsBtn","CANDLE","currentRange","timeframeButtons","querySelectorAll","Number","getAttribute","segmentLength","autoScroll","zoomToRange","scrollToEnd","then","30","31","__export","hasOwnProperty","PerspectiveCamera","THREE","State_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsGradientWidget_1","TrendsLoadingWidget_1","AxisMarksWidget_1","BorderWidget_1","TrendsIndicatorWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","TrendsBeaconWidget_1","deps_1","$container","plugins","_this","widgets","REVISION","error","style","getComputedStyle","width","parseInt","height","ChartState","installedWidgets","zoomThrottled","throttle","zoomValue","origin","zoom","init","installWidget","Widget","widgetName","_a","w","h","autoRender","scene","Scene","isStopped","renderer","renderers","antialias","alpha","setPixelRatio","devicePixelRatio","setClearColor","backgroundColor","backgroundOpacity","setSize","appendChild","domElement","$el","display","stats","Stats","setupCamera","widgetsClasses","widgetOptions","WidgetConstructor","widget","add","getObject3D","bindEvents","renderLoop","isDestroyed","begin","render","fpsLimit","fps","delay_1","requestAnimationFrame","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","trendName","controls","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","forEach","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","oldTrendsMaxX","prevState","computedData","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","min","max","autoScrollIsEnabled","createPreviewChart","userOptions","previewChartOptions","Grid","Axis","TrendsGradient","deepMerge","CanvasRenderer","WebGLRenderer","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsBeaconWidget","TrendsIndicatorWidget","TrendsGradientWidget","TrendsLoadingWidget","AxisMarksWidget","BorderWidget","TweenLite","TweenMax","isPlainObject","EE2","es6_promise_1","Promise","a","dom","k","d","children","l","createElement","cssText","g","performance","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","u","n","q","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","SpriteCanvasMaterial","parameters","Material","color","Color","program","setValues","Object","create","constructor","material","copy","console","log","_renderData","_elements","_lights","_projector","Projector","_canvas","canvas","undefined","_canvasWidth","_canvasHeight","_canvasWidthHalf","floor","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_context","_clearColor","_clearAlpha","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_camera","_v1","_v2","_v3","_v4","_v5","RenderableVertex","_v6","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_clipBox","Box2","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_vector3","Vector3","_centroid","_normal","_normalViewMatrix","Matrix3","setLineDash","autoClear","sortObjects","sortElements","info","vertices","faces","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","updateStyle","setViewport","setScissor","setScissorTest","setClearColorHex","hex","warn","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","intersect","expandByScalar","clearRect","setBlending","NormalBlending","setOpacity","setFillStyle","makeEmpty","clearColor","clearDepth","clearStencil","Camera","setTransform","translate","projectScene","elements","lights","getNormalMatrix","matrixWorldInverse","calculateLights","el","element","opacity","RenderableSprite","renderSprite","RenderableLine","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","RenderableFace","v3","overdraw","expand","renderFace3","union","setRGB","ll","light","lightColor","AmbientLight","DirectionalLight","PointLight","calculateLight","normal","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","multiplyScalar","subVectors","distance","distanceTo","blending","scaleX","scale","scaleY","dist","sqrt","SpriteMaterial","texture","map","pattern","version","textureToPattern","bitmap","image","ox","offset","oy","sx","repeat","sy","cx","cy","save","rotation","rotate","restore","getStyle","setStrokeStyle","beginPath","moveTo","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","LineDashedMaterial","dashSize","gapSize","uv1","uv2","uv3","drawTriangle","MeshLambertMaterial","MeshPhongMaterial","emissive","FaceColors","multiply","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","MeshBasicMaterial","mapping","UVMapping","uvs","patternPath","envMap","SphericalReflectionMapping","vertexNormalsModel","applyMatrix3","MeshNormalMaterial","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","repeatX","wrapS","RepeatWrapping","repeatY","wrapT","createPattern","onUpdate","u0","v0","u1","u2","det","idet","offsetX","offsetY","transform","clipImage","clip","pixels","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","MultiplyBlending","lineWidth","lineCap","lineJoin","strokeStyle","RenderableObject","object","renderOrder","vertexNormalsLength","Vector2","Vector4","visible","vertex","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","objects","_vector4","Box3","_boundingBox","_points3","Array","_points4","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","unproject","pickingRay","RenderList","normals","normalMatrix","setObject","projectVertex","applyMatrix4","invW","pushVertex","getNextVertexInPool","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","getNextLineInPool","pushTriangle","side","DoubleSide","getNextFaceInPool","fromArray","arguments","uv","renderList","autoUpdate","updateMatrixWorld","parent","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","addObject","getNextObjectInPool","applyProjection","traverseVisible","Light","Mesh","Line","frustumCulled","intersectsObject","Sprite","intersectsSprite","sort","painterSort","o","ol","geometry","BufferGeometry","attributes","groups","positions","array","index","indices","group","count","Geometry","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","target","targetVertex","fl","face","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","step","LineSegments","clipLine","colors","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","isObject","isObjectObject","toString","ctor","prot","isArray","__WEBPACK_AMD_DEFINE_RESULT__","_isArray","obj","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","concat","**","growListenerTree","listener","split","slice","shift","warned","trace","setMaxListeners","event","once","fn","many","ttl","Error","off","apply","_origin","on","emit","_all","args","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","removeAllListeners","listenersAny","EventEmitter2","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","Trend_1","EventEmmiter_1","Widget_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","initialState","ALL","NUMBER","gridMinSize","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","scrollSpeed","scrollEase","Linear","easeNone","autoScrollSpeed","autoScrollEase","maxSegmentLength","maxSegmentLengthInPx","pluginsState","eventEmitterMaxListeners","maxVisibleSegments","isReady","ee","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","onDestroy","subscribe","onInitialStateApplied","onReady","onChange","onTrendChange","onZoom","onPluginsStateChange","newState","eventData","silent","stateData","changedProps","key","trendsData","trendOptions","newStateContainsData","keys","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","widgetsOptions","WidgetClass","defaultOptions","getDefaultOptions","ChartWidget","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","copyProps","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","NAME","pluginWidgets","PluginWidget","setupChartState","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","rangeLessThenMinValue","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","nextRange","newScroll","animationTime","endXVal","getPointOnXAxis","getPointOnYAxis","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","TrendSegmentsManager_1","EVENTS","PREPEND_REQUEST","Trend","chartState","minYVal","maxYVal","prepareData","segmentsManager","TrendSegmentsManager","checkForPrependRequest","changedOptions","getCalculatedOptions","rawData","getOptions","updatedTrendData","changeData","prependData","allData","_i","newData_1","statePatch","fromX","toX","filteredData","data_1","getFirstItem","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","currentData","isPrepend","initialItem","getUid","deepmerge","src","mergeArrays","dst","indexOf","obj1","obj2","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","intStr","lengthDiff","afterPointDigitsCount","afterPointStr","substr","bindEvent","createTexture","ctx","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","srcObject","dstObject","props","excludeProps","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","trend","segmentsById","segments","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","onDestroyHandler","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getSegment","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","currentSegmentLengthInPx","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","firstDisplayedSegmentInd","lastDisplayedSegmentInd","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","valueInPoint","onAnimationFrame","onRebuild","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","needRebuildSegments","trendData","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","prevPoint","getFrameVal","getFramePoint","frameVal","eventName","listenersCount","unsubscriber","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getEnabledTrends","enabledTrends","allTrends","firstTrendData","getExtremumYVal","extremumIsMax","compareFn","trends_1","trendYValues","dataItem","NaN","onSegmentsRebuilded","onInitialStateAppliedHandler","_loop_1","this_1","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","__extends","__","AXIS_MARK_DEFAULT_OPTIONS","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","_super","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","traverse","transparent","axisMesh","PlaneGeometry","axisOptions","axisGridParams","getGridParamsForAxis","edgeOffset","segmentsCount","pxVal","textAlign","getDateStr","gridParams","hour","day","tf","getHours","getMinutes","getSeconds","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","xLinesCount","yLinesCount","lineSegments","setZ","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","TrendsWidget_1","Color_1","getTrendWidgetClass","TrendGradient","TrendsWidget","visibleSegmentsCnt","segmentsIds","Uint16Array","initGradient","updateSegments","widgetIsEnabled","gradient","Face3","ChartColor","scaleXFactor","scaleYFactor","currentScale","onSegmentsAnimate","trendSegmentsManager","includes","setupSegmentVertices","segmentInd","prevVisibleSegmentsCnt","segmentsToProcessCnt","segmentState","gradientSegmentInd","topLeft","bottomLeft","bottomRight","topRight","screenHeightVal","startX","toLocalX","startY","toLocalY","endX","endY","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","widgetObject","getObjectByName","parseColor","cache","replace","exec","isNaN","colorStr","rgba","hexStr","rgbaStr","PlaneBufferGeometry","TrendLoading","mesh","deactivate","activate","restart","updatePosition","center","arc","pointVector","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY","CANVAS_WIDTH","CANVAS_HEIGHT","OFFSET_X","TrendIndicator","initObject","lastItem","segmentEndXVal","segmentEndYVal","endPointVector","screenWidth","indicatorIsOutOfScreen","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","segmentIsNotDisplayed","destroySegment","setupSegment","pop","lineStartVertex","lineEndVertex","toLocalVec","vec","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","TrendBeacon","onStateChange","stopAnimation","animated","animationObject","trendsSegments","DEFAULT_CONFIG","installPluginWidgets","ChartPlugin","config","onChartReadyHandler","changedPluginsStates","onStateChanged","changedState"],"mappings":"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","file":"demoApp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar three_charts_1 = __webpack_require__(30);\r\n\t//import { Chart, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from '../src';\r\n\t// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/TrendsMarksPlugin';\r\n\t// import { TrendsBeaconWidget } from '../plugins/build/TrendsBeaconWidget';\r\n\tvar chart;\r\n\tvar DataSourse = (function () {\r\n\t    function DataSourse() {\r\n\t        this.data = [];\r\n\t        var sec = 0;\r\n\t        var val = 70;\r\n\t        this.startTime = Date.now();\r\n\t        while (sec < 100) {\r\n\t            this.data.push({\r\n\t                xVal: this.startTime + sec * 1000,\r\n\t                yVal: val\r\n\t            });\r\n\t            val += Math.random() * 14 - 7;\r\n\t            sec++;\r\n\t        }\r\n\t        this.endTime = this.data[this.data.length - 1].xVal;\r\n\t    }\r\n\t    DataSourse.prototype.getData = function () {\r\n\t        return three_charts_1.Utils.deepCopy(this.data);\r\n\t    };\r\n\t    DataSourse.prototype.getNext = function () {\r\n\t        var lastVal = this.data[this.data.length - 1];\r\n\t        var yVal = lastVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.endTime + 1000;\r\n\t        this.endTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.push(item);\r\n\t        return item;\r\n\t    };\r\n\t    DataSourse.prototype.getPrev = function () {\r\n\t        var firstVal = this.data[0];\r\n\t        var yVal = firstVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.startTime - 1000;\r\n\t        this.startTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.unshift(item);\r\n\t        return item;\r\n\t    };\r\n\t    return DataSourse;\r\n\t}());\r\n\t// class MarksSource {\r\n\t// \tstatic getNext(val: number): ITrendMarkOptions {\r\n\t// \t\tif (Math.random() > 0.2) return null;\r\n\t// \t\treturn this.generate(val);\r\n\t// \t}\r\n\t//\r\n\t// \tstatic generate(val: number): ITrendMarkOptions {\r\n\t// \t\tlet descriptionColor = 'rgb(40,136,75)';\r\n\t// \t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\r\n\t// \t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\r\n\t// \t\t\tdescriptionColor = 'rgb(219,73,49)';\r\n\t// \t\t}\r\n\t//\r\n\t// \t\treturn {\r\n\t// \t\t\ttrendName: 'main',\r\n\t// \t\t\tvalue: val,\r\n\t// \t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\r\n\t// \t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\r\n\t// \t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\r\n\t// \t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\r\n\t// \t\t\torientation: orientation,\r\n\t// \t\t\tdescriptionColor: descriptionColor\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\twindow.onload = function () {\r\n\t    initListeners();\r\n\t    var dsMain = new DataSourse();\r\n\t    var dsRed = new DataSourse();\r\n\t    var dsBlue = new DataSourse();\r\n\t    var now = Date.now();\r\n\t    // Chart.installWidget(TrendsLoadingWidget);\r\n\t    // Chart.installWidget(TrendsBeaconWidget);\r\n\t    // Chart.installWidget(TrendsIndicatorWidget);\r\n\t    chart = new three_charts_1.Chart({\r\n\t        yAxis: {\r\n\t            marks: [\r\n\t                { value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true },\r\n\t            ],\r\n\t            range: {\r\n\t                padding: { end: 100, start: 100 },\r\n\t                margin: { end: 50, start: 50 },\r\n\t                zeroVal: 70\r\n\t            }\r\n\t        },\r\n\t        xAxis: {\r\n\t            //range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\r\n\t            dataType: three_charts_1.AXIS_DATA_TYPE.DATE,\r\n\t            range: {\r\n\t                type: three_charts_1.AXIS_RANGE_TYPE.FIXED,\r\n\t                from: Date.now(),\r\n\t                to: Date.now() + 20000,\r\n\t                padding: { end: 200, start: 0 },\r\n\t                maxLength: 5000000,\r\n\t                minLength: 5000\r\n\t            },\r\n\t            marks: [\r\n\t                { value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true },\r\n\t                { value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true }\r\n\t            ]\r\n\t        },\r\n\t        trends: {\r\n\t            'main': {\r\n\t                type: three_charts_1.TREND_TYPE.LINE,\r\n\t                dataset: dsMain.getData(),\r\n\t                hasBeacon: true,\r\n\t                hasIndicator: true,\r\n\t                hasBackground: true,\r\n\t            },\r\n\t        },\r\n\t        showStats: true,\r\n\t        // autoRender: {fps: 100},\r\n\t        // animations: {enabled: false},\r\n\t        trendDefaultState: {\r\n\t            settingsForTypes: {\r\n\t                LINE: {\r\n\t                    minSegmentLengthInPx: 10\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }, document.querySelector('.chart'));\r\n\t    chart.setState({ animations: { enabled: false } });\r\n\t    chart.setState({ animations: { enabled: true } });\r\n\t    window['chart'] = chart;\r\n\t    var mainTrend = chart.getTrend('main');\r\n\t    var deadlineMark = chart.state.xAxisMarks.getItem('deadline');\r\n\t    var closeMark = chart.state.xAxisMarks.getItem('close');\r\n\t    mainTrend.onDataChange(function () {\r\n\t        var closeValue = closeMark.options.value;\r\n\t        if (mainTrend.getLastItem().xVal >= closeValue) {\r\n\t            deadlineMark.setOptions({ value: closeValue + 10000 });\r\n\t            closeMark.setOptions({ value: closeValue + 20000 });\r\n\t        }\r\n\t        // var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\r\n\t        // if (markOptions) setTimeout(() => {\r\n\t        // \tlet trendsMarks = chart.state.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\r\n\t        // \ttrendsMarks.createMark(markOptions);\r\n\t        // }, 500);\r\n\t    });\r\n\t    // var previewChart1 = Chart.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-chart')[0],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.data, hasBeacon: true}\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart2 = Chart.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-chart')[1],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.data, hasBeacon: true}\r\n\t    // \t},\r\n\t    //\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart3 = Chart.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-chart')[2],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.data, hasBeacon: true},\r\n\t    // \t\t'red': {dataset: dsRed.data, lineColor: 0xFF2222},\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    var i = 0;\r\n\t    chart.getTrend('main').onPrependRequest(function (requestedLength, resolve, reject) {\r\n\t        var responseData = [];\r\n\t        var ticksCount = Math.round(requestedLength / 1000);\r\n\t        while (ticksCount--)\r\n\t            responseData.unshift(dsMain.getPrev());\r\n\t        setTimeout(function () {\r\n\t            resolve(responseData);\r\n\t        }, 2000);\r\n\t    });\r\n\t    setInterval(function () {\r\n\t        i++;\r\n\t        var val = dsMain.getNext();\r\n\t        // [i % 2 ? 10 : 20]\r\n\t        chart.getTrend('main').appendData([val]);\r\n\t        // chart.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\r\n\t        // chart.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // chart.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // chart.getTrend('red').appendData([val + 10 + Math.random() * 20]);\r\n\t        // chart.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.getTrend('main').appendData([val]);\r\n\t        // previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\r\n\t        // previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.appendData(dataToAppend1);\r\n\t        //\r\n\t        // var chartData2 = previewChart2.state.data.trends[0].data;\r\n\t        // var lastItem2 = chartData2[chartData.length - 1];\r\n\t        // var dataToAppend2 = [\r\n\t        // \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\r\n\t        // ];\r\n\t        // previewChart2.appendData(dataToAppend2);\r\n\t        // previewChart3.appendData(dataToAppend2);\r\n\t    }, 1000);\r\n\t};\r\n\tfunction initListeners() {\r\n\t    var $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]');\r\n\t    $checkboxMaintrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { main: { enabled: $checkboxMaintrend.checked } } });\r\n\t    });\r\n\t    var $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]');\r\n\t    $checkboxRedtrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { red: { enabled: $checkboxRedtrend.checked } } });\r\n\t    });\r\n\t    var $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]');\r\n\t    $checkboxBluetrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { blue: { enabled: $checkboxBluetrend.checked } } });\r\n\t    });\r\n\t    var $switchLineBtn = document.querySelector('[name=\"switch-line\"]');\r\n\t    $switchLineBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: three_charts_1.TREND_TYPE.LINE });\r\n\t    });\r\n\t    var $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]');\r\n\t    $switchBarsBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: three_charts_1.TREND_TYPE.CANDLE });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-left\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.state.data.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { from: currentRange.from - 2000 } } });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-right\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.state.data.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { to: currentRange.to + 2000 } } });\r\n\t    });\r\n\t    var timeframeButtons = document.querySelectorAll(\".timeframe\");\r\n\t    for (var i = 0; i < timeframeButtons.length; i++) {\r\n\t        timeframeButtons[i].addEventListener(\"click\", function () {\r\n\t            var range = Number(this.getAttribute('data-range'));\r\n\t            var segmentLength = Number(this.getAttribute('data-segment-length'));\r\n\t            chart.state.setState({ autoScroll: false });\r\n\t            chart.state.zoomToRange(range);\r\n\t            chart.state.scrollToEnd().then(function () {\r\n\t                chart.state.setState({ autoScroll: true });\r\n\t            });\r\n\t        });\r\n\t    }\r\n\t}\r\n\n\n/***/ },\n\n/***/ 30:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(31)\n\n/***/ },\n\n/***/ 31:\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t    if (true) module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"THREE_CHARTS\"] = factory(); else root[\"THREE_CHARTS\"] = factory();\n\t})(this, function() {\n\t    return function(modules) {\n\t        var installedModules = {};\n\t        function __webpack_require__(moduleId) {\n\t            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n\t            var module = installedModules[moduleId] = {\n\t                exports: {},\n\t                id: moduleId,\n\t                loaded: false\n\t            };\n\t            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t            module.loaded = true;\n\t            return module.exports;\n\t        }\n\t        __webpack_require__.m = modules;\n\t        __webpack_require__.c = installedModules;\n\t        __webpack_require__.p = \"\";\n\t        return __webpack_require__(0);\n\t    }([ function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(1));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(2));\n\t        __export(__webpack_require__(21));\n\t        __export(__webpack_require__(20));\n\t        __export(__webpack_require__(19));\n\t        __export(__webpack_require__(12));\n\t        __export(__webpack_require__(13));\n\t        __export(__webpack_require__(15));\n\t        __export(__webpack_require__(18));\n\t        __export(__webpack_require__(14));\n\t        __export(__webpack_require__(17));\n\t        __export(__webpack_require__(35));\n\t        __export(__webpack_require__(25));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        __webpack_require__(3);\n\t        var PerspectiveCamera = THREE.PerspectiveCamera;\n\t        var State_1 = __webpack_require__(12);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var AxisWidget_1 = __webpack_require__(22);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var TrendsGradientWidget_1 = __webpack_require__(24);\n\t        var TrendsLoadingWidget_1 = __webpack_require__(27);\n\t        var AxisMarksWidget_1 = __webpack_require__(28);\n\t        var BorderWidget_1 = __webpack_require__(29);\n\t        var TrendsIndicatorWidget_1 = __webpack_require__(30);\n\t        var TrendsLineWidget_1 = __webpack_require__(31);\n\t        var TrendsCandleWidget_1 = __webpack_require__(32);\n\t        var TrendsBeaconWidget_1 = __webpack_require__(33);\n\t        var deps_1 = __webpack_require__(34);\n\t        var Chart = function() {\n\t            function Chart(state, $container, plugins) {\n\t                var _this = this;\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.widgets = [];\n\t                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n\t                if (!$container) {\n\t                    Utils_1.Utils.error(\"$el must be set\");\n\t                }\n\t                var style = getComputedStyle($container);\n\t                state.width = parseInt(style.width);\n\t                state.height = parseInt(style.height);\n\t                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n\t                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n\t                    return _this.zoom(zoomValue, origin);\n\t                }, 200);\n\t                this.$container = $container;\n\t                this.init($container);\n\t            }\n\t            Chart.installWidget = function(Widget) {\n\t                if (!Widget.widgetName) {\n\t                    Utils_1.Utils.error(\"unnamed widget\");\n\t                }\n\t                this.installedWidgets[Widget.widgetName] = Widget;\n\t            };\n\t            Chart.prototype.init = function($container) {\n\t                var state = this.state;\n\t                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n\t                this.scene = new THREE.Scene();\n\t                this.isStopped = !autoRender.enabled;\n\t                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n\t                    antialias: true,\n\t                    alpha: true\n\t                });\n\t                renderer.setPixelRatio(Chart.devicePixelRatio);\n\t                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n\t                renderer.setSize(w, h);\n\t                $container.appendChild(renderer.domElement);\n\t                this.$el = renderer.domElement;\n\t                this.$el.style.display = \"block\";\n\t                if (showStats) {\n\t                    this.stats = new Stats();\n\t                    $container.appendChild(this.stats.domElement);\n\t                }\n\t                this.setupCamera();\n\t                var widgetsClasses = this.state.widgetsClasses;\n\t                for (var widgetName in widgetsClasses) {\n\t                    var widgetOptions = this.state.data.widgets[widgetName];\n\t                    if (!widgetOptions.enabled) continue;\n\t                    var WidgetConstructor = widgetsClasses[widgetName];\n\t                    var widget = new WidgetConstructor(this.state);\n\t                    this.scene.add(widget.getObject3D());\n\t                    this.widgets.push(widget);\n\t                }\n\t                this.bindEvents();\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.renderLoop = function() {\n\t                var _this = this;\n\t                if (this.isDestroyed) return;\n\t                this.stats && this.stats.begin();\n\t                this.render();\n\t                if (this.isStopped) return;\n\t                var fpsLimit = this.state.data.autoRender.fps;\n\t                if (fpsLimit) {\n\t                    var delay_1 = 1e3 / fpsLimit;\n\t                    setTimeout(function() {\n\t                        return requestAnimationFrame(function() {\n\t                            return _this.renderLoop();\n\t                        });\n\t                    }, delay_1);\n\t                } else {\n\t                    requestAnimationFrame(function() {\n\t                        return _this.renderLoop();\n\t                    });\n\t                }\n\t                this.stats && this.stats.end();\n\t            };\n\t            Chart.prototype.render = function() {\n\t                this.renderer.render(this.scene, this.camera);\n\t            };\n\t            Chart.prototype.stop = function() {\n\t                this.isStopped = true;\n\t            };\n\t            Chart.prototype.run = function() {\n\t                this.isStopped = false;\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.destroy = function() {\n\t                this.isDestroyed = true;\n\t                this.stop();\n\t                this.state.destroy();\n\t                this.unbindEvents();\n\t                try {\n\t                    this.renderer.forceContextLoss();\n\t                } catch (wtf) {}\n\t                this.renderer.context = null;\n\t                this.renderer.domElement = null;\n\t                this.renderer = null;\n\t            };\n\t            Chart.prototype.getState = function() {\n\t                return this.state.data;\n\t            };\n\t            Chart.prototype.getTrend = function(trendName) {\n\t                return this.state.getTrend(trendName);\n\t            };\n\t            Chart.prototype.setState = function(state) {\n\t                return this.state.setState(state);\n\t            };\n\t            Chart.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var $el = this.$el;\n\t                if (this.state.data.controls.enabled) {\n\t                    $el.addEventListener(\"mousewheel\", function(ev) {\n\t                        _this.onMouseWheel(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousemove\", function(ev) {\n\t                        _this.onMouseMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousedown\", function(ev) {\n\t                        return _this.onMouseDown(ev);\n\t                    });\n\t                    $el.addEventListener(\"mouseup\", function(ev) {\n\t                        return _this.onMouseUp(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchmove\", function(ev) {\n\t                        _this.onTouchMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchend\", function(ev) {\n\t                        _this.onTouchEnd(ev);\n\t                    });\n\t                }\n\t                if (this.state.data.autoResize) {\n\t                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n\t                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n\t                    });\n\t                }\n\t                this.unsubscribers = [ this.state.onTrendsChange(function() {\n\t                    return _this.autoscroll();\n\t                }), this.state.screen.onTransformationFrame(function(options) {\n\t                    return _this.onScreenTransformHandler(options);\n\t                }), this.state.onResize(function(options) {\n\t                    return _this.onChartResize();\n\t                }) ];\n\t            };\n\t            Chart.prototype.unbindEvents = function() {\n\t                try {\n\t                    this.resizeSensor && this.resizeSensor.detach();\n\t                } catch (e) {}\n\t                this.$el.remove();\n\t                this.unsubscribers.forEach(function(unsubscribe) {\n\t                    return unsubscribe();\n\t                });\n\t            };\n\t            Chart.prototype.setupCamera = function() {\n\t                var camSettings = this.state.screen.getCameraSettings();\n\t                if (!this.camera) {\n\t                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t                    this.scene.add(this.camera);\n\t                } else {\n\t                    this.camera.fov = camSettings.FOV;\n\t                    this.camera.aspect = camSettings.aspect;\n\t                    this.camera.far = camSettings.far;\n\t                    this.camera.near = camSettings.near;\n\t                    this.camera.updateProjectionMatrix();\n\t                }\n\t                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t                this.cameraInitialPosition = this.camera.position.clone();\n\t                this.onScreenTransformHandler(this.state.screen.options);\n\t            };\n\t            Chart.prototype.onScreenTransformHandler = function(options) {\n\t                if (options.scrollX != void 0) {\n\t                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n\t                    this.camera.position.setX(scrollX_1);\n\t                }\n\t                if (options.scrollY != void 0) {\n\t                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n\t                    this.camera.position.setY(scrollY_1);\n\t                }\n\t            };\n\t            Chart.prototype.autoscroll = function() {\n\t                var state = this.state;\n\t                if (!state.data.autoScroll) return;\n\t                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n\t                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n\t                if (trendsMaxXDelta > 0) {\n\t                    var maxVisibleX = this.state.screen.getScreenRightVal();\n\t                    var paddingRightX = this.state.getPaddingRight();\n\t                    var currentScroll = state.data.xAxis.range.scroll;\n\t                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t                        return;\n\t                    }\n\t                    var scrollDelta = trendsMaxXDelta;\n\t                    this.setState({\n\t                        xAxis: {\n\t                            range: {\n\t                                scroll: currentScroll + scrollDelta\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onScrollStop = function() {};\n\t            Chart.prototype.onMouseDown = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.clientX,\n\t                        y: ev.clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseUp = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseMove = function(ev) {\n\t                if (this.state.data.cursor.dragMode) {\n\t                    this.setState({\n\t                        cursor: {\n\t                            dragMode: true,\n\t                            x: ev.clientX,\n\t                            y: ev.clientY\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onMouseWheel = function(ev) {\n\t                ev.stopPropagation();\n\t                ev.preventDefault();\n\t                var zoomOrigin = ev.layerX / this.state.data.width;\n\t                var zoomValue = 1 + ev.wheelDeltaY * .001;\n\t                this.zoom(zoomValue, zoomOrigin);\n\t            };\n\t            Chart.prototype.onTouchMove = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.touches[0].clientX,\n\t                        y: ev.touches[0].clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onTouchEnd = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n\t                this.setState({\n\t                    width: width,\n\t                    height: height\n\t                });\n\t            };\n\t            Chart.prototype.onChartResize = function() {\n\t                var _a = this.state.data, width = _a.width, height = _a.height;\n\t                this.renderer.setSize(width, height);\n\t                this.setupCamera();\n\t            };\n\t            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n\t                var _this = this;\n\t                var MAX_ZOOM_VALUE = 1.5;\n\t                var MIN_ZOOM_VALUE = .7;\n\t                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t                var autoScrollIsEnabled = this.state.data.autoScroll;\n\t                if (autoScrollIsEnabled) this.state.setState({\n\t                    autoScroll: false\n\t                });\n\t                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n\t                    if (autoScrollIsEnabled) _this.setState({\n\t                        autoScroll: true\n\t                    });\n\t                });\n\t            };\n\t            Chart.createPreviewChart = function(userOptions, $el) {\n\t                var previewChartOptions = {\n\t                    animations: {\n\t                        enabled: false\n\t                    },\n\t                    widgets: {\n\t                        Grid: {\n\t                            enabled: false\n\t                        },\n\t                        Axis: {\n\t                            enabled: false\n\t                        },\n\t                        TrendsGradient: {\n\t                            enabled: false\n\t                        }\n\t                    }\n\t                };\n\t                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n\t                return new Chart(options, $el);\n\t            };\n\t            Chart.devicePixelRatio = window.devicePixelRatio;\n\t            Chart.installedWidgets = {};\n\t            Chart.renderers = {\n\t                CanvasRenderer: THREE.CanvasRenderer,\n\t                WebGLRenderer: THREE.WebGLRenderer\n\t            };\n\t            return Chart;\n\t        }();\n\t        exports.Chart = Chart;\n\t        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n\t        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n\t        Chart.installWidget(AxisWidget_1.AxisWidget);\n\t        Chart.installWidget(GridWidget_1.GridWidget);\n\t        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n\t        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n\t        Chart.installWidget(TrendsGradientWidget_1.TrendsGradientWidget);\n\t        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n\t        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n\t        Chart.installWidget(BorderWidget_1.BorderWidget);\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        window.TweenLite = TweenMax;\n\t        window.Stats = __webpack_require__(4);\n\t        __webpack_require__(5);\n\t        __webpack_require__(6);\n\t        exports.isPlainObject = __webpack_require__(7);\n\t        exports.EE2 = __webpack_require__(9);\n\t        var es6_promise_1 = __webpack_require__(10);\n\t        exports.Promise = es6_promise_1.Promise;\n\t        exports.ResizeSensor = __webpack_require__(11);\n\t    }, function(module, exports) {\n\t        var Stats = function() {\n\t            function h(a) {\n\t                c.appendChild(a.dom);\n\t                return a;\n\t            }\n\t            function k(a) {\n\t                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n\t                l = a;\n\t            }\n\t            var l = 0, c = document.createElement(\"div\");\n\t            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n\t            c.addEventListener(\"click\", function(a) {\n\t                a.preventDefault();\n\t                k(++l % c.children.length);\n\t            }, !1);\n\t            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n\t            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n\t            k(0);\n\t            return {\n\t                REVISION: 16,\n\t                dom: c,\n\t                addPanel: h,\n\t                showPanel: k,\n\t                begin: function() {\n\t                    g = (performance || Date).now();\n\t                },\n\t                end: function() {\n\t                    a++;\n\t                    var c = (performance || Date).now();\n\t                    f.update(c - g, 200);\n\t                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n\t                        var d = performance.memory;\n\t                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n\t                    }\n\t                    return c;\n\t                },\n\t                update: function() {\n\t                    g = this.end();\n\t                },\n\t                domElement: c,\n\t                setMode: k\n\t            };\n\t        };\n\t        Stats.Panel = function(h, k, l) {\n\t            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n\t            q.width = r;\n\t            q.height = f;\n\t            q.style.cssText = \"width:80px;height:48px\";\n\t            var b = q.getContext(\"2d\");\n\t            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n\t            b.textBaseline = \"top\";\n\t            b.fillStyle = l;\n\t            b.fillRect(0, 0, r, f);\n\t            b.fillStyle = k;\n\t            b.fillText(h, t, u);\n\t            b.fillRect(d, m, n, p);\n\t            b.fillStyle = l;\n\t            b.globalAlpha = .9;\n\t            b.fillRect(d, m, n, p);\n\t            return {\n\t                dom: q,\n\t                update: function(f, v) {\n\t                    c = Math.min(c, f);\n\t                    g = Math.max(g, f);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = 1;\n\t                    b.fillRect(0, 0, r, m);\n\t                    b.fillStyle = k;\n\t                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n\t                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n\t                    b.fillRect(d + n - a, m, a, p);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = .9;\n\t                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n\t                }\n\t            };\n\t        };\n\t        \"object\" === typeof module && (module.exports = Stats);\n\t    }, function(module, exports) {\n\t        THREE.SpriteCanvasMaterial = function(parameters) {\n\t            THREE.Material.call(this);\n\t            this.type = \"SpriteCanvasMaterial\";\n\t            this.color = new THREE.Color(16777215);\n\t            this.program = function(context, color) {};\n\t            this.setValues(parameters);\n\t        };\n\t        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n\t        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n\t            var material = new THREE.SpriteCanvasMaterial();\n\t            material.copy(this);\n\t            material.color.copy(this.color);\n\t            material.program = this.program;\n\t            return material;\n\t        };\n\t        THREE.CanvasRenderer = function(parameters) {\n\t            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n\t            parameters = parameters || {};\n\t            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n\t                alpha: parameters.alpha === true\n\t            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n\t            if (_context.setLineDash === undefined) {\n\t                _context.setLineDash = function() {};\n\t            }\n\t            this.domElement = _canvas;\n\t            this.autoClear = true;\n\t            this.sortObjects = true;\n\t            this.sortElements = true;\n\t            this.info = {\n\t                render: {\n\t                    vertices: 0,\n\t                    faces: 0\n\t                }\n\t            };\n\t            this.supportsVertexTextures = function() {};\n\t            this.setFaceCulling = function() {};\n\t            this.getContext = function() {\n\t                return _context;\n\t            };\n\t            this.getContextAttributes = function() {\n\t                return _context.getContextAttributes();\n\t            };\n\t            this.getPixelRatio = function() {\n\t                return _pixelRatio;\n\t            };\n\t            this.setPixelRatio = function(value) {\n\t                if (value !== undefined) _pixelRatio = value;\n\t            };\n\t            this.setSize = function(width, height, updateStyle) {\n\t                _canvasWidth = width * _pixelRatio;\n\t                _canvasHeight = height * _pixelRatio;\n\t                _canvas.width = _canvasWidth;\n\t                _canvas.height = _canvasHeight;\n\t                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n\t                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n\t                if (updateStyle !== false) {\n\t                    _canvas.style.width = width + \"px\";\n\t                    _canvas.style.height = height + \"px\";\n\t                }\n\t                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _contextGlobalAlpha = 1;\n\t                _contextGlobalCompositeOperation = 0;\n\t                _contextStrokeStyle = null;\n\t                _contextFillStyle = null;\n\t                _contextLineWidth = null;\n\t                _contextLineCap = null;\n\t                _contextLineJoin = null;\n\t                this.setViewport(0, 0, width, height);\n\t            };\n\t            this.setViewport = function(x, y, width, height) {\n\t                _viewportX = x * _pixelRatio;\n\t                _viewportY = y * _pixelRatio;\n\t                _viewportWidth = width * _pixelRatio;\n\t                _viewportHeight = height * _pixelRatio;\n\t            };\n\t            this.setScissor = function() {};\n\t            this.setScissorTest = function() {};\n\t            this.setClearColor = function(color, alpha) {\n\t                _clearColor.set(color);\n\t                _clearAlpha = alpha !== undefined ? alpha : 1;\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t            };\n\t            this.setClearColorHex = function(hex, alpha) {\n\t                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n\t                this.setClearColor(hex, alpha);\n\t            };\n\t            this.getClearColor = function() {\n\t                return _clearColor;\n\t            };\n\t            this.getClearAlpha = function() {\n\t                return _clearAlpha;\n\t            };\n\t            this.getMaxAnisotropy = function() {\n\t                return 0;\n\t            };\n\t            this.clear = function() {\n\t                if (_clearBox.isEmpty() === false) {\n\t                    _clearBox.intersect(_clipBox);\n\t                    _clearBox.expandByScalar(2);\n\t                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n\t                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n\t                    if (_clearAlpha < 1) {\n\t                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    if (_clearAlpha > 0) {\n\t                        setBlending(THREE.NormalBlending);\n\t                        setOpacity(1);\n\t                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n\t                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    _clearBox.makeEmpty();\n\t                }\n\t            };\n\t            this.clearColor = function() {};\n\t            this.clearDepth = function() {};\n\t            this.clearStencil = function() {};\n\t            this.render = function(scene, camera) {\n\t                if (camera instanceof THREE.Camera === false) {\n\t                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n\t                    return;\n\t                }\n\t                if (this.autoClear === true) this.clear();\n\t                _this.info.render.vertices = 0;\n\t                _this.info.render.faces = 0;\n\t                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n\t                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n\t                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n\t                _elements = _renderData.elements;\n\t                _lights = _renderData.lights;\n\t                _camera = camera;\n\t                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\t                calculateLights();\n\t                for (var e = 0, el = _elements.length; e < el; e++) {\n\t                    var element = _elements[e];\n\t                    var material = element.material;\n\t                    if (material === undefined || material.opacity === 0) continue;\n\t                    _elemBox.makeEmpty();\n\t                    if (element instanceof THREE.RenderableSprite) {\n\t                        _v1 = element;\n\t                        _v1.x *= _canvasWidthHalf;\n\t                        _v1.y *= _canvasHeightHalf;\n\t                        renderSprite(_v1, element, material);\n\t                    } else if (element instanceof THREE.RenderableLine) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderLine(_v1, _v2, element, material);\n\t                        }\n\t                    } else if (element instanceof THREE.RenderableFace) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v3 = element.v3;\n\t                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n\t                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n\t                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _v3.positionScreen.x *= _canvasWidthHalf;\n\t                        _v3.positionScreen.y *= _canvasHeightHalf;\n\t                        if (material.overdraw > 0) {\n\t                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n\t                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n\t                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n\t                        }\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n\t                        }\n\t                    }\n\t                    _clearBox.union(_elemBox);\n\t                }\n\t                _context.setTransform(1, 0, 0, 1, 0, 0);\n\t            };\n\t            function calculateLights() {\n\t                _ambientLight.setRGB(0, 0, 0);\n\t                _directionalLights.setRGB(0, 0, 0);\n\t                _pointLights.setRGB(0, 0, 0);\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    var lightColor = light.color;\n\t                    if (light instanceof THREE.AmbientLight) {\n\t                        _ambientLight.add(lightColor);\n\t                    } else if (light instanceof THREE.DirectionalLight) {\n\t                        _directionalLights.add(lightColor);\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        _pointLights.add(lightColor);\n\t                    }\n\t                }\n\t            }\n\t            function calculateLight(position, normal, color) {\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    _lightColor.copy(light.color);\n\t                    if (light instanceof THREE.DirectionalLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\t                        var amount = normal.dot(lightPosition);\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\t                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n\t                        if (amount == 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    }\n\t                }\n\t            }\n\t            function renderSprite(v1, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                var scaleX = element.scale.x * _canvasWidthHalf;\n\t                var scaleY = element.scale.y * _canvasHeightHalf;\n\t                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n\t                _elemBox.min.set(v1.x - dist, v1.y - dist);\n\t                _elemBox.max.set(v1.x + dist, v1.y + dist);\n\t                if (material instanceof THREE.SpriteMaterial) {\n\t                    var texture = material.map;\n\t                    if (texture !== null) {\n\t                        var pattern = _patterns[texture.id];\n\t                        if (pattern === undefined || pattern.version !== texture.version) {\n\t                            pattern = textureToPattern(texture);\n\t                            _patterns[texture.id] = pattern;\n\t                        }\n\t                        if (pattern.canvas !== undefined) {\n\t                            setFillStyle(pattern.canvas);\n\t                            var bitmap = texture.image;\n\t                            var ox = bitmap.width * texture.offset.x;\n\t                            var oy = bitmap.height * texture.offset.y;\n\t                            var sx = bitmap.width * texture.repeat.x;\n\t                            var sy = bitmap.height * texture.repeat.y;\n\t                            var cx = scaleX / sx;\n\t                            var cy = scaleY / sy;\n\t                            _context.save();\n\t                            _context.translate(v1.x, v1.y);\n\t                            if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                            _context.translate(-scaleX / 2, -scaleY / 2);\n\t                            _context.scale(cx, cy);\n\t                            _context.translate(-ox, -oy);\n\t                            _context.fillRect(ox, oy, sx, sy);\n\t                            _context.restore();\n\t                        }\n\t                    } else {\n\t                        setFillStyle(material.color.getStyle());\n\t                        _context.save();\n\t                        _context.translate(v1.x, v1.y);\n\t                        if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                        _context.scale(scaleX, -scaleY);\n\t                        _context.fillRect(-.5, -.5, 1, 1);\n\t                        _context.restore();\n\t                    }\n\t                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setFillStyle(material.color.getStyle());\n\t                    _context.save();\n\t                    _context.translate(v1.x, v1.y);\n\t                    if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                    _context.scale(scaleX, scaleY);\n\t                    material.program(_context);\n\t                    _context.restore();\n\t                }\n\t            }\n\t            function renderLine(v1, v2, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _context.beginPath();\n\t                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n\t                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n\t                if (material instanceof THREE.LineBasicMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    if (material.vertexColors !== THREE.VertexColors) {\n\t                        setStrokeStyle(material.color.getStyle());\n\t                    } else {\n\t                        var colorStyle1 = element.vertexColors[0].getStyle();\n\t                        var colorStyle2 = element.vertexColors[1].getStyle();\n\t                        if (colorStyle1 === colorStyle2) {\n\t                            setStrokeStyle(colorStyle1);\n\t                        } else {\n\t                            try {\n\t                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n\t                                grad.addColorStop(0, colorStyle1);\n\t                                grad.addColorStop(1, colorStyle2);\n\t                            } catch (exception) {\n\t                                grad = colorStyle1;\n\t                            }\n\t                            setStrokeStyle(grad);\n\t                        }\n\t                    }\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                } else if (material instanceof THREE.LineDashedMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setLineDash([ material.dashSize, material.gapSize ]);\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                    setLineDash([]);\n\t                }\n\t            }\n\t            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n\t                _this.info.render.vertices += 3;\n\t                _this.info.render.faces++;\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _v1x = v1.positionScreen.x;\n\t                _v1y = v1.positionScreen.y;\n\t                _v2x = v2.positionScreen.x;\n\t                _v2y = v2.positionScreen.y;\n\t                _v3x = v3.positionScreen.x;\n\t                _v3y = v3.positionScreen.y;\n\t                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n\t                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n\t                    _diffuseColor.copy(material.color);\n\t                    _emissiveColor.copy(material.emissive);\n\t                    if (material.vertexColors === THREE.FaceColors) {\n\t                        _diffuseColor.multiply(element.color);\n\t                    }\n\t                    _color.copy(_ambientLight);\n\t                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\t                    calculateLight(_centroid, element.normalModel, _color);\n\t                    _color.multiply(_diffuseColor).add(_emissiveColor);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n\t                    if (material.map !== null) {\n\t                        var mapping = material.map.mapping;\n\t                        if (mapping === THREE.UVMapping) {\n\t                            _uvs = element.uvs;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n\t                        }\n\t                    } else if (material.envMap !== null) {\n\t                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n\t                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n\t                            _uv1x = .5 * _normal.x + .5;\n\t                            _uv1y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n\t                            _uv2x = .5 * _normal.x + .5;\n\t                            _uv2y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n\t                            _uv3x = .5 * _normal.x + .5;\n\t                            _uv3y = .5 * _normal.y + .5;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n\t                        }\n\t                    } else {\n\t                        _color.copy(material.color);\n\t                        if (material.vertexColors === THREE.FaceColors) {\n\t                            _color.multiply(element.color);\n\t                        }\n\t                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                    }\n\t                } else if (material instanceof THREE.MeshNormalMaterial) {\n\t                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n\t                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else {\n\t                    _color.setRGB(1, 1, 1);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                }\n\t            }\n\t            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n\t                _context.beginPath();\n\t                _context.moveTo(x0, y0);\n\t                _context.lineTo(x1, y1);\n\t                _context.lineTo(x2, y2);\n\t                _context.closePath();\n\t            }\n\t            function strokePath(color, linewidth, linecap, linejoin) {\n\t                setLineWidth(linewidth);\n\t                setLineCap(linecap);\n\t                setLineJoin(linejoin);\n\t                setStrokeStyle(color.getStyle());\n\t                _context.stroke();\n\t                _elemBox.expandByScalar(linewidth * 2);\n\t            }\n\t            function fillPath(color) {\n\t                setFillStyle(color.getStyle());\n\t                _context.fill();\n\t            }\n\t            function textureToPattern(texture) {\n\t                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: texture.version\n\t                    };\n\t                }\n\t                var image = texture.image;\n\t                if (image.complete === false) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: 0\n\t                    };\n\t                }\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = image.width;\n\t                canvas.height = image.height;\n\t                var context = canvas.getContext(\"2d\");\n\t                context.setTransform(1, 0, 0, -1, 0, image.height);\n\t                context.drawImage(image, 0, 0);\n\t                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t                var repeat = \"no-repeat\";\n\t                if (repeatX === true && repeatY === true) {\n\t                    repeat = \"repeat\";\n\t                } else if (repeatX === true) {\n\t                    repeat = \"repeat-x\";\n\t                } else if (repeatY === true) {\n\t                    repeat = \"repeat-y\";\n\t                }\n\t                var pattern = _context.createPattern(canvas, repeat);\n\t                if (texture.onUpdate) texture.onUpdate(texture);\n\t                return {\n\t                    canvas: pattern,\n\t                    version: texture.version\n\t                };\n\t            }\n\t            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n\t                var pattern = _patterns[texture.id];\n\t                if (pattern === undefined || pattern.version !== texture.version) {\n\t                    pattern = textureToPattern(texture);\n\t                    _patterns[texture.id] = pattern;\n\t                }\n\t                if (pattern.canvas !== undefined) {\n\t                    setFillStyle(pattern.canvas);\n\t                } else {\n\t                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n\t                    _context.fill();\n\t                    return;\n\t                }\n\t                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n\t                u0 = (u0 + offsetX) * width;\n\t                v0 = (v0 + offsetY) * height;\n\t                u1 = (u1 + offsetX) * width;\n\t                v1 = (v1 + offsetY) * height;\n\t                u2 = (u2 + offsetX) * width;\n\t                v2 = (v2 + offsetY) * height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                if (det === 0) return;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.fill();\n\t                _context.restore();\n\t            }\n\t            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n\t                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n\t                u0 *= width;\n\t                v0 *= height;\n\t                u1 *= width;\n\t                v1 *= height;\n\t                u2 *= width;\n\t                v2 *= height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.clip();\n\t                _context.drawImage(image, 0, 0);\n\t                _context.restore();\n\t            }\n\t            function expand(v1, v2, pixels) {\n\t                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n\t                if (det === 0) return;\n\t                idet = pixels / Math.sqrt(det);\n\t                x *= idet;\n\t                y *= idet;\n\t                v2.x += x;\n\t                v2.y += y;\n\t                v1.x -= x;\n\t                v1.y -= y;\n\t            }\n\t            function setOpacity(value) {\n\t                if (_contextGlobalAlpha !== value) {\n\t                    _context.globalAlpha = value;\n\t                    _contextGlobalAlpha = value;\n\t                }\n\t            }\n\t            function setBlending(value) {\n\t                if (_contextGlobalCompositeOperation !== value) {\n\t                    if (value === THREE.NormalBlending) {\n\t                        _context.globalCompositeOperation = \"source-over\";\n\t                    } else if (value === THREE.AdditiveBlending) {\n\t                        _context.globalCompositeOperation = \"lighter\";\n\t                    } else if (value === THREE.SubtractiveBlending) {\n\t                        _context.globalCompositeOperation = \"darker\";\n\t                    } else if (value === THREE.MultiplyBlending) {\n\t                        _context.globalCompositeOperation = \"multiply\";\n\t                    }\n\t                    _contextGlobalCompositeOperation = value;\n\t                }\n\t            }\n\t            function setLineWidth(value) {\n\t                if (_contextLineWidth !== value) {\n\t                    _context.lineWidth = value;\n\t                    _contextLineWidth = value;\n\t                }\n\t            }\n\t            function setLineCap(value) {\n\t                if (_contextLineCap !== value) {\n\t                    _context.lineCap = value;\n\t                    _contextLineCap = value;\n\t                }\n\t            }\n\t            function setLineJoin(value) {\n\t                if (_contextLineJoin !== value) {\n\t                    _context.lineJoin = value;\n\t                    _contextLineJoin = value;\n\t                }\n\t            }\n\t            function setStrokeStyle(value) {\n\t                if (_contextStrokeStyle !== value) {\n\t                    _context.strokeStyle = value;\n\t                    _contextStrokeStyle = value;\n\t                }\n\t            }\n\t            function setFillStyle(value) {\n\t                if (_contextFillStyle !== value) {\n\t                    _context.fillStyle = value;\n\t                    _contextFillStyle = value;\n\t                }\n\t            }\n\t            function setLineDash(value) {\n\t                if (_contextLineDash.length !== value.length) {\n\t                    _context.setLineDash(value);\n\t                    _contextLineDash = value;\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports) {\n\t        THREE.RenderableObject = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableFace = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.v3 = new THREE.RenderableVertex();\n\t            this.normalModel = new THREE.Vector3();\n\t            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t            this.vertexNormalsLength = 0;\n\t            this.color = new THREE.Color();\n\t            this.material = null;\n\t            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableVertex = function() {\n\t            this.position = new THREE.Vector3();\n\t            this.positionWorld = new THREE.Vector3();\n\t            this.positionScreen = new THREE.Vector4();\n\t            this.visible = true;\n\t        };\n\t        THREE.RenderableVertex.prototype.copy = function(vertex) {\n\t            this.positionWorld.copy(vertex.positionWorld);\n\t            this.positionScreen.copy(vertex.positionScreen);\n\t        };\n\t        THREE.RenderableLine = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t            this.material = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableSprite = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.x = 0;\n\t            this.y = 0;\n\t            this.z = 0;\n\t            this.rotation = 0;\n\t            this.scale = new THREE.Vector2();\n\t            this.material = null;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.Projector = function() {\n\t            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n\t                objects: [],\n\t                lights: [],\n\t                elements: []\n\t            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n\t            this.projectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n\t                vector.project(camera);\n\t            };\n\t            this.unprojectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n\t                vector.unproject(camera);\n\t            };\n\t            this.pickingRay = function(vector, camera) {\n\t                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n\t            };\n\t            var RenderList = function() {\n\t                var normals = [];\n\t                var uvs = [];\n\t                var object = null;\n\t                var material = null;\n\t                var normalMatrix = new THREE.Matrix3();\n\t                function setObject(value) {\n\t                    object = value;\n\t                    material = object.material;\n\t                    normalMatrix.getNormalMatrix(object.matrixWorld);\n\t                    normals.length = 0;\n\t                    uvs.length = 0;\n\t                }\n\t                function projectVertex(vertex) {\n\t                    var position = vertex.position;\n\t                    var positionWorld = vertex.positionWorld;\n\t                    var positionScreen = vertex.positionScreen;\n\t                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n\t                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n\t                    var invW = 1 / positionScreen.w;\n\t                    positionScreen.x *= invW;\n\t                    positionScreen.y *= invW;\n\t                    positionScreen.z *= invW;\n\t                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n\t                }\n\t                function pushVertex(x, y, z) {\n\t                    _vertex = getNextVertexInPool();\n\t                    _vertex.position.set(x, y, z);\n\t                    projectVertex(_vertex);\n\t                }\n\t                function pushNormal(x, y, z) {\n\t                    normals.push(x, y, z);\n\t                }\n\t                function pushUv(x, y) {\n\t                    uvs.push(x, y);\n\t                }\n\t                function checkTriangleVisibility(v1, v2, v3) {\n\t                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n\t                    _points3[0] = v1.positionScreen;\n\t                    _points3[1] = v2.positionScreen;\n\t                    _points3[2] = v3.positionScreen;\n\t                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n\t                }\n\t                function checkBackfaceCulling(v1, v2, v3) {\n\t                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n\t                }\n\t                function pushLine(a, b) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    _line = getNextLineInPool();\n\t                    _line.id = object.id;\n\t                    _line.v1.copy(v1);\n\t                    _line.v2.copy(v2);\n\t                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n\t                    _line.renderOrder = object.renderOrder;\n\t                    _line.material = object.material;\n\t                    _renderData.elements.push(_line);\n\t                }\n\t                function pushTriangle(a, b, c) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    var v3 = _vertexPool[c];\n\t                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\t                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n\t                        _face = getNextFaceInPool();\n\t                        _face.id = object.id;\n\t                        _face.v1.copy(v1);\n\t                        _face.v2.copy(v2);\n\t                        _face.v3.copy(v3);\n\t                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                        _face.renderOrder = object.renderOrder;\n\t                        _face.normalModel.fromArray(normals, a * 3);\n\t                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\t                        for (var i = 0; i < 3; i++) {\n\t                            var normal = _face.vertexNormalsModel[i];\n\t                            normal.fromArray(normals, arguments[i] * 3);\n\t                            normal.applyMatrix3(normalMatrix).normalize();\n\t                            var uv = _face.uvs[i];\n\t                            uv.fromArray(uvs, arguments[i] * 2);\n\t                        }\n\t                        _face.vertexNormalsLength = 3;\n\t                        _face.material = object.material;\n\t                        _renderData.elements.push(_face);\n\t                    }\n\t                }\n\t                return {\n\t                    setObject: setObject,\n\t                    projectVertex: projectVertex,\n\t                    checkTriangleVisibility: checkTriangleVisibility,\n\t                    checkBackfaceCulling: checkBackfaceCulling,\n\t                    pushVertex: pushVertex,\n\t                    pushNormal: pushNormal,\n\t                    pushUv: pushUv,\n\t                    pushLine: pushLine,\n\t                    pushTriangle: pushTriangle\n\t                };\n\t            };\n\t            var renderList = new RenderList();\n\t            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n\t                _faceCount = 0;\n\t                _lineCount = 0;\n\t                _spriteCount = 0;\n\t                _renderData.elements.length = 0;\n\t                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n\t                if (camera.parent === null) camera.updateMatrixWorld();\n\t                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\t                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\t                _frustum.setFromMatrix(_viewProjectionMatrix);\n\t                _objectCount = 0;\n\t                _renderData.objects.length = 0;\n\t                _renderData.lights.length = 0;\n\t                function addObject(object) {\n\t                    _object = getNextObjectInPool();\n\t                    _object.id = object.id;\n\t                    _object.object = object;\n\t                    _vector3.setFromMatrixPosition(object.matrixWorld);\n\t                    _vector3.applyProjection(_viewProjectionMatrix);\n\t                    _object.z = _vector3.z;\n\t                    _object.renderOrder = object.renderOrder;\n\t                    _renderData.objects.push(_object);\n\t                }\n\t                scene.traverseVisible(function(object) {\n\t                    if (object instanceof THREE.Light) {\n\t                        _renderData.lights.push(object);\n\t                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line) {\n\t                        if (object.material.visible === false) return;\n\t                        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n\t                        addObject(object);\n\t                    } else if (object instanceof THREE.Sprite) {\n\t                        if (object.material.visible === false) return;\n\t                        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n\t                        addObject(object);\n\t                    }\n\t                });\n\t                if (sortObjects === true) {\n\t                    _renderData.objects.sort(painterSort);\n\t                }\n\t                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n\t                    var object = _renderData.objects[o].object;\n\t                    var geometry = object.geometry;\n\t                    renderList.setObject(object);\n\t                    _modelMatrix = object.matrixWorld;\n\t                    _vertexCount = 0;\n\t                    if (object instanceof THREE.Mesh) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            var groups = geometry.groups;\n\t                            if (attributes.position === undefined) continue;\n\t                            var positions = attributes.position.array;\n\t                            for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                            }\n\t                            if (attributes.normal !== undefined) {\n\t                                var normals = attributes.normal.array;\n\t                                for (var i = 0, l = normals.length; i < l; i += 3) {\n\t                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n\t                                }\n\t                            }\n\t                            if (attributes.uv !== undefined) {\n\t                                var uvs = attributes.uv.array;\n\t                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n\t                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n\t                                }\n\t                            }\n\t                            if (geometry.index !== null) {\n\t                                var indices = geometry.index.array;\n\t                                if (groups.length > 0) {\n\t                                    for (var o = 0; o < groups.length; o++) {\n\t                                        var group = groups[o];\n\t                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n\t                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n\t                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n\t                                    renderList.pushTriangle(i, i + 1, i + 2);\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            var vertices = geometry.vertices;\n\t                            var faces = geometry.faces;\n\t                            var faceVertexUvs = geometry.faceVertexUvs[0];\n\t                            _normalMatrix.getNormalMatrix(_modelMatrix);\n\t                            var material = object.material;\n\t                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n\t                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n\t                                var vertex = vertices[v];\n\t                                _vector3.copy(vertex);\n\t                                if (material.morphTargets === true) {\n\t                                    var morphTargets = geometry.morphTargets;\n\t                                    var morphInfluences = object.morphTargetInfluences;\n\t                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n\t                                        var influence = morphInfluences[t];\n\t                                        if (influence === 0) continue;\n\t                                        var target = morphTargets[t];\n\t                                        var targetVertex = target.vertices[v];\n\t                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n\t                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n\t                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n\t                                    }\n\t                                }\n\t                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n\t                            }\n\t                            for (var f = 0, fl = faces.length; f < fl; f++) {\n\t                                var face = faces[f];\n\t                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n\t                                if (material === undefined) continue;\n\t                                var side = material.side;\n\t                                var v1 = _vertexPool[face.a];\n\t                                var v2 = _vertexPool[face.b];\n\t                                var v3 = _vertexPool[face.c];\n\t                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n\t                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\t                                if (side !== THREE.DoubleSide) {\n\t                                    if (side === THREE.FrontSide && visible === false) continue;\n\t                                    if (side === THREE.BackSide && visible === true) continue;\n\t                                }\n\t                                _face = getNextFaceInPool();\n\t                                _face.id = object.id;\n\t                                _face.v1.copy(v1);\n\t                                _face.v2.copy(v2);\n\t                                _face.v3.copy(v3);\n\t                                _face.normalModel.copy(face.normal);\n\t                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                    _face.normalModel.negate();\n\t                                }\n\t                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                var faceVertexNormals = face.vertexNormals;\n\t                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n\t                                    var normalModel = _face.vertexNormalsModel[n];\n\t                                    normalModel.copy(faceVertexNormals[n]);\n\t                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                        normalModel.negate();\n\t                                    }\n\t                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                }\n\t                                _face.vertexNormalsLength = faceVertexNormals.length;\n\t                                var vertexUvs = faceVertexUvs[f];\n\t                                if (vertexUvs !== undefined) {\n\t                                    for (var u = 0; u < 3; u++) {\n\t                                        _face.uvs[u].copy(vertexUvs[u]);\n\t                                    }\n\t                                }\n\t                                _face.color = face.color;\n\t                                _face.material = material;\n\t                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                                _face.renderOrder = object.renderOrder;\n\t                                _renderData.elements.push(_face);\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Line) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            if (attributes.position !== undefined) {\n\t                                var positions = attributes.position.array;\n\t                                for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                                }\n\t                                if (geometry.index !== null) {\n\t                                    var indices = geometry.index.array;\n\t                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n\t                                        renderList.pushLine(indices[i], indices[i + 1]);\n\t                                    }\n\t                                } else {\n\t                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n\t                                        renderList.pushLine(i, i + 1);\n\t                                    }\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\t                            var vertices = object.geometry.vertices;\n\t                            if (vertices.length === 0) continue;\n\t                            v1 = getNextVertexInPool();\n\t                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n\t                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n\t                                v1 = getNextVertexInPool();\n\t                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n\t                                if ((v + 1) % step > 0) continue;\n\t                                v2 = _vertexPool[_vertexCount - 2];\n\t                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\t                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\t                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n\t                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\t                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\t                                    _line = getNextLineInPool();\n\t                                    _line.id = object.id;\n\t                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\t                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\t                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n\t                                    _line.renderOrder = object.renderOrder;\n\t                                    _line.material = object.material;\n\t                                    if (object.material.vertexColors === THREE.VertexColors) {\n\t                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n\t                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n\t                                    }\n\t                                    _renderData.elements.push(_line);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Sprite) {\n\t                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\t                        _vector4.applyMatrix4(_viewProjectionMatrix);\n\t                        var invW = 1 / _vector4.w;\n\t                        _vector4.z *= invW;\n\t                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n\t                            _sprite = getNextSpriteInPool();\n\t                            _sprite.id = object.id;\n\t                            _sprite.x = _vector4.x * invW;\n\t                            _sprite.y = _vector4.y * invW;\n\t                            _sprite.z = _vector4.z;\n\t                            _sprite.renderOrder = object.renderOrder;\n\t                            _sprite.object = object;\n\t                            _sprite.rotation = object.rotation;\n\t                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n\t                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n\t                            _sprite.material = object.material;\n\t                            _renderData.elements.push(_sprite);\n\t                        }\n\t                    }\n\t                }\n\t                if (sortElements === true) {\n\t                    _renderData.elements.sort(painterSort);\n\t                }\n\t                return _renderData;\n\t            };\n\t            function getNextObjectInPool() {\n\t                if (_objectCount === _objectPoolLength) {\n\t                    var object = new THREE.RenderableObject();\n\t                    _objectPool.push(object);\n\t                    _objectPoolLength++;\n\t                    _objectCount++;\n\t                    return object;\n\t                }\n\t                return _objectPool[_objectCount++];\n\t            }\n\t            function getNextVertexInPool() {\n\t                if (_vertexCount === _vertexPoolLength) {\n\t                    var vertex = new THREE.RenderableVertex();\n\t                    _vertexPool.push(vertex);\n\t                    _vertexPoolLength++;\n\t                    _vertexCount++;\n\t                    return vertex;\n\t                }\n\t                return _vertexPool[_vertexCount++];\n\t            }\n\t            function getNextFaceInPool() {\n\t                if (_faceCount === _facePoolLength) {\n\t                    var face = new THREE.RenderableFace();\n\t                    _facePool.push(face);\n\t                    _facePoolLength++;\n\t                    _faceCount++;\n\t                    return face;\n\t                }\n\t                return _facePool[_faceCount++];\n\t            }\n\t            function getNextLineInPool() {\n\t                if (_lineCount === _linePoolLength) {\n\t                    var line = new THREE.RenderableLine();\n\t                    _linePool.push(line);\n\t                    _linePoolLength++;\n\t                    _lineCount++;\n\t                    return line;\n\t                }\n\t                return _linePool[_lineCount++];\n\t            }\n\t            function getNextSpriteInPool() {\n\t                if (_spriteCount === _spritePoolLength) {\n\t                    var sprite = new THREE.RenderableSprite();\n\t                    _spritePool.push(sprite);\n\t                    _spritePoolLength++;\n\t                    _spriteCount++;\n\t                    return sprite;\n\t                }\n\t                return _spritePool[_spriteCount++];\n\t            }\n\t            function painterSort(a, b) {\n\t                if (a.renderOrder !== b.renderOrder) {\n\t                    return a.renderOrder - b.renderOrder;\n\t                } else if (a.z !== b.z) {\n\t                    return b.z - a.z;\n\t                } else if (a.id !== b.id) {\n\t                    return a.id - b.id;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            }\n\t            function clipLine(s1, s2) {\n\t                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n\t                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n\t                    return true;\n\t                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n\t                    return false;\n\t                } else {\n\t                    if (bc1near < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n\t                    } else if (bc2near < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n\t                    }\n\t                    if (bc1far < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n\t                    } else if (bc2far < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n\t                    }\n\t                    if (alpha2 < alpha1) {\n\t                        return false;\n\t                    } else {\n\t                        s1.lerp(s2, alpha1);\n\t                        s2.lerp(s1, 1 - alpha2);\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        /*!\n\t\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        var isObject = __webpack_require__(8);\n\t        function isObjectObject(o) {\n\t            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n\t        }\n\t        module.exports = function isPlainObject(o) {\n\t            var ctor, prot;\n\t            if (isObjectObject(o) === false) return false;\n\t            ctor = o.constructor;\n\t            if (typeof ctor !== \"function\") return false;\n\t            prot = ctor.prototype;\n\t            if (isObjectObject(prot) === false) return false;\n\t            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n\t                return false;\n\t            }\n\t            return true;\n\t        };\n\t    }, function(module, exports) {\n\t        /*!\n\t\t * isobject <https://github.com/jonschlinkert/isobject>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        module.exports = function isObject(val) {\n\t            return val != null && typeof val === \"object\" && !Array.isArray(val);\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        var __WEBPACK_AMD_DEFINE_RESULT__;\n\t        !function(undefined) {\n\t            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t                return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t            };\n\t            var defaultMaxListeners = 10;\n\t            function init() {\n\t                this._events = {};\n\t                if (this._conf) {\n\t                    configure.call(this, this._conf);\n\t                }\n\t            }\n\t            function configure(conf) {\n\t                if (conf) {\n\t                    this._conf = conf;\n\t                    conf.delimiter && (this.delimiter = conf.delimiter);\n\t                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t                    conf.wildcard && (this.wildcard = conf.wildcard);\n\t                    conf.newListener && (this.newListener = conf.newListener);\n\t                    if (this.wildcard) {\n\t                        this.listenerTree = {};\n\t                    }\n\t                }\n\t            }\n\t            function EventEmitter(conf) {\n\t                this._events = {};\n\t                this.newListener = false;\n\t                configure.call(this, conf);\n\t            }\n\t            function searchListenerTree(handlers, type, tree, i) {\n\t                if (!tree) {\n\t                    return [];\n\t                }\n\t                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n\t                if (i === typeLength && tree._listeners) {\n\t                    if (typeof tree._listeners === \"function\") {\n\t                        handlers && handlers.push(tree._listeners);\n\t                        return [ tree ];\n\t                    } else {\n\t                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t                            handlers && handlers.push(tree._listeners[leaf]);\n\t                        }\n\t                        return [ tree ];\n\t                    }\n\t                }\n\t                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n\t                    if (currentType === \"*\") {\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    } else if (currentType === \"**\") {\n\t                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n\t                        if (endReached && tree._listeners) {\n\t                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t                        }\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                if (branch === \"*\" || branch === \"**\") {\n\t                                    if (tree[branch]._listeners && !endReached) {\n\t                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t                                    }\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                } else if (branch === nextType) {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n\t                                } else {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                }\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    }\n\t                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n\t                }\n\t                xTree = tree[\"*\"];\n\t                if (xTree) {\n\t                    searchListenerTree(handlers, type, xTree, i + 1);\n\t                }\n\t                xxTree = tree[\"**\"];\n\t                if (xxTree) {\n\t                    if (i < typeLength) {\n\t                        if (xxTree._listeners) {\n\t                            searchListenerTree(handlers, type, xxTree, typeLength);\n\t                        }\n\t                        for (branch in xxTree) {\n\t                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n\t                                if (branch === nextType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n\t                                } else if (branch === currentType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n\t                                } else {\n\t                                    isolatedBranch = {};\n\t                                    isolatedBranch[branch] = xxTree[branch];\n\t                                    searchListenerTree(handlers, type, {\n\t                                        \"**\": isolatedBranch\n\t                                    }, i + 1);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (xxTree._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree, typeLength);\n\t                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n\t                    }\n\t                }\n\t                return listeners;\n\t            }\n\t            function growListenerTree(type, listener) {\n\t                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                for (var i = 0, len = type.length; i + 1 < len; i++) {\n\t                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n\t                        return;\n\t                    }\n\t                }\n\t                var tree = this.listenerTree;\n\t                var name = type.shift();\n\t                while (name) {\n\t                    if (!tree[name]) {\n\t                        tree[name] = {};\n\t                    }\n\t                    tree = tree[name];\n\t                    if (type.length === 0) {\n\t                        if (!tree._listeners) {\n\t                            tree._listeners = listener;\n\t                        } else if (typeof tree._listeners === \"function\") {\n\t                            tree._listeners = [ tree._listeners, listener ];\n\t                        } else if (isArray(tree._listeners)) {\n\t                            tree._listeners.push(listener);\n\t                            if (!tree._listeners.warned) {\n\t                                var m = defaultMaxListeners;\n\t                                if (typeof this._events.maxListeners !== \"undefined\") {\n\t                                    m = this._events.maxListeners;\n\t                                }\n\t                                if (m > 0 && tree._listeners.length > m) {\n\t                                    tree._listeners.warned = true;\n\t                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n\t                                    console.trace();\n\t                                }\n\t                            }\n\t                        }\n\t                        return true;\n\t                    }\n\t                    name = type.shift();\n\t                }\n\t                return true;\n\t            }\n\t            EventEmitter.prototype.delimiter = \".\";\n\t            EventEmitter.prototype.setMaxListeners = function(n) {\n\t                this._events || init.call(this);\n\t                this._events.maxListeners = n;\n\t                if (!this._conf) this._conf = {};\n\t                this._conf.maxListeners = n;\n\t            };\n\t            EventEmitter.prototype.event = \"\";\n\t            EventEmitter.prototype.once = function(event, fn) {\n\t                this.many(event, 1, fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.many = function(event, ttl, fn) {\n\t                var self = this;\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"many only accepts instances of Function\");\n\t                }\n\t                function listener() {\n\t                    if (--ttl === 0) {\n\t                        self.off(event, listener);\n\t                    }\n\t                    fn.apply(this, arguments);\n\t                }\n\t                listener._origin = fn;\n\t                this.on(event, listener);\n\t                return self;\n\t            };\n\t            EventEmitter.prototype.emit = function() {\n\t                this._events || init.call(this);\n\t                var type = arguments[0];\n\t                if (type === \"newListener\" && !this.newListener) {\n\t                    if (!this._events.newListener) {\n\t                        return false;\n\t                    }\n\t                }\n\t                if (this._all) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    for (i = 0, l = this._all.length; i < l; i++) {\n\t                        this.event = type;\n\t                        this._all[i].apply(this, args);\n\t                    }\n\t                }\n\t                if (type === \"error\") {\n\t                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n\t                        if (arguments[1] instanceof Error) {\n\t                            throw arguments[1];\n\t                        } else {\n\t                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t                        }\n\t                        return false;\n\t                    }\n\t                }\n\t                var handler;\n\t                if (this.wildcard) {\n\t                    handler = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t                } else {\n\t                    handler = this._events[type];\n\t                }\n\t                if (typeof handler === \"function\") {\n\t                    this.event = type;\n\t                    if (arguments.length === 1) {\n\t                        handler.call(this);\n\t                    } else if (arguments.length > 1) switch (arguments.length) {\n\t                      case 2:\n\t                        handler.call(this, arguments[1]);\n\t                        break;\n\t\n\t                      case 3:\n\t                        handler.call(this, arguments[1], arguments[2]);\n\t                        break;\n\t\n\t                      default:\n\t                        var l = arguments.length;\n\t                        var args = new Array(l - 1);\n\t                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                        handler.apply(this, args);\n\t                    }\n\t                    return true;\n\t                } else if (handler) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    var listeners = handler.slice();\n\t                    for (var i = 0, l = listeners.length; i < l; i++) {\n\t                        this.event = type;\n\t                        listeners[i].apply(this, args);\n\t                    }\n\t                    return listeners.length > 0 || !!this._all;\n\t                } else {\n\t                    return !!this._all;\n\t                }\n\t            };\n\t            EventEmitter.prototype.on = function(type, listener) {\n\t                if (typeof type === \"function\") {\n\t                    this.onAny(type);\n\t                    return this;\n\t                }\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"on only accepts instances of Function\");\n\t                }\n\t                this._events || init.call(this);\n\t                this.emit(\"newListener\", type, listener);\n\t                if (this.wildcard) {\n\t                    growListenerTree.call(this, type, listener);\n\t                    return this;\n\t                }\n\t                if (!this._events[type]) {\n\t                    this._events[type] = listener;\n\t                } else if (typeof this._events[type] === \"function\") {\n\t                    this._events[type] = [ this._events[type], listener ];\n\t                } else if (isArray(this._events[type])) {\n\t                    this._events[type].push(listener);\n\t                    if (!this._events[type].warned) {\n\t                        var m = defaultMaxListeners;\n\t                        if (typeof this._events.maxListeners !== \"undefined\") {\n\t                            m = this._events.maxListeners;\n\t                        }\n\t                        if (m > 0 && this._events[type].length > m) {\n\t                            this._events[type].warned = true;\n\t                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n\t                            console.trace();\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.onAny = function(fn) {\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"onAny only accepts instances of Function\");\n\t                }\n\t                if (!this._all) {\n\t                    this._all = [];\n\t                }\n\t                this._all.push(fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t            EventEmitter.prototype.off = function(type, listener) {\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"removeListener only takes instances of Function\");\n\t                }\n\t                var handlers, leafs = [];\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    handlers = this._events[type];\n\t                    leafs.push({\n\t                        _listeners: handlers\n\t                    });\n\t                }\n\t                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                    var leaf = leafs[iLeaf];\n\t                    handlers = leaf._listeners;\n\t                    if (isArray(handlers)) {\n\t                        var position = -1;\n\t                        for (var i = 0, length = handlers.length; i < length; i++) {\n\t                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n\t                                position = i;\n\t                                break;\n\t                            }\n\t                        }\n\t                        if (position < 0) {\n\t                            continue;\n\t                        }\n\t                        if (this.wildcard) {\n\t                            leaf._listeners.splice(position, 1);\n\t                        } else {\n\t                            this._events[type].splice(position, 1);\n\t                        }\n\t                        if (handlers.length === 0) {\n\t                            if (this.wildcard) {\n\t                                delete leaf._listeners;\n\t                            } else {\n\t                                delete this._events[type];\n\t                            }\n\t                        }\n\t                        return this;\n\t                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n\t                        if (this.wildcard) {\n\t                            delete leaf._listeners;\n\t                        } else {\n\t                            delete this._events[type];\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.offAny = function(fn) {\n\t                var i = 0, l = 0, fns;\n\t                if (fn && this._all && this._all.length > 0) {\n\t                    fns = this._all;\n\t                    for (i = 0, l = fns.length; i < l; i++) {\n\t                        if (fn === fns[i]) {\n\t                            fns.splice(i, 1);\n\t                            return this;\n\t                        }\n\t                    }\n\t                } else {\n\t                    this._all = [];\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t            EventEmitter.prototype.removeAllListeners = function(type) {\n\t                if (arguments.length === 0) {\n\t                    !this._events || init.call(this);\n\t                    return this;\n\t                }\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                        var leaf = leafs[iLeaf];\n\t                        leaf._listeners = null;\n\t                    }\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    this._events[type] = null;\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.listeners = function(type) {\n\t                if (this.wildcard) {\n\t                    var handlers = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t                    return handlers;\n\t                }\n\t                this._events || init.call(this);\n\t                if (!this._events[type]) this._events[type] = [];\n\t                if (!isArray(this._events[type])) {\n\t                    this._events[type] = [ this._events[type] ];\n\t                }\n\t                return this._events[type];\n\t            };\n\t            EventEmitter.prototype.listenersAny = function() {\n\t                if (this._all) {\n\t                    return this._all;\n\t                } else {\n\t                    return [];\n\t                }\n\t            };\n\t            if (true) {\n\t                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t                    return EventEmitter;\n\t                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t            } else if (typeof exports === \"object\") {\n\t                exports.EventEmitter2 = EventEmitter;\n\t            } else {\n\t                window.EventEmitter2 = EventEmitter;\n\t            }\n\t        }();\n\t    }, function(module, exports) {\n\t        module.exports = {\n\t            Promise: window[\"Promise\"]\n\t        };\n\t    }, function(module, exports) {\n\t        (function() {\n\t            var ResizeSensor = function(element, callback) {\n\t                function EventQueue() {\n\t                    this.q = [];\n\t                    this.add = function(ev) {\n\t                        this.q.push(ev);\n\t                    };\n\t                    var i, j;\n\t                    this.call = function() {\n\t                        for (i = 0, j = this.q.length; i < j; i++) {\n\t                            this.q[i].call();\n\t                        }\n\t                    };\n\t                }\n\t                function getComputedStyle(element, prop) {\n\t                    if (element.currentStyle) {\n\t                        return element.currentStyle[prop];\n\t                    } else if (window.getComputedStyle) {\n\t                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t                    } else {\n\t                        return element.style[prop];\n\t                    }\n\t                }\n\t                function attachResizeEvent(element, resized) {\n\t                    if (!element.resizedAttached) {\n\t                        element.resizedAttached = new EventQueue();\n\t                        element.resizedAttached.add(resized);\n\t                    } else if (element.resizedAttached) {\n\t                        element.resizedAttached.add(resized);\n\t                        return;\n\t                    }\n\t                    element.resizeSensor = document.createElement(\"div\");\n\t                    element.resizeSensor.className = \"resize-sensor\";\n\t                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n\t                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n\t                    element.resizeSensor.style.cssText = style;\n\t                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n\t                    element.appendChild(element.resizeSensor);\n\t                    if (!{\n\t                        fixed: 1,\n\t                        absolute: 1\n\t                    }[getComputedStyle(element, \"position\")]) {\n\t                        element.style.position = \"relative\";\n\t                    }\n\t                    var expand = element.resizeSensor.childNodes[0];\n\t                    var expandChild = expand.childNodes[0];\n\t                    var shrink = element.resizeSensor.childNodes[1];\n\t                    var shrinkChild = shrink.childNodes[0];\n\t                    var lastWidth, lastHeight;\n\t                    var reset = function() {\n\t                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n\t                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n\t                        expand.scrollLeft = expand.scrollWidth;\n\t                        expand.scrollTop = expand.scrollHeight;\n\t                        shrink.scrollLeft = shrink.scrollWidth;\n\t                        shrink.scrollTop = shrink.scrollHeight;\n\t                        lastWidth = element.offsetWidth;\n\t                        lastHeight = element.offsetHeight;\n\t                    };\n\t                    reset();\n\t                    var changed = function() {\n\t                        if (element.resizedAttached) {\n\t                            element.resizedAttached.call();\n\t                        }\n\t                    };\n\t                    var addEvent = function(el, name, cb) {\n\t                        if (el.attachEvent) {\n\t                            el.attachEvent(\"on\" + name, cb);\n\t                        } else {\n\t                            el.addEventListener(name, cb);\n\t                        }\n\t                    };\n\t                    var onScroll = function() {\n\t                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                            changed();\n\t                        }\n\t                        reset();\n\t                    };\n\t                    addEvent(expand, \"scroll\", onScroll);\n\t                    addEvent(shrink, \"scroll\", onScroll);\n\t                }\n\t                var elementType = Object.prototype.toString.call(element);\n\t                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n\t                if (isCollectionTyped) {\n\t                    var i = 0, j = element.length;\n\t                    for (;i < j; i++) {\n\t                        attachResizeEvent(element[i], callback);\n\t                    }\n\t                } else {\n\t                    attachResizeEvent(element, callback);\n\t                }\n\t                this.detach = function() {\n\t                    if (isCollectionTyped) {\n\t                        var i = 0, j = element.length;\n\t                        for (;i < j; i++) {\n\t                            ResizeSensor.detach(element[i]);\n\t                        }\n\t                    } else {\n\t                        ResizeSensor.detach(element);\n\t                    }\n\t                };\n\t            };\n\t            ResizeSensor.detach = function(element) {\n\t                if (element.resizeSensor) {\n\t                    element.removeChild(element.resizeSensor);\n\t                    delete element.resizeSensor;\n\t                    delete element.resizedAttached;\n\t                }\n\t            };\n\t            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n\t                module.exports = ResizeSensor;\n\t            } else {\n\t                window.ResizeSensor = ResizeSensor;\n\t            }\n\t        })();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Widget_1 = __webpack_require__(17);\n\t        var TrendsManager_1 = __webpack_require__(18);\n\t        var Screen_1 = __webpack_require__(19);\n\t        var AxisMarks_1 = __webpack_require__(20);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var deps_1 = __webpack_require__(3);\n\t        var CHART_STATE_EVENTS = {\n\t            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n\t            READY: \"ready\",\n\t            DESTROY: \"destroy\",\n\t            CHANGE: \"change\",\n\t            TREND_CHANGE: \"trendChange\",\n\t            TRENDS_CHANGE: \"trendsChange\",\n\t            ZOOM: \"zoom\",\n\t            RESIZE: \"resize\",\n\t            SCROLL: \"scroll\",\n\t            SCROLL_STOP: \"scrollStop\",\n\t            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n\t        };\n\t        var ChartState = function() {\n\t            function ChartState(initialState, widgetsClasses, plugins) {\n\t                if (widgetsClasses === void 0) {\n\t                    widgetsClasses = {};\n\t                }\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.data = {\n\t                    prevState: {},\n\t                    $el: null,\n\t                    zoom: 0,\n\t                    xAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n\t                            from: 0,\n\t                            to: 0,\n\t                            scroll: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 0,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 0,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 100,\n\t                        autoScroll: true,\n\t                        marks: []\n\t                    },\n\t                    yAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n\t                            from: 0,\n\t                            to: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 5,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 5,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 50,\n\t                        marks: []\n\t                    },\n\t                    animations: {\n\t                        enabled: true,\n\t                        trendChangeSpeed: .5,\n\t                        trendChangeEase: void 0,\n\t                        zoomSpeed: .25,\n\t                        zoomEase: void 0,\n\t                        scrollSpeed: .5,\n\t                        scrollEase: Linear.easeNone,\n\t                        autoScrollSpeed: 1,\n\t                        autoScrollEase: Linear.easeNone\n\t                    },\n\t                    autoRender: {\n\t                        enabled: true,\n\t                        fps: 0\n\t                    },\n\t                    autoResize: true,\n\t                    renderer: \"WebGLRenderer\",\n\t                    autoScroll: true,\n\t                    controls: {\n\t                        enabled: true\n\t                    },\n\t                    trendDefaultState: {\n\t                        enabled: true,\n\t                        type: Trend_1.TREND_TYPE.LINE,\n\t                        data: [],\n\t                        maxSegmentLength: 1e3,\n\t                        lineWidth: 2,\n\t                        lineColor: 16777215,\n\t                        hasBackground: false,\n\t                        backgroundColor: \"rgba(#5273BD, 0.15)\",\n\t                        hasBeacon: false,\n\t                        settingsForTypes: {\n\t                            CANDLE: {\n\t                                minSegmentLengthInPx: 20,\n\t                                maxSegmentLengthInPx: 40\n\t                            },\n\t                            LINE: {\n\t                                minSegmentLengthInPx: 2,\n\t                                maxSegmentLengthInPx: 10\n\t                            }\n\t                        }\n\t                    },\n\t                    cursor: {\n\t                        dragMode: false,\n\t                        x: 0,\n\t                        y: 0\n\t                    },\n\t                    backgroundColor: 0,\n\t                    backgroundOpacity: 1,\n\t                    showStats: false,\n\t                    pluginsState: {},\n\t                    eventEmitterMaxListeners: 20,\n\t                    maxVisibleSegments: 1280\n\t                };\n\t                this.widgetsClasses = {};\n\t                this.plugins = {};\n\t                this.isReady = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n\t                this.widgetsClasses = widgetsClasses;\n\t                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n\t                initialState.trends = this.trendsManager.calculatedOptions;\n\t                initialState = this.installPlugins(plugins, initialState);\n\t                this.setState(initialState);\n\t                this.setState({\n\t                    computedData: this.getComputedData()\n\t                });\n\t                this.savePrevState();\n\t                this.screen = new Screen_1.Screen(this);\n\t                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n\t                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n\t                this.initListeners();\n\t                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\t                this.isReady = true;\n\t                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t            }\n\t            ChartState.prototype.destroy = function() {\n\t                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t                this.ee.removeAllListeners();\n\t                this.data = {};\n\t            };\n\t            ChartState.prototype.onDestroy = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t            };\n\t            ChartState.prototype.onInitialStateApplied = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t            };\n\t            ChartState.prototype.onReady = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t            };\n\t            ChartState.prototype.onChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendsChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onScrollStop = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t            };\n\t            ChartState.prototype.onScroll = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t            };\n\t            ChartState.prototype.onZoom = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t            };\n\t            ChartState.prototype.onResize = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t            };\n\t            ChartState.prototype.onPluginsStateChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t            };\n\t            ChartState.prototype.getTrend = function(trendName) {\n\t                return this.trendsManager.getTrend(trendName);\n\t            };\n\t            ChartState.prototype.setState = function(newState, eventData, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var stateData = this.data;\n\t                var changedProps = {};\n\t                for (var key in newState) {\n\t                    if (stateData[key] !== newState[key]) {\n\t                        changedProps[key] = newState[key];\n\t                    }\n\t                }\n\t                this.savePrevState(changedProps);\n\t                var trendsData = {};\n\t                if (newState.trends) for (var trendName in newState.trends) {\n\t                    var trendOptions = newState.trends[trendName];\n\t                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t                    delete trendOptions.data;\n\t                }\n\t                var newStateContainsData = Object.keys(trendsData).length > 0;\n\t                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n\t                if (newStateContainsData) for (var trendName in trendsData) {\n\t                    this.data.trends[trendName].data = trendsData[trendName];\n\t                }\n\t                if (silent) return;\n\t                var recalculateResult = this.recalculateState(changedProps);\n\t                changedProps = recalculateResult.changedProps;\n\t                this.emitChangedStateEvents(changedProps, eventData);\n\t            };\n\t            ChartState.prototype.recalculateState = function(changedProps) {\n\t                var data = this.data;\n\t                var patch = {};\n\t                var actualData = Utils_1.Utils.deepMerge({}, data);\n\t                if (changedProps.widgets || !data.widgets) {\n\t                    patch.widgets = {};\n\t                    var widgetsOptions = data.widgets || {};\n\t                    for (var widgetName in this.widgetsClasses) {\n\t                        var WidgetClass = this.widgetsClasses[widgetName];\n\t                        var userOptions = widgetsOptions[widgetName] || {};\n\t                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n\t                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n\t                    }\n\t                }\n\t                var cursorOptions = changedProps.cursor;\n\t                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t                if (isMouseDrag) {\n\t                    var oldX = data.prevState.cursor.x;\n\t                    var currentX = cursorOptions.x;\n\t                    var currentScroll = data.xAxis.range.scroll;\n\t                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t                    patch.xAxis = {\n\t                        range: {\n\t                            scroll: currentScroll + deltaXVal\n\t                        }\n\t                    };\n\t                    actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                        xAxis: patch.xAxis\n\t                    });\n\t                }\n\t                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\t                var scrollXChanged = false;\n\t                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateXAxis) {\n\t                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t                    if (xAxisPatch) {\n\t                        scrollXChanged = true;\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateYAxis) {\n\t                    var yAxisPatch = this.recalculateYAxis(actualData);\n\t                    if (yAxisPatch) {\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                this.savePrevState(patch);\n\t                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n\t                patch.computedData = this.getComputedData(allChangedProps);\n\t                this.savePrevState(patch);\n\t                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n\t                return {\n\t                    changedProps: allChangedProps,\n\t                    patch: patch\n\t                };\n\t            };\n\t            ChartState.prototype.getComputedData = function(changedProps) {\n\t                var computeAll = !changedProps;\n\t                var computedData = {};\n\t                if (computeAll || changedProps.trends && this.trendsManager) {\n\t                    computedData.trends = {\n\t                        maxXVal: this.trendsManager.getEndXVal(),\n\t                        minXVal: this.trendsManager.getStartXVal()\n\t                    };\n\t                }\n\t                return computedData;\n\t            };\n\t            ChartState.prototype.savePrevState = function(changedProps) {\n\t                if (!changedProps) changedProps = this.data;\n\t                var prevState = this.data.prevState;\n\t                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n\t            };\n\t            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n\t                var prevState = this.data.prevState;\n\t                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\t                for (var key in changedProps) {\n\t                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n\t                }\n\t                if (!this.isReady) return;\n\t                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n\t                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\t                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n\t                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\t                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n\t                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\t                var resizeEventNeeded = changedProps.width || changedProps.height;\n\t                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\t                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n\t                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t            };\n\t            ChartState.prototype.installPlugins = function(plugins, initialState) {\n\t                var _this = this;\n\t                initialState.pluginsState = {};\n\t                plugins.forEach(function(plugin) {\n\t                    var PluginClass = plugin.constructor;\n\t                    var pluginName = PluginClass.NAME;\n\t                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n\t                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n\t                    });\n\t                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n\t                    _this.plugins[pluginName] = plugin;\n\t                    plugin.setupChartState(_this);\n\t                });\n\t                return initialState;\n\t            };\n\t            ChartState.prototype.getPlugin = function(pluginName) {\n\t                return this.plugins[pluginName];\n\t            };\n\t            ChartState.prototype.initListeners = function() {\n\t                var _this = this;\n\t                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n\t                    _this.handleTrendsChange(changedTrends, newData);\n\t                });\n\t            };\n\t            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n\t                for (var trendName in changedTrends) {\n\t                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t                }\n\t            };\n\t            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n\t                var axisRange = actualData.xAxis.range;\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var isInitialize = axisRange.zeroVal == void 0;\n\t                var zeroVal, scaleFactor;\n\t                var zoom = axisRange.zoom;\n\t                if (axisRange.isMirrorMode) {\n\t                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n\t                }\n\t                if (isInitialize) {\n\t                    zeroVal = axisRange.from;\n\t                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                } else {\n\t                    zeroVal = axisRange.zeroVal;\n\t                    scaleFactor = axisRange.scaleFactor;\n\t                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n\t                        if (changedProps.xAxis.range.zoom) {\n\t                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t                        }\n\t                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                        patch.range.scroll = axisRange.from - zeroVal;\n\t                        patch.range.zoom = currentScaleFactor / scaleFactor;\n\t                        return patch;\n\t                    }\n\t                }\n\t                do {\n\t                    var from = zeroVal + axisRange.scroll;\n\t                    var to = from + actualData.width / (scaleFactor * zoom);\n\t                    var rangeLength = to - from;\n\t                    var needToRecalculateZoom = false;\n\t                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n\t                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n\t                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t                    if (needToRecalculateZoom) {\n\t                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n\t                        var zoom = zoom * fixScale;\n\t                        patch.range.zoom = zoom;\n\t                    }\n\t                } while (needToRecalculateZoom);\n\t                patch.range.from = from;\n\t                patch.range.to = to;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.recalculateYAxis = function(actualData) {\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var yAxisRange = actualData.yAxis.range;\n\t                var isInitialize = yAxisRange.scaleFactor == void 0;\n\t                var trends = this.trendsManager;\n\t                var trendsEndXVal = trends.getEndXVal();\n\t                var trendsStartXVal = trends.getStartXVal();\n\t                var xRange = actualData.xAxis.range;\n\t                var xFrom = xRange.from, xTo = xRange.to;\n\t                var xRangeLength = xTo - xFrom;\n\t                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n\t                if (xTo > trendsEndXVal) {\n\t                    xTo = trendsEndXVal;\n\t                    xFrom = xTo - xRangeLength;\n\t                } else if (xFrom < trendsStartXVal) {\n\t                    xFrom = trendsStartXVal;\n\t                    xTo = xFrom + xRangeLength;\n\t                }\n\t                var maxY = trends.getMaxYVal(xFrom, xTo);\n\t                var minY = trends.getMinYVal(xFrom, xTo);\n\t                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n\t                    if (trendLastY > maxY) maxY = trendLastY;\n\t                    if (trendLastY < minY) minY = trendLastY;\n\t                }\n\t                if (yAxisRange.isMirrorMode) {\n\t                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n\t                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t                }\n\t                var margin = yAxisRange.margin;\n\t                var padding = {\n\t                    start: yAxisRange.padding.start + margin.start,\n\t                    end: yAxisRange.padding.end + margin.end\n\t                };\n\t                if (padding.end + padding.start >= actualData.height) {\n\t                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n\t                }\n\t                var rangeLength = maxY - minY;\n\t                var paddingTopInPercents = padding.end / actualData.height;\n\t                var paddingBottomInPercents = padding.start / actualData.height;\n\t                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t                if (isInitialize) {\n\t                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t                    scaleFactor = actualData.height / (toVal - fromVal);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                    needToZoom = true;\n\t                } else {\n\t                    scaleFactor = yAxisRange.scaleFactor;\n\t                    zeroVal = yAxisRange.zeroVal;\n\t                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n\t                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n\t                }\n\t                if (!needToZoom) return null;\n\t                scroll = fromVal - zeroVal;\n\t                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n\t                var currentAxisRange = this.data.yAxis.range;\n\t                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.zoom = function(zoomValue, origin) {\n\t                var _this = this;\n\t                if (origin === void 0) {\n\t                    origin = .5;\n\t                }\n\t                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n\t                var newZoom = zoom * zoomValue;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                var nextRange = this.data.width / (scaleFactor * newZoom);\n\t                var newScroll = scroll + (currentRange - nextRange) * origin;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            zoom: newZoom,\n\t                            scroll: newScroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.zoomToRange = function(range, origin) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                return this.zoom(currentRange / range, origin);\n\t            };\n\t            ChartState.prototype.scrollToEnd = function() {\n\t                var _this = this;\n\t                var state = this.data;\n\t                var endXVal = this.trendsManager.getEndXVal();\n\t                var range = state.xAxis.range;\n\t                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            scroll: scroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getValueOnXAxis = function(x) {\n\t                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.getValueByScreenX = function(x) {\n\t                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.getValueByScreenY = function(y) {\n\t                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByYAxis(y);\n\t            };\n\t            ChartState.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenYByValue = function(yVal) {\n\t                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            ChartState.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            ChartState.prototype.getScreenLeftVal = function() {\n\t                return this.getValueByScreenX(0);\n\t            };\n\t            ChartState.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.data.width);\n\t            };\n\t            ChartState.prototype.getPaddingRight = function() {\n\t                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n\t            };\n\t            return ChartState;\n\t        }();\n\t        exports.ChartState = ChartState;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendSegmentsManager_1 = __webpack_require__(15);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var deps_1 = __webpack_require__(3);\n\t        var EVENTS = {\n\t            CHANGE: \"Change\",\n\t            PREPEND_REQUEST: \"prependRequest\"\n\t        };\n\t        (function(TREND_TYPE) {\n\t            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n\t            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n\t        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n\t        var TREND_TYPE = exports.TREND_TYPE;\n\t        var Trend = function() {\n\t            function Trend(chartState, trendName, initialState) {\n\t                this.minXVal = Infinity;\n\t                this.minYVal = Infinity;\n\t                this.maxXVal = -Infinity;\n\t                this.maxYVal = -Infinity;\n\t                var options = initialState.trends[trendName];\n\t                this.name = trendName;\n\t                this.chartState = chartState;\n\t                this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.data.trendDefaultState, options);\n\t                this.calculatedOptions.name = trendName;\n\t                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t                this.calculatedOptions.dataset = [];\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvents();\n\t            }\n\t            Trend.prototype.onInitialStateApplied = function() {\n\t                this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\n\t            };\n\t            Trend.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var chartState = this.chartState;\n\t                chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateApplied();\n\t                });\n\t                chartState.onScrollStop(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onZoom(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n\t                });\n\t                chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            Trend.prototype.getCalculatedOptions = function() {\n\t                return this.calculatedOptions;\n\t            };\n\t            Trend.prototype.appendData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData());\n\t                var updatedTrendData = options.data.concat(newData);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.prependData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData(), true);\n\t                var updatedTrendData = newData.concat(options.data);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.changeData = function(allData, newData) {\n\t                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n\t                    var item = newData_1[_i];\n\t                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t                }\n\t                var options = this.getOptions();\n\t                var statePatch = {\n\t                    trends: (_a = {}, _a[options.name] = {\n\t                        data: allData\n\t                    }, _a)\n\t                };\n\t                this.chartState.setState(statePatch, newData);\n\t                var _a;\n\t            };\n\t            Trend.prototype.getData = function(fromX, toX) {\n\t                var data = this.getOptions().data;\n\t                if (fromX == void 0 && toX == void 0) return data;\n\t                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t                toX = toX !== void 0 ? toX : data[data.length].xVal;\n\t                var filteredData = [];\n\t                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n\t                    var item = data_1[_i];\n\t                    if (item.xVal < fromX) continue;\n\t                    if (item.xVal > toX) break;\n\t                    filteredData.push(item);\n\t                }\n\t                return filteredData;\n\t            };\n\t            Trend.prototype.getFirstItem = function() {\n\t                return this.getOptions().data[0];\n\t            };\n\t            Trend.prototype.getLastItem = function() {\n\t                var data = this.getOptions().data;\n\t                return data[data.length - 1];\n\t            };\n\t            Trend.prototype.getOptions = function() {\n\t                return this.chartState.data.trends[this.name];\n\t            };\n\t            Trend.prototype.setOptions = function(options) {\n\t                this.chartState.setState({\n\t                    trends: (_a = {}, _a[this.name] = options, _a)\n\t                });\n\t                var _a;\n\t            };\n\t            Trend.prototype.onPrependRequest = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.CHANGE, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onDataChange = function(cb) {\n\t                var _this = this;\n\t                var onChangeCb = function(changedOptions, newData) {\n\t                    if (newData) cb(newData);\n\t                };\n\t                this.ee.on(EVENTS.CHANGE, onChangeCb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n\t                };\n\t            };\n\t            Trend.prototype.checkForPrependRequest = function() {\n\t                var _this = this;\n\t                if (this.prependRequest) return;\n\t                var chartState = this.chartState;\n\t                var minXVal = chartState.data.computedData.trends.minXVal;\n\t                var minScreenX = chartState.getScreenXByValue(minXVal);\n\t                var needToRequest = minScreenX > 0;\n\t                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var requestedDataLength = to - from;\n\t                if (!needToRequest) return;\n\t                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n\t                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t                });\n\t                this.prependRequest.then(function(newData) {\n\t                    _this.prependData(newData);\n\t                    _this.prependRequest = null;\n\t                }, function() {\n\t                    _this.prependRequest = null;\n\t                });\n\t            };\n\t            Trend.prepareData = function(newData, currentData, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var data = [];\n\t                if (typeof newData[0] == \"number\") {\n\t                    currentData = currentData || [];\n\t                    var initialItem = void 0;\n\t                    var xVal = void 0;\n\t                    if (isPrepend) {\n\t                        initialItem = currentData[0];\n\t                        xVal = initialItem.xVal - newData.length;\n\t                    } else {\n\t                        initialItem = currentData[currentData.length - 1];\n\t                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n\t                    }\n\t                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n\t                        var yVal = _a[_i];\n\t                        data.push({\n\t                            xVal: xVal,\n\t                            yVal: yVal,\n\t                            id: Utils_1.Utils.getUid()\n\t                        });\n\t                        xVal++;\n\t                    }\n\t                } else {\n\t                    data = newData;\n\t                }\n\t                return data;\n\t            };\n\t            return Trend;\n\t        }();\n\t        exports.Trend = Trend;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        function deepmerge(target, src, mergeArrays) {\n\t            if (mergeArrays === void 0) {\n\t                mergeArrays = true;\n\t            }\n\t            var array = Array.isArray(src);\n\t            var dst = array && [] || {};\n\t            if (array) {\n\t                target = target || [];\n\t                if (mergeArrays) {\n\t                    dst = dst.concat(target);\n\t                }\n\t                src.forEach(function(e, i) {\n\t                    if (typeof dst[i] === \"undefined\") {\n\t                        dst[i] = e;\n\t                    } else if (typeof e === \"object\") {\n\t                        dst[i] = deepmerge(target[i], e, mergeArrays);\n\t                    } else {\n\t                        if (target.indexOf(e) === -1) {\n\t                            dst.push(e);\n\t                        }\n\t                    }\n\t                });\n\t            } else {\n\t                if (target && typeof target === \"object\") {\n\t                    Object.keys(target).forEach(function(key) {\n\t                        dst[key] = target[key];\n\t                    });\n\t                }\n\t                Object.keys(src).forEach(function(key) {\n\t                    if (typeof src[key] !== \"object\" || !src[key]) {\n\t                        dst[key] = src[key];\n\t                    } else {\n\t                        if (!target[key]) {\n\t                            dst[key] = src[key];\n\t                        } else {\n\t                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t            return dst;\n\t        }\n\t        var Utils = function() {\n\t            function Utils() {}\n\t            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n\t                return deepmerge(obj1, obj2, mergeArrays);\n\t            };\n\t            Utils.deepCopy = function(obj) {\n\t                return JSON.parse(JSON.stringify(obj));\n\t            };\n\t            Utils.toFixed = function(num, digitsCount) {\n\t                var maxDigits = 15;\n\t                var result = \"\";\n\t                var intVal = Math.floor(num);\n\t                var intStr = intVal.toString();\n\t                var lengthDiff = digitsCount - intStr.length;\n\t                if (lengthDiff > 0) {\n\t                    result = \"0\".repeat(lengthDiff) + intStr;\n\t                } else {\n\t                    result = intStr;\n\t                }\n\t                var afterPointDigitsCount = maxDigits - intStr.length;\n\t                var afterPointStr = num.toString().split(\".\")[1];\n\t                if (afterPointStr) {\n\t                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n\t                }\n\t                return result;\n\t            };\n\t            Utils.bindEvent = function() {};\n\t            Utils.createTexture = function(width, height, fn) {\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = width;\n\t                canvas.height = height;\n\t                var ctx = canvas.getContext(\"2d\");\n\t                fn(ctx);\n\t                var texture = new THREE.Texture(canvas);\n\t                texture.needsUpdate = true;\n\t                return texture;\n\t            };\n\t            Utils.createPixelPerfectTexture = function(width, height, fn) {\n\t                var texture = this.createTexture(width, height, fn);\n\t                texture.minFilter = THREE.NearestFilter;\n\t                return texture;\n\t            };\n\t            Utils.error = function(msg) {\n\t                console.error(\"Chart error: \" + msg);\n\t                throw \"Chart: \" + msg;\n\t            };\n\t            Utils.warn = function(msg) {\n\t                console.warn(\"Chart warning: \" + msg);\n\t            };\n\t            Utils.getUid = function() {\n\t                return this.currentId++;\n\t            };\n\t            Utils.getDistance = function(num1, num2) {\n\t                return Math.max(num1, num2) - Math.min(num1, num2);\n\t            };\n\t            Utils.binarySearchClosestInd = function(arr, num, key) {\n\t                var mid;\n\t                var lo = 0;\n\t                var hi = arr.length - 1;\n\t                while (hi - lo > 1) {\n\t                    mid = Math.floor((lo + hi) / 2);\n\t                    if (arr[mid][key] < num) {\n\t                        lo = mid;\n\t                    } else {\n\t                        hi = mid;\n\t                    }\n\t                }\n\t                if (num - arr[lo][key] <= arr[hi][key] - num) {\n\t                    return lo;\n\t                }\n\t                return hi;\n\t            };\n\t            Utils.binarySearchClosest = function(arr, num, key) {\n\t                var ind = this.binarySearchClosestInd(arr, num, key);\n\t                return arr[ind];\n\t            };\n\t            Utils.rectsIntersect = function(r1, r2) {\n\t                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n\t                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n\t                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n\t                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n\t            };\n\t            Utils.throttle = function(func, ms) {\n\t                var isThrottled = false, savedArgs, savedThis;\n\t                function wrapper() {\n\t                    if (isThrottled) {\n\t                        savedArgs = arguments;\n\t                        savedThis = this;\n\t                        return;\n\t                    }\n\t                    func.apply(this, arguments);\n\t                    isThrottled = true;\n\t                    setTimeout(function() {\n\t                        isThrottled = false;\n\t                        if (savedArgs) {\n\t                            wrapper.apply(savedThis, savedArgs);\n\t                            savedArgs = savedThis = null;\n\t                        }\n\t                    }, ms);\n\t                }\n\t                return wrapper;\n\t            };\n\t            Utils.msToTimeString = function(timestamp) {\n\t                var h = Math.floor(timestamp / 36e4);\n\t                var m = Math.floor(timestamp / 6e4);\n\t                var s = Math.floor(timestamp / 1e3);\n\t                return h + \":\" + m + \":\" + s;\n\t            };\n\t            Utils.getRandomItem = function(arr) {\n\t                var ind = Math.floor(Math.random() * arr.length);\n\t                return arr[ind];\n\t            };\n\t            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n\t                if (excludeProps === void 0) {\n\t                    excludeProps = [];\n\t                }\n\t                for (var key in props) {\n\t                    if (excludeProps.indexOf(key) !== -1) continue;\n\t                    if (srcObject[key] == void 0) continue;\n\t                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n\t                    } else {\n\t                        dstObject[key] = this.deepCopy(srcObject[key]);\n\t                    }\n\t                }\n\t            };\n\t            Utils.currentId = 1;\n\t            return Utils;\n\t        }();\n\t        exports.Utils = Utils;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var Vector3 = THREE.Vector3;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var MAX_ANIMATED_SEGMENTS = 100;\n\t        var EVENTS = {\n\t            REBUILD: \"rebuild\",\n\t            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n\t            ANIMATION_FRAME: \"animationFrame\"\n\t        };\n\t        var TrendSegmentsManager = function() {\n\t            function TrendSegmentsManager(chartState, trend) {\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.animatedSegmentsIds = [];\n\t                this.segmentsLength = 0;\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForPrepend = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.trend = trend;\n\t                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t                this.tryToRebuildSegments();\n\t                this.bindEvents();\n\t            }\n\t            TrendSegmentsManager.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.trend.onChange(function(changedOptions, newData) {\n\t                    return _this.onTrendChangeHandler(changedOptions, newData);\n\t                });\n\t                this.chartState.onZoom(function() {\n\t                    return _this.onZoomHandler();\n\t                });\n\t                this.chartState.onScroll(function() {\n\t                    return _this.recalculateDisplayedRange();\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            TrendSegmentsManager.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.appendAnimation && this.appendAnimation.kill();\n\t                this.prependAnimation && this.prependAnimation.kill();\n\t            };\n\t            TrendSegmentsManager.prototype.onZoomHandler = function() {\n\t                var segmentsRebuilded = this.tryToRebuildSegments();\n\t                if (!segmentsRebuilded) {\n\t                    this.recalculateDisplayedRange();\n\t                }\n\t            };\n\t            TrendSegmentsManager.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n\t                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n\t                if (needToRebuildSegments) {\n\t                    this.tryToRebuildSegments(true);\n\t                    return;\n\t                }\n\t                if (!newData) return;\n\t                var data = this.trend.getData();\n\t                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                isAppend ? this.appendData(newData) : this.prependData(newData);\n\t                this.recalculateDisplayedRange();\n\t            };\n\t            TrendSegmentsManager.prototype.getSegment = function(id) {\n\t                return this.segmentsById[id];\n\t            };\n\t            TrendSegmentsManager.prototype.getEndSegment = function() {\n\t                return this.segmentsById[this.endSegmentId];\n\t            };\n\t            TrendSegmentsManager.prototype.getStartSegment = function() {\n\t                return this.segmentsById[this.startSegmentId];\n\t            };\n\t            TrendSegmentsManager.prototype.tryToRebuildSegments = function(force) {\n\t                if (force === void 0) {\n\t                    force = false;\n\t                }\n\t                var options = this.trend.getOptions();\n\t                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n\t                var trendTypesSettings = options.settingsForTypes;\n\t                var trendTypeSettings = trendTypesSettings[trendTypeName];\n\t                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n\t                var needToRebuild = this.segments.length === 0 || force;\n\t                var segmentLength = this.maxSegmentLength;\n\t                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\t                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t                }\n\t                if (!needToRebuild) return false;\n\t                this.maxSegmentLength = segmentLength;\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.segmentsLength = 0;\n\t                this.stopAllAnimations();\n\t                this.appendData(null, true);\n\t                this.recalculateDisplayedRange(true);\n\t                this.ee.emit(EVENTS.REBUILD);\n\t            };\n\t            TrendSegmentsManager.prototype.stopAllAnimations = function() {\n\t                this.animatedSegmentsIds = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                if (this.prependAnimation) this.prependAnimation.kill();\n\t                if (this.appendAnimation) this.appendAnimation.kill();\n\t            };\n\t            TrendSegmentsManager.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n\t                if (segmentsAreRebuilded === void 0) {\n\t                    segmentsAreRebuilded = false;\n\t                }\n\t                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n\t                var displayedRange = to - from;\n\t                this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, \"startXVal\");\n\t                this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n\t                this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, \"endXVal\");\n\t                this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n\t                if (segmentsAreRebuilded) return;\n\t                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n\t                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t            };\n\t            TrendSegmentsManager.prototype.getSegmentsForXValues = function(values) {\n\t                var valueInd = 0;\n\t                var value = values[valueInd];\n\t                var lastValueInd = values.length - 1;\n\t                var results = [];\n\t                var segment = this.getStartSegment();\n\t                if (!segment.hasValue) return [];\n\t                while (segment) {\n\t                    while (value < segment.startXVal) {\n\t                        results.push(void 0);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    while (value > segment.endXVal) {\n\t                        segment = segment.getNext();\n\t                        if (!segment) break;\n\t                    }\n\t                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n\t                    if (valueInPoint) {\n\t                        results.push(segment);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    if (valueInd > lastValueInd) break;\n\t                }\n\t                return results;\n\t            };\n\t            TrendSegmentsManager.prototype.onAnimationFrame = function(cb) {\n\t                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t            };\n\t            TrendSegmentsManager.prototype.onRebuild = function(cb) {\n\t                return this.ee.subscribe(EVENTS.REBUILD, cb);\n\t            };\n\t            TrendSegmentsManager.prototype.onDisplayedRangeChanged = function(cb) {\n\t                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t            };\n\t            TrendSegmentsManager.prototype.allocateNextSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var prevSegment = this.segmentsById[this.endSegmentId];\n\t                if (prevSegment && prevSegment.hasValue) {\n\t                    prevSegment.nextId = id;\n\t                    segment.prevId = prevSegment.id;\n\t                }\n\t                this.endSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.push(segment);\n\t                return segment;\n\t            };\n\t            TrendSegmentsManager.prototype.allocatePrevSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var nextSegment = this.segmentsById[this.startSegmentId];\n\t                if (nextSegment && nextSegment.hasValue) {\n\t                    nextSegment.prevId = id;\n\t                    segment.nextId = nextSegment.id;\n\t                }\n\t                this.startSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.unshift(segment);\n\t                return segment;\n\t            };\n\t            TrendSegmentsManager.prototype.appendData = function(newData, needRebuildSegments) {\n\t                if (needRebuildSegments === void 0) {\n\t                    needRebuildSegments = false;\n\t                }\n\t                var trendData = this.trend.getData();\n\t                if (needRebuildSegments) {\n\t                    newData = trendData;\n\t                    this.animatedSegmentsForAppend = [];\n\t                }\n\t                var startItemInd = trendData.length - newData.length;\n\t                var segment = this.getEndSegment() || this.allocateNextSegment();\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                var itemInd = 0;\n\t                while (itemInd < newData.length) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.appendItem(item);\n\t                    var isLastItem = itemInd == newData.length - 1;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd++;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForAppend.length > 0) {\n\t                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForAppend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocateNextSegment();\n\t                    var prevItem = trendData[startItemInd + itemInd - 1];\n\t                    segment.appendItem(prevItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (needRebuildSegments) {\n\t                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n\t                        var segmentId = _a[_i];\n\t                        var segment_1 = this.segmentsById[segmentId];\n\t                        segment_1.currentAnimationState = segment_1.createAnimationState();\n\t                    }\n\t                    this.animatedSegmentsForAppend = [];\n\t                    return;\n\t                }\n\t                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time);\n\t            };\n\t            TrendSegmentsManager.prototype.prependData = function(newData) {\n\t                var trendData = this.trend.getData();\n\t                var segment = this.getStartSegment() || this.segmentsById[0];\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var itemInd = newData.length - 1;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                while (itemInd >= 0) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.prependItem(item);\n\t                    var isLastItem = itemInd == 0;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd--;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForPrepend.length > 0) {\n\t                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForPrepend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocatePrevSegment();\n\t                    var nextItem = trendData[itemInd + 1];\n\t                    segment.prependItem(nextItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time, true);\n\t            };\n\t            TrendSegmentsManager.prototype.animate = function(time, isPrepend) {\n\t                var _this = this;\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\t                if (animation && animation.isActive() || time == 0) {\n\t                    if (animation) animation.kill();\n\t                    this.onAnimationFrameHandler(1, isPrepend);\n\t                    animatedSegmentsIds.length = 0;\n\t                    return;\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var ease = animationsOptions.trendChangeEase;\n\t                var objectToAnimate = {\n\t                    animationValue: 0\n\t                };\n\t                animation = TweenLite.to(objectToAnimate, time, {\n\t                    animationValue: 1,\n\t                    ease: ease\n\t                });\n\t                animation.eventCallback(\"onUpdate\", function() {\n\t                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animatedSegmentsIds.length = 0;\n\t                    _this.appendAnimation = null;\n\t                });\n\t                if (isPrepend) {\n\t                    this.prependAnimation = animation;\n\t                } else {\n\t                    this.appendAnimation = animation;\n\t                }\n\t            };\n\t            TrendSegmentsManager.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n\t                    var segmentId = animatedSegmentsIds_1[_i];\n\t                    var segment = this.segmentsById[segmentId];\n\t                    for (var key in segment.targetAnimationState) {\n\t                        var targetValue = segment.targetAnimationState[key];\n\t                        var initialValue = segment.initialAnimationState[key];\n\t                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t                        segment.currentAnimationState[key] = currentValue;\n\t                    }\n\t                }\n\t                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t            };\n\t            return TrendSegmentsManager;\n\t        }();\n\t        exports.TrendSegmentsManager = TrendSegmentsManager;\n\t        var TrendSegment = function() {\n\t            function TrendSegment(trendPoints, id) {\n\t                this.isCompleted = false;\n\t                this.items = [];\n\t                this.initialAnimationState = {};\n\t                this.targetAnimationState = {};\n\t                this.currentAnimationState = {};\n\t                this.trendSegments = trendPoints;\n\t                this.id = id;\n\t                this.maxLength = trendPoints.maxSegmentLength;\n\t            }\n\t            TrendSegment.prototype.createAnimationState = function() {\n\t                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n\t                return {\n\t                    xVal: xVal,\n\t                    yVal: yVal,\n\t                    startXVal: startXVal,\n\t                    startYVal: startYVal,\n\t                    endXVal: endXVal,\n\t                    endYVal: endYVal,\n\t                    maxYVal: maxYVal,\n\t                    minYVal: minYVal,\n\t                    maxLength: maxLength\n\t                };\n\t            };\n\t            TrendSegment.prototype.appendItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.push(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var startXVal = items[0].xVal;\n\t                if (item.xVal - startXVal > this.maxLength) return false;\n\t                items.push(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.prependItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.unshift(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var endXVal = items[items.length - 1].xVal;\n\t                if (endXVal - item.xVal > this.maxLength) return false;\n\t                items.unshift(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.complete = function() {\n\t                this.isCompleted = true;\n\t                this.recalculateItems();\n\t                this.items = [];\n\t            };\n\t            TrendSegment.prototype.recalculateItems = function() {\n\t                var items = this.items;\n\t                var itemsLength = items.length;\n\t                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n\t                var endItem = items[itemsLength - 1];\n\t                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n\t                var startXVal, startYVal;\n\t                var startItem = items[0];\n\t                startXVal = startItem.xVal;\n\t                startYVal = startItem.yVal;\n\t                var minX = Math.min(startXVal, endXVal);\n\t                var maxX = Math.max(startXVal, endXVal);\n\t                var middleXVal = minX + (maxX - minX) / 2;\n\t                var minY = Math.min(startYVal, endYVal);\n\t                var maxY = Math.max(startYVal, endYVal);\n\t                var middleYVal = minY + (maxY - minY) / 2;\n\t                var yVals = items.map(function(item) {\n\t                    return item.yVal;\n\t                });\n\t                this.startXVal = startXVal;\n\t                this.startYVal = startYVal;\n\t                this.endXVal = endXVal;\n\t                this.endYVal = endYVal;\n\t                this.xVal = middleXVal;\n\t                this.yVal = middleYVal;\n\t                this.maxYVal = Math.max.apply(Math, yVals);\n\t                this.minYVal = Math.min.apply(Math, yVals);\n\t                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t            };\n\t            TrendSegment.prototype.getNext = function() {\n\t                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t            };\n\t            TrendSegment.prototype.getPrev = function() {\n\t                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t            };\n\t            TrendSegment.prototype.getFrameVal = function() {\n\t                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n\t                return new Vector3(xVal, yVal, 0);\n\t            };\n\t            TrendSegment.prototype.getFramePoint = function() {\n\t                var frameVal = this.getFrameVal();\n\t                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t            };\n\t            return TrendSegment;\n\t        }();\n\t        exports.TrendSegment = TrendSegment;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        var EventEmitter = function() {\n\t            function EventEmitter() {\n\t                this.ee = new deps_1.EE2();\n\t            }\n\t            EventEmitter.prototype.emit = function(eventName) {\n\t                var args = [];\n\t                for (var _i = 1; _i < arguments.length; _i++) {\n\t                    args[_i - 1] = arguments[_i];\n\t                }\n\t                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n\t                var _a;\n\t            };\n\t            EventEmitter.prototype.on = function(eventName, callback) {\n\t                return this.ee.on(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.off = function(eventName, callback) {\n\t                return this.ee.off(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.subscribe = function(eventName, callback) {\n\t                var _this = this;\n\t                this.on(eventName, callback);\n\t                return function() {\n\t                    return _this.off(eventName, callback);\n\t                };\n\t            };\n\t            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n\t                this.ee.setMaxListeners(listenersCount);\n\t            };\n\t            EventEmitter.prototype.removeAllListeners = function(eventName) {\n\t                this.ee.removeAllListeners(eventName);\n\t            };\n\t            return EventEmitter;\n\t        }();\n\t        exports.EventEmitter = EventEmitter;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        var ChartWidget = function() {\n\t            function ChartWidget(chartState) {\n\t                this.unsubscribers = [];\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            ChartWidget.prototype.bindEvents = function() {};\n\t            ChartWidget.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartWidget.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartWidget.getDefaultOptions = function() {\n\t                return {\n\t                    enabled: true\n\t                };\n\t            };\n\t            ChartWidget.widgetName = \"\";\n\t            return ChartWidget;\n\t        }();\n\t        exports.ChartWidget = ChartWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Trend_1 = __webpack_require__(13);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var EVENTS = {\n\t            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n\t        };\n\t        var TrendsManager = function() {\n\t            function TrendsManager(state, initialState) {\n\t                this.trends = {};\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.chartState = state;\n\t                var trendsCalculatedOptions = {};\n\t                for (var trendName in initialState.trends) {\n\t                    var trend = this.createTrend(state, trendName, initialState);\n\t                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t                }\n\t                this.calculatedOptions = trendsCalculatedOptions;\n\t                this.bindEvents();\n\t            }\n\t            TrendsManager.prototype.getTrend = function(trendName) {\n\t                return this.trends[trendName];\n\t            };\n\t            TrendsManager.prototype.getEnabledTrends = function() {\n\t                var enabledTrends = [];\n\t                var allTrends = this.trends;\n\t                for (var trendName in allTrends) {\n\t                    var trend = allTrends[trendName];\n\t                    trend.getOptions().enabled && enabledTrends.push(trend);\n\t                }\n\t                return enabledTrends;\n\t            };\n\t            TrendsManager.prototype.getStartXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                return trends[0].getData()[0].xVal;\n\t            };\n\t            TrendsManager.prototype.getEndXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                var firstTrendData = trends[0].getData();\n\t                return firstTrendData[firstTrendData.length - 1].xVal;\n\t            };\n\t            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n\t                var trends = this.getEnabledTrends();\n\t                var compareFn;\n\t                var result;\n\t                if (extremumIsMax) {\n\t                    result = -Infinity;\n\t                    compareFn = Math.max;\n\t                } else {\n\t                    result = Infinity;\n\t                    compareFn = Math.min;\n\t                }\n\t                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n\t                    var trend = trends_1[_i];\n\t                    var trendData = trend.getData(fromX, toX);\n\t                    var trendYValues = trendData.map(function(dataItem) {\n\t                        return dataItem.yVal;\n\t                    });\n\t                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n\t                }\n\t                if (result == Infinity || result == -Infinity) result = NaN;\n\t                return result;\n\t            };\n\t            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(true, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(false, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n\t                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t            };\n\t            TrendsManager.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateAppliedHandler();\n\t                });\n\t            };\n\t            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n\t                var _this = this;\n\t                var _loop_1 = function(trendName) {\n\t                    this_1.trends[trendName].segmentsManager.onRebuild(function() {\n\t                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n\t                    });\n\t                };\n\t                var this_1 = this;\n\t                for (var trendName in this.trends) {\n\t                    _loop_1(trendName);\n\t                }\n\t            };\n\t            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n\t                var trend = new Trend_1.Trend(state, trendName, initialState);\n\t                this.trends[trendName] = trend;\n\t                return trend;\n\t            };\n\t            return TrendsManager;\n\t        }();\n\t        exports.TrendsManager = TrendsManager;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var Screen = function() {\n\t            function Screen(chartState) {\n\t                this.options = {\n\t                    scrollXVal: 0,\n\t                    scrollX: 0,\n\t                    scrollYVal: 0,\n\t                    scrollY: 0,\n\t                    zoomX: 1,\n\t                    zoomY: 1\n\t                };\n\t                this.currentScrollX = {\n\t                    x: 0\n\t                };\n\t                this.currentScrollY = {\n\t                    y: 0\n\t                };\n\t                this.currentZoomX = {\n\t                    val: 1\n\t                };\n\t                this.currentZoomY = {\n\t                    val: 1\n\t                };\n\t                this.chartState = chartState;\n\t                var _a = chartState.data, w = _a.width, h = _a.height;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.transform({\n\t                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n\t                    zoomY: 1\n\t                });\n\t                this.bindEvents();\n\t            }\n\t            Screen.prototype.getCameraSettings = function() {\n\t                var _a = this.chartState.data, w = _a.width, h = _a.height;\n\t                var FOV = 75;\n\t                var vFOV = FOV * (Math.PI / 180);\n\t                return {\n\t                    FOV: FOV,\n\t                    aspect: w / h,\n\t                    near: .1,\n\t                    far: 5e3,\n\t                    z: h / (2 * Math.tan(vFOV / 2)),\n\t                    x: w / 2,\n\t                    y: h / 2\n\t                };\n\t            };\n\t            Screen.prototype.onZoomFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"zoomFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onScrollFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"scrollFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onTransformationFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"transformationFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.cameraIsMoving = function() {\n\t                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n\t            };\n\t            Screen.prototype.transform = function(options, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n\t                if (scrollX != void 0) this.options.scrollX = scrollX;\n\t                if (scrollY != void 0) this.options.scrollY = scrollY;\n\t                if (zoomX != void 0) this.options.zoomX = zoomX;\n\t                if (zoomY != void 0) this.options.zoomY = zoomY;\n\t                if (scrollX != void 0 || zoomX) {\n\t                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t                    this.options.scrollXVal = options.scrollXVal;\n\t                }\n\t                if (scrollY != void 0 || zoomY) {\n\t                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t                    this.options.scrollYVal = options.scrollYVal;\n\t                }\n\t                if (silent) return;\n\t                this.ee.emit(\"transformationFrame\", options);\n\t                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t                    this.ee.emit(\"scrollFrame\", options);\n\t                }\n\t                if (options.zoomX != void 0 || options.zoomY != void 0) {\n\t                    this.ee.emit(\"zoomFrame\", options);\n\t                }\n\t            };\n\t            Screen.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onChange(function(changedProps) {\n\t                    if (changedProps.xAxis && changedProps.xAxis.range) {\n\t                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n\t                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n\t                    }\n\t                    if (changedProps.yAxis && changedProps.yAxis.range) {\n\t                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n\t                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n\t                    }\n\t                });\n\t                state.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            Screen.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.scrollXAnimation && this.scrollXAnimation.kill();\n\t                this.scrollYAnimation && this.scrollYAnimation.kill();\n\t                this.zoomXAnimation && this.zoomXAnimation.kill();\n\t                this.zoomYAnimation && this.zoomYAnimation.kill();\n\t            };\n\t            Screen.prototype.onScrollXHandler = function(changedProps) {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var isDragMode = state.data.cursor.dragMode;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled && !isDragMode;\n\t                var zoomXChanged = changedProps.xAxis.range.zoom;\n\t                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n\t                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n\t                var range = state.data.xAxis.range;\n\t                var targetX = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollX.x = this.options.scrollX;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollX: _this.currentScrollX.x\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t                        x: targetX,\n\t                        ease: ease\n\t                    });\n\t                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollX.x = targetX;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onScrollYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t                var range = state.data.yAxis.range;\n\t                var targetY = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollY.y = this.options.scrollY;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollY: _this.currentScrollY.y\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t                        y: targetY,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollY.y = targetY;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomXHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.xAxis.range.zoom;\n\t                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomX: _this.currentZoomX.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomX.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.yAxis.range.zoom;\n\t                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomY: _this.currentZoomY.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomY.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomX;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomY;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            Screen.prototype.getValueOnXAxis = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n\t            };\n\t            Screen.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n\t            };\n\t            Screen.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n\t            };\n\t            Screen.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n\t            };\n\t            Screen.prototype.getValueByScreenX = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.getValueByScreenY = function(y) {\n\t                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t            };\n\t            Screen.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            Screen.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            Screen.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            Screen.prototype.getPointByScreenY = function(screenY) {\n\t                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t            };\n\t            Screen.prototype.getTop = function() {\n\t                return this.getPointByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottom = function() {\n\t                return this.getPointByScreenY(0);\n\t            };\n\t            Screen.prototype.getLeft = function() {\n\t                return this.getPointByScreenX(0);\n\t            };\n\t            Screen.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.chartState.data.width);\n\t            };\n\t            Screen.prototype.getTopVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottomVal = function() {\n\t                return this.getValueByScreenY(0);\n\t            };\n\t            Screen.prototype.getCenterYVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height / 2);\n\t            };\n\t            return Screen;\n\t        }();\n\t        exports.Screen = Screen;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var AXIS_MARK_DEFAULT_OPTIONS = {\n\t            type: \"simple\",\n\t            lineWidth: 1,\n\t            value: 0,\n\t            showValue: false,\n\t            stickToEdges: false,\n\t            lineColor: \"#FFFFFF\",\n\t            title: \"\"\n\t        };\n\t        var AxisMarks = function() {\n\t            function AxisMarks(chartState, axisType) {\n\t                this.items = {};\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.axisType = axisType;\n\t                var marks = this.items;\n\t                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n\t                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n\t                    var options = axisMarksOptions_1[_i];\n\t                    var axisMark = void 0;\n\t                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n\t                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n\t                    if (options.type == \"timeleft\") {\n\t                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t                    } else {\n\t                        axisMark = new AxisMark(chartState, axisType, options);\n\t                    }\n\t                    marks[options.name] = axisMark;\n\t                }\n\t                this.bindEvents();\n\t            }\n\t            AxisMarks.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, newData);\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n\t                if (!newData) return;\n\t                var startVal = newData[0].xVal;\n\t                var endVal = newData[newData.length - 1].xVal;\n\t                var marks = this.items;\n\t                for (var markName in marks) {\n\t                    var mark = marks[markName];\n\t                    var markVal = mark.options.value;\n\t                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n\t                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n\t                }\n\t            };\n\t            AxisMarks.prototype.getItems = function() {\n\t                return this.items;\n\t            };\n\t            AxisMarks.prototype.getItem = function(markName) {\n\t                return this.items[markName];\n\t            };\n\t            return AxisMarks;\n\t        }();\n\t        exports.AxisMarks = AxisMarks;\n\t        var AxisMark = function() {\n\t            function AxisMark(chartState, axisType, options) {\n\t                this.renderOnTrendsChange = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.options = options;\n\t                this.axisType = axisType;\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            AxisMark.prototype.bindEvents = function() {};\n\t            AxisMark.prototype.setOptions = function(newOptions) {\n\t                var value = this.options.value;\n\t                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n\t                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisMark.prototype.getDisplayedVal = function() {\n\t                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n\t                return String(displayedValue !== void 0 ? displayedValue : value);\n\t            };\n\t            AxisMark.prototype.onMarkCrossed = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"markCrossed\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"markCrossed\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"valueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"valueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"onDisplayedValueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"onDisplayedValueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.typeName = \"simple\";\n\t            return AxisMark;\n\t        }();\n\t        exports.AxisMark = AxisMark;\n\t        var AxisTimeleftMark = function(_super) {\n\t            __extends(AxisTimeleftMark, _super);\n\t            function AxisTimeleftMark() {\n\t                _super.apply(this, arguments);\n\t                this.renderOnTrendsChange = true;\n\t            }\n\t            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n\t                var markVal = this.options.value;\n\t                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n\t                var time = markVal - maxXVal;\n\t                if (time < 0) time = 0;\n\t                return Utils_1.Utils.msToTimeString(time);\n\t            };\n\t            AxisTimeleftMark.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t            };\n\t            AxisTimeleftMark.prototype.onTrendsChange = function() {\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisTimeleftMark.typeName = \"timeleft\";\n\t            return AxisTimeleftMark;\n\t        }(AxisMark);\n\t        exports.AxisTimeleftMark = AxisTimeleftMark;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        (function(AXIS_RANGE_TYPE) {\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n\t        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n\t        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n\t        (function(AXIS_TYPE) {\n\t            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n\t            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n\t        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n\t        var AXIS_TYPE = exports.AXIS_TYPE;\n\t        (function(AXIS_DATA_TYPE) {\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n\t        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n\t        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Mesh = THREE.Mesh;\n\t        var Object3D = THREE.Object3D;\n\t        var Widget_1 = __webpack_require__(17);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var AxisWidget = function(_super) {\n\t            __extends(AxisWidget, _super);\n\t            function AxisWidget(state) {\n\t                var _this = this;\n\t                _super.call(this, state);\n\t                this.isDestroyed = false;\n\t                this.object3D = new Object3D();\n\t                this.axisXObject = new Object3D();\n\t                this.axisYObject = new Object3D();\n\t                this.object3D.add(this.axisXObject);\n\t                this.object3D.add(this.axisYObject);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }, 1e3);\n\t                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n\t            }\n\t            AxisWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n\t                    _this.onScrollChange(options.scrollX, options.scrollY);\n\t                }), state.screen.onZoomFrame(function(options) {\n\t                    _this.onZoomFrame(options);\n\t                }), state.onDestroy(function() {\n\t                    return _this.onDestroy();\n\t                }), state.onResize(function() {\n\t                    return _this.onResize();\n\t                }));\n\t            };\n\t            AxisWidget.prototype.onDestroy = function() {\n\t                this.isDestroyed = true;\n\t                this.unbindEvents();\n\t            };\n\t            AxisWidget.prototype.onScrollChange = function(x, y) {\n\t                if (y != void 0) {\n\t                    this.axisYObject.position.y = y;\n\t                    this.axisXObject.position.y = y;\n\t                }\n\t                if (x != void 0) {\n\t                    this.axisYObject.position.x = x;\n\t                    this.updateAxisXRequest();\n\t                }\n\t            };\n\t            AxisWidget.prototype.onResize = function() {\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t            };\n\t            AxisWidget.prototype.setupAxis = function(orientation) {\n\t                var _this = this;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var canvasWidth = 0, canvasHeight = 0;\n\t                if (isXAxis) {\n\t                    this.axisXObject.traverse(function(obj) {\n\t                        return _this.axisXObject.remove(obj);\n\t                    });\n\t                    canvasWidth = visibleWidth * 3;\n\t                    canvasHeight = 50;\n\t                } else {\n\t                    this.axisYObject.traverse(function(obj) {\n\t                        return _this.axisYObject.remove(obj);\n\t                    });\n\t                    canvasWidth = 50;\n\t                    canvasHeight = visibleHeight * 3;\n\t                }\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n\t                if (isXAxis) {\n\t                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisXObject.add(axisMesh);\n\t                } else {\n\t                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisYObject.add(axisMesh);\n\t                }\n\t                this.updateAxis(orientation);\n\t            };\n\t            AxisWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisWidget.prototype.updateAxis = function(orientation) {\n\t                if (this.isDestroyed) return;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n\t                var axisOptions;\n\t                var axisMesh;\n\t                var axisGridParams;\n\t                if (isXAxis) {\n\t                    axisMesh = this.axisXObject.children[0];\n\t                    axisOptions = this.chartState.data.xAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t                } else {\n\t                    axisMesh = this.axisYObject.children[0];\n\t                    axisOptions = this.chartState.data.yAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t                }\n\t                var geometry = axisMesh.geometry;\n\t                var canvasWidth = geometry.parameters.width;\n\t                var canvasHeight = geometry.parameters.height;\n\t                var texture = axisMesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t                if (isXAxis) {\n\t                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t                }\n\t                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t                var startVal = axisGridParams.start - edgeOffset;\n\t                var endVal = axisGridParams.end + edgeOffset;\n\t                ctx.beginPath();\n\t                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n\t                    var displayedValue = \"\";\n\t                    if (isXAxis) {\n\t                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t                        ctx.textAlign = \"center\";\n\t                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n\t                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t                        } else {\n\t                            displayedValue = Number(val.toFixed(14)).toString();\n\t                        }\n\t                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t                    } else {\n\t                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n\t                        ctx.textAlign = \"right\";\n\t                        displayedValue = Number(val.toFixed(14)).toString();\n\t                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n\t                    }\n\t                    ctx.stroke();\n\t                }\n\t                ctx.stroke();\n\t                ctx.closePath();\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisWidget.prototype.onZoomFrame = function(options) {\n\t                if (options.zoomX) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }\n\t                if (options.zoomY) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n\t                }\n\t            };\n\t            AxisWidget.getDateStr = function(timestamp, gridParams) {\n\t                var sec = 1e3;\n\t                var min = sec * 60;\n\t                var hour = min * 60;\n\t                var day = hour * 60;\n\t                var step = gridParams.step;\n\t                var d = new Date(timestamp);\n\t                var tf = function(num) {\n\t                    return Utils_1.Utils.toFixed(num, 2);\n\t                };\n\t                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n\t            };\n\t            AxisWidget.widgetName = \"Axis\";\n\t            return AxisWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisWidget = AxisWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Vector3 = THREE.Vector3;\n\t        var Widget_1 = __webpack_require__(17);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var GridWidget = function(_super) {\n\t            __extends(GridWidget, _super);\n\t            function GridWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.isDestroyed = false;\n\t                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n\t                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n\t                this.initGrid();\n\t                this.updateGrid();\n\t            }\n\t            GridWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateGrid();\n\t                }, 1e3);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return updateGridThrottled();\n\t                }), this.chartState.screen.onZoomFrame(function(options) {\n\t                    updateGridThrottled();\n\t                    _this.onZoomFrame(options);\n\t                }), this.chartState.onDestroy(function() {\n\t                    _this.isDestroyed = true;\n\t                    _this.unbindEvents();\n\t                }), this.chartState.onResize(function() {\n\t                    _this.updateGrid();\n\t                }));\n\t            };\n\t            GridWidget.prototype.initGrid = function() {\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: .1,\n\t                    transparent: true\n\t                });\n\t                var xLinesCount = this.gridSizeH;\n\t                var yLinesCount = this.gridSizeV;\n\t                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t                this.lineSegments.position.setZ(-1);\n\t                this.lineSegments.frustumCulled = false;\n\t            };\n\t            GridWidget.prototype.updateGrid = function() {\n\t                if (this.isDestroyed) return;\n\t                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n\t                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t                var startXVal = axisXGrid.start + gridScrollXVal;\n\t                var startYVal = axisYGrid.start + gridScrollYVal;\n\t                var geometry = this.lineSegments.geometry;\n\t                var vertices = geometry.vertices;\n\t                var lineInd = 0;\n\t                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n\t                    var value = startXVal + i * axisXGrid.step;\n\t                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n\t                    var value = startYVal + i * axisYGrid.step;\n\t                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n\t            };\n\t            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n\t                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n\t                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n\t                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n\t                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.onZoomFrame = function(options) {\n\t                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t            };\n\t            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n\t                var axisRange = axisOptions.range;\n\t                var from = axisRange.from;\n\t                var to = axisRange.to;\n\t                var axisLength = to - from;\n\t                var gridStep = 0;\n\t                var gridStepInPixels = 0;\n\t                var minGridStepInPixels = axisOptions.gridMinSize;\n\t                var axisLengthStr = String(axisLength);\n\t                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n\t                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\t                var gridStepFound = false;\n\t                var digitPos = 0;\n\t                while (!gridStepFound) {\n\t                    var power = intPartLength - digitPos - 1;\n\t                    var multiplier = Math.pow(10, power) || 1;\n\t                    var dividers = [ 1, 2, 5 ];\n\t                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t                        var nextGridStep = multiplier / dividers[dividerInd];\n\t                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t                        if (nextGridStepInPixels >= minGridStepInPixels) {\n\t                            gridStep = nextGridStep;\n\t                            gridStepInPixels = nextGridStepInPixels;\n\t                        } else {\n\t                            gridStepFound = true;\n\t                            if (gridStep === 0) {\n\t                                gridStep = nextGridStep;\n\t                                gridStepInPixels = nextGridStepInPixels;\n\t                            }\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!gridStepFound) digitPos++;\n\t                }\n\t                var gridStart = Math.floor(from / gridStep) * gridStep;\n\t                var gridEnd = Math.floor(to / gridStep) * gridStep;\n\t                return {\n\t                    start: gridStart,\n\t                    end: gridEnd,\n\t                    step: gridStep,\n\t                    stepInPx: gridStepInPixels,\n\t                    length: gridEnd - gridStart,\n\t                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t                };\n\t            };\n\t            GridWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            GridWidget.widgetName = \"Grid\";\n\t            return GridWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.GridWidget = GridWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Geometry = THREE.Geometry;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Color_1 = __webpack_require__(26);\n\t        var TrendsGradientWidget = function(_super) {\n\t            __extends(TrendsGradientWidget, _super);\n\t            function TrendsGradientWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsGradientWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendGradient;\n\t            };\n\t            TrendsGradientWidget.widgetName = \"TrendsGradient\";\n\t            return TrendsGradientWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsGradientWidget = TrendsGradientWidget;\n\t        var TrendGradient = function(_super) {\n\t            __extends(TrendGradient, _super);\n\t            function TrendGradient(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.visibleSegmentsCnt = 0;\n\t                this.trend = chartState.trendsManager.getTrend(trendName);\n\t                this.segmentsIds = new Uint16Array(chartState.data.maxVisibleSegments);\n\t                this.initGradient();\n\t                this.updateSegments();\n\t            }\n\t            TrendGradient.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasBackground;\n\t            };\n\t            TrendGradient.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n\t                    _this.updateSegments();\n\t                }));\n\t                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n\t                    _this.updateSegments();\n\t                }));\n\t                this.bindEvent(this.chartState.onZoom(function() {\n\t                    _this.updateSegments();\n\t                }));\n\t            };\n\t            TrendGradient.prototype.getObject3D = function() {\n\t                return this.gradient;\n\t            };\n\t            TrendGradient.prototype.initGradient = function() {\n\t                var geometry = new Geometry();\n\t                for (var i = 0; i < this.segmentsIds.length; i++) {\n\t                    geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\n\t                    var ind = i * 4;\n\t                    geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\n\t                }\n\t                var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\n\t                this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n\t                    color: color.value,\n\t                    transparent: true,\n\t                    opacity: color.a\n\t                }));\n\t                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.gradient.frustumCulled = false;\n\t            };\n\t            TrendGradient.prototype.onZoomFrame = function(options) {\n\t                var state = this.chartState.data;\n\t                var scaleXFactor = state.xAxis.range.scaleFactor;\n\t                var scaleYFactor = state.yAxis.range.scaleFactor;\n\t                var currentScale = this.gradient.scale;\n\t                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t            };\n\t            TrendGradient.prototype.onSegmentsAnimate = function(trendSegmentsManager) {\n\t                var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n\t                for (var i = 0; i < this.visibleSegmentsCnt; i++) {\n\t                    var segmentId = this.segmentsIds[i];\n\t                    if (!animatedSegmentsIds.includes(segmentId)) continue;\n\t                    this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n\t                }\n\t                this.gradient.geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendGradient.prototype.updateSegments = function() {\n\t                var geometry = this.gradient.geometry;\n\t                var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\n\t                var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n\t                this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n\t                var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n\t                if (segmentsToProcessCnt > this.segmentsIds.length) {\n\t                    Utils_1.Utils.error(TrendsGradientWidget.widgetName + \": MAX_SEGMENTS reached\");\n\t                }\n\t                for (var i = 0; i <= segmentsToProcessCnt; i++) {\n\t                    if (segmentInd <= lastDisplayedSegmentInd) {\n\t                        var segment = trendSegments[segmentInd];\n\t                        this.setupSegmentVertices(i, segment.currentAnimationState);\n\t                        this.segmentsIds[i] = segment.id;\n\t                        segmentInd++;\n\t                    } else {\n\t                        this.setupSegmentVertices(i);\n\t                    }\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendGradient.prototype.setupSegmentVertices = function(segmentInd, segmentState) {\n\t                var gradientSegmentInd = segmentInd * 4;\n\t                var vertices = this.gradient.geometry.vertices;\n\t                var topLeft = vertices[gradientSegmentInd];\n\t                var bottomLeft = vertices[gradientSegmentInd + 1];\n\t                var bottomRight = vertices[gradientSegmentInd + 2];\n\t                var topRight = vertices[gradientSegmentInd + 3];\n\t                var screenHeightVal = Math.max(this.chartState.pxToValueByYAxis(this.chartState.data.height), this.chartState.screen.pxToValueByYAxis(this.chartState.data.height));\n\t                if (segmentState) {\n\t                    var startX = this.toLocalX(segmentState.startXVal);\n\t                    var startY = this.toLocalY(segmentState.startYVal);\n\t                    var endX = this.toLocalX(segmentState.endXVal);\n\t                    var endY = this.toLocalY(segmentState.endYVal);\n\t                    topLeft.set(startX, startY, 0);\n\t                    topRight.set(endX, endY, 0);\n\t                    bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n\t                    bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n\t                } else {\n\t                    topLeft.set(0, 0, 0);\n\t                    topRight.set(0, 0, 0);\n\t                    bottomLeft.set(0, 0, 0);\n\t                    bottomRight.set(0, 0, 0);\n\t                }\n\t            };\n\t            TrendGradient.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendGradient.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            return TrendGradient;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendGradient = TrendGradient;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(17);\n\t        var Object3D = THREE.Object3D;\n\t        var TrendsWidget = function(_super) {\n\t            __extends(TrendsWidget, _super);\n\t            function TrendsWidget(state) {\n\t                _super.call(this, state);\n\t                this.widgets = {};\n\t                this.object3D = new Object3D();\n\t                this.onTrendsChange();\n\t            }\n\t            TrendsWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t                state.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, changedOptions, newData);\n\t                });\n\t            };\n\t            TrendsWidget.prototype.onTrendsChange = function() {\n\t                var trendsOptions = this.chartState.data.trends;\n\t                var TrendWidgetClass = this.getTrendWidgetClass();\n\t                for (var trendName in trendsOptions) {\n\t                    var trendOptions = trendsOptions[trendName];\n\t                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n\t                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t                        this.createTrendWidget(trendName);\n\t                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n\t                        this.destroyTrendWidget(trendName);\n\t                    }\n\t                }\n\t            };\n\t            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n\t                var widget = this.widgets[trendName];\n\t                if (!widget) return;\n\t                widget.onTrendChange(changedOptions);\n\t                if (newData) {\n\t                    var data = this.chartState.getTrend(trendName).getData();\n\t                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t                }\n\t            };\n\t            TrendsWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n\t                var WidgetConstructor = this.getTrendWidgetClass();\n\t                var widget = new WidgetConstructor(this.chartState, trendName);\n\t                this.widgets[trendName] = widget;\n\t                var widgetObject = widget.getObject3D();\n\t                widgetObject.name = trendName;\n\t                this.object3D.add(widget.getObject3D());\n\t            };\n\t            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n\t                this.widgets[trendName].onDestroy();\n\t                delete this.widgets[trendName];\n\t                var widgetObject = this.object3D.getObjectByName(trendName);\n\t                this.object3D.remove(widgetObject);\n\t            };\n\t            return TrendsWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.TrendsWidget = TrendsWidget;\n\t        var TrendWidget = function() {\n\t            function TrendWidget(chartState, trendName) {\n\t                this.chartState = chartState;\n\t                this.trendName = trendName;\n\t                this.unsubscribers = [];\n\t                this.trend = chartState.trendsManager.getTrend(trendName);\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled;\n\t            };\n\t            TrendWidget.prototype.appendData = function(newData) {};\n\t            TrendWidget.prototype.prependData = function(newData) {};\n\t            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n\t            TrendWidget.prototype.onDestroy = function() {\n\t                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n\t                    var unsubscriber = _a[_i];\n\t                    unsubscriber();\n\t                }\n\t            };\n\t            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n\t            TrendWidget.prototype.onZoomFrame = function(options) {};\n\t            TrendWidget.prototype.onTransformationFrame = function(options) {};\n\t            TrendWidget.prototype.onZoom = function() {};\n\t            TrendWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function(trendPoints) {\n\t                    return _this.onSegmentsAnimate(trendPoints);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n\t                    return _this.onTransformationFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n\t                    return _this.onZoomFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.onZoom(function() {\n\t                    return _this.onZoom();\n\t                }));\n\t            };\n\t            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n\t                this.unsubscribers.push(unsubscriber);\n\t            };\n\t            return TrendWidget;\n\t        }();\n\t        exports.TrendWidget = TrendWidget;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        var ChartColor = function() {\n\t            function ChartColor(color) {\n\t                this.set(color);\n\t            }\n\t            /**!\r\n\t\t     * @preserve $.parseColor\r\n\t\t     * Copyright 2011 THEtheChad Elliott\r\n\t\t     * Released under the MIT and GPL licenses.\r\n\t\t     */\n\t            ChartColor.parseColor = function(color) {\n\t                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n\t                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4] ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by parseColor\");\n\t                isNaN(cache[3]) && (cache[3] = 1);\n\t                return cache;\n\t            };\n\t            ChartColor.prototype.set = function(color) {\n\t                if (typeof color == \"number\") color = \"#\" + color.toString(16);\n\t                var colorStr = color;\n\t                var rgba = ChartColor.parseColor(colorStr);\n\t                this.r = rgba[0];\n\t                this.g = rgba[1];\n\t                this.b = rgba[2];\n\t                this.a = rgba[3];\n\t                this.value = (rgba[0] << 8 * 2) + (rgba[1] << 8) + rgba[2];\n\t                this.hexStr = \"#\" + this.value.toString(16);\n\t                this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\n\t            };\n\t            return ChartColor;\n\t        }();\n\t        exports.ChartColor = ChartColor;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(13);\n\t        var TrendsLoadingWidget = function(_super) {\n\t            __extends(TrendsLoadingWidget, _super);\n\t            function TrendsLoadingWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLoading;\n\t            };\n\t            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n\t            return TrendsLoadingWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n\t        var TrendLoading = function(_super) {\n\t            __extends(TrendLoading, _super);\n\t            function TrendLoading(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.isActive = false;\n\t                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendLoading.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                this.deactivate();\n\t            }\n\t            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled && chartState.data.animations.enabled;\n\t            };\n\t            TrendLoading.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendLoading.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.onPrependRequest(function() {\n\t                    return _this.activate();\n\t                }));\n\t            };\n\t            TrendLoading.prototype.prependData = function() {\n\t                this.deactivate();\n\t            };\n\t            TrendLoading.prototype.activate = function() {\n\t                var mesh = this.mesh;\n\t                mesh.material.opacity = 1;\n\t                mesh.rotation.z = 0;\n\t                var animation = TweenLite.to(this.mesh.rotation, .5, {\n\t                    z: Math.PI * 2\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animation.restart();\n\t                });\n\t                this.animation = animation;\n\t                this.isActive = true;\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.deactivate = function() {\n\t                this.animation && this.animation.kill();\n\t                this.mesh.material.opacity = 0;\n\t                this.isActive = false;\n\t            };\n\t            TrendLoading.createTexture = function() {\n\t                var h = 64, w = 64;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                    ctx.lineWidth = 5;\n\t                    var center = h / 2;\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n\t                    ctx.stroke();\n\t                });\n\t            };\n\t            TrendLoading.prototype.onZoomFrame = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.updatePosition = function() {\n\t                if (!this.isActive) return;\n\t                var trend = this.trend;\n\t                var segment = trend.segmentsManager.getStartSegment();\n\t                var x, y;\n\t                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    x = segment.currentAnimationState.startXVal;\n\t                    y = segment.currentAnimationState.startYVal;\n\t                } else {\n\t                    x = segment.currentAnimationState.xVal - segment.maxLength;\n\t                    y = segment.currentAnimationState.yVal;\n\t                }\n\t                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n\t                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n\t            };\n\t            return TrendLoading;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLoading = TrendLoading;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(17);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Line = THREE.Line;\n\t        var Mesh = THREE.Mesh;\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var Color_1 = __webpack_require__(26);\n\t        var AxisMarksWidget = function(_super) {\n\t            __extends(AxisMarksWidget, _super);\n\t            function AxisMarksWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.axisMarksWidgets = [];\n\t                this.object3D = new Object3D();\n\t                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n\t                var items = xAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t                items = yAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t            }\n\t            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n\t                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n\t                this.axisMarksWidgets.push(axisMarkWidget);\n\t                this.object3D.add(axisMarkWidget.getObject3D());\n\t            };\n\t            AxisMarksWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n\t                    return _this.updateMarksPositions();\n\t                }), this.chartState.onResize(function() {\n\t                    return _this.updateMarksPositions();\n\t                }));\n\t            };\n\t            AxisMarksWidget.prototype.updateMarksPositions = function() {\n\t                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n\t                    var widget = _a[_i];\n\t                    widget.updatePosition();\n\t                }\n\t            };\n\t            AxisMarksWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarksWidget.widgetName = \"AxisMarks\";\n\t            return AxisMarksWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisMarksWidget = AxisMarksWidget;\n\t        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n\t            var axisMark = axisMarkWidget.axisMark;\n\t            ctx.fillStyle = axisMark.options.lineColor;\n\t            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\t            var xCoord = 15;\n\t            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n\t                ctx.textAlign = \"end\";\n\t                xCoord = axisMarkWidget.indicatorWidth;\n\t            }\n\t            ctx.fillText(axisMark.options.title, xCoord, 20);\n\t            if (!axisMark.options.showValue) return;\n\t            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n\t            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n\t        };\n\t        var INDICATOR_POS_Z = .1;\n\t        var AxisMarkWidget = function() {\n\t            function AxisMarkWidget(chartState, axisMark) {\n\t                this.indicatorWidth = 128;\n\t                this.indicatorHeight = 64;\n\t                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\t                this.chartState = chartState;\n\t                this.axisMark = axisMark;\n\t                this.axisType = axisMark.axisType;\n\t                this.frameValue = axisMark.options.value;\n\t                this.object3D = new Object3D();\n\t                this.object3D.position.setZ(-.1);\n\t                this.line = this.createLine();\n\t                this.object3D.add(this.line);\n\t                this.indicator = this.createIndicator();\n\t                this.object3D.add(this.indicator);\n\t                this.renderIndicator();\n\t                this.updatePosition();\n\t                this.bindEvents();\n\t            }\n\t            AxisMarkWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarkWidget.prototype.createLine = function() {\n\t                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n\t                var lineGeometry = new Geometry();\n\t                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n\t                return new Line(lineGeometry, new LineBasicMaterial({\n\t                    color: new Color_1.ChartColor(lineColor).value,\n\t                    linewidth: lineWidth\n\t                }));\n\t            };\n\t            AxisMarkWidget.prototype.createIndicator = function() {\n\t                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n\t            };\n\t            AxisMarkWidget.prototype.renderIndicator = function() {\n\t                var texture = this.indicator.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisMarkWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.axisMark.onDisplayedValueChange(function() {\n\t                    return _this.renderIndicator();\n\t                });\n\t                this.axisMark.onValueChange(function() {\n\t                    return _this.onValueChangeHandler();\n\t                });\n\t            };\n\t            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n\t                var _this = this;\n\t                if (this.moveAnimation) this.moveAnimation.kill();\n\t                var animations = this.chartState.data.animations;\n\t                var targetValue = this.axisMark.options.value;\n\t                var cb = function() {\n\t                    _this.updatePosition();\n\t                };\n\t                if (animations.enabled) {\n\t                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n\t                        frameValue: targetValue,\n\t                        ease: animations.trendChangeEase\n\t                    });\n\t                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.frameValue = targetValue;\n\t                    cb();\n\t                }\n\t            };\n\t            AxisMarkWidget.prototype.updatePosition = function() {\n\t                var chartState = this.chartState;\n\t                var screen = chartState.screen;\n\t                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n\t                var lineGeometry = this.line.geometry;\n\t                var hasStickMode = this.axisMark.options.stickToEdges;\n\t                var _a = this.chartState.data, width = _a.width, height = _a.height;\n\t                if (isXAxis) {\n\t                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t                    this.object3D.position.y = screen.getBottom();\n\t                    lineGeometry.vertices[1].setY(height);\n\t                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n\t                } else {\n\t                    var val = this.frameValue;\n\t                    var bottomVal = screen.getBottomVal();\n\t                    var topVal = screen.getTopVal();\n\t                    var needToStickOnTop = hasStickMode && val > topVal;\n\t                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n\t                    var centerYVal = screen.getCenterYVal();\n\t                    this.object3D.position.x = screen.getLeft();\n\t                    if (needToStickOnTop) {\n\t                        this.object3D.position.y = screen.getTop();\n\t                    } else if (needToStickOnBottom) {\n\t                        this.object3D.position.y = screen.getBottom();\n\t                    } else {\n\t                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t                    }\n\t                    lineGeometry.vertices[1].setX(width);\n\t                    var indicatorPosY = val > centerYVal ? -35 : 10;\n\t                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t                }\n\t                lineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            AxisMarkWidget.typeName = \"simple\";\n\t            return AxisMarkWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(17);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Vector3 = THREE.Vector3;\n\t        var BorderWidget = function(_super) {\n\t            __extends(BorderWidget, _super);\n\t            function BorderWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                var _a = chartState.data, width = _a.width, height = _a.height;\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: 0,\n\t                    transparent: true\n\t                });\n\t                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t            }\n\t            BorderWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            BorderWidget.widgetName = \"Border\";\n\t            return BorderWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.BorderWidget = BorderWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Color_1 = __webpack_require__(26);\n\t        var CANVAS_WIDTH = 128;\n\t        var CANVAS_HEIGHT = 64;\n\t        var OFFSET_X = 15;\n\t        var TrendsIndicatorWidget = function(_super) {\n\t            __extends(TrendsIndicatorWidget, _super);\n\t            function TrendsIndicatorWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendIndicator;\n\t            };\n\t            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n\t            return TrendsIndicatorWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n\t        var TrendIndicator = function(_super) {\n\t            __extends(TrendIndicator, _super);\n\t            function TrendIndicator(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                this.onTrendChange();\n\t            }\n\t            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasIndicator;\n\t            };\n\t            TrendIndicator.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendIndicator.prototype.onTrendChange = function() {\n\t                var trendData = this.trend.getData();\n\t                var lastItem = trendData[trendData.length - 1];\n\t                var texture = this.mesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\t                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n\t                texture.needsUpdate = true;\n\t            };\n\t            TrendIndicator.prototype.initObject = function() {\n\t                var color = new Color_1.ChartColor(this.trend.getOptions().lineColor);\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"15px Arial\";\n\t                    ctx.fillStyle = color.rgbaStr;\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n\t            };\n\t            TrendIndicator.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segmentsManager.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n\t                this.segment = segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n\t                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x + OFFSET_X;\n\t                var y = endPointVector.y;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n\t                if (indicatorIsOutOfScreen) {\n\t                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n\t                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n\t                    y -= 25;\n\t                }\n\t                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n\t            };\n\t            return TrendIndicator;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendIndicator = TrendIndicator;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendsLineWidget = function(_super) {\n\t            __extends(TrendsLineWidget, _super);\n\t            function TrendsLineWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLine;\n\t            };\n\t            TrendsLineWidget.widgetName = \"TrendsLine\";\n\t            return TrendsLineWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLineWidget = TrendsLineWidget;\n\t        var TrendLine = function(_super) {\n\t            __extends(TrendLine, _super);\n\t            function TrendLine(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeSegmentsInds = [];\n\t                this.displayedSegments = {};\n\t                var options = this.trend.getOptions();\n\t                this.material = new LineBasicMaterial({\n\t                    color: options.lineColor,\n\t                    linewidth: options.lineWidth\n\t                });\n\t                this.initLine();\n\t            }\n\t            TrendLine.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendLine.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            TrendLine.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n\t                    _this.destroySegments();\n\t                    _this.setupSegments();\n\t                }));\n\t                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n\t                    _this.setupSegments();\n\t                }));\n\t            };\n\t            TrendLine.prototype.initLine = function() {\n\t                var geometry = new Geometry();\n\t                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.lineSegments = new LineSegments(geometry, this.material);\n\t                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.lineSegments.frustumCulled = false;\n\t                for (var i = 0; i < this.chartState.data.maxVisibleSegments; i++) {\n\t                    geometry.vertices.push(new Vector3(), new Vector3());\n\t                    this.freeSegmentsInds.push(i);\n\t                }\n\t                this.vertices = geometry.vertices;\n\t                this.setupSegments();\n\t            };\n\t            TrendLine.prototype.setupSegments = function() {\n\t                var geometry = this.lineSegments.geometry;\n\t                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.displayedSegments) {\n\t                    var lineSegment = this.displayedSegments[segmentId];\n\t                    var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupSegment(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                if (!lineSegment) {\n\t                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n\t                    var ind = this.freeSegmentsInds.pop();\n\t                    lineSegment = this.displayedSegments[segmentId] = {\n\t                        segmentId: segmentId,\n\t                        ind: ind\n\t                    };\n\t                }\n\t                var segmentInd = lineSegment.ind;\n\t                var lineStartVertex = this.vertices[segmentInd * 2];\n\t                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t            };\n\t            TrendLine.prototype.destroySegments = function() {\n\t                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t            };\n\t            TrendLine.prototype.destroySegment = function(segmentId) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t                lineStartVertex.set(0, 0, 0);\n\t                lineEndVertex.set(0, 0, 0);\n\t                delete this.displayedSegments[segmentId];\n\t                this.freeSegmentsInds.push(lineSegment.ind);\n\t            };\n\t            TrendLine.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.lineSegments.scale;\n\t                var state = this.chartState.data;\n\t                var scaleXFactor = state.xAxis.range.scaleFactor;\n\t                var scaleYFactor = state.yAxis.range.scaleFactor;\n\t                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t            };\n\t            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                var geometry = this.lineSegments.geometry;\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.displayedSegments[segmentId]) continue;\n\t                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendLine;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLine = TrendLine;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var Vector3 = THREE.Vector3;\n\t        var Mesh = THREE.Mesh;\n\t        var Line = THREE.Line;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var PlaneGeometry = THREE.PlaneGeometry;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var RISE_COLOR = 2927680;\n\t        var FALL_COLOR = 15619379;\n\t        var MARGIN_PERCENT = .3;\n\t        var MAX_CANDLES = 100;\n\t        var TrendsCandlesWidget = function(_super) {\n\t            __extends(TrendsCandlesWidget, _super);\n\t            function TrendsCandlesWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendCandlesWidget;\n\t            };\n\t            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n\t            return TrendsCandlesWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n\t        var TrendCandlesWidget = function(_super) {\n\t            __extends(TrendCandlesWidget, _super);\n\t            function TrendCandlesWidget(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeCandlesInds = [];\n\t                this.candlesPool = [];\n\t                this.candles = {};\n\t                this.initObject();\n\t            }\n\t            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n\t            };\n\t            TrendCandlesWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendCandlesWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n\t                    _this.destroyCandles();\n\t                    _this.setupCandles();\n\t                }));\n\t                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n\t                    _this.setupCandles();\n\t                }));\n\t            };\n\t            TrendCandlesWidget.prototype.initObject = function() {\n\t                var stateData = this.chartState.data;\n\t                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.scaleXFactor = scaleXFactor;\n\t                this.scaleYFactor = scaleYFactor;\n\t                this.object3D = new Object3D();\n\t                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.object3D.frustumCulled = false;\n\t                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t                this.setupCandles();\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandles = function() {\n\t                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.candles) {\n\t                    var segment_1 = this.candles[segmentId].segment;\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupCandle(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandles = function() {\n\t                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n\t                var candle = this.candles[segmentId];\n\t                this.object3D.remove(candle.getObject3D());\n\t                delete this.candles[segmentId];\n\t            };\n\t            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.object3D.scale;\n\t                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t            };\n\t            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.candles[segmentId]) continue;\n\t                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t                    this.setupCandle(segmentId, segmentState);\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n\t                var candleInd = candleId % MAX_CANDLES;\n\t                var candle = this.candlesPool[candleInd];\n\t                if (!candle) {\n\t                    candle = this.candlesPool[candleInd] = new CandleWidget();\n\t                }\n\t                if (!this.candles[candleId]) {\n\t                    this.candles[candleId] = candle;\n\t                    this.object3D.add(candle.getObject3D());\n\t                }\n\t                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t                candle.setSegment(segmentState);\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendCandlesWidget;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendCandlesWidget = TrendCandlesWidget;\n\t        var CandleWidget = function() {\n\t            function CandleWidget() {\n\t                this.initObject();\n\t            }\n\t            CandleWidget.prototype.getObject3D = function() {\n\t                return this.rect;\n\t            };\n\t            CandleWidget.prototype.setSegment = function(segment) {\n\t                this.segment = segment;\n\t                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\t                var geometry = this.rect.geometry;\n\t                var material = this.rect.material;\n\t                var width = segment.endXVal - segment.startXVal;\n\t                width -= width * MARGIN_PERCENT;\n\t                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n\t                leftTop.set(-width / 2, height / 2, 0);\n\t                rightTop.set(width / 2, height / 2, 0);\n\t                leftBottom.set(-width / 2, -height / 2, 0);\n\t                rightBottom.set(width / 2, -height / 2, 0);\n\t                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t                    leftBottom.setY(leftBottom.y + 1);\n\t                    rightBottom.setY(rightBottom.y + 1);\n\t                }\n\t                material.color.set(color);\n\t                geometry.verticesNeedUpdate = true;\n\t                var vLineGeometry = this.vLine.geometry;\n\t                var vLineMaterial = this.vLine.material;\n\t                var lineTop = segment.maxYVal - segment.yVal;\n\t                var lineBottom = segment.minYVal - segment.yVal;\n\t                vLineGeometry.vertices[0].set(0, lineTop, 0);\n\t                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t                vLineMaterial.color.set(color);\n\t                vLineGeometry.verticesNeedUpdate = true;\n\t                var hLineGeometry = this.hLine.geometry;\n\t                var hLineMaterial = this.hLine.material;\n\t                var lineLeft = -width / 2;\n\t                var lineRight = width / 2;\n\t                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t                hLineMaterial.color.set(color);\n\t                hLineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            CandleWidget.prototype.initObject = function() {\n\t                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n\t                var vLineGeometry = new Geometry();\n\t                var hLineGeometry = new Geometry();\n\t                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.rect.add(this.vLine);\n\t                this.rect.add(this.hLine);\n\t            };\n\t            return CandleWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(13);\n\t        var TrendsBeaconWidget = function(_super) {\n\t            __extends(TrendsBeaconWidget, _super);\n\t            function TrendsBeaconWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendBeacon;\n\t            };\n\t            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n\t            return TrendsBeaconWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n\t        var TrendBeacon = function(_super) {\n\t            __extends(TrendBeacon, _super);\n\t            function TrendBeacon(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                if (state.data.animations.enabled) {\n\t                    this.animate();\n\t                }\n\t                this.updatePosition();\n\t            }\n\t            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendBeacon.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendBeacon.prototype.onTrendChange = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return _this.updatePosition();\n\t                }));\n\t                this.bindEvent(this.chartState.onChange(function(changedProps) {\n\t                    return _this.onStateChange(changedProps);\n\t                }));\n\t                this.bindEvent(this.chartState.onDestroy(function() {\n\t                    return _this.stopAnimation();\n\t                }));\n\t            };\n\t            TrendBeacon.prototype.initObject = function() {\n\t                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                light.scale.set(.2, .2, 1);\n\t                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture()\n\t                })));\n\t                this.segment = this.trend.segmentsManager.getEndSegment();\n\t            };\n\t            TrendBeacon.prototype.animate = function() {\n\t                var _this = this;\n\t                this.animated = true;\n\t                var object = this.mesh;\n\t                var animationObject = {\n\t                    scale: object.scale.x,\n\t                    opacity: object.material.opacity\n\t                };\n\t                this.mesh.scale.set(.1, .1, 1);\n\t                setTimeout(function() {\n\t                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n\t                        scale: 1,\n\t                        opacity: 0\n\t                    });\n\t                    animation.eventCallback(\"onUpdate\", function() {\n\t                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n\t                        object.material.opacity = animationObject.opacity;\n\t                    }).eventCallback(\"onComplete\", function() {\n\t                        _this.animation && animation.restart();\n\t                    });\n\t                }, 500);\n\t            };\n\t            TrendBeacon.prototype.stopAnimation = function() {\n\t                this.animated = false;\n\t                this.animation && this.animation.kill();\n\t                this.animation = null;\n\t            };\n\t            TrendBeacon.createTexture = function() {\n\t                var h = 32, w = 32;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n\t                    ctx.fillStyle = \"white\";\n\t                    ctx.fill();\n\t                });\n\t            };\n\t            TrendBeacon.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segmentsManager.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n\t                this.segment = trendsSegments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onStateChange = function(changedProps) {\n\t                if (!changedProps.animations) return;\n\t                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n\t                if (changedProps.animations.enabled) {\n\t                    this.animate();\n\t                } else {\n\t                    this.stopAnimation();\n\t                }\n\t            };\n\t            TrendBeacon.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var xVal, yVal;\n\t                var currentAnimationState = this.segment.currentAnimationState;\n\t                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    xVal = currentAnimationState.endXVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                } else {\n\t                    xVal = currentAnimationState.xVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                }\n\t                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n\t                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n\t                this.mesh.position.set(x, endPointVector.y, .1);\n\t            };\n\t            return TrendBeacon;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendBeacon = TrendBeacon;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(3));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        exports.DEFAULT_CONFIG = {\n\t            installPluginWidgets: true\n\t        };\n\t        var ChartPlugin = function() {\n\t            function ChartPlugin(options, config) {\n\t                if (config === void 0) {\n\t                    config = {};\n\t                }\n\t                this.unsubscribers = [];\n\t                this.initialState = options;\n\t                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n\t                this.name = this.constructor.NAME;\n\t                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n\t            }\n\t            ChartPlugin.prototype.setupChartState = function(chartState) {\n\t                var _this = this;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n\t                    return _this.onInitialStateAppliedHandler(initialState);\n\t                }), this.chartState.onReady(function() {\n\t                    return _this.onChartReadyHandler();\n\t                }), this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n\t                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n\t                }));\n\t            };\n\t            ChartPlugin.prototype.getOptions = function() {\n\t                return this.chartState.data.pluginsState[this.name];\n\t            };\n\t            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n\t            ChartPlugin.prototype.onChartReadyHandler = function() {};\n\t            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n\t            ChartPlugin.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t            };\n\t            ChartPlugin.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartPlugin.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartPlugin.NAME = \"\";\n\t            ChartPlugin.pluginWidgets = [];\n\t            return ChartPlugin;\n\t        }();\n\t        exports.ChartPlugin = ChartPlugin;\n\t    } ]);\n\t});\n\t\n\t\n\t//# sourceMappingURL=ThreeChart.js.map\n\n/***/ }\n\n/******/ })\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** demoApp.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 41657cc064614dd14632\n **/","import { Chart, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from 'three-charts';\n//import { Chart, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from '../src';\n// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/TrendsMarksPlugin';\n// import { TrendsBeaconWidget } from '../plugins/build/TrendsBeaconWidget';\n\nvar chart: Chart;\n\nclass DataSourse {\n\tdata: ITrendItem[] = [];\n\tstartTime: number;\n\tendTime: number;\n\n\tconstructor() {\n\t\tlet sec = 0;\n\t\tlet val = 70;\n\t\tthis.startTime = Date.now();\n\n\t\twhile (sec < 100) { //2592000\n\t\t\tthis.data.push({\n\t\t\t\txVal: this.startTime + sec * 1000,\n\t\t\t\tyVal: val\n\t\t\t});\n\t\t\tval += Math.random() * 14 - 7;\n\t\t\tsec++;\n\t\t}\n\t\tthis.endTime = this.data[this.data.length - 1].xVal;\n\t}\n\n\tgetData() {\n\t\treturn Utils.deepCopy(this.data);\n\t}\n\n\tgetNext() {\n\t\tvar lastVal = this.data[this.data.length - 1];\n\t\tvar yVal = lastVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.endTime + 1000;\n\t\tthis.endTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.push(item);\n\t\treturn item;\n\t}\n\n\tgetPrev() {\n\t\tvar firstVal = this.data[0];\n\t\tvar yVal = firstVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.startTime - 1000;\n\t\tthis.startTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.unshift(item);\n\t\treturn item;\n\t}\n}\n\n// class MarksSource {\n// \tstatic getNext(val: number): ITrendMarkOptions {\n// \t\tif (Math.random() > 0.2) return null;\n// \t\treturn this.generate(val);\n// \t}\n//\n// \tstatic generate(val: number): ITrendMarkOptions {\n// \t\tlet descriptionColor = 'rgb(40,136,75)';\n// \t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\n// \t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\n// \t\t\tdescriptionColor = 'rgb(219,73,49)';\n// \t\t}\n//\n// \t\treturn {\n// \t\t\ttrendName: 'main',\n// \t\t\tvalue: val,\n// \t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\n// \t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\n// \t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\n// \t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\n// \t\t\torientation: orientation,\n// \t\t\tdescriptionColor: descriptionColor\n// \t\t}\n// \t}\n// }\n\nwindow.onload = function () {\n\n\tinitListeners();\n\n\tvar dsMain = new DataSourse();\n\tvar dsRed = new DataSourse();\n\tvar dsBlue = new DataSourse();\n\tvar now = Date.now();\n\n\n\t// Chart.installWidget(TrendsLoadingWidget);\n\t// Chart.installWidget(TrendsBeaconWidget);\n\t// Chart.installWidget(TrendsIndicatorWidget);\n\n\tchart = new Chart({\n\t\tyAxis: {\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true},\n\t\t\t],\n\t\t\trange: {\n\n\t\t\t\tpadding: {end: 100, start: 100},\n\t\t\t\tmargin: {end: 50, start: 50},\n\t\t\t\tzeroVal: 70\n\t\t\t}\n\t\t},\n\t\txAxis: {\n\t\t\t//range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\n\t\t\tdataType: AXIS_DATA_TYPE.DATE,\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.FIXED,\n\t\t\t\tfrom: Date.now(),\n\t\t\t\tto: Date.now() + 20000,\n\t\t\t\tpadding: {end: 200, start: 0},\n\t\t\t\tmaxLength: 5000000,\n\t\t\t\tminLength: 5000\n\t\t\t},\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true},\n\t\t\t\t{value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true}\n\t\t\t]\n\t\t\t// range: {\n\t\t\t// \tfrom: 80,\n\t\t\t// \tto: 90\n\t\t\t// }\n\t\t},\n\t\ttrends: {\n\t\t\t'main': {\n\t\t\t\ttype: TREND_TYPE.LINE,\n\t\t\t\tdataset: dsMain.getData(),\n\t\t\t\thasBeacon: true,\n\t\t\t\thasIndicator: true,\n\t\t\t\thasBackground: true,\n\t\t\t},\n\t\t\t// 'red': {dataset: dsRed.data, lineColor: 0xFF2222, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t\t// 'blue': {dataset: dsBlue.data, lineColor: 0x2222FF, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t},\n\t\tshowStats: true,\n\t\t// autoRender: {fps: 100},\n\t\t// animations: {enabled: false},\n\n\t\ttrendDefaultState: {\n\t\t\tsettingsForTypes: {\n\t\t\t\tLINE: {\n\t\t\t\t\tminSegmentLengthInPx: 10\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tdocument.querySelector('.chart')\n\t// \t,\n\t// [\n\t// \tnew TrendsMarksPlugin({items: [MarksSource.generate(now + 3000), MarksSource.generate(now + 3000), MarksSource.generate(now + 4000)]})\n\t// ]\n\t);\n\n\tchart.setState({animations: {enabled: false}});\n\tchart.setState({animations: {enabled: true}});\n\t\n\t(<any>window)['chart'] = chart;\n\n\tvar mainTrend = chart.getTrend('main');\n\tvar deadlineMark = chart.state.xAxisMarks.getItem('deadline');\n\tvar closeMark = chart.state.xAxisMarks.getItem('close');\n\n\tmainTrend.onDataChange(() => {\n\t\tvar closeValue = closeMark.options.value;\n\t\tif (mainTrend.getLastItem().xVal >= closeValue) {\n\t\t\tdeadlineMark.setOptions({value: closeValue + 10000});\n\t\t\tcloseMark.setOptions({value: closeValue + 20000})\n\t\t}\n\t\t// var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\n\t\t// if (markOptions) setTimeout(() => {\n\t\t// \tlet trendsMarks = chart.state.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\n\t\t// \ttrendsMarks.createMark(markOptions);\n\t\t// }, 500);\n\t});\n\n\n\t// var previewChart1 = Chart.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-chart')[0],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.data, hasBeacon: true}\n\t// \t}\n\t// });\n\t//\n\t// var previewChart2 = Chart.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-chart')[1],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.data, hasBeacon: true}\n\t// \t},\n\t//\n\t// });\n\t//\n\t// var previewChart3 = Chart.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-chart')[2],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.data, hasBeacon: true},\n\t// \t\t'red': {dataset: dsRed.data, lineColor: 0xFF2222},\n\t// \t}\n\t// });\n\t//\n\n\tvar i = 0;\n\n\tchart.getTrend('main').onPrependRequest((requestedLength, resolve, reject) => {\n\t\tvar responseData: ITrendItem[] = [];\n\t\tvar ticksCount = Math.round(requestedLength / 1000) ;\n\t\twhile (ticksCount--) responseData.unshift(dsMain.getPrev());\n\t\tsetTimeout(() => {\n\t\t\tresolve(responseData);\n\t\t}, 2000)\n\t});\n\n\tsetInterval(() => {\n\t\ti++;\n\t\tvar val = dsMain.getNext();\n\n\t\t// [i % 2 ? 10 : 20]\n\n\t\t chart.getTrend('main').appendData([val]);\n\t\t// chart.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\n\t\t// chart.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// chart.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// chart.getTrend('red').appendData([val + 10 + Math.random() * 20]);\n\t\t// chart.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\n\n\n\n\t\t// previewChart1.getTrend('main').appendData([val]);\n\t\t// previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\n\t\t// previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\n\t\t\n\t\t// previewChart1.appendData(dataToAppend1);\n\t\t//\n\t\t// var chartData2 = previewChart2.state.data.trends[0].data;\n\t\t// var lastItem2 = chartData2[chartData.length - 1];\n\t\t// var dataToAppend2 = [\n\t\t// \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\n\t\t// ];\n\t\t// previewChart2.appendData(dataToAppend2);\n\t\t// previewChart3.appendData(dataToAppend2);\n\t}, 1000);\n};\n\n\nfunction initListeners() {\n\tvar $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]') as HTMLInputElement;\n\t$checkboxMaintrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {main: {enabled: $checkboxMaintrend.checked}}});\n\t});\n\tvar $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]') as HTMLInputElement;\n\t$checkboxRedtrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {red: {enabled: $checkboxRedtrend.checked}}});\n\t});\n\tvar $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]') as HTMLInputElement;\n\t$checkboxBluetrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {blue: {enabled: $checkboxBluetrend.checked}}});\n\t});\n\n\tvar $switchLineBtn = document.querySelector('[name=\"switch-line\"]') as HTMLInputElement;\n\t$switchLineBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.LINE});\n\t});\n\n\tvar $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]') as HTMLInputElement;\n\t$switchBarsBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.CANDLE});\n\t});\n\n\tdocument.querySelector('[name=\"move-left\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.state.data.xAxis.range;\n\t\tchart.setState({xAxis: {range: {from: currentRange.from - 2000}}});\n\t});\n\n\tdocument.querySelector('[name=\"move-right\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.state.data.xAxis.range;\n\t\tchart.setState({xAxis: {range: {to: currentRange.to + 2000}}});\n\t});\n\t\n\tvar timeframeButtons = document.querySelectorAll(\".timeframe\");\n\tfor (var i = 0; i < timeframeButtons.length; i++) {\n\t\ttimeframeButtons[i].addEventListener(\"click\", function() {\n\t\t\tvar range = Number(this.getAttribute('data-range'));\n\t\t\tvar segmentLength = Number(this.getAttribute('data-segment-length'));\n\n\n\t\t\tchart.state.setState({autoScroll: false});\n\t\t\tchart.state.zoomToRange(range);\n\t\t\tchart.state.scrollToEnd().then(() => {\n\t\t\t\tchart.state.setState({autoScroll: true});\n\t\t\t});\n\t\t});\n\t}\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demoApp.ts\n **/","module.exports = require(\"./ThreeChart\")\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-charts/build/index.js\n ** module id = 30\n ** module chunks = 1\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n    if (typeof exports === \"object\" && typeof module === \"object\") module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"THREE_CHARTS\"] = factory(); else root[\"THREE_CHARTS\"] = factory();\n})(this, function() {\n    return function(modules) {\n        var installedModules = {};\n        function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n            var module = installedModules[moduleId] = {\n                exports: {},\n                id: moduleId,\n                loaded: false\n            };\n            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n            module.loaded = true;\n            return module.exports;\n        }\n        __webpack_require__.m = modules;\n        __webpack_require__.c = installedModules;\n        __webpack_require__.p = \"\";\n        return __webpack_require__(0);\n    }([ function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(1));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(2));\n        __export(__webpack_require__(21));\n        __export(__webpack_require__(20));\n        __export(__webpack_require__(19));\n        __export(__webpack_require__(12));\n        __export(__webpack_require__(13));\n        __export(__webpack_require__(15));\n        __export(__webpack_require__(18));\n        __export(__webpack_require__(14));\n        __export(__webpack_require__(17));\n        __export(__webpack_require__(35));\n        __export(__webpack_require__(25));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        __webpack_require__(3);\n        var PerspectiveCamera = THREE.PerspectiveCamera;\n        var State_1 = __webpack_require__(12);\n        var Utils_1 = __webpack_require__(14);\n        var AxisWidget_1 = __webpack_require__(22);\n        var GridWidget_1 = __webpack_require__(23);\n        var TrendsGradientWidget_1 = __webpack_require__(24);\n        var TrendsLoadingWidget_1 = __webpack_require__(27);\n        var AxisMarksWidget_1 = __webpack_require__(28);\n        var BorderWidget_1 = __webpack_require__(29);\n        var TrendsIndicatorWidget_1 = __webpack_require__(30);\n        var TrendsLineWidget_1 = __webpack_require__(31);\n        var TrendsCandleWidget_1 = __webpack_require__(32);\n        var TrendsBeaconWidget_1 = __webpack_require__(33);\n        var deps_1 = __webpack_require__(34);\n        var Chart = function() {\n            function Chart(state, $container, plugins) {\n                var _this = this;\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.widgets = [];\n                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n                if (!$container) {\n                    Utils_1.Utils.error(\"$el must be set\");\n                }\n                var style = getComputedStyle($container);\n                state.width = parseInt(style.width);\n                state.height = parseInt(style.height);\n                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n                    return _this.zoom(zoomValue, origin);\n                }, 200);\n                this.$container = $container;\n                this.init($container);\n            }\n            Chart.installWidget = function(Widget) {\n                if (!Widget.widgetName) {\n                    Utils_1.Utils.error(\"unnamed widget\");\n                }\n                this.installedWidgets[Widget.widgetName] = Widget;\n            };\n            Chart.prototype.init = function($container) {\n                var state = this.state;\n                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n                this.scene = new THREE.Scene();\n                this.isStopped = !autoRender.enabled;\n                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n                    antialias: true,\n                    alpha: true\n                });\n                renderer.setPixelRatio(Chart.devicePixelRatio);\n                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n                renderer.setSize(w, h);\n                $container.appendChild(renderer.domElement);\n                this.$el = renderer.domElement;\n                this.$el.style.display = \"block\";\n                if (showStats) {\n                    this.stats = new Stats();\n                    $container.appendChild(this.stats.domElement);\n                }\n                this.setupCamera();\n                var widgetsClasses = this.state.widgetsClasses;\n                for (var widgetName in widgetsClasses) {\n                    var widgetOptions = this.state.data.widgets[widgetName];\n                    if (!widgetOptions.enabled) continue;\n                    var WidgetConstructor = widgetsClasses[widgetName];\n                    var widget = new WidgetConstructor(this.state);\n                    this.scene.add(widget.getObject3D());\n                    this.widgets.push(widget);\n                }\n                this.bindEvents();\n                this.renderLoop();\n            };\n            Chart.prototype.renderLoop = function() {\n                var _this = this;\n                if (this.isDestroyed) return;\n                this.stats && this.stats.begin();\n                this.render();\n                if (this.isStopped) return;\n                var fpsLimit = this.state.data.autoRender.fps;\n                if (fpsLimit) {\n                    var delay_1 = 1e3 / fpsLimit;\n                    setTimeout(function() {\n                        return requestAnimationFrame(function() {\n                            return _this.renderLoop();\n                        });\n                    }, delay_1);\n                } else {\n                    requestAnimationFrame(function() {\n                        return _this.renderLoop();\n                    });\n                }\n                this.stats && this.stats.end();\n            };\n            Chart.prototype.render = function() {\n                this.renderer.render(this.scene, this.camera);\n            };\n            Chart.prototype.stop = function() {\n                this.isStopped = true;\n            };\n            Chart.prototype.run = function() {\n                this.isStopped = false;\n                this.renderLoop();\n            };\n            Chart.prototype.destroy = function() {\n                this.isDestroyed = true;\n                this.stop();\n                this.state.destroy();\n                this.unbindEvents();\n                try {\n                    this.renderer.forceContextLoss();\n                } catch (wtf) {}\n                this.renderer.context = null;\n                this.renderer.domElement = null;\n                this.renderer = null;\n            };\n            Chart.prototype.getState = function() {\n                return this.state.data;\n            };\n            Chart.prototype.getTrend = function(trendName) {\n                return this.state.getTrend(trendName);\n            };\n            Chart.prototype.setState = function(state) {\n                return this.state.setState(state);\n            };\n            Chart.prototype.bindEvents = function() {\n                var _this = this;\n                var $el = this.$el;\n                if (this.state.data.controls.enabled) {\n                    $el.addEventListener(\"mousewheel\", function(ev) {\n                        _this.onMouseWheel(ev);\n                    });\n                    $el.addEventListener(\"mousemove\", function(ev) {\n                        _this.onMouseMove(ev);\n                    });\n                    $el.addEventListener(\"mousedown\", function(ev) {\n                        return _this.onMouseDown(ev);\n                    });\n                    $el.addEventListener(\"mouseup\", function(ev) {\n                        return _this.onMouseUp(ev);\n                    });\n                    $el.addEventListener(\"touchmove\", function(ev) {\n                        _this.onTouchMove(ev);\n                    });\n                    $el.addEventListener(\"touchend\", function(ev) {\n                        _this.onTouchEnd(ev);\n                    });\n                }\n                if (this.state.data.autoResize) {\n                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n                    });\n                }\n                this.unsubscribers = [ this.state.onTrendsChange(function() {\n                    return _this.autoscroll();\n                }), this.state.screen.onTransformationFrame(function(options) {\n                    return _this.onScreenTransformHandler(options);\n                }), this.state.onResize(function(options) {\n                    return _this.onChartResize();\n                }) ];\n            };\n            Chart.prototype.unbindEvents = function() {\n                try {\n                    this.resizeSensor && this.resizeSensor.detach();\n                } catch (e) {}\n                this.$el.remove();\n                this.unsubscribers.forEach(function(unsubscribe) {\n                    return unsubscribe();\n                });\n            };\n            Chart.prototype.setupCamera = function() {\n                var camSettings = this.state.screen.getCameraSettings();\n                if (!this.camera) {\n                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n                    this.scene.add(this.camera);\n                } else {\n                    this.camera.fov = camSettings.FOV;\n                    this.camera.aspect = camSettings.aspect;\n                    this.camera.far = camSettings.far;\n                    this.camera.near = camSettings.near;\n                    this.camera.updateProjectionMatrix();\n                }\n                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n                this.cameraInitialPosition = this.camera.position.clone();\n                this.onScreenTransformHandler(this.state.screen.options);\n            };\n            Chart.prototype.onScreenTransformHandler = function(options) {\n                if (options.scrollX != void 0) {\n                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n                    this.camera.position.setX(scrollX_1);\n                }\n                if (options.scrollY != void 0) {\n                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n                    this.camera.position.setY(scrollY_1);\n                }\n            };\n            Chart.prototype.autoscroll = function() {\n                var state = this.state;\n                if (!state.data.autoScroll) return;\n                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n                if (trendsMaxXDelta > 0) {\n                    var maxVisibleX = this.state.screen.getScreenRightVal();\n                    var paddingRightX = this.state.getPaddingRight();\n                    var currentScroll = state.data.xAxis.range.scroll;\n                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n                        return;\n                    }\n                    var scrollDelta = trendsMaxXDelta;\n                    this.setState({\n                        xAxis: {\n                            range: {\n                                scroll: currentScroll + scrollDelta\n                            }\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onScrollStop = function() {};\n            Chart.prototype.onMouseDown = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.clientX,\n                        y: ev.clientY\n                    }\n                });\n            };\n            Chart.prototype.onMouseUp = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onMouseMove = function(ev) {\n                if (this.state.data.cursor.dragMode) {\n                    this.setState({\n                        cursor: {\n                            dragMode: true,\n                            x: ev.clientX,\n                            y: ev.clientY\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onMouseWheel = function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n                var zoomOrigin = ev.layerX / this.state.data.width;\n                var zoomValue = 1 + ev.wheelDeltaY * .001;\n                this.zoom(zoomValue, zoomOrigin);\n            };\n            Chart.prototype.onTouchMove = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.touches[0].clientX,\n                        y: ev.touches[0].clientY\n                    }\n                });\n            };\n            Chart.prototype.onTouchEnd = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n                this.setState({\n                    width: width,\n                    height: height\n                });\n            };\n            Chart.prototype.onChartResize = function() {\n                var _a = this.state.data, width = _a.width, height = _a.height;\n                this.renderer.setSize(width, height);\n                this.setupCamera();\n            };\n            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n                var _this = this;\n                var MAX_ZOOM_VALUE = 1.5;\n                var MIN_ZOOM_VALUE = .7;\n                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n                var autoScrollIsEnabled = this.state.data.autoScroll;\n                if (autoScrollIsEnabled) this.state.setState({\n                    autoScroll: false\n                });\n                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n                    if (autoScrollIsEnabled) _this.setState({\n                        autoScroll: true\n                    });\n                });\n            };\n            Chart.createPreviewChart = function(userOptions, $el) {\n                var previewChartOptions = {\n                    animations: {\n                        enabled: false\n                    },\n                    widgets: {\n                        Grid: {\n                            enabled: false\n                        },\n                        Axis: {\n                            enabled: false\n                        },\n                        TrendsGradient: {\n                            enabled: false\n                        }\n                    }\n                };\n                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n                return new Chart(options, $el);\n            };\n            Chart.devicePixelRatio = window.devicePixelRatio;\n            Chart.installedWidgets = {};\n            Chart.renderers = {\n                CanvasRenderer: THREE.CanvasRenderer,\n                WebGLRenderer: THREE.WebGLRenderer\n            };\n            return Chart;\n        }();\n        exports.Chart = Chart;\n        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n        Chart.installWidget(AxisWidget_1.AxisWidget);\n        Chart.installWidget(GridWidget_1.GridWidget);\n        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n        Chart.installWidget(TrendsGradientWidget_1.TrendsGradientWidget);\n        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n        Chart.installWidget(BorderWidget_1.BorderWidget);\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        window.TweenLite = TweenMax;\n        window.Stats = __webpack_require__(4);\n        __webpack_require__(5);\n        __webpack_require__(6);\n        exports.isPlainObject = __webpack_require__(7);\n        exports.EE2 = __webpack_require__(9);\n        var es6_promise_1 = __webpack_require__(10);\n        exports.Promise = es6_promise_1.Promise;\n        exports.ResizeSensor = __webpack_require__(11);\n    }, function(module, exports) {\n        var Stats = function() {\n            function h(a) {\n                c.appendChild(a.dom);\n                return a;\n            }\n            function k(a) {\n                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n                l = a;\n            }\n            var l = 0, c = document.createElement(\"div\");\n            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n            c.addEventListener(\"click\", function(a) {\n                a.preventDefault();\n                k(++l % c.children.length);\n            }, !1);\n            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n            k(0);\n            return {\n                REVISION: 16,\n                dom: c,\n                addPanel: h,\n                showPanel: k,\n                begin: function() {\n                    g = (performance || Date).now();\n                },\n                end: function() {\n                    a++;\n                    var c = (performance || Date).now();\n                    f.update(c - g, 200);\n                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n                        var d = performance.memory;\n                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                    }\n                    return c;\n                },\n                update: function() {\n                    g = this.end();\n                },\n                domElement: c,\n                setMode: k\n            };\n        };\n        Stats.Panel = function(h, k, l) {\n            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n            q.width = r;\n            q.height = f;\n            q.style.cssText = \"width:80px;height:48px\";\n            var b = q.getContext(\"2d\");\n            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n            b.textBaseline = \"top\";\n            b.fillStyle = l;\n            b.fillRect(0, 0, r, f);\n            b.fillStyle = k;\n            b.fillText(h, t, u);\n            b.fillRect(d, m, n, p);\n            b.fillStyle = l;\n            b.globalAlpha = .9;\n            b.fillRect(d, m, n, p);\n            return {\n                dom: q,\n                update: function(f, v) {\n                    c = Math.min(c, f);\n                    g = Math.max(g, f);\n                    b.fillStyle = l;\n                    b.globalAlpha = 1;\n                    b.fillRect(0, 0, r, m);\n                    b.fillStyle = k;\n                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                    b.fillRect(d + n - a, m, a, p);\n                    b.fillStyle = l;\n                    b.globalAlpha = .9;\n                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n                }\n            };\n        };\n        \"object\" === typeof module && (module.exports = Stats);\n    }, function(module, exports) {\n        THREE.SpriteCanvasMaterial = function(parameters) {\n            THREE.Material.call(this);\n            this.type = \"SpriteCanvasMaterial\";\n            this.color = new THREE.Color(16777215);\n            this.program = function(context, color) {};\n            this.setValues(parameters);\n        };\n        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n            var material = new THREE.SpriteCanvasMaterial();\n            material.copy(this);\n            material.color.copy(this.color);\n            material.program = this.program;\n            return material;\n        };\n        THREE.CanvasRenderer = function(parameters) {\n            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n            parameters = parameters || {};\n            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n                alpha: parameters.alpha === true\n            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n            if (_context.setLineDash === undefined) {\n                _context.setLineDash = function() {};\n            }\n            this.domElement = _canvas;\n            this.autoClear = true;\n            this.sortObjects = true;\n            this.sortElements = true;\n            this.info = {\n                render: {\n                    vertices: 0,\n                    faces: 0\n                }\n            };\n            this.supportsVertexTextures = function() {};\n            this.setFaceCulling = function() {};\n            this.getContext = function() {\n                return _context;\n            };\n            this.getContextAttributes = function() {\n                return _context.getContextAttributes();\n            };\n            this.getPixelRatio = function() {\n                return _pixelRatio;\n            };\n            this.setPixelRatio = function(value) {\n                if (value !== undefined) _pixelRatio = value;\n            };\n            this.setSize = function(width, height, updateStyle) {\n                _canvasWidth = width * _pixelRatio;\n                _canvasHeight = height * _pixelRatio;\n                _canvas.width = _canvasWidth;\n                _canvas.height = _canvasHeight;\n                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n                if (updateStyle !== false) {\n                    _canvas.style.width = width + \"px\";\n                    _canvas.style.height = height + \"px\";\n                }\n                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _contextGlobalAlpha = 1;\n                _contextGlobalCompositeOperation = 0;\n                _contextStrokeStyle = null;\n                _contextFillStyle = null;\n                _contextLineWidth = null;\n                _contextLineCap = null;\n                _contextLineJoin = null;\n                this.setViewport(0, 0, width, height);\n            };\n            this.setViewport = function(x, y, width, height) {\n                _viewportX = x * _pixelRatio;\n                _viewportY = y * _pixelRatio;\n                _viewportWidth = width * _pixelRatio;\n                _viewportHeight = height * _pixelRatio;\n            };\n            this.setScissor = function() {};\n            this.setScissorTest = function() {};\n            this.setClearColor = function(color, alpha) {\n                _clearColor.set(color);\n                _clearAlpha = alpha !== undefined ? alpha : 1;\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n            };\n            this.setClearColorHex = function(hex, alpha) {\n                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n                this.setClearColor(hex, alpha);\n            };\n            this.getClearColor = function() {\n                return _clearColor;\n            };\n            this.getClearAlpha = function() {\n                return _clearAlpha;\n            };\n            this.getMaxAnisotropy = function() {\n                return 0;\n            };\n            this.clear = function() {\n                if (_clearBox.isEmpty() === false) {\n                    _clearBox.intersect(_clipBox);\n                    _clearBox.expandByScalar(2);\n                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n                    if (_clearAlpha < 1) {\n                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    if (_clearAlpha > 0) {\n                        setBlending(THREE.NormalBlending);\n                        setOpacity(1);\n                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    _clearBox.makeEmpty();\n                }\n            };\n            this.clearColor = function() {};\n            this.clearDepth = function() {};\n            this.clearStencil = function() {};\n            this.render = function(scene, camera) {\n                if (camera instanceof THREE.Camera === false) {\n                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n                    return;\n                }\n                if (this.autoClear === true) this.clear();\n                _this.info.render.vertices = 0;\n                _this.info.render.faces = 0;\n                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n                _elements = _renderData.elements;\n                _lights = _renderData.lights;\n                _camera = camera;\n                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n                calculateLights();\n                for (var e = 0, el = _elements.length; e < el; e++) {\n                    var element = _elements[e];\n                    var material = element.material;\n                    if (material === undefined || material.opacity === 0) continue;\n                    _elemBox.makeEmpty();\n                    if (element instanceof THREE.RenderableSprite) {\n                        _v1 = element;\n                        _v1.x *= _canvasWidthHalf;\n                        _v1.y *= _canvasHeightHalf;\n                        renderSprite(_v1, element, material);\n                    } else if (element instanceof THREE.RenderableLine) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderLine(_v1, _v2, element, material);\n                        }\n                    } else if (element instanceof THREE.RenderableFace) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v3 = element.v3;\n                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _v3.positionScreen.x *= _canvasWidthHalf;\n                        _v3.positionScreen.y *= _canvasHeightHalf;\n                        if (material.overdraw > 0) {\n                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n                        }\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n                        }\n                    }\n                    _clearBox.union(_elemBox);\n                }\n                _context.setTransform(1, 0, 0, 1, 0, 0);\n            };\n            function calculateLights() {\n                _ambientLight.setRGB(0, 0, 0);\n                _directionalLights.setRGB(0, 0, 0);\n                _pointLights.setRGB(0, 0, 0);\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    var lightColor = light.color;\n                    if (light instanceof THREE.AmbientLight) {\n                        _ambientLight.add(lightColor);\n                    } else if (light instanceof THREE.DirectionalLight) {\n                        _directionalLights.add(lightColor);\n                    } else if (light instanceof THREE.PointLight) {\n                        _pointLights.add(lightColor);\n                    }\n                }\n            }\n            function calculateLight(position, normal, color) {\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    _lightColor.copy(light.color);\n                    if (light instanceof THREE.DirectionalLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n                        var amount = normal.dot(lightPosition);\n                        if (amount <= 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    } else if (light instanceof THREE.PointLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n                        if (amount <= 0) continue;\n                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n                        if (amount == 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    }\n                }\n            }\n            function renderSprite(v1, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                var scaleX = element.scale.x * _canvasWidthHalf;\n                var scaleY = element.scale.y * _canvasHeightHalf;\n                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n                _elemBox.min.set(v1.x - dist, v1.y - dist);\n                _elemBox.max.set(v1.x + dist, v1.y + dist);\n                if (material instanceof THREE.SpriteMaterial) {\n                    var texture = material.map;\n                    if (texture !== null) {\n                        var pattern = _patterns[texture.id];\n                        if (pattern === undefined || pattern.version !== texture.version) {\n                            pattern = textureToPattern(texture);\n                            _patterns[texture.id] = pattern;\n                        }\n                        if (pattern.canvas !== undefined) {\n                            setFillStyle(pattern.canvas);\n                            var bitmap = texture.image;\n                            var ox = bitmap.width * texture.offset.x;\n                            var oy = bitmap.height * texture.offset.y;\n                            var sx = bitmap.width * texture.repeat.x;\n                            var sy = bitmap.height * texture.repeat.y;\n                            var cx = scaleX / sx;\n                            var cy = scaleY / sy;\n                            _context.save();\n                            _context.translate(v1.x, v1.y);\n                            if (material.rotation !== 0) _context.rotate(material.rotation);\n                            _context.translate(-scaleX / 2, -scaleY / 2);\n                            _context.scale(cx, cy);\n                            _context.translate(-ox, -oy);\n                            _context.fillRect(ox, oy, sx, sy);\n                            _context.restore();\n                        }\n                    } else {\n                        setFillStyle(material.color.getStyle());\n                        _context.save();\n                        _context.translate(v1.x, v1.y);\n                        if (material.rotation !== 0) _context.rotate(material.rotation);\n                        _context.scale(scaleX, -scaleY);\n                        _context.fillRect(-.5, -.5, 1, 1);\n                        _context.restore();\n                    }\n                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n                    setStrokeStyle(material.color.getStyle());\n                    setFillStyle(material.color.getStyle());\n                    _context.save();\n                    _context.translate(v1.x, v1.y);\n                    if (material.rotation !== 0) _context.rotate(material.rotation);\n                    _context.scale(scaleX, scaleY);\n                    material.program(_context);\n                    _context.restore();\n                }\n            }\n            function renderLine(v1, v2, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _context.beginPath();\n                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n                if (material instanceof THREE.LineBasicMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    if (material.vertexColors !== THREE.VertexColors) {\n                        setStrokeStyle(material.color.getStyle());\n                    } else {\n                        var colorStyle1 = element.vertexColors[0].getStyle();\n                        var colorStyle2 = element.vertexColors[1].getStyle();\n                        if (colorStyle1 === colorStyle2) {\n                            setStrokeStyle(colorStyle1);\n                        } else {\n                            try {\n                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n                                grad.addColorStop(0, colorStyle1);\n                                grad.addColorStop(1, colorStyle2);\n                            } catch (exception) {\n                                grad = colorStyle1;\n                            }\n                            setStrokeStyle(grad);\n                        }\n                    }\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                } else if (material instanceof THREE.LineDashedMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    setStrokeStyle(material.color.getStyle());\n                    setLineDash([ material.dashSize, material.gapSize ]);\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                    setLineDash([]);\n                }\n            }\n            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n                _this.info.render.vertices += 3;\n                _this.info.render.faces++;\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _v1x = v1.positionScreen.x;\n                _v1y = v1.positionScreen.y;\n                _v2x = v2.positionScreen.x;\n                _v2y = v2.positionScreen.y;\n                _v3x = v3.positionScreen.x;\n                _v3y = v3.positionScreen.y;\n                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n                    _diffuseColor.copy(material.color);\n                    _emissiveColor.copy(material.emissive);\n                    if (material.vertexColors === THREE.FaceColors) {\n                        _diffuseColor.multiply(element.color);\n                    }\n                    _color.copy(_ambientLight);\n                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n                    calculateLight(_centroid, element.normalModel, _color);\n                    _color.multiply(_diffuseColor).add(_emissiveColor);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n                    if (material.map !== null) {\n                        var mapping = material.map.mapping;\n                        if (mapping === THREE.UVMapping) {\n                            _uvs = element.uvs;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n                        }\n                    } else if (material.envMap !== null) {\n                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n                            _uv1x = .5 * _normal.x + .5;\n                            _uv1y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n                            _uv2x = .5 * _normal.x + .5;\n                            _uv2y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n                            _uv3x = .5 * _normal.x + .5;\n                            _uv3y = .5 * _normal.y + .5;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n                        }\n                    } else {\n                        _color.copy(material.color);\n                        if (material.vertexColors === THREE.FaceColors) {\n                            _color.multiply(element.color);\n                        }\n                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                    }\n                } else if (material instanceof THREE.MeshNormalMaterial) {\n                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else {\n                    _color.setRGB(1, 1, 1);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                }\n            }\n            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n                _context.beginPath();\n                _context.moveTo(x0, y0);\n                _context.lineTo(x1, y1);\n                _context.lineTo(x2, y2);\n                _context.closePath();\n            }\n            function strokePath(color, linewidth, linecap, linejoin) {\n                setLineWidth(linewidth);\n                setLineCap(linecap);\n                setLineJoin(linejoin);\n                setStrokeStyle(color.getStyle());\n                _context.stroke();\n                _elemBox.expandByScalar(linewidth * 2);\n            }\n            function fillPath(color) {\n                setFillStyle(color.getStyle());\n                _context.fill();\n            }\n            function textureToPattern(texture) {\n                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n                    return {\n                        canvas: undefined,\n                        version: texture.version\n                    };\n                }\n                var image = texture.image;\n                if (image.complete === false) {\n                    return {\n                        canvas: undefined,\n                        version: 0\n                    };\n                }\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                var context = canvas.getContext(\"2d\");\n                context.setTransform(1, 0, 0, -1, 0, image.height);\n                context.drawImage(image, 0, 0);\n                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n                var repeat = \"no-repeat\";\n                if (repeatX === true && repeatY === true) {\n                    repeat = \"repeat\";\n                } else if (repeatX === true) {\n                    repeat = \"repeat-x\";\n                } else if (repeatY === true) {\n                    repeat = \"repeat-y\";\n                }\n                var pattern = _context.createPattern(canvas, repeat);\n                if (texture.onUpdate) texture.onUpdate(texture);\n                return {\n                    canvas: pattern,\n                    version: texture.version\n                };\n            }\n            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n                var pattern = _patterns[texture.id];\n                if (pattern === undefined || pattern.version !== texture.version) {\n                    pattern = textureToPattern(texture);\n                    _patterns[texture.id] = pattern;\n                }\n                if (pattern.canvas !== undefined) {\n                    setFillStyle(pattern.canvas);\n                } else {\n                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n                    _context.fill();\n                    return;\n                }\n                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n                u0 = (u0 + offsetX) * width;\n                v0 = (v0 + offsetY) * height;\n                u1 = (u1 + offsetX) * width;\n                v1 = (v1 + offsetY) * height;\n                u2 = (u2 + offsetX) * width;\n                v2 = (v2 + offsetY) * height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                if (det === 0) return;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.fill();\n                _context.restore();\n            }\n            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n                u0 *= width;\n                v0 *= height;\n                u1 *= width;\n                v1 *= height;\n                u2 *= width;\n                v2 *= height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.clip();\n                _context.drawImage(image, 0, 0);\n                _context.restore();\n            }\n            function expand(v1, v2, pixels) {\n                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n                if (det === 0) return;\n                idet = pixels / Math.sqrt(det);\n                x *= idet;\n                y *= idet;\n                v2.x += x;\n                v2.y += y;\n                v1.x -= x;\n                v1.y -= y;\n            }\n            function setOpacity(value) {\n                if (_contextGlobalAlpha !== value) {\n                    _context.globalAlpha = value;\n                    _contextGlobalAlpha = value;\n                }\n            }\n            function setBlending(value) {\n                if (_contextGlobalCompositeOperation !== value) {\n                    if (value === THREE.NormalBlending) {\n                        _context.globalCompositeOperation = \"source-over\";\n                    } else if (value === THREE.AdditiveBlending) {\n                        _context.globalCompositeOperation = \"lighter\";\n                    } else if (value === THREE.SubtractiveBlending) {\n                        _context.globalCompositeOperation = \"darker\";\n                    } else if (value === THREE.MultiplyBlending) {\n                        _context.globalCompositeOperation = \"multiply\";\n                    }\n                    _contextGlobalCompositeOperation = value;\n                }\n            }\n            function setLineWidth(value) {\n                if (_contextLineWidth !== value) {\n                    _context.lineWidth = value;\n                    _contextLineWidth = value;\n                }\n            }\n            function setLineCap(value) {\n                if (_contextLineCap !== value) {\n                    _context.lineCap = value;\n                    _contextLineCap = value;\n                }\n            }\n            function setLineJoin(value) {\n                if (_contextLineJoin !== value) {\n                    _context.lineJoin = value;\n                    _contextLineJoin = value;\n                }\n            }\n            function setStrokeStyle(value) {\n                if (_contextStrokeStyle !== value) {\n                    _context.strokeStyle = value;\n                    _contextStrokeStyle = value;\n                }\n            }\n            function setFillStyle(value) {\n                if (_contextFillStyle !== value) {\n                    _context.fillStyle = value;\n                    _contextFillStyle = value;\n                }\n            }\n            function setLineDash(value) {\n                if (_contextLineDash.length !== value.length) {\n                    _context.setLineDash(value);\n                    _contextLineDash = value;\n                }\n            }\n        };\n    }, function(module, exports) {\n        THREE.RenderableObject = function() {\n            this.id = 0;\n            this.object = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableFace = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.v3 = new THREE.RenderableVertex();\n            this.normalModel = new THREE.Vector3();\n            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n            this.vertexNormalsLength = 0;\n            this.color = new THREE.Color();\n            this.material = null;\n            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableVertex = function() {\n            this.position = new THREE.Vector3();\n            this.positionWorld = new THREE.Vector3();\n            this.positionScreen = new THREE.Vector4();\n            this.visible = true;\n        };\n        THREE.RenderableVertex.prototype.copy = function(vertex) {\n            this.positionWorld.copy(vertex.positionWorld);\n            this.positionScreen.copy(vertex.positionScreen);\n        };\n        THREE.RenderableLine = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n            this.material = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableSprite = function() {\n            this.id = 0;\n            this.object = null;\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.rotation = 0;\n            this.scale = new THREE.Vector2();\n            this.material = null;\n            this.renderOrder = 0;\n        };\n        THREE.Projector = function() {\n            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n                objects: [],\n                lights: [],\n                elements: []\n            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n            this.projectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n                vector.project(camera);\n            };\n            this.unprojectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n                vector.unproject(camera);\n            };\n            this.pickingRay = function(vector, camera) {\n                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n            };\n            var RenderList = function() {\n                var normals = [];\n                var uvs = [];\n                var object = null;\n                var material = null;\n                var normalMatrix = new THREE.Matrix3();\n                function setObject(value) {\n                    object = value;\n                    material = object.material;\n                    normalMatrix.getNormalMatrix(object.matrixWorld);\n                    normals.length = 0;\n                    uvs.length = 0;\n                }\n                function projectVertex(vertex) {\n                    var position = vertex.position;\n                    var positionWorld = vertex.positionWorld;\n                    var positionScreen = vertex.positionScreen;\n                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n                    var invW = 1 / positionScreen.w;\n                    positionScreen.x *= invW;\n                    positionScreen.y *= invW;\n                    positionScreen.z *= invW;\n                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n                }\n                function pushVertex(x, y, z) {\n                    _vertex = getNextVertexInPool();\n                    _vertex.position.set(x, y, z);\n                    projectVertex(_vertex);\n                }\n                function pushNormal(x, y, z) {\n                    normals.push(x, y, z);\n                }\n                function pushUv(x, y) {\n                    uvs.push(x, y);\n                }\n                function checkTriangleVisibility(v1, v2, v3) {\n                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n                    _points3[0] = v1.positionScreen;\n                    _points3[1] = v2.positionScreen;\n                    _points3[2] = v3.positionScreen;\n                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n                }\n                function checkBackfaceCulling(v1, v2, v3) {\n                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n                }\n                function pushLine(a, b) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    _line = getNextLineInPool();\n                    _line.id = object.id;\n                    _line.v1.copy(v1);\n                    _line.v2.copy(v2);\n                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n                    _line.renderOrder = object.renderOrder;\n                    _line.material = object.material;\n                    _renderData.elements.push(_line);\n                }\n                function pushTriangle(a, b, c) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    var v3 = _vertexPool[c];\n                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n                        _face = getNextFaceInPool();\n                        _face.id = object.id;\n                        _face.v1.copy(v1);\n                        _face.v2.copy(v2);\n                        _face.v3.copy(v3);\n                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                        _face.renderOrder = object.renderOrder;\n                        _face.normalModel.fromArray(normals, a * 3);\n                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n                        for (var i = 0; i < 3; i++) {\n                            var normal = _face.vertexNormalsModel[i];\n                            normal.fromArray(normals, arguments[i] * 3);\n                            normal.applyMatrix3(normalMatrix).normalize();\n                            var uv = _face.uvs[i];\n                            uv.fromArray(uvs, arguments[i] * 2);\n                        }\n                        _face.vertexNormalsLength = 3;\n                        _face.material = object.material;\n                        _renderData.elements.push(_face);\n                    }\n                }\n                return {\n                    setObject: setObject,\n                    projectVertex: projectVertex,\n                    checkTriangleVisibility: checkTriangleVisibility,\n                    checkBackfaceCulling: checkBackfaceCulling,\n                    pushVertex: pushVertex,\n                    pushNormal: pushNormal,\n                    pushUv: pushUv,\n                    pushLine: pushLine,\n                    pushTriangle: pushTriangle\n                };\n            };\n            var renderList = new RenderList();\n            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n                _faceCount = 0;\n                _lineCount = 0;\n                _spriteCount = 0;\n                _renderData.elements.length = 0;\n                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n                if (camera.parent === null) camera.updateMatrixWorld();\n                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n                _frustum.setFromMatrix(_viewProjectionMatrix);\n                _objectCount = 0;\n                _renderData.objects.length = 0;\n                _renderData.lights.length = 0;\n                function addObject(object) {\n                    _object = getNextObjectInPool();\n                    _object.id = object.id;\n                    _object.object = object;\n                    _vector3.setFromMatrixPosition(object.matrixWorld);\n                    _vector3.applyProjection(_viewProjectionMatrix);\n                    _object.z = _vector3.z;\n                    _object.renderOrder = object.renderOrder;\n                    _renderData.objects.push(_object);\n                }\n                scene.traverseVisible(function(object) {\n                    if (object instanceof THREE.Light) {\n                        _renderData.lights.push(object);\n                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line) {\n                        if (object.material.visible === false) return;\n                        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n                        addObject(object);\n                    } else if (object instanceof THREE.Sprite) {\n                        if (object.material.visible === false) return;\n                        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n                        addObject(object);\n                    }\n                });\n                if (sortObjects === true) {\n                    _renderData.objects.sort(painterSort);\n                }\n                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n                    var object = _renderData.objects[o].object;\n                    var geometry = object.geometry;\n                    renderList.setObject(object);\n                    _modelMatrix = object.matrixWorld;\n                    _vertexCount = 0;\n                    if (object instanceof THREE.Mesh) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            var groups = geometry.groups;\n                            if (attributes.position === undefined) continue;\n                            var positions = attributes.position.array;\n                            for (var i = 0, l = positions.length; i < l; i += 3) {\n                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                            }\n                            if (attributes.normal !== undefined) {\n                                var normals = attributes.normal.array;\n                                for (var i = 0, l = normals.length; i < l; i += 3) {\n                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n                                }\n                            }\n                            if (attributes.uv !== undefined) {\n                                var uvs = attributes.uv.array;\n                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n                                }\n                            }\n                            if (geometry.index !== null) {\n                                var indices = geometry.index.array;\n                                if (groups.length > 0) {\n                                    for (var o = 0; o < groups.length; o++) {\n                                        var group = groups[o];\n                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                        }\n                                    }\n                                } else {\n                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                    }\n                                }\n                            } else {\n                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                                    renderList.pushTriangle(i, i + 1, i + 2);\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            var vertices = geometry.vertices;\n                            var faces = geometry.faces;\n                            var faceVertexUvs = geometry.faceVertexUvs[0];\n                            _normalMatrix.getNormalMatrix(_modelMatrix);\n                            var material = object.material;\n                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n                                var vertex = vertices[v];\n                                _vector3.copy(vertex);\n                                if (material.morphTargets === true) {\n                                    var morphTargets = geometry.morphTargets;\n                                    var morphInfluences = object.morphTargetInfluences;\n                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                                        var influence = morphInfluences[t];\n                                        if (influence === 0) continue;\n                                        var target = morphTargets[t];\n                                        var targetVertex = target.vertices[v];\n                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n                                    }\n                                }\n                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n                            }\n                            for (var f = 0, fl = faces.length; f < fl; f++) {\n                                var face = faces[f];\n                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n                                if (material === undefined) continue;\n                                var side = material.side;\n                                var v1 = _vertexPool[face.a];\n                                var v2 = _vertexPool[face.b];\n                                var v3 = _vertexPool[face.c];\n                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n                                if (side !== THREE.DoubleSide) {\n                                    if (side === THREE.FrontSide && visible === false) continue;\n                                    if (side === THREE.BackSide && visible === true) continue;\n                                }\n                                _face = getNextFaceInPool();\n                                _face.id = object.id;\n                                _face.v1.copy(v1);\n                                _face.v2.copy(v2);\n                                _face.v3.copy(v3);\n                                _face.normalModel.copy(face.normal);\n                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                    _face.normalModel.negate();\n                                }\n                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n                                var faceVertexNormals = face.vertexNormals;\n                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n                                    var normalModel = _face.vertexNormalsModel[n];\n                                    normalModel.copy(faceVertexNormals[n]);\n                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                        normalModel.negate();\n                                    }\n                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n                                }\n                                _face.vertexNormalsLength = faceVertexNormals.length;\n                                var vertexUvs = faceVertexUvs[f];\n                                if (vertexUvs !== undefined) {\n                                    for (var u = 0; u < 3; u++) {\n                                        _face.uvs[u].copy(vertexUvs[u]);\n                                    }\n                                }\n                                _face.color = face.color;\n                                _face.material = material;\n                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                                _face.renderOrder = object.renderOrder;\n                                _renderData.elements.push(_face);\n                            }\n                        }\n                    } else if (object instanceof THREE.Line) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            if (attributes.position !== undefined) {\n                                var positions = attributes.position.array;\n                                for (var i = 0, l = positions.length; i < l; i += 3) {\n                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                                }\n                                if (geometry.index !== null) {\n                                    var indices = geometry.index.array;\n                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n                                        renderList.pushLine(indices[i], indices[i + 1]);\n                                    }\n                                } else {\n                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                                        renderList.pushLine(i, i + 1);\n                                    }\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n                            var vertices = object.geometry.vertices;\n                            if (vertices.length === 0) continue;\n                            v1 = getNextVertexInPool();\n                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n                                v1 = getNextVertexInPool();\n                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n                                if ((v + 1) % step > 0) continue;\n                                v2 = _vertexPool[_vertexCount - 2];\n                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n                                    _line = getNextLineInPool();\n                                    _line.id = object.id;\n                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n                                    _line.renderOrder = object.renderOrder;\n                                    _line.material = object.material;\n                                    if (object.material.vertexColors === THREE.VertexColors) {\n                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                                    }\n                                    _renderData.elements.push(_line);\n                                }\n                            }\n                        }\n                    } else if (object instanceof THREE.Sprite) {\n                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n                        _vector4.applyMatrix4(_viewProjectionMatrix);\n                        var invW = 1 / _vector4.w;\n                        _vector4.z *= invW;\n                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n                            _sprite = getNextSpriteInPool();\n                            _sprite.id = object.id;\n                            _sprite.x = _vector4.x * invW;\n                            _sprite.y = _vector4.y * invW;\n                            _sprite.z = _vector4.z;\n                            _sprite.renderOrder = object.renderOrder;\n                            _sprite.object = object;\n                            _sprite.rotation = object.rotation;\n                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n                            _sprite.material = object.material;\n                            _renderData.elements.push(_sprite);\n                        }\n                    }\n                }\n                if (sortElements === true) {\n                    _renderData.elements.sort(painterSort);\n                }\n                return _renderData;\n            };\n            function getNextObjectInPool() {\n                if (_objectCount === _objectPoolLength) {\n                    var object = new THREE.RenderableObject();\n                    _objectPool.push(object);\n                    _objectPoolLength++;\n                    _objectCount++;\n                    return object;\n                }\n                return _objectPool[_objectCount++];\n            }\n            function getNextVertexInPool() {\n                if (_vertexCount === _vertexPoolLength) {\n                    var vertex = new THREE.RenderableVertex();\n                    _vertexPool.push(vertex);\n                    _vertexPoolLength++;\n                    _vertexCount++;\n                    return vertex;\n                }\n                return _vertexPool[_vertexCount++];\n            }\n            function getNextFaceInPool() {\n                if (_faceCount === _facePoolLength) {\n                    var face = new THREE.RenderableFace();\n                    _facePool.push(face);\n                    _facePoolLength++;\n                    _faceCount++;\n                    return face;\n                }\n                return _facePool[_faceCount++];\n            }\n            function getNextLineInPool() {\n                if (_lineCount === _linePoolLength) {\n                    var line = new THREE.RenderableLine();\n                    _linePool.push(line);\n                    _linePoolLength++;\n                    _lineCount++;\n                    return line;\n                }\n                return _linePool[_lineCount++];\n            }\n            function getNextSpriteInPool() {\n                if (_spriteCount === _spritePoolLength) {\n                    var sprite = new THREE.RenderableSprite();\n                    _spritePool.push(sprite);\n                    _spritePoolLength++;\n                    _spriteCount++;\n                    return sprite;\n                }\n                return _spritePool[_spriteCount++];\n            }\n            function painterSort(a, b) {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                } else if (a.z !== b.z) {\n                    return b.z - a.z;\n                } else if (a.id !== b.id) {\n                    return a.id - b.id;\n                } else {\n                    return 0;\n                }\n            }\n            function clipLine(s1, s2) {\n                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n                    return true;\n                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n                    return false;\n                } else {\n                    if (bc1near < 0) {\n                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n                    } else if (bc2near < 0) {\n                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n                    }\n                    if (bc1far < 0) {\n                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n                    } else if (bc2far < 0) {\n                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n                    }\n                    if (alpha2 < alpha1) {\n                        return false;\n                    } else {\n                        s1.lerp(s2, alpha1);\n                        s2.lerp(s1, 1 - alpha2);\n                        return true;\n                    }\n                }\n            }\n        };\n    }, function(module, exports, __webpack_require__) {\n        /*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        var isObject = __webpack_require__(8);\n        function isObjectObject(o) {\n            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n        }\n        module.exports = function isPlainObject(o) {\n            var ctor, prot;\n            if (isObjectObject(o) === false) return false;\n            ctor = o.constructor;\n            if (typeof ctor !== \"function\") return false;\n            prot = ctor.prototype;\n            if (isObjectObject(prot) === false) return false;\n            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n                return false;\n            }\n            return true;\n        };\n    }, function(module, exports) {\n        /*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        module.exports = function isObject(val) {\n            return val != null && typeof val === \"object\" && !Array.isArray(val);\n        };\n    }, function(module, exports, __webpack_require__) {\n        var __WEBPACK_AMD_DEFINE_RESULT__;\n        !function(undefined) {\n            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n                return Object.prototype.toString.call(obj) === \"[object Array]\";\n            };\n            var defaultMaxListeners = 10;\n            function init() {\n                this._events = {};\n                if (this._conf) {\n                    configure.call(this, this._conf);\n                }\n            }\n            function configure(conf) {\n                if (conf) {\n                    this._conf = conf;\n                    conf.delimiter && (this.delimiter = conf.delimiter);\n                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n                    conf.wildcard && (this.wildcard = conf.wildcard);\n                    conf.newListener && (this.newListener = conf.newListener);\n                    if (this.wildcard) {\n                        this.listenerTree = {};\n                    }\n                }\n            }\n            function EventEmitter(conf) {\n                this._events = {};\n                this.newListener = false;\n                configure.call(this, conf);\n            }\n            function searchListenerTree(handlers, type, tree, i) {\n                if (!tree) {\n                    return [];\n                }\n                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n                if (i === typeLength && tree._listeners) {\n                    if (typeof tree._listeners === \"function\") {\n                        handlers && handlers.push(tree._listeners);\n                        return [ tree ];\n                    } else {\n                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n                            handlers && handlers.push(tree._listeners[leaf]);\n                        }\n                        return [ tree ];\n                    }\n                }\n                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n                    if (currentType === \"*\") {\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n                            }\n                        }\n                        return listeners;\n                    } else if (currentType === \"**\") {\n                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n                        if (endReached && tree._listeners) {\n                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n                        }\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                if (branch === \"*\" || branch === \"**\") {\n                                    if (tree[branch]._listeners && !endReached) {\n                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n                                    }\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                } else if (branch === nextType) {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n                                } else {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                }\n                            }\n                        }\n                        return listeners;\n                    }\n                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n                }\n                xTree = tree[\"*\"];\n                if (xTree) {\n                    searchListenerTree(handlers, type, xTree, i + 1);\n                }\n                xxTree = tree[\"**\"];\n                if (xxTree) {\n                    if (i < typeLength) {\n                        if (xxTree._listeners) {\n                            searchListenerTree(handlers, type, xxTree, typeLength);\n                        }\n                        for (branch in xxTree) {\n                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n                                if (branch === nextType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n                                } else if (branch === currentType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n                                } else {\n                                    isolatedBranch = {};\n                                    isolatedBranch[branch] = xxTree[branch];\n                                    searchListenerTree(handlers, type, {\n                                        \"**\": isolatedBranch\n                                    }, i + 1);\n                                }\n                            }\n                        }\n                    } else if (xxTree._listeners) {\n                        searchListenerTree(handlers, type, xxTree, typeLength);\n                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n                    }\n                }\n                return listeners;\n            }\n            function growListenerTree(type, listener) {\n                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                for (var i = 0, len = type.length; i + 1 < len; i++) {\n                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n                        return;\n                    }\n                }\n                var tree = this.listenerTree;\n                var name = type.shift();\n                while (name) {\n                    if (!tree[name]) {\n                        tree[name] = {};\n                    }\n                    tree = tree[name];\n                    if (type.length === 0) {\n                        if (!tree._listeners) {\n                            tree._listeners = listener;\n                        } else if (typeof tree._listeners === \"function\") {\n                            tree._listeners = [ tree._listeners, listener ];\n                        } else if (isArray(tree._listeners)) {\n                            tree._listeners.push(listener);\n                            if (!tree._listeners.warned) {\n                                var m = defaultMaxListeners;\n                                if (typeof this._events.maxListeners !== \"undefined\") {\n                                    m = this._events.maxListeners;\n                                }\n                                if (m > 0 && tree._listeners.length > m) {\n                                    tree._listeners.warned = true;\n                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n                                    console.trace();\n                                }\n                            }\n                        }\n                        return true;\n                    }\n                    name = type.shift();\n                }\n                return true;\n            }\n            EventEmitter.prototype.delimiter = \".\";\n            EventEmitter.prototype.setMaxListeners = function(n) {\n                this._events || init.call(this);\n                this._events.maxListeners = n;\n                if (!this._conf) this._conf = {};\n                this._conf.maxListeners = n;\n            };\n            EventEmitter.prototype.event = \"\";\n            EventEmitter.prototype.once = function(event, fn) {\n                this.many(event, 1, fn);\n                return this;\n            };\n            EventEmitter.prototype.many = function(event, ttl, fn) {\n                var self = this;\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"many only accepts instances of Function\");\n                }\n                function listener() {\n                    if (--ttl === 0) {\n                        self.off(event, listener);\n                    }\n                    fn.apply(this, arguments);\n                }\n                listener._origin = fn;\n                this.on(event, listener);\n                return self;\n            };\n            EventEmitter.prototype.emit = function() {\n                this._events || init.call(this);\n                var type = arguments[0];\n                if (type === \"newListener\" && !this.newListener) {\n                    if (!this._events.newListener) {\n                        return false;\n                    }\n                }\n                if (this._all) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    for (i = 0, l = this._all.length; i < l; i++) {\n                        this.event = type;\n                        this._all[i].apply(this, args);\n                    }\n                }\n                if (type === \"error\") {\n                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n                        if (arguments[1] instanceof Error) {\n                            throw arguments[1];\n                        } else {\n                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n                        }\n                        return false;\n                    }\n                }\n                var handler;\n                if (this.wildcard) {\n                    handler = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n                } else {\n                    handler = this._events[type];\n                }\n                if (typeof handler === \"function\") {\n                    this.event = type;\n                    if (arguments.length === 1) {\n                        handler.call(this);\n                    } else if (arguments.length > 1) switch (arguments.length) {\n                      case 2:\n                        handler.call(this, arguments[1]);\n                        break;\n\n                      case 3:\n                        handler.call(this, arguments[1], arguments[2]);\n                        break;\n\n                      default:\n                        var l = arguments.length;\n                        var args = new Array(l - 1);\n                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                        handler.apply(this, args);\n                    }\n                    return true;\n                } else if (handler) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    var listeners = handler.slice();\n                    for (var i = 0, l = listeners.length; i < l; i++) {\n                        this.event = type;\n                        listeners[i].apply(this, args);\n                    }\n                    return listeners.length > 0 || !!this._all;\n                } else {\n                    return !!this._all;\n                }\n            };\n            EventEmitter.prototype.on = function(type, listener) {\n                if (typeof type === \"function\") {\n                    this.onAny(type);\n                    return this;\n                }\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"on only accepts instances of Function\");\n                }\n                this._events || init.call(this);\n                this.emit(\"newListener\", type, listener);\n                if (this.wildcard) {\n                    growListenerTree.call(this, type, listener);\n                    return this;\n                }\n                if (!this._events[type]) {\n                    this._events[type] = listener;\n                } else if (typeof this._events[type] === \"function\") {\n                    this._events[type] = [ this._events[type], listener ];\n                } else if (isArray(this._events[type])) {\n                    this._events[type].push(listener);\n                    if (!this._events[type].warned) {\n                        var m = defaultMaxListeners;\n                        if (typeof this._events.maxListeners !== \"undefined\") {\n                            m = this._events.maxListeners;\n                        }\n                        if (m > 0 && this._events[type].length > m) {\n                            this._events[type].warned = true;\n                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n                            console.trace();\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.onAny = function(fn) {\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"onAny only accepts instances of Function\");\n                }\n                if (!this._all) {\n                    this._all = [];\n                }\n                this._all.push(fn);\n                return this;\n            };\n            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n            EventEmitter.prototype.off = function(type, listener) {\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"removeListener only takes instances of Function\");\n                }\n                var handlers, leafs = [];\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                } else {\n                    if (!this._events[type]) return this;\n                    handlers = this._events[type];\n                    leafs.push({\n                        _listeners: handlers\n                    });\n                }\n                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                    var leaf = leafs[iLeaf];\n                    handlers = leaf._listeners;\n                    if (isArray(handlers)) {\n                        var position = -1;\n                        for (var i = 0, length = handlers.length; i < length; i++) {\n                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n                                position = i;\n                                break;\n                            }\n                        }\n                        if (position < 0) {\n                            continue;\n                        }\n                        if (this.wildcard) {\n                            leaf._listeners.splice(position, 1);\n                        } else {\n                            this._events[type].splice(position, 1);\n                        }\n                        if (handlers.length === 0) {\n                            if (this.wildcard) {\n                                delete leaf._listeners;\n                            } else {\n                                delete this._events[type];\n                            }\n                        }\n                        return this;\n                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n                        if (this.wildcard) {\n                            delete leaf._listeners;\n                        } else {\n                            delete this._events[type];\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.offAny = function(fn) {\n                var i = 0, l = 0, fns;\n                if (fn && this._all && this._all.length > 0) {\n                    fns = this._all;\n                    for (i = 0, l = fns.length; i < l; i++) {\n                        if (fn === fns[i]) {\n                            fns.splice(i, 1);\n                            return this;\n                        }\n                    }\n                } else {\n                    this._all = [];\n                }\n                return this;\n            };\n            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n            EventEmitter.prototype.removeAllListeners = function(type) {\n                if (arguments.length === 0) {\n                    !this._events || init.call(this);\n                    return this;\n                }\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                        var leaf = leafs[iLeaf];\n                        leaf._listeners = null;\n                    }\n                } else {\n                    if (!this._events[type]) return this;\n                    this._events[type] = null;\n                }\n                return this;\n            };\n            EventEmitter.prototype.listeners = function(type) {\n                if (this.wildcard) {\n                    var handlers = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n                    return handlers;\n                }\n                this._events || init.call(this);\n                if (!this._events[type]) this._events[type] = [];\n                if (!isArray(this._events[type])) {\n                    this._events[type] = [ this._events[type] ];\n                }\n                return this._events[type];\n            };\n            EventEmitter.prototype.listenersAny = function() {\n                if (this._all) {\n                    return this._all;\n                } else {\n                    return [];\n                }\n            };\n            if (true) {\n                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n                    return EventEmitter;\n                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n            } else if (typeof exports === \"object\") {\n                exports.EventEmitter2 = EventEmitter;\n            } else {\n                window.EventEmitter2 = EventEmitter;\n            }\n        }();\n    }, function(module, exports) {\n        module.exports = {\n            Promise: window[\"Promise\"]\n        };\n    }, function(module, exports) {\n        (function() {\n            var ResizeSensor = function(element, callback) {\n                function EventQueue() {\n                    this.q = [];\n                    this.add = function(ev) {\n                        this.q.push(ev);\n                    };\n                    var i, j;\n                    this.call = function() {\n                        for (i = 0, j = this.q.length; i < j; i++) {\n                            this.q[i].call();\n                        }\n                    };\n                }\n                function getComputedStyle(element, prop) {\n                    if (element.currentStyle) {\n                        return element.currentStyle[prop];\n                    } else if (window.getComputedStyle) {\n                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n                    } else {\n                        return element.style[prop];\n                    }\n                }\n                function attachResizeEvent(element, resized) {\n                    if (!element.resizedAttached) {\n                        element.resizedAttached = new EventQueue();\n                        element.resizedAttached.add(resized);\n                    } else if (element.resizedAttached) {\n                        element.resizedAttached.add(resized);\n                        return;\n                    }\n                    element.resizeSensor = document.createElement(\"div\");\n                    element.resizeSensor.className = \"resize-sensor\";\n                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n                    element.resizeSensor.style.cssText = style;\n                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n                    element.appendChild(element.resizeSensor);\n                    if (!{\n                        fixed: 1,\n                        absolute: 1\n                    }[getComputedStyle(element, \"position\")]) {\n                        element.style.position = \"relative\";\n                    }\n                    var expand = element.resizeSensor.childNodes[0];\n                    var expandChild = expand.childNodes[0];\n                    var shrink = element.resizeSensor.childNodes[1];\n                    var shrinkChild = shrink.childNodes[0];\n                    var lastWidth, lastHeight;\n                    var reset = function() {\n                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n                        expand.scrollLeft = expand.scrollWidth;\n                        expand.scrollTop = expand.scrollHeight;\n                        shrink.scrollLeft = shrink.scrollWidth;\n                        shrink.scrollTop = shrink.scrollHeight;\n                        lastWidth = element.offsetWidth;\n                        lastHeight = element.offsetHeight;\n                    };\n                    reset();\n                    var changed = function() {\n                        if (element.resizedAttached) {\n                            element.resizedAttached.call();\n                        }\n                    };\n                    var addEvent = function(el, name, cb) {\n                        if (el.attachEvent) {\n                            el.attachEvent(\"on\" + name, cb);\n                        } else {\n                            el.addEventListener(name, cb);\n                        }\n                    };\n                    var onScroll = function() {\n                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                            changed();\n                        }\n                        reset();\n                    };\n                    addEvent(expand, \"scroll\", onScroll);\n                    addEvent(shrink, \"scroll\", onScroll);\n                }\n                var elementType = Object.prototype.toString.call(element);\n                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n                if (isCollectionTyped) {\n                    var i = 0, j = element.length;\n                    for (;i < j; i++) {\n                        attachResizeEvent(element[i], callback);\n                    }\n                } else {\n                    attachResizeEvent(element, callback);\n                }\n                this.detach = function() {\n                    if (isCollectionTyped) {\n                        var i = 0, j = element.length;\n                        for (;i < j; i++) {\n                            ResizeSensor.detach(element[i]);\n                        }\n                    } else {\n                        ResizeSensor.detach(element);\n                    }\n                };\n            };\n            ResizeSensor.detach = function(element) {\n                if (element.resizeSensor) {\n                    element.removeChild(element.resizeSensor);\n                    delete element.resizeSensor;\n                    delete element.resizedAttached;\n                }\n            };\n            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n                module.exports = ResizeSensor;\n            } else {\n                window.ResizeSensor = ResizeSensor;\n            }\n        })();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var Trend_1 = __webpack_require__(13);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var Utils_1 = __webpack_require__(14);\n        var Widget_1 = __webpack_require__(17);\n        var TrendsManager_1 = __webpack_require__(18);\n        var Screen_1 = __webpack_require__(19);\n        var AxisMarks_1 = __webpack_require__(20);\n        var interfaces_1 = __webpack_require__(21);\n        var deps_1 = __webpack_require__(3);\n        var CHART_STATE_EVENTS = {\n            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n            READY: \"ready\",\n            DESTROY: \"destroy\",\n            CHANGE: \"change\",\n            TREND_CHANGE: \"trendChange\",\n            TRENDS_CHANGE: \"trendsChange\",\n            ZOOM: \"zoom\",\n            RESIZE: \"resize\",\n            SCROLL: \"scroll\",\n            SCROLL_STOP: \"scrollStop\",\n            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n        };\n        var ChartState = function() {\n            function ChartState(initialState, widgetsClasses, plugins) {\n                if (widgetsClasses === void 0) {\n                    widgetsClasses = {};\n                }\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.data = {\n                    prevState: {},\n                    $el: null,\n                    zoom: 0,\n                    xAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n                            from: 0,\n                            to: 0,\n                            scroll: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 0,\n                                end: 5\n                            },\n                            margin: {\n                                start: 0,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 100,\n                        autoScroll: true,\n                        marks: []\n                    },\n                    yAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n                            from: 0,\n                            to: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 5,\n                                end: 5\n                            },\n                            margin: {\n                                start: 5,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 50,\n                        marks: []\n                    },\n                    animations: {\n                        enabled: true,\n                        trendChangeSpeed: .5,\n                        trendChangeEase: void 0,\n                        zoomSpeed: .25,\n                        zoomEase: void 0,\n                        scrollSpeed: .5,\n                        scrollEase: Linear.easeNone,\n                        autoScrollSpeed: 1,\n                        autoScrollEase: Linear.easeNone\n                    },\n                    autoRender: {\n                        enabled: true,\n                        fps: 0\n                    },\n                    autoResize: true,\n                    renderer: \"WebGLRenderer\",\n                    autoScroll: true,\n                    controls: {\n                        enabled: true\n                    },\n                    trendDefaultState: {\n                        enabled: true,\n                        type: Trend_1.TREND_TYPE.LINE,\n                        data: [],\n                        maxSegmentLength: 1e3,\n                        lineWidth: 2,\n                        lineColor: 16777215,\n                        hasBackground: false,\n                        backgroundColor: \"rgba(#5273BD, 0.15)\",\n                        hasBeacon: false,\n                        settingsForTypes: {\n                            CANDLE: {\n                                minSegmentLengthInPx: 20,\n                                maxSegmentLengthInPx: 40\n                            },\n                            LINE: {\n                                minSegmentLengthInPx: 2,\n                                maxSegmentLengthInPx: 10\n                            }\n                        }\n                    },\n                    cursor: {\n                        dragMode: false,\n                        x: 0,\n                        y: 0\n                    },\n                    backgroundColor: 0,\n                    backgroundOpacity: 1,\n                    showStats: false,\n                    pluginsState: {},\n                    eventEmitterMaxListeners: 20,\n                    maxVisibleSegments: 1280\n                };\n                this.widgetsClasses = {};\n                this.plugins = {};\n                this.isReady = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n                this.widgetsClasses = widgetsClasses;\n                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n                initialState.trends = this.trendsManager.calculatedOptions;\n                initialState = this.installPlugins(plugins, initialState);\n                this.setState(initialState);\n                this.setState({\n                    computedData: this.getComputedData()\n                });\n                this.savePrevState();\n                this.screen = new Screen_1.Screen(this);\n                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n                this.initListeners();\n                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n                this.isReady = true;\n                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n            }\n            ChartState.prototype.destroy = function() {\n                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n                this.ee.removeAllListeners();\n                this.data = {};\n            };\n            ChartState.prototype.onDestroy = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n            };\n            ChartState.prototype.onInitialStateApplied = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n            };\n            ChartState.prototype.onReady = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n            };\n            ChartState.prototype.onChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n            };\n            ChartState.prototype.onTrendChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n            };\n            ChartState.prototype.onTrendsChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n            };\n            ChartState.prototype.onScrollStop = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n            };\n            ChartState.prototype.onScroll = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n            };\n            ChartState.prototype.onZoom = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n            };\n            ChartState.prototype.onResize = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n            };\n            ChartState.prototype.onPluginsStateChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n            };\n            ChartState.prototype.getTrend = function(trendName) {\n                return this.trendsManager.getTrend(trendName);\n            };\n            ChartState.prototype.setState = function(newState, eventData, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var stateData = this.data;\n                var changedProps = {};\n                for (var key in newState) {\n                    if (stateData[key] !== newState[key]) {\n                        changedProps[key] = newState[key];\n                    }\n                }\n                this.savePrevState(changedProps);\n                var trendsData = {};\n                if (newState.trends) for (var trendName in newState.trends) {\n                    var trendOptions = newState.trends[trendName];\n                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n                    delete trendOptions.data;\n                }\n                var newStateContainsData = Object.keys(trendsData).length > 0;\n                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n                if (newStateContainsData) for (var trendName in trendsData) {\n                    this.data.trends[trendName].data = trendsData[trendName];\n                }\n                if (silent) return;\n                var recalculateResult = this.recalculateState(changedProps);\n                changedProps = recalculateResult.changedProps;\n                this.emitChangedStateEvents(changedProps, eventData);\n            };\n            ChartState.prototype.recalculateState = function(changedProps) {\n                var data = this.data;\n                var patch = {};\n                var actualData = Utils_1.Utils.deepMerge({}, data);\n                if (changedProps.widgets || !data.widgets) {\n                    patch.widgets = {};\n                    var widgetsOptions = data.widgets || {};\n                    for (var widgetName in this.widgetsClasses) {\n                        var WidgetClass = this.widgetsClasses[widgetName];\n                        var userOptions = widgetsOptions[widgetName] || {};\n                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n                    }\n                }\n                var cursorOptions = changedProps.cursor;\n                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n                if (isMouseDrag) {\n                    var oldX = data.prevState.cursor.x;\n                    var currentX = cursorOptions.x;\n                    var currentScroll = data.xAxis.range.scroll;\n                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n                    patch.xAxis = {\n                        range: {\n                            scroll: currentScroll + deltaXVal\n                        }\n                    };\n                    actualData = Utils_1.Utils.deepMerge(actualData, {\n                        xAxis: patch.xAxis\n                    });\n                }\n                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n                var scrollXChanged = false;\n                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n                if (needToRecalculateXAxis) {\n                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n                    if (xAxisPatch) {\n                        scrollXChanged = true;\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            xAxis: xAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            xAxis: xAxisPatch\n                        });\n                    }\n                }\n                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n                if (needToRecalculateYAxis) {\n                    var yAxisPatch = this.recalculateYAxis(actualData);\n                    if (yAxisPatch) {\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            yAxis: yAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            yAxis: yAxisPatch\n                        });\n                    }\n                }\n                this.savePrevState(patch);\n                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n                patch.computedData = this.getComputedData(allChangedProps);\n                this.savePrevState(patch);\n                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n                return {\n                    changedProps: allChangedProps,\n                    patch: patch\n                };\n            };\n            ChartState.prototype.getComputedData = function(changedProps) {\n                var computeAll = !changedProps;\n                var computedData = {};\n                if (computeAll || changedProps.trends && this.trendsManager) {\n                    computedData.trends = {\n                        maxXVal: this.trendsManager.getEndXVal(),\n                        minXVal: this.trendsManager.getStartXVal()\n                    };\n                }\n                return computedData;\n            };\n            ChartState.prototype.savePrevState = function(changedProps) {\n                if (!changedProps) changedProps = this.data;\n                var prevState = this.data.prevState;\n                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n            };\n            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n                var prevState = this.data.prevState;\n                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n                for (var key in changedProps) {\n                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n                }\n                if (!this.isReady) return;\n                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n                var resizeEventNeeded = changedProps.width || changedProps.height;\n                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n            };\n            ChartState.prototype.installPlugins = function(plugins, initialState) {\n                var _this = this;\n                initialState.pluginsState = {};\n                plugins.forEach(function(plugin) {\n                    var PluginClass = plugin.constructor;\n                    var pluginName = PluginClass.NAME;\n                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n                    });\n                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n                    _this.plugins[pluginName] = plugin;\n                    plugin.setupChartState(_this);\n                });\n                return initialState;\n            };\n            ChartState.prototype.getPlugin = function(pluginName) {\n                return this.plugins[pluginName];\n            };\n            ChartState.prototype.initListeners = function() {\n                var _this = this;\n                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n                    _this.handleTrendsChange(changedTrends, newData);\n                });\n            };\n            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n                for (var trendName in changedTrends) {\n                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n                }\n            };\n            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n                var axisRange = actualData.xAxis.range;\n                var patch = {\n                    range: {}\n                };\n                var isInitialize = axisRange.zeroVal == void 0;\n                var zeroVal, scaleFactor;\n                var zoom = axisRange.zoom;\n                if (axisRange.isMirrorMode) {\n                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n                }\n                if (isInitialize) {\n                    zeroVal = axisRange.from;\n                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                } else {\n                    zeroVal = axisRange.zeroVal;\n                    scaleFactor = axisRange.scaleFactor;\n                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n                        if (changedProps.xAxis.range.zoom) {\n                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n                        }\n                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                        patch.range.scroll = axisRange.from - zeroVal;\n                        patch.range.zoom = currentScaleFactor / scaleFactor;\n                        return patch;\n                    }\n                }\n                do {\n                    var from = zeroVal + axisRange.scroll;\n                    var to = from + actualData.width / (scaleFactor * zoom);\n                    var rangeLength = to - from;\n                    var needToRecalculateZoom = false;\n                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n                    if (needToRecalculateZoom) {\n                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n                        var zoom = zoom * fixScale;\n                        patch.range.zoom = zoom;\n                    }\n                } while (needToRecalculateZoom);\n                patch.range.from = from;\n                patch.range.to = to;\n                return patch;\n            };\n            ChartState.prototype.recalculateYAxis = function(actualData) {\n                var patch = {\n                    range: {}\n                };\n                var yAxisRange = actualData.yAxis.range;\n                var isInitialize = yAxisRange.scaleFactor == void 0;\n                var trends = this.trendsManager;\n                var trendsEndXVal = trends.getEndXVal();\n                var trendsStartXVal = trends.getStartXVal();\n                var xRange = actualData.xAxis.range;\n                var xFrom = xRange.from, xTo = xRange.to;\n                var xRangeLength = xTo - xFrom;\n                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n                if (xTo > trendsEndXVal) {\n                    xTo = trendsEndXVal;\n                    xFrom = xTo - xRangeLength;\n                } else if (xFrom < trendsStartXVal) {\n                    xFrom = trendsStartXVal;\n                    xTo = xFrom + xRangeLength;\n                }\n                var maxY = trends.getMaxYVal(xFrom, xTo);\n                var minY = trends.getMinYVal(xFrom, xTo);\n                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n                    if (trendLastY > maxY) maxY = trendLastY;\n                    if (trendLastY < minY) minY = trendLastY;\n                }\n                if (yAxisRange.isMirrorMode) {\n                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n                }\n                var margin = yAxisRange.margin;\n                var padding = {\n                    start: yAxisRange.padding.start + margin.start,\n                    end: yAxisRange.padding.end + margin.end\n                };\n                if (padding.end + padding.start >= actualData.height) {\n                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n                }\n                var rangeLength = maxY - minY;\n                var paddingTopInPercents = padding.end / actualData.height;\n                var paddingBottomInPercents = padding.start / actualData.height;\n                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n                if (isInitialize) {\n                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n                    scaleFactor = actualData.height / (toVal - fromVal);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                    needToZoom = true;\n                } else {\n                    scaleFactor = yAxisRange.scaleFactor;\n                    zeroVal = yAxisRange.zeroVal;\n                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n                }\n                if (!needToZoom) return null;\n                scroll = fromVal - zeroVal;\n                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n                var currentAxisRange = this.data.yAxis.range;\n                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n                return patch;\n            };\n            ChartState.prototype.zoom = function(zoomValue, origin) {\n                var _this = this;\n                if (origin === void 0) {\n                    origin = .5;\n                }\n                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n                var newZoom = zoom * zoomValue;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                var nextRange = this.data.width / (scaleFactor * newZoom);\n                var newScroll = scroll + (currentRange - nextRange) * origin;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            zoom: newZoom,\n                            scroll: newScroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.zoomToRange = function(range, origin) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                return this.zoom(currentRange / range, origin);\n            };\n            ChartState.prototype.scrollToEnd = function() {\n                var _this = this;\n                var state = this.data;\n                var endXVal = this.trendsManager.getEndXVal();\n                var range = state.xAxis.range;\n                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            scroll: scroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getValueOnXAxis = function(x) {\n                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.getValueByScreenX = function(x) {\n                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.getValueByScreenY = function(y) {\n                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByYAxis(y);\n            };\n            ChartState.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenYByValue = function(yVal) {\n                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            ChartState.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            ChartState.prototype.getScreenLeftVal = function() {\n                return this.getValueByScreenX(0);\n            };\n            ChartState.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.data.width);\n            };\n            ChartState.prototype.getPaddingRight = function() {\n                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n            };\n            return ChartState;\n        }();\n        exports.ChartState = ChartState;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var TrendSegmentsManager_1 = __webpack_require__(15);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var deps_1 = __webpack_require__(3);\n        var EVENTS = {\n            CHANGE: \"Change\",\n            PREPEND_REQUEST: \"prependRequest\"\n        };\n        (function(TREND_TYPE) {\n            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n        var TREND_TYPE = exports.TREND_TYPE;\n        var Trend = function() {\n            function Trend(chartState, trendName, initialState) {\n                this.minXVal = Infinity;\n                this.minYVal = Infinity;\n                this.maxXVal = -Infinity;\n                this.maxYVal = -Infinity;\n                var options = initialState.trends[trendName];\n                this.name = trendName;\n                this.chartState = chartState;\n                this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.data.trendDefaultState, options);\n                this.calculatedOptions.name = trendName;\n                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n                this.calculatedOptions.dataset = [];\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvents();\n            }\n            Trend.prototype.onInitialStateApplied = function() {\n                this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\n            };\n            Trend.prototype.bindEvents = function() {\n                var _this = this;\n                var chartState = this.chartState;\n                chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateApplied();\n                });\n                chartState.onScrollStop(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onZoom(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n                });\n                chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            Trend.prototype.getCalculatedOptions = function() {\n                return this.calculatedOptions;\n            };\n            Trend.prototype.appendData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData());\n                var updatedTrendData = options.data.concat(newData);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.prependData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData(), true);\n                var updatedTrendData = newData.concat(options.data);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.changeData = function(allData, newData) {\n                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n                    var item = newData_1[_i];\n                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n                }\n                var options = this.getOptions();\n                var statePatch = {\n                    trends: (_a = {}, _a[options.name] = {\n                        data: allData\n                    }, _a)\n                };\n                this.chartState.setState(statePatch, newData);\n                var _a;\n            };\n            Trend.prototype.getData = function(fromX, toX) {\n                var data = this.getOptions().data;\n                if (fromX == void 0 && toX == void 0) return data;\n                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n                toX = toX !== void 0 ? toX : data[data.length].xVal;\n                var filteredData = [];\n                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                    var item = data_1[_i];\n                    if (item.xVal < fromX) continue;\n                    if (item.xVal > toX) break;\n                    filteredData.push(item);\n                }\n                return filteredData;\n            };\n            Trend.prototype.getFirstItem = function() {\n                return this.getOptions().data[0];\n            };\n            Trend.prototype.getLastItem = function() {\n                var data = this.getOptions().data;\n                return data[data.length - 1];\n            };\n            Trend.prototype.getOptions = function() {\n                return this.chartState.data.trends[this.name];\n            };\n            Trend.prototype.setOptions = function(options) {\n                this.chartState.setState({\n                    trends: (_a = {}, _a[this.name] = options, _a)\n                });\n                var _a;\n            };\n            Trend.prototype.onPrependRequest = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n                return function() {\n                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n                };\n            };\n            Trend.prototype.onChange = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.CHANGE, cb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, cb);\n                };\n            };\n            Trend.prototype.onDataChange = function(cb) {\n                var _this = this;\n                var onChangeCb = function(changedOptions, newData) {\n                    if (newData) cb(newData);\n                };\n                this.ee.on(EVENTS.CHANGE, onChangeCb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n                };\n            };\n            Trend.prototype.checkForPrependRequest = function() {\n                var _this = this;\n                if (this.prependRequest) return;\n                var chartState = this.chartState;\n                var minXVal = chartState.data.computedData.trends.minXVal;\n                var minScreenX = chartState.getScreenXByValue(minXVal);\n                var needToRequest = minScreenX > 0;\n                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var requestedDataLength = to - from;\n                if (!needToRequest) return;\n                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n                });\n                this.prependRequest.then(function(newData) {\n                    _this.prependData(newData);\n                    _this.prependRequest = null;\n                }, function() {\n                    _this.prependRequest = null;\n                });\n            };\n            Trend.prepareData = function(newData, currentData, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var data = [];\n                if (typeof newData[0] == \"number\") {\n                    currentData = currentData || [];\n                    var initialItem = void 0;\n                    var xVal = void 0;\n                    if (isPrepend) {\n                        initialItem = currentData[0];\n                        xVal = initialItem.xVal - newData.length;\n                    } else {\n                        initialItem = currentData[currentData.length - 1];\n                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n                    }\n                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n                        var yVal = _a[_i];\n                        data.push({\n                            xVal: xVal,\n                            yVal: yVal,\n                            id: Utils_1.Utils.getUid()\n                        });\n                        xVal++;\n                    }\n                } else {\n                    data = newData;\n                }\n                return data;\n            };\n            return Trend;\n        }();\n        exports.Trend = Trend;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        function deepmerge(target, src, mergeArrays) {\n            if (mergeArrays === void 0) {\n                mergeArrays = true;\n            }\n            var array = Array.isArray(src);\n            var dst = array && [] || {};\n            if (array) {\n                target = target || [];\n                if (mergeArrays) {\n                    dst = dst.concat(target);\n                }\n                src.forEach(function(e, i) {\n                    if (typeof dst[i] === \"undefined\") {\n                        dst[i] = e;\n                    } else if (typeof e === \"object\") {\n                        dst[i] = deepmerge(target[i], e, mergeArrays);\n                    } else {\n                        if (target.indexOf(e) === -1) {\n                            dst.push(e);\n                        }\n                    }\n                });\n            } else {\n                if (target && typeof target === \"object\") {\n                    Object.keys(target).forEach(function(key) {\n                        dst[key] = target[key];\n                    });\n                }\n                Object.keys(src).forEach(function(key) {\n                    if (typeof src[key] !== \"object\" || !src[key]) {\n                        dst[key] = src[key];\n                    } else {\n                        if (!target[key]) {\n                            dst[key] = src[key];\n                        } else {\n                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n                        }\n                    }\n                });\n            }\n            return dst;\n        }\n        var Utils = function() {\n            function Utils() {}\n            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n                return deepmerge(obj1, obj2, mergeArrays);\n            };\n            Utils.deepCopy = function(obj) {\n                return JSON.parse(JSON.stringify(obj));\n            };\n            Utils.toFixed = function(num, digitsCount) {\n                var maxDigits = 15;\n                var result = \"\";\n                var intVal = Math.floor(num);\n                var intStr = intVal.toString();\n                var lengthDiff = digitsCount - intStr.length;\n                if (lengthDiff > 0) {\n                    result = \"0\".repeat(lengthDiff) + intStr;\n                } else {\n                    result = intStr;\n                }\n                var afterPointDigitsCount = maxDigits - intStr.length;\n                var afterPointStr = num.toString().split(\".\")[1];\n                if (afterPointStr) {\n                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n                }\n                return result;\n            };\n            Utils.bindEvent = function() {};\n            Utils.createTexture = function(width, height, fn) {\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = width;\n                canvas.height = height;\n                var ctx = canvas.getContext(\"2d\");\n                fn(ctx);\n                var texture = new THREE.Texture(canvas);\n                texture.needsUpdate = true;\n                return texture;\n            };\n            Utils.createPixelPerfectTexture = function(width, height, fn) {\n                var texture = this.createTexture(width, height, fn);\n                texture.minFilter = THREE.NearestFilter;\n                return texture;\n            };\n            Utils.error = function(msg) {\n                console.error(\"Chart error: \" + msg);\n                throw \"Chart: \" + msg;\n            };\n            Utils.warn = function(msg) {\n                console.warn(\"Chart warning: \" + msg);\n            };\n            Utils.getUid = function() {\n                return this.currentId++;\n            };\n            Utils.getDistance = function(num1, num2) {\n                return Math.max(num1, num2) - Math.min(num1, num2);\n            };\n            Utils.binarySearchClosestInd = function(arr, num, key) {\n                var mid;\n                var lo = 0;\n                var hi = arr.length - 1;\n                while (hi - lo > 1) {\n                    mid = Math.floor((lo + hi) / 2);\n                    if (arr[mid][key] < num) {\n                        lo = mid;\n                    } else {\n                        hi = mid;\n                    }\n                }\n                if (num - arr[lo][key] <= arr[hi][key] - num) {\n                    return lo;\n                }\n                return hi;\n            };\n            Utils.binarySearchClosest = function(arr, num, key) {\n                var ind = this.binarySearchClosestInd(arr, num, key);\n                return arr[ind];\n            };\n            Utils.rectsIntersect = function(r1, r2) {\n                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n            };\n            Utils.throttle = function(func, ms) {\n                var isThrottled = false, savedArgs, savedThis;\n                function wrapper() {\n                    if (isThrottled) {\n                        savedArgs = arguments;\n                        savedThis = this;\n                        return;\n                    }\n                    func.apply(this, arguments);\n                    isThrottled = true;\n                    setTimeout(function() {\n                        isThrottled = false;\n                        if (savedArgs) {\n                            wrapper.apply(savedThis, savedArgs);\n                            savedArgs = savedThis = null;\n                        }\n                    }, ms);\n                }\n                return wrapper;\n            };\n            Utils.msToTimeString = function(timestamp) {\n                var h = Math.floor(timestamp / 36e4);\n                var m = Math.floor(timestamp / 6e4);\n                var s = Math.floor(timestamp / 1e3);\n                return h + \":\" + m + \":\" + s;\n            };\n            Utils.getRandomItem = function(arr) {\n                var ind = Math.floor(Math.random() * arr.length);\n                return arr[ind];\n            };\n            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n                if (excludeProps === void 0) {\n                    excludeProps = [];\n                }\n                for (var key in props) {\n                    if (excludeProps.indexOf(key) !== -1) continue;\n                    if (srcObject[key] == void 0) continue;\n                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n                    } else {\n                        dstObject[key] = this.deepCopy(srcObject[key]);\n                    }\n                }\n            };\n            Utils.currentId = 1;\n            return Utils;\n        }();\n        exports.Utils = Utils;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var EventEmmiter_1 = __webpack_require__(16);\n        var Vector3 = THREE.Vector3;\n        var Trend_1 = __webpack_require__(13);\n        var Utils_1 = __webpack_require__(14);\n        var MAX_ANIMATED_SEGMENTS = 100;\n        var EVENTS = {\n            REBUILD: \"rebuild\",\n            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n            ANIMATION_FRAME: \"animationFrame\"\n        };\n        var TrendSegmentsManager = function() {\n            function TrendSegmentsManager(chartState, trend) {\n                this.segmentsById = {};\n                this.segments = [];\n                this.animatedSegmentsIds = [];\n                this.segmentsLength = 0;\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForPrepend = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.trend = trend;\n                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n                this.tryToRebuildSegments();\n                this.bindEvents();\n            }\n            TrendSegmentsManager.prototype.bindEvents = function() {\n                var _this = this;\n                this.trend.onChange(function(changedOptions, newData) {\n                    return _this.onTrendChangeHandler(changedOptions, newData);\n                });\n                this.chartState.onZoom(function() {\n                    return _this.onZoomHandler();\n                });\n                this.chartState.onScroll(function() {\n                    return _this.recalculateDisplayedRange();\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            TrendSegmentsManager.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.appendAnimation && this.appendAnimation.kill();\n                this.prependAnimation && this.prependAnimation.kill();\n            };\n            TrendSegmentsManager.prototype.onZoomHandler = function() {\n                var segmentsRebuilded = this.tryToRebuildSegments();\n                if (!segmentsRebuilded) {\n                    this.recalculateDisplayedRange();\n                }\n            };\n            TrendSegmentsManager.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n                if (needToRebuildSegments) {\n                    this.tryToRebuildSegments(true);\n                    return;\n                }\n                if (!newData) return;\n                var data = this.trend.getData();\n                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                isAppend ? this.appendData(newData) : this.prependData(newData);\n                this.recalculateDisplayedRange();\n            };\n            TrendSegmentsManager.prototype.getSegment = function(id) {\n                return this.segmentsById[id];\n            };\n            TrendSegmentsManager.prototype.getEndSegment = function() {\n                return this.segmentsById[this.endSegmentId];\n            };\n            TrendSegmentsManager.prototype.getStartSegment = function() {\n                return this.segmentsById[this.startSegmentId];\n            };\n            TrendSegmentsManager.prototype.tryToRebuildSegments = function(force) {\n                if (force === void 0) {\n                    force = false;\n                }\n                var options = this.trend.getOptions();\n                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n                var trendTypesSettings = options.settingsForTypes;\n                var trendTypeSettings = trendTypesSettings[trendTypeName];\n                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n                var needToRebuild = this.segments.length === 0 || force;\n                var segmentLength = this.maxSegmentLength;\n                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n                }\n                if (!needToRebuild) return false;\n                this.maxSegmentLength = segmentLength;\n                this.segmentsById = {};\n                this.segments = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.segmentsLength = 0;\n                this.stopAllAnimations();\n                this.appendData(null, true);\n                this.recalculateDisplayedRange(true);\n                this.ee.emit(EVENTS.REBUILD);\n            };\n            TrendSegmentsManager.prototype.stopAllAnimations = function() {\n                this.animatedSegmentsIds = [];\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForAppend = [];\n                if (this.prependAnimation) this.prependAnimation.kill();\n                if (this.appendAnimation) this.appendAnimation.kill();\n            };\n            TrendSegmentsManager.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n                if (segmentsAreRebuilded === void 0) {\n                    segmentsAreRebuilded = false;\n                }\n                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n                var displayedRange = to - from;\n                this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, \"startXVal\");\n                this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n                this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, \"endXVal\");\n                this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n                if (segmentsAreRebuilded) return;\n                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n            };\n            TrendSegmentsManager.prototype.getSegmentsForXValues = function(values) {\n                var valueInd = 0;\n                var value = values[valueInd];\n                var lastValueInd = values.length - 1;\n                var results = [];\n                var segment = this.getStartSegment();\n                if (!segment.hasValue) return [];\n                while (segment) {\n                    while (value < segment.startXVal) {\n                        results.push(void 0);\n                        value = values[++valueInd];\n                    }\n                    while (value > segment.endXVal) {\n                        segment = segment.getNext();\n                        if (!segment) break;\n                    }\n                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n                    if (valueInPoint) {\n                        results.push(segment);\n                        value = values[++valueInd];\n                    }\n                    if (valueInd > lastValueInd) break;\n                }\n                return results;\n            };\n            TrendSegmentsManager.prototype.onAnimationFrame = function(cb) {\n                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n            };\n            TrendSegmentsManager.prototype.onRebuild = function(cb) {\n                return this.ee.subscribe(EVENTS.REBUILD, cb);\n            };\n            TrendSegmentsManager.prototype.onDisplayedRangeChanged = function(cb) {\n                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n            };\n            TrendSegmentsManager.prototype.allocateNextSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var prevSegment = this.segmentsById[this.endSegmentId];\n                if (prevSegment && prevSegment.hasValue) {\n                    prevSegment.nextId = id;\n                    segment.prevId = prevSegment.id;\n                }\n                this.endSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.push(segment);\n                return segment;\n            };\n            TrendSegmentsManager.prototype.allocatePrevSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var nextSegment = this.segmentsById[this.startSegmentId];\n                if (nextSegment && nextSegment.hasValue) {\n                    nextSegment.prevId = id;\n                    segment.nextId = nextSegment.id;\n                }\n                this.startSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.unshift(segment);\n                return segment;\n            };\n            TrendSegmentsManager.prototype.appendData = function(newData, needRebuildSegments) {\n                if (needRebuildSegments === void 0) {\n                    needRebuildSegments = false;\n                }\n                var trendData = this.trend.getData();\n                if (needRebuildSegments) {\n                    newData = trendData;\n                    this.animatedSegmentsForAppend = [];\n                }\n                var startItemInd = trendData.length - newData.length;\n                var segment = this.getEndSegment() || this.allocateNextSegment();\n                var initialSegment = segment.hasValue ? segment : null;\n                var initialAnimationState = segment.createAnimationState();\n                var itemInd = 0;\n                while (itemInd < newData.length) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.appendItem(item);\n                    var isLastItem = itemInd == newData.length - 1;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd++;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForAppend.length > 0) {\n                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForAppend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocateNextSegment();\n                    var prevItem = trendData[startItemInd + itemInd - 1];\n                    segment.appendItem(prevItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (needRebuildSegments) {\n                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n                        var segmentId = _a[_i];\n                        var segment_1 = this.segmentsById[segmentId];\n                        segment_1.currentAnimationState = segment_1.createAnimationState();\n                    }\n                    this.animatedSegmentsForAppend = [];\n                    return;\n                }\n                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time);\n            };\n            TrendSegmentsManager.prototype.prependData = function(newData) {\n                var trendData = this.trend.getData();\n                var segment = this.getStartSegment() || this.segmentsById[0];\n                var initialSegment = segment.hasValue ? segment : null;\n                var itemInd = newData.length - 1;\n                var initialAnimationState = segment.createAnimationState();\n                while (itemInd >= 0) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.prependItem(item);\n                    var isLastItem = itemInd == 0;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd--;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForPrepend.length > 0) {\n                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForPrepend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocatePrevSegment();\n                    var nextItem = trendData[itemInd + 1];\n                    segment.prependItem(nextItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time, true);\n            };\n            TrendSegmentsManager.prototype.animate = function(time, isPrepend) {\n                var _this = this;\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n                if (animation && animation.isActive() || time == 0) {\n                    if (animation) animation.kill();\n                    this.onAnimationFrameHandler(1, isPrepend);\n                    animatedSegmentsIds.length = 0;\n                    return;\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var ease = animationsOptions.trendChangeEase;\n                var objectToAnimate = {\n                    animationValue: 0\n                };\n                animation = TweenLite.to(objectToAnimate, time, {\n                    animationValue: 1,\n                    ease: ease\n                });\n                animation.eventCallback(\"onUpdate\", function() {\n                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animatedSegmentsIds.length = 0;\n                    _this.appendAnimation = null;\n                });\n                if (isPrepend) {\n                    this.prependAnimation = animation;\n                } else {\n                    this.appendAnimation = animation;\n                }\n            };\n            TrendSegmentsManager.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n                    var segmentId = animatedSegmentsIds_1[_i];\n                    var segment = this.segmentsById[segmentId];\n                    for (var key in segment.targetAnimationState) {\n                        var targetValue = segment.targetAnimationState[key];\n                        var initialValue = segment.initialAnimationState[key];\n                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n                        segment.currentAnimationState[key] = currentValue;\n                    }\n                }\n                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n            };\n            return TrendSegmentsManager;\n        }();\n        exports.TrendSegmentsManager = TrendSegmentsManager;\n        var TrendSegment = function() {\n            function TrendSegment(trendPoints, id) {\n                this.isCompleted = false;\n                this.items = [];\n                this.initialAnimationState = {};\n                this.targetAnimationState = {};\n                this.currentAnimationState = {};\n                this.trendSegments = trendPoints;\n                this.id = id;\n                this.maxLength = trendPoints.maxSegmentLength;\n            }\n            TrendSegment.prototype.createAnimationState = function() {\n                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n                return {\n                    xVal: xVal,\n                    yVal: yVal,\n                    startXVal: startXVal,\n                    startYVal: startYVal,\n                    endXVal: endXVal,\n                    endYVal: endYVal,\n                    maxYVal: maxYVal,\n                    minYVal: minYVal,\n                    maxLength: maxLength\n                };\n            };\n            TrendSegment.prototype.appendItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.push(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var startXVal = items[0].xVal;\n                if (item.xVal - startXVal > this.maxLength) return false;\n                items.push(item);\n                return true;\n            };\n            TrendSegment.prototype.prependItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.unshift(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var endXVal = items[items.length - 1].xVal;\n                if (endXVal - item.xVal > this.maxLength) return false;\n                items.unshift(item);\n                return true;\n            };\n            TrendSegment.prototype.complete = function() {\n                this.isCompleted = true;\n                this.recalculateItems();\n                this.items = [];\n            };\n            TrendSegment.prototype.recalculateItems = function() {\n                var items = this.items;\n                var itemsLength = items.length;\n                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n                var endItem = items[itemsLength - 1];\n                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n                var startXVal, startYVal;\n                var startItem = items[0];\n                startXVal = startItem.xVal;\n                startYVal = startItem.yVal;\n                var minX = Math.min(startXVal, endXVal);\n                var maxX = Math.max(startXVal, endXVal);\n                var middleXVal = minX + (maxX - minX) / 2;\n                var minY = Math.min(startYVal, endYVal);\n                var maxY = Math.max(startYVal, endYVal);\n                var middleYVal = minY + (maxY - minY) / 2;\n                var yVals = items.map(function(item) {\n                    return item.yVal;\n                });\n                this.startXVal = startXVal;\n                this.startYVal = startYVal;\n                this.endXVal = endXVal;\n                this.endYVal = endYVal;\n                this.xVal = middleXVal;\n                this.yVal = middleYVal;\n                this.maxYVal = Math.max.apply(Math, yVals);\n                this.minYVal = Math.min.apply(Math, yVals);\n                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n            };\n            TrendSegment.prototype.getNext = function() {\n                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n            };\n            TrendSegment.prototype.getPrev = function() {\n                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n            };\n            TrendSegment.prototype.getFrameVal = function() {\n                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n                return new Vector3(xVal, yVal, 0);\n            };\n            TrendSegment.prototype.getFramePoint = function() {\n                var frameVal = this.getFrameVal();\n                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n            };\n            return TrendSegment;\n        }();\n        exports.TrendSegment = TrendSegment;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        var EventEmitter = function() {\n            function EventEmitter() {\n                this.ee = new deps_1.EE2();\n            }\n            EventEmitter.prototype.emit = function(eventName) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n                var _a;\n            };\n            EventEmitter.prototype.on = function(eventName, callback) {\n                return this.ee.on(eventName, callback);\n            };\n            EventEmitter.prototype.off = function(eventName, callback) {\n                return this.ee.off(eventName, callback);\n            };\n            EventEmitter.prototype.subscribe = function(eventName, callback) {\n                var _this = this;\n                this.on(eventName, callback);\n                return function() {\n                    return _this.off(eventName, callback);\n                };\n            };\n            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n                this.ee.setMaxListeners(listenersCount);\n            };\n            EventEmitter.prototype.removeAllListeners = function(eventName) {\n                this.ee.removeAllListeners(eventName);\n            };\n            return EventEmitter;\n        }();\n        exports.EventEmitter = EventEmitter;\n    }, function(module, exports) {\n        \"use strict\";\n        var ChartWidget = function() {\n            function ChartWidget(chartState) {\n                this.unsubscribers = [];\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            ChartWidget.prototype.bindEvents = function() {};\n            ChartWidget.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartWidget.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartWidget.getDefaultOptions = function() {\n                return {\n                    enabled: true\n                };\n            };\n            ChartWidget.widgetName = \"\";\n            return ChartWidget;\n        }();\n        exports.ChartWidget = ChartWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Trend_1 = __webpack_require__(13);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var EVENTS = {\n            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n        };\n        var TrendsManager = function() {\n            function TrendsManager(state, initialState) {\n                this.trends = {};\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.chartState = state;\n                var trendsCalculatedOptions = {};\n                for (var trendName in initialState.trends) {\n                    var trend = this.createTrend(state, trendName, initialState);\n                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n                }\n                this.calculatedOptions = trendsCalculatedOptions;\n                this.bindEvents();\n            }\n            TrendsManager.prototype.getTrend = function(trendName) {\n                return this.trends[trendName];\n            };\n            TrendsManager.prototype.getEnabledTrends = function() {\n                var enabledTrends = [];\n                var allTrends = this.trends;\n                for (var trendName in allTrends) {\n                    var trend = allTrends[trendName];\n                    trend.getOptions().enabled && enabledTrends.push(trend);\n                }\n                return enabledTrends;\n            };\n            TrendsManager.prototype.getStartXVal = function() {\n                var trends = this.getEnabledTrends();\n                return trends[0].getData()[0].xVal;\n            };\n            TrendsManager.prototype.getEndXVal = function() {\n                var trends = this.getEnabledTrends();\n                var firstTrendData = trends[0].getData();\n                return firstTrendData[firstTrendData.length - 1].xVal;\n            };\n            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n                var trends = this.getEnabledTrends();\n                var compareFn;\n                var result;\n                if (extremumIsMax) {\n                    result = -Infinity;\n                    compareFn = Math.max;\n                } else {\n                    result = Infinity;\n                    compareFn = Math.min;\n                }\n                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n                    var trend = trends_1[_i];\n                    var trendData = trend.getData(fromX, toX);\n                    var trendYValues = trendData.map(function(dataItem) {\n                        return dataItem.yVal;\n                    });\n                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n                }\n                if (result == Infinity || result == -Infinity) result = NaN;\n                return result;\n            };\n            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n                return this.getExtremumYVal(true, fromX, toX);\n            };\n            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n                return this.getExtremumYVal(false, fromX, toX);\n            };\n            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n            };\n            TrendsManager.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateAppliedHandler();\n                });\n            };\n            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n                var _this = this;\n                var _loop_1 = function(trendName) {\n                    this_1.trends[trendName].segmentsManager.onRebuild(function() {\n                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n                    });\n                };\n                var this_1 = this;\n                for (var trendName in this.trends) {\n                    _loop_1(trendName);\n                }\n            };\n            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n                var trend = new Trend_1.Trend(state, trendName, initialState);\n                this.trends[trendName] = trend;\n                return trend;\n            };\n            return TrendsManager;\n        }();\n        exports.TrendsManager = TrendsManager;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var EventEmmiter_1 = __webpack_require__(16);\n        var Screen = function() {\n            function Screen(chartState) {\n                this.options = {\n                    scrollXVal: 0,\n                    scrollX: 0,\n                    scrollYVal: 0,\n                    scrollY: 0,\n                    zoomX: 1,\n                    zoomY: 1\n                };\n                this.currentScrollX = {\n                    x: 0\n                };\n                this.currentScrollY = {\n                    y: 0\n                };\n                this.currentZoomX = {\n                    val: 1\n                };\n                this.currentZoomY = {\n                    val: 1\n                };\n                this.chartState = chartState;\n                var _a = chartState.data, w = _a.width, h = _a.height;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.transform({\n                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n                    zoomY: 1\n                });\n                this.bindEvents();\n            }\n            Screen.prototype.getCameraSettings = function() {\n                var _a = this.chartState.data, w = _a.width, h = _a.height;\n                var FOV = 75;\n                var vFOV = FOV * (Math.PI / 180);\n                return {\n                    FOV: FOV,\n                    aspect: w / h,\n                    near: .1,\n                    far: 5e3,\n                    z: h / (2 * Math.tan(vFOV / 2)),\n                    x: w / 2,\n                    y: h / 2\n                };\n            };\n            Screen.prototype.onZoomFrame = function(cb) {\n                var _this = this;\n                var eventName = \"zoomFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onScrollFrame = function(cb) {\n                var _this = this;\n                var eventName = \"scrollFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onTransformationFrame = function(cb) {\n                var _this = this;\n                var eventName = \"transformationFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.cameraIsMoving = function() {\n                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n            };\n            Screen.prototype.transform = function(options, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n                if (scrollX != void 0) this.options.scrollX = scrollX;\n                if (scrollY != void 0) this.options.scrollY = scrollY;\n                if (zoomX != void 0) this.options.zoomX = zoomX;\n                if (zoomY != void 0) this.options.zoomY = zoomY;\n                if (scrollX != void 0 || zoomX) {\n                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n                    this.options.scrollXVal = options.scrollXVal;\n                }\n                if (scrollY != void 0 || zoomY) {\n                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n                    this.options.scrollYVal = options.scrollYVal;\n                }\n                if (silent) return;\n                this.ee.emit(\"transformationFrame\", options);\n                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n                    this.ee.emit(\"scrollFrame\", options);\n                }\n                if (options.zoomX != void 0 || options.zoomY != void 0) {\n                    this.ee.emit(\"zoomFrame\", options);\n                }\n            };\n            Screen.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onChange(function(changedProps) {\n                    if (changedProps.xAxis && changedProps.xAxis.range) {\n                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n                    }\n                    if (changedProps.yAxis && changedProps.yAxis.range) {\n                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n                    }\n                });\n                state.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            Screen.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.scrollXAnimation && this.scrollXAnimation.kill();\n                this.scrollYAnimation && this.scrollYAnimation.kill();\n                this.zoomXAnimation && this.zoomXAnimation.kill();\n                this.zoomYAnimation && this.zoomYAnimation.kill();\n            };\n            Screen.prototype.onScrollXHandler = function(changedProps) {\n                var _this = this;\n                var state = this.chartState;\n                var isDragMode = state.data.cursor.dragMode;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled && !isDragMode;\n                var zoomXChanged = changedProps.xAxis.range.zoom;\n                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n                var range = state.data.xAxis.range;\n                var targetX = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollX.x = this.options.scrollX;\n                var cb = function() {\n                    _this.transform({\n                        scrollX: _this.currentScrollX.x\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n                        x: targetX,\n                        ease: ease\n                    });\n                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollX.x = targetX;\n                    cb();\n                }\n            };\n            Screen.prototype.onScrollYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n                var range = state.data.yAxis.range;\n                var targetY = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollY.y = this.options.scrollY;\n                var cb = function() {\n                    _this.transform({\n                        scrollY: _this.currentScrollY.y\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n                        y: targetY,\n                        ease: animations.zoomEase\n                    });\n                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollY.y = targetY;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomXHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.xAxis.range.zoom;\n                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomX: _this.currentZoomX.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomX.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.yAxis.range.zoom;\n                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomY: _this.currentZoomY.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomY.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomX;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomY;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            Screen.prototype.getValueOnXAxis = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n            };\n            Screen.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n            };\n            Screen.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n            };\n            Screen.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n            };\n            Screen.prototype.getValueByScreenX = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.getValueByScreenY = function(y) {\n                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n            };\n            Screen.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            Screen.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            Screen.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            Screen.prototype.getPointByScreenY = function(screenY) {\n                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n            };\n            Screen.prototype.getTop = function() {\n                return this.getPointByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottom = function() {\n                return this.getPointByScreenY(0);\n            };\n            Screen.prototype.getLeft = function() {\n                return this.getPointByScreenX(0);\n            };\n            Screen.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.chartState.data.width);\n            };\n            Screen.prototype.getTopVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottomVal = function() {\n                return this.getValueByScreenY(0);\n            };\n            Screen.prototype.getCenterYVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height / 2);\n            };\n            return Screen;\n        }();\n        exports.Screen = Screen;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var AXIS_MARK_DEFAULT_OPTIONS = {\n            type: \"simple\",\n            lineWidth: 1,\n            value: 0,\n            showValue: false,\n            stickToEdges: false,\n            lineColor: \"#FFFFFF\",\n            title: \"\"\n        };\n        var AxisMarks = function() {\n            function AxisMarks(chartState, axisType) {\n                this.items = {};\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.axisType = axisType;\n                var marks = this.items;\n                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n                    var options = axisMarksOptions_1[_i];\n                    var axisMark = void 0;\n                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n                    if (options.type == \"timeleft\") {\n                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n                    } else {\n                        axisMark = new AxisMark(chartState, axisType, options);\n                    }\n                    marks[options.name] = axisMark;\n                }\n                this.bindEvents();\n            }\n            AxisMarks.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, newData);\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n                if (!newData) return;\n                var startVal = newData[0].xVal;\n                var endVal = newData[newData.length - 1].xVal;\n                var marks = this.items;\n                for (var markName in marks) {\n                    var mark = marks[markName];\n                    var markVal = mark.options.value;\n                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n                }\n            };\n            AxisMarks.prototype.getItems = function() {\n                return this.items;\n            };\n            AxisMarks.prototype.getItem = function(markName) {\n                return this.items[markName];\n            };\n            return AxisMarks;\n        }();\n        exports.AxisMarks = AxisMarks;\n        var AxisMark = function() {\n            function AxisMark(chartState, axisType, options) {\n                this.renderOnTrendsChange = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.options = options;\n                this.axisType = axisType;\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            AxisMark.prototype.bindEvents = function() {};\n            AxisMark.prototype.setOptions = function(newOptions) {\n                var value = this.options.value;\n                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisMark.prototype.getDisplayedVal = function() {\n                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n                return String(displayedValue !== void 0 ? displayedValue : value);\n            };\n            AxisMark.prototype.onMarkCrossed = function(cb) {\n                var _this = this;\n                this.ee.on(\"markCrossed\", cb);\n                return function() {\n                    _this.ee.off(\"markCrossed\", cb);\n                };\n            };\n            AxisMark.prototype.onValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"valueChange\", cb);\n                return function() {\n                    _this.ee.off(\"valueChange\", cb);\n                };\n            };\n            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"onDisplayedValueChange\", cb);\n                return function() {\n                    _this.ee.off(\"onDisplayedValueChange\", cb);\n                };\n            };\n            AxisMark.typeName = \"simple\";\n            return AxisMark;\n        }();\n        exports.AxisMark = AxisMark;\n        var AxisTimeleftMark = function(_super) {\n            __extends(AxisTimeleftMark, _super);\n            function AxisTimeleftMark() {\n                _super.apply(this, arguments);\n                this.renderOnTrendsChange = true;\n            }\n            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n                var markVal = this.options.value;\n                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n                var time = markVal - maxXVal;\n                if (time < 0) time = 0;\n                return Utils_1.Utils.msToTimeString(time);\n            };\n            AxisTimeleftMark.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n            };\n            AxisTimeleftMark.prototype.onTrendsChange = function() {\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisTimeleftMark.typeName = \"timeleft\";\n            return AxisTimeleftMark;\n        }(AxisMark);\n        exports.AxisTimeleftMark = AxisTimeleftMark;\n    }, function(module, exports) {\n        \"use strict\";\n        (function(AXIS_RANGE_TYPE) {\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n        (function(AXIS_TYPE) {\n            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n        var AXIS_TYPE = exports.AXIS_TYPE;\n        (function(AXIS_DATA_TYPE) {\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Mesh = THREE.Mesh;\n        var Object3D = THREE.Object3D;\n        var Widget_1 = __webpack_require__(17);\n        var GridWidget_1 = __webpack_require__(23);\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var AxisWidget = function(_super) {\n            __extends(AxisWidget, _super);\n            function AxisWidget(state) {\n                var _this = this;\n                _super.call(this, state);\n                this.isDestroyed = false;\n                this.object3D = new Object3D();\n                this.axisXObject = new Object3D();\n                this.axisYObject = new Object3D();\n                this.object3D.add(this.axisXObject);\n                this.object3D.add(this.axisYObject);\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }, 1e3);\n                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n            }\n            AxisWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n                    _this.onScrollChange(options.scrollX, options.scrollY);\n                }), state.screen.onZoomFrame(function(options) {\n                    _this.onZoomFrame(options);\n                }), state.onDestroy(function() {\n                    return _this.onDestroy();\n                }), state.onResize(function() {\n                    return _this.onResize();\n                }));\n            };\n            AxisWidget.prototype.onDestroy = function() {\n                this.isDestroyed = true;\n                this.unbindEvents();\n            };\n            AxisWidget.prototype.onScrollChange = function(x, y) {\n                if (y != void 0) {\n                    this.axisYObject.position.y = y;\n                    this.axisXObject.position.y = y;\n                }\n                if (x != void 0) {\n                    this.axisYObject.position.x = x;\n                    this.updateAxisXRequest();\n                }\n            };\n            AxisWidget.prototype.onResize = function() {\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n            };\n            AxisWidget.prototype.setupAxis = function(orientation) {\n                var _this = this;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var canvasWidth = 0, canvasHeight = 0;\n                if (isXAxis) {\n                    this.axisXObject.traverse(function(obj) {\n                        return _this.axisXObject.remove(obj);\n                    });\n                    canvasWidth = visibleWidth * 3;\n                    canvasHeight = 50;\n                } else {\n                    this.axisYObject.traverse(function(obj) {\n                        return _this.axisYObject.remove(obj);\n                    });\n                    canvasWidth = 50;\n                    canvasHeight = visibleHeight * 3;\n                }\n                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n                if (isXAxis) {\n                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisXObject.add(axisMesh);\n                } else {\n                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisYObject.add(axisMesh);\n                }\n                this.updateAxis(orientation);\n            };\n            AxisWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisWidget.prototype.updateAxis = function(orientation) {\n                if (this.isDestroyed) return;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n                var axisOptions;\n                var axisMesh;\n                var axisGridParams;\n                if (isXAxis) {\n                    axisMesh = this.axisXObject.children[0];\n                    axisOptions = this.chartState.data.xAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n                } else {\n                    axisMesh = this.axisYObject.children[0];\n                    axisOptions = this.chartState.data.yAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n                }\n                var geometry = axisMesh.geometry;\n                var canvasWidth = geometry.parameters.width;\n                var canvasHeight = geometry.parameters.height;\n                var texture = axisMesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                if (isXAxis) {\n                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n                }\n                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n                var startVal = axisGridParams.start - edgeOffset;\n                var endVal = axisGridParams.end + edgeOffset;\n                ctx.beginPath();\n                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n                    var displayedValue = \"\";\n                    if (isXAxis) {\n                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n                        ctx.textAlign = \"center\";\n                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n                        } else {\n                            displayedValue = Number(val.toFixed(14)).toString();\n                        }\n                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n                    } else {\n                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n                        ctx.textAlign = \"right\";\n                        displayedValue = Number(val.toFixed(14)).toString();\n                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n                    }\n                    ctx.stroke();\n                }\n                ctx.stroke();\n                ctx.closePath();\n                texture.needsUpdate = true;\n            };\n            AxisWidget.prototype.onZoomFrame = function(options) {\n                if (options.zoomX) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }\n                if (options.zoomY) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n                }\n            };\n            AxisWidget.getDateStr = function(timestamp, gridParams) {\n                var sec = 1e3;\n                var min = sec * 60;\n                var hour = min * 60;\n                var day = hour * 60;\n                var step = gridParams.step;\n                var d = new Date(timestamp);\n                var tf = function(num) {\n                    return Utils_1.Utils.toFixed(num, 2);\n                };\n                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n            };\n            AxisWidget.widgetName = \"Axis\";\n            return AxisWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisWidget = AxisWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Vector3 = THREE.Vector3;\n        var Widget_1 = __webpack_require__(17);\n        var LineSegments = THREE.LineSegments;\n        var Utils_1 = __webpack_require__(14);\n        var GridWidget = function(_super) {\n            __extends(GridWidget, _super);\n            function GridWidget(chartState) {\n                _super.call(this, chartState);\n                this.isDestroyed = false;\n                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n                this.initGrid();\n                this.updateGrid();\n            }\n            GridWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n                    return _this.updateGrid();\n                }, 1e3);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return updateGridThrottled();\n                }), this.chartState.screen.onZoomFrame(function(options) {\n                    updateGridThrottled();\n                    _this.onZoomFrame(options);\n                }), this.chartState.onDestroy(function() {\n                    _this.isDestroyed = true;\n                    _this.unbindEvents();\n                }), this.chartState.onResize(function() {\n                    _this.updateGrid();\n                }));\n            };\n            GridWidget.prototype.initGrid = function() {\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: .1,\n                    transparent: true\n                });\n                var xLinesCount = this.gridSizeH;\n                var yLinesCount = this.gridSizeV;\n                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                this.lineSegments = new LineSegments(geometry, material);\n                this.lineSegments.position.setZ(-1);\n                this.lineSegments.frustumCulled = false;\n            };\n            GridWidget.prototype.updateGrid = function() {\n                if (this.isDestroyed) return;\n                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n                var startXVal = axisXGrid.start + gridScrollXVal;\n                var startYVal = axisYGrid.start + gridScrollYVal;\n                var geometry = this.lineSegments.geometry;\n                var vertices = geometry.vertices;\n                var lineInd = 0;\n                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n                    var value = startXVal + i * axisXGrid.step;\n                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n                    var value = startYVal + i * axisYGrid.step;\n                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                geometry.verticesNeedUpdate = true;\n                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n            };\n            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n            };\n            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n            };\n            GridWidget.prototype.onZoomFrame = function(options) {\n                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n            };\n            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n                var axisRange = axisOptions.range;\n                var from = axisRange.from;\n                var to = axisRange.to;\n                var axisLength = to - from;\n                var gridStep = 0;\n                var gridStepInPixels = 0;\n                var minGridStepInPixels = axisOptions.gridMinSize;\n                var axisLengthStr = String(axisLength);\n                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n                var gridStepFound = false;\n                var digitPos = 0;\n                while (!gridStepFound) {\n                    var power = intPartLength - digitPos - 1;\n                    var multiplier = Math.pow(10, power) || 1;\n                    var dividers = [ 1, 2, 5 ];\n                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n                        var nextGridStep = multiplier / dividers[dividerInd];\n                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n                        if (nextGridStepInPixels >= minGridStepInPixels) {\n                            gridStep = nextGridStep;\n                            gridStepInPixels = nextGridStepInPixels;\n                        } else {\n                            gridStepFound = true;\n                            if (gridStep === 0) {\n                                gridStep = nextGridStep;\n                                gridStepInPixels = nextGridStepInPixels;\n                            }\n                            break;\n                        }\n                    }\n                    if (!gridStepFound) digitPos++;\n                }\n                var gridStart = Math.floor(from / gridStep) * gridStep;\n                var gridEnd = Math.floor(to / gridStep) * gridStep;\n                return {\n                    start: gridStart,\n                    end: gridEnd,\n                    step: gridStep,\n                    stepInPx: gridStepInPixels,\n                    length: gridEnd - gridStart,\n                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n                };\n            };\n            GridWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            GridWidget.widgetName = \"Grid\";\n            return GridWidget;\n        }(Widget_1.ChartWidget);\n        exports.GridWidget = GridWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Geometry = THREE.Geometry;\n        var Utils_1 = __webpack_require__(14);\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Color_1 = __webpack_require__(26);\n        var TrendsGradientWidget = function(_super) {\n            __extends(TrendsGradientWidget, _super);\n            function TrendsGradientWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsGradientWidget.prototype.getTrendWidgetClass = function() {\n                return TrendGradient;\n            };\n            TrendsGradientWidget.widgetName = \"TrendsGradient\";\n            return TrendsGradientWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsGradientWidget = TrendsGradientWidget;\n        var TrendGradient = function(_super) {\n            __extends(TrendGradient, _super);\n            function TrendGradient(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.visibleSegmentsCnt = 0;\n                this.trend = chartState.trendsManager.getTrend(trendName);\n                this.segmentsIds = new Uint16Array(chartState.data.maxVisibleSegments);\n                this.initGradient();\n                this.updateSegments();\n            }\n            TrendGradient.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasBackground;\n            };\n            TrendGradient.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n                    _this.updateSegments();\n                }));\n                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n                    _this.updateSegments();\n                }));\n                this.bindEvent(this.chartState.onZoom(function() {\n                    _this.updateSegments();\n                }));\n            };\n            TrendGradient.prototype.getObject3D = function() {\n                return this.gradient;\n            };\n            TrendGradient.prototype.initGradient = function() {\n                var geometry = new Geometry();\n                for (var i = 0; i < this.segmentsIds.length; i++) {\n                    geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\n                    var ind = i * 4;\n                    geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\n                }\n                var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\n                this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n                    color: color.value,\n                    transparent: true,\n                    opacity: color.a\n                }));\n                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.gradient.frustumCulled = false;\n            };\n            TrendGradient.prototype.onZoomFrame = function(options) {\n                var state = this.chartState.data;\n                var scaleXFactor = state.xAxis.range.scaleFactor;\n                var scaleYFactor = state.yAxis.range.scaleFactor;\n                var currentScale = this.gradient.scale;\n                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n            };\n            TrendGradient.prototype.onSegmentsAnimate = function(trendSegmentsManager) {\n                var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n                for (var i = 0; i < this.visibleSegmentsCnt; i++) {\n                    var segmentId = this.segmentsIds[i];\n                    if (!animatedSegmentsIds.includes(segmentId)) continue;\n                    this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n                }\n                this.gradient.geometry.verticesNeedUpdate = true;\n            };\n            TrendGradient.prototype.updateSegments = function() {\n                var geometry = this.gradient.geometry;\n                var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\n                var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n                this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n                var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n                if (segmentsToProcessCnt > this.segmentsIds.length) {\n                    Utils_1.Utils.error(TrendsGradientWidget.widgetName + \": MAX_SEGMENTS reached\");\n                }\n                for (var i = 0; i <= segmentsToProcessCnt; i++) {\n                    if (segmentInd <= lastDisplayedSegmentInd) {\n                        var segment = trendSegments[segmentInd];\n                        this.setupSegmentVertices(i, segment.currentAnimationState);\n                        this.segmentsIds[i] = segment.id;\n                        segmentInd++;\n                    } else {\n                        this.setupSegmentVertices(i);\n                    }\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendGradient.prototype.setupSegmentVertices = function(segmentInd, segmentState) {\n                var gradientSegmentInd = segmentInd * 4;\n                var vertices = this.gradient.geometry.vertices;\n                var topLeft = vertices[gradientSegmentInd];\n                var bottomLeft = vertices[gradientSegmentInd + 1];\n                var bottomRight = vertices[gradientSegmentInd + 2];\n                var topRight = vertices[gradientSegmentInd + 3];\n                var screenHeightVal = Math.max(this.chartState.pxToValueByYAxis(this.chartState.data.height), this.chartState.screen.pxToValueByYAxis(this.chartState.data.height));\n                if (segmentState) {\n                    var startX = this.toLocalX(segmentState.startXVal);\n                    var startY = this.toLocalY(segmentState.startYVal);\n                    var endX = this.toLocalX(segmentState.endXVal);\n                    var endY = this.toLocalY(segmentState.endYVal);\n                    topLeft.set(startX, startY, 0);\n                    topRight.set(endX, endY, 0);\n                    bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n                    bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n                } else {\n                    topLeft.set(0, 0, 0);\n                    topRight.set(0, 0, 0);\n                    bottomLeft.set(0, 0, 0);\n                    bottomRight.set(0, 0, 0);\n                }\n            };\n            TrendGradient.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendGradient.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            return TrendGradient;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendGradient = TrendGradient;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(17);\n        var Object3D = THREE.Object3D;\n        var TrendsWidget = function(_super) {\n            __extends(TrendsWidget, _super);\n            function TrendsWidget(state) {\n                _super.call(this, state);\n                this.widgets = {};\n                this.object3D = new Object3D();\n                this.onTrendsChange();\n            }\n            TrendsWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n                state.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, changedOptions, newData);\n                });\n            };\n            TrendsWidget.prototype.onTrendsChange = function() {\n                var trendsOptions = this.chartState.data.trends;\n                var TrendWidgetClass = this.getTrendWidgetClass();\n                for (var trendName in trendsOptions) {\n                    var trendOptions = trendsOptions[trendName];\n                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n                        this.createTrendWidget(trendName);\n                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n                        this.destroyTrendWidget(trendName);\n                    }\n                }\n            };\n            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n                var widget = this.widgets[trendName];\n                if (!widget) return;\n                widget.onTrendChange(changedOptions);\n                if (newData) {\n                    var data = this.chartState.getTrend(trendName).getData();\n                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n                }\n            };\n            TrendsWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n                var WidgetConstructor = this.getTrendWidgetClass();\n                var widget = new WidgetConstructor(this.chartState, trendName);\n                this.widgets[trendName] = widget;\n                var widgetObject = widget.getObject3D();\n                widgetObject.name = trendName;\n                this.object3D.add(widget.getObject3D());\n            };\n            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n                this.widgets[trendName].onDestroy();\n                delete this.widgets[trendName];\n                var widgetObject = this.object3D.getObjectByName(trendName);\n                this.object3D.remove(widgetObject);\n            };\n            return TrendsWidget;\n        }(Widget_1.ChartWidget);\n        exports.TrendsWidget = TrendsWidget;\n        var TrendWidget = function() {\n            function TrendWidget(chartState, trendName) {\n                this.chartState = chartState;\n                this.trendName = trendName;\n                this.unsubscribers = [];\n                this.trend = chartState.trendsManager.getTrend(trendName);\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled;\n            };\n            TrendWidget.prototype.appendData = function(newData) {};\n            TrendWidget.prototype.prependData = function(newData) {};\n            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n            TrendWidget.prototype.onDestroy = function() {\n                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n                    var unsubscriber = _a[_i];\n                    unsubscriber();\n                }\n            };\n            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n            TrendWidget.prototype.onZoomFrame = function(options) {};\n            TrendWidget.prototype.onTransformationFrame = function(options) {};\n            TrendWidget.prototype.onZoom = function() {};\n            TrendWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function(trendPoints) {\n                    return _this.onSegmentsAnimate(trendPoints);\n                }));\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n                    return _this.onTransformationFrame(options);\n                }));\n                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n                    return _this.onZoomFrame(options);\n                }));\n                this.bindEvent(this.chartState.onZoom(function() {\n                    return _this.onZoom();\n                }));\n            };\n            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n                this.unsubscribers.push(unsubscriber);\n            };\n            return TrendWidget;\n        }();\n        exports.TrendWidget = TrendWidget;\n    }, function(module, exports) {\n        \"use strict\";\n        var ChartColor = function() {\n            function ChartColor(color) {\n                this.set(color);\n            }\n            /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\n            ChartColor.parseColor = function(color) {\n                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4] ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by parseColor\");\n                isNaN(cache[3]) && (cache[3] = 1);\n                return cache;\n            };\n            ChartColor.prototype.set = function(color) {\n                if (typeof color == \"number\") color = \"#\" + color.toString(16);\n                var colorStr = color;\n                var rgba = ChartColor.parseColor(colorStr);\n                this.r = rgba[0];\n                this.g = rgba[1];\n                this.b = rgba[2];\n                this.a = rgba[3];\n                this.value = (rgba[0] << 8 * 2) + (rgba[1] << 8) + rgba[2];\n                this.hexStr = \"#\" + this.value.toString(16);\n                this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\n            };\n            return ChartColor;\n        }();\n        exports.ChartColor = ChartColor;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(13);\n        var TrendsLoadingWidget = function(_super) {\n            __extends(TrendsLoadingWidget, _super);\n            function TrendsLoadingWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLoading;\n            };\n            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n            return TrendsLoadingWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n        var TrendLoading = function(_super) {\n            __extends(TrendLoading, _super);\n            function TrendLoading(state, trendName) {\n                _super.call(this, state, trendName);\n                this.isActive = false;\n                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendLoading.createTexture(),\n                    transparent: true\n                }));\n                this.deactivate();\n            }\n            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled && chartState.data.animations.enabled;\n            };\n            TrendLoading.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendLoading.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.onPrependRequest(function() {\n                    return _this.activate();\n                }));\n            };\n            TrendLoading.prototype.prependData = function() {\n                this.deactivate();\n            };\n            TrendLoading.prototype.activate = function() {\n                var mesh = this.mesh;\n                mesh.material.opacity = 1;\n                mesh.rotation.z = 0;\n                var animation = TweenLite.to(this.mesh.rotation, .5, {\n                    z: Math.PI * 2\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animation.restart();\n                });\n                this.animation = animation;\n                this.isActive = true;\n                this.updatePosition();\n            };\n            TrendLoading.prototype.deactivate = function() {\n                this.animation && this.animation.kill();\n                this.mesh.material.opacity = 0;\n                this.isActive = false;\n            };\n            TrendLoading.createTexture = function() {\n                var h = 64, w = 64;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                    ctx.lineWidth = 5;\n                    var center = h / 2;\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n                    ctx.stroke();\n                });\n            };\n            TrendLoading.prototype.onZoomFrame = function() {\n                this.updatePosition();\n            };\n            TrendLoading.prototype.updatePosition = function() {\n                if (!this.isActive) return;\n                var trend = this.trend;\n                var segment = trend.segmentsManager.getStartSegment();\n                var x, y;\n                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    x = segment.currentAnimationState.startXVal;\n                    y = segment.currentAnimationState.startYVal;\n                } else {\n                    x = segment.currentAnimationState.xVal - segment.maxLength;\n                    y = segment.currentAnimationState.yVal;\n                }\n                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n            };\n            return TrendLoading;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLoading = TrendLoading;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(17);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var Utils_1 = __webpack_require__(14);\n        var Line = THREE.Line;\n        var Mesh = THREE.Mesh;\n        var interfaces_1 = __webpack_require__(21);\n        var Color_1 = __webpack_require__(26);\n        var AxisMarksWidget = function(_super) {\n            __extends(AxisMarksWidget, _super);\n            function AxisMarksWidget(chartState) {\n                _super.call(this, chartState);\n                this.axisMarksWidgets = [];\n                this.object3D = new Object3D();\n                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n                var items = xAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n                items = yAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n            }\n            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n                this.axisMarksWidgets.push(axisMarkWidget);\n                this.object3D.add(axisMarkWidget.getObject3D());\n            };\n            AxisMarksWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n                    return _this.updateMarksPositions();\n                }), this.chartState.onResize(function() {\n                    return _this.updateMarksPositions();\n                }));\n            };\n            AxisMarksWidget.prototype.updateMarksPositions = function() {\n                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n                    var widget = _a[_i];\n                    widget.updatePosition();\n                }\n            };\n            AxisMarksWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarksWidget.widgetName = \"AxisMarks\";\n            return AxisMarksWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisMarksWidget = AxisMarksWidget;\n        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n            var axisMark = axisMarkWidget.axisMark;\n            ctx.fillStyle = axisMark.options.lineColor;\n            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n            var xCoord = 15;\n            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n                ctx.textAlign = \"end\";\n                xCoord = axisMarkWidget.indicatorWidth;\n            }\n            ctx.fillText(axisMark.options.title, xCoord, 20);\n            if (!axisMark.options.showValue) return;\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n        };\n        var INDICATOR_POS_Z = .1;\n        var AxisMarkWidget = function() {\n            function AxisMarkWidget(chartState, axisMark) {\n                this.indicatorWidth = 128;\n                this.indicatorHeight = 64;\n                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n                this.chartState = chartState;\n                this.axisMark = axisMark;\n                this.axisType = axisMark.axisType;\n                this.frameValue = axisMark.options.value;\n                this.object3D = new Object3D();\n                this.object3D.position.setZ(-.1);\n                this.line = this.createLine();\n                this.object3D.add(this.line);\n                this.indicator = this.createIndicator();\n                this.object3D.add(this.indicator);\n                this.renderIndicator();\n                this.updatePosition();\n                this.bindEvents();\n            }\n            AxisMarkWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarkWidget.prototype.createLine = function() {\n                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n                var lineGeometry = new Geometry();\n                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n                return new Line(lineGeometry, new LineBasicMaterial({\n                    color: new Color_1.ChartColor(lineColor).value,\n                    linewidth: lineWidth\n                }));\n            };\n            AxisMarkWidget.prototype.createIndicator = function() {\n                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n            };\n            AxisMarkWidget.prototype.renderIndicator = function() {\n                var texture = this.indicator.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n                texture.needsUpdate = true;\n            };\n            AxisMarkWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.axisMark.onDisplayedValueChange(function() {\n                    return _this.renderIndicator();\n                });\n                this.axisMark.onValueChange(function() {\n                    return _this.onValueChangeHandler();\n                });\n            };\n            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n                var _this = this;\n                if (this.moveAnimation) this.moveAnimation.kill();\n                var animations = this.chartState.data.animations;\n                var targetValue = this.axisMark.options.value;\n                var cb = function() {\n                    _this.updatePosition();\n                };\n                if (animations.enabled) {\n                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n                        frameValue: targetValue,\n                        ease: animations.trendChangeEase\n                    });\n                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.frameValue = targetValue;\n                    cb();\n                }\n            };\n            AxisMarkWidget.prototype.updatePosition = function() {\n                var chartState = this.chartState;\n                var screen = chartState.screen;\n                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n                var lineGeometry = this.line.geometry;\n                var hasStickMode = this.axisMark.options.stickToEdges;\n                var _a = this.chartState.data, width = _a.width, height = _a.height;\n                if (isXAxis) {\n                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n                    this.object3D.position.y = screen.getBottom();\n                    lineGeometry.vertices[1].setY(height);\n                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n                } else {\n                    var val = this.frameValue;\n                    var bottomVal = screen.getBottomVal();\n                    var topVal = screen.getTopVal();\n                    var needToStickOnTop = hasStickMode && val > topVal;\n                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n                    var centerYVal = screen.getCenterYVal();\n                    this.object3D.position.x = screen.getLeft();\n                    if (needToStickOnTop) {\n                        this.object3D.position.y = screen.getTop();\n                    } else if (needToStickOnBottom) {\n                        this.object3D.position.y = screen.getBottom();\n                    } else {\n                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n                    }\n                    lineGeometry.vertices[1].setX(width);\n                    var indicatorPosY = val > centerYVal ? -35 : 10;\n                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n                }\n                lineGeometry.verticesNeedUpdate = true;\n            };\n            AxisMarkWidget.typeName = \"simple\";\n            return AxisMarkWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(17);\n        var LineSegments = THREE.LineSegments;\n        var Vector3 = THREE.Vector3;\n        var BorderWidget = function(_super) {\n            __extends(BorderWidget, _super);\n            function BorderWidget(chartState) {\n                _super.call(this, chartState);\n                var _a = chartState.data, width = _a.width, height = _a.height;\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: 0,\n                    transparent: true\n                });\n                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n                this.lineSegments = new LineSegments(geometry, material);\n            }\n            BorderWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            BorderWidget.widgetName = \"Border\";\n            return BorderWidget;\n        }(Widget_1.ChartWidget);\n        exports.BorderWidget = BorderWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Color_1 = __webpack_require__(26);\n        var CANVAS_WIDTH = 128;\n        var CANVAS_HEIGHT = 64;\n        var OFFSET_X = 15;\n        var TrendsIndicatorWidget = function(_super) {\n            __extends(TrendsIndicatorWidget, _super);\n            function TrendsIndicatorWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n                return TrendIndicator;\n            };\n            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n            return TrendsIndicatorWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n        var TrendIndicator = function(_super) {\n            __extends(TrendIndicator, _super);\n            function TrendIndicator(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                this.onTrendChange();\n            }\n            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasIndicator;\n            };\n            TrendIndicator.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendIndicator.prototype.onTrendChange = function() {\n                var trendData = this.trend.getData();\n                var lastItem = trendData[trendData.length - 1];\n                var texture = this.mesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n                texture.needsUpdate = true;\n            };\n            TrendIndicator.prototype.initObject = function() {\n                var color = new Color_1.ChartColor(this.trend.getOptions().lineColor);\n                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"15px Arial\";\n                    ctx.fillStyle = color.rgbaStr;\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n            };\n            TrendIndicator.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segmentsManager.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n                this.segment = segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x + OFFSET_X;\n                var y = endPointVector.y;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n                if (indicatorIsOutOfScreen) {\n                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n                    y -= 25;\n                }\n                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n            };\n            return TrendIndicator;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendIndicator = TrendIndicator;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var LineSegments = THREE.LineSegments;\n        var Trend_1 = __webpack_require__(13);\n        var Utils_1 = __webpack_require__(14);\n        var TrendsLineWidget = function(_super) {\n            __extends(TrendsLineWidget, _super);\n            function TrendsLineWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLine;\n            };\n            TrendsLineWidget.widgetName = \"TrendsLine\";\n            return TrendsLineWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLineWidget = TrendsLineWidget;\n        var TrendLine = function(_super) {\n            __extends(TrendLine, _super);\n            function TrendLine(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeSegmentsInds = [];\n                this.displayedSegments = {};\n                var options = this.trend.getOptions();\n                this.material = new LineBasicMaterial({\n                    color: options.lineColor,\n                    linewidth: options.lineWidth\n                });\n                this.initLine();\n            }\n            TrendLine.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendLine.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            TrendLine.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n                    _this.destroySegments();\n                    _this.setupSegments();\n                }));\n                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n                    _this.setupSegments();\n                }));\n            };\n            TrendLine.prototype.initLine = function() {\n                var geometry = new Geometry();\n                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.lineSegments = new LineSegments(geometry, this.material);\n                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.lineSegments.frustumCulled = false;\n                for (var i = 0; i < this.chartState.data.maxVisibleSegments; i++) {\n                    geometry.vertices.push(new Vector3(), new Vector3());\n                    this.freeSegmentsInds.push(i);\n                }\n                this.vertices = geometry.vertices;\n                this.setupSegments();\n            };\n            TrendLine.prototype.setupSegments = function() {\n                var geometry = this.lineSegments.geometry;\n                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.displayedSegments) {\n                    var lineSegment = this.displayedSegments[segmentId];\n                    var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupSegment(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n                var lineSegment = this.displayedSegments[segmentId];\n                if (!lineSegment) {\n                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n                    var ind = this.freeSegmentsInds.pop();\n                    lineSegment = this.displayedSegments[segmentId] = {\n                        segmentId: segmentId,\n                        ind: ind\n                    };\n                }\n                var segmentInd = lineSegment.ind;\n                var lineStartVertex = this.vertices[segmentInd * 2];\n                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n            };\n            TrendLine.prototype.destroySegments = function() {\n                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n            };\n            TrendLine.prototype.destroySegment = function(segmentId) {\n                var lineSegment = this.displayedSegments[segmentId];\n                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n                lineStartVertex.set(0, 0, 0);\n                lineEndVertex.set(0, 0, 0);\n                delete this.displayedSegments[segmentId];\n                this.freeSegmentsInds.push(lineSegment.ind);\n            };\n            TrendLine.prototype.onZoomFrame = function(options) {\n                var currentScale = this.lineSegments.scale;\n                var state = this.chartState.data;\n                var scaleXFactor = state.xAxis.range.scaleFactor;\n                var scaleYFactor = state.yAxis.range.scaleFactor;\n                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n            };\n            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n                var geometry = this.lineSegments.geometry;\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.displayedSegments[segmentId]) continue;\n                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendLine;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLine = TrendLine;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var Vector3 = THREE.Vector3;\n        var Mesh = THREE.Mesh;\n        var Line = THREE.Line;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var PlaneGeometry = THREE.PlaneGeometry;\n        var Trend_1 = __webpack_require__(13);\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Utils_1 = __webpack_require__(14);\n        var RISE_COLOR = 2927680;\n        var FALL_COLOR = 15619379;\n        var MARGIN_PERCENT = .3;\n        var MAX_CANDLES = 100;\n        var TrendsCandlesWidget = function(_super) {\n            __extends(TrendsCandlesWidget, _super);\n            function TrendsCandlesWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n                return TrendCandlesWidget;\n            };\n            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n            return TrendsCandlesWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n        var TrendCandlesWidget = function(_super) {\n            __extends(TrendCandlesWidget, _super);\n            function TrendCandlesWidget(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeCandlesInds = [];\n                this.candlesPool = [];\n                this.candles = {};\n                this.initObject();\n            }\n            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n            };\n            TrendCandlesWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendCandlesWidget.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n                    _this.destroyCandles();\n                    _this.setupCandles();\n                }));\n                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n                    _this.setupCandles();\n                }));\n            };\n            TrendCandlesWidget.prototype.initObject = function() {\n                var stateData = this.chartState.data;\n                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.scaleXFactor = scaleXFactor;\n                this.scaleYFactor = scaleYFactor;\n                this.object3D = new Object3D();\n                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.object3D.frustumCulled = false;\n                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n                this.setupCandles();\n            };\n            TrendCandlesWidget.prototype.setupCandles = function() {\n                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.candles) {\n                    var segment_1 = this.candles[segmentId].segment;\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupCandle(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n            };\n            TrendCandlesWidget.prototype.destroyCandles = function() {\n                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n            };\n            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n                var candle = this.candles[segmentId];\n                this.object3D.remove(candle.getObject3D());\n                delete this.candles[segmentId];\n            };\n            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n                var currentScale = this.object3D.scale;\n                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n            };\n            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.candles[segmentId]) continue;\n                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n                    this.setupCandle(segmentId, segmentState);\n                }\n            };\n            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n                var candleInd = candleId % MAX_CANDLES;\n                var candle = this.candlesPool[candleInd];\n                if (!candle) {\n                    candle = this.candlesPool[candleInd] = new CandleWidget();\n                }\n                if (!this.candles[candleId]) {\n                    this.candles[candleId] = candle;\n                    this.object3D.add(candle.getObject3D());\n                }\n                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n                candle.setSegment(segmentState);\n            };\n            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendCandlesWidget;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendCandlesWidget = TrendCandlesWidget;\n        var CandleWidget = function() {\n            function CandleWidget() {\n                this.initObject();\n            }\n            CandleWidget.prototype.getObject3D = function() {\n                return this.rect;\n            };\n            CandleWidget.prototype.setSegment = function(segment) {\n                this.segment = segment;\n                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n                var geometry = this.rect.geometry;\n                var material = this.rect.material;\n                var width = segment.endXVal - segment.startXVal;\n                width -= width * MARGIN_PERCENT;\n                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n                leftTop.set(-width / 2, height / 2, 0);\n                rightTop.set(width / 2, height / 2, 0);\n                leftBottom.set(-width / 2, -height / 2, 0);\n                rightBottom.set(width / 2, -height / 2, 0);\n                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n                    leftBottom.setY(leftBottom.y + 1);\n                    rightBottom.setY(rightBottom.y + 1);\n                }\n                material.color.set(color);\n                geometry.verticesNeedUpdate = true;\n                var vLineGeometry = this.vLine.geometry;\n                var vLineMaterial = this.vLine.material;\n                var lineTop = segment.maxYVal - segment.yVal;\n                var lineBottom = segment.minYVal - segment.yVal;\n                vLineGeometry.vertices[0].set(0, lineTop, 0);\n                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n                vLineMaterial.color.set(color);\n                vLineGeometry.verticesNeedUpdate = true;\n                var hLineGeometry = this.hLine.geometry;\n                var hLineMaterial = this.hLine.material;\n                var lineLeft = -width / 2;\n                var lineRight = width / 2;\n                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n                hLineMaterial.color.set(color);\n                hLineGeometry.verticesNeedUpdate = true;\n            };\n            CandleWidget.prototype.initObject = function() {\n                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n                var vLineGeometry = new Geometry();\n                var hLineGeometry = new Geometry();\n                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.rect.add(this.vLine);\n                this.rect.add(this.hLine);\n            };\n            return CandleWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(13);\n        var TrendsBeaconWidget = function(_super) {\n            __extends(TrendsBeaconWidget, _super);\n            function TrendsBeaconWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n                return TrendBeacon;\n            };\n            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n            return TrendsBeaconWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n        var TrendBeacon = function(_super) {\n            __extends(TrendBeacon, _super);\n            function TrendBeacon(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                if (state.data.animations.enabled) {\n                    this.animate();\n                }\n                this.updatePosition();\n            }\n            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendBeacon.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendBeacon.prototype.onTrendChange = function() {\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return _this.updatePosition();\n                }));\n                this.bindEvent(this.chartState.onChange(function(changedProps) {\n                    return _this.onStateChange(changedProps);\n                }));\n                this.bindEvent(this.chartState.onDestroy(function() {\n                    return _this.stopAnimation();\n                }));\n            };\n            TrendBeacon.prototype.initObject = function() {\n                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture(),\n                    transparent: true\n                }));\n                light.scale.set(.2, .2, 1);\n                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture()\n                })));\n                this.segment = this.trend.segmentsManager.getEndSegment();\n            };\n            TrendBeacon.prototype.animate = function() {\n                var _this = this;\n                this.animated = true;\n                var object = this.mesh;\n                var animationObject = {\n                    scale: object.scale.x,\n                    opacity: object.material.opacity\n                };\n                this.mesh.scale.set(.1, .1, 1);\n                setTimeout(function() {\n                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n                        scale: 1,\n                        opacity: 0\n                    });\n                    animation.eventCallback(\"onUpdate\", function() {\n                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n                        object.material.opacity = animationObject.opacity;\n                    }).eventCallback(\"onComplete\", function() {\n                        _this.animation && animation.restart();\n                    });\n                }, 500);\n            };\n            TrendBeacon.prototype.stopAnimation = function() {\n                this.animated = false;\n                this.animation && this.animation.kill();\n                this.animation = null;\n            };\n            TrendBeacon.createTexture = function() {\n                var h = 32, w = 32;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.beginPath();\n                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = \"white\";\n                    ctx.fill();\n                });\n            };\n            TrendBeacon.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segmentsManager.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n                this.segment = trendsSegments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onStateChange = function(changedProps) {\n                if (!changedProps.animations) return;\n                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n                if (changedProps.animations.enabled) {\n                    this.animate();\n                } else {\n                    this.stopAnimation();\n                }\n            };\n            TrendBeacon.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var xVal, yVal;\n                var currentAnimationState = this.segment.currentAnimationState;\n                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    xVal = currentAnimationState.endXVal;\n                    yVal = currentAnimationState.endYVal;\n                } else {\n                    xVal = currentAnimationState.xVal;\n                    yVal = currentAnimationState.endYVal;\n                }\n                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n                this.mesh.position.set(x, endPointVector.y, .1);\n            };\n            return TrendBeacon;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendBeacon = TrendBeacon;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(3));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var EventEmmiter_1 = __webpack_require__(16);\n        exports.DEFAULT_CONFIG = {\n            installPluginWidgets: true\n        };\n        var ChartPlugin = function() {\n            function ChartPlugin(options, config) {\n                if (config === void 0) {\n                    config = {};\n                }\n                this.unsubscribers = [];\n                this.initialState = options;\n                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n                this.name = this.constructor.NAME;\n                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n            }\n            ChartPlugin.prototype.setupChartState = function(chartState) {\n                var _this = this;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n                    return _this.onInitialStateAppliedHandler(initialState);\n                }), this.chartState.onReady(function() {\n                    return _this.onChartReadyHandler();\n                }), this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n                }));\n            };\n            ChartPlugin.prototype.getOptions = function() {\n                return this.chartState.data.pluginsState[this.name];\n            };\n            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n            ChartPlugin.prototype.onChartReadyHandler = function() {};\n            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n            ChartPlugin.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n            };\n            ChartPlugin.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartPlugin.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartPlugin.NAME = \"\";\n            ChartPlugin.pluginWidgets = [];\n            return ChartPlugin;\n        }();\n        exports.ChartPlugin = ChartPlugin;\n    } ]);\n});\n\n\n//# sourceMappingURL=ThreeChart.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-charts/build/ThreeChart.js\n ** module id = 31\n ** module chunks = 1\n **/"],"sourceRoot":""}