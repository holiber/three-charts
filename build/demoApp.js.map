{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///demoApp.js","webpack:///webpack/bootstrap 877ad6a2bd81214aa755?450c","webpack:///./demo/demoApp.ts","webpack:///./src/index.ts?eac3","webpack:///./src/ChartView.ts?958f","webpack:///./src/Plugin.ts?e59a","webpack:///./src/Utils.ts?fbb5","webpack:///./src/deps/deps.ts?8fcc","webpack:///./~/three/examples/js/libs/stats.min.js?9b50","webpack:///./~/is-plain-object/index.js?2af1","webpack:///./~/isobject/index.js?cf96","webpack:///./~/eventemitter2/lib/eventemitter2.js?847a","webpack:///./src/polyfills/es6-promise.js?de39","webpack:///./~/css-element-queries/src/ResizeSensor.js?9f87","webpack:///./src/EventEmmiter.ts?e60a","webpack:///./src/Chart.ts?8278","webpack:///./src/Trend.ts?84c2","webpack:///./src/TrendSegmentsManager.ts?2220","webpack:///./src/TrendsManager.ts?c94d","webpack:///./src/Screen.ts?9286","webpack:///./src/AxisMarks.ts?f3fd","webpack:///./src/interfaces.ts?f1fb","webpack:///./src/Widget.ts?d904","webpack:///./src/widgets/AxisWidget.ts?5f76","webpack:///./src/widgets/GridWidget.ts?61b2","webpack:///./src/Color.ts?1948","webpack:///./src/widgets/TrendsGradientWidget.ts?4409","webpack:///./src/widgets/TrendsWidget.ts?6f55","webpack:///./src/widgets/TrendsLineWidget.ts?d378","webpack:///./src/widgets/TrendsCandleWidget.ts?9d04","webpack:///./src/deps/index.ts?3285","webpack:///./src/widgets/index.ts?2583"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","src_1","chart","DataSourse","data","sec","val","startTime","Date","now","push","xVal","yVal","Math","random","endTime","length","prototype","getData","Utils","deepCopy","getNext","lastVal","item","getPrev","firstVal","unshift","window","onload","initListeners","dsMain","dsRed","dsBlue","ChartView","yAxis","marks","value","name","title","lineColor","stickToEdges","range","padding","end","start","margin","zeroVal","xAxis","dataType","AXIS_DATA_TYPE","DATE","type","AXIS_RANGE_TYPE","FIXED","from","to","maxLength","minLength","showValue","trends","main","TREND_TYPE","LINE","dataset","hasBeacon","hasIndicator","hasBackground","showStats","trendDefaultState","settingsForTypes","minSegmentLengthInPx","document","querySelector","setState","animations","enabled","mainTrend","getTrend","deadlineMark","xAxisMarks","getItem","closeMark","onDataChange","closeValue","options","getLastItem","setOptions","i","onPrependRequest","requestedLength","resolve","reject","responseData","ticksCount","round","setTimeout","setInterval","appendData","$checkboxMaintrend","addEventListener","checked","$checkboxRedtrend","red","$checkboxBluetrend","blue","$switchLineBtn","$switchBarsBtn","CANDLE","currentRange","state","timeframeButtons","querySelectorAll","Number","getAttribute","segmentLength","autoScroll","zoomToRange","scrollToEnd","then","__export","hasOwnProperty","Plugin_1","PerspectiveCamera","THREE","Chart_1","Widget_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsGradientWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","deps_1","Color_1","$container","pluginsAndWidgets","_this","widgets","REVISION","error","style","getComputedStyle","width","parseInt","height","plugins","filter","pluginOrWidget","ChartPlugin","Chart","zoomThrottled","throttle","zoomValue","origin","zoom","init","_a","w","h","autoRender","scene","Scene","isStopped","renderer","renderers","antialias","alpha","backgroundColor","ChartColor","setSize","setPixelRatio","devicePixelRatio","setClearColor","a","appendChild","domElement","$el","display","stats","Stats","setupCamera","initWidgets","bindEvents","renderLoop","preinstalledWidgetsClasses","constructor","preinstalledWidgets","customWidgets","forEach","ChartWidget","pluginWidgetClasses","providedWidgets","apply","concat","map","WidgetClass","widget","setupChart","onReadyHandler","add","getObject3D","isDestroyed","begin","render","fpsLimit","fps","delay_1","requestAnimationFrame","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","trendName","controls","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","oldTrendsMaxX","prevState","computedData","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","min","max","autoScrollIsEnabled","CanvasRenderer","WebGLRenderer","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsGradientWidget","EventEmmiter_1","DEFAULT_CONFIG","installPluginWidgets","config","initialState","deepMerge","NAME","ee","EventEmitter","bindEvent","onInitialStateApplied","onInitialStateAppliedHandler","onReady","onDestroy","onDestroyHandler","onPluginsStateChange","changedPluginsStates","onStateChanged","getOptions","pluginsState","changedState","removeAllListeners","args","_i","arguments","Array","isArray","unsubscriber","deepmerge","target","src","mergeArrays","array","dst","indexOf","Object","keys","key","obj1","obj2","obj","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","floor","intStr","toString","lengthDiff","repeat","afterPointDigitsCount","afterPointStr","split","substr","createTexture","fn","canvas","createElement","ctx","getContext","texture","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","console","warn","getUid","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","copyProps","srcObject","dstObject","props","excludeProps","isPlainObject","TweenLite","TweenMax","EE2","es6_promise_1","Promise","dom","k","d","children","l","cssText","g","performance","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","u","n","q","b","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","isObject","isObjectObject","o","ctor","prot","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_isArray","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","**","growListenerTree","listener","slice","shift","warned","trace","setMaxListeners","event","once","many","ttl","Error","off","_origin","on","emit","_all","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","listenersAny","EventEmitter2","element","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","expand","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","el","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","eventName","subscribe","listenersCount","Vector3","Trend_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","LIGHT_BLUE","ALL","NUMBER","grid","minSizePx","color","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","scrollSpeed","scrollEase","Linear","easeNone","autoScrollSpeed","autoScrollEase","maxSegmentLength","lineWidth","maxSegmentLengthInPx","eventEmitterMaxListeners","maxVisibleSegments","isReady","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","onChange","onTrendChange","onZoom","newState","eventData","silent","stateData","newStateObj","changedProps","trendsData","trendOptions","newStateContainsData","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","rangeLessThenMinValue","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","abs","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","nextRange","newScroll","animationTime","endXVal","getPointOnXAxis","getPointOnYAxis","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","TrendSegmentsManager_1","EVENTS","PREPEND_REQUEST","Trend","chartState","minYVal","maxYVal","prepareData","segmentsManager","TrendSegmentsManager","checkForPrependRequest","changedOptions","getCalculatedOptions","rawData","updatedTrendData","changeData","prependData","allData","newData_1","statePatch","fromX","toX","filteredData","data_1","getFirstItem","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","trend","segmentsById","segments","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getSegment","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","currentSegmentLengthInPx","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","firstDisplayedSegmentInd","lastDisplayedSegmentInd","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","valueInPoint","onAnimationFrame","onRebuild","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","needRebuildSegments","trendData","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","complete","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","prevPoint","getFrameVal","getFramePoint","frameVal","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getEnabledTrends","enabledTrends","allTrends","firstTrendData","getExtremumYVal","extremumIsMax","compareFn","trends_1","trendYValues","dataItem","NaN","onSegmentsRebuilded","_loop_1","this_1","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","transform","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","__extends","__","create","AXIS_MARK_DEFAULT_OPTIONS","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","_super","unbindList","unbindEvent","widgetName","Mesh","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","axisOptions","traverse","beginPath","rgbaStr","strokeStyle","material","MeshBasicMaterial","side","FrontSide","transparent","axisMesh","PlaneGeometry","axisGridParams","getGridParamsForAxis","geometry","parameters","image","clearRect","edgeOffset","segmentsCount","step","pxVal","textAlign","getDateStr","stroke","closePath","gridParams","hour","day","tf","getHours","getMinutes","getSeconds","LineSegments","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","Geometry","LineBasicMaterial","linewidth","opacity","xLinesCount","yLinesCount","vertices","lineSegments","setZ","frustumCulled","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","scale","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","parseColor","cache","replace","exec","isNaN","colorStr","rgba","hexStr","TrendsWidget_1","getTrendWidgetClass","TrendGradient","TrendsWidget","visibleSegmentsCnt","segmentsIds","Uint16Array","initGradient","updateSegments","widgetIsEnabled","gradient","faces","Face3","scaleXFactor","scaleYFactor","currentScale","onSegmentsAnimate","trendSegmentsManager","includes","setupSegmentVertices","segmentInd","prevVisibleSegmentsCnt","segmentsToProcessCnt","segmentState","gradientSegmentInd","topLeft","bottomLeft","bottomRight","topRight","screenHeightVal","startX","toLocalX","startY","toLocalY","endX","endY","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","WidgetConstructor","widgetObject","getObjectByName","unbind","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","segmentIsNotDisplayed","destroySegment","setupSegment","pop","lineStartVertex","lineEndVertex","toLocalVec","vec","Line","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","initObject","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight"],"mappings":"CAAA,SAAAA,iCAAAC,MAAAC;IACA,WAAAC,YAAA,mBAAAC,WAAA,UACAA,OAAAD,UAAAD,gBACA,WAAAG,WAAA,cAAAA,OAAAC,KACAD,WAAAH,eACA,WAAAC,YAAA,UACAA,QAAA,kBAAAD,gBAEAD,KAAA,kBAAAC;GACCK,MAAA;IACD,OCAgB,SAAUC;QCT1B,IAAAC;QAGA,SAAAC,oBAAAC;YAGA,IAAAF,iBAAAE,WACA,OAAAF,iBAAAE,UAAAR;YAGA,IAAAC,SAAAK,iBAAAE;gBACAR;gBACAS,IAAAD;gBACAE,QAAA;;YAIAL,QAAAG,UAAAG,KAAAV,OAAAD,SAAAC,eAAAD,SAAAO;YAGAN,OAAAS,SAAA;YAGA,OAAAT,OAAAD;;QAKAO,oBAAAK,IAAAP;QAGAE,oBAAAM,IAAAP;QAGAC,oBAAAO,IAAA;QAGA,OAAAP,oBAAA;QDgBM,SAASN,QAAQD,SAASO;QAE/B;QEvDD,IAAAQ,QAAAR,oBAA0F;QAS1F,IAAIS;QAEJ,IAAAC,aAAA;YAKC,SAAAA;gBAJAb,KAAAc;gBAKC,IAAIC,MAAM;gBACV,IAAIC,MAAM;gBACVhB,KAAKiB,YAAYC,KAAKC;gBAEtB,OAAOJ,MAAM,KAAK;oBACjBf,KAAKc,KAAKM;wBACTC,MAAMrB,KAAKiB,YAAYF,MAAM;wBAC7BO,MAAMN;;oBAEPA,OAAOO,KAAKC,WAAW,KAAK;oBAC5BT;;gBAEDf,KAAKyB,UAAUzB,KAAKc,KAAKd,KAAKc,KAAKY,SAAS,GAAGL;;YAGhDR,WAAAc,UAAAC,UAAA;gBACC,OAAOjB,MAAAkB,MAAMC,SAAS9B,KAAKc;;YAG5BD,WAAAc,UAAAI,UAAA;gBACC,IAAIC,UAAUhC,KAAKc,KAAKd,KAAKc,KAAKY,SAAS;gBAC3C,IAAIJ,OAAOU,QAAQV,OAAOC,KAAKC,WAAW,KAAK;gBAC/C,IAAIH,OAAOrB,KAAKyB,UAAU;gBAC1BzB,KAAKyB,UAAUJ;gBACf,IAAIY;oBACHZ,MAAMA;oBACNC,MAAMA;;gBAEPtB,KAAKc,KAAKM,KAAKa;gBACf,OAAOA;;YAGRpB,WAAAc,UAAAO,UAAA;gBACC,IAAIC,WAAWnC,KAAKc,KAAK;gBACzB,IAAIQ,OAAOa,SAASb,OAAOC,KAAKC,WAAW,KAAK;gBAChD,IAAIH,OAAOrB,KAAKiB,YAAY;gBAC5BjB,KAAKiB,YAAYI;gBACjB,IAAIY;oBACHZ,MAAMA;oBACNC,MAAMA;;gBAEPtB,KAAKc,KAAKsB,QAAQH;gBAClB,OAAOA;;YAET,OAAApB;;QA4BAwB,OAAOC,SAAS;YAEfC;YAEA,IAAIC,SAAS,IAAI3B;YACjB,IAAI4B,QAAQ,IAAI5B;YAChB,IAAI6B,SAAS,IAAI7B;YACjB,IAAIM,MAAMD,KAAKC;YAIfP,QAAQ,IAAID,MAAAgC;gBACXC;oBACCC;wBACEC,OAAON,OAAO1B,KAAK,GAAGQ;wBAAMyB,MAAM;wBAAaC,OAAO;wBAAcC,WAAW;wBAAWC,cAAc;;oBAE1GC;wBAECC;4BAAUC,KAAK;4BAAKC,OAAO;;wBAC3BC;4BAASF,KAAK;4BAAIC,OAAO;;wBACzBE,SAAS;;;gBAGXC;oBAECC,UAAU/C,MAAAgD,eAAeC;oBACzBT;wBACCU,MAAMlD,MAAAmD,gBAAgBC;wBACtBC,MAAM9C,KAAKC;wBACX8C,IAAI/C,KAAKC,QAAQ;wBACjBiC;4BAAUC,KAAK;4BAAKC,OAAO;;wBAC3BY,WAAW;wBACXC,WAAW;;oBAEZtB;wBACEC,OAAON,OAAOf,UAAU;wBAAOsB,MAAM;wBAAYC,OAAO;wBAAYC,WAAW;wBAAWY,MAAM;wBAAYO,WAAW;;wBACvHtB,OAAON,OAAOf,UAAU;wBAAOsB,MAAM;wBAASC,OAAO;wBAASC,WAAW;wBAAWY,MAAM;wBAAYO,WAAW;;;gBAOpHC;oBACCC;wBACCT,MAAMlD,MAAA4D,WAAWC;wBACjBC,SAASjC,OAAOZ;wBAChB8C,WAAW;wBACXC,cAAc;wBACdC,eAAe;;;gBAKjBC,WAAW;gBAIXC;oBACCC;wBACCP;4BACCQ,sBAAsB;;;;eAK1BC,SAASC,cAAc;YAOvBtE,MAAMuE;gBAAUC;oBAAaC,SAAS;;;YACtCzE,MAAMuE;gBAAUC;oBAAaC,SAAS;;;YAEhChD,OAAQ,WAAWzB;YAEzB,IAAI0E,YAAY1E,MAAM2E,SAAS;YAC/B,IAAIC,eAAe5E,MAAMA,MAAM6E,WAAWC,QAAQ;YAClD,IAAIC,YAAY/E,MAAMA,MAAM6E,WAAWC,QAAQ;YAE/CJ,UAAUM,aAAa;gBACtB,IAAIC,aAAaF,UAAUG,QAAQhD;gBACnC,IAAIwC,UAAUS,cAAc1E,QAAQwE,YAAY;oBAC/CL,aAAaQ;wBAAYlD,OAAO+C,aAAa;;oBAC7CF,UAAUK;wBAAYlD,OAAO+C,aAAa;;;;YAoD5C,IAAII,IAAI;YAERrF,MAAM2E,SAAS,QAAQW,iBAAiB,SAACC,iBAAiBC,SAASC;gBAClE,IAAIC;gBACJ,IAAIC,aAAahF,KAAKiF,MAAML,kBAAkB;gBAC9C,OAAOI,cAAcD,aAAalE,QAAQI,OAAON;gBACjDuE,WAAW;oBACVL,QAAQE;mBACN;;YAGJI,YAAY;gBACXT;gBACA,IAAIjF,MAAMwB,OAAOT;gBAIhBnB,MAAM2E,SAAS,QAAQoB,aAAY3F;eAsBlC;;QAIJ,SAAAuB;YACC,IAAIqE,qBAAqB3B,SAASC,cAAc;YAChD0B,mBAAmBC,iBAAiB,UAAU;gBAC7CjG,MAAMuE;oBAAUd;wBAASC;4BAAOe,SAASuB,mBAAmBE;;;;;YAE7D,IAAIC,oBAAoB9B,SAASC,cAAc;YAC/C6B,kBAAkBF,iBAAiB,UAAU;gBAC5CjG,MAAMuE;oBAAUd;wBAAS2C;4BAAM3B,SAAS0B,kBAAkBD;;;;;YAE3D,IAAIG,qBAAqBhC,SAASC,cAAc;YAChD+B,mBAAmBJ,iBAAiB,UAAU;gBAC7CjG,MAAMuE;oBAAUd;wBAAS6C;4BAAO7B,SAAS4B,mBAAmBH;;;;;YAG7D,IAAIK,iBAAiBlC,SAASC,cAAc;YAC5CiC,eAAeN,iBAAiB,SAAS;gBACxCjG,MAAM2E,SAAS,QAAQS;oBAAYnC,MAAMlD,MAAA4D,WAAWC;;;YAGrD,IAAI4C,iBAAiBnC,SAASC,cAAc;YAC5CkC,eAAeP,iBAAiB,SAAS;gBACxCjG,MAAM2E,SAAS,QAAQS;oBAAYnC,MAAMlD,MAAA4D,WAAW8C;;;YAGrDpC,SAASC,cAAc,sBAAsB2B,iBAAiB,SAAS;gBACtE,IAAIS,eAAe1G,MAAMA,MAAM2G,MAAM9D,MAAMN;gBAC3CvC,MAAMuE;oBAAU1B;wBAAQN;4BAAQa,MAAMsD,aAAatD,OAAO;;;;;YAG3DiB,SAASC,cAAc,uBAAuB2B,iBAAiB,SAAS;gBACvE,IAAIS,eAAe1G,MAAMA,MAAM2G,MAAM9D,MAAMN;gBAC3CvC,MAAMuE;oBAAU1B;wBAAQN;4BAAQc,IAAIqD,aAAarD,KAAK;;;;;YAGvD,IAAIuD,mBAAmBvC,SAASwC,iBAAiB;YACjD,KAAK,IAAIxB,IAAI,GAAGA,IAAIuB,iBAAiB9F,QAAQuE,KAAK;gBACjDuB,iBAAiBvB,GAAGY,iBAAiB,SAAS;oBAC7C,IAAI1D,QAAQuE,OAAO1H,KAAK2H,aAAa;oBACrC,IAAIC,gBAAgBF,OAAO1H,KAAK2H,aAAa;oBAG7C/G,MAAMA,MAAMuE;wBAAU0C,YAAY;;oBAClCjH,MAAMA,MAAMkH,YAAY3E;oBACxBvC,MAAMA,MAAMmH,cAAcC,KAAK;wBAC9BpH,MAAMA,MAAMuE;4BAAU0C,YAAY;;;;;;OFYhC,SAAShI,QAAQD,SAASO;QAE/B;QACA,SAAS8H,SAASzH;YACd,KAAK,IAAIE,KAAKF,GAAG,KAAKZ,QAAQsI,eAAexH,IAAId,QAAQc,KAAKF,EAAEE;;QG3UrEuH,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;OHkVR,SAASN,QAAQD,SAASO;QAE/B;QI/VD,IAAAgI,WAAAhI,oBAA4B;QAC5BA,oBAAQ;QAIR,IAAOiI,oBAAoBC,MAAMD;QAKjC,IAAAE,UAAAnI,oBAAmC;QACnC,IAAAoI,WAAApI,oBAAqD;QACrD,IAAAqI,UAAArI,oBAAsB;QAEtB,IAAAsI,eAAAtI,oBAA2B;QAC3B,IAAAuI,eAAAvI,oBAA2B;QAC3B,IAAAwI,yBAAAxI,oBAAqC;QACrC,IAAAyI,qBAAAzI,oBAAiC;QACjC,IAAA0I,uBAAA1I,oBAAoC;QACpC,IAAA2I,SAAA3I,oBAA+C;QAE/C,IAAA4I,UAAA5I,oBAAyB;QAGzB,IAAAwC,YAAA;YAyBC,SAAAA,UAAY4E,OAAoByB,YAAqBC;gBAzBtD,IAAAC,QAAAlJ;gBAyBsD,IAAAiJ,2BAAA,GAAwD;oBAAxDA;;gBAP7CjJ,KAAAmJ;gBASP,KAAKd,UAAUA,MAAMe,UAAUZ,QAAA3G,MAAMwH,MAAM;gBAE3C,KAAKL,YAAY;oBAChBR,QAAA3G,MAAMwH,MAAM;;gBAGb,IAAIC,QAAQC,iBAAiBP;gBAC7BzB,MAAMiC,QAAQC,SAASH,MAAME;gBAC7BjC,MAAMmC,SAASD,SAASH,MAAMI;gBAE9B,IAAIC,UAAUV,kBAAkBW,OAAO,SAAAC;oBAAkB,OAAAA,0BAA0B1B,SAAA2B;;gBAEnF9J,KAAKY,QAAQ,IAAI0H,QAAAyB,MAAMxC,OAAOoC;gBAC9B3J,KAAKiJ,oBAAoBA;gBACzBjJ,KAAKgK,gBAAgBxB,QAAA3G,MAAMoI,SAAS,SAACC,WAAmBC;oBAAmB,OAAAjB,MAAKkB,KAAKF,WAAWC;mBAAS;gBACzGnK,KAAKgJ,aAAaA;gBAClBhJ,KAAKqK,KAAKrB;;YAGHrG,UAAAhB,UAAA0I,OAAR,SAAarB;gBACZ,IAAIpI,QAAQZ,KAAKY;gBACjB,IAAA0J,KAAA1J,MAAA2G,OAAKgD,IAAAD,GAAAd,OAAUgB,IAAAF,GAAAZ,QAAW7E,YAAAyF,GAAAzF,WAAW4F,aAAAH,GAAAG;gBACrCzK,KAAK0K,QAAQ,IAAIrC,MAAMsC;gBACvB3K,KAAK4K,aAAaH,WAAWpF;gBAE7B,IAAIwF,WAAW7K,KAAK6K,WAAW,IAAKlI,UAAUmI,UAAU9K,KAAKY,MAAM2G,MAAMsD;oBACxEE,WAAW;oBACXC,OAAO;;gBAER,IAAIC,kBAAkB,IAAIlC,QAAAmC,WAAWtK,MAAM2G,MAAM0D;gBACjDJ,SAASM,QAAQZ,GAAGC;gBACpBK,SAASO,cAAczI,UAAU0I;gBACjCR,SAASS,cAAcL,gBAAgBnI,OAAOmI,gBAAgBM;gBAC9DvC,WAAWwC,YAAYX,SAASY;gBAChCzL,KAAK0L,MAAMb,SAASY;gBACpBzL,KAAK0L,IAAIpC,MAAMqC,UAAU;gBAEzB,IAAI9G,WAAW;oBACd7E,KAAK4L,QAAQ,IAAIC;oBACjB7C,WAAWwC,YAAYxL,KAAK4L,MAAMH;;gBAGnCzL,KAAK8L;gBACL9L,KAAK+L;gBACL/L,KAAKgM;gBACLhM,KAAKiM;;YAMEtJ,UAAAhB,UAAAoK,cAAR;gBAAA,IAAA7C,QAAAlJ;gBACC,IAAIkM,6BAA8BlM,KAAKmM,YAAiCC;gBACxE,IAAIC;gBAEJrM,KAAKiJ,kBAAkBqD,QAAQ,SAAAzC;oBAC9B,IAAIA,0BAA0BtB,SAAAgE,aAAa;wBAC1CF,cAAcjL,KAAKyI;wBACnB;;oBAED,MAAMA,0BAA0B1B,SAAA2B,cAAc;oBAC9C,IAAI0C,sBAAuB3C,eAAesC,YAAmCM;oBAC7EP,2BAA2B9K,KAAIsL,MAA/BR,4BAAmCM;;gBAGpCxM,KAAKmJ,UAAUkD,cAAcM,OAC5BT,2BAA2BU,IAAI,SAACC;oBAAyC,WAAIA;;gBAG9E7M,KAAKmJ,QAAQmD,QAAQ,SAAAQ;oBACpBA,OAAOC,WAAW7D,MAAKtI;oBACvBkM,OAAOE;oBACP9D,MAAKwB,MAAMuC,IAAIH,OAAOI;;;YAIhBvK,UAAAhB,UAAAsK,aAAR;gBAAA,IAAA/C,QAAAlJ;gBACC,IAAIA,KAAKmN,aAAa;gBACtBnN,KAAK4L,SAAS5L,KAAK4L,MAAMwB;gBACzBpN,KAAKqN;gBACL,IAAIrN,KAAK4K,WAAW;gBACpB,IAAI0C,WAAWtN,KAAKY,MAAM2G,MAAMkD,WAAW8C;gBAE3C,IAAID,UAAU;oBACb,IAAIE,UAAQ,MAAOF;oBACnB7G,WAAW;wBAAM,OAAAgH,sBAAsB;4BAAM,OAAAvE,MAAK+C;;uBAAeuB;uBAC3D;oBACNC,sBAAsB;wBAAM,OAAAvE,MAAK+C;;;gBAElCjM,KAAK4L,SAAS5L,KAAK4L,MAAMvI;;YAG1BV,UAAAhB,UAAA0L,SAAA;gBACCrN,KAAK6K,SAASwC,OAAOrN,KAAK0K,OAAO1K,KAAK0N;;YAGvC/K,UAAAhB,UAAAgM,OAAA;gBACC3N,KAAK4K,YAAY;;YAGlBjI,UAAAhB,UAAAiM,MAAA;gBACC5N,KAAK4K,YAAY;gBACjB5K,KAAKiM;;YAMNtJ,UAAAhB,UAAAkM,UAAA;gBACC7N,KAAKmN,cAAc;gBACnBnN,KAAK2N;gBACL3N,KAAKY,MAAMiN;gBACX7N,KAAK8N;gBAEL;oBACE9N,KAAK6K,SAAiBkD;kBACtB,OAAOC;gBAGRhO,KAAK6K,SAAiBoD,UAAU;gBACjCjO,KAAK6K,SAASY,aAAa;gBAC3BzL,KAAK6K,WAAW;;YAGjBlI,UAAAhB,UAAAuM,WAAA;gBACC,OAAOlO,KAAKY,MAAM2G;;YAMnB5E,UAAAhB,UAAA4D,WAAA,SAAS4I;gBACR,OAAOnO,KAAKY,MAAM2E,SAAS4I;;YAM5BxL,UAAAhB,UAAAwD,WAAA,SAASoC;gBACR,OAAOvH,KAAKY,MAAMuE,SAASoC;;YAIpB5E,UAAAhB,UAAAqK,aAAR;gBAAA,IAAA9C,QAAAlJ;gBACC,IAAI0L,MAAM1L,KAAK0L;gBACf,IAAI1L,KAAKY,MAAM2G,MAAM6G,SAAS/I,SAAS;oBACtCqG,IAAI7E,iBAAiB,cAAc,SAACwH;wBACnCnF,MAAKoF,aAAaD;;oBAEnB3C,IAAI7E,iBAAiB,aAAa,SAACwH;wBAClCnF,MAAKqF,YAAYF;;oBAElB3C,IAAI7E,iBAAiB,aAAa,SAACwH;wBAAmB,OAAAnF,MAAKsF,YAAYH;;oBACvE3C,IAAI7E,iBAAiB,WAAW,SAACwH;wBAAmB,OAAAnF,MAAKuF,UAAUJ;;oBACnE3C,IAAI7E,iBAAiB,aAAa,SAACwH;wBAClCnF,MAAKwF,YAAYL;;oBAElB3C,IAAI7E,iBAAiB,YAAY,SAACwH;wBACjCnF,MAAKyF,WAAWN;;;gBAGlB,IAAIrO,KAAKY,MAAM2G,MAAMqH,YAAY;oBAChC5O,KAAK6O,eAAe,IAAI/F,OAAAgG,aAAa9O,KAAKgJ,YAAY;wBACrDE,MAAK6F,8BAA8B7F,MAAKF,WAAWgG,aAAa9F,MAAKF,WAAWiG;;;gBAIlFjP,KAAKkP,kBACJlP,KAAKY,MAAMuO,eAAe;oBAAM,OAAAjG,MAAKkG;oBACrCpP,KAAKY,MAAMyO,OAAOC,sBAAsB,SAACxJ;oBAAY,OAAAoD,MAAKqG,yBAAyBzJ;oBACnF9F,KAAKY,MAAM4O,SAAS,SAAC1J;oBAAY,OAAAoD,MAAKuG;;;YAIhC9M,UAAAhB,UAAAmM,eAAR;gBAEC;oBACC9N,KAAK6O,gBAAgB7O,KAAK6O,aAAaa;kBACtC,OAAOC;gBAIT3P,KAAK0L,IAAIkE;gBACT5P,KAAKkP,cAAc5C,QAAQ,SAAAuD;oBAAe,OAAAA;;;YAGnClN,UAAAhB,UAAAmK,cAAR;gBACC,IAAIgE,cAAc9P,KAAKY,MAAMyO,OAAOU;gBACpC,KAAK/P,KAAK0N,QAAQ;oBACjB1N,KAAK0N,SAAS,IAAItF,kBAAkB0H,YAAYE,KAAKF,YAAYG,QAAQH,YAAYI,MAAMJ,YAAYK;oBACvGnQ,KAAK0K,MAAMuC,IAAIjN,KAAK0N;uBACd;oBACN1N,KAAK0N,OAAO0C,MAAMN,YAAYE;oBAC9BhQ,KAAK0N,OAAOuC,SAASH,YAAYG;oBACjCjQ,KAAK0N,OAAOyC,MAAML,YAAYK;oBAC9BnQ,KAAK0N,OAAOwC,OAAOJ,YAAYI;oBAC/BlQ,KAAK0N,OAAO2C;;gBAEbrQ,KAAK0N,OAAO4C,SAASC,IAAIT,YAAYU,GAAGV,YAAYW,GAAGX,YAAYY;gBACnE1Q,KAAK2Q,wBAAwB3Q,KAAK0N,OAAO4C,SAASM;gBAClD5Q,KAAKuP,yBAAyBvP,KAAKY,MAAMyO,OAAOvJ;;YAGzCnD,UAAAhB,UAAA4N,2BAAR,SAAiCzJ;gBAChC,IAAIA,QAAQ+K,gBAAgB,GAAG;oBAC9B,IAAIC,YAAU9Q,KAAK2Q,sBAAsBH,IAAI1K,QAAQ+K;oBAErD7Q,KAAK0N,OAAO4C,SAASS,KAAKD;;gBAE3B,IAAIhL,QAAQkL,gBAAgB,GAAG;oBAC9B,IAAIC,YAAUjR,KAAK2Q,sBAAsBF,IAAI3K,QAAQkL;oBAErDhR,KAAK0N,OAAO4C,SAASY,KAAKD;;;YAIpBtO,UAAAhB,UAAAyN,aAAR;gBACC,IAAI7H,QAAQvH,KAAKY;gBACjB,KAAK2G,MAAMA,MAAMM,YAAY;gBAC7B,IAAIsJ,gBAAgB5J,MAAMA,MAAM6J,UAAUC,aAAahN,OAAOiN;gBAC9D,IAAIC,kBAAkBhK,MAAMA,MAAM8J,aAAahN,OAAOiN,UAAUH;gBAChE,IAAII,kBAAkB,GAAG;oBACxB,IAAIC,cAAcxR,KAAKY,MAAMyO,OAAOoC;oBACpC,IAAIC,gBAAgB1R,KAAKY,MAAM+Q;oBAC/B,IAAIC,gBAAgBrK,MAAMA,MAAM9D,MAAMN,MAAM0O;oBAC5C,IAAIV,gBAAgBO,iBAAiBP,gBAAgBK,aAAa;wBACjE;;oBAED,IAAIM,cAAcP;oBAClBvR,KAAKmF;wBAAU1B;4BAAQN;gCAAQ0O,QAAQD,gBAAgBE;;;;;;YAIjDnP,UAAAhB,UAAAoQ,eAAR;YAQQpP,UAAAhB,UAAA6M,cAAR,SAAoBH;gBACnBrO,KAAKmF;oBAAU6M;wBAASC,UAAU;wBAAMzB,GAAGnC,GAAG6D;wBAASzB,GAAGpC,GAAG8D;;;;YAGtDxP,UAAAhB,UAAA8M,YAAR,SAAkBJ;gBACjBrO,KAAKmF;oBAAU6M;wBAASC,UAAU;;;;YAG3BtP,UAAAhB,UAAA4M,cAAR,SAAoBF;gBACnB,IAAIrO,KAAKY,MAAM2G,MAAMyK,OAAOC,UAAU;oBACrCjS,KAAKmF;wBAAU6M;4BAASC,UAAU;4BAAMzB,GAAGnC,GAAG6D;4BAASzB,GAAGpC,GAAG8D;;;;;YAIvDxP,UAAAhB,UAAA2M,eAAR,SAAqBD;gBACpBA,GAAG+D;gBACH/D,GAAGgE;gBACH,IAAIC,aAAajE,GAAGkE,SAASvS,KAAKY,MAAM2G,MAAMiC;gBAC9C,IAAIU,YAAY,IAAImE,GAAGmE,cAAc;gBACrCxS,KAAKoK,KAAKF,WAAWoI;;YAGd3P,UAAAhB,UAAA+M,cAAR,SAAoBL;gBACnBrO,KAAKmF;oBAAU6M;wBAASC,UAAU;wBAAMzB,GAAGnC,GAAGoE,QAAQ,GAAGP;wBAASzB,GAAGpC,GAAGoE,QAAQ,GAAGN;;;;YAG5ExP,UAAAhB,UAAAgN,aAAR,SAAmBN;gBAClBrO,KAAKmF;oBAAU6M;wBAASC,UAAU;;;;YAG3BtP,UAAAhB,UAAAoN,gCAAR,SAAsCvF,OAAeE;gBACpD1J,KAAKmF;oBAAUqE;oBAAOE;;;YAGf/G,UAAAhB,UAAA8N,gBAAR;gBACC,IAAAnF,KAAAtK,KAAAY,MAAA2G,OAAKiC,QAAAc,GAAAd,OAAOE,SAAAY,GAAAZ;gBACZ1J,KAAK6K,SAASM,QAAQ3B,OAAOE;gBAC7B1J,KAAK8L;;YAGEnJ,UAAAhB,UAAAyI,OAAR,SAAaF,WAAmBoI;gBAAhC,IAAApJ,QAAAlJ;gBACC,IAAM0S,iBAAiB;gBACvB,IAAMC,iBAAiB;gBACvBzI,YAAY3I,KAAKqR,IAAI1I,WAAWwI;gBAChCxI,YAAY3I,KAAKsR,IAAI3I,WAAWyI;gBAChC,IAAIG,sBAAsB9S,KAAKY,MAAM2G,MAAMM;gBAC3C,IAAIiL,qBAAqB9S,KAAKY,MAAMuE;oBAAU0C,YAAY;;gBAC1D7H,KAAKY,MAAMwJ,KAAKF,WAAWoI,YAAYtK,KAAK;oBAC3C,IAAI8K,qBAAqB5J,MAAK/D;wBAAU0C,YAAY;;;;YA1T/ClF,UAAA0I,mBAAmBhJ,OAAOgJ;YAC1B1I,UAAAyJ;YACAzJ,UAAAmI;gBACNiI,gBAAiB1K,MAAc0K;gBAC/BC,eAAe3K,MAAM2K;;YA2TvB,OAAArQ;;QAjUa/C,QAAA+C,YAASA;QAoUtBA,UAAUyJ,wBACTxD,mBAAAqK,kBACApK,qBAAAqK,qBACAzK,aAAA0K,YACAzK,aAAA0K,YACAzK,uBAAA0K;OJiTK,SAASxT,QAAQD,SAASO;QAE/B;QKppBD,IAAAqI,UAAArI,oBAAsB;QACtB,IAAAmT,iBAAAnT,oBAA6B;QAUhBP,QAAA2T;YACZC,sBAAsB;;QAOvB,IAAA1J,cAAA;YAWC,SAAAA,YAAahE,SAA6B2N;gBAAA,IAAAA,gBAAA,GAA+B;oBAA/BA;;gBAHhCzT,KAAAkP;gBAITlP,KAAK0T,eAAe5N;gBACpB9F,KAAKyT,SAASjL,QAAA3G,MAAM8R,UAAU/T,QAAA2T,gBAAgBE;gBAC9CzT,KAAK+C,OAAQ/C,KAAKmM,YAAmCyH;gBACrD,KAAK5T,KAAK+C,MAAMyF,QAAA3G,MAAMwH,MAAM;;YAG7BS,YAAAnI,UAAAoL,aAAA,SAAWnM;gBAAX,IAAAsI,QAAAlJ;gBACCA,KAAKY,QAAQA;gBACbZ,KAAK6T,KAAK,IAAIP,eAAAQ;gBACd9T,KAAK+T,UACJ/T,KAAKY,MAAMoT,sBAAsB,SAAAN;oBAAgB,OAAAxK,MAAK+K,6BAA6BP;oBACnF1T,KAAKY,MAAMsT,QAAQ;oBAAM,OAAAhL,MAAK8D;oBAC9BhN,KAAKY,MAAMuT,UAAU;oBAAM,OAAAjL,MAAKkL;oBAChCpU,KAAKY,MAAMyT,qBAAqB,SAAAC;oBAAwB,OAAAA,qBAAqBpL,MAAKnG,SAASmG,MAAKqL,eAAeD,qBAAqBpL,MAAKnG;;;YAI3I+G,YAAAnI,UAAA6S,aAAA;gBACC,OAAOxU,KAAKY,MAAM2G,MAAMkN,aAAazU,KAAK+C;;YAGjC+G,YAAAnI,UAAAsS,+BAAV,SAAuCP;YAG7B5J,YAAAnI,UAAAqL,iBAAV;YAGUlD,YAAAnI,UAAA4S,iBAAV,SAAyBG;YAGf5K,YAAAnI,UAAAyS,mBAAV;gBACCpU,KAAK6T,GAAGc;;YAGC7K,YAAAnI,UAAAoS,YAAV;gBAAoB,IAAAa;gBL2nBZ,KK3nBY,IAAAC,KAAA,GAAAA,KAAAC,UAAApT,QAAAmT,MAAqC;oBAArCD,KAAAC,KAAA,KAAAC,UAAAD;;gBACnB,IAAI3F;gBACJ,KAAK6F,MAAMC,QAAQJ,KAAK,KAAK;oBAC5B1F,cAAc9N,KAAKwT,KAAK;uBAClB;oBACN1F,cAAc9N,KAAIsL,MAAlBwC,eAAa;;iBAEd5E,KAAAtK,KAAKkP,eAAc9N,KAAIsL,MAAApC,IAAI4E;gBL+nBpB,IAAI5E;;YK3nBFR,YAAAnI,UAAAmM,eAAV;gBACC9N,KAAKkP,cAAc5C,QAAQ,SAAA2I;oBAAgB,OAAAA;;gBAC3CjV,KAAKkP,cAAcxN,SAAS;;YA1DtBoI,YAAA8J,OAAe;YACf9J,YAAA2C;YA2DR,OAAA3C;;QA7DsBlK,QAAAkK,cAAWA;OLmsB3B,SAASjK,QAAQD,SAASO;QAE/B;QMttBD,IAAA2I,SAAA3I,oBAA8B;QAE9B,SAAA+U,UAAmBC,QAAaC,KAAUC;YAAA,IAAAA,qBAAA,GAAkB;gBAAlBA,cAAA;;YACzC,IAAIC,QAAQP,MAAMC,QAAQI;YAC1B,IAAIG,MAAWD;YAEf,IAAIA,OAAO;gBACVH,SAASA;gBACT,IAAIE,aAAa;oBAChBE,MAAMA,IAAI5I,OAAOwI;;gBAElBC,IAAI9I,QAAQ,SAASqD,GAAQ1J;oBAC5B,WAAWsP,IAAItP,OAAO,aAAa;wBAClCsP,IAAItP,KAAK0J;2BACH,WAAWA,MAAM,UAAU;wBACjC4F,IAAItP,KAAKiP,UAAUC,OAAOlP,IAAI0J,GAAG0F;2BAC3B;wBACN,IAAIF,OAAOK,QAAQ7F,QAAQ,GAAG;4BAC7B4F,IAAInU,KAAKuO;;;;mBAIN;gBACN,IAAIwF,iBAAiBA,WAAW,UAAU;oBACzCM,OAAOC,KAAKP,QAAQ7I,QAAQ,SAAUqJ;wBACrCJ,IAAII,OAAOR,OAAOQ;;;gBAGpBF,OAAOC,KAAKN,KAAK9I,QAAQ,SAAUqJ;oBAClC,WAAWP,IAAIO,SAAS,aAAaP,IAAIO,MAAM;wBAC9CJ,IAAII,OAAOP,IAAIO;2BAEX;wBACJ,KAAKR,OAAOQ,MAAM;4BACjBJ,IAAII,OAAOP,IAAIO;+BACT;4BACNJ,IAAII,OAAOT,UAAUC,OAAOQ,MAAMP,IAAIO,MAAMN;;;;;YAMhD,OAAOE;;QAUR,IAAA1T,QAAA;YAAA,SAAAA;YAOQA,MAAA8R,YAAP,SAAqBiC,MAASC,MAASR;gBACtC,OAAOH,UAAUU,MAAMC,MAAMR;;YAOvBxT,MAAAC,WAAP,SAAoBgU;gBAEnB,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH;;YAS3BjU,MAAAqU,UAAP,SAAeC,KAAaC;gBAC3B,IAAIC,YAAY;gBAChB,IAAIC,SAAS;gBACb,IAAIC,SAAShV,KAAKiV,MAAML;gBACxB,IAAIM,SAASF,OAAOG;gBACpB,IAAIC,aAAaP,cAAcK,OAAO/U;gBACtC,IAAIiV,aAAa,GAAI;oBACpBL,SAAe,IAAKM,OAAOD,cAAcF;uBACnC;oBACNH,SAASG;;gBAEV,IAAII,wBAAwBR,YAAYI,OAAO/U;gBAC/C,IAAIoV,gBAAgBX,IAAIO,WAAWK,MAAM,KAAK;gBAC9C,IAAID,eAAe;oBAClBR,UAAU,MAAMQ,cAAcE,OAAO,GAAGH;;gBAEzC,OAAOP;;YAGDzU,MAAAkS,YAAP;YAUOlS,MAAAoV,gBAAP,SAAqBzN,OAAeE,QAAgBwN;gBACnD,IAAIC,SAA4BlS,SAASmS,cAAc;gBACvDD,OAAO3N,QAAQA;gBACf2N,OAAOzN,SAASA;gBAChB,IAAI2N,MAAMF,OAAOG,WAAW;gBAC5BJ,GAAGG;gBACH,IAAIE,UAAU,IAAIlP,MAAMmP,QAAQL;gBAChCI,QAAQE,cAAc;gBACtB,OAAOF;;YASD1V,MAAA6V,4BAAP,SAAiClO,OAAeE,QAAgBwN;gBAC/D,IAAIK,UAAUvX,KAAKiX,cAAczN,OAAOE,QAAQwN;gBAEhDK,QAAQI,YAAYtP,MAAMuP;gBAC1B,OAAOL;;YAMD1V,MAAAwH,QAAP,SAAawO;gBACZC,QAAQzO,MAAM,kBAAkBwO;gBAChC,MAAM,YAAYA;;YAMZhW,MAAAkW,OAAP,SAAYF;gBACXC,QAAQC,KAAK,oBAAoBF;;YAM3BhW,MAAAmW,SAAP;gBACC,OAAOhY,KAAKiY;;YAMNpW,MAAAqW,cAAP,SAAmBC,MAAcC;gBAChC,OAAO7W,KAAKsR,IAAIsF,MAAMC,QAAQ7W,KAAKqR,IAAIuF,MAAMC;;YAGvCvW,MAAAwW,yBAAP,SAA8BC,KAAoBnC,KAAaR;gBAC9D,IAAI4C;gBACJ,IAAIC,KAAK;gBACT,IAAIC,KAAKH,IAAI5W,SAAS;gBACtB,OAAO+W,KAAKD,KAAK,GAAG;oBACnBD,MAAMhX,KAAKiV,OAAQgC,KAAKC,MAAM;oBAC9B,IAAIH,IAAIC,KAAK5C,OAAOQ,KAAK;wBACxBqC,KAAKD;2BACC;wBACNE,KAAKF;;;gBAGP,IAAIpC,MAAMmC,IAAIE,IAAI7C,QAAQ2C,IAAIG,IAAI9C,OAAOQ,KAAK;oBAC7C,OAAOqC;;gBAER,OAAOC;;YAGD5W,MAAA6W,sBAAP,SAAsCJ,KAAkBnC,KAAaR;gBACpE,IAAIgD,MAAM3Y,KAAKqY,uBAAuBC,KAAKnC,KAAKR;gBAChD,OAAO2C,IAAIK;;YAIL9W,MAAA+W,iBAAP,SAAsBC,IAAcC;gBAC9B,IAAAC,QAAAF,GAAA,IAAOG,OAAAH,GAAA,IAAMI,SAAAJ,GAAA,IAAQK,UAAAL,GAAA;gBACrB,IAAAM,QAAAL,GAAA,IAAOM,OAAAN,GAAA,IAAMO,SAAAP,GAAA,IAAQQ,UAAAR,GAAA;gBAC1B,IAAAxO,OAAAyO,QAAAE,QAAAE,QAAAE,QAAAL,OAAAE,SAAAE,OAAAE,WAAKC,SAAAjP,GAAA,IAAQkP,SAAAlP,GAAA,IAAQmP,UAAAnP,GAAA,IAASoP,UAAApP,GAAA;gBAC9B,SAAS6O,QAAQI,UAChBC,SAAST,SACTK,OAAOK,WACPC,UAAUV;;YAKLnX,MAAAoI,WAAP,SAAgB0P,MAAgBC;gBAE/B,IAAIC,cAAc,OACjBC,WACAC;gBAED,SAAAC;oBAEC,IAAIH,aAAa;wBAChBC,YAAYhF;wBACZiF,YAAY/Z;wBACZ;;oBAGD2Z,KAAKjN,MAAM1M,MAAM8U;oBAEjB+E,cAAc;oBAEdpT,WAAW;wBACVoT,cAAc;wBACd,IAAIC,WAAW;4BACdE,QAAQtN,MAAMqN,WAAWD;4BACzBA,YAAYC,YAAY;;uBAEvBH;;gBAGJ,OAAOI;;YAGDnY,MAAAoY,iBAAP,SAAsBC;gBACrB,IAAI1P,IAAIjJ,KAAKiV,MAAM0D,YAAY;gBAC/B,IAAI1Z,IAAKe,KAAKiV,MAAM0D,YAAY;gBAChC,IAAIC,IAAK5Y,KAAKiV,MAAM0D,YAAY;gBAChC,OAAO1P,IAAI,MAAMhK,IAAI,MAAM2Z;;YAGrBtY,MAAAuY,gBAAP,SAAwB9B;gBACvB,IAAIK,MAAMpX,KAAKiV,MAAMjV,KAAKC,WAAW8W,IAAI5W;gBACzC,OAAO4W,IAAIK;;YAGL9W,MAAAwY,YAAP,SAAiBC,WAAwBC,WAAwBC,OAAoBC;gBAAA,IAAAA,sBAAA,GAA2B;oBAA3BA;;gBACpF,KAAK,IAAI9E,OAAO6E,OAAO;oBACtB,IAAIC,aAAajF,QAAQG,UAAU,GAAG;oBACtC,IAAI2E,UAAU3E,aAAa,GAAG;oBAC9B,IAAI7M,OAAA4R,cAAcF,MAAM7E,SAAS4E,UAAU5E,cAAc,GAAG;wBAC3D3V,KAAKqa,UAAUC,UAAU3E,MAAM4E,UAAU5E,MAAM6E,MAAM7E;2BAC/C;wBACN4E,UAAU5E,OAAO3V,KAAK8B,SAASwY,UAAU3E;;;;YA/L7B9T,MAAAoW,YAAkB;YAsMlC,OAAApW;;QAxMajC,QAAAiC,QAAKA;ONy4BZ,SAAShC,QAAQD,SAASO;QAG/B;QO97BKkC,OAAQsY,YAAYC;QACpBvY,OAAQwJ,QAAQ1L,oBAAQ;QAKjBP,QAAA8a,gBAAgBva,oBAAQ;QACxBP,QAAAib,MAAM1a,oBAAQ;QAG3B,IAAA2a,gBAAA3a,oBAAwB;QAAfP,QAAAmb,UAAAD,cAAAC;QAGInb,QAAAkP,eAAe3O,oBAAQ;OPg8B9B,SAASN,QAAQD;QQj9BvB,IAAAiM,QAAA;YAAqB,SAAArB,EAAAe;gBAAc9K,EAAA+K,YAAAD,EAAAyP;gBAAqB,OAAAzP;;YAAS,SAAA0P,EAAA1P;gBAAc,SAAA2P,IAAA,GAAYA,IAAAza,EAAA0a,SAAAzZ,QAAoBwZ,KAAAza,EAAA0a,SAAAD,GAAA5R,MAAAqC,UAAAuP,MAAA3P,IAAA;gBAAqD6P,IAAA7P;;YAAI,IAAA6P,IAAA,GAAA3a,IAAAwE,SAAAmS,cAAA;YAAwC3W,EAAA6I,MAAA+R,UAAA;YAAuF5a,EAAAoG,iBAAA,kBAAA0E;gBAAuCA,EAAA8G;gBAAmB4I,IAAAG,IAAA3a,EAAA0a,SAAAzZ;gBAAyB;YAAK,IAAA4Z,KAAAC,eAAAra,MAAAC,OAAAwO,IAAA2L,GAAA/P,IAAA,GAAAiQ,IAAAhR,EAAA,IAAAqB,MAAA4P,MAAA,yBAAAC,IAAAlR,EAAA,IAAAqB,MAAA4P,MAAA;YAC/X,IAAAE,KAAAJ,eAAAI,KAAAJ,YAAAK,QAAA,IAAAC,IAAArR,EAAA,IAAAqB,MAAA4P,MAAA;YAA0FR,EAAA;YAAK;gBAAO7R,UAAA;gBAAA4R,KAAAva;gBAAAqb,UAAAtR;gBAAAuR,WAAAd;gBAAA7N,OAAA;oBAA0DkO,KAAAC,eAAAra,MAAAC;;gBAA4BkC,KAAA;oBAAgBkI;oBAAI,IAAA9K,KAAA8a,eAAAra,MAAAC;oBAAgCua,EAAAM,OAAAvb,IAAA6a,GAAA;oBAAkB,IAAA7a,IAAAkP,IAAA,QAAA6L,EAAAQ,OAAA,MAAAzQ,KAAA9K,IAAAkP,IAAA,MAAAA,IAAAlP,GAAA8K,IAAA,GAAAsQ,IAAA;wBAAmD,IAAAX,IAAAK,YAAAK;wBAAyBC,EAAAG,OAAAd,EAAAe,iBAAA,SAAAf,EAAAgB,kBAAA;;oBAA6D,OAAAzb;;gBAASub,QAAA;oBAAmBV,IAAAtb,KAAAqD;;gBAAaoI,YAAAhL;gBAAA0b,SAAAlB;;;QACpbpP,MAAA4P,QAAA,SAAAjR,GAAAyQ,GAAAG;YAA4B,IAAA3a,IAAA2b,UAAAd,IAAA,GAAA3L,IAAApO,KAAAiF,OAAA+E,IAAAoE,EAAAtN,OAAAgJ,oBAAA,IAAAmQ,IAAA,KAAAjQ,GAAAmQ,IAAA,KAAAnQ,GAAAsQ,IAAA,IAAAtQ,GAAA8Q,IAAA,IAAA9Q,GAAA2P,IAAA,IAAA3P,GAAA/K,IAAA,KAAA+K,GAAA+Q,IAAA,KAAA/Q,GAAA7K,IAAA,KAAA6K,GAAAgR,IAAAtX,SAAAmS,cAAA;YAAwJmF,EAAA/S,QAAAgS;YAAUe,EAAA7S,SAAAgS;YAAWa,EAAAjT,MAAA+R,UAAA;YAAyC,IAAAmB,IAAAD,EAAAjF,WAAA;YAAyBkF,EAAAC,OAAA,cAAAlR,IAAA;YAAmDiR,EAAAE,eAAA;YAAqBF,EAAAG,YAAAvB;YAAcoB,EAAAI,SAAA,MAAApB,GAAAE;YAAoBc,EAAAG,YAAA1B;YAAcuB,EAAAK,SAAArS,GAAAqR,GAAAQ;YAAkBG,EAAAI,SAAA1B,GAAA1a,GAAA8b,GAAA5b;YAAoB8b,EAAAG,YAAAvB;YAAcoB,EAAAM,cAAA;YAAiBN,EAAAI,SAAA1B,GAAA1a,GAAA8b,GAAA5b;YAAoB;gBAAOsa,KAAAuB;gBAAAP,QAAA,SAAAN,GACneqB;oBAAGtc,IAAAc,KAAAqR,IAAAnS,GAAAib;oBAAgBJ,IAAA/Z,KAAAsR,IAAAyI,GAAAI;oBAAgBc,EAAAG,YAAAvB;oBAAcoB,EAAAM,cAAA;oBAAgBN,EAAAI,SAAA,MAAApB,GAAAhb;oBAAoBgc,EAAAG,YAAA1B;oBAAcuB,EAAAK,SAAAlN,EAAA+L,KAAA,MAAAlR,IAAA,OAAAmF,EAAAlP,KAAA,MAAAkP,EAAA2L,KAAA,KAAAO,GAAAQ;oBAAkDG,EAAAQ,UAAAT,GAAArB,IAAA3P,GAAA/K,GAAA8b,IAAA/Q,GAAA7K,GAAAwa,GAAA1a,GAAA8b,IAAA/Q,GAAA7K;oBAAqC8b,EAAAI,SAAA1B,IAAAoB,IAAA/Q,GAAA/K,GAAA+K,GAAA7K;oBAAwB8b,EAAAG,YAAAvB;oBAAcoB,EAAAM,cAAA;oBAAiBN,EAAAI,SAAA1B,IAAAoB,IAAA/Q,GAAA/K,GAAA+K,GAAAoE,GAAA,IAAA+L,IAAAqB,KAAArc;;;;QAAsC,oBAAAb,kBAAAD,UAAAiM;ORy9BjR,SAAShM,QAAQD,SAASO;;;;;;;QSt9BhC;QAEA,IAAA8c,WAAA9c,oBAAA;QAEA,SAAA+c,eAAAC;YACA,OAAAF,SAAAE,OAAA,QACA1H,OAAA9T,UAAA+U,SAAAnW,KAAA4c,OAAA;;QAGAtd,OAAAD,UAAA,SAAA8a,cAAAyC;YACA,IAAAC,MAAAC;YAEA,IAAAH,eAAAC,OAAA;YAGAC,OAAAD,EAAAhR;YACA,WAAAiR,SAAA;YAGAC,OAAAD,KAAAzb;YACA,IAAAub,eAAAG,UAAA;YAGA,IAAAA,KAAAnV,eAAA;gBACA;;YAIA;;OTq+BM,SAASrI,QAAQD;;;;;;;QUjgCvB;QAEAC,OAAAD,UAAA,SAAAqd,SAAAjc;YACA,OAAAA,OAAA,eAAAA,QAAA,aACA+T,MAAAC,QAAAhU;;OVghCM,SAASnB,QAAQD,SAASO;QW3hChC,IAAAmd;SAOC,SAAAC;YAED,IAAAvI,UAAAD,MAAAC,UAAAD,MAAAC,UAAA,SAAAwI,SAAA1H;gBACA,OAAAL,OAAA9T,UAAA+U,SAAAnW,KAAAuV,SAAA;;YAEA,IAAA2H,sBAAA;YAEA,SAAApT;gBACArK,KAAA0d;gBACA,IAAA1d,KAAA2d,OAAA;oBACAC,UAAArd,KAAAP,WAAA2d;;;YAIA,SAAAC,UAAAC;gBACA,IAAAA,MAAA;oBAEA7d,KAAA2d,QAAAE;oBAEAA,KAAAC,cAAA9d,KAAA8d,YAAAD,KAAAC;oBACAD,KAAAE,iBAAA/d,KAAA0d,QAAAK,eAAAF,KAAAE;oBACAF,KAAAG,aAAAhe,KAAAge,WAAAH,KAAAG;oBACAH,KAAAI,gBAAAje,KAAAie,cAAAJ,KAAAI;oBAEA,IAAAje,KAAAge,UAAA;wBACAhe,KAAAke;;;;YAKA,SAAApK,aAAA+J;gBACA7d,KAAA0d;gBACA1d,KAAAie,cAAA;gBACAL,UAAArd,KAAAP,MAAA6d;;YAQA,SAAAM,mBAAAC,UAAAva,MAAAwa,MAAApY;gBACA,KAAAoY,MAAA;oBACA;;gBAEA,IAAAC,gBAAAC,MAAAC,KAAAC,QAAAC,OAAAC,QAAAC,gBAAAC,YACAC,aAAAjb,KAAAnC,QAAAqd,cAAAlb,KAAAoC,IAAA+Y,WAAAnb,KAAAoC,IAAA;gBACA,IAAAA,MAAA6Y,cAAAT,KAAAY,YAAA;oBAKA,WAAAZ,KAAAY,eAAA;wBACAb,qBAAAhd,KAAAid,KAAAY;wBACA,SAAAZ;2BACO;wBACP,KAAAE,OAAA,GAAAC,MAAAH,KAAAY,WAAAvd,QAAoD6c,OAAAC,KAAYD,QAAA;4BAChEH,qBAAAhd,KAAAid,KAAAY,WAAAV;;wBAEA,SAAAF;;;gBAIA,IAAAU,gBAAA,OAAAA,gBAAA,QAAAV,KAAAU,cAAA;oBAKA,IAAAA,gBAAA;wBACA,KAAAN,UAAAJ,MAAA;4BACA,IAAAI,WAAA,gBAAAJ,KAAAnW,eAAAuW,SAAA;gCACAH,sBAAA3R,OAAAwR,mBAAAC,UAAAva,MAAAwa,KAAAI,SAAAxY,IAAA;;;wBAGA,OAAAqY;2BACO,IAAAS,gBAAA;wBACPF,aAAA5Y,IAAA,MAAA6Y,cAAA7Y,IAAA,MAAA6Y,cAAAE,aAAA;wBACA,IAAAH,cAAAR,KAAAY,YAAA;4BAEAX,sBAAA3R,OAAAwR,mBAAAC,UAAAva,MAAAwa,MAAAS;;wBAGA,KAAAL,UAAAJ,MAAA;4BACA,IAAAI,WAAA,gBAAAJ,KAAAnW,eAAAuW,SAAA;gCACA,IAAAA,WAAA,OAAAA,WAAA;oCACA,IAAAJ,KAAAI,QAAAQ,eAAAJ,YAAA;wCACAP,sBAAA3R,OAAAwR,mBAAAC,UAAAva,MAAAwa,KAAAI,SAAAK;;oCAEAR,sBAAA3R,OAAAwR,mBAAAC,UAAAva,MAAAwa,KAAAI,SAAAxY;uCACa,IAAAwY,WAAAO,UAAA;oCACbV,sBAAA3R,OAAAwR,mBAAAC,UAAAva,MAAAwa,KAAAI,SAAAxY,IAAA;uCACa;oCAEbqY,sBAAA3R,OAAAwR,mBAAAC,UAAAva,MAAAwa,KAAAI,SAAAxY;;;;wBAIA,OAAAqY;;oBAGAA,sBAAA3R,OAAAwR,mBAAAC,UAAAva,MAAAwa,KAAAU,cAAA9Y,IAAA;;gBAGAyY,QAAAL,KAAA;gBACA,IAAAK,OAAA;oBAKAP,mBAAAC,UAAAva,MAAA6a,OAAAzY,IAAA;;gBAGA0Y,SAAAN,KAAA;gBACA,IAAAM,QAAA;oBACA,IAAA1Y,IAAA6Y,YAAA;wBACA,IAAAH,OAAAM,YAAA;4BAEAd,mBAAAC,UAAAva,MAAA8a,QAAAG;;wBAIA,KAAAL,UAAAE,QAAA;4BACA,IAAAF,WAAA,gBAAAE,OAAAzW,eAAAuW,SAAA;gCACA,IAAAA,WAAAO,UAAA;oCAEAb,mBAAAC,UAAAva,MAAA8a,OAAAF,SAAAxY,IAAA;uCACa,IAAAwY,WAAAM,aAAA;oCAEbZ,mBAAAC,UAAAva,MAAA8a,OAAAF,SAAAxY,IAAA;uCACa;oCACb2Y;oCACAA,eAAAH,UAAAE,OAAAF;oCACAN,mBAAAC,UAAAva;wCAAkDqb,MAAAN;uCAAuB3Y,IAAA;;;;2BAIlE,IAAA0Y,OAAAM,YAAA;wBAEPd,mBAAAC,UAAAva,MAAA8a,QAAAG;2BACO,IAAAH,OAAA,QAAAA,OAAA,KAAAM,YAAA;wBACPd,mBAAAC,UAAAva,MAAA8a,OAAA,MAAAG;;;gBAIA,OAAAR;;YAGA,SAAAa,iBAAAtb,MAAAub;gBAEAvb,uBAAA,WAAAA,KAAAkT,MAAA/W,KAAA8d,aAAAja,KAAAwb;gBAKA,SAAApZ,IAAA,GAAAuY,MAAA3a,KAAAnC,QAAqCuE,IAAA,IAAAuY,KAAWvY,KAAA;oBAChD,IAAApC,KAAAoC,OAAA,QAAApC,KAAAoC,IAAA;wBACA;;;gBAIA,IAAAoY,OAAAre,KAAAke;gBACA,IAAAnb,OAAAc,KAAAyb;gBAEA,OAAAvc,MAAA;oBAEA,KAAAsb,KAAAtb,OAAA;wBACAsb,KAAAtb;;oBAGAsb,YAAAtb;oBAEA,IAAAc,KAAAnC,WAAA;wBAEA,KAAA2c,KAAAY,YAAA;4BACAZ,KAAAY,aAAAG;+BAEA,WAAAf,KAAAY,eAAA;4BACAZ,KAAAY,eAAAZ,KAAAY,YAAAG;+BAEA,IAAApK,QAAAqJ,KAAAY,aAAA;4BAEAZ,KAAAY,WAAA7d,KAAAge;4BAEA,KAAAf,KAAAY,WAAAM,QAAA;gCAEA,IAAA/e,IAAAid;gCAEA,WAAAzd,KAAA0d,QAAAK,iBAAA;oCACAvd,IAAAR,KAAA0d,QAAAK;;gCAGA,IAAAvd,IAAA,KAAA6d,KAAAY,WAAAvd,SAAAlB,GAAA;oCAEA6d,KAAAY,WAAAM,SAAA;oCACAzH,QAAAzO,MAAA,kDACA,wCACA,oDACAgV,KAAAY,WAAAvd;oCACAoW,QAAA0H;;;;wBAIA;;oBAEAzc,OAAAc,KAAAyb;;gBAEA;;YAUAxL,aAAAnS,UAAAmc,YAAA;YAEAhK,aAAAnS,UAAA8d,kBAAA,SAAAnD;gBACAtc,KAAA0d,WAAArT,KAAA9J,KAAAP;gBACAA,KAAA0d,QAAAK,eAAAzB;gBACA,KAAAtc,KAAA2d,OAAA3d,KAAA2d;gBACA3d,KAAA2d,MAAAI,eAAAzB;;YAGAxI,aAAAnS,UAAA+d,QAAA;YAEA5L,aAAAnS,UAAAge,OAAA,SAAAD,OAAAxI;gBACAlX,KAAA4f,KAAAF,OAAA,GAAAxI;gBACA,OAAAlX;;YAGA8T,aAAAnS,UAAAie,OAAA,SAAAF,OAAAG,KAAA3I;gBACA,IAAAyE,OAAA3b;gBAEA,WAAAkX,OAAA;oBACA,UAAA4I,MAAA;;gBAGA,SAAAV;oBACA,MAAAS,QAAA;wBACAlE,KAAAoE,IAAAL,OAAAN;;oBAEAlI,GAAAxK,MAAA1M,MAAA8U;;gBAGAsK,SAAAY,UAAA9I;gBAEAlX,KAAAigB,GAAAP,OAAAN;gBAEA,OAAAzD;;YAGA7H,aAAAnS,UAAAue,OAAA;gBAEAlgB,KAAA0d,WAAArT,KAAA9J,KAAAP;gBAEA,IAAA6D,OAAAiR,UAAA;gBAEA,IAAAjR,SAAA,kBAAA7D,KAAAie,aAAA;oBACA,KAAAje,KAAA0d,QAAAO,aAAA;wBAAsC;;;gBAItC,IAAAje,KAAAmgB,MAAA;oBACA,IAAA/E,IAAAtG,UAAApT;oBACA,IAAAkT,OAAA,IAAAG,MAAAqG,IAAA;oBACA,SAAAnV,IAAA,GAAqBA,IAAAmV,GAAOnV,KAAA2O,KAAA3O,IAAA,KAAA6O,UAAA7O;oBAC5B,KAAAA,IAAA,GAAAmV,IAAApb,KAAAmgB,KAAAze,QAAuCuE,IAAAmV,GAAOnV,KAAA;wBAC9CjG,KAAA0f,QAAA7b;wBACA7D,KAAAmgB,KAAAla,GAAAyG,MAAA1M,MAAA4U;;;gBAKA,IAAA/Q,SAAA;oBAEA,KAAA7D,KAAAmgB,SACAngB,KAAA0d,QAAArU,WACArJ,KAAAge,YAAAhe,KAAAke,aAAA7U,QAAA;wBAEA,IAAAyL,UAAA,cAAAgL,OAAA;4BACA,MAAAhL,UAAA;+BACS;4BACT,UAAAgL,MAAA;;wBAEA;;;gBAIA,IAAAM;gBAEA,IAAApgB,KAAAge,UAAA;oBACAoC;oBACA,IAAAC,YAAAxc,SAAA,WAAAA,KAAAkT,MAAA/W,KAAA8d,aAAAja,KAAAwb;oBACAlB,mBAAA5d,KAAAP,MAAAogB,SAAAC,IAAArgB,KAAAke,cAAA;uBAEA;oBACAkC,UAAApgB,KAAA0d,QAAA7Z;;gBAGA,WAAAuc,YAAA;oBACApgB,KAAA0f,QAAA7b;oBACA,IAAAiR,UAAApT,WAAA;wBACA0e,QAAA7f,KAAAP;2BAEA,IAAA8U,UAAApT,SAAA,GACA,QAAAoT,UAAApT;sBACA;wBACA0e,QAAA7f,KAAAP,MAAA8U,UAAA;wBACA;;sBACA;wBACAsL,QAAA7f,KAAAP,MAAA8U,UAAA,IAAAA,UAAA;wBACA;;sBAEA;wBACA,IAAAsG,IAAAtG,UAAApT;wBACA,IAAAkT,OAAA,IAAAG,MAAAqG,IAAA;wBACA,SAAAnV,IAAA,GAA2BA,IAAAmV,GAAOnV,KAAA2O,KAAA3O,IAAA,KAAA6O,UAAA7O;wBAClCma,QAAA1T,MAAA1M,MAAA4U;;oBAEA;uBAEA,IAAAwL,SAAA;oBACA,IAAAhF,IAAAtG,UAAApT;oBACA,IAAAkT,OAAA,IAAAG,MAAAqG,IAAA;oBACA,SAAAnV,IAAA,GAAqBA,IAAAmV,GAAOnV,KAAA2O,KAAA3O,IAAA,KAAA6O,UAAA7O;oBAE5B,IAAAqY,YAAA8B,QAAAf;oBACA,SAAApZ,IAAA,GAAAmV,IAAAkD,UAAA5c,QAA2CuE,IAAAmV,GAAOnV,KAAA;wBAClDjG,KAAA0f,QAAA7b;wBACAya,UAAArY,GAAAyG,MAAA1M,MAAA4U;;oBAEA,OAAA0J,UAAA5c,SAAA,OAAA1B,KAAAmgB;uBAEA;oBACA,SAAAngB,KAAAmgB;;;YAKArM,aAAAnS,UAAAse,KAAA,SAAApc,MAAAub;gBAEA,WAAAvb,SAAA;oBACA7D,KAAAsgB,MAAAzc;oBACA,OAAA7D;;gBAGA,WAAAof,aAAA;oBACA,UAAAU,MAAA;;gBAEA9f,KAAA0d,WAAArT,KAAA9J,KAAAP;gBAIAA,KAAAkgB,KAAA,eAAArc,MAAAub;gBAEA,IAAApf,KAAAge,UAAA;oBACAmB,iBAAA5e,KAAAP,MAAA6D,MAAAub;oBACA,OAAApf;;gBAGA,KAAAA,KAAA0d,QAAA7Z,OAAA;oBAEA7D,KAAA0d,QAAA7Z,QAAAub;uBAEA,WAAApf,KAAA0d,QAAA7Z,UAAA;oBAEA7D,KAAA0d,QAAA7Z,UAAA7D,KAAA0d,QAAA7Z,OAAAub;uBAEA,IAAApK,QAAAhV,KAAA0d,QAAA7Z,QAAA;oBAEA7D,KAAA0d,QAAA7Z,MAAAzC,KAAAge;oBAGA,KAAApf,KAAA0d,QAAA7Z,MAAA0b,QAAA;wBAEA,IAAA/e,IAAAid;wBAEA,WAAAzd,KAAA0d,QAAAK,iBAAA;4BACAvd,IAAAR,KAAA0d,QAAAK;;wBAGA,IAAAvd,IAAA,KAAAR,KAAA0d,QAAA7Z,MAAAnC,SAAAlB,GAAA;4BAEAR,KAAA0d,QAAA7Z,MAAA0b,SAAA;4BACAzH,QAAAzO,MAAA,kDACA,wCACA,oDACArJ,KAAA0d,QAAA7Z,MAAAnC;4BACAoW,QAAA0H;;;;gBAIA,OAAAxf;;YAGA8T,aAAAnS,UAAA2e,QAAA,SAAApJ;gBAEA,WAAAA,OAAA;oBACA,UAAA4I,MAAA;;gBAGA,KAAA9f,KAAAmgB,MAAA;oBACAngB,KAAAmgB;;gBAIAngB,KAAAmgB,KAAA/e,KAAA8V;gBACA,OAAAlX;;YAGA8T,aAAAnS,UAAA4e,cAAAzM,aAAAnS,UAAAse;YAEAnM,aAAAnS,UAAAoe,MAAA,SAAAlc,MAAAub;gBACA,WAAAA,aAAA;oBACA,UAAAU,MAAA;;gBAGA,IAAA1B,UAAAoC;gBAEA,IAAAxgB,KAAAge,UAAA;oBACA,IAAAqC,YAAAxc,SAAA,WAAAA,KAAAkT,MAAA/W,KAAA8d,aAAAja,KAAAwb;oBACAmB,QAAArC,mBAAA5d,KAAAP,MAAA,MAAAqgB,IAAArgB,KAAAke,cAAA;uBAEA;oBAEA,KAAAle,KAAA0d,QAAA7Z,OAAA,OAAA7D;oBACAoe,WAAApe,KAAA0d,QAAA7Z;oBACA2c,MAAApf;wBAAkB6d,YAAAb;;;gBAGlB,SAAAqC,QAAA,GAAqBA,QAAAD,MAAA9e,QAAoB+e,SAAA;oBACzC,IAAAlC,OAAAiC,MAAAC;oBACArC,WAAAG,KAAAU;oBACA,IAAAjK,QAAAoJ,WAAA;wBAEA,IAAA9N,YAAA;wBAEA,SAAArK,IAAA,GAAAvE,SAAA0c,SAAA1c,QAAiDuE,IAAAvE,QAAYuE,KAAA;4BAC7D,IAAAmY,SAAAnY,OAAAmZ,YACAhB,SAAAnY,GAAAmZ,YAAAhB,SAAAnY,GAAAmZ,yBACAhB,SAAAnY,GAAA+Z,WAAA5B,SAAAnY,GAAA+Z,YAAAZ,UAAA;gCACA9O,WAAArK;gCACA;;;wBAIA,IAAAqK,WAAA;4BACA;;wBAGA,IAAAtQ,KAAAge,UAAA;4BACAO,KAAAU,WAAAyB,OAAApQ,UAAA;+BAEA;4BACAtQ,KAAA0d,QAAA7Z,MAAA6c,OAAApQ,UAAA;;wBAGA,IAAA8N,SAAA1c,WAAA;4BACA,IAAA1B,KAAAge,UAAA;uCACAO,KAAAU;mCAEA;uCACAjf,KAAA0d,QAAA7Z;;;wBAGA,OAAA7D;2BAEA,IAAAoe,aAAAgB,YACAhB,SAAAgB,YAAAhB,SAAAgB,yBACAhB,SAAA4B,WAAA5B,SAAA4B,YAAAZ,UAAA;wBACA,IAAApf,KAAAge,UAAA;mCACAO,KAAAU;+BAEA;mCACAjf,KAAA0d,QAAA7Z;;;;gBAKA,OAAA7D;;YAGA8T,aAAAnS,UAAAgf,SAAA,SAAAzJ;gBACA,IAAAjR,IAAA,GAAAmV,IAAA,GAAAwF;gBACA,IAAA1J,MAAAlX,KAAAmgB,QAAAngB,KAAAmgB,KAAAze,SAAA;oBACAkf,MAAA5gB,KAAAmgB;oBACA,KAAAla,IAAA,GAAAmV,IAAAwF,IAAAlf,QAAgCuE,IAAAmV,GAAOnV,KAAA;wBACvC,IAAAiR,OAAA0J,IAAA3a,IAAA;4BACA2a,IAAAF,OAAAza,GAAA;4BACA,OAAAjG;;;uBAGK;oBACLA,KAAAmgB;;gBAEA,OAAAngB;;YAGA8T,aAAAnS,UAAAkf,iBAAA/M,aAAAnS,UAAAoe;YAEAjM,aAAAnS,UAAAgT,qBAAA,SAAA9Q;gBACA,IAAAiR,UAAApT,WAAA;qBACA1B,KAAA0d,WAAArT,KAAA9J,KAAAP;oBACA,OAAAA;;gBAGA,IAAAA,KAAAge,UAAA;oBACA,IAAAqC,YAAAxc,SAAA,WAAAA,KAAAkT,MAAA/W,KAAA8d,aAAAja,KAAAwb;oBACA,IAAAmB,QAAArC,mBAAA5d,KAAAP,MAAA,MAAAqgB,IAAArgB,KAAAke,cAAA;oBAEA,SAAAuC,QAAA,GAAuBA,QAAAD,MAAA9e,QAAoB+e,SAAA;wBAC3C,IAAAlC,OAAAiC,MAAAC;wBACAlC,KAAAU,aAAA;;uBAGA;oBACA,KAAAjf,KAAA0d,QAAA7Z,OAAA,OAAA7D;oBACAA,KAAA0d,QAAA7Z,QAAA;;gBAEA,OAAA7D;;YAGA8T,aAAAnS,UAAA2c,YAAA,SAAAza;gBACA,IAAA7D,KAAAge,UAAA;oBACA,IAAAI;oBACA,IAAAiC,YAAAxc,SAAA,WAAAA,KAAAkT,MAAA/W,KAAA8d,aAAAja,KAAAwb;oBACAlB,mBAAA5d,KAAAP,MAAAoe,UAAAiC,IAAArgB,KAAAke,cAAA;oBACA,OAAAE;;gBAGApe,KAAA0d,WAAArT,KAAA9J,KAAAP;gBAEA,KAAAA,KAAA0d,QAAA7Z,OAAA7D,KAAA0d,QAAA7Z;gBACA,KAAAmR,QAAAhV,KAAA0d,QAAA7Z,QAAA;oBACA7D,KAAA0d,QAAA7Z,UAAA7D,KAAA0d,QAAA7Z;;gBAEA,OAAA7D,KAAA0d,QAAA7Z;;YAGAiQ,aAAAnS,UAAAmf,eAAA;gBAEA,IAAA9gB,KAAAmgB,MAAA;oBACA,OAAAngB,KAAAmgB;uBAEA;oBACA;;;YAKA;kBAEA7C,gCAAA;oBACA,OAAAxJ;kBACKvT,KAAAX,SAAAO,qBAAAP,SAAAC,SAAAyd,kCAAAC,cAAA1d,OAAAD,UAAA0d;mBACF,WAAA1d,YAAA;gBAEHA,QAAAmhB,gBAAAjN;mBAEA;gBAEAzR,OAAA0e,gBAAAjN;;;OXoiCM,SAASjU,QAAQD;QY9lDvBC,OAAAD;YAAkBmb,SAAA1Y,OAAA;;OZomDZ,SAASxC,QAAQD;Sa9lDvB;YAUA,IAAAkP,eAAA,SAAAkS,SAAAC;gBAKA,SAAAC;oBACAlhB,KAAAuc;oBACAvc,KAAAiN,MAAA,SAAAoB;wBACArO,KAAAuc,EAAAnb,KAAAiN;;oBAGA,IAAApI,GAAAkb;oBACAnhB,KAAAO,OAAA;wBACA,KAAA0F,IAAA,GAAAkb,IAAAnhB,KAAAuc,EAAA7a,QAA8CuE,IAAAkb,GAAOlb,KAAA;4BACrDjG,KAAAuc,EAAAtW,GAAA1F;;;;gBAUA,SAAAgJ,iBAAAyX,SAAAI;oBACA,IAAAJ,QAAAK,cAAA;wBACA,OAAAL,QAAAK,aAAAD;2BACa,IAAA/e,OAAAkH,kBAAA;wBACb,OAAAlH,OAAAkH,iBAAAyX,SAAA,MAAAM,iBAAAF;2BACa;wBACb,OAAAJ,QAAA1X,MAAA8X;;;gBASA,SAAAG,kBAAAP,SAAAQ;oBACA,KAAAR,QAAAS,iBAAA;wBACAT,QAAAS,kBAAA,IAAAP;wBACAF,QAAAS,gBAAAxU,IAAAuU;2BACa,IAAAR,QAAAS,iBAAA;wBACbT,QAAAS,gBAAAxU,IAAAuU;wBACA;;oBAGAR,QAAAnS,eAAA5J,SAAAmS,cAAA;oBACA4J,QAAAnS,aAAA6S,YAAA;oBACA,IAAApY,QAAA;oBACA,IAAAqY,aAAA;oBAEAX,QAAAnS,aAAAvF,MAAA+R,UAAA/R;oBACA0X,QAAAnS,aAAA+S,YACA,8CAAAtY,QAAA,OACA,iBAAAqY,aAAA,aACA,WACA,8CAAArY,QAAA,OACA,iBAAAqY,aAAA,uCACA;oBACAX,QAAAxV,YAAAwV,QAAAnS;oBAEA;wBAAkBgT,OAAA;wBAAAC,UAAA;sBAAsBvY,iBAAAyX,SAAA;wBACxCA,QAAA1X,MAAAgH,WAAA;;oBAGA,IAAAyR,SAAAf,QAAAnS,aAAAmT,WAAA;oBACA,IAAAC,cAAAF,OAAAC,WAAA;oBACA,IAAAE,SAAAlB,QAAAnS,aAAAmT,WAAA;oBACA,IAAAG,cAAAD,OAAAF,WAAA;oBAEA,IAAAI,WAAAC;oBAEA,IAAAC,QAAA;wBACAL,YAAA3Y,MAAAE,QAAAuY,OAAAQ,cAAA;wBACAN,YAAA3Y,MAAAI,SAAAqY,OAAAS,eAAA;wBACAT,OAAAU,aAAAV,OAAAW;wBACAX,OAAAY,YAAAZ,OAAAa;wBACAV,OAAAO,aAAAP,OAAAQ;wBACAR,OAAAS,YAAAT,OAAAU;wBACAR,YAAApB,QAAAuB;wBACAF,aAAArB,QAAAwB;;oBAGAF;oBAEA,IAAAO,UAAA;wBACA,IAAA7B,QAAAS,iBAAA;4BACAT,QAAAS,gBAAAlhB;;;oBAIA,IAAAuiB,WAAA,SAAAC,IAAAhgB,MAAAigB;wBACA,IAAAD,GAAAE,aAAA;4BACAF,GAAAE,YAAA,OAAAlgB,MAAAigB;+BACiB;4BACjBD,GAAAlc,iBAAA9D,MAAAigB;;;oBAIA,IAAAE,WAAA;wBACA,IAAAlC,QAAAuB,eAAAH,aAAApB,QAAAwB,gBAAAH,YAAA;4BACAQ;;wBAEAP;;oBAGAQ,SAAAf,QAAA,UAAAmB;oBACAJ,SAAAZ,QAAA,UAAAgB;;gBAGA,IAAAC,cAAA1N,OAAA9T,UAAA+U,SAAAnW,KAAAygB;gBACA,IAAAoC,oBAAA,qBAAAD,eACA,wBAAAA,eACA,8BAAAA,eACA,uBAAAE,UAAArC,mBAAAqC,UACA,uBAAAC,YAAAtC,mBAAAsC;gBAGA,IAAAF,mBAAA;oBACA,IAAAnd,IAAA,GAAAkb,IAAAH,QAAAtf;oBACA,MAAkBuE,IAAAkb,GAAOlb,KAAA;wBACzBsb,kBAAAP,QAAA/a,IAAAgb;;uBAES;oBACTM,kBAAAP,SAAAC;;gBAGAjhB,KAAA0P,SAAA;oBACA,IAAA0T,mBAAA;wBACA,IAAAnd,IAAA,GAAAkb,IAAAH,QAAAtf;wBACA,MAAsBuE,IAAAkb,GAAOlb,KAAA;4BAC7B6I,aAAAY,OAAAsR,QAAA/a;;2BAEa;wBACb6I,aAAAY,OAAAsR;;;;YAKAlS,aAAAY,SAAA,SAAAsR;gBACA,IAAAA,QAAAnS,cAAA;oBACAmS,QAAAuC,YAAAvC,QAAAnS;2BACAmS,QAAAnS;2BACAmS,QAAAS;;;YAKA,WAAA5hB,WAAA,sBAAAA,OAAAD,YAAA;gBACAC,OAAAD,UAAAkP;mBAEA;gBACAzM,OAAAyM;;;Ob8mDM,SAASjP,QAAQD,SAASO;QAE/B;Qc1xDD,IAAA2I,SAAA3I,oBAAkB;QAKlB,IAAA2T,eAAA;YAEC,SAAAA;gBACC9T,KAAK6T,KAAK,IAAI/K,OAAA+R;;YAEf/G,aAAAnS,UAAAue,OAAA,SAAKsD;gBAAmB,IAAA5O;gBd2xDhB,Kc3xDgB,IAAAC,KAAA,GAAAA,KAAAC,UAAApT,QAAAmT,MAAc;oBAAdD,KAAAC,KAAA,KAAAC,UAAAD;;iBACvBvK,KAAAtK,KAAK6T,IAAGqM,KAAIxT,MAAApC,MAACkZ,YAAS7W,OAAKiI;gBd8xDpB,IAAItK;;Yc5xDZwJ,aAAAnS,UAAAse,KAAA,SAAGuD,WAAmBvC;gBACrB,OAAOjhB,KAAK6T,GAAGoM,GAAGuD,WAAWvC;;YAE9BnN,aAAAnS,UAAAoe,MAAA,SAAIyD,WAAmBvC;gBACtB,OAAOjhB,KAAK6T,GAAGkM,IAAIyD,WAAWvC;;YAE/BnN,aAAAnS,UAAA8hB,YAAA,SAAUD,WAAmBvC;gBAA7B,IAAA/X,QAAAlJ;gBACCA,KAAKigB,GAAGuD,WAAWvC;gBACnB,OAAO;oBAAM,OAAA/X,MAAK6W,IAAIyD,WAAWvC;;;YAElCnN,aAAAnS,UAAA8d,kBAAA,SAAgBiE;gBACf1jB,KAAK6T,GAAG4L,gBAAgBiE;;YAEzB5P,aAAAnS,UAAAgT,qBAAA,SAAmB6O;gBAClBxjB,KAAK6T,GAAGc,mBAAmB6O;;YAE7B,OAAA1P;;QAxBalU,QAAAkU,eAAYA;Od8zDnB,SAASjU,QAAQD,SAASO;QAE/B;Qer0DD,IAAOwjB,UAAUtb,MAAMsb;QACvB,IAAAC,UAAAzjB,oBAA6D;QAC7D,IAAAmT,iBAAAnT,oBAA2B;QAC3B,IAAAqI,UAAArI,oBAAoB;QACpB,IAAA0jB,kBAAA1jB,oBAA4C;QAC5C,IAAA2jB,WAAA3jB,oBAAqB;QACrB,IAAA4jB,cAAA5jB,oBAAwB;QACxB,IAAA6jB,eAAA7jB,oBAEO;QACP,IAAA2I,SAAA3I,oBAAwB;QAUxB,IAAM8jB;YACLC,uBAAuB;YACvBC,OAAO;YACPC,SAAS;YACTC,QAAQ;YACRC,cAAc;YACdC,eAAe;YACfC,MAAM;YACNC,QAAQ;YACRC,QAAQ;YACRC,aAAa;YACbC,uBAAuB;;QA2DxB,IAAMC,aAAa;QAKnB,IAAA9a,QAAA;YAsGC,SAAAA,MACC2J,cACA/J;gBAAA,IAAAA,iBAAA,GAA2B;oBAA3BA;;gBAtGD3J,KAAAuH;oBACC6J;oBACAhH,MAAM;oBACN3G;wBACCN;4BACCU,MAAMmgB,aAAAlgB,gBAAgBghB;4BACtB9gB,MAAM;4BACNC,IAAI;4BACJ4N,QAAQ;4BACRzH,MAAM;4BACNhH;gCAAUE,OAAO;gCAAGD,KAAK;;4BACzBE;gCAASD,OAAO;gCAAGD,KAAK;;;wBAEzBK,UAAUsgB,aAAArgB,eAAeohB;wBACzBC;4BAAO3f,SAAS;4BAAM4f,WAAY;4BAAKC,OAAO,UAAQL,aAAU;;wBAChEhd,YAAY;wBACZhF;wBACAqiB,OAAOL;;oBAERjiB;wBACCO;4BACCU,MAAMmgB,aAAAlgB,gBAAgBqhB;4BACtBnhB,MAAM;4BACNC,IAAI;4BACJmG,MAAM;4BACNhH;gCAAUE,OAAO;gCAAGD,KAAK;;4BACzBE;gCAASD,OAAO;gCAAGD,KAAK;;;wBAEzB2hB;4BAAO3f,SAAS;4BAAM4f,WAAY;4BAAIC,OAAO,UAAQL,aAAU;;wBAC/DnhB,UAAUsgB,aAAArgB,eAAeohB;wBACzBliB;wBACAqiB,OAAOL;;oBAERzf;wBACCC,SAAS;wBACT+f,kBAAkB;wBAClBC,sBAAsB;wBACtBC,WAAW;wBACXC,eAAgB;wBAChBC,aAAa;wBACbC,YAAYC,OAAOC;wBACnBC,iBAAiB;wBACjBC,gBAAgBH,OAAOC;;oBAExBlb;wBAAapF,SAAS;wBAAMkI,KAAK;;oBACjCqB,YAAY;oBACZ/D,UAAU;oBACVhD,YAAY;oBACZuG;wBAAW/I,SAAS;;oBACpBP;wBACCO,SAAS;wBACTxB,MAAM+f,QAAArf,WAAWC;wBACjB1D;wBACAglB,kBAAkB;wBAClBC,WAAW;wBACX9iB,WAAW;wBACX2B,eAAe;wBACfqG,iBAAiB;wBACjBvG,WAAW;wBACXK;4BACCsC;gCACCrC,sBAAsB;gCACtBghB,sBAAsB;;4BAEvBxhB;gCACCQ,sBAAsB;gCACtBghB,sBAAsB;;;;oBAIzBhU;wBACCC,UAAU;wBACVzB,GAAG;wBACHC,GAAG;;oBAEJgM;wBACCtC,GAAG;wBACH3Z,GAAG;wBACH4a,GAAG;;oBAEJnQ,iBAAiB;oBACjBpG,WAAW;oBACX4P;oBACAwR,0BAA0B;oBAC1BC,oBAAoB;;gBAErBlmB,KAAA2J;gBASA3J,KAAAmmB,UAAU;gBASTnmB,KAAK6T,KAAK,IAAIP,eAAAQ;gBACd9T,KAAK6T,GAAG4L,gBAAgB/L,aAAauS,4BAA4BjmB,KAAKuH,MAAM0e;gBAE5EjmB,KAAKuH,QAAQiB,QAAA3G,MAAM8R,UAAU3T,KAAKuH,OAAOmM;gBACzC1T,KAAKomB,gBAAgB,IAAIvC,gBAAAwC,cAAcrmB,MAAM0T;gBAC7CA,aAAarP,SAASrE,KAAKomB,cAAcE;gBACzC5S,eAAe1T,KAAKumB,eAAe5c,SAAS+J;gBAC5C1T,KAAKmF,SAASuO;gBACd1T,KAAKmF;oBAAUkM,cAAcrR,KAAKwmB;;gBAClCxmB,KAAKymB;gBAELzmB,KAAKqP,SAAS,IAAIyU,SAAA4C,OAAO1mB;gBACzBA,KAAKyF,aAAa,IAAIse,YAAA4C,UAAU3mB,MAAMgkB,aAAA4C,UAAUC;gBAChD7mB,KAAK8mB,aAAa,IAAI/C,YAAA4C,UAAU3mB,MAAMgkB,aAAA4C,UAAUG;gBAChD/mB,KAAKuC;gBAGLvC,KAAK6T,GAAGqM,KAAK+D,mBAAmBC,uBAAuBxQ;gBAGvD1T,KAAKmmB,UAAU;gBACfnmB,KAAK6T,GAAGqM,KAAK+D,mBAAmBE,OAAOzQ;;YAMxC3J,MAAApI,UAAAkM,UAAA;gBACC7N,KAAK6T,GAAGqM,KAAK+D,mBAAmBG;gBAChCpkB,KAAK6T,GAAGc;gBACR3U,KAAKuH;;YAGNwC,MAAApI,UAAAwS,YAAA,SAAU6O;gBACT,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBG,SAASpB;;YAGtDjZ,MAAApI,UAAAqS,wBAAA,SAAsBgP;gBACrB,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBC,uBAAuBlB;;YAGpEjZ,MAAApI,UAAAuS,UAAA,SAAQ8O;gBACP,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBE,OAAOnB;;YAGpDjZ,MAAApI,UAAAqlB,WAAA,SAAShE;gBACR,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBI,QAAQrB;;YAGrDjZ,MAAApI,UAAAslB,gBAAA,SAAcjE;gBACb,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBK,cAActB;;YAG3DjZ,MAAApI,UAAAwN,iBAAA,SAAe6T;gBACd,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBM,eAAevB;;YAG5DjZ,MAAApI,UAAAoQ,eAAA,SAAaiR;gBACZ,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBU,aAAa3B;;YAG1DjZ,MAAApI,UAAAuhB,WAAA,SAASF;gBACR,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBS,QAAQ1B;;YAGrDjZ,MAAApI,UAAAulB,SAAA,SAAOlE;gBACN,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBO,MAAMxB;;YAGnDjZ,MAAApI,UAAA6N,WAAA,SAASwT;gBACR,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBQ,QAAQzB;;YAGrDjZ,MAAApI,UAAA0S,uBAAA,SAAqB2O;gBACpB,OAAOhjB,KAAK6T,GAAG4P,UAAUQ,mBAAmBW,uBAAuB5B;;YAGpEjZ,MAAApI,UAAA4D,WAAA,SAAS4I;gBACR,OAAOnO,KAAKomB,cAAc7gB,SAAS4I;;YAGpCpE,MAAApI,UAAAwD,WAAA,SAASgiB,UAAuBC,WAAiBC;gBAAA,IAAAA,gBAAA,GAAc;oBAAdA,SAAA;;gBAChD,IAAIC,YAAYtnB,KAAKuH;gBACrB,IAAIggB,cAAcJ;gBAElB,IAAIK;gBACJ,KAAK,IAAI7R,OAAO4R,aAAa;oBAC5B,IAAID,UAAU3R,SAAS4R,YAAY5R,MAAM;wBACxC6R,aAAa7R,OAAO4R,YAAY5R;;;gBAIlC3V,KAAKymB,cAAce;gBAInB,IAAIC;gBACJ,IAAIN,SAAS9iB,QAAQ,KAAK,IAAI8J,aAAagZ,SAAS9iB,QAAQ;oBAC3D,IAAIqjB,eAAeP,SAAS9iB,OAAO8J;oBACnC,IAAIuZ,aAAa5mB,MAAM2mB,WAAWtZ,aAAauZ,aAAa5mB;2BACrD4mB,aAAa5mB;;gBAErB,IAAI6mB,uBAAuBlS,OAAOC,KAAK+R,YAAY/lB,SAAS;gBAG5D1B,KAAKuH,QAAQiB,QAAA3G,MAAM8R,UAAU3T,KAAKuH,OAAO4f,UAAU;gBAGnD,IAAIQ,sBAAsB,KAAK,IAAIxZ,aAAasZ,YAAY;oBAC3DznB,KAAKuH,MAAMlD,OAAO8J,WAAWrN,OAAO2mB,WAAWtZ;;gBAGhD,IAAIkZ,QAAQ;gBAGZ,IAAIO,oBAAoB5nB,KAAK6nB,iBAAiBL;gBAC9CA,eAAeI,kBAAkBJ;gBAEjCxnB,KAAK8nB,uBAAuBN,cAAcJ;;YAOnCrd,MAAApI,UAAAkmB,mBAAR,SAAyBL;gBACxB,IAAI1mB,OAAOd,KAAKuH;gBAChB,IAAIwgB;gBACJ,IAAIC,aAAaxf,QAAA3G,MAAM8R,cAAc7S;gBAGrC,IAAImnB,gBAAgBT,aAAaxV;gBACjC,IAAIkW,cAAcD,iBAAiBnnB,KAAKkR,OAAOC,YAAYnR,KAAKsQ,UAAUY,OAAOC;gBACjF,IAAIiW,aAAa;oBAChB,IAAIC,OAAOrnB,KAAKsQ,UAAUY,OAAOxB;oBACjC,IAAI4X,WAAYH,cAAczX;oBAC9B,IAAIoB,gBAAgB9Q,KAAK2C,MAAMN,MAAM0O;oBACrC,IAAIwW,YAAYroB,KAAKsoB,iBAAiBH,OAAOC;oBAC7CL,MAAMtkB;wBAASN;4BAAQ0O,QAAQD,gBAAgByW;;;oBAC/CL,aAAaxf,QAAA3G,MAAM8R,UAAUqU;wBAAavkB,OAAOskB,MAAMtkB;;;gBAGxD,IAAI8kB,kBAAkBf,aAAahe,cAAc,KAAKge,aAAa9d,eAAe;gBAElF,IAAI8e,iBAAiB;gBACrB,IAAIC,yBACHP,eACAK,mBACCf,aAAa/jB,SAAU+jB,aAAa/jB,MAAW,SAChDzD,KAAKuH,MAAM9D,MAAMN,MAAMK,gBAAgB;gBAExC,IAAIilB,wBAAwB;oBAC3B,IAAIC,aAAa1oB,KAAK2oB,iBAAiBX,YAAYR;oBACnD,IAAIkB,YAAY;wBACfF,iBAAiB;wBACjBT,QAAQvf,QAAA3G,MAAM8R,UAAUoU;4BAAQtkB,OAAOilB;;wBACvCV,aAAaxf,QAAA3G,MAAM8R,UAAUqU;4BAAavkB,OAAOilB;;;;gBAOnD,IAAIE,yBACHL,oBAECznB,KAAK8B,MAAMO,MAAMU,SAASmgB,aAAAlgB,gBAAgBqhB,gBAC1CrkB,KAAK8B,MAAMO,MAAMU,SAASmgB,aAAAlgB,gBAAgB+kB,QAC1C/nB,KAAK8B,MAAMO,MAAM2lB,kBAEjBN,kBAAkBhB,aAAanjB,UAAUmjB,aAAa5kB,UACvD5C,KAAKuH,MAAM3E,MAAMO,MAAMK,gBAAgB;gBAExC,IAAIolB,wBAAuB;oBAC1B,IAAIG,aAAa/oB,KAAKgpB,iBAAiBhB;oBACvC,IAAIe,YAAY;wBACfhB,QAAQvf,QAAA3G,MAAM8R,UAAUoU;4BAAQnlB,OAAOmmB;;wBACvCf,aAAaxf,QAAA3G,MAAM8R,UAAUqU;4BAAaplB,OAAOmmB;;;;gBAInD/oB,KAAKymB,cAAcsB;gBACnB,IAAIkB,kBAAkBzgB,QAAA3G,MAAM8R,UAAU6T,cAAcO;gBACpDA,MAAM1W,eAAerR,KAAKwmB,gBAAgByC;gBAC1CjpB,KAAKymB,cAAcsB;gBACnB/nB,KAAKuH,QAAQiB,QAAA3G,MAAM8R,UAAU3T,KAAKuH,OAAOwgB;gBACzC;oBAAQP,cAAcyB;oBAAiBlB,OAAOA;;;YAGvChe,MAAApI,UAAA6kB,kBAAR,SAAwBgB;gBACvB,IAAI0B,cAAc1B;gBAClB,IAAInW;gBAEJ,IAAI6X,cAAc1B,aAAanjB,UAAUrE,KAAKomB,eAAe;oBAC5D/U,aAAahN;wBACZiN,SAAStR,KAAKomB,cAAc+C;wBAC5BC,SAASppB,KAAKomB,cAAciD;;;gBAG9B,OAAOhY;;YAGAtH,MAAApI,UAAA8kB,gBAAR,SAAsBe;gBACrB,KAAKA,cAAcA,eAAexnB,KAAKuH;gBACvC,IAAI6J,YAAYpR,KAAKuH,MAAM6J;gBAG3B5I,QAAA3G,MAAMwY,UAAUra,KAAKuH,OAAO6J,WAAWoW,gBAAe;;YAI/Czd,MAAApI,UAAAmmB,yBAAR,SAA+BN,cAA2BJ;gBACzD,IAAIhW,YAAYpR,KAAKuH,MAAM6J;gBAG3BpR,KAAK6T,GAAGqM,KAAK+D,mBAAmBI,QAAQmD,cAAcJ;gBAGtD,KAAK,IAAIzR,OAAO6R,cAAc;oBAC7BxnB,KAAK6T,GAAGqM,KAAKvK,MAAM,UAAW6R,aAAsC7R,MAAMyR;;gBAG3E,KAAKpnB,KAAKmmB,SAAS;gBAGnB,IAAImD,wBACH9B,aAAaxV,UACbwV,aAAaxV,OAAOC,aAAa,SACjCb,UAAUY,OAAOC,aAAa;gBAE/BqX,yBAAyBtpB,KAAK6T,GAAGqM,KAAK+D,mBAAmBU,aAAa6C;gBAEtE,IAAI+B,2BACH/B,aAAa/jB,SACb+jB,aAAa/jB,MAAMN,SACnBqkB,aAAa/jB,MAAMN,MAAM0O,gBAAgB;gBAE1C0X,4BAA4BvpB,KAAK6T,GAAGqM,KAAK+D,mBAAmBS,QAAQ8C;gBAEpE,IAAIgC,mBACFhC,aAAa/jB,SAAS+jB,aAAa/jB,MAAMN,SAASqkB,aAAa/jB,MAAMN,MAAMiH,QAC3Eod,aAAa5kB,SAAS4kB,aAAa5kB,MAAMO,SAASqkB,aAAa5kB,MAAMO,MAAMiH;gBAE7Eof,oBAAoBxpB,KAAK6T,GAAGqM,KAAK+D,mBAAmBO,MAAMgD;gBAE1D,IAAIiC,oBAAqBjC,aAAahe,SAASge,aAAa9d;gBAC5D+f,qBAAqBzpB,KAAK6T,GAAGqM,KAAK+D,mBAAmBQ,QAAQ+C;gBAE7D,IAAIkC,kCAAmClC,aAAyB;gBAChEkC,iCAAiC1pB,KAAK6T,GAAGqM,KAAK+D,mBAAmBW,uBAAuB4C,aAAa/S;;YAO9F1K,MAAApI,UAAA4kB,iBAAR,SAAuB5c,SAAwB+J;gBAA/C,IAAAxK,QAAAlJ;gBACC0T,aAAae;gBACb9K,QAAQ2C,QAAQ,SAAAqd;oBACf,IAAIC,cAAcD,OAAOxd;oBACzB,IAAI0d,aAAaD,YAAYhW;oBAC7BF,aAAae,aAAaoV,cAAcrhB,QAAA3G,MAAM8R,cAAcgW,OAAOjW;oBACnExK,MAAKS,QAAQkgB,cAAcF;oBAC3BA,OAAO5c,WAAW7D;;gBAEnB,OAAOwK;;YAQR3J,MAAApI,UAAAmoB,YAAA,SAAUD;gBACT,OAAO7pB,KAAK2J,QAAQkgB;;YAIb9f,MAAApI,UAAAY,gBAAR;gBAAA,IAAA2G,QAAAlJ;gBACCA,KAAK6T,GAAGoM,GAAGgE,mBAAmBM,eAAe,SAACwF,eAA+BC;oBAC5E9gB,MAAK+gB,mBAAmBF,eAAeC;;;YAIjCjgB,MAAApI,UAAAsoB,qBAAR,SAA2BF,eAA+BC;gBACzD,KAAK,IAAI7b,aAAa4b,eAAe;oBACpC/pB,KAAK6T,GAAGqM,KAAK+D,mBAAmBK,cAAcnW,WAAW4b,cAAc5b,YAAY6b;;;YAI7EjgB,MAAApI,UAAAgnB,mBAAR,SAAyBX,YAAyBR;gBACjD,IAAI0C,YAAYlC,WAAWvkB,MAAMN;gBACjC,IAAI4kB;oBAAuB5kB;;gBAC3B,IAAIgnB,eAAeD,UAAU1mB,gBAAgB;gBAC7C,IAAIA,SAAiB4mB;gBACrB,IAAIhgB,OAAO8f,UAAU9f;gBAErB,IAAI8f,UAAUpB,cAAc;oBAC3BtgB,QAAA3G,MAAMwH,MAAM;;gBAGb,IAAI8gB,cAAc;oBACjB3mB,UAAU0mB,UAAUlmB;oBACpBomB,cAAcpC,WAAWxe,SAAS0gB,UAAUjmB,KAAKimB,UAAUlmB;oBAC3D+jB;wBAAU5kB;4BAAQK,SAASA;4BAAS4mB,aAAaA;;;uBAC3C;oBACN5mB,UAAU0mB,UAAU1mB;oBACpB4mB,cAAcF,UAAUE;oBAGxB,IACC5C,aAAa/jB,UACZ+jB,aAAa/jB,MAAMN,MAAMa,aAAa,KAAKwjB,aAAa/jB,MAAMN,MAAMc,KACpE;wBACD,IAAIujB,aAAa/jB,MAAMN,MAAMiH,MAAM;4BAClC5B,QAAA3G,MAAMwH,MAAM;;wBAEb,IAAIghB,qBAAqBrC,WAAWxe,SAAS0gB,UAAUjmB,KAAKimB,UAAUlmB;wBACtE+jB,MAAM5kB,MAAM0O,SAASqY,UAAUlmB,OAAOR;wBACtCukB,MAAM5kB,MAAMiH,OAAOigB,qBAAqBD;wBACxC,OAAOrC;;;gBAMT,GAAG;oBACF,IAAI/jB,OAAOR,UAAU0mB,UAAUrY;oBAC/B,IAAI5N,KAAKD,OAAOgkB,WAAWxe,SAAS4gB,cAAchgB;oBAClD,IAAIkgB,cAAcrmB,KAAKD;oBACvB,IAAIumB,wBAAwB;oBAC5B,IAAIC,wBAAyBN,UAAUhmB,aAAaomB,cAAcJ,UAAUhmB;oBAC5E,IAAIumB,wBAAyBP,UAAU/lB,aAAammB,cAAcJ,UAAU/lB;oBAC5EomB,wBAAwBC,yBAAyBC;oBACjD,IAAIF,uBAAuB;wBAC1B,IAAIG,WAAWJ,cAAcJ,UAAUhmB,YACtComB,cAAcJ,UAAUhmB,YACxBomB,cAAcJ,UAAU/lB;wBACzB,IAAIiG,OAAOA,OAAOsgB;wBAClB3C,MAAM5kB,MAAMiH,OAAOA;;yBAEZmgB;gBAETxC,MAAM5kB,MAAMa,OAAOA;gBACnB+jB,MAAM5kB,MAAMc,KAAKA;gBACjB,OAAO8jB;;YAIAhe,MAAApI,UAAAqnB,mBAAR,SAAyBhB;gBACxB,IAAID;oBAAuB5kB;;gBAC3B,IAAIwnB,aAAa3C,WAAWplB,MAAMO;gBAClC,IAAIgnB,eAAeQ,WAAWP,oBAAoB;gBAClD,IAAI/lB,SAASrE,KAAKomB;gBAClB,IAAIwE,gBAAgBvmB,OAAO8kB;gBAC3B,IAAI0B,kBAAkBxmB,OAAOglB;gBAC7B,IAAIyB,SAAS9C,WAAWvkB,MAAMN;gBACzB,IAAA4nB,QAAAD,OAAA9mB,MAAagnB,MAAAF,OAAA7mB;gBAClB,IAAIgnB,eAAeD,MAAMD;gBACzB,IAAIvnB,SAAiB4mB,aAAqBvY,QAAgBzH,MAAc8gB;gBAGxE,IAAIF,MAAMJ,eAAe;oBACxBI,MAAMJ;oBACNG,QAAQC,MAAMC;uBACR,IAAIF,QAAQF,iBAAiB;oBACnCE,QAAQF;oBACRG,MAAMD,QAAQE;;gBAGf,IAAIE,OAAO9mB,OAAO+mB,WAAWL,OAAOC;gBACpC,IAAIK,OAAOhnB,OAAOinB,WAAWP,OAAOC;gBAEpC,IAAIO,aAAalnB,OAAO+mB,WAAWR,eAAeA;gBAClD,IAAID,WAAW9mB,QAAQmgB,aAAAlgB,gBAAgBqhB,cAAc;oBACpD,IAAIoG,aAAaJ,MAAMA,OAAOI;oBAC9B,IAAIA,aAAaF,MAAMA,OAAOE;;gBAG/B,IAAIZ,WAAW7B,cAAc;oBAC5B,IAAI6B,WAAWnnB,gBAAgB,GAAGgF,QAAA3G,MAAMwH,MAAM;oBAC9C,IAAImiB,6BAA6BjqB,KAAKkqB,IAAId,WAAWnnB,UAAU2nB;oBAC/D,IAAIO,6BAA6BnqB,KAAKkqB,IAAId,WAAWnnB,UAAU6nB;oBAC/D,IAAIM,yBAAyBpqB,KAAKsR,IAAI2Y,4BAA4BE;oBAClEP,OAAOR,WAAWnnB,UAAUmoB;oBAC5BN,OAAOV,WAAWnnB,UAAUmoB;;gBAE7B,IAAIpoB,SAASonB,WAAWpnB;gBACxB,IAAIH;oBACHE,OAAOqnB,WAAWvnB,QAAQE,QAAQC,OAAOD;oBACzCD,KAAKsnB,WAAWvnB,QAAQC,MAAME,OAAOF;;gBAGtC,IAAID,QAAQC,MAAMD,QAAQE,SAAS0kB,WAAWte,QAAQ;oBACrDlB,QAAA3G,MAAMkW,KAAK;;gBAGZ,IAAIuS,cAAca,OAAOE;gBACzB,IAAIO,uBAAuBxoB,QAAQC,MAAM2kB,WAAWte;gBACpD,IAAImiB,0BAA0BzoB,QAAQE,QAAQ0kB,WAAWte;gBACzD,IAAIoiB,wBAAwB,IAAIF,uBAAuBC;gBACvD,IAAIE,qBAAqBzB,cAAcwB;gBACvC,IAAIE,UAAUX,OAAOU,qBAAqBF;gBAC1C,IAAII,QAAQd,OAAOY,qBAAqBH;gBAExC,IAAIzB,cAAc;oBACjB3mB,UAAUmnB,WAAWnnB,gBAAgB,IAAImnB,WAAWnnB,UAAUwoB;oBAC9D5B,cAAcpC,WAAWte,UAAUuiB,QAAQD;oBAC3CjE;wBAAU5kB;4BAAQK,SAASA;4BAAS4mB,aAAaA;;;oBACjDc,aAAa;uBACP;oBACNd,cAAcO,WAAWP;oBACzB5mB,UAAUmnB,WAAWnnB;oBAErB,IAAI0oB,aAAa3qB,KAAKiF,MAAMxG,KAAKmsB,kBAAkBhB;oBACnD,IAAIiB,aAAa7qB,KAAKiF,MAAMxG,KAAKmsB,kBAAkBd;oBACnDH,aACCgB,aAAalE,WAAWte,SAASnG,OAAOF,OACxC6oB,aAAalE,WAAWte,SAAStG,QAAQC,OACzC+oB,aAAa7oB,OAAOD,SACpB8oB,aAAahpB,QAAQE;;gBAIvB,KAAK4nB,YAAY,OAAO;gBAExBrZ,SAASma,UAAUxoB;gBACnB4G,OAAQ4d,WAAWte,UAAUuiB,QAAQD,WAAY5B;gBAEjD,IAAIiC,mBAAmBrsB,KAAKuH,MAAM3E,MAAMO;gBACxC,IAAIkpB,iBAAiBroB,SAASgoB,SAASjE,MAAM5kB,MAAMa,OAAOgoB;gBAC1D,IAAIK,iBAAiBpoB,OAAOgoB,OAAOlE,MAAM5kB,MAAMc,KAAKgoB;gBACpD,IAAII,iBAAiBxa,WAAWA,QAAQkW,MAAM5kB,MAAM0O,SAASA;gBAC7D,IAAIwa,iBAAiBjiB,SAASA,MAAM2d,MAAM5kB,MAAMiH,OAAOA;gBAEvD,OAAO2d;;YAGRhe,MAAApI,UAAAyI,OAAA,SAAKF,WAAmBC;gBAAxB,IAAAjB,QAAAlJ;gBAAwB,IAAAmK,gBAAA,GAAY;oBAAZA,SAAA;;gBACvB,IAAAG,KAAAtK,KAAAuH,MAAA9D,MAAAN,OAAKiH,OAAAE,GAAAF,MAAMyH,SAAAvH,GAAAuH,QAAQuY,cAAA9f,GAAA8f;gBACnB,IAAIkC,UAAUliB,OAAOF;gBACrB,IAAI5C,eAAetH,KAAKuH,MAAMiC,SAAS4gB,cAAchgB;gBACrD,IAAImiB,YAAYvsB,KAAKuH,MAAMiC,SAAS4gB,cAAckC;gBAClD,IAAIE,YAAY3a,UAAUvK,eAAeilB,aAAapiB;gBACtDnK,KAAKmF;oBAAU1B;wBAAQN;4BAAQiH,MAAMkiB;4BAASza,QAAQ2a;;;;gBACtD,OAAO,IAAI1jB,OAAAiS,QAAc,SAAC3U;oBACzB,IAAIqmB,gBAAgBvjB,MAAK3B,MAAMnC,WAAWC,UAAU6D,MAAK3B,MAAMnC,WAAWkgB,YAAY;oBACtF7e,WAAWL,SAASqmB,gBAAgB;;;YAItC1iB,MAAApI,UAAAmG,cAAA,SAAY3E,OAAegH;gBAC1B,IAAAG,KAAAtK,KAAAuH,MAAA9D,MAAAN,OAAKinB,cAAA9f,GAAA8f,aAAahgB,OAAAE,GAAAF;gBAClB,IAAI9C,eAAetH,KAAKuH,MAAMiC,SAAS4gB,cAAchgB;gBACrD,OAAOpK,KAAKoK,KAAK9C,eAAenE,OAAOgH;;YAGxCJ,MAAApI,UAAAoG,cAAA;gBAAA,IAAAmB,QAAAlJ;gBACC,IAAIuH,QAAQvH,KAAKuH;gBACjB,IAAImlB,UAAU1sB,KAAKomB,cAAc+C;gBACjC,IAAIhmB,QAAQoE,MAAM9D,MAAMN;gBACxB,IAAI0O,SAAS6a,UAAU1sB,KAAKsoB,iBAAiB/gB,MAAMiC,SAASxJ,KAAKsoB,iBAAiBnlB,MAAMC,QAAQC,OAAOF,MAAMK;gBAC7GxD,KAAKmF;oBAAU1B;wBAAQN;4BAAQ0O,QAAQA;;;;gBACvC,OAAO,IAAI/I,OAAAiS,QAAc,SAAC3U;oBACzB,IAAIqmB,gBAAgBvjB,MAAK3B,MAAMnC,WAAWC,UAAU6D,MAAK3B,MAAMnC,WAAWogB,cAAc;oBACxF/e,WAAWL,SAASqmB,gBAAgB;;;YAOtC1iB,MAAApI,UAAAgrB,kBAAA,SAAgBtrB;gBACf,IAAAiJ,KAAAtK,KAAAuH,MAAA9D,MAAAN,OAAKinB,cAAA9f,GAAA8f,aAAahgB,OAAAE,GAAAF,MAAM5G,UAAA8G,GAAA9G;gBACxB,QAAQnC,OAAOmC,WAAW4mB,cAAchgB;;YAMzCL,MAAApI,UAAAirB,kBAAA,SAAgBtrB;gBACf,IAAAgJ,KAAAtK,KAAAuH,MAAA3E,MAAAO,OAAKinB,cAAA9f,GAAA8f,aAAahgB,OAAAE,GAAAF,MAAM5G,UAAA8G,GAAA9G;gBACxB,QAAQlC,OAAOkC,WAAW4mB,cAAchgB;;YAMzCL,MAAApI,UAAAkrB,kBAAA,SAAgBrc;gBACf,OAAOxQ,KAAKuH,MAAM9D,MAAMN,MAAMK,UAAUxD,KAAKsoB,iBAAiB9X;;YAO/DzG,MAAApI,UAAAmrB,mBAAA,SAAiBzrB;gBAChB,OAAOA,OAAOrB,KAAKuH,MAAM9D,MAAMN,MAAMinB,cAAcpqB,KAAKuH,MAAM9D,MAAMN,MAAMiH;;YAO3EL,MAAApI,UAAAorB,mBAAA,SAAiBzrB;gBAChB,OAAOA,OAAOtB,KAAKuH,MAAM3E,MAAMO,MAAMinB,cAAcpqB,KAAKuH,MAAM3E,MAAMO,MAAMiH;;YAM3EL,MAAApI,UAAA2mB,mBAAA,SAAiBjnB;gBAChB,OAAOA,OAAOrB,KAAKuH,MAAM9D,MAAMN,MAAMinB,cAAcpqB,KAAKuH,MAAM9D,MAAMN,MAAMiH;;YAO3EL,MAAApI,UAAAqrB,mBAAA,SAAiB1rB;gBAChB,OAAOA,OAAOtB,KAAKuH,MAAM3E,MAAMO,MAAMinB,cAAcpqB,KAAKuH,MAAM3E,MAAMO,MAAMiH;;YAO3EL,MAAApI,UAAAsrB,oBAAA,SAAkBzc;gBACjB,IAAAlG,KAAAtK,KAAAuH,MAAA9D,MAAAN,OAAKK,UAAA8G,GAAA9G,SAASqO,SAAAvH,GAAAuH;gBACd,OAAOrO,UAAUqO,SAAS7R,KAAKsoB,iBAAiB9X;;YAOjDzG,MAAApI,UAAAurB,oBAAA,SAAkBzc;gBACjB,IAAAnG,KAAAtK,KAAAuH,MAAA3E,MAAAO,OAAKK,UAAA8G,GAAA9G,SAASqO,SAAAvH,GAAAuH;gBACd,OAAOrO,UAAUqO,SAAS7R,KAAKgtB,iBAAiBvc;;YAOjD1G,MAAApI,UAAAwrB,oBAAA,SAAkB9rB;gBACjB,IAAAiJ,KAAAtK,KAAAuH,MAAA9D,MAAAN,OAAK0O,SAAAvH,GAAAuH,QAAQrO,UAAA8G,GAAA9G;gBACb,OAAOxD,KAAK8sB,iBAAiBzrB,OAAOmC,UAAUqO;;YAM/C9H,MAAApI,UAAAwqB,oBAAA,SAAkB7qB;gBACjB,IAAAgJ,KAAAtK,KAAAuH,MAAA3E,MAAAO,OAAK0O,SAAAvH,GAAAuH,QAAQrO,UAAA8G,GAAA9G;gBACb,OAAOxD,KAAK+sB,iBAAiBzrB,OAAOkC,UAAUqO;;YAO/C9H,MAAApI,UAAAyrB,oBAAA,SAAkB/rB;gBACjB,OAAOrB,KAAKmtB,kBAAkBntB,KAAK6sB,gBAAgBxrB;;YAOpD0I,MAAApI,UAAA0rB,oBAAA,SAAkBC;gBACjB,OAAOttB,KAAK2sB,gBAAgB3sB,KAAKitB,kBAAkBK;;YAIpDvjB,MAAApI,UAAA4rB,kBAAA,SAAgBlsB,MAAcC;gBAC7B,OAAO,IAAIqiB,QAAQ3jB,KAAK2sB,gBAAgBtrB,OAAOrB,KAAK4sB,gBAAgBtrB,OAAO;;YAI5EyI,MAAApI,UAAA6rB,mBAAA;gBACC,OAAOxtB,KAAKitB,kBAAkB;;YAI/BljB,MAAApI,UAAA8P,oBAAA;gBACC,OAAOzR,KAAKitB,kBAAkBjtB,KAAKuH,MAAMiC;;YAI1CO,MAAApI,UAAAgQ,kBAAA;gBACC,OAAO3R,KAAKitB,kBAAkBjtB,KAAKuH,MAAMiC,QAAQxJ,KAAKuH,MAAM9D,MAAMN,MAAMC,QAAQC;;YAGlF,OAAA0G;;QA5rBanK,QAAAmK,QAAKA;Of+0EZ,SAASlK,QAAQD,SAASO;QAE/B;QgB/6ED,IAAAqI,UAAArI,oBAAoB;QACpB,IAAAstB,yBAAAttB,oBAAmC;QACnC,IAAAmT,iBAAAnT,oBAA2B;QAC3B,IAAA2I,SAAA3I,oBAAsB;QAMtB,IAAMutB;YACLrJ,QAAQ;YACRsJ,iBAAiB;;SAElB,SAAYppB;YAAYA,sBAAA;YAAMA,sBAAA;WAAlB3E,QAAA2E,eAAA3E,QAAA2E;QAAZ,IAAYA,aAAA3E,QAAA2E;QA2BZ,IAAAqpB,QAAA;YAYC,SAAAA,MAAYC,YAAmB1f,WAAmBuF;gBATlD1T,KAAAopB,UAAUhN;gBACVpc,KAAA8tB,UAAU1R;gBACVpc,KAAAsR,WAAW8K;gBACXpc,KAAA+tB,WAAW3R;gBAOV,IAAItW,UAAU4N,aAAarP,OAAO8J;gBAClCnO,KAAK+C,OAAOoL;gBACZnO,KAAK6tB,aAAaA;gBAClB7tB,KAAKsmB,oBAAoB9d,QAAA3G,MAAM8R,UAAU3T,KAAK6tB,WAAWtmB,MAAMzC,mBAAmBgB;gBAClF9F,KAAKsmB,kBAAkBvjB,OAAOoL;gBAC9B,IAAIrI,QAAQrB,SAASzE,KAAKsmB,kBAAkBxlB,OAAO8sB,MAAMI,YAAYloB,QAAQrB;gBAC7EzE,KAAKsmB,kBAAkB7hB;gBACvBzE,KAAK6T,KAAK,IAAIP,eAAAQ;gBACd9T,KAAKgM;;YAGE4hB,MAAAjsB,UAAAqS,wBAAR;gBACChU,KAAKiuB,kBAAkB,IAAIR,uBAAAS,qBAAqBluB,KAAK6tB,YAAY7tB;;YAG1D4tB,MAAAjsB,UAAAqK,aAAR;gBAAA,IAAA9C,QAAAlJ;gBACC,IAAI6tB,aAAa7tB,KAAK6tB;gBACtBA,WAAW7Z,sBAAsB;oBAAM,OAAA9K,MAAK8K;;gBAC5C6Z,WAAW9b,aAAa;oBAAM,OAAA7I,MAAKilB;;gBACnCN,WAAW3G,OAAO;oBAAM,OAAAhe,MAAKilB;;gBAC7BN,WAAW5G,cAAc,SAAC9Y,WAAWigB,gBAAgBpE;oBAAY,OAAA9gB,MAAK2K,GAAGqM,KAAKwN,OAAOrJ,QAAQ+J,gBAAgBpE;;gBAC7G6D,WAAW1Z,UAAU;oBAAM,OAAAjL,MAAK2K,GAAGc;;;YAGpCiZ,MAAAjsB,UAAA0sB,uBAAA;gBACC,OAAOruB,KAAKsmB;;YAGbsH,MAAAjsB,UAAAgF,aAAA,SAAW2nB;gBACV,IAAIxoB,UAAU9F,KAAKwU;gBACnB,IAAIwV,UAAU4D,MAAMI,YAAYM,SAAStuB,KAAK4B;gBAC9C,IAAI2sB,mBAAmBzoB,QAAQhF,KAAK6L,OAAOqd;gBAC3ChqB,KAAKwuB,WAAWD,kBAAkBvE;;YAGnC4D,MAAAjsB,UAAA8sB,cAAA,SAAYH;gBACX,IAAIxoB,UAAU9F,KAAKwU;gBACnB,IAAIwV,UAAU4D,MAAMI,YAAYM,SAAStuB,KAAK4B,WAAW;gBACzD,IAAI2sB,mBAAmBvE,QAAQrd,OAAO7G,QAAQhF;gBAC9Cd,KAAKwuB,WAAWD,kBAAkBvE;;YAG3B4D,MAAAjsB,UAAA6sB,aAAR,SAAmBE,SAAqB1E;gBACvC,KAAiB,IAAAnV,KAAA,GAAA8Z,YAAA3E,SAAAnV,KAAA8Z,UAAAjtB,QAAAmT,MAAQ;oBAApB,IAAI5S,OAAI0sB,UAAA9Z;oBACZ,IAAI5S,KAAKZ,OAAOrB,KAAKopB,SAASppB,KAAKopB,UAAUnnB,KAAKZ;oBAClD,IAAIY,KAAKZ,OAAOrB,KAAKsR,SAAStR,KAAKsR,UAAUrP,KAAKZ;oBAClD,IAAIY,KAAKX,OAAOtB,KAAK8tB,SAAS9tB,KAAK8tB,UAAU7rB,KAAKX;oBAClD,IAAIW,KAAKX,OAAOtB,KAAK+tB,SAAS/tB,KAAK+tB,UAAU9rB,KAAKX;;gBAEnD,IAAIwE,UAAU9F,KAAKwU;gBACnB,IAAIoa;oBAA2BvqB,SAAQiG,SAACA,GAACxE,QAAQ/C;wBAAQjC,MAAM4tB;uBAAQpkB;;gBACvEtK,KAAK6tB,WAAW1oB,SAASypB,YAAY5E;gBhBg5E9B,IAAI1f;;YgB74EZsjB,MAAAjsB,UAAAC,UAAA,SAAQitB,OAAgBC;gBACvB,IAAIhuB,OAAOd,KAAKwU,aAAa1T;gBAC7B,IAAI+tB,cAAc,KAAKC,YAAY,GAAG,OAAOhuB;gBAE7C+tB,QAAQA,eAAe,IAAIA,QAAQ/tB,KAAK,GAAGO;gBAC3CytB,MAAMA,aAAa,IAAIA,MAAMhuB,KAAKA,KAAKY,QAAQL;gBAC/C,IAAI0tB;gBACJ,KAAiB,IAAAla,KAAA,GAAAma,SAAAluB,MAAA+T,KAAAma,OAAAttB,QAAAmT,MAAK;oBAAjB,IAAI5S,OAAI+sB,OAAAna;oBACZ,IAAI5S,KAAKZ,OAAOwtB,OAAO;oBACvB,IAAI5sB,KAAKZ,OAAOytB,KAAK;oBACrBC,aAAa3tB,KAAKa;;gBAEnB,OAAO8sB;;YAGRnB,MAAAjsB,UAAAstB,eAAA;gBACC,OAAOjvB,KAAKwU,aAAa1T,KAAK;;YAG/B8sB,MAAAjsB,UAAAoE,cAAA;gBACC,IAAIjF,OAAOd,KAAKwU,aAAa1T;gBAC7B,OAAOA,KAAKA,KAAKY,SAAS;;YAG3BksB,MAAAjsB,UAAA6S,aAAA;gBACC,OAAOxU,KAAK6tB,WAAWtmB,MAAMlD,OAAOrE,KAAK+C;;YAG1C6qB,MAAAjsB,UAAAqE,aAAA,SAAWF;gBACV9F,KAAK6tB,WAAW1oB;oBAAUd,SAAQiG,SAACA,GAACtK,KAAK+C,QAAO+C,SAAOwE;;gBhB+4EhD,IAAIA;;YgB54EZsjB,MAAAjsB,UAAAuE,mBAAA,SAAiB8c;gBAAjB,IAAA9Z,QAAAlJ;gBACCA,KAAK6T,GAAGoM,GAAGyN,OAAOC,iBAAiB3K;gBACnC,OAAO;oBACN9Z,MAAK2K,GAAGkM,IAAI2N,OAAOC,iBAAiB3K;;;YAOtC4K,MAAAjsB,UAAAqlB,WAAA,SAAShE;gBAAT,IAAA9Z,QAAAlJ;gBACCA,KAAK6T,GAAGoM,GAAGyN,OAAOrJ,QAAQrB;gBAC1B,OAAO;oBAAQ9Z,MAAK2K,GAAGkM,IAAI2N,OAAOrJ,QAAQrB;;;YAG3C4K,MAAAjsB,UAAAiE,eAAA,SAAaod;gBAAb,IAAA9Z,QAAAlJ;gBACC,IAAIkvB,aAAa,SAACd,gBAA+BpE;oBAChD,IAAIA,SAAShH,GAAGgH;;gBAEjBhqB,KAAK6T,GAAGoM,GAAGyN,OAAOrJ,QAAQ6K;gBAC1B,OAAO;oBACNhmB,MAAK2K,GAAGkM,IAAI2N,OAAOrJ,QAAQ6K;;;YAIrBtB,MAAAjsB,UAAAwsB,yBAAR;gBAAA,IAAAjlB,QAAAlJ;gBACC,IAAIA,KAAKmvB,gBAAgB;gBACzB,IAAItB,aAAa7tB,KAAK6tB;gBACtB,IAAIzE,UAAUyE,WAAWtmB,MAAM8J,aAAahN,OAAO+kB;gBACnD,IAAIgG,aAAavB,WAAWV,kBAAkB/D;gBAC9C,IAAIiG,gBAAgBD,aAAa;gBACjC,IAAA9kB,KAAAujB,WAAAtmB,MAAA9D,MAAAN,OAAKa,OAAAsG,GAAAtG,MAAMC,KAAAqG,GAAArG;gBACX,IAAIqrB,sBAAsBrrB,KAAKD;gBAC/B,KAAKqrB,eAAe;gBAEpBrvB,KAAKmvB,iBAAiB,IAAIrmB,OAAAiS,QAAuB,SAAC3U,SAAmBC;oBACpE6C,MAAK2K,GAAGqM,KAAKwN,OAAOC,iBAAiB2B,qBAAqBlpB,SAASC;;gBAGpErG,KAAKmvB,eAAennB,KAAK,SAACgiB;oBACzB9gB,MAAKulB,YAAYzE;oBACjB9gB,MAAKimB,iBAAiB;mBACpB;oBACFjmB,MAAKimB,iBAAiB;;;YAKjBvB,MAAAI,cAAP,SAAoBhE,SAAwBuF,aAA0BC;gBAAA,IAAAA,mBAAA,GAAiB;oBAAjBA,YAAA;;gBACrE,IAAI1uB;gBACJ,WAAWkpB,QAAQ,MAAM,UAAU;oBAClCuF,cAAcA;oBACd,IAAIE,mBAAW;oBACf,IAAIpuB,YAAI;oBACR,IAAImuB,WAAW;wBACdC,cAAcF,YAAY;wBAC1BluB,OAAOouB,YAAYpuB,OAAO2oB,QAAQtoB;2BAC5B;wBACN+tB,cAAcF,YAAYA,YAAY7tB,SAAS;wBAC/CL,OAAOouB,cAAcA,YAAYpuB,OAAO,IAAI;;oBAE7C,KAAiB,IAAAwT,KAAA,GAAAvK,KAAA0f,SAAAnV,KAAAvK,GAAA5I,QAAAmT,MAAoB;wBAAhC,IAAIvT,OAAIgJ,GAAAuK;wBACZ/T,KAAKM;4BAAMC,MAAMA;4BAAMC,MAAMA;4BAAMjB,IAAImI,QAAA3G,MAAMmW;;wBAC7C3W;;uBAEK;oBACNP,OAAOkpB;;gBAER,OAAOlpB;;YAET,OAAA8sB;;QAzKahuB,QAAAguB,QAAKA;OhBkkFZ,SAAS/tB,QAAQD,SAASO;QAE/B;QiB5mFD,IAAAmT,iBAAAnT,oBAA6B;QAE7B,IAAOwjB,UAAUtb,MAAMsb;QACvB,IAAAC,UAAAzjB,oBAA6F;QAC7F,IAAAqI,UAAArI,oBAAsB;QAEtB,IAAMuvB,wBAAwB;QAC9B,IAAMhC;YACLiC,SAAS;YACTC,yBAAyB;YACzBC,iBAAiB;;QAMlB,IAAA3B,uBAAA;YAqBC,SAAAA,qBAAaL,YAAmBiC;gBApBhC9vB,KAAA+vB;gBACA/vB,KAAAgwB;gBAEAhwB,KAAAiwB;gBAEAjwB,KAAAkwB,iBAAiB;gBAOTlwB,KAAAmwB;gBACAnwB,KAAAowB;gBACApwB,KAAAqwB,cAAc;gBACdrwB,KAAAswB,iBAAiB;gBACjBtwB,KAAAuwB,eAAe;gBAKtBvwB,KAAK6tB,aAAaA;gBAClB7tB,KAAK6T,KAAK,IAAIP,eAAAQ;gBACd9T,KAAK8vB,QAAQA;gBACb9vB,KAAK8lB,mBAAmBgK,MAAMtb,aAAasR;gBAC3C9lB,KAAKwwB;gBACLxwB,KAAKgM;;YAGIkiB,qBAAAvsB,UAAAqK,aAAV;gBAAA,IAAA9C,QAAAlJ;gBACCA,KAAK8vB,MAAM9I,SAAS,SAACoH,gBAAgBpE;oBAAY,OAAA9gB,MAAKunB,qBAAqBrC,gBAAgBpE;;gBAC3FhqB,KAAK6tB,WAAW3G,OAAO;oBAAM,OAAAhe,MAAKwnB;;gBAClC1wB,KAAK6tB,WAAW3K,SAAS;oBAAM,OAAAha,MAAKynB;;gBACpC3wB,KAAK6tB,WAAW1Z,UAAU;oBAAM,OAAAjL,MAAKkL;;;YAG9B8Z,qBAAAvsB,UAAAyS,mBAAR;gBACCpU,KAAK6T,GAAGc;gBACR3U,KAAK4wB,mBAAmB5wB,KAAK4wB,gBAAgBC;gBAC7C7wB,KAAK8wB,oBAAoB9wB,KAAK8wB,iBAAiBD;;YAGxC3C,qBAAAvsB,UAAA+uB,gBAAR;gBACC,IAAIK,oBAAoB/wB,KAAKwwB;gBAC7B,KAAKO,mBAAmB;oBACvB/wB,KAAK2wB;;;YAICzC,qBAAAvsB,UAAA8uB,uBAAR,SAA6BrC,gBAA+BpE;gBAC3D,IAAIgH,wBACH5C,eAAevqB,aAAa,KAC5BuqB,eAAetI,yBAAyB;gBAIzC,IAAIkL,uBAAuB;oBAC1BhxB,KAAKwwB,qBAAqB;oBAC1B;;gBAGD,KAAKxG,SAAS;gBAEd,IAAIlpB,OAAOd,KAAK8vB,MAAMluB;gBACtB,IAAIqvB,YAAanwB,KAAKY,UAAUZ,KAAK,GAAGO,OAAO2oB,QAAQ,GAAG3oB;gBAC1D4vB,WAAWjxB,KAAK2G,WAAWqjB,WAAWhqB,KAAKyuB,YAAYzE;gBACvDhqB,KAAK2wB;;YAGNzC,qBAAAvsB,UAAAuvB,aAAA,SAAW7wB;gBACV,OAAOL,KAAK+vB,aAAa1vB;;YAG1B6tB,qBAAAvsB,UAAAwvB,gBAAA;gBACC,OAAOnxB,KAAK+vB,aAAa/vB,KAAKuwB;;YAG/BrC,qBAAAvsB,UAAAyvB,kBAAA;gBACC,OAAOpxB,KAAK+vB,aAAa/vB,KAAKswB;;YAGvBpC,qBAAAvsB,UAAA6uB,uBAAR,SAA6Ba;gBAAA,IAAAA,eAAA,GAAa;oBAAbA,QAAA;;gBAC5B,IAAIvrB,UAAU9F,KAAK8vB,MAAMtb;gBACzB,IAAI8c,gBAAgB1N,QAAArf,WAAWuB,QAAQjC;gBACvC,IAAI0tB,qBAAsBzrB,QAAQf;gBAClC,IAAIysB,oBAAoBD,mBAAmBD;gBAE1C,IAAAtsB,uBAAAwsB,kBAAAxsB,sBACAghB,uBAAAwL,kBAAAxL;gBAGD,IAAIyL,gBAAgBzxB,KAAKgwB,SAAStuB,WAAW,KAAK2vB;gBAClD,IAAIzpB,gBAAgB5H,KAAK8lB;gBAGzB,IAAI4L,2BAA2BhqB,OAAO1H,KAAK6tB,WAAWf,iBAAiBllB,eAAesO,QAAQ;gBAC9F,IAAIyb,8BAA8BjqB,OAAO1H,KAAK6tB,WAAWf,iBAAiB9sB,KAAK8lB,kBAAkB5P,QAAQ;gBAEzG,IAAIwb,2BAA2B1sB,sBAAsB;oBACpDysB,gBAAgB;oBAChB7pB,gBAAgBrG,KAAKqwB,KAAK5xB,KAAK6tB,WAAWvF,iBAAiBtC;uBACrD,IAAI2L,8BAA8B3L,sBAAsB;oBAC9DyL,gBAAgB;oBAChB7pB,gBAAgB5H,KAAK6tB,WAAWvF,iBAAiBtjB;;gBAGlD,KAAKysB,eAAe,OAAO;gBAE3BzxB,KAAK8lB,mBAAmBle;gBACxB5H,KAAK+vB;gBACL/vB,KAAKgwB;gBACLhwB,KAAKqwB,cAAc;gBACnBrwB,KAAKswB,iBAAiB;gBACtBtwB,KAAKuwB,eAAe;gBACpBvwB,KAAKkwB,iBAAiB;gBACtBlwB,KAAK6xB;gBACL7xB,KAAK2G,WAAW,MAAM;gBACtB3G,KAAK2wB,0BAA0B;gBAC/B3wB,KAAK6T,GAAGqM,KAAKwN,OAAOiC;;YAGbzB,qBAAAvsB,UAAAkwB,oBAAR;gBACC7xB,KAAKiwB;gBACLjwB,KAAKmwB;gBACLnwB,KAAKmwB;gBACL,IAAInwB,KAAK8wB,kBAAkB9wB,KAAK8wB,iBAAiBD;gBACjD,IAAI7wB,KAAK4wB,iBAAiB5wB,KAAK4wB,gBAAgBC;;YAGxC3C,qBAAAvsB,UAAAgvB,4BAAR,SAAkCmB;gBAAA,IAAAA,8BAAA,GAA4B;oBAA5BA,uBAAA;;gBACjC,IAAAxnB,KAAAtK,KAAA6tB,WAAAtmB,MAAA9D,MAAAN,OAAKa,OAAAsG,GAAAtG,MAAMC,KAAAqG,GAAArG;gBACX,IAAA8tB,KAAA/xB,MAAKgyB,wBAAAD,GAAAC,uBAAuBC,uBAAAF,GAAAE;gBAC5B,IAAIC,iBAAiBjuB,KAAKD;gBAE1BhE,KAAKmyB,2BAA2B3pB,QAAA3G,MAAMwW,uBAAuBrY,KAAKgwB,UAAUhsB,OAAOkuB,gBAAgB;gBACnGlyB,KAAKgyB,wBAAwBhyB,KAAKgwB,SAAShwB,KAAKmyB;gBAChDnyB,KAAKoyB,0BAA0B5pB,QAAA3G,MAAMwW,uBAAuBrY,KAAKgwB,UAAU/rB,KAAKiuB,gBAAgB;gBAChGlyB,KAAKiyB,uBAAuBjyB,KAAKgwB,SAAShwB,KAAKoyB;gBAC/C,IAAIN,sBAAsB;gBAE1B,IAAIO,wBACHL,sBAAsB3xB,OAAOL,KAAKgyB,sBAAsB3xB,MACxD4xB,qBAAqB5xB,OAAOL,KAAKiyB,qBAAqB5xB;gBAEvD,IAAIgyB,uBAAuBryB,KAAK6T,GAAGqM,KAAKwN,OAAOkC;;YAiBhD1B,qBAAAvsB,UAAA2wB,wBAAA,SAAsBC;gBACrB,IAAIC,WAAW;gBACf,IAAI1vB,QAAQyvB,OAAOC;gBACnB,IAAIC,eAAeF,OAAO7wB,SAAS;gBACnC,IAAIgxB;gBACJ,IAAIC,UAAU3yB,KAAKoxB;gBACnB,KAAKuB,QAAQC,UAAU;gBACvB,OAAOD,SAAS;oBAEf,OAAO7vB,QAAQ6vB,QAAQE,WAAW;wBACjCH,QAAQtxB,UAAU;wBAClB0B,QAAQyvB,SAASC;;oBAGlB,OAAO1vB,QAAQ6vB,QAAQjG,SAAS;wBAC/BiG,UAAUA,QAAQ5wB;wBAClB,KAAK4wB,SAAS;;oBAGf,IAAIG,eACHH,QAAQE,aAAa/vB,SAAS6vB,QAAQjG,WAAW5pB,SAChD6vB,QAAQE,YAAY/vB,SAAS6vB,QAAQjG,UAAU5pB;oBAEjD,IAAIgwB,cAAc;wBACjBJ,QAAQtxB,KAAKuxB;wBACb7vB,QAAQyvB,SAASC;;oBAElB,IAAIA,WAAWC,cAAc;;gBAE9B,OAAOC;;YAGRxE,qBAAAvsB,UAAAoxB,mBAAA,SAAiB/P;gBAChB,OAAOhjB,KAAK6T,GAAG4P,UAAUiK,OAAOmC,iBAAiB7M;;YAGlDkL,qBAAAvsB,UAAAqxB,YAAA,SAAUhQ;gBACT,OAAOhjB,KAAK6T,GAAG4P,UAAUiK,OAAOiC,SAAS3M;;YAG1CkL,qBAAAvsB,UAAAsxB,0BAAA,SAAwBjQ;gBACvB,OAAOhjB,KAAK6T,GAAG4P,UAAUiK,OAAOkC,yBAAyB5M;;YAG1DkL,qBAAAvsB,UAAAuxB,sBAAA;gBACC,IAAI7yB,KAAKL,KAAKqwB;gBACd,IAAIsC,UAAU,IAAIQ,aAAanzB,MAAMK;gBACrC,IAAI+yB,cAAcpzB,KAAK+vB,aAAa/vB,KAAKuwB;gBACzC,IAAI6C,eAAeA,YAAYR,UAAU;oBACxCQ,YAAYC,SAAShzB;oBACrBsyB,QAAQW,SAASF,YAAY/yB;;gBAE9BL,KAAKuwB,eAAelwB;gBACpBL,KAAKkwB;gBACLlwB,KAAK+vB,aAAa1vB,MAAMsyB;gBACxB3yB,KAAKgwB,SAAS5uB,KAAKuxB;gBACnB,OAAOA;;YAGRzE,qBAAAvsB,UAAA4xB,sBAAA;gBACC,IAAIlzB,KAAKL,KAAKqwB;gBACd,IAAIsC,UAAU,IAAIQ,aAAanzB,MAAMK;gBACrC,IAAImzB,cAAcxzB,KAAK+vB,aAAa/vB,KAAKswB;gBACzC,IAAIkD,eAAeA,YAAYZ,UAAU;oBACxCY,YAAYF,SAASjzB;oBACrBsyB,QAAQU,SAASG,YAAYnzB;;gBAE9BL,KAAKswB,iBAAiBjwB;gBACtBL,KAAKkwB;gBACLlwB,KAAK+vB,aAAa1vB,MAAMsyB;gBACxB3yB,KAAKgwB,SAAS5tB,QAAQuwB;gBACtB,OAAOA;;YAGAzE,qBAAAvsB,UAAAgF,aAAR,SAAmBqjB,SAAqByJ;gBAAA,IAAAA,6BAAA,GAA2B;oBAA3BA,sBAAA;;gBAKvC,IAAIC,YAAY1zB,KAAK8vB,MAAMluB;gBAC3B,IAAI6xB,qBAAqB;oBACxBzJ,UAAU0J;oBACV1zB,KAAKmwB;;gBAGN,IAAIwD,eAAeD,UAAUhyB,SAASsoB,QAAQtoB;gBAC9C,IAAIixB,UAAU3yB,KAAKmxB,mBAAmBnxB,KAAKkzB;gBAC3C,IAAIU,iBAAiBjB,QAAQC,WAAWD,UAAU;gBAClD,IAAIkB,wBAAwBlB,QAAQmB;gBACpC,IAAIC,UAAU;gBACd,OAAOA,UAAU/J,QAAQtoB,QAAQ;oBAChC,IAAIO,OAAO+nB,QAAQ+J;oBACnB,IAAIC,iBAAiBrB,QAAQsB,WAAWhyB;oBACxC,IAAIiyB,aAAaH,WAAW/J,QAAQtoB,SAAS;oBAE7C,IAAIsyB,gBAAgB;wBACnB,KAAKE,YAAYH;2BACX;wBACN,KAAKpB,QAAQwB,aAAaxB,QAAQyB;;oBAGnC,IAAIF,cAAcF,gBAAgB;wBACjCrB,QAAQ0B;;oBAGT,IAAIC,2BAA2B3B,QAAQwB,eAAgBD,cAAcF;oBACrE,IAAIM,0BAA0B;wBAC7B,IAAIj0B,KAAKsyB,QAAQtyB;wBACjB,KAAKuzB,gBAAgBA,iBAAiBjB;wBACtC,KAAKkB,uBAAuBA,wBAAwBD,eAAeE;wBAEnEnB,QAAQkB,wBAAwBrrB,QAAA3G,MAAM8R,cAAckgB;wBACpD,IAAI7zB,KAAKmwB,0BAA0BzuB,SAAS,GAAG;4BAC9CixB,QAAQkB,sBAAsBhB,YAAYgB,sBAAsBnH;4BAChEiG,QAAQkB,sBAAsBU,YAAYV,sBAAsBW;;wBAGjE7B,QAAQ8B,uBAAuB9B,QAAQmB;wBACvC9zB,KAAKmwB,0BAA0B/uB,KAAKf;;oBAKrC,IAAI6zB,cAAcF,gBAAgB;oBAClC,KAAKrB,QAAQwB,aAAa;oBAE1BxB,UAAU3yB,KAAKkzB;oBACf,IAAIwB,WAAWhB,UAAUC,eAAeI,UAAU;oBAClDpB,QAAQsB,WAAWS;;gBAIpB,IAAIC,oBAAoB30B,KAAK6tB,WAAWtmB,MAAMnC;gBAC9C,IAAIwvB,OAAOD,kBAAkBtvB,UAAUsvB,kBAAkBvP,mBAAmB;gBAM5E,IAAIqO,qBAAqB;oBACxB,KAAsB,IAAA5e,KAAA,GAAAvK,KAAAtK,KAAKmwB,2BAALtb,KAAAvK,GAAA5I,QAAAmT,MAA+B;wBAAhD,IAAIggB,YAASvqB,GAAAuK;wBACjB,IAAIigB,YAAU90B,KAAK+vB,aAAa8E;wBAChCC,UAAQC,wBAAwBD,UAAQhB;;oBAEzC9zB,KAAKmwB;oBACL;;gBAED,IAAInwB,KAAKmwB,0BAA0BzuB,SAASguB,uBAAuBkF,OAAO;gBAC1E50B,KAAKg1B,QAAQJ;;YAKN1G,qBAAAvsB,UAAA8sB,cAAR,SAAoBzE;gBACnB,IAAI0J,YAAY1zB,KAAK8vB,MAAMluB;gBAC3B,IAAI+wB,UAAU3yB,KAAKoxB,qBAAqBpxB,KAAK+vB,aAAa;gBAC1D,IAAI6D,iBAAiBjB,QAAQC,WAAWD,UAAU;gBAClD,IAAIoB,UAAU/J,QAAQtoB,SAAS;gBAC/B,IAAImyB,wBAAwBlB,QAAQmB;gBACpC,OAAOC,WAAW,GAAG;oBACpB,IAAI9xB,OAAO+nB,QAAQ+J;oBACnB,IAAIC,iBAAiBrB,QAAQsC,YAAYhzB;oBACzC,IAAIiyB,aAAaH,WAAW;oBAE5B,IAAIC,gBAAgB;wBACnB,KAAKE,YAAYH;2BACX;wBACN,KAAKpB,QAAQwB,aAAaxB,QAAQyB;;oBAGnC,IAAIF,cAAcF,gBAAgB;wBACjCrB,QAAQ0B;;oBAGT,IAAIC,2BAA2B3B,QAAQwB,eAAgBD,cAAcF;oBACrE,IAAIM,0BAA0B;wBAC7B,IAAIj0B,KAAKsyB,QAAQtyB;wBACjB,KAAKuzB,gBAAgBA,iBAAiBjB;wBACtC,KAAKkB,uBAAuBA,wBAAwBD,eAAeE;wBAEnEnB,QAAQkB,wBAAwBrrB,QAAA3G,MAAM8R,cAAckgB;wBACpD,IAAI7zB,KAAKowB,2BAA2B1uB,SAAS,GAAG;4BAC/CixB,QAAQkB,sBAAsBnH,UAAUmH,sBAAsBhB;4BAC9DF,QAAQkB,sBAAsBW,UAAWX,sBAAsBU;;wBAGhE5B,QAAQ8B,uBAAuB9B,QAAQmB;wBACvC9zB,KAAKowB,2BAA2BhvB,KAAKf;;oBAItC,IAAI6zB,cAAcF,gBAAgB;oBAClC,KAAKrB,QAAQwB,aAAa;oBAE1BxB,UAAU3yB,KAAKuzB;oBACf,IAAI2B,WAAWxB,UAAUK,UAAU;oBACnCpB,QAAQsC,YAAYC;;gBAIrB,IAAIP,oBAAoB30B,KAAK6tB,WAAWtmB,MAAMnC;gBAC9C,IAAIwvB,OAAOD,kBAAkBtvB,UAAUsvB,kBAAkBvP,mBAAmB;gBAE5E,IAAIplB,KAAKowB,2BAA2B1uB,SAASguB,uBAAuBkF,OAAO;gBAC3E50B,KAAKg1B,QAAQJ,MAAM;;YAGZ1G,qBAAAvsB,UAAAqzB,UAAR,SAAgBJ,MAAcpF;gBAA9B,IAAAtmB,QAAAlJ;gBAA8B,IAAAwvB,mBAAA,GAAiB;oBAAjBA,YAAA;;gBAE7B,IAAIS,sBAAsBT,YAAYxvB,KAAKowB,6BAA6BpwB,KAAKmwB;gBAC7E,IAAIgF,YAAY3F,YAAYxvB,KAAK8wB,mBAAmB9wB,KAAK4wB;gBAEzD,IAAKuE,aAAaA,UAAUC,cAAeR,QAAQ,GAAG;oBACrD,IAAIO,WAAWA,UAAUtE;oBACzB7wB,KAAKq1B,wBAAwB,GAAG7F;oBAChCS,oBAAoBvuB,SAAS;oBAC7B;;gBAED,IAAIizB,oBAAoB30B,KAAK6tB,WAAWtmB,MAAMnC;gBAC9C,IAAIkwB,OAAOX,kBAAkBtP;gBAC7B,IAAIkQ;oBAAmBC,gBAAgB;;gBACvCL,YAAYxa,UAAU1W,GAAGsxB,iBAAiBX;oBAAOY,gBAAgB;oBAAGF;;gBACpEH,UAAUM,cAAc,YAAY;oBAAM,OAAAvsB,MAAKmsB,wBAAwBE,gBAAgBC,gBAAgBhG;;gBACvG2F,UAAUM,cAAc,cAAc;oBACrCxF,oBAAoBvuB,SAAS;oBAC7BwH,MAAK0nB,kBAAkB;;gBAGxB,IAAIpB,WAAW;oBACdxvB,KAAK8wB,mBAAmBqE;uBAClB;oBACNn1B,KAAK4wB,kBAAkBuE;;;YAIjBjH,qBAAAvsB,UAAA0zB,0BAAR,SAAgCK,aAAqBlG;gBAAA,IAAAA,mBAAA,GAAiB;oBAAjBA,YAAA;;gBACpD,IAAIS,sBAAsBT,YAAYxvB,KAAKowB,6BAA6BpwB,KAAKmwB;gBAC7E,KAAsB,IAAAtb,KAAA,GAAA8gB,wBAAA1F,qBAAApb,KAAA8gB,sBAAAj0B,QAAAmT,MAAoB;oBAArC,IAAIggB,YAASc,sBAAA9gB;oBACjB,IAAI8d,UAAU3yB,KAAK+vB,aAAa8E;oBAChC,KAAK,IAAIlf,OAAOgd,QAAQ8B,sBAAsB;wBAC7C,IAAImB,cAAcjD,QAAQ8B,qBAAqB9e;wBAC/C,IAAIkgB,eAAelD,QAAQkB,sBAAsBle;wBACjD,IAAImgB,eAAeD,gBAAgBD,cAAcC,gBAAgBH;wBACjE/C,QAAQoC,sBAAsBpf,OAAOmgB;;;gBAGvC91B,KAAKiwB,sBAAsBjwB,KAAKmwB,0BAA0BxjB,OAAO3M,KAAKowB;gBACtEpwB,KAAK6T,GAAGqM,KAAKwN,OAAOmC,iBAAiB7vB;;YAGvC,OAAAkuB;;QA5ZatuB,QAAAsuB,uBAAoBA;QA0ajC,IAAAiF,eAAA;YAuBC,SAAAA,aAAY4C,aAAmC11B;gBAV/CL,KAAAm0B,cAAc;gBAEdn0B,KAAAg2B;gBAEAh2B,KAAA6zB;gBACA7zB,KAAAy0B;gBACAz0B,KAAA+0B;gBAKC/0B,KAAKi2B,gBAAgBF;gBACrB/1B,KAAKK,KAAKA;gBACVL,KAAKkE,YAAY6xB,YAAYjQ;;YAG9BqN,aAAAxxB,UAAAmyB,uBAAA;gBACC,IAAAxpB,KAAAtK,MACCqB,OAAAiJ,GAAAjJ,MACAC,OAAAgJ,GAAAhJ,MACAuxB,YAAAvoB,GAAAuoB,WACA0B,YAAAjqB,GAAAiqB,WACA7H,UAAApiB,GAAAoiB,SACA8H,UAAAlqB,GAAAkqB,SACAzG,UAAAzjB,GAAAyjB,SACAD,UAAAxjB,GAAAwjB,SACA5pB,YAAAoG,GAAApG;gBAED;oBACC7C;oBACAC;oBACAuxB;oBACA0B;oBACA7H;oBACA8H;oBACAzG;oBACAD;oBACA5pB;;;YAIFivB,aAAAxxB,UAAAsyB,aAAA,SAAWhyB;gBACV,IAAIjC,KAAKm0B,aAAa,OAAO;gBAE7B,IAAI6B,QAAQh2B,KAAKg2B;gBACjB,IAAIA,MAAMt0B,SAAS,GAAG;oBACrB1B,KAAKg2B,MAAM50B,KAAKa;oBAChBjC,KAAK4yB,WAAW;oBAChB,OAAO;;gBAER,IAAIC,YAAYmD,MAAM,GAAG30B;gBACzB,IAAIY,KAAKZ,OAAOwxB,YAAY7yB,KAAKkE,WAAW,OAAO;gBACnD8xB,MAAM50B,KAAKa;gBACX,OAAO;;YAGRkxB,aAAAxxB,UAAAszB,cAAA,SAAYhzB;gBACX,IAAIjC,KAAKm0B,aAAa,OAAO;gBAC7B,IAAI6B,QAAQh2B,KAAKg2B;gBACjB,IAAIA,MAAMt0B,SAAS,GAAG;oBACrB1B,KAAKg2B,MAAM5zB,QAAQH;oBACnBjC,KAAK4yB,WAAW;oBAChB,OAAO;;gBAER,IAAIlG,UAAUsJ,MAAMA,MAAMt0B,SAAS,GAAGL;gBACtC,IAAIqrB,UAAUzqB,KAAKZ,OAAOrB,KAAKkE,WAAW,OAAO;gBACjD8xB,MAAM5zB,QAAQH;gBACd,OAAO;;YAGRkxB,aAAAxxB,UAAAyyB,WAAA;gBACCp0B,KAAKm0B,cAAc;gBACnBn0B,KAAKq0B;gBACLr0B,KAAKg2B;;YAGN7C,aAAAxxB,UAAA0yB,mBAAA;gBACC,IAAI2B,QAAQh2B,KAAKg2B;gBACjB,IAAIE,cAAcF,MAAMt0B;gBACxB,IAAIw0B,gBAAgB,GAAG1tB,QAAA3G,MAAMwH,MAAM;gBACnC,IAAI8sB,UAAUH,MAAME,cAAc;gBAC7B,IAAAxJ,UAAAyJ,QAAA90B,MAAemzB,UAAA2B,QAAA70B;gBACpB,IAAIuxB,WAAmB0B;gBAGvB,IAAI6B,YAAYJ,MAAM;gBACtBnD,YAAYuD,UAAU/0B;gBACtBkzB,YAAY6B,UAAU90B;gBAEtB,IAAI+0B,OAAO90B,KAAKqR,IAAIigB,WAAWnG;gBAC/B,IAAI4J,OAAO/0B,KAAKsR,IAAIggB,WAAWnG;gBAC/B,IAAI6J,aAAaF,QAAQC,OAAOD,QAAQ;gBAExC,IAAIhL,OAAO9pB,KAAKqR,IAAI2hB,WAAWC;gBAC/B,IAAIrJ,OAAO5pB,KAAKsR,IAAI0hB,WAAWC;gBAC/B,IAAIgC,aAAanL,QAAQF,OAAOE,QAAQ;gBAExC,IAAIoL,QAAQT,MAAMppB,IAAI,SAAA3K;oBAAQ,OAAAA,KAAKX;;gBAEnCtB,KAAK6yB,YAAYA;gBACjB7yB,KAAKu0B,YAAYA;gBACjBv0B,KAAK0sB,UAAUA;gBACf1sB,KAAKw0B,UAAUA;gBACfx0B,KAAKqB,OAAOk1B;gBACZv2B,KAAKsB,OAAOk1B;gBACZx2B,KAAK+tB,UAAUxsB,KAAKsR,IAAGnG,MAARnL,MAAYk1B;gBAC3Bz2B,KAAK8tB,UAAUvsB,KAAKqR,IAAGlG,MAARnL,MAAYk1B;gBAC3B,KAAKz2B,KAAK+0B,uBAAuB/0B,KAAK+0B,wBAAwB/0B,KAAK8zB;;YAGpEX,aAAAxxB,UAAAI,UAAA;gBACC,IAAI20B,YAAY12B,KAAKi2B,cAAclG,aAAa/vB,KAAKqzB;gBACrD,OAAOqD,aAAaA,UAAU9D,WAAW8D,YAAY;;YAGtDvD,aAAAxxB,UAAAO,UAAA;gBACC,IAAIy0B,YAAY32B,KAAKi2B,cAAclG,aAAa/vB,KAAKszB;gBACrD,OAAOqD,aAAaA,UAAU/D,WAAW+D,YAAY;;YAGtDxD,aAAAxxB,UAAAi1B,cAAA;gBACC,IAAAtsB,KAAAtK,KAAA8zB,wBAAKzyB,OAAAiJ,GAAAjJ,MAAMC,OAAAgJ,GAAAhJ;gBACX,OAAO,IAAIqiB,QAAQtiB,MAAMC,MAAM;;YAGhC6xB,aAAAxxB,UAAAk1B,gBAAA;gBACC,IAAIC,WAAW92B,KAAK42B;gBACpB,OAAO52B,KAAKi2B,cAAcpI,WAAWxe,OAAOke,gBAAgBuJ,SAAStmB,GAAGsmB,SAASrmB;;YAGnF,OAAA0iB;;QA/IavzB,QAAAuzB,eAAYA;OjB8pFnB,SAAStzB,QAAQD,SAASO;QAE/B;QkB1lGD,IAAAyjB,UAAAzjB,oBAAmC;QAEnC,IAAAmT,iBAAAnT,oBAA6B;QAM7B,IAAMutB;YACLqJ,oBAAoB;;QAMrB,IAAA1Q,gBAAA;YAMC,SAAAA,cAAY9e,OAAcmM;gBAL1B1T,KAAAqE;gBAEQrE,KAAA6T,KAAK,IAAIP,eAAAQ;gBAIhB9T,KAAK6tB,aAAatmB;gBAClB,IAAIyvB;gBACJ,KAAK,IAAI7oB,aAAauF,aAAarP,QAAQ;oBAC1C,IAAIyrB,QAAQ9vB,KAAKi3B,YAAY1vB,OAAO4G,WAAWuF;oBAC/CsjB,wBAAwB7oB,aAAa2hB,MAAMzB;;gBAE5CruB,KAAKsmB,oBAAoB0Q;gBACzBh3B,KAAKgM;;YAGNqa,cAAA1kB,UAAA4D,WAAA,SAAS4I;gBACR,OAAOnO,KAAKqE,OAAO8J;;YAGpBkY,cAAA1kB,UAAAu1B,mBAAA;gBACC,IAAIC;gBACJ,IAAIC,YAAYp3B,KAAKqE;gBACrB,KAAK,IAAI8J,aAAaipB,WAAW;oBAChC,IAAItH,QAAQsH,UAAUjpB;oBACtB2hB,MAAMtb,aAAanP,WAAW8xB,cAAc/1B,KAAK0uB;;gBAElD,OAAOqH;;YAIR9Q,cAAA1kB,UAAA0nB,eAAA;gBACC,IAAIhlB,SAASrE,KAAKk3B;gBAClB,OAAO7yB,OAAO,GAAGzC,UAAU,GAAGP;;YAI/BglB,cAAA1kB,UAAAwnB,aAAA;gBACC,IAAI9kB,SAASrE,KAAKk3B;gBAClB,IAAIG,iBAAiBhzB,OAAO,GAAGzC;gBAC/B,OAAOy1B,eAAeA,eAAe31B,SAAS,GAAGL;;YAIlDglB,cAAA1kB,UAAA21B,kBAAA,SAAgBC,eAAwB1I,OAAgBC;gBACvD,IAAIzqB,SAASrE,KAAKk3B;gBAClB,IAAIM;gBACJ,IAAIlhB;gBACJ,IAAIihB,eAAe;oBAClBjhB,UAAU8F;oBACVob,YAAYj2B,KAAKsR;uBACX;oBACNyD,SAAS8F;oBACTob,YAAYj2B,KAAKqR;;gBAElB,KAAkB,IAAAiC,KAAA,GAAA4iB,WAAApzB,QAAAwQ,KAAA4iB,SAAA/1B,QAAAmT,MAAO;oBAApB,IAAIib,QAAK2H,SAAA5iB;oBACb,IAAI6e,YAAY5D,MAAMluB,QAAQitB,OAAOC;oBACrC,IAAI4I,eAAehE,UAAU9mB,IAAI,SAAC+qB;wBAAa,OAAAA,SAASr2B;;oBACxDgV,SAASkhB,UAAS9qB,WAAA,KAAC4J,SAAM3J,OAAK+qB;;gBAE/B,IAAIphB,UAAU8F,YAAY9F,WAAW8F,UAAU9F,SAASshB;gBACxD,OAAOthB;;YAGR+P,cAAA1kB,UAAAypB,aAAA,SAAWyD,OAAgBC;gBAAe,OAAO9uB,KAAKs3B,gBAAgB,MAAMzI,OAAOC;;YACnFzI,cAAA1kB,UAAA2pB,aAAA,SAAWuD,OAAgBC;gBAAe,OAAO9uB,KAAKs3B,gBAAgB,OAAOzI,OAAOC;;YAEpFzI,cAAA1kB,UAAAk2B,sBAAA,SAAoB7U;gBACnB,OAAOhjB,KAAK6T,GAAG4P,UAAUiK,OAAOqJ,oBAAoB/T;;YAG7CqD,cAAA1kB,UAAAqK,aAAR;gBAAA,IAAA9C,QAAAlJ;gBACCA,KAAK6tB,WAAW7Z,sBAAsB;oBAAM,OAAA9K,MAAK+K;;;YAG1CoS,cAAA1kB,UAAAsS,+BAAR;gBAAA,IAAA/K,QAAAlJ;gBACC,IAAA83B,UAAA,SAAA3pB;oBACC4pB,OAAK1zB,OAAO8J,WAAW8f,gBAAgB+E,UAAU;wBAAM,OAAA9pB,MAAK2K,GAAGqM,KAAKwN,OAAOqJ,oBAAoB5oB;;;gBlB4kGzF,IAAI4pB,SAAS/3B;gBkB7kGpB,KAAK,IAAImO,aAAanO,KAAKqE,QAAO;oBlB+kGvByzB,QAAQ3pB;;;YkB1kGZkY,cAAA1kB,UAAAs1B,cAAR,SAAoB1vB,OAAc4G,WAAmBuF;gBACpD,IAAIoc,QAAQ,IAAIlM,QAAAgK,MAAMrmB,OAAO4G,WAAWuF;gBACxC1T,KAAKqE,OAAO8J,aAAa2hB;gBACzB,OAAOA;;YAET,OAAAzJ;;QAvFazmB,QAAAymB,gBAAaA;OlB2qGpB,SAASxmB,QAAQD,SAASO;QAE/B;QmB5rGD,IAAOwjB,UAAUtb,MAAMsb;QAGvB,IAAArQ,iBAAAnT,oBAA2B;QAc3B,IAAAumB,SAAA;YAaC,SAAAA,OAAYmH;gBAZZ7tB,KAAA8F;oBAAoCkyB,YAAY;oBAAGnnB,SAAS;oBAAGonB,YAAY;oBAAGjnB,SAAS;oBAAGknB,OAAO;oBAAGC,OAAO;;gBAMnGn4B,KAAAo4B;oBAAkB5nB,GAAG;;gBACrBxQ,KAAAq4B;oBAAkB5nB,GAAG;;gBACrBzQ,KAAAs4B;oBAAgBt3B,KAAK;;gBACrBhB,KAAAu4B;oBAAgBv3B,KAAK;;gBAI5BhB,KAAK6tB,aAAaA;gBAClB,IAAAvjB,KAAAujB,WAAAtmB,OAAKgD,IAAAD,GAAAd,OAAUgB,IAAAF,GAAAZ;gBACf1J,KAAK6T,KAAK,IAAIP,eAAAQ;gBACd9T,KAAKw4B;oBACJxnB,SAAShR,KAAK+sB,iBAAiB/sB,KAAK6tB,WAAWtmB,MAAM3E,MAAMO,MAAM0O;oBACjEsmB,OAAO;;gBAERn4B,KAAKgM;;YAKN0a,OAAA/kB,UAAAoO,oBAAA;gBAEC,IAAAzF,KAAAtK,KAAA6tB,WAAAtmB,OAAKgD,IAAAD,GAAAd,OAAUgB,IAAAF,GAAAZ;gBAGf,IAAIsG,MAAM;gBACV,IAAIyoB,OAAOzoB,OAAOzO,KAAKm3B,KAAK;gBAE5B;oBACC1oB,KAAKA;oBACLC,QAAQ1F,IAAIC;oBACZ0F,MAAM;oBACNC,KAAK;oBACLO,GAAGlG,KAAK,IAAIjJ,KAAKo3B,IAAIF,OAAO;oBAG5BjoB,GAAGjG,IAAI;oBACPkG,GAAGjG,IAAI;;;YAITkc,OAAA/kB,UAAAi3B,cAAA,SAAY5V;gBAAZ,IAAA9Z,QAAAlJ;gBACC,IAAIwjB,YAAY;gBAChBxjB,KAAK6T,GAAGoM,GAAGuD,WAAWR;gBACtB,OAAO;oBACN9Z,MAAK2K,GAAGkM,IAAIyD,WAAWR;;;YAIzB0D,OAAA/kB,UAAAk3B,gBAAA,SAAc7V;gBAAd,IAAA9Z,QAAAlJ;gBACC,IAAIwjB,YAAY;gBAChBxjB,KAAK6T,GAAGoM,GAAGuD,WAAWR;gBACtB,OAAO;oBACN9Z,MAAK2K,GAAGkM,IAAIyD,WAAWR;;;YAIzB0D,OAAA/kB,UAAA2N,wBAAA,SAAsB0T;gBAAtB,IAAA9Z,QAAAlJ;gBACC,IAAIwjB,YAAY;gBAChBxjB,KAAK6T,GAAGoM,GAAGuD,WAAWR;gBACtB,OAAO;oBACN9Z,MAAK2K,GAAGkM,IAAIyD,WAAWR;;;YAIzB0D,OAAA/kB,UAAAm3B,iBAAA;gBACC,UACC94B,KAAK+4B,oBAAoB/4B,KAAK+4B,iBAAiB3D,cAC9Cp1B,KAAKg5B,kBAAkBh5B,KAAKg5B,eAAe5D;;YAItC1O,OAAA/kB,UAAA62B,YAAR,SAAmB1yB,SAAkCuhB;gBAAA,IAAAA,gBAAA,GAAc;oBAAdA,SAAA;;gBAC/C,IAAAxW,UAAA/K,QAAA+K,SAASG,UAAAlL,QAAAkL,SAASknB,QAAApyB,QAAAoyB,OAAOC,QAAAryB,QAAAqyB;gBAE9B,IAAItnB,gBAAgB,GAAG7Q,KAAK8F,QAAQ+K,UAAUA;gBAC9C,IAAIG,gBAAgB,GAAGhR,KAAK8F,QAAQkL,UAAUA;gBAC9C,IAAIknB,cAAc,GAAGl4B,KAAK8F,QAAQoyB,QAAQA;gBAC1C,IAAIC,cAAc,GAAGn4B,KAAK8F,QAAQqyB,QAAQA;gBAE1C,IAAItnB,gBAAgB,KAAKqnB,OAAO;oBAC/BpyB,QAAQkyB,aAAah4B,KAAKsoB,iBAAiBzX,gBAAgB,IAAIA,UAAU7Q,KAAK8F,QAAQ+K;oBACtF7Q,KAAK8F,QAAQkyB,aAAalyB,QAAQkyB;;gBAGnC,IAAIhnB,gBAAgB,KAAKmnB,OAAO;oBAC/BryB,QAAQmyB,aAAaj4B,KAAKgtB,iBAAiBhc,gBAAgB,IAAIA,UAAUhR,KAAK8F,QAAQkL;oBACtFhR,KAAK8F,QAAQmyB,aAAanyB,QAAQmyB;;gBAGnC,IAAI5Q,QAAQ;gBAEZrnB,KAAK6T,GAAGqM,KAAK,uBAAuBpa;gBAEpC,IAAIA,QAAQkyB,mBAAmB,KAAKlyB,QAAQmyB,mBAAmB,GAAG;oBACjEj4B,KAAK6T,GAAGqM,KAAK,eAAepa;;gBAG7B,IAAIA,QAAQoyB,cAAc,KAAKpyB,QAAQqyB,cAAc,GAAG;oBACvDn4B,KAAK6T,GAAGqM,KAAK,aAAapa;;;YAKpB4gB,OAAA/kB,UAAAqK,aAAR;gBAAA,IAAA9C,QAAAlJ;gBACC,IAAIuH,QAAQvH,KAAK6tB;gBAGjBtmB,MAAMyf,SAAS,SAACQ;oBACf,IAAIA,aAAa/jB,SAAS+jB,aAAa/jB,MAAMN,OAAO;wBACnD,IAAIqkB,aAAa/jB,MAAMN,MAAM0O,eAAe,GAAG3I,MAAK+vB,iBAAiBzR;wBACrE,IAAIA,aAAa/jB,MAAMN,MAAMiH,MAAMlB,MAAKgwB;;oBAEzC,IAAI1R,aAAa5kB,SAAS4kB,aAAa5kB,MAAMO,OAAM;wBAClD,IAAIqkB,aAAa5kB,MAAMO,MAAM0O,eAAe,GAAG3I,MAAKiwB;wBACpD,IAAI3R,aAAa5kB,MAAMO,MAAMiH,MAAMlB,MAAKkwB;;;gBAG1C7xB,MAAM4M,UAAU;oBAAM,OAAAjL,MAAKkL;;;YAGpBsS,OAAA/kB,UAAAyS,mBAAR;gBACCpU,KAAK6T,GAAGc;gBACR3U,KAAK+4B,oBAAoB/4B,KAAK+4B,iBAAiBlI;gBAC/C7wB,KAAKq5B,oBAAoBr5B,KAAKq5B,iBAAiBxI;gBAC/C7wB,KAAKg5B,kBAAkBh5B,KAAKg5B,eAAenI;gBAC3C7wB,KAAKs5B,kBAAkBt5B,KAAKs5B,eAAezI;;YAGpCnK,OAAA/kB,UAAAs3B,mBAAR,SAAyBzR;gBAAzB,IAAAte,QAAAlJ;gBACC,IAAIuH,QAAQvH,KAAK6tB;gBACjB,IAAI0L,aAAahyB,MAAMA,MAAMyK,OAAOC;gBACpC,IAAI7M,aAAcmC,MAAMA,MAAMnC;gBAC9B,IAAIo0B,aAAap0B,WAAWC,YAAYk0B;gBACxC,IAAIE,eAAejS,aAAa/jB,MAAMN,MAAMiH;gBAC5C,IAAIsvB,eAAenyB,MAAMA,MAAMM,eAAe0xB,eAAeE;gBAC7D,IAAI7E,OAAO8E,eAAet0B,WAAWwgB,kBAAkBxgB,WAAWkgB;gBAClE,IAAIgQ,OAAOoE,eAAet0B,WAAWygB,iBAAiBzgB,WAAWmgB;gBACjE,IAAIvlB,KAAK+4B,kBAAkB/4B,KAAK+4B,iBAAiBY;gBAEjD,IAAIx2B,QAAQoE,MAAMA,MAAM9D,MAAMN;gBAC9B,IAAIy2B,UAAUz2B,MAAM0O,SAAS1O,MAAMinB,cAAcjnB,MAAMiH;gBACvDpK,KAAKo4B,eAAe5nB,IAAIxQ,KAAK8F,QAAQ+K;gBAErC,IAAImS,KAAK;oBACR9Z,MAAKsvB;wBAAW3nB,SAAS3H,MAAKkvB,eAAe5nB;;;gBAG9C,IAAIgpB,YAAY;oBACfx5B,KAAK+4B,mBAAmBpe,UAAU1W,GAAGjE,KAAKo4B,gBAAgBxD;wBACzDpkB,GAAGopB;wBAAStE,MAAMA;;oBAEnBt1B,KAAK+4B,iBAAiBtD,cAAc,YAAYzS;uBAC1C;oBACNhjB,KAAKo4B,eAAe5nB,IAAIopB;oBACxB5W;;;YAKM0D,OAAA/kB,UAAAw3B,mBAAR;gBAAA,IAAAjwB,QAAAlJ;gBACC,IAAIuH,QAAQvH,KAAK6tB;gBACjB,IAAIzoB,aAAcmC,MAAMA,MAAMnC;gBAC9B,IAAIo0B,aAAap0B,WAAWC;gBAC5B,IAAIuvB,OAAOxvB,WAAWkgB;gBACtB,IAAItlB,KAAKq5B,kBAAkBr5B,KAAKq5B,iBAAiBM;gBACjD,IAAIx2B,QAAQoE,MAAMA,MAAM3E,MAAMO;gBAC9B,IAAI02B,UAAU12B,MAAM0O,SAAS1O,MAAMinB,cAAcjnB,MAAMiH;gBAEvDpK,KAAKq4B,eAAe5nB,IAAIzQ,KAAK8F,QAAQkL;gBAErC,IAAIgS,KAAK;oBACR9Z,MAAKsvB;wBAAWxnB,SAAS9H,MAAKmvB,eAAe5nB;;;gBAG9C,IAAI+oB,YAAY;oBACfx5B,KAAKq5B,mBAAmB1e,UAAU1W,GAAGjE,KAAKq4B,gBAAgBzD;wBACzDnkB,GAAGopB;wBAASvE,MAAMlwB,WAAWmgB;;oBAE9BvlB,KAAKq5B,iBAAiB5D,cAAc,YAAYzS;uBAC1C;oBACNhjB,KAAKq4B,eAAe5nB,IAAIopB;oBACxB7W;;;YAIM0D,OAAA/kB,UAAAu3B,iBAAR;gBAAA,IAAAhwB,QAAAlJ;gBACC,IAAIuH,QAAQvH,KAAK6tB;gBACjB,IAAIzoB,aAAcmC,MAAMA,MAAMnC;gBAC9B,IAAIo0B,aAAap0B,WAAWC;gBAC5B,IAAIuvB,OAAOxvB,WAAWkgB;gBACtB,IAAIwU,aAAavyB,MAAMA,MAAM9D,MAAMN,MAAMiH;gBACzC,IAAIpK,KAAKg5B,gBAAgBh5B,KAAKg5B,eAAeW;gBAE7C,IAAI3W,KAAK;oBACR9Z,MAAKsvB;wBAAWN,OAAOhvB,MAAKovB,aAAat3B;;;gBAG1C,IAAIw4B,YAAY;oBACfx5B,KAAKg5B,iBAAiBre,UAAU1W,GAAGjE,KAAKs4B,cAAc1D;wBACrD5zB,KAAK84B;wBAAYxE,MAAMlwB,WAAWmgB;;oBAEnCvlB,KAAKg5B,eAAevD,cAAc,YAAYzS;uBACxC;oBACNhjB,KAAKs4B,aAAat3B,MAAM84B;oBACxB9W;;;YAIM0D,OAAA/kB,UAAAy3B,iBAAR;gBAAA,IAAAlwB,QAAAlJ;gBACC,IAAIuH,QAAQvH,KAAK6tB;gBACjB,IAAIzoB,aAAcmC,MAAMA,MAAMnC;gBAC9B,IAAIo0B,aAAap0B,WAAWC;gBAC5B,IAAIuvB,OAAOxvB,WAAWkgB;gBACtB,IAAIwU,aAAavyB,MAAMA,MAAM3E,MAAMO,MAAMiH;gBACzC,IAAIpK,KAAKs5B,gBAAgBt5B,KAAKs5B,eAAeK;gBAE7C,IAAI3W,KAAK;oBACR9Z,MAAKsvB;wBAAWL,OAAOjvB,MAAKqvB,aAAav3B;;;gBAG1C,IAAIw4B,YAAY;oBACfx5B,KAAKs5B,iBAAiB3e,UAAU1W,GAAGjE,KAAKu4B,cAAc3D;wBACrD5zB,KAAK84B;wBAAYxE,MAAMlwB,WAAWmgB;;oBAEnCvlB,KAAKs5B,eAAe7D,cAAc,YAAYzS;uBACxC;oBACNhjB,KAAKu4B,aAAav3B,MAAM84B;oBACxB9W;;;YAQF0D,OAAA/kB,UAAAgrB,kBAAA,SAAgBtrB;gBACf,IAAAiJ,KAAAtK,KAAA6tB,WAAAtmB,MAAA9D,MAAAN,OAAKinB,cAAA9f,GAAA8f,aAAa5mB,UAAA8G,GAAA9G;gBAClB,IAAI4G,OAAOpK,KAAK8F,QAAQoyB;gBACxB,QAAQ72B,OAAOmC,WAAW4mB,cAAchgB;;YAMzCsc,OAAA/kB,UAAAirB,kBAAA,SAAgBtrB;gBACf,IAAAgJ,KAAAtK,KAAA6tB,WAAAtmB,MAAA3E,MAAAO,OAAKinB,cAAA9f,GAAA8f,aAAa5mB,UAAA8G,GAAA9G;gBAClB,IAAI4G,OAAOpK,KAAK8F,QAAQqyB;gBACxB,QAAQ72B,OAAOkC,WAAW4mB,cAAchgB;;YAMzCsc,OAAA/kB,UAAA4rB,kBAAA,SAAgBlsB,MAAcC;gBAC7B,OAAO,IAAIqiB,QAAQ3jB,KAAK2sB,gBAAgBtrB,OAAOrB,KAAK4sB,gBAAgBtrB,OAAO;;YAM5EolB,OAAA/kB,UAAAkrB,kBAAA,SAAgBrc;gBACf,OAAOxQ,KAAK6tB,WAAWtmB,MAAM9D,MAAMN,MAAMK,UAAUxD,KAAKsoB,iBAAiB9X;;YAO1EkW,OAAA/kB,UAAAmrB,mBAAA,SAAiBzrB;gBAChB,OAAOA,OAAOrB,KAAK6tB,WAAWtmB,MAAM9D,MAAMN,MAAMinB,cAAcpqB,KAAK8F,QAAQoyB;;YAO5ExR,OAAA/kB,UAAAorB,mBAAA,SAAiBzrB;gBAChB,OAAOA,OAAOtB,KAAK6tB,WAAWtmB,MAAM3E,MAAMO,MAAMinB,cAAcpqB,KAAK8F,QAAQqyB;;YAM5EzR,OAAA/kB,UAAA2mB,mBAAA,SAAiBjnB;gBAChB,OAAOA,OAAOrB,KAAK6tB,WAAWtmB,MAAM9D,MAAMN,MAAMinB,cAAcpqB,KAAK8F,QAAQoyB;;YAO5ExR,OAAA/kB,UAAAqrB,mBAAA,SAAiB1rB;gBAChB,OAAOA,OAAOtB,KAAK6tB,WAAWtmB,MAAM3E,MAAMO,MAAMinB,cAAcpqB,KAAK8F,QAAQqyB;;YAO5EzR,OAAA/kB,UAAAsrB,oBAAA,SAAkBzc;gBACjB,OAAOxQ,KAAK6tB,WAAWtmB,MAAM9D,MAAMN,MAAMK,UAAUxD,KAAK8F,QAAQkyB,aAAah4B,KAAKsoB,iBAAiB9X;;YAOpGkW,OAAA/kB,UAAAurB,oBAAA,SAAkBzc;gBACjB,OAAOzQ,KAAK6tB,WAAWtmB,MAAM3E,MAAMO,MAAMK,UAAUxD,KAAK8F,QAAQmyB,aAAaj4B,KAAKgtB,iBAAiBvc;;YAOpGiW,OAAA/kB,UAAAwrB,oBAAA,SAAkB9rB;gBACjB,IAAAiJ,KAAAtK,KAAA6tB,WAAAtmB,MAAA9D,MAAAN,OAAK0O,SAAAvH,GAAAuH,QAAQrO,UAAA8G,GAAA9G;gBACb,OAAOxD,KAAK8sB,iBAAiBzrB,OAAOmC,UAAUqO;;YAe/C6U,OAAA/kB,UAAAyrB,oBAAA,SAAkB/rB;gBACjB,OAAOrB,KAAKmtB,kBAAkBntB,KAAK6sB,gBAAgBxrB;;YAOpDqlB,OAAA/kB,UAAA0rB,oBAAA,SAAkBC;gBACjB,OAAOttB,KAAK2sB,gBAAgB3sB,KAAKitB,kBAAkBK;;YAMpD5G,OAAA/kB,UAAAo4B,oBAAA,SAAkBC;gBACjB,OAAOh6B,KAAK4sB,gBAAgB5sB,KAAKktB,kBAAkB8M;;YAGpDtT,OAAA/kB,UAAAs4B,SAAA;gBACC,OAAOj6B,KAAK+5B,kBAAkB/5B,KAAK6tB,WAAWtmB,MAAMmC;;YAGrDgd,OAAA/kB,UAAAu4B,YAAA;gBACC,OAAOl6B,KAAK+5B,kBAAkB;;YAG/BrT,OAAA/kB,UAAAw4B,UAAA;gBACC,OAAOn6B,KAAKqtB,kBAAkB;;YAG/B3G,OAAA/kB,UAAA8P,oBAAA;gBACC,OAAOzR,KAAKitB,kBAAkBjtB,KAAK6tB,WAAWtmB,MAAMiC;;YAGrDkd,OAAA/kB,UAAAy4B,YAAA;gBACC,OAAOp6B,KAAKktB,kBAAkBltB,KAAK6tB,WAAWtmB,MAAMmC;;YAGrDgd,OAAA/kB,UAAA04B,eAAA;gBACC,OAAOr6B,KAAKktB,kBAAkB;;YAG/BxG,OAAA/kB,UAAA24B,gBAAA;gBACC,OAAOt6B,KAAKktB,kBAAkBltB,KAAK6tB,WAAWtmB,MAAMmC,SAAS;;YAG/D,OAAAgd;;QAlYa9mB,QAAA8mB,SAAMA;OnBygHb,SAAS7mB,QAAQD,SAASO;QAE/B;QACA,IAAIo6B,YAAav6B,QAAQA,KAAKu6B,aAAc,SAAUrf,GAAGsB;YACrD,KAAK,IAAI9b,KAAK8b,GAAG,IAAIA,EAAEtU,eAAexH,IAAIwa,EAAExa,KAAK8b,EAAE9b;YACnD,SAAS85B;gBAAOx6B,KAAKmM,cAAc+O;;YACnCA,EAAEvZ,YAAY6a,MAAM,OAAO/G,OAAOglB,OAAOje,MAAMge,GAAG74B,YAAY6a,EAAE7a,WAAW,IAAI64B;;QoB/hHpF,IAAAhyB,UAAArI,oBAAoB;QACpB,IAAA6jB,eAAA7jB,oBAAwB;QAExB,IAAAmT,iBAAAnT,oBAA2B;QAiB3B,IAAMu6B;YACL72B,MAAM;YACNkiB,WAAW;YACXjjB,OAAO;YACPsB,WAAW;YACXlB,cAAc;YACdD,WAAW;YACXD,OAAO;;QAGR,IAAA2jB,YAAA;YAMC,SAAAA,UAAYkH,YAAmB8M;gBAFvB36B,KAAAg2B;gBAGPh2B,KAAK6tB,aAAaA;gBAClB7tB,KAAK6T,KAAK,IAAIP,eAAAQ;gBACd9T,KAAK26B,WAAWA;gBAChB,IAAI93B,QAAQ7C,KAAKg2B;gBACjB,IAAI4E,mBAAmBD,YAAY3W,aAAA4C,UAAUC,IAAIgH,WAAWtmB,MAAM9D,MAAMZ,QAAQgrB,WAAWtmB,MAAM3E,MAAMC;gBAEvG,KAAoB,IAAAgS,KAAA,GAAAgmB,qBAAAD,kBAAA/lB,KAAAgmB,mBAAAn5B,QAAAmT,MAAiB;oBAAhC,IAAI/O,UAAO+0B,mBAAAhmB;oBACf,IAAIimB,gBAAQ;oBACZh1B,UAAU0C,QAAA3G,MAAM8R,UAAU+mB,2BAA2B50B;oBAGrD,KAAKA,QAAQ/C,MAAM+C,QAAQ/C,OAAOyF,QAAA3G,MAAMmW,SAAStB;oBACjD,IAAI7T,MAAMiD,QAAQ/C,OAAOyF,QAAA3G,MAAMwH,MAAM,0BAA0BvD,QAAQ/C;oBAGvE,IAAI+C,QAAQjC,QAAQ,YAAY;wBAC/Bi3B,WAAW,IAAIC,iBAAiBlN,YAAY8M,UAAU70B;2BAChD;wBACNg1B,WAAW,IAAIE,SAASnN,YAAY8M,UAAU70B;;oBAE/CjD,MAAMiD,QAAQ/C,QAAQ+3B;;gBAEvB96B,KAAKgM;;YAGI2a,UAAAhlB,UAAAqK,aAAV;gBAAA,IAAA9C,QAAAlJ;gBACCA,KAAK6tB,WAAW5G,cAAc,SAAC9Y,WAAmBigB,gBAA+BpE;oBAChF9gB,MAAK+d,cAAc9Y,WAAW6b;;gBAE/BhqB,KAAK6tB,WAAW1Z,UAAU;oBAAM,OAAAjL,MAAK2K,GAAGc;;;YAGjCgS,UAAAhlB,UAAAslB,gBAAR,SAAsB9Y,WAAmB6b;gBACxC,KAAKA,SAAS;gBACd,IAAIiR,WAAWjR,QAAQ,GAAG3oB;gBAC1B,IAAI65B,SAASlR,QAAQA,QAAQtoB,SAAS,GAAGL;gBACzC,IAAIwB,QAAQ7C,KAAKg2B;gBAEjB,KAAK,IAAImF,YAAYt4B,OAAO;oBAC3B,IAAIu4B,OAAOv4B,MAAMs4B;oBACjB,IAAIE,UAAUD,KAAKt1B,QAAQhD;oBAC3B,IAAIw4B,iBAAkBL,YAAYI,WAAWH,UAAUG,WAAYJ,WAAWI,WAAWH,SAASG;oBAClG,IAAIC,gBAAgBt7B,KAAK6T,GAAGqM,KAAK,eAAe/R,WAAW6b;;;YAK7DrD,UAAAhlB,UAAA45B,WAAA;gBACC,OAAOv7B,KAAKg2B;;YAGbrP,UAAAhlB,UAAA+D,UAAA,SAAQy1B;gBACP,OAAOn7B,KAAKg2B,MAAMmF;;YAGpB,OAAAxU;;QA9Da/mB,QAAA+mB,YAASA;QAgEtB,IAAAqU,WAAA;YAQC,SAAAA,SAAYnN,YAAmB8M,UAAqB70B;gBAH1C9F,KAAAw7B,uBAAuB;gBAIhCx7B,KAAK6T,KAAK,IAAIP,eAAAQ;gBACd9T,KAAK8F,UAAUA;gBACf9F,KAAK26B,WAAWA;gBAChB36B,KAAK6tB,aAAaA;gBAClB7tB,KAAKgM;;YAGIgvB,SAAAr5B,UAAAqK,aAAV;YAEAgvB,SAAAr5B,UAAAqE,aAAA,SAAWy1B;gBACV,IAAI34B,QAAQ9C,KAAK8F,QAAQhD;gBACzB9C,KAAK8F,UAAU0C,QAAA3G,MAAM8R,UAAU3T,KAAK8F,SAAS21B;gBAC7C,IAAIz7B,KAAK8F,QAAQhD,UAAUA,OAAO9C,KAAK6T,GAAGqM,KAAK;gBAC/ClgB,KAAK6T,GAAGqM,KAAK;;YAGd8a,SAAAr5B,UAAA+5B,kBAAA;gBACC,IAAApxB,KAAAtK,KAAA8F,SAAKhD,QAAAwH,GAAAxH,OAAO64B,iBAAArxB,GAAAqxB;gBACZ,OAAOC,OAAOD,wBAAwB,IAAIA,iBAAiB74B;;YAG5Dk4B,SAAAr5B,UAAAk6B,gBAAA,SAAc7Y;gBAAd,IAAA9Z,QAAAlJ;gBACCA,KAAK6T,GAAGoM,GAAG,eAAe+C;gBAC1B,OAAO;oBACN9Z,MAAK2K,GAAGkM,IAAI,eAAeiD;;;YAI7BgY,SAAAr5B,UAAAm6B,gBAAA,SAAc9Y;gBAAd,IAAA9Z,QAAAlJ;gBACCA,KAAK6T,GAAGoM,GAAG,eAAe+C;gBAC1B,OAAO;oBACN9Z,MAAK2K,GAAGkM,IAAI,eAAeiD;;;YAI7BgY,SAAAr5B,UAAAo6B,yBAAA,SAAuB/Y;gBAAvB,IAAA9Z,QAAAlJ;gBACCA,KAAK6T,GAAGoM,GAAG,0BAA0B+C;gBACrC,OAAO;oBACN9Z,MAAK2K,GAAGkM,IAAI,0BAA0BiD;;;YA9CjCgY,SAAAgB,WAAW;YAiDnB,OAAAhB;;QAlDap7B,QAAAo7B,WAAQA;QAoDrB,IAAAD,mBAAA,SAAAkB;YAAsC1B,UAAAQ,kBAAAkB;YAAtC,SAAAlB;gBAAsCkB,OAAAvvB,MAAA1M,MAAA8U;gBAE3B9U,KAAAw7B,uBAAuB;;YAEjCT,iBAAAp5B,UAAA+5B,kBAAA;gBACC,IAAIL,UAAUr7B,KAAK8F,QAAQhD;gBAC3B,IAAIwO,UAAUtR,KAAK6tB,WAAWtmB,MAAM8J,aAAahN,OAAOiN;gBACxD,IAAIsjB,OAAOyG,UAAU/pB;gBACrB,IAAIsjB,OAAO,GAAGA,OAAO;gBACrB,OAAOpsB,QAAA3G,MAAMoY,eAAe2a;;YAGnBmG,iBAAAp5B,UAAAqK,aAAV;gBAAA,IAAA9C,QAAAlJ;gBACCA,KAAK6tB,WAAW1e,eAAe;oBAAM,OAAAjG,MAAKiG;;;YAGjC4rB,iBAAAp5B,UAAAwN,iBAAV;gBACCnP,KAAK6T,GAAGqM,KAAK;;YAhBP6a,iBAAAiB,WAAW;YAkBnB,OAAAjB;UAnBsCC;QAAzBp7B,QAAAm7B,mBAAgBA;OpBgiHvB,SAASl7B,QAAQD;QAEtB;SqB1qHD,SAAYkE;YACXA,gCAAA;YACAA,gCAAA;YACAA,gCAAA;YACAA,gCAAA;WAJWlE,QAAAkE,oBAAAlE,QAAAkE;QAAZ,IAAYA,kBAAAlE,QAAAkE;SAeZ,SAAY8iB;YAAWA,oBAAA;YAAGA,oBAAA;WAAdhnB,QAAAgnB,cAAAhnB,QAAAgnB;QAAZ,IAAYA,YAAAhnB,QAAAgnB;SAsCZ,SAAYjjB;YAAgBA,8BAAA;YAAQA,8BAAA;WAAxB/D,QAAA+D,mBAAA/D,QAAA+D;QAAZ,IAAYA,iBAAA/D,QAAA+D;OrB4oHN,SAAS9D,QAAQD;QAEtB;QsBnsHD,IAAA2M,cAAA;YAAA,SAAAA;gBAGSvM,KAAAk8B;;YAGR3vB,YAAA5K,UAAAoL,aAAA,SAAWnM;gBACVZ,KAAKY,QAAQA;;YAOJ2L,YAAA5K,UAAAoS,YAAV;gBAAoB,IAAAa;gBtBmsHZ,KsBnsHY,IAAAC,KAAA,GAAAA,KAAAC,UAAApT,QAAAmT,MAAqC;oBAArCD,KAAAC,KAAA,KAAAC,UAAAD;;gBACnB,IAAIqnB;gBACJ,KAAKnnB,MAAMC,QAAQJ,KAAK,KAAK;oBAC5BsnB,WAAW96B,KAAKwT,KAAK;uBACf;oBACNsnB,WAAW96B,KAAIsL,MAAfwvB,YAAU;;iBAEX5xB,KAAAtK,KAAKk8B,YAAW96B,KAAIsL,MAAApC,IAAI4xB;gBtBusHjB,IAAI5xB;;YsBrsHFiC,YAAA5K,UAAAmM,eAAV;gBACC9N,KAAKk8B,WAAW5vB,QAAQ,SAAA6vB;oBAAe,OAAAA;;gBACvCn8B,KAAKk8B,WAAWx6B,SAAS;;YAxBnB6K,YAAA6vB,aAAa;YA0BrB,OAAA7vB;;QA3BsB3M,QAAA2M,cAAWA;OtB0uH3B,SAAS1M,QAAQD,SAASO;QAE/B;QACA,IAAIo6B,YAAav6B,QAAQA,KAAKu6B,aAAc,SAAUrf,GAAGsB;YACrD,KAAK,IAAI9b,KAAK8b,GAAG,IAAIA,EAAEtU,eAAexH,IAAIwa,EAAExa,KAAK8b,EAAE9b;YACnD,SAAS85B;gBAAOx6B,KAAKmM,cAAc+O;;YACnCA,EAAEvZ,YAAY6a,MAAM,OAAO/G,OAAOglB,OAAOje,MAAMge,GAAG74B,YAAY6a,EAAE7a,WAAW,IAAI64B;;QuB3vHpF,IAAO6B,OAAOh0B,MAAMg0B;QAKpB,IAAOC,WAAWj0B,MAAMi0B;QAGxB,IAAA/zB,WAAApI,oBAA0B;QAE1B,IAAAuI,eAAAvI,oBAA6C;QAC7C,IAAAqI,UAAArI,oBAAoB;QAKpB,IAAA6jB,eAAA7jB,oBAAsD;QACtD,IAAA4I,UAAA5I,oBAA2B;QAK3B,IAAAgT,aAAA,SAAA8oB;YAAgC1B,UAAApnB,YAAA8oB;YAAhC,SAAA9oB;gBAAgC8oB,OAAAvvB,MAAA1M,MAAA8U;gBAEvB9U,KAAAmN,cAAc;;YAMtBgG,WAAAxR,UAAAqL,iBAAA;gBAAA,IAAA9D,QAAAlJ;gBACCA,KAAKu8B,WAAW,IAAID;gBACpBt8B,KAAKw8B,cAAc,IAAIF;gBACvBt8B,KAAKy8B,cAAc,IAAIH;gBACvBt8B,KAAKu8B,SAAStvB,IAAIjN,KAAKw8B;gBACvBx8B,KAAKu8B,SAAStvB,IAAIjN,KAAKy8B;gBACvBz8B,KAAK08B,UAAU1Y,aAAA4C,UAAUC;gBACzB7mB,KAAK08B,UAAU1Y,aAAA4C,UAAUG;gBAGzB/mB,KAAK28B,qBAAqBn0B,QAAA3G,MAAMoI,SAAS;oBAAM,OAAAf,MAAK0zB,WAAW5Y,aAAA4C,UAAUC;mBAAI;gBAE7E7mB,KAAK68B,eACJ78B,KAAKY,MAAMyO,OAAOvJ,QAAQ+K,SAC1B7Q,KAAKY,MAAMyO,OAAOvJ,QAAQkL;gBAE3BhR,KAAKgM;;YAGNmH,WAAAxR,UAAAqK,aAAA;gBAAA,IAAA9C,QAAAlJ;gBACC,IAAIuH,QAAQvH,KAAKY;gBAEjBZ,KAAK+T,UACJxM,MAAM8H,OAAOC,sBAAsB,SAACxJ;oBACnCoD,MAAK2zB,eAAe/2B,QAAQ+K,SAAS/K,QAAQkL;oBAE9CzJ,MAAM8H,OAAOupB,YAAY,SAAC9yB;oBAAaoD,MAAK0vB,YAAY9yB;oBACxDyB,MAAM4M,UAAU;oBAAM,OAAAjL,MAAKiL;oBAC3B5M,MAAMiI,SAAS;oBAAM,OAAAtG,MAAKsG;;;YAIpB2D,WAAAxR,UAAAwS,YAAR;gBACCnU,KAAKmN,cAAc;gBACnBnN,KAAK8N;;YAGEqF,WAAAxR,UAAAk7B,iBAAR,SAAuBrsB,GAAWC;gBAEjC,IAAIA,UAAU,GAAG;oBAChBzQ,KAAKy8B,YAAYnsB,SAASG,IAAIA;oBAC9BzQ,KAAKw8B,YAAYlsB,SAASG,IAAIA;;gBAG/B,IAAID,UAAU,GAAG;oBAChBxQ,KAAKy8B,YAAYnsB,SAASE,IAAIA;oBAC9BxQ,KAAK28B;;;YAKCxpB,WAAAxR,UAAA6N,WAAR;gBACCxP,KAAK08B,UAAU1Y,aAAA4C,UAAUC;gBACzB7mB,KAAK08B,UAAU1Y,aAAA4C,UAAUG;;YAGlB5T,WAAAxR,UAAA+6B,YAAR,SAAkBI;gBAAlB,IAAA5zB,QAAAlJ;gBAEC,IAAI+8B,UAAUD,eAAe9Y,aAAA4C,UAAUC;gBACvC,IAAAvc,KAAAtK,KAAAY,MAAA2G,OAAKy1B,eAAA1yB,GAAAd,OAAqByzB,gBAAA3yB,GAAAZ;gBAC1B,IAAIwzB,cAAc,GAAGC,eAAe;gBACpC,IAAIC;gBAGJ,IAAIL,SAAS;oBACZ/8B,KAAKw8B,YAAYa,SAAS,SAAAvnB;wBAAO,OAAA5M,MAAKszB,YAAY5sB,OAAOkG;;oBACzDonB,cAAcF,eAAe;oBAC7BG,eAAe;oBACfC,cAAcp9B,KAAKY,MAAM2G,MAAM9D;uBACzB;oBACNzD,KAAKy8B,YAAYY,SAAS,SAAAvnB;wBAAO,OAAA5M,MAAKuzB,YAAY7sB,OAAOkG;;oBACzDonB,cAAc;oBACdC,eAAeF,gBAAgB;oBAC/BG,cAAcp9B,KAAKY,MAAM2G,MAAM3E;;gBAGhC,IAAI2U,UAAU/O,QAAA3G,MAAM6V,0BAA0BwlB,aAAaC,cAAc,SAAC9lB;oBACzE,IAAI6N,QAAQ,IAAInc,QAAAmC,WAAWkyB,YAAYlY;oBACvC7N,IAAIimB;oBACJjmB,IAAIoF,OAAOvT,MAAKtI,MAAM2G,MAAMkV,KAAKjc;oBACjC6W,IAAIsF,YAAYuI,MAAMqY;oBACtBlmB,IAAImmB,cAActY,MAAMqY;;gBAIzB,IAAIE,WAAW,IAAIp1B,MAAMq1B;oBAAoB9wB,KAAK2K;oBAASomB,MAAMt1B,MAAMu1B;;gBACvEH,SAASI,cAAc;gBAEvB,IAAIC,WAAW,IAAIzB,KAClB,IAAIh0B,MAAM01B,cAAcb,aAAaC,eACrCM;gBAGD,IAAIV,SAAS;oBACZe,SAASxtB,SAASC,IAAI2sB,cAAc,GAAGC,eAAe,GAAG;oBACzDn9B,KAAKw8B,YAAYvvB,IAAI6wB;uBACf;oBACNA,SAASxtB,SAASC,IAAIysB,eAAeE,cAAc,GAAGC,eAAe,GAAG;oBACxEn9B,KAAKy8B,YAAYxvB,IAAI6wB;;gBAGtB99B,KAAK48B,WAAWE;;YAIjB3pB,WAAAxR,UAAAuL,cAAA;gBACC,OAAOlN,KAAKu8B;;YAGLppB,WAAAxR,UAAAi7B,aAAR,SAAmBE;gBAClB,IAAI98B,KAAKmN,aAAa;gBACtB,IAAI4vB,UAAUD,eAAe9Y,aAAA4C,UAAUC;gBACvC,IAAAvc,KAAAtK,KAAAY,MAAA2G,OAAKy1B,eAAA1yB,GAAAd,OAAqByzB,gBAAA3yB,GAAAZ;gBAC1B,IAAAqoB,KAAA/xB,KAAAY,MAAAyO,OAAAvJ,SAAK+K,UAAAkhB,GAAAlhB,SAASG,UAAA+gB,GAAA/gB,SAASknB,QAAAnG,GAAAmG,OAAOC,QAAApG,GAAAoG;gBAC9B,IAAIiF;gBACJ,IAAIU;gBACJ,IAAIE;gBAEJ,IAAIjB,SAAS;oBACZe,WAAW99B,KAAKw8B,YAAYrhB,SAAS;oBACrCiiB,cAAcp9B,KAAKY,MAAM2G,MAAM9D;oBAC/Bu6B,iBAAiBt1B,aAAA0K,WAAW6qB,qBAAqBb,aAAaJ,cAAc9E;uBACtE;oBACN4F,WAAW99B,KAAKy8B,YAAYthB,SAAS;oBACrCiiB,cAAcp9B,KAAKY,MAAM2G,MAAM3E;oBAC/Bo7B,iBAAiBt1B,aAAA0K,WAAW6qB,qBAAqBb,aAAaH,eAAe9E;;gBAG9E,IAAI+F,WAAWJ,SAASI;gBACxB,IAAIhB,cAAcgB,SAASC,WAAW30B;gBACtC,IAAI2zB,eAAee,SAASC,WAAWz0B;gBACvC,IAAI6N,UAAWumB,SAASL,SAA+B7wB;gBACvD,IAAIyK,MAAME,QAAQ6mB,MAAM9mB,WAAW;gBACnCD,IAAIgnB,UAAU,GAAG,GAAGnB,aAAaC;gBAEjC,IAAIJ,SAAS;oBACZe,SAASxtB,SAASE,IAAI0sB,cAAc,IAAIF,eAAensB;;gBAKxD,IAAIytB,aAAaN,eAAeO,gBAAgBP,eAAeQ;gBAC/D,IAAIvD,WAAW+C,eAAe16B,QAASg7B;gBACvC,IAAIpD,SAAS8C,eAAe36B,MAAMi7B;gBAElCjnB,IAAIimB;gBACJ,KAAK,IAAIt8B,MAAMi6B,UAAUj6B,OAAOk6B,QAAQl6B,OAAOg9B,eAAeQ,MAAM;oBACnE,IAAI7C,iBAAiB;oBACrB,IAAIoB,SAAS;wBACZ,IAAI0B,QAAQz+B,KAAKY,MAAMyO,OAAOsd,gBAAgB3rB,OAAO6P,UAAUmsB;wBAC/D3lB,IAAIqnB,YAAY;wBAIhB,IAAItB,YAAY15B,YAAYsgB,aAAArgB,eAAeC,MAAM;4BAChD+3B,iBAAiBxoB,WAAWwrB,WAAW39B,KAAKg9B;+BACtC;4BACNrC,iBAAiBj0B,OAAO1G,IAAIkV,QAAQ,KAAKQ;;wBAG1CW,IAAIwF,SAAS8e,gBAAgB8C,OAAOtB,eAAe;2BAC7C;wBACN,IAAIsB,QAAQtB,eAAen9B,KAAKY,MAAMyO,OAAOud,gBAAgB5rB,OAAOgQ;wBACpEqG,IAAIqnB,YAAY;wBAKhB/C,iBAAiBj0B,OAAO1G,IAAIkV,QAAQ,KAAKQ;wBACzCW,IAAIwF,SAAS8e,gBAAgBuB,cAAc,IAAKuB,QAAQ;;oBAOzDpnB,IAAIunB;;gBAILvnB,IAAIunB;gBACJvnB,IAAIwnB;gBACJtnB,QAAQE,cAAc;;YAGftE,WAAAxR,UAAAi3B,cAAR,SAAoB9yB;gBACnB,IAAIA,QAAQoyB,OAAO;oBAClBl4B,KAAK48B,WAAW5Y,aAAA4C,UAAUC;;gBAG3B,IAAI/gB,QAAQqyB,OAAO;oBAClBn4B,KAAK48B,WAAW5Y,aAAA4C,UAAUG;;;YAkCrB5T,WAAAwrB,aAAP,SAAkBzkB,WAAmB4kB;gBACpC,IAAI/9B,MAAM;gBACV,IAAI6R,MAAM7R,MAAM;gBAChB,IAAIg+B,OAAOnsB,MAAM;gBACjB,IAAIosB,MAAMD,OAAO;gBACjB,IAAIP,OAAOM,WAAWN;gBACtB,IAAItjB,IAAI,IAAIha,KAAKgZ;gBACjB,IAAI+kB,KAAK,SAAC9oB;oBAAgB,OAAA3N,QAAA3G,MAAMqU,QAAQC,KAAK;;gBAC7C,OAAO8oB,GAAG/jB,EAAEgkB,cAAc,MAAMD,GAAG/jB,EAAEikB,gBAAgB,MAAMF,GAAG/jB,EAAEkkB;;YAhP1DjsB,WAAAipB,aAAa;YAkPrB,OAAAjpB;UAnPgC5K,SAAAgE;QAAnB3M,QAAAuT,aAAUA;OvB+7HjB,SAAStT,QAAQD,SAASO;QAE/B;QACA,IAAIo6B,YAAav6B,QAAQA,KAAKu6B,aAAc,SAAUrf,GAAGsB;YACrD,KAAK,IAAI9b,KAAK8b,GAAG,IAAIA,EAAEtU,eAAexH,IAAIwa,EAAExa,KAAK8b,EAAE9b;YACnD,SAAS85B;gBAAOx6B,KAAKmM,cAAc+O;;YACnCA,EAAEvZ,YAAY6a,MAAM,OAAO/G,OAAOglB,OAAOje,MAAMge,GAAG74B,YAAY6a,EAAE7a,WAAW,IAAI64B;;QwBx9HpF,IAAO7W,UAAUtb,MAAMsb;QAEvB,IAAApb,WAAApI,oBAA0B;QAC1B,IAAOk/B,eAAeh3B,MAAMg3B;QAC5B,IAAA72B,UAAArI,oBAAoB;QAIpB,IAAA4I,UAAA5I,oBAAyB;QAczB,IAAAiT,aAAA,SAAA6oB;YAAgC1B,UAAAnnB,YAAA6oB;YAAhC,SAAA7oB;gBAAgC6oB,OAAAvvB,MAAA1M,MAAA8U;gBAKvB9U,KAAAmN,cAAc;;YAEtBiG,WAAAzR,UAAAqL,iBAAA;gBACC,IAAA1C,KAAAtK,KAAAY,MAAA2G,OAAKiC,QAAAc,GAAAd,OAAOE,SAAAY,GAAAZ,QAAQjG,QAAA6G,GAAA7G,OAAOb,QAAA0H,GAAA1H;gBAC3B5C,KAAKs/B,YAAY/9B,KAAKiV,MAAMhN,QAAQ/F,MAAMuhB,KAAKC,aAAa;gBAC5DjlB,KAAKu/B,YAAYh+B,KAAKiV,MAAM9M,SAAS9G,MAAMoiB,KAAKC,aAAa;gBAC7DjlB,KAAKw/B;gBACLx/B,KAAKy/B;gBACLz/B,KAAKgM;;YAGNoH,WAAAzR,UAAAqK,aAAA;gBAAA,IAAA9C,QAAAlJ;gBAEC,IAAI0/B,sBAAsBl3B,QAAA3G,MAAMoI,SAAS;oBAAM,OAAAf,MAAKu2B;mBAAc;gBAClEz/B,KAAK+T,UAAU/T,KAAKY,MAAMsiB,SAAS;oBAAM,OAAAwc;oBACxC1/B,KAAKY,MAAMyO,OAAOupB,YAAY,SAAC9yB;oBAC9B45B;oBACAx2B,MAAK0vB,YAAY9yB;oBAElB9F,KAAKY,MAAMuT,UAAU;oBACpBjL,MAAKiE,cAAc;oBACnBjE,MAAK4E;oBAEN9N,KAAKY,MAAM4O,SAAS;oBACnBtG,MAAKu2B;;;YAMArsB,WAAAzR,UAAA69B,WAAR;gBACC,IAAIta,QAAQ,IAAInc,QAAAmC,WAAWlL,KAAKY,MAAM2G,MAAM9D,MAAMuhB,KAAKE;gBACvD,IAAIgZ,WAAW,IAAI71B,MAAMs3B;gBACzB,IAAIlC,WAAW,IAAIp1B,MAAMu3B;oBAAmBC,WAAW;oBAAG3a,OAAOA,MAAMpiB;oBAAOg9B,SAAS5a,MAAM3Z;oBAAGsyB,aAAa;;gBAC7G,IAAIkC,cAAc//B,KAAKs/B;gBACvB,IAAIU,cAAchgC,KAAKu/B;gBACvB,OAAOQ,eAAe7B,SAAS+B,SAAS7+B,KAAK,IAAIuiB,WAAW,IAAIA;gBAChE,OAAOqc,eAAe9B,SAAS+B,SAAS7+B,KAAK,IAAIuiB,WAAW,IAAIA;gBAChE3jB,KAAKkgC,eAAe,IAAIb,aAAanB,UAAUT;gBAC/Cz9B,KAAKkgC,aAAa5vB,SAAS6vB,MAAM;gBACjCngC,KAAKkgC,aAAaE,gBAAgB;;YAG3BhtB,WAAAzR,UAAA89B,aAAR;gBACC,IAAIz/B,KAAKmN,aAAa;gBACtB,IAAA7C,KAAAtK,KAAAY,MAAA2G,OAAK3E,QAAA0H,GAAA1H,OAAOa,QAAA6G,GAAA7G,OAAO+F,QAAAc,GAAAd,OAAOE,SAAAY,GAAAZ;gBAC1B,IAAI22B,YAAYjtB,WAAW6qB,qBAAqBx6B,OAAO+F,OAAO/F,MAAMN,MAAMiH;gBAC1E,IAAIk2B,YAAYltB,WAAW6qB,qBAAqBr7B,OAAO8G,QAAQ9G,MAAMO,MAAMiH;gBAC3E,IAAIm2B,oBAAoBh/B,KAAKqwB,KAAKnuB,MAAMN,MAAM0O,SAASwuB,UAAU7B;gBACjE,IAAIgC,oBAAoBj/B,KAAKqwB,KAAKhvB,MAAMO,MAAM0O,SAASyuB,UAAU9B;gBACjE,IAAIiC,iBAAiBF,oBAAoBF,UAAU7B;gBACnD,IAAIkC,iBAAiBF,oBAAoBF,UAAU9B;gBACnD,IAAI3L,YAAYwN,UAAU/8B,QAAQm9B;gBAClC,IAAIlM,YAAY+L,UAAUh9B,QAAQo9B;gBAClC,IAAIxC,WAAWl+B,KAAKkgC,aAAahC;gBACjC,IAAI+B,WAAW/B,SAAS+B;gBACxB,IAAIU,UAAU;gBAEd,KAAK,IAAI16B,KAAMjG,KAAKs/B,YAAY,GAAGr5B,IAAIjG,KAAKs/B,YAAY,IAAE,GAAGr5B,KAAK;oBACjE,IAAInD,QAAQ+vB,YAAY5sB,IAAIo6B,UAAU7B;oBACtC,IAAIoC,cAAc5gC,KAAK6gC,uBAAuB/9B,OAAO29B,gBAAgBC;oBACrET,SAASU,UAAU,GAAGpwB,IAAIqwB,YAAY,GAAGpwB,GAAGowB,YAAY,GAAGnwB,GAAG;oBAC9DwvB,SAASU,UAAU,IAAI,GAAGpwB,IAAIqwB,YAAY,GAAGpwB,GAAGowB,YAAY,GAAGnwB,GAAG;oBAClEkwB;;gBAGD,KAAK,IAAI16B,KAAMjG,KAAKu/B,YAAY,GAAGt5B,IAAIjG,KAAKu/B,YAAY,IAAE,GAAGt5B,KAAK;oBACjE,IAAInD,QAAQyxB,YAAYtuB,IAAIq6B,UAAU9B;oBACtC,IAAIoC,cAAc5gC,KAAK8gC,yBAAyBh+B,OAAO29B,gBAAgBC;oBACvET,SAASU,UAAU,GAAGpwB,IAAIqwB,YAAY,GAAGpwB,GAAGowB,YAAY,GAAGnwB,GAAG;oBAC9DwvB,SAASU,UAAU,IAAI,GAAGpwB,IAAIqwB,YAAY,GAAGpwB,GAAGowB,YAAY,GAAGnwB,GAAG;oBAClEkwB;;gBAGDzC,SAAS6C,qBAAqB;gBAE9B/gC,KAAKkgC,aAAac,MAAMzwB,IACvB9M,MAAMN,MAAMinB,cAAc3mB,MAAMN,MAAMiH,MACtCxH,MAAMO,MAAMinB,cAAcxnB,MAAMO,MAAMiH,MACtC;;YAIMgJ,WAAAzR,UAAAm/B,2BAAR,SAAiCx/B,MAAc02B,YAAoBC;gBAClE,IAAIpK,aAAa7tB,KAAKY;gBACtB,IAAIqgC,YAAY3/B,OAAOusB,WAAWtmB,MAAM3E,MAAMO,MAAMK,UAAUy0B;gBAC9D,IAAIiJ,WAAWrT,WAAWvF,iBAAiBuF,WAAWtmB,MAAMiC;gBAC5D,SACC,IAAInB,MAAMsb,QAAQud,WAAW,IAAIlJ,YAAYiJ,WAAW,IACxD,IAAI54B,MAAMsb,SAAUud,WAAWlJ,YAAYiJ,WAAW;;YAIhD7tB,WAAAzR,UAAAk/B,yBAAR,SAA+Bx/B,MAAc22B,YAAoBC;gBAChE,IAAIpK,aAAa7tB,KAAKY;gBACtB,IAAIugC,YAAY9/B,OAAOwsB,WAAWtmB,MAAM9D,MAAMN,MAAMK,UAAUw0B;gBAC9D,IAAIoJ,YAAYvT,WAAWb,iBAAiBa,WAAWtmB,MAAMmC;gBAC7D,SACC,IAAIrB,MAAMsb,QAAQwd,WAAWC,YAAY,IAAInJ,YAAY,IACzD,IAAI5vB,MAAMsb,QAAQwd,YAAYC,YAAYnJ,YAAY;;YAIhD7kB,WAAAzR,UAAAi3B,cAAR,SAAoB9yB;gBACnB,IAAAwE,KAAAtK,KAAAY,MAAA2G,OAAK9D,QAAA6G,GAAA7G,OAAOb,QAAA0H,GAAA1H;gBACZ,IAAIkD,QAAQoyB,OAAOl4B,KAAKkgC,aAAac,MAAMjwB,KAAKtN,MAAMN,MAAMinB,cAActkB,QAAQoyB;gBAClF,IAAIpyB,QAAQqyB,OAAOn4B,KAAKkgC,aAAac,MAAM9vB,KAAKtO,MAAMO,MAAMinB,cAActkB,QAAQqyB;;YAK5E/kB,WAAA6qB,uBAAP,SAA4Bb,aAA2BiE,WAAmBj3B;gBACzE,IAAI8f,YAAYkT,YAAYj6B;gBAC5B,IAAIa,OAAOkmB,UAAUlmB;gBACrB,IAAIC,KAAKimB,UAAUjmB;gBACnB,IAAIq9B,aAAar9B,KAAKD;gBACtB,IAAIu9B,WAAW;gBACf,IAAIC,mBAAmB;gBACvB,IAAIC,sBAAsBrE,YAAYpY,KAAKC;gBAC3C,IAAIyc,gBAAgB9F,OAAO0F;gBAC3B,IAAIK,0BAA0BD,cAAclsB,QAAQ;gBACpD,IAAIosB,gBAAgBD,6BAA6B,IAAIA,0BAA0BD,cAAchgC;gBAE7F,IAAImgC,gBAAgB;gBACpB,IAAIC,WAAW;gBACf,QAAQD,eAAe;oBAEtB,IAAIE,QAAQH,gBAAgBE,WAAW;oBACvC,IAAIE,aAAczgC,KAAK0gC,IAAI,IAAIF,UAAU;oBACzC,IAAIG,aAAY,GAAG,GAAG;oBACtB,KAAK,IAAIC,aAAa,GAAGA,aAAaD,SAASxgC,QAAQygC,cAAc;wBACpE,IAAIC,eAAeJ,aAAaE,SAASC;wBACzC,IAAIE,uBAAuBD,eAAed,aAAaD;wBACvD,IAAIgB,wBAAwBZ,qBAAqB;4BAChDF,WAAWa;4BACXZ,mBAAmBa;+BACb;4BACNR,gBAAgB;4BAChB,IAAIN,aAAa,GAAG;gCACnBA,WAAWa;gCACXZ,mBAAmBa;;4BAEpB;;;oBAIF,KAAKR,eAAeC;;gBAIrB,IAAIQ,YAAY/gC,KAAKiV,MAAMxS,OAAOu9B,YAAYA;gBAC9C,IAAIgB,UAAUhhC,KAAKiV,MAAMvS,KAAKs9B,YAAYA;gBAE1C;oBACCj+B,OAAOg/B;oBACPj/B,KAAKk/B;oBACL/D,MAAM+C;oBACNiB,UAAUhB;oBACV9/B,QAAQ6gC,UAAUD;oBAClB/D,eAAeh9B,KAAKiF,OAAO+7B,UAAUD,aAAaf;;;YAIpDnuB,WAAAzR,UAAAuL,cAAA;gBACC,OAAOlN,KAAKkgC;;YAxKN9sB,WAAAgpB,aAAa;YA2KrB,OAAAhpB;UA5KgC7K,SAAAgE;QAAnB3M,QAAAwT,aAAUA;OxB0mIjB,SAASvT,QAAQD;QAEtB;QyBnoID,IAAAsL,aAAA;YA8DC,SAAAA,WAAaga;gBACZllB,KAAKuQ,IAAI2U;;;;;;;YAnDHha,WAAAu3B,aAAP,SAAkBvd;gBAEjB,IAAIwd,OACDhiC,IAAI+I,UACJyb,QAAQA,MAAMyd,QAAQ,UAAU;gBAInC,IAAID,QAAQ,kDAAkDE,KAAK1d,QAClEwd,UAAShiC,EAAEgiC,MAAM,IAAI,KAAKhiC,EAAEgiC,MAAM,IAAI,KAAKhiC,EAAEgiC,MAAM,IAAI,YAGnD,IAAIA,QAAQ,yCAAyCE,KAAK1d,QAC9Dwd,UAAShiC,EAAEgiC,MAAM,IAAI,MAAM,IAAIhiC,EAAEgiC,MAAM,IAAI,MAAM,IAAIhiC,EAAEgiC,MAAM,IAAI,MAAM,WAInE,IAAIA,QAAQ,6EAA6EE,KAAK1d,QAClGwd,UAAShiC,EAAEgiC,MAAM,IAAI,KAAKhiC,EAAEgiC,MAAM,IAAI,KAAKhiC,EAAEgiC,MAAM,IAAI,MAAMA,MAAM,WAI/D,IAAIA,QAAQ,uDAAuDE,KAAK1d,QAC5Ewd,WAAUA,MAAM,KAAKA,MAAM,KAAKA,MAAM,KAAKA,MAAM,WAI7C,IAAIA,QAAQ,kCAAkCE,KAAK1d,QACvDwd,WAAUA,MAAM,KAAKA,MAAM,KAAKA,MAAM,WAGlC,MAAM5iB,MAAMoF,QAAQ;gBAGzB2d,MAAMH,MAAM,QAAQA,MAAM,KAAK;gBAC/B,OAAOA;;YAmBRx3B,WAAAvJ,UAAA4O,MAAA,SAAI2U;gBACH,WAAWA,SAAS,UAAU;oBAC7BA,QAASA,MAAiBxO,SAAS;oBACnCwO,QAAQ,MAAM,IAAItO,OAAO,IAAIsO,MAAMxjB,UAAUwjB;;gBAE9C,IAAI4d,WAAW5d;gBACf,IAAI6d,OAAO73B,WAAWu3B,WAAWK;gBACjC9iC,KAAKwb,IAAIunB,KAAK;gBACd/iC,KAAKsb,IAAIynB,KAAK;gBACd/iC,KAAKwc,IAAIumB,KAAK;gBACd/iC,KAAKuL,IAAIw3B,KAAK;gBACd/iC,KAAK8C,SAASigC,KAAK,MAAO,IAAI,MAAOA,KAAK,MAAM,KAAKA,KAAK;gBAC1D/iC,KAAKgjC,SAAS,MAAMhjC,KAAK8C,MAAM4T,SAAS;gBACxC1W,KAAKu9B,UAAU,UAAQv9B,KAAKwb,IAAC,OAAKxb,KAAKsb,IAAC,OAAKtb,KAAKwc,IAAC,OAAKxc,KAAKuL,IAAC;;YAEhE,OAAAL;;QAjFatL,QAAAsL,aAAUA;OzBgsIjB,SAASrL,QAAQD,SAASO;QAE/B;QACA,IAAIo6B,YAAav6B,QAAQA,KAAKu6B,aAAc,SAAUrf,GAAGsB;YACrD,KAAK,IAAI9b,KAAK8b,GAAG,IAAIA,EAAEtU,eAAexH,IAAIwa,EAAExa,KAAK8b,EAAE9b;YACnD,SAAS85B;gBAAOx6B,KAAKmM,cAAc+O;;YACnCA,EAAEvZ,YAAY6a,MAAM,OAAO/G,OAAOglB,OAAOje,MAAMge,GAAG74B,YAAY6a,EAAE7a,WAAW,IAAI64B;;Q0BzsIpF,IAAOmF,WAAWt3B,MAAMs3B;QAYxB,IAAAn3B,UAAArI,oBAAoB;QACpB,IAAA8iC,iBAAA9iC,oBAAwC;QAIxC,IAAA4I,UAAA5I,oBAA2B;QAE3B,IAAAkT,uBAAA,SAAA4oB;YAA0C1B,UAAAlnB,sBAAA4oB;YAA1C,SAAA5oB;gBAA0C4oB,OAAAvvB,MAAA1M,MAAA8U;;YAE/BzB,qBAAA1R,UAAAuhC,sBAAV;gBACC,OAAOC;;YAFD9vB,qBAAA+oB,aAAa;YAIrB,OAAA/oB;UAL0C4vB,eAAAG;QAA7BxjC,QAAAyT,uBAAoBA;QAQjC,IAAA8vB,gBAAA,SAAAlH;YAAmC1B,UAAA4I,eAAAlH;YASlC,SAAAkH,cAAatV,YAAmB1f;gBAC/B8tB,OAAA17B,KAAAP,MAAM6tB,YAAY1f;gBARXnO,KAAAqjC,qBAAqB;gBAS5BrjC,KAAK8vB,QAAQjC,WAAWzH,cAAc7gB,SAAS4I;gBAC/CnO,KAAKsjC,cAAc,IAAIC,YAAY1V,WAAWtmB,MAAM2e;gBACpDlmB,KAAKwjC;gBACLxjC,KAAKyjC;;YATCN,cAAAO,kBAAP,SAAuBhc;gBACtB,OAAOA,aAAariB,WAAWqiB,aAAa9iB;;YAYnCu+B,cAAAxhC,UAAAqK,aAAV;gBAAA,IAAA9C,QAAAlJ;gBACCi8B,OAAAt6B,UAAMqK,WAAUzL,KAAAP;gBAEhBA,KAAK+T,UAAU/T,KAAK8vB,MAAM7B,gBAAgB+E,UAAU;oBACnD9pB,MAAKu6B;;gBAENzjC,KAAK+T,UAAU/T,KAAK8vB,MAAM7B,gBAAgBgF,wBAAwB;oBAEjE/pB,MAAKu6B;;gBAENzjC,KAAK+T,UAAU/T,KAAKY,MAAMsmB,OAAO;oBAChChe,MAAKu6B;;;YAKPN,cAAAxhC,UAAAuL,cAAA;gBACC,OAAOlN,KAAK2jC;;YAIbR,cAAAxhC,UAAA6hC,eAAA;gBACC,IAAItF,WAAW,IAAIyB;gBAGnB,KAAK,IAAI15B,IAAI,GAAGA,IAAIjG,KAAKsjC,YAAY5hC,QAAQuE,KAAK;oBACjDi4B,SAAS+B,SAAS7+B,KACjB,IAAIiH,MAAMsb,WACV,IAAItb,MAAMsb,WACV,IAAItb,MAAMsb,WACV,IAAItb,MAAMsb;oBAEX,IAAIhL,MAAM1S,IAAI;oBAUdi4B,SAAS0F,MAAMxiC,KACd,IAAIiH,MAAMw7B,MAAOlrB,KAAKA,MAAM,GAAGA,MAAM,IACrC,IAAItQ,MAAMw7B,MAAOlrB,MAAM,GAAGA,KAAKA,MAAM;;gBAIvC,IAAIuM,QAAQ,IAAInc,QAAAmC,WAAWlL,KAAK8vB,MAAMtb,aAAavJ;gBACnDjL,KAAK2jC,WAAW,IAAIt7B,MAAMg0B,KACzB6B,UACA,IAAI71B,MAAMq1B;oBAAoBxY,OAAOA,MAAMpiB;oBAAO+6B,aAAa;oBAAMiC,SAAS5a,MAAM3Z;;gBAGrF,IAAAjB,KAAAtK,KAAAY,MAAA2G,MAAA9D,MAAAN,OAAK2gC,eAAAx5B,GAAA8f,aAA2B8N,QAAA5tB,GAAAF;gBAChC,IAAA2nB,KAAA/xB,KAAAY,MAAA2G,MAAA3E,MAAAO,OAAK4gC,eAAAhS,GAAA3H,aAA2B+N,QAAApG,GAAA3nB;gBAChCpK,KAAK2jC,SAAS3C,MAAMzwB,IAAIuzB,eAAe5L,OAAO6L,eAAe5L,OAAO;gBACpEn4B,KAAK2jC,SAASvD,gBAAgB;;YAIrB+C,cAAAxhC,UAAAi3B,cAAV,SAAsB9yB;gBACrB,IAAIyB,QAAQvH,KAAKY,MAAM2G;gBACvB,IAAIu8B,eAAev8B,MAAM9D,MAAMN,MAAMinB;gBACrC,IAAI2Z,eAAex8B,MAAM3E,MAAMO,MAAMinB;gBACrC,IAAI4Z,eAAehkC,KAAK2jC,SAAS3C;gBACjC,IAAIl7B,QAAQoyB,OAAO8L,aAAajzB,KAAK+yB,eAAeh+B,QAAQoyB;gBAC5D,IAAIpyB,QAAQqyB,OAAO6L,aAAa9yB,KAAK6yB,eAAej+B,QAAQqyB;;YAInDgL,cAAAxhC,UAAAsiC,oBAAV,SAA4BC;gBAC3B,IAAIjU,sBAAsBiU,qBAAqBjU;gBAC/C,KAAK,IAAIhqB,IAAI,GAAGA,IAAIjG,KAAKqjC,oBAAoBp9B,KAAK;oBACjD,IAAI4uB,YAAY70B,KAAKsjC,YAAYr9B;oBACjC,KAAKgqB,oBAAoBkU,SAAStP,YAAY;oBAC9C70B,KAAKokC,qBAAqBn+B,GAAGi+B,qBAAqBhT,WAAW2D,WAAWE;;gBAExE/0B,KAAK2jC,SAASzF,SAA2B6C,qBAAqB;;YAIxDoC,cAAAxhC,UAAA8hC,iBAAR;gBACC,IAAIvF,WAAWl+B,KAAK2jC,SAASzF;gBAC7B,IAAA5zB,KAAAtK,KAAA8vB,MAAA7B,iBACCgI,gBAAA3rB,GAAA0lB,UACAqU,aAAA/5B,GAAA6nB,0BACAC,0BAAA9nB,GAAA8nB;gBAED,IAAIkS,yBAAyBtkC,KAAKqjC;gBAClCrjC,KAAKqjC,qBAAqBjR,0BAA0BiS,aAAa;gBACjE,IAAIE,uBAAuBhjC,KAAKsR,IAAIyxB,wBAAwBtkC,KAAKqjC;gBAEjE,IAAIkB,uBAAuBvkC,KAAKsjC,YAAY5hC,QAAQ;oBACnD8G,QAAA3G,MAAMwH,MAAMgK,qBAAqB+oB,aAAa;;gBAI/C,KAAK,IAAIn2B,IAAI,GAAGA,KAAKs+B,sBAAsBt+B,KAAK;oBAC/C,IAAIo+B,cAAcjS,yBAAyB;wBAC1C,IAAIO,UAAUsD,cAAcoO;wBAC5BrkC,KAAKokC,qBAAqBn+B,GAAG0sB,QAAQoC;wBACrC/0B,KAAKsjC,YAAYr9B,KAAK0sB,QAAQtyB;wBAC9BgkC;2BACM;wBACNrkC,KAAKokC,qBAAqBn+B;;;gBAI5Bi4B,SAAS6C,qBAAqB;;YAQvBoC,cAAAxhC,UAAAyiC,uBAAR,SAA6BC,YAAoBG;gBAChD,IAAIC,qBAAqBJ,aAAa;gBACtC,IAAIpE,WAAYjgC,KAAK2jC,SAASzF,SAA2B+B;gBACzD,IAAIyE,UAAUzE,SAASwE;gBACvB,IAAIE,aAAa1E,SAASwE,qBAAqB;gBAC/C,IAAIG,cAAc3E,SAASwE,qBAAqB;gBAChD,IAAII,WAAW5E,SAASwE,qBAAqB;gBAC7C,IAAIK,kBAAkBvjC,KAAKsR,IAC1B7S,KAAKY,MAAMosB,iBAAiBhtB,KAAKY,MAAM2G,MAAMmC,SAC7C1J,KAAKY,MAAMyO,OAAO2d,iBAAiBhtB,KAAKY,MAAM2G,MAAMmC;gBAGrD,IAAI86B,cAAc;oBACjB,IAAIO,SAAS/kC,KAAKglC,SAASR,aAAa3R;oBACxC,IAAIoS,SAASjlC,KAAKklC,SAASV,aAAajQ;oBACxC,IAAI4Q,OAAOnlC,KAAKglC,SAASR,aAAa9X;oBACtC,IAAI0Y,OAAOplC,KAAKklC,SAASV,aAAahQ;oBACtCkQ,QAAQn0B,IAAIw0B,QAAQE,QAAQ;oBAC5BJ,SAASt0B,IAAI40B,MAAMC,MAAM;oBACzBT,WAAWp0B,IAAIm0B,QAAQl0B,GAAGk0B,QAAQj0B,IAAIq0B,iBAAiB;oBACvDF,YAAYr0B,IAAIs0B,SAASr0B,GAAGq0B,SAASp0B,IAAIq0B,iBAAiB;uBACpD;oBACNJ,QAAQn0B,IAAI,GAAG,GAAG;oBAClBs0B,SAASt0B,IAAI,GAAG,GAAG;oBACnBo0B,WAAWp0B,IAAI,GAAG,GAAG;oBACrBq0B,YAAYr0B,IAAI,GAAG,GAAG;;;YAKhB4yB,cAAAxhC,UAAAqjC,WAAR,SAAiB3jC;gBAChB,OAAOA,OAAOrB,KAAKY,MAAM2G,MAAM9D,MAAMN,MAAMK;;YAIpC2/B,cAAAxhC,UAAAujC,WAAR,SAAiB5jC;gBAChB,OAAOA,OAAOtB,KAAKY,MAAM2G,MAAM3E,MAAMO,MAAMK;;YAG7C,OAAA2/B;UA9KmCF,eAAAoC;QAAtBzlC,QAAAujC,gBAAaA;O1Bw0IpB,SAAStjC,QAAQD,SAASO;QAE/B;QACA,IAAIo6B,YAAav6B,QAAQA,KAAKu6B,aAAc,SAAUrf,GAAGsB;YACrD,KAAK,IAAI9b,KAAK8b,GAAG,IAAIA,EAAEtU,eAAexH,IAAIwa,EAAExa,KAAK8b,EAAE9b;YACnD,SAAS85B;gBAAOx6B,KAAKmM,cAAc+O;;YACnCA,EAAEvZ,YAAY6a,MAAM,OAAO/G,OAAOglB,OAAOje,MAAMge,GAAG74B,YAAY6a,EAAE7a,WAAW,IAAI64B;;Q2Bx2IpF,IAAAjyB,WAAApI,oBAA0B;QAC1B,IAAOm8B,WAAWj0B,MAAMi0B;QAiBxB,IAAA8G,eAAA,SAAAnH;YAAgF1B,UAAA6I,cAAAnH;YAAhF,SAAAmH;gBAAgFnH,OAAAvvB,MAAA1M,MAAA8U;gBAGrE9U,KAAAmJ;;YAEVi6B,aAAAzhC,UAAAqL,iBAAA;gBACChN,KAAKu8B,WAAW,IAAID;gBACpBt8B,KAAKmP;gBACLnP,KAAKgM;;YAGIo3B,aAAAzhC,UAAAqK,aAAV;gBAAA,IAAA9C,QAAAlJ;gBACC,IAAIuH,QAAQvH,KAAKY;gBACjB2G,MAAM4H,eAAe;oBAAM,OAAAjG,MAAKiG;;gBAChC5H,MAAM0f,cAAc,SAAC9Y,WAAmBigB,gBAA+BpE;oBACtE9gB,MAAK+d,cAAc9Y,WAAWigB,gBAAgBpE;;;YAItCoZ,aAAAzhC,UAAAwN,iBAAV;gBACC,IAAIm2B,gBAAgBtlC,KAAKY,MAAM2G,MAAMlD;gBACrC,IAAIkhC,mBAAmBvlC,KAAKkjC;gBAC5B,KAAK,IAAI/0B,aAAam3B,eAAe;oBACpC,IAAI5d,eAAe4d,cAAcn3B;oBACjC,IAAIq3B,qBAAqBD,iBAAiB7B,gBAAgBhc,cAAc1nB,KAAKY;oBAC7E,IAAI4kC,uBAAuBxlC,KAAKmJ,QAAQgF,YAAY;wBACnDnO,KAAKylC,kBAAkBt3B;2BACjB,KAAKq3B,sBAAsBxlC,KAAKmJ,QAAQgF,YAAW;wBACzDnO,KAAK0lC,mBAAmBv3B;;;;YAKnBi1B,aAAAzhC,UAAAslB,gBAAR,SAAsB9Y,WAAmBigB,gBAA+BpE;gBACvE,IAAIld,SAAS9M,KAAKmJ,QAAQgF;gBAC1B,KAAKrB,QAAQ;gBACbA,OAAOma,cAAcmH;gBACrB,IAAIpE,SAAS;oBACZ,IAAIlpB,OAAOd,KAAKY,MAAM2E,SAAS4I,WAAWvM;oBAC1C,IAAIqvB,YAAanwB,KAAKY,UAAUZ,KAAK,GAAGO,OAAO2oB,QAAQ,GAAG3oB;oBAC1D4vB,WAAWnkB,OAAOnG,WAAWqjB,WAAWld,OAAO2hB,YAAYzE;;;YAI7DoZ,aAAAzhC,UAAAuL,cAAA;gBACC,OAAOlN,KAAKu8B;;YAGL6G,aAAAzhC,UAAA8jC,oBAAR,SAA0Bt3B;gBACzB,IAAIw3B,oBAAoB3lC,KAAKkjC;gBAC7B,IAAIp2B,SAAS,IAAI64B,kBAAkB3lC,KAAKY,OAAOuN;gBAC/CnO,KAAKmJ,QAAQgF,aAAarB;gBAC1B,IAAI84B,eAAe94B,OAAOI;gBAC1B04B,aAAa7iC,OAAOoL;gBACpBnO,KAAKu8B,SAAStvB,IAAIH,OAAOI;;YAGlBk2B,aAAAzhC,UAAA+jC,qBAAR,SAA2Bv3B;gBAC1BnO,KAAKmJ,QAAQgF,WAAWgG;uBACjBnU,KAAKmJ,QAAQgF;gBACpB,IAAIy3B,eAAe5lC,KAAKu8B,SAASsJ,gBAAgB13B;gBACjDnO,KAAKu8B,SAAS3sB,OAAOg2B;;YAEvB,OAAAxC;UA/DgF76B,SAAAgE;QAA1D3M,QAAAwjC,eAAYA;QAoElC,IAAAiC,cAAA;YAIC,SAAAA,YAAuBzkC,OAAwBuN;gBAAxBnO,KAAAY;gBAAwBZ,KAAAmO;gBAFrCnO,KAAAk8B;gBAGTl8B,KAAK8vB,QAAQlvB,MAAMwlB,cAAc7gB,SAAS4I;gBAC1CnO,KAAKY,QAAQA;gBACbZ,KAAKgM;;YAGCq5B,YAAA3B,kBAAP,SAAuBhc,cAA6B9mB;gBACnD,OAAO8mB,aAAariB;;YAErBggC,YAAA1jC,UAAAgF,aAAA,SAAWqjB;YACXqb,YAAA1jC,UAAA8sB,cAAA,SAAYzE;YACZqb,YAAA1jC,UAAAslB,gBAAA,SAAcmH;YACdiX,YAAA1jC,UAAAwS,YAAA;gBACC,KAAyB,IAAAU,KAAA,GAAAvK,KAAAtK,KAAKk8B,YAALrnB,KAAAvK,GAAA5I,QAAAmT,MAAgB;oBAApC,IAAII,eAAY3K,GAAAuK;oBACpBI;;;YAGQowB,YAAA1jC,UAAAsiC,oBAAV,SAA4BjU;YAElBqV,YAAA1jC,UAAAi3B,cAAV,SAAsB9yB;YAEZu/B,YAAA1jC,UAAA2N,wBAAV,SAAgCxJ;YAEtBu/B,YAAA1jC,UAAAulB,SAAV;YAIUme,YAAA1jC,UAAAqK,aAAV;gBAAA,IAAA9C,QAAAlJ;gBAECA,KAAK+T,UAAU/T,KAAK8vB,MAAM7B,gBAAgB8E,iBACzC,SAACgD;oBAAsC,OAAA7sB,MAAK+6B,kBAAkBlO;;gBAG/D/1B,KAAK+T,UAAU/T,KAAKY,MAAMyO,OAAOC,sBAChC,SAACxJ;oBAAY,OAAAoD,MAAKoG,sBAAsBxJ;;gBAGzC9F,KAAK+T,UAAU/T,KAAKY,MAAMyO,OAAOupB,YAChC,SAAC9yB;oBAAY,OAAAoD,MAAK0vB,YAAY9yB;;gBAG/B9F,KAAK+T,UAAU/T,KAAKY,MAAMsmB,OAAO;oBAAM,OAAAhe,MAAKge;;;YAGnCme,YAAA1jC,UAAAoS,YAAV,SAAoB+xB;gBACnB9lC,KAAKk8B,WAAW96B,KAAK0kC;;YAIvB,OAAAT;;QArDsBzlC,QAAAylC,cAAWA;O3B64I3B,SAASxlC,QAAQD,SAASO;QAE/B;QACA,IAAIo6B,YAAav6B,QAAQA,KAAKu6B,aAAc,SAAUrf,GAAGsB;YACrD,KAAK,IAAI9b,KAAK8b,GAAG,IAAIA,EAAEtU,eAAexH,IAAIwa,EAAExa,KAAK8b,EAAE9b;YACnD,SAAS85B;gBAAOx6B,KAAKmM,cAAc+O;;YACnCA,EAAEvZ,YAAY6a,MAAM,OAAO/G,OAAOglB,OAAOje,MAAMge,GAAG74B,YAAY6a,EAAE7a,WAAW,IAAI64B;;Q4B1+IpF,IAAOmF,WAAWt3B,MAAMs3B;QAExB,IAAOC,oBAAoBv3B,MAAMu3B;QAEjC,IAAOjc,UAAUtb,MAAMsb;QAOvB,IAAAsf,iBAAA9iC,oBAAwC;QAExC,IAAOk/B,eAAeh3B,MAAMg3B;QAE5B,IAAAzb,UAAAzjB,oBAA0C;QAC1C,IAAAqI,UAAArI,oBAAsB;QAMtB,IAAA8S,mBAAA,SAAAgpB;YAAsC1B,UAAAtnB,kBAAAgpB;YAAtC,SAAAhpB;gBAAsCgpB,OAAAvvB,MAAA1M,MAAA8U;;YAE3B7B,iBAAAtR,UAAAuhC,sBAAV;gBACC,OAAO6C;;YAFD9yB,iBAAAmpB,aAAa;YAIrB,OAAAnpB;UALsCgwB,eAAAG;QAAzBxjC,QAAAqT,mBAAgBA;QAY7B,IAAA8yB,YAAA,SAAA9J;YAA+B1B,UAAAwL,WAAA9J;YAe9B,SAAA8J,UAAanlC,OAAcuN;gBAC1B8tB,OAAA17B,KAAAP,MAAMY,OAAOuN;gBAVNnO,KAAAgmC;gBAGAhmC,KAAAimC;gBAQP,IAAIngC,UAAU9F,KAAK8vB,MAAMtb;gBACzBxU,KAAKy9B,WAAW,IAAImC;oBAAqB1a,OAAOpf,QAAQ7C;oBAAW48B,WAAW/5B,QAAQigB;;gBACtF/lB,KAAKkmC;;YARCH,UAAArC,kBAAP,SAAuBhc;gBACtB,OAAOA,aAAariB,WAAWqiB,aAAa7jB,QAAQ+f,QAAArf,WAAWC;;YAUhEuhC,UAAApkC,UAAAuL,cAAA;gBACC,OAAOlN,KAAKkgC;;YAGH6F,UAAApkC,UAAAqK,aAAV;gBAAA,IAAA9C,QAAAlJ;gBACCi8B,OAAAt6B,UAAMqK,WAAUzL,KAAAP;gBAChBA,KAAK+T,UAAU/T,KAAK8vB,MAAM7B,gBAAgB+E,UAAU;oBACnD9pB,MAAKi9B;oBACLj9B,MAAKk9B;;gBAENpmC,KAAK+T,UAAU/T,KAAK8vB,MAAM7B,gBAAgBgF,wBAAwB;oBACjE/pB,MAAKk9B;;;YAICL,UAAApkC,UAAAukC,WAAR;gBACC,IAAIhI,WAAW,IAAIyB;gBACnB,IAAAr1B,KAAAtK,KAAAY,MAAA2G,MAAA9D,MAAAN,OAAK2gC,eAAAx5B,GAAA8f,aAA2B8N,QAAA5tB,GAAAF;gBAChC,IAAA2nB,KAAA/xB,KAAAY,MAAA2G,MAAA3E,MAAAO,OAAK4gC,eAAAhS,GAAA3H,aAA2B+N,QAAApG,GAAA3nB;gBAChCpK,KAAKkgC,eAAe,IAAIb,aAAanB,UAAUl+B,KAAKy9B;gBACpDz9B,KAAKkgC,aAAac,MAAMzwB,IAAIuzB,eAAe5L,OAAO6L,eAAe5L,OAAO;gBACxEn4B,KAAKkgC,aAAaE,gBAAgB;gBAClC,KAAK,IAAIn6B,IAAI,GAAGA,IAAIjG,KAAKY,MAAM2G,MAAM2e,oBAAoBjgB,KAAK;oBAC7Di4B,SAAS+B,SAAS7+B,KAAK,IAAKuiB,WAAW,IAAIA;oBAC3C3jB,KAAKgmC,iBAAiB5kC,KAAK6E;;gBAE5BjG,KAAKigC,WAAW/B,SAAS+B;gBACzBjgC,KAAKomC;;YAGEL,UAAApkC,UAAAykC,gBAAR;gBACC,IAAIlI,WAAWl+B,KAAKkgC,aAAahC;gBAEjC,IAAA5zB,KAAAtK,KAAA8vB,MAAA7B,iBAAK+D,wBAAA1nB,GAAA0nB,uBAAuBC,uBAAA3nB,GAAA2nB;gBAE5B,KAAK,IAAI4C,aAAa70B,KAAKimC,mBAAmB;oBAC7C,IAAIrF,cAAc5gC,KAAKimC,kBAAkBpR;oBACzC,IAAIC,YAAU90B,KAAK8vB,MAAM7B,gBAAgB+B,SAAS4Q,YAAY/L;oBAC9D,IAAIwR,wBACHvR,UAAQjC,YAAYb,sBAAsBa,aAC1CiC,UAAQpI,UAAUuF,qBAAqBvF;oBAExC,IAAI2Z,uBAAuBrmC,KAAKsmC,eAAe5+B,OAAOmtB;;gBAGvD,IAAIlC,UAAUX;gBACd,OAAOW,WAAWA,QAAQtxB,QAAQ4wB,qBAAqB5wB,MAAM;oBAC5DrB,KAAKumC,aAAa5T,QAAQtyB,IAAIsyB,QAAQoC;oBACtCpC,UAAUA,QAAQ5wB;;gBAEnBm8B,SAAS6C,qBAAqB;;YAIvBgF,UAAApkC,UAAA4kC,eAAR,SAAqB1R,WAAmB2P;gBACvC,IAAI5D,cAAc5gC,KAAKimC,kBAAkBpR;gBACzC,KAAK+L,aAAa;oBACjB,IAAI5gC,KAAKgmC,iBAAiBtkC,UAAU,GAAG8G,QAAA3G,MAAMwH,MAAM;oBACnD,IAAIsP,MAAM3Y,KAAKgmC,iBAAiBQ;oBAChC5F,cAAc5gC,KAAKimC,kBAAkBpR;wBAAcA;wBAAWlc;;;gBAE/D,IAAI0rB,aAAazD,YAAYjoB;gBAC7B,IAAI8tB,kBAAkBzmC,KAAKigC,SAASoE,aAAa;gBACjD,IAAIqC,gBAAgB1mC,KAAKigC,SAASoE,aAAa,IAAI;gBACnDoC,gBAAgBl2B,IAAIvQ,KAAKglC,SAASR,aAAa3R,YAAY7yB,KAAKklC,SAASV,aAAajQ,YAAY;gBAClGmS,cAAcn2B,IAAIvQ,KAAKglC,SAASR,aAAa9X,UAAU1sB,KAAKklC,SAASV,aAAahQ,UAAU;;YAGrFuR,UAAApkC,UAAAwkC,kBAAR;gBACC,KAAK,IAAItR,aAAa70B,KAAKimC,mBAAmBjmC,KAAKsmC,eAAe5+B,OAAOmtB;;YAGlEkR,UAAApkC,UAAA2kC,iBAAR,SAAuBzR;gBACtB,IAAI+L,cAAc5gC,KAAKimC,kBAAkBpR;gBACzC,IAAI4R,kBAAkBzmC,KAAKigC,SAASW,YAAYjoB,MAAM;gBACtD,IAAI+tB,gBAAgB1mC,KAAKigC,SAASW,YAAYjoB,MAAM,IAAI;gBACxD8tB,gBAAgBl2B,IAAI,GAAG,GAAG;gBAC1Bm2B,cAAcn2B,IAAI,GAAG,GAAG;uBACjBvQ,KAAKimC,kBAAkBpR;gBAC9B70B,KAAKgmC,iBAAiB5kC,KAAKw/B,YAAYjoB;;YAI9BotB,UAAApkC,UAAAi3B,cAAV,SAAsB9yB;gBACrB,IAAIk+B,eAAehkC,KAAKkgC,aAAac;gBACrC,IAAIz5B,QAAQvH,KAAKY,MAAM2G;gBACvB,IAAIu8B,eAAev8B,MAAM9D,MAAMN,MAAMinB;gBACrC,IAAI2Z,eAAex8B,MAAM3E,MAAMO,MAAMinB;gBACrC,IAAItkB,QAAQoyB,OAAO8L,aAAajzB,KAAK+yB,eAAeh+B,QAAQoyB;gBAC5D,IAAIpyB,QAAQqyB,OAAO6L,aAAa9yB,KAAK6yB,eAAej+B,QAAQqyB;;YAInD4N,UAAApkC,UAAAsiC,oBAAV,SAA4BhO;gBAC3B,IAAIiI,WAAWl+B,KAAKkgC,aAAahC;gBACjC,KAAsB,IAAArpB,KAAA,GAAAvK,KAAA2rB,cAAchG,qBAAdpb,KAAAvK,GAAA5I,QAAAmT,MAAkC;oBAAnD,IAAIggB,YAASvqB,GAAAuK;oBACjB,KAAK7U,KAAKimC,kBAAkBpR,YAAY;oBACxC70B,KAAKumC,aAAa1R,WAAWoB,cAAclG,aAAa8E,WAAWE;;gBAEpEmJ,SAAS6C,qBAAqB;;YAIvBgF,UAAApkC,UAAAqjC,WAAR,SAAiB3jC;gBAChB,OAAOA,OAAOrB,KAAKY,MAAM2G,MAAM9D,MAAMN,MAAMK;;YAGpCuiC,UAAApkC,UAAAujC,WAAR,SAAiB5jC;gBAChB,OAAOA,OAAOtB,KAAKY,MAAM2G,MAAM3E,MAAMO,MAAMK;;YAGpCuiC,UAAApkC,UAAAglC,aAAR,SAAmBC;gBAClB,OAAO,IAAIjjB,QAAQ3jB,KAAKglC,SAAS4B,IAAIp2B,IAAIxQ,KAAKklC,SAAS0B,IAAIn2B,IAAI;;YAEjE,OAAAs1B;UAxI+B9C,eAAAoC;QAAlBzlC,QAAAmmC,YAASA;O5B4lJhB,SAASlmC,QAAQD,SAASO;QAE/B;QACA,IAAIo6B,YAAav6B,QAAQA,KAAKu6B,aAAc,SAAUrf,GAAGsB;YACrD,KAAK,IAAI9b,KAAK8b,GAAG,IAAIA,EAAEtU,eAAexH,IAAIwa,EAAExa,KAAK8b,EAAE9b;YACnD,SAAS85B;gBAAOx6B,KAAKmM,cAAc+O;;YACnCA,EAAEvZ,YAAY6a,MAAM,OAAO/G,OAAOglB,OAAOje,MAAMge,GAAG74B,YAAY6a,EAAE7a,WAAW,IAAI64B;;Q6BloJpF,IAAAyI,iBAAA9iC,oBAA0C;QAE1C,IAAOm8B,WAAWj0B,MAAMi0B;QACxB,IAAOqD,WAAWt3B,MAAMs3B;QAGxB,IAAOhc,UAAUtb,MAAMsb;QACvB,IAAO0Y,OAAOh0B,MAAMg0B;QACpB,IAAOwK,OAAOx+B,MAAMw+B;QAEpB,IAAOnJ,oBAAoBr1B,MAAMq1B;QACjC,IAAOK,gBAAgB11B,MAAM01B;QAC7B,IAAAna,UAAAzjB,oBAA0C;QAC1C,IAAOy/B,oBAAoBv3B,MAAMu3B;QAEjC,IAAAp3B,UAAArI,oBAAsB;QAGtB,IAAM2mC,aAAa;QACnB,IAAMC,aAAa;QACnB,IAAMC,iBAAiB;QACvB,IAAMC,cAAc;QAKpB,IAAA/zB,sBAAA,SAAA+oB;YAAyC1B,UAAArnB,qBAAA+oB;YAAzC,SAAA/oB;gBAAyC+oB,OAAAvvB,MAAA1M,MAAA8U;;YAE9B5B,oBAAAvR,UAAAuhC,sBAAV;gBACC,OAAOgE;;YAFDh0B,oBAAAkpB,aAAa;YAIrB,OAAAlpB;UALyC+vB,eAAAG;QAA5BxjC,QAAAsT,sBAAmBA;QAQhC,IAAAg0B,qBAAA,SAAAjL;YAAwC1B,UAAA2M,oBAAAjL;YAcvC,SAAAiL,mBAAarZ,YAAmB1f;gBAC/B8tB,OAAA17B,KAAAP,MAAM6tB,YAAY1f;gBATXnO,KAAAmnC;gBACAnnC,KAAAonC;gBACApnC,KAAAqnC;gBAQPrnC,KAAKsnC;;YANCJ,mBAAAxD,kBAAP,SAAuBhc;gBACtB,OAAOA,aAAariB,WAAWqiB,aAAa7jB,QAAQ+f,QAAArf,WAAW8C;;YAShE6/B,mBAAAvlC,UAAAuL,cAAA;gBACC,OAAOlN,KAAKu8B;;YAGH2K,mBAAAvlC,UAAAqK,aAAV;gBAAA,IAAA9C,QAAAlJ;gBACCi8B,OAAAt6B,UAAMqK,WAAUzL,KAAAP;gBAChBA,KAAK+T,UAAU/T,KAAK8vB,MAAM7B,gBAAgB+E,UAAU;oBACnD9pB,MAAKq+B;oBACLr+B,MAAKs+B;;gBAENxnC,KAAK+T,UAAU/T,KAAK8vB,MAAM7B,gBAAgBgF,wBAAwB;oBACjE/pB,MAAKs+B;;;YAICN,mBAAAvlC,UAAA2lC,aAAR;gBACC,IAAIhgB,YAAYtnB,KAAKY,MAAM2G;gBAC3B,IAAA+C,KAAAgd,UAAA7jB,MAAAN,OAAK2gC,eAAAx5B,GAAA8f,aAA2B8N,QAAA5tB,GAAAF;gBAChC,IAAA2nB,KAAAzK,UAAA1kB,MAAAO,OAAK4gC,eAAAhS,GAAA3H,aAA2B+N,QAAApG,GAAA3nB;gBAChCpK,KAAK8jC,eAAeA;gBACpB9jC,KAAK+jC,eAAeA;gBACpB/jC,KAAKu8B,WAAW,IAAID;gBACpBt8B,KAAKu8B,SAASyE,MAAMzwB,IAAIuzB,eAAe5L,OAAO6L,eAAe5L,OAAO;gBACpEn4B,KAAKu8B,SAAS6D,gBAAgB;gBAC9B,KAAK,IAAIn6B,IAAI,GAAGA,IAAIghC,aAAahhC,KAAKjG,KAAKmnC,gBAAgB/lC,KAAK6E;gBAChEjG,KAAKwnC;;YAGEN,mBAAAvlC,UAAA6lC,eAAR;gBAGC,IAAAl9B,KAAAtK,KAAA8vB,MAAA7B,iBAAK+D,wBAAA1nB,GAAA0nB,uBAAuBC,uBAAA3nB,GAAA2nB;gBAE5B,KAAK,IAAI4C,aAAa70B,KAAKqnC,SAAS;oBACnC,IAAIvS,YAAU90B,KAAKqnC,QAAQxS,WAAWlC;oBACtC,IAAI0T,wBACHvR,UAAQjC,YAAYb,sBAAsBa,aAC1CiC,UAAQpI,UAAUuF,qBAAqBvF;oBAExC,IAAI2Z,uBAAuBrmC,KAAKynC,cAAc//B,OAAOmtB;;gBAGtD,IAAIlC,UAAUX;gBACd,OAAOW,WAAWA,QAAQtxB,QAAQ4wB,qBAAqB5wB,MAAM;oBAC5DrB,KAAK0nC,YAAY/U,QAAQtyB,IAAIsyB,QAAQoC;oBACrCpC,UAAUA,QAAQ5wB;;;YAIZmlC,mBAAAvlC,UAAA4lC,iBAAR;gBACC,KAAK,IAAI1S,aAAa70B,KAAKqnC,SAASrnC,KAAKynC,cAAc//B,OAAOmtB;;YAGvDqS,mBAAAvlC,UAAA8lC,gBAAR,SAAsB5S;gBACrB,IAAI8S,SAAS3nC,KAAKqnC,QAAQxS;gBAC1B70B,KAAKu8B,SAAS3sB,OAAO+3B,OAAOz6B;uBACrBlN,KAAKqnC,QAAQxS;;YAGXqS,mBAAAvlC,UAAAi3B,cAAV,SAAsB9yB;gBACrB,IAAIk+B,eAAehkC,KAAKu8B,SAASyE;gBACjC,IAAIl7B,QAAQoyB,OAAO8L,aAAajzB,KAAK/Q,KAAK8jC,eAAeh+B,QAAQoyB;gBACjE,IAAIpyB,QAAQqyB,OAAO6L,aAAa9yB,KAAKlR,KAAK+jC,eAAej+B,QAAQqyB;;YAGxD+O,mBAAAvlC,UAAAsiC,oBAAV,SAA4BhO;gBAC3B,KAAsB,IAAAphB,KAAA,GAAAvK,KAAA2rB,cAAchG,qBAAdpb,KAAAvK,GAAA5I,QAAAmT,MAAkC;oBAAnD,IAAIggB,YAASvqB,GAAAuK;oBACjB,KAAK7U,KAAKqnC,QAAQxS,YAAY;oBAC9B,IAAI2P,eAAevO,cAAclG,aAAa8E,WAAWE;oBACzD/0B,KAAK0nC,YAAY7S,WAAW2P;;;YAOtB0C,mBAAAvlC,UAAA+lC,cAAR,SAAoBE,UAAkBpD;gBACrC,IAAIqD,YAAYD,WAAWX;gBAG3B,IAAIU,SAAS3nC,KAAKonC,YAAYS;gBAC9B,KAAKF,QAAQ;oBACZA,SAAS3nC,KAAKonC,YAAYS,aAAa,IAAIC;;gBAG5C,KAAK9nC,KAAKqnC,QAAQO,WAAW;oBAC5B5nC,KAAKqnC,QAAQO,YAAYD;oBACzB3nC,KAAKu8B,SAAStvB,IAAI06B,OAAOz6B;;gBAE1By6B,OAAOz6B,cAAcoD,SAASC,IAAIvQ,KAAKglC,SAASR,aAAanjC,OAAOrB,KAAKklC,SAASV,aAAaljC,OAAO;gBACtGqmC,OAAOI,WAAWvD;;YAGnB0C,mBAAAvlC,UAAAqjC,WAAA,SAAS3jC;gBACR,OAAOA,OAAOrB,KAAKY,MAAM2G,MAAM9D,MAAMN,MAAMK;;YAG5C0jC,mBAAAvlC,UAAAujC,WAAA,SAAS5jC;gBACR,OAAOA,OAAOtB,KAAKY,MAAM2G,MAAM3E,MAAMO,MAAMK;;YAG5C0jC,mBAAAvlC,UAAAglC,aAAA,SAAWC;gBACV,OAAO,IAAIjjB,QAAQ3jB,KAAKglC,SAAS4B,IAAIp2B,IAAIxQ,KAAKklC,SAAS0B,IAAIn2B,IAAI;;YAEjE,OAAAy2B;UA5HwCjE,eAAAoC;QAA3BzlC,QAAAsnC,qBAAkBA;QA8H/B,IAAAY,eAAA;YAKC,SAAAA;gBACC9nC,KAAKsnC;;YAGNQ,aAAAnmC,UAAAuL,cAAA;gBACC,OAAOlN,KAAKgoC;;YAGbF,aAAAnmC,UAAAomC,aAAA,SAAWpV;gBACV3yB,KAAK2yB,UAAUA;gBACf,IAAIzN,QAAQyN,QAAQ6B,UAAU7B,QAAQ4B,YAAYwS,aAAaD;gBAG/D,IAAI5I,WAAWl+B,KAAKgoC,KAAK9J;gBACzB,IAAIT,WAAWz9B,KAAKgoC,KAAKvK;gBACzB,IAAIj0B,QAAQmpB,QAAQjG,UAAUiG,QAAQE;gBACtCrpB,SAASA,QAAQw9B;gBACjB,IAAIt9B,SAASnI,KAAKsR,IAAI8f,QAAQ4B,WAAW5B,QAAQ6B,WAAWjzB,KAAKqR,IAAI+f,QAAQ4B,WAAW5B,QAAQ6B;gBAChG,IAAAlqB,KAAA4zB,SAAA+B,UAAKgI,UAAA39B,GAAA,IAAS49B,WAAA59B,GAAA,IAAU69B,aAAA79B,GAAA,IAAY89B,cAAA99B,GAAA;gBACpC29B,QAAQ13B,KAAK/G,QAAQ,GAAGE,SAAS,GAAG;gBACpCw+B,SAAS33B,IAAI/G,QAAQ,GAAGE,SAAS,GAAG;gBACpCy+B,WAAW53B,KAAK/G,QAAQ,IAAIE,SAAS,GAAG;gBACxC0+B,YAAY73B,IAAI/G,QAAQ,IAAIE,SAAS,GAAG;gBAGxC,IAAIlB,QAAA3G,MAAMqW,YAAY+vB,QAAQx3B,GAAG03B,WAAW13B,KAAK,GAAG;oBACnD03B,WAAWj3B,KAAKi3B,WAAW13B,IAAI;oBAC/B23B,YAAYl3B,KAAKk3B,YAAY33B,IAAI;;gBAGlCgtB,SAASvY,MAAM3U,IAAI2U;gBACnBgZ,SAAS6C,qBAAqB;gBAG9B,IAAIsH,gBAAgBroC,KAAKsoC,MAAMpK;gBAC/B,IAAIqK,gBAAgBvoC,KAAKsoC,MAAM7K;gBAC/B,IAAI+K,UAAU7V,QAAQ5E,UAAU4E,QAAQrxB;gBACxC,IAAImnC,aAAa9V,QAAQ7E,UAAU6E,QAAQrxB;gBAC3C+mC,cAAcpI,SAAS,GAAG1vB,IAAI,GAAGi4B,SAAS;gBAC1CH,cAAcpI,SAAS,GAAG1vB,IAAI,GAAGk4B,YAAY;gBAC7CF,cAAcrjB,MAAM3U,IAAI2U;gBACxBmjB,cAActH,qBAAqB;gBAEnC,IAAI2H,gBAAgB1oC,KAAK2oC,MAAMzK;gBAC/B,IAAI0K,gBAAgB5oC,KAAK2oC,MAAMlL;gBAC/B,IAAIoL,YAAar/B,QAAS;gBAC1B,IAAIs/B,YAAYt/B,QAAQ;gBACxBk/B,cAAczI,SAAS,GAAG1vB,IAAIs4B,UAAU,GAAG;gBAC3CH,cAAczI,SAAS,GAAG1vB,IAAIu4B,WAAW,GAAG;gBAC5CF,cAAc1jB,MAAM3U,IAAI2U;gBACxBwjB,cAAc3H,qBAAqB;;YAI5B+G,aAAAnmC,UAAA2lC,aAAR;gBACCtnC,KAAKgoC,OAAO,IAAI3L,KACf,IAAI0B,cAAc,GAAG,IACrB,IAAIL;gBAEL,IAAI2K,gBAAgB,IAAI1I;gBACxB,IAAI+I,gBAAgB,IAAI/I;gBACxB0I,cAAcpI,SAAS7+B,KAAK,IAAIuiB,WAAW,IAAIA;gBAC/C+kB,cAAczI,SAAS7+B,KAAK,IAAIuiB,WAAW,IAAIA;gBAC/C3jB,KAAKsoC,QAAQ,IAAIzB,KAAKwB,eAAe,IAAIzI;oBAAmBC,WAAW;;gBACvE7/B,KAAK2oC,QAAQ,IAAI9B,KAAK6B,eAAe,IAAI9I;oBAAmBC,WAAW;;gBACvE7/B,KAAKgoC,KAAK/6B,IAAIjN,KAAKsoC;gBACnBtoC,KAAKgoC,KAAK/6B,IAAIjN,KAAK2oC;;YAErB,OAAAb;;O7BsmJM,SAASjoC,QAAQD,SAASO;QAE/B;QACA,SAAS8H,SAASzH;YACd,KAAK,IAAIE,KAAKF,GAAG,KAAKZ,QAAQsI,eAAexH,IAAId,QAAQc,KAAKF,EAAEE;;Q8Br1JrEuH,SAAA9H,oBAAc;O9B41JR,SAASN,QAAQD,SAASO;QAE/B;QACA,SAAS8H,SAASzH;YACd,KAAK,IAAIE,KAAKF,GAAG,KAAKZ,QAAQsI,eAAexH,IAAId,QAAQc,KAAKF,EAAEE;;Q+Bh2JrEuH,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc;QACd8H,SAAA9H,oBAAc","file":"demoApp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar src_1 = __webpack_require__(1);\r\n\t// import { ChartView, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from 'three-charts';\r\n\t// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/TrendsMarksPlugin';\r\n\t// import { TrendsBeaconWidget } from '../plugins/build/TrendsBeaconWidget';\r\n\t// import { TrendsLoadingWidget } from '../plugins/build/TrendsLoadingWidget';\r\n\t// import { TrendsIndicatorWidget } from '../plugins/build/TrendsIndicatorWidget';\r\n\t// ChartView.preinstalledWidgets.push(TrendsLoadingWidget, TrendsBeaconWidget, TrendsIndicatorWidget);\r\n\tvar chart;\r\n\tvar DataSourse = (function () {\r\n\t    function DataSourse() {\r\n\t        this.data = [];\r\n\t        var sec = 0;\r\n\t        var val = 70;\r\n\t        this.startTime = Date.now();\r\n\t        while (sec < 100) {\r\n\t            this.data.push({\r\n\t                xVal: this.startTime + sec * 1000,\r\n\t                yVal: val\r\n\t            });\r\n\t            val += Math.random() * 14 - 7;\r\n\t            sec++;\r\n\t        }\r\n\t        this.endTime = this.data[this.data.length - 1].xVal;\r\n\t    }\r\n\t    DataSourse.prototype.getData = function () {\r\n\t        return src_1.Utils.deepCopy(this.data);\r\n\t    };\r\n\t    DataSourse.prototype.getNext = function () {\r\n\t        var lastVal = this.data[this.data.length - 1];\r\n\t        var yVal = lastVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.endTime + 1000;\r\n\t        this.endTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.push(item);\r\n\t        return item;\r\n\t    };\r\n\t    DataSourse.prototype.getPrev = function () {\r\n\t        var firstVal = this.data[0];\r\n\t        var yVal = firstVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.startTime - 1000;\r\n\t        this.startTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.unshift(item);\r\n\t        return item;\r\n\t    };\r\n\t    return DataSourse;\r\n\t}());\r\n\t// class MarksSource {\r\n\t// \tstatic getNext(val: number): ITrendMarkOptions {\r\n\t// \t\tif (Math.random() > 0.2) return null;\r\n\t// \t\treturn this.generate(val);\r\n\t// \t}\r\n\t//\r\n\t// \tstatic generate(val: number): ITrendMarkOptions {\r\n\t// \t\tlet descriptionColor = 'rgb(40,136,75)';\r\n\t// \t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\r\n\t// \t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\r\n\t// \t\t\tdescriptionColor = 'rgb(219,73,49)';\r\n\t// \t\t}\r\n\t//\r\n\t// \t\treturn {\r\n\t// \t\t\ttrendName: 'main',\r\n\t// \t\t\tvalue: val,\r\n\t// \t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\r\n\t// \t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\r\n\t// \t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\r\n\t// \t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\r\n\t// \t\t\torientation: orientation,\r\n\t// \t\t\tdescriptionColor: descriptionColor\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\twindow.onload = function () {\r\n\t    initListeners();\r\n\t    var dsMain = new DataSourse();\r\n\t    var dsRed = new DataSourse();\r\n\t    var dsBlue = new DataSourse();\r\n\t    var now = Date.now();\r\n\t    chart = new src_1.ChartView({\r\n\t        yAxis: {\r\n\t            marks: [\r\n\t                { value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true },\r\n\t            ],\r\n\t            range: {\r\n\t                padding: { end: 100, start: 100 },\r\n\t                margin: { end: 50, start: 50 },\r\n\t                zeroVal: 70\r\n\t            }\r\n\t        },\r\n\t        xAxis: {\r\n\t            //range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\r\n\t            dataType: src_1.AXIS_DATA_TYPE.DATE,\r\n\t            range: {\r\n\t                type: src_1.AXIS_RANGE_TYPE.FIXED,\r\n\t                from: Date.now(),\r\n\t                to: Date.now() + 20000,\r\n\t                padding: { end: 200, start: 0 },\r\n\t                maxLength: 5000000,\r\n\t                minLength: 5000\r\n\t            },\r\n\t            marks: [\r\n\t                { value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true },\r\n\t                { value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true }\r\n\t            ]\r\n\t        },\r\n\t        trends: {\r\n\t            'main': {\r\n\t                type: src_1.TREND_TYPE.LINE,\r\n\t                dataset: dsMain.getData(),\r\n\t                hasBeacon: true,\r\n\t                hasIndicator: true,\r\n\t                hasBackground: true,\r\n\t            },\r\n\t        },\r\n\t        showStats: true,\r\n\t        // autoRender: {fps: 100},\r\n\t        // animations: {enabled: false},\r\n\t        trendDefaultState: {\r\n\t            settingsForTypes: {\r\n\t                LINE: {\r\n\t                    minSegmentLengthInPx: 10\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }, document.querySelector('.chart'));\r\n\t    chart.setState({ animations: { enabled: false } });\r\n\t    chart.setState({ animations: { enabled: true } });\r\n\t    window['chart'] = chart;\r\n\t    var mainTrend = chart.getTrend('main');\r\n\t    var deadlineMark = chart.chart.xAxisMarks.getItem('deadline');\r\n\t    var closeMark = chart.chart.xAxisMarks.getItem('close');\r\n\t    mainTrend.onDataChange(function () {\r\n\t        var closeValue = closeMark.options.value;\r\n\t        if (mainTrend.getLastItem().xVal >= closeValue) {\r\n\t            deadlineMark.setOptions({ value: closeValue + 10000 });\r\n\t            closeMark.setOptions({ value: closeValue + 20000 });\r\n\t        }\r\n\t        // var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\r\n\t        // if (markOptions) setTimeout(() => {\r\n\t        // \tlet trendsMarks = state.state.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\r\n\t        // \ttrendsMarks.createMark(markOptions);\r\n\t        // }, 500);\r\n\t    });\r\n\t    // var previewChart1 = ChartView.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-state')[0],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.state, hasBeacon: true}\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart2 = ChartView.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-state')[1],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.state, hasBeacon: true}\r\n\t    // \t},\r\n\t    //\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart3 = ChartView.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-state')[2],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.state, hasBeacon: true},\r\n\t    // \t\t'red': {dataset: dsRed.state, lineColor: 0xFF2222},\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    var i = 0;\r\n\t    chart.getTrend('main').onPrependRequest(function (requestedLength, resolve, reject) {\r\n\t        var responseData = [];\r\n\t        var ticksCount = Math.round(requestedLength / 1000);\r\n\t        while (ticksCount--)\r\n\t            responseData.unshift(dsMain.getPrev());\r\n\t        setTimeout(function () {\r\n\t            resolve(responseData);\r\n\t        }, 2000);\r\n\t    });\r\n\t    setInterval(function () {\r\n\t        i++;\r\n\t        var val = dsMain.getNext();\r\n\t        // [i % 2 ? 10 : 20]\r\n\t        chart.getTrend('main').appendData([val]);\r\n\t        // state.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\r\n\t        // state.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // state.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // state.getTrend('red').appendData([val + 10 + Math.random() * 20]);\r\n\t        // state.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.getTrend('main').appendData([val]);\r\n\t        // previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\r\n\t        // previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.appendData(dataToAppend1);\r\n\t        //\r\n\t        // var chartData2 = previewChart2.state.state.trends[0].state;\r\n\t        // var lastItem2 = chartData2[chartData.length - 1];\r\n\t        // var dataToAppend2 = [\r\n\t        // \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\r\n\t        // ];\r\n\t        // previewChart2.appendData(dataToAppend2);\r\n\t        // previewChart3.appendData(dataToAppend2);\r\n\t    }, 1000);\r\n\t};\r\n\tfunction initListeners() {\r\n\t    var $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]');\r\n\t    $checkboxMaintrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { main: { enabled: $checkboxMaintrend.checked } } });\r\n\t    });\r\n\t    var $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]');\r\n\t    $checkboxRedtrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { red: { enabled: $checkboxRedtrend.checked } } });\r\n\t    });\r\n\t    var $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]');\r\n\t    $checkboxBluetrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { blue: { enabled: $checkboxBluetrend.checked } } });\r\n\t    });\r\n\t    var $switchLineBtn = document.querySelector('[name=\"switch-line\"]');\r\n\t    $switchLineBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: src_1.TREND_TYPE.LINE });\r\n\t    });\r\n\t    var $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]');\r\n\t    $switchBarsBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: src_1.TREND_TYPE.CANDLE });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-left\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.chart.state.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { from: currentRange.from - 2000 } } });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-right\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.chart.state.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { to: currentRange.to + 2000 } } });\r\n\t    });\r\n\t    var timeframeButtons = document.querySelectorAll(\".timeframe\");\r\n\t    for (var i = 0; i < timeframeButtons.length; i++) {\r\n\t        timeframeButtons[i].addEventListener(\"click\", function () {\r\n\t            var range = Number(this.getAttribute('data-range'));\r\n\t            var segmentLength = Number(this.getAttribute('data-segment-length'));\r\n\t            chart.chart.setState({ autoScroll: false });\r\n\t            chart.chart.zoomToRange(range);\r\n\t            chart.chart.scrollToEnd().then(function () {\r\n\t                chart.chart.setState({ autoScroll: true });\r\n\t            });\r\n\t        });\r\n\t    }\r\n\t}\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(2));\r\n\t__export(__webpack_require__(19));\r\n\t__export(__webpack_require__(18));\r\n\t__export(__webpack_require__(17));\r\n\t__export(__webpack_require__(13));\r\n\t__export(__webpack_require__(14));\r\n\t__export(__webpack_require__(15));\r\n\t__export(__webpack_require__(16));\r\n\t__export(__webpack_require__(4));\r\n\t__export(__webpack_require__(20));\r\n\t__export(__webpack_require__(3));\r\n\t__export(__webpack_require__(23));\r\n\t__export(__webpack_require__(29));\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t// deps must be always on top\r\n\tvar Plugin_1 = __webpack_require__(3);\r\n\t__webpack_require__(5);\r\n\tvar PerspectiveCamera = THREE.PerspectiveCamera;\r\n\tvar Chart_1 = __webpack_require__(13);\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar AxisWidget_1 = __webpack_require__(21);\r\n\tvar GridWidget_1 = __webpack_require__(22);\r\n\tvar TrendsGradientWidget_1 = __webpack_require__(24);\r\n\tvar TrendsLineWidget_1 = __webpack_require__(26);\r\n\tvar TrendsCandleWidget_1 = __webpack_require__(27);\r\n\tvar deps_1 = __webpack_require__(28);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\tvar ChartView = (function () {\r\n\t    function ChartView(state, $container, pluginsAndWidgets) {\r\n\t        var _this = this;\r\n\t        if (pluginsAndWidgets === void 0) { pluginsAndWidgets = []; }\r\n\t        this.widgets = [];\r\n\t        if (!THREE || !THREE.REVISION)\r\n\t            Utils_1.Utils.error('three.js not found');\r\n\t        if (!$container) {\r\n\t            Utils_1.Utils.error('$el must be set');\r\n\t        }\r\n\t        // calculate state size\r\n\t        var style = getComputedStyle($container);\r\n\t        state.width = parseInt(style.width);\r\n\t        state.height = parseInt(style.height);\r\n\t        var plugins = pluginsAndWidgets.filter(function (pluginOrWidget) { return pluginOrWidget instanceof Plugin_1.ChartPlugin; });\r\n\t        this.chart = new Chart_1.Chart(state, plugins);\r\n\t        this.pluginsAndWidgets = pluginsAndWidgets;\r\n\t        this.zoomThrottled = Utils_1.Utils.throttle(function (zoomValue, origin) { return _this.zoom(zoomValue, origin); }, 200);\r\n\t        this.$container = $container;\r\n\t        this.init($container);\r\n\t    }\r\n\t    ;\r\n\t    ChartView.prototype.init = function ($container) {\r\n\t        var chart = this.chart;\r\n\t        var _a = chart.state, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\r\n\t        this.scene = new THREE.Scene();\r\n\t        this.isStopped = !autoRender.enabled;\r\n\t        var renderer = this.renderer = new ChartView.renderers[this.chart.state.renderer]({\r\n\t            antialias: true,\r\n\t            alpha: true\r\n\t        });\r\n\t        var backgroundColor = new Color_1.ChartColor(chart.state.backgroundColor);\r\n\t        renderer.setSize(w, h);\r\n\t        renderer.setPixelRatio(ChartView.devicePixelRatio);\r\n\t        renderer.setClearColor(backgroundColor.value, backgroundColor.a);\r\n\t        $container.appendChild(renderer.domElement);\r\n\t        this.$el = renderer.domElement;\r\n\t        this.$el.style.display = 'block';\r\n\t        if (showStats) {\r\n\t            this.stats = new Stats();\r\n\t            $container.appendChild(this.stats.domElement);\r\n\t        }\r\n\t        this.setupCamera();\r\n\t        this.initWidgets();\r\n\t        this.bindEvents();\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\r\n\t     */\r\n\t    ChartView.prototype.initWidgets = function () {\r\n\t        var _this = this;\r\n\t        var preinstalledWidgetsClasses = this.constructor.preinstalledWidgets;\r\n\t        var customWidgets = [];\r\n\t        this.pluginsAndWidgets.forEach(function (pluginOrWidget) {\r\n\t            if (pluginOrWidget instanceof Widget_1.ChartWidget) {\r\n\t                customWidgets.push(pluginOrWidget);\r\n\t                return;\r\n\t            }\r\n\t            if (!(pluginOrWidget instanceof Plugin_1.ChartPlugin))\r\n\t                return;\r\n\t            var pluginWidgetClasses = pluginOrWidget.constructor.providedWidgets;\r\n\t            preinstalledWidgetsClasses.push.apply(preinstalledWidgetsClasses, pluginWidgetClasses);\r\n\t        });\r\n\t        this.widgets = customWidgets.concat(preinstalledWidgetsClasses.map(function (WidgetClass) { return new WidgetClass(); }));\r\n\t        this.widgets.forEach(function (widget) {\r\n\t            widget.setupChart(_this.chart);\r\n\t            widget.onReadyHandler();\r\n\t            _this.scene.add(widget.getObject3D());\r\n\t        });\r\n\t    };\r\n\t    ChartView.prototype.renderLoop = function () {\r\n\t        var _this = this;\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        this.stats && this.stats.begin();\r\n\t        this.render();\r\n\t        if (this.isStopped)\r\n\t            return;\r\n\t        var fpsLimit = this.chart.state.autoRender.fps;\r\n\t        if (fpsLimit) {\r\n\t            var delay_1 = 1000 / fpsLimit;\r\n\t            setTimeout(function () { return requestAnimationFrame(function () { return _this.renderLoop(); }); }, delay_1);\r\n\t        }\r\n\t        else {\r\n\t            requestAnimationFrame(function () { return _this.renderLoop(); });\r\n\t        }\r\n\t        this.stats && this.stats.end();\r\n\t    };\r\n\t    ChartView.prototype.render = function () {\r\n\t        this.renderer.render(this.scene, this.camera);\r\n\t    };\r\n\t    ChartView.prototype.stop = function () {\r\n\t        this.isStopped = true;\r\n\t    };\r\n\t    ChartView.prototype.run = function () {\r\n\t        this.isStopped = false;\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * call to destroy state an init garbage collection\r\n\t     */\r\n\t    ChartView.prototype.destroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.stop();\r\n\t        this.chart.destroy();\r\n\t        this.unbindEvents();\r\n\t        // WARNING! undocumented method for free webgl context\r\n\t        try {\r\n\t            this.renderer.forceContextLoss();\r\n\t        }\r\n\t        catch (wtf) {\r\n\t        }\r\n\t        this.renderer.context = null;\r\n\t        this.renderer.domElement = null;\r\n\t        this.renderer = null;\r\n\t    };\r\n\t    ChartView.prototype.getState = function () {\r\n\t        return this.chart.state;\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.getTrend\r\n\t     */\r\n\t    ChartView.prototype.getTrend = function (trendName) {\r\n\t        return this.chart.getTrend(trendName);\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.setState\r\n\t     */\r\n\t    ChartView.prototype.setState = function (state) {\r\n\t        return this.chart.setState(state);\r\n\t    };\r\n\t    ChartView.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var $el = this.$el;\r\n\t        if (this.chart.state.controls.enabled) {\r\n\t            $el.addEventListener('mousewheel', function (ev) {\r\n\t                _this.onMouseWheel(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousemove', function (ev) {\r\n\t                _this.onMouseMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousedown', function (ev) { return _this.onMouseDown(ev); });\r\n\t            $el.addEventListener('mouseup', function (ev) { return _this.onMouseUp(ev); });\r\n\t            $el.addEventListener('touchmove', function (ev) {\r\n\t                _this.onTouchMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('touchend', function (ev) {\r\n\t                _this.onTouchEnd(ev);\r\n\t            });\r\n\t        }\r\n\t        if (this.chart.state.autoResize) {\r\n\t            this.resizeSensor = new deps_1.ResizeSensor(this.$container, function () {\r\n\t                _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\r\n\t            });\r\n\t        }\r\n\t        this.unsubscribers = [\r\n\t            this.chart.onTrendsChange(function () { return _this.autoscroll(); }),\r\n\t            this.chart.screen.onTransformationFrame(function (options) { return _this.onScreenTransformHandler(options); }),\r\n\t            this.chart.onResize(function (options) { return _this.onChartResize(); })\r\n\t        ];\r\n\t    };\r\n\t    ChartView.prototype.unbindEvents = function () {\r\n\t        // TODO: unbind events correctly\r\n\t        try {\r\n\t            this.resizeSensor && this.resizeSensor.detach();\r\n\t        }\r\n\t        catch (e) {\r\n\t        }\r\n\t        this.$el.remove();\r\n\t        this.unsubscribers.forEach(function (unsubscribe) { return unsubscribe(); });\r\n\t    };\r\n\t    ChartView.prototype.setupCamera = function () {\r\n\t        var camSettings = this.chart.screen.getCameraSettings();\r\n\t        if (!this.camera) {\r\n\t            this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\r\n\t            this.scene.add(this.camera);\r\n\t        }\r\n\t        else {\r\n\t            this.camera.fov = camSettings.FOV;\r\n\t            this.camera.aspect = camSettings.aspect;\r\n\t            this.camera.far = camSettings.far;\r\n\t            this.camera.near = camSettings.near;\r\n\t            this.camera.updateProjectionMatrix();\r\n\t        }\r\n\t        this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\r\n\t        this.cameraInitialPosition = this.camera.position.clone();\r\n\t        this.onScreenTransformHandler(this.chart.screen.options);\r\n\t    };\r\n\t    ChartView.prototype.onScreenTransformHandler = function (options) {\r\n\t        if (options.scrollX != void 0) {\r\n\t            var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\r\n\t            // scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setX(scrollX_1);\r\n\t        }\r\n\t        if (options.scrollY != void 0) {\r\n\t            var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\r\n\t            // scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setY(scrollY_1);\r\n\t        }\r\n\t    };\r\n\t    ChartView.prototype.autoscroll = function () {\r\n\t        var state = this.chart;\r\n\t        if (!state.state.autoScroll)\r\n\t            return;\r\n\t        var oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\r\n\t        var trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\r\n\t        if (trendsMaxXDelta > 0) {\r\n\t            var maxVisibleX = this.chart.screen.getScreenRightVal();\r\n\t            var paddingRightX = this.chart.getPaddingRight();\r\n\t            var currentScroll = state.state.xAxis.range.scroll;\r\n\t            if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\r\n\t                return;\r\n\t            }\r\n\t            var scrollDelta = trendsMaxXDelta;\r\n\t            this.setState({ xAxis: { range: { scroll: currentScroll + scrollDelta } } });\r\n\t        }\r\n\t    };\r\n\t    ChartView.prototype.onScrollStop = function () {\r\n\t        // var tendsXMax = this.state.state.computedData.trends.maxX;\r\n\t        // var paddingRightX = this.state.getPaddingRight();\r\n\t        // if (tendsXMax < paddingRightX) {\r\n\t        // \tthis.state.scrollToEnd();\r\n\t        // }\r\n\t    };\r\n\t    ChartView.prototype.onMouseDown = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t    };\r\n\t    ChartView.prototype.onMouseUp = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartView.prototype.onMouseMove = function (ev) {\r\n\t        if (this.chart.state.cursor.dragMode) {\r\n\t            this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t        }\r\n\t    };\r\n\t    ChartView.prototype.onMouseWheel = function (ev) {\r\n\t        ev.stopPropagation();\r\n\t        ev.preventDefault();\r\n\t        var zoomOrigin = ev.layerX / this.chart.state.width;\r\n\t        var zoomValue = 1 + ev.wheelDeltaY * 0.001;\r\n\t        this.zoom(zoomValue, zoomOrigin);\r\n\t    };\r\n\t    ChartView.prototype.onTouchMove = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY } });\r\n\t    };\r\n\t    ChartView.prototype.onTouchEnd = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartView.prototype.onChartContainerResizeHandler = function (width, height) {\r\n\t        this.setState({ width: width, height: height });\r\n\t    };\r\n\t    ChartView.prototype.onChartResize = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height;\r\n\t        this.renderer.setSize(width, height);\r\n\t        this.setupCamera();\r\n\t    };\r\n\t    ChartView.prototype.zoom = function (zoomValue, zoomOrigin) {\r\n\t        var _this = this;\r\n\t        var MAX_ZOOM_VALUE = 1.5;\r\n\t        var MIN_ZOOM_VALUE = 0.7;\r\n\t        zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\r\n\t        zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\r\n\t        var autoScrollIsEnabled = this.chart.state.autoScroll;\r\n\t        if (autoScrollIsEnabled)\r\n\t            this.chart.setState({ autoScroll: false });\r\n\t        this.chart.zoom(zoomValue, zoomOrigin).then(function () {\r\n\t            if (autoScrollIsEnabled)\r\n\t                _this.setState({ autoScroll: true });\r\n\t        });\r\n\t    };\r\n\t    ChartView.devicePixelRatio = window.devicePixelRatio;\r\n\t    ChartView.preinstalledWidgets = [];\r\n\t    ChartView.renderers = {\r\n\t        CanvasRenderer: THREE.CanvasRenderer,\r\n\t        WebGLRenderer: THREE.WebGLRenderer\r\n\t    };\r\n\t    return ChartView;\r\n\t}());\r\n\texports.ChartView = ChartView;\r\n\t// install built-in widgets\r\n\tChartView.preinstalledWidgets = [\r\n\t    TrendsLineWidget_1.TrendsLineWidget,\r\n\t    TrendsCandleWidget_1.TrendsCandlesWidget,\r\n\t    AxisWidget_1.AxisWidget,\r\n\t    GridWidget_1.GridWidget,\r\n\t    TrendsGradientWidget_1.TrendsGradientWidget\r\n\t];\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\texports.DEFAULT_CONFIG = {\r\n\t    installPluginWidgets: true\r\n\t};\r\n\t/**\r\n\t * base class for all plugins\r\n\t * NAME is mandatory\r\n\t */\r\n\tvar ChartPlugin = (function () {\r\n\t    function ChartPlugin(options, config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        this.unsubscribers = [];\r\n\t        this.initialState = options;\r\n\t        this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\r\n\t        this.name = this.constructor.NAME;\r\n\t        if (!this.name)\r\n\t            Utils_1.Utils.error('Unnamed plugin detected');\r\n\t    }\r\n\t    ChartPlugin.prototype.setupChart = function (chart) {\r\n\t        var _this = this;\r\n\t        this.chart = chart;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvent(this.chart.onInitialStateApplied(function (initialState) { return _this.onInitialStateAppliedHandler(initialState); }), this.chart.onReady(function () { return _this.onReadyHandler(); }), this.chart.onDestroy(function () { return _this.onDestroyHandler(); }), this.chart.onPluginsStateChange(function (changedPluginsStates) { return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]); }));\r\n\t    };\r\n\t    ChartPlugin.prototype.getOptions = function () {\r\n\t        return this.chart.state.pluginsState[this.name];\r\n\t    };\r\n\t    ChartPlugin.prototype.onInitialStateAppliedHandler = function (initialState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onReadyHandler = function () {\r\n\t    };\r\n\t    ChartPlugin.prototype.onStateChanged = function (changedState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t    };\r\n\t    ChartPlugin.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unsubscribers = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unsubscribers.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unsubscribers.push.apply(unsubscribers, (args));\r\n\t        }\r\n\t        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartPlugin.prototype.unbindEvents = function () {\r\n\t        this.unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); });\r\n\t        this.unsubscribers.length = 0;\r\n\t    };\r\n\t    ChartPlugin.NAME = '';\r\n\t    ChartPlugin.providedWidgets = [];\r\n\t    return ChartPlugin;\r\n\t}());\r\n\texports.ChartPlugin = ChartPlugin;\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tfunction deepmerge(target, src, mergeArrays) {\r\n\t    if (mergeArrays === void 0) { mergeArrays = true; }\r\n\t    var array = Array.isArray(src);\r\n\t    var dst = array && [] || {};\r\n\t    if (array) {\r\n\t        target = target || [];\r\n\t        if (mergeArrays) {\r\n\t            dst = dst.concat(target);\r\n\t        }\r\n\t        src.forEach(function (e, i) {\r\n\t            if (typeof dst[i] === 'undefined') {\r\n\t                dst[i] = e;\r\n\t            }\r\n\t            else if (typeof e === 'object') {\r\n\t                dst[i] = deepmerge(target[i], e, mergeArrays);\r\n\t            }\r\n\t            else {\r\n\t                if (target.indexOf(e) === -1) {\r\n\t                    dst.push(e);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    else {\r\n\t        if (target && typeof target === 'object') {\r\n\t            Object.keys(target).forEach(function (key) {\r\n\t                dst[key] = target[key];\r\n\t            });\r\n\t        }\r\n\t        Object.keys(src).forEach(function (key) {\r\n\t            if (typeof src[key] !== 'object' || !src[key]) {\r\n\t                dst[key] = src[key];\r\n\t            }\r\n\t            else {\r\n\t                if (!target[key]) {\r\n\t                    dst[key] = src[key];\r\n\t                }\r\n\t                else {\r\n\t                    dst[key] = deepmerge(target[key], src[key], mergeArrays);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    return dst;\r\n\t}\r\n\t/**\r\n\t * project utils static class\r\n\t */\r\n\tvar Utils = (function () {\r\n\t    function Utils() {\r\n\t    }\r\n\t    /**\r\n\t     * deepMerge based on https://www.npmjs.com/package/deepmerge\r\n\t     */\r\n\t    Utils.deepMerge = function (obj1, obj2, mergeArrays) {\r\n\t        return deepmerge(obj1, obj2, mergeArrays);\r\n\t    };\r\n\t    /**\r\n\t     * deepCopy based on JSON.stringify function\r\n\t     * @deprecated\r\n\t     */\r\n\t    Utils.deepCopy = function (obj) {\r\n\t        // TODO: use deepMerge function to copy\r\n\t        return JSON.parse(JSON.stringify(obj));\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * @example\r\n\t     * // returns \"000015\"\r\n\t     * Utils.toFixed(15, 6);\r\n\t     */\r\n\t    Utils.toFixed = function (num, digitsCount) {\r\n\t        var maxDigits = 15;\r\n\t        var result = '';\r\n\t        var intVal = Math.floor(num);\r\n\t        var intStr = intVal.toString();\r\n\t        var lengthDiff = digitsCount - intStr.length;\r\n\t        if (lengthDiff > 0) {\r\n\t            result = '0'.repeat(lengthDiff) + intStr;\r\n\t        }\r\n\t        else {\r\n\t            result = intStr;\r\n\t        }\r\n\t        var afterPointDigitsCount = maxDigits - intStr.length;\r\n\t        var afterPointStr = num.toString().split('.')[1];\r\n\t        if (afterPointStr) {\r\n\t            result += '.' + afterPointStr.substr(0, afterPointDigitsCount);\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    Utils.bindEvent = function () {\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createTexture = function (width, height, fn) {\r\n\t        var canvas = document.createElement('canvas');\r\n\t        canvas.width = width;\r\n\t        canvas.height = height;\r\n\t        var ctx = canvas.getContext('2d');\r\n\t        fn(ctx);\r\n\t        var texture = new THREE.Texture(canvas);\r\n\t        texture.needsUpdate = true;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context with NearestFilter\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createPixelPerfectTexture = function (width, height, fn) {\r\n\t        var texture = this.createTexture(width, height, fn);\r\n\t        // texture.magFilter = THREE.NearestFilter;\r\n\t        texture.minFilter = THREE.NearestFilter;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.error = function (msg) {\r\n\t        console.error('Chart error: ' + msg);\r\n\t        throw 'Chart: ' + msg;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.warn = function (msg) {\r\n\t        console.warn('Chart warning: ' + msg);\r\n\t    };\r\n\t    /**\r\n\t     * @returns new unique id\r\n\t     */\r\n\t    Utils.getUid = function () {\r\n\t        return this.currentId++;\r\n\t    };\r\n\t    /**\r\n\t     * @returns distance between numbers\r\n\t     */\r\n\t    Utils.getDistance = function (num1, num2) {\r\n\t        return Math.max(num1, num2) - Math.min(num1, num2);\r\n\t    };\r\n\t    Utils.binarySearchClosestInd = function (arr, num, key) {\r\n\t        var mid;\r\n\t        var lo = 0;\r\n\t        var hi = arr.length - 1;\r\n\t        while (hi - lo > 1) {\r\n\t            mid = Math.floor((lo + hi) / 2);\r\n\t            if (arr[mid][key] < num) {\r\n\t                lo = mid;\r\n\t            }\r\n\t            else {\r\n\t                hi = mid;\r\n\t            }\r\n\t        }\r\n\t        if (num - arr[lo][key] <= arr[hi][key] - num) {\r\n\t            return lo;\r\n\t        }\r\n\t        return hi;\r\n\t    };\r\n\t    Utils.binarySearchClosest = function (arr, num, key) {\r\n\t        var ind = this.binarySearchClosestInd(arr, num, key);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.rectsIntersect = function (r1, r2) {\r\n\t        var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\r\n\t        var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\r\n\t        var _a = [left1 + width1, left2 + width2, top1 + height1, top2 + height2], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\r\n\t        return !(left2 > right1 ||\r\n\t            right2 < left1 ||\r\n\t            top2 > bottom1 ||\r\n\t            bottom2 < top1);\r\n\t    };\r\n\t    Utils.throttle = function (func, ms) {\r\n\t        var isThrottled = false, savedArgs, savedThis;\r\n\t        function wrapper() {\r\n\t            if (isThrottled) {\r\n\t                savedArgs = arguments;\r\n\t                savedThis = this;\r\n\t                return;\r\n\t            }\r\n\t            func.apply(this, arguments); // (1)\r\n\t            isThrottled = true;\r\n\t            setTimeout(function () {\r\n\t                isThrottled = false; // (3)\r\n\t                if (savedArgs) {\r\n\t                    wrapper.apply(savedThis, savedArgs);\r\n\t                    savedArgs = savedThis = null;\r\n\t                }\r\n\t            }, ms);\r\n\t        }\r\n\t        return wrapper;\r\n\t    };\r\n\t    Utils.msToTimeString = function (timestamp) {\r\n\t        var h = Math.floor(timestamp / 360000);\r\n\t        var m = Math.floor(timestamp / 60000);\r\n\t        var s = Math.floor(timestamp / 1000);\r\n\t        return h + ':' + m + ':' + s;\r\n\t    };\r\n\t    Utils.getRandomItem = function (arr) {\r\n\t        var ind = Math.floor(Math.random() * arr.length);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.copyProps = function (srcObject, dstObject, props, excludeProps) {\r\n\t        if (excludeProps === void 0) { excludeProps = []; }\r\n\t        for (var key in props) {\r\n\t            if (excludeProps.indexOf(key) !== -1)\r\n\t                continue;\r\n\t            if (srcObject[key] == void 0)\r\n\t                continue;\r\n\t            if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\r\n\t                this.copyProps(srcObject[key], dstObject[key], props[key]);\r\n\t            }\r\n\t            else {\r\n\t                dstObject[key] = this.deepCopy(srcObject[key]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Utils.currentId = 1;\r\n\t    return Utils;\r\n\t}());\r\n\texports.Utils = Utils;\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"./ResizeSensor.ts\" />\r\n\t\"use strict\";\r\n\twindow.TweenLite = TweenMax;\r\n\twindow.Stats = __webpack_require__(6);\r\n\t// require('gsap/src/uncompressed/easing/EasePack.js');\r\n\t// require('three/examples/js/renderers/CanvasRenderer.js');\r\n\t// require('three/examples/js/renderers/Projector.js');\r\n\texports.isPlainObject = __webpack_require__(7);\r\n\texports.EE2 = __webpack_require__(9);\r\n\tvar es6_promise_1 = __webpack_require__(10);\r\n\texports.Promise = es6_promise_1.Promise;\r\n\texports.ResizeSensor = __webpack_require__(11);\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t// stats.js - http://github.com/mrdoob/stats.js\n\tvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\n\tif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\n\tStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\n\tv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tvar isObject = __webpack_require__(8);\n\t\n\tfunction isObjectObject(o) {\n\t  return isObject(o) === true\n\t    && Object.prototype.toString.call(o) === '[object Object]';\n\t}\n\t\n\tmodule.exports = function isPlainObject(o) {\n\t  var ctor,prot;\n\t  \n\t  if (isObjectObject(o) === false) return false;\n\t  \n\t  // If has modified constructor\n\t  ctor = o.constructor;\n\t  if (typeof ctor !== 'function') return false;\n\t  \n\t  // If has modified prototype\n\t  prot = ctor.prototype;\n\t  if (isObjectObject(prot) === false) return false;\n\t  \n\t  // If constructor does not have an Object-specific method\n\t  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n\t    return false;\n\t  }\n\t  \n\t  // Most likely a plain Object\n\t  return true;\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tmodule.exports = function isObject(val) {\n\t  return val != null && typeof val === 'object'\n\t    && !Array.isArray(val);\n\t};\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * EventEmitter2\n\t * https://github.com/hij1nx/EventEmitter2\n\t *\n\t * Copyright (c) 2013 hij1nx\n\t * Licensed under the MIT license.\n\t */\n\t;!function(undefined) {\n\t\n\t  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t    return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t  };\n\t  var defaultMaxListeners = 10;\n\t\n\t  function init() {\n\t    this._events = {};\n\t    if (this._conf) {\n\t      configure.call(this, this._conf);\n\t    }\n\t  }\n\t\n\t  function configure(conf) {\n\t    if (conf) {\n\t\n\t      this._conf = conf;\n\t\n\t      conf.delimiter && (this.delimiter = conf.delimiter);\n\t      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t      conf.wildcard && (this.wildcard = conf.wildcard);\n\t      conf.newListener && (this.newListener = conf.newListener);\n\t\n\t      if (this.wildcard) {\n\t        this.listenerTree = {};\n\t      }\n\t    }\n\t  }\n\t\n\t  function EventEmitter(conf) {\n\t    this._events = {};\n\t    this.newListener = false;\n\t    configure.call(this, conf);\n\t  }\n\t\n\t  //\n\t  // Attention, function return type now is array, always !\n\t  // It has zero elements if no any matches found and one or more\n\t  // elements (leafs) if there are matches\n\t  //\n\t  function searchListenerTree(handlers, type, tree, i) {\n\t    if (!tree) {\n\t      return [];\n\t    }\n\t    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n\t        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n\t    if (i === typeLength && tree._listeners) {\n\t      //\n\t      // If at the end of the event(s) list and the tree has listeners\n\t      // invoke those listeners.\n\t      //\n\t      if (typeof tree._listeners === 'function') {\n\t        handlers && handlers.push(tree._listeners);\n\t        return [tree];\n\t      } else {\n\t        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t          handlers && handlers.push(tree._listeners[leaf]);\n\t        }\n\t        return [tree];\n\t      }\n\t    }\n\t\n\t    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n\t      //\n\t      // If the event emitted is '*' at this part\n\t      // or there is a concrete match at this patch\n\t      //\n\t      if (currentType === '*') {\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n\t          }\n\t        }\n\t        return listeners;\n\t      } else if(currentType === '**') {\n\t        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n\t        if(endReached && tree._listeners) {\n\t          // The next element has a _listeners, add it to the handlers.\n\t          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t        }\n\t\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            if(branch === '*' || branch === '**') {\n\t              if(tree[branch]._listeners && !endReached) {\n\t                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t              }\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            } else if(branch === nextType) {\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n\t            } else {\n\t              // No match on this one, shift into the tree but not in the type array.\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            }\n\t          }\n\t        }\n\t        return listeners;\n\t      }\n\t\n\t      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n\t    }\n\t\n\t    xTree = tree['*'];\n\t    if (xTree) {\n\t      //\n\t      // If the listener tree will allow any match for this part,\n\t      // then recursively explore all branches of the tree\n\t      //\n\t      searchListenerTree(handlers, type, xTree, i+1);\n\t    }\n\t\n\t    xxTree = tree['**'];\n\t    if(xxTree) {\n\t      if(i < typeLength) {\n\t        if(xxTree._listeners) {\n\t          // If we have a listener on a '**', it will catch all, so add its handler.\n\t          searchListenerTree(handlers, type, xxTree, typeLength);\n\t        }\n\t\n\t        // Build arrays of matching next branches and others.\n\t        for(branch in xxTree) {\n\t          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n\t            if(branch === nextType) {\n\t              // We know the next element will match, so jump twice.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+2);\n\t            } else if(branch === currentType) {\n\t              // Current node matches, move into the tree.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+1);\n\t            } else {\n\t              isolatedBranch = {};\n\t              isolatedBranch[branch] = xxTree[branch];\n\t              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n\t            }\n\t          }\n\t        }\n\t      } else if(xxTree._listeners) {\n\t        // We have reached the end and still on a '**'\n\t        searchListenerTree(handlers, type, xxTree, typeLength);\n\t      } else if(xxTree['*'] && xxTree['*']._listeners) {\n\t        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n\t      }\n\t    }\n\t\n\t    return listeners;\n\t  }\n\t\n\t  function growListenerTree(type, listener) {\n\t\n\t    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t\n\t    //\n\t    // Looks for two consecutive '**', if so, don't add the event at all.\n\t    //\n\t    for(var i = 0, len = type.length; i+1 < len; i++) {\n\t      if(type[i] === '**' && type[i+1] === '**') {\n\t        return;\n\t      }\n\t    }\n\t\n\t    var tree = this.listenerTree;\n\t    var name = type.shift();\n\t\n\t    while (name) {\n\t\n\t      if (!tree[name]) {\n\t        tree[name] = {};\n\t      }\n\t\n\t      tree = tree[name];\n\t\n\t      if (type.length === 0) {\n\t\n\t        if (!tree._listeners) {\n\t          tree._listeners = listener;\n\t        }\n\t        else if(typeof tree._listeners === 'function') {\n\t          tree._listeners = [tree._listeners, listener];\n\t        }\n\t        else if (isArray(tree._listeners)) {\n\t\n\t          tree._listeners.push(listener);\n\t\n\t          if (!tree._listeners.warned) {\n\t\n\t            var m = defaultMaxListeners;\n\t\n\t            if (typeof this._events.maxListeners !== 'undefined') {\n\t              m = this._events.maxListeners;\n\t            }\n\t\n\t            if (m > 0 && tree._listeners.length > m) {\n\t\n\t              tree._listeners.warned = true;\n\t              console.error('(node) warning: possible EventEmitter memory ' +\n\t                            'leak detected. %d listeners added. ' +\n\t                            'Use emitter.setMaxListeners() to increase limit.',\n\t                            tree._listeners.length);\n\t              console.trace();\n\t            }\n\t          }\n\t        }\n\t        return true;\n\t      }\n\t      name = type.shift();\n\t    }\n\t    return true;\n\t  }\n\t\n\t  // By default EventEmitters will print a warning if more than\n\t  // 10 listeners are added to it. This is a useful default which\n\t  // helps finding memory leaks.\n\t  //\n\t  // Obviously not all Emitters should be limited to 10. This function allows\n\t  // that to be increased. Set to zero for unlimited.\n\t\n\t  EventEmitter.prototype.delimiter = '.';\n\t\n\t  EventEmitter.prototype.setMaxListeners = function(n) {\n\t    this._events || init.call(this);\n\t    this._events.maxListeners = n;\n\t    if (!this._conf) this._conf = {};\n\t    this._conf.maxListeners = n;\n\t  };\n\t\n\t  EventEmitter.prototype.event = '';\n\t\n\t  EventEmitter.prototype.once = function(event, fn) {\n\t    this.many(event, 1, fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.many = function(event, ttl, fn) {\n\t    var self = this;\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('many only accepts instances of Function');\n\t    }\n\t\n\t    function listener() {\n\t      if (--ttl === 0) {\n\t        self.off(event, listener);\n\t      }\n\t      fn.apply(this, arguments);\n\t    }\n\t\n\t    listener._origin = fn;\n\t\n\t    this.on(event, listener);\n\t\n\t    return self;\n\t  };\n\t\n\t  EventEmitter.prototype.emit = function() {\n\t\n\t    this._events || init.call(this);\n\t\n\t    var type = arguments[0];\n\t\n\t    if (type === 'newListener' && !this.newListener) {\n\t      if (!this._events.newListener) { return false; }\n\t    }\n\t\n\t    // Loop through the *_all* functions and invoke them.\n\t    if (this._all) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t      for (i = 0, l = this._all.length; i < l; i++) {\n\t        this.event = type;\n\t        this._all[i].apply(this, args);\n\t      }\n\t    }\n\t\n\t    // If there is no 'error' event listener then throw.\n\t    if (type === 'error') {\n\t\n\t      if (!this._all &&\n\t        !this._events.error &&\n\t        !(this.wildcard && this.listenerTree.error)) {\n\t\n\t        if (arguments[1] instanceof Error) {\n\t          throw arguments[1]; // Unhandled 'error' event\n\t        } else {\n\t          throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t        }\n\t        return false;\n\t      }\n\t    }\n\t\n\t    var handler;\n\t\n\t    if(this.wildcard) {\n\t      handler = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      handler = this._events[type];\n\t    }\n\t\n\t    if (typeof handler === 'function') {\n\t      this.event = type;\n\t      if (arguments.length === 1) {\n\t        handler.call(this);\n\t      }\n\t      else if (arguments.length > 1)\n\t        switch (arguments.length) {\n\t          case 2:\n\t            handler.call(this, arguments[1]);\n\t            break;\n\t          case 3:\n\t            handler.call(this, arguments[1], arguments[2]);\n\t            break;\n\t          // slower\n\t          default:\n\t            var l = arguments.length;\n\t            var args = new Array(l - 1);\n\t            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t            handler.apply(this, args);\n\t        }\n\t      return true;\n\t    }\n\t    else if (handler) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t\n\t      var listeners = handler.slice();\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        this.event = type;\n\t        listeners[i].apply(this, args);\n\t      }\n\t      return (listeners.length > 0) || !!this._all;\n\t    }\n\t    else {\n\t      return !!this._all;\n\t    }\n\t\n\t  };\n\t\n\t  EventEmitter.prototype.on = function(type, listener) {\n\t\n\t    if (typeof type === 'function') {\n\t      this.onAny(type);\n\t      return this;\n\t    }\n\t\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('on only accepts instances of Function');\n\t    }\n\t    this._events || init.call(this);\n\t\n\t    // To avoid recursion in the case that type == \"newListeners\"! Before\n\t    // adding it to the listeners, first emit \"newListeners\".\n\t    this.emit('newListener', type, listener);\n\t\n\t    if(this.wildcard) {\n\t      growListenerTree.call(this, type, listener);\n\t      return this;\n\t    }\n\t\n\t    if (!this._events[type]) {\n\t      // Optimize the case of one listener. Don't need the extra array object.\n\t      this._events[type] = listener;\n\t    }\n\t    else if(typeof this._events[type] === 'function') {\n\t      // Adding the second element, need to change to array.\n\t      this._events[type] = [this._events[type], listener];\n\t    }\n\t    else if (isArray(this._events[type])) {\n\t      // If we've already got an array, just append.\n\t      this._events[type].push(listener);\n\t\n\t      // Check for listener leak\n\t      if (!this._events[type].warned) {\n\t\n\t        var m = defaultMaxListeners;\n\t\n\t        if (typeof this._events.maxListeners !== 'undefined') {\n\t          m = this._events.maxListeners;\n\t        }\n\t\n\t        if (m > 0 && this._events[type].length > m) {\n\t\n\t          this._events[type].warned = true;\n\t          console.error('(node) warning: possible EventEmitter memory ' +\n\t                        'leak detected. %d listeners added. ' +\n\t                        'Use emitter.setMaxListeners() to increase limit.',\n\t                        this._events[type].length);\n\t          console.trace();\n\t        }\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.onAny = function(fn) {\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('onAny only accepts instances of Function');\n\t    }\n\t\n\t    if(!this._all) {\n\t      this._all = [];\n\t    }\n\t\n\t    // Add the function to the event listener collection.\n\t    this._all.push(fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  EventEmitter.prototype.off = function(type, listener) {\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('removeListener only takes instances of Function');\n\t    }\n\t\n\t    var handlers,leafs=[];\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      // does not use listeners(), so no side effect of creating _events[type]\n\t      if (!this._events[type]) return this;\n\t      handlers = this._events[type];\n\t      leafs.push({_listeners:handlers});\n\t    }\n\t\n\t    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t      var leaf = leafs[iLeaf];\n\t      handlers = leaf._listeners;\n\t      if (isArray(handlers)) {\n\t\n\t        var position = -1;\n\t\n\t        for (var i = 0, length = handlers.length; i < length; i++) {\n\t          if (handlers[i] === listener ||\n\t            (handlers[i].listener && handlers[i].listener === listener) ||\n\t            (handlers[i]._origin && handlers[i]._origin === listener)) {\n\t            position = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (position < 0) {\n\t          continue;\n\t        }\n\t\n\t        if(this.wildcard) {\n\t          leaf._listeners.splice(position, 1);\n\t        }\n\t        else {\n\t          this._events[type].splice(position, 1);\n\t        }\n\t\n\t        if (handlers.length === 0) {\n\t          if(this.wildcard) {\n\t            delete leaf._listeners;\n\t          }\n\t          else {\n\t            delete this._events[type];\n\t          }\n\t        }\n\t        return this;\n\t      }\n\t      else if (handlers === listener ||\n\t        (handlers.listener && handlers.listener === listener) ||\n\t        (handlers._origin && handlers._origin === listener)) {\n\t        if(this.wildcard) {\n\t          delete leaf._listeners;\n\t        }\n\t        else {\n\t          delete this._events[type];\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.offAny = function(fn) {\n\t    var i = 0, l = 0, fns;\n\t    if (fn && this._all && this._all.length > 0) {\n\t      fns = this._all;\n\t      for(i = 0, l = fns.length; i < l; i++) {\n\t        if(fn === fns[i]) {\n\t          fns.splice(i, 1);\n\t          return this;\n\t        }\n\t      }\n\t    } else {\n\t      this._all = [];\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t\n\t  EventEmitter.prototype.removeAllListeners = function(type) {\n\t    if (arguments.length === 0) {\n\t      !this._events || init.call(this);\n\t      return this;\n\t    }\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t\n\t      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t        var leaf = leafs[iLeaf];\n\t        leaf._listeners = null;\n\t      }\n\t    }\n\t    else {\n\t      if (!this._events[type]) return this;\n\t      this._events[type] = null;\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.listeners = function(type) {\n\t    if(this.wildcard) {\n\t      var handlers = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t      return handlers;\n\t    }\n\t\n\t    this._events || init.call(this);\n\t\n\t    if (!this._events[type]) this._events[type] = [];\n\t    if (!isArray(this._events[type])) {\n\t      this._events[type] = [this._events[type]];\n\t    }\n\t    return this._events[type];\n\t  };\n\t\n\t  EventEmitter.prototype.listenersAny = function() {\n\t\n\t    if(this._all) {\n\t      return this._all;\n\t    }\n\t    else {\n\t      return [];\n\t    }\n\t\n\t  };\n\t\n\t  if (true) {\n\t     // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return EventEmitter;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    // CommonJS\n\t    exports.EventEmitter2 = EventEmitter;\n\t  }\n\t  else {\n\t    // Browser global.\n\t    window.EventEmitter2 = EventEmitter;\n\t  }\n\t}();\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {Promise: window['Promise']}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n\t * directory of this distribution and at\n\t * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n\t */\n\t;\n\t(function() {\n\t\n\t    /**\n\t     * Class for dimension change detection.\n\t     *\n\t     * @param {Element|Element[]|Elements|jQuery} element\n\t     * @param {Function} callback\n\t     *\n\t     * @constructor\n\t     */\n\t    var ResizeSensor = function(element, callback) {\n\t        /**\n\t         *\n\t         * @constructor\n\t         */\n\t        function EventQueue() {\n\t            this.q = [];\n\t            this.add = function(ev) {\n\t                this.q.push(ev);\n\t            };\n\t\n\t            var i, j;\n\t            this.call = function() {\n\t                for (i = 0, j = this.q.length; i < j; i++) {\n\t                    this.q[i].call();\n\t                }\n\t            };\n\t        }\n\t\n\t        /**\n\t         * @param {HTMLElement} element\n\t         * @param {String}      prop\n\t         * @returns {String|Number}\n\t         */\n\t        function getComputedStyle(element, prop) {\n\t            if (element.currentStyle) {\n\t                return element.currentStyle[prop];\n\t            } else if (window.getComputedStyle) {\n\t                return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t            } else {\n\t                return element.style[prop];\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @param {Function}    resized\n\t         */\n\t        function attachResizeEvent(element, resized) {\n\t            if (!element.resizedAttached) {\n\t                element.resizedAttached = new EventQueue();\n\t                element.resizedAttached.add(resized);\n\t            } else if (element.resizedAttached) {\n\t                element.resizedAttached.add(resized);\n\t                return;\n\t            }\n\t\n\t            element.resizeSensor = document.createElement('div');\n\t            element.resizeSensor.className = 'resize-sensor';\n\t            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n\t            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\t\n\t            element.resizeSensor.style.cssText = style;\n\t            element.resizeSensor.innerHTML =\n\t                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + '\"></div>' +\n\t                '</div>' +\n\t                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n\t                '</div>';\n\t            element.appendChild(element.resizeSensor);\n\t\n\t            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n\t                element.style.position = 'relative';\n\t            }\n\t\n\t            var expand = element.resizeSensor.childNodes[0];\n\t            var expandChild = expand.childNodes[0];\n\t            var shrink = element.resizeSensor.childNodes[1];\n\t            var shrinkChild = shrink.childNodes[0];\n\t\n\t            var lastWidth, lastHeight;\n\t\n\t            var reset = function() {\n\t                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n\t                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n\t                expand.scrollLeft = expand.scrollWidth;\n\t                expand.scrollTop = expand.scrollHeight;\n\t                shrink.scrollLeft = shrink.scrollWidth;\n\t                shrink.scrollTop = shrink.scrollHeight;\n\t                lastWidth = element.offsetWidth;\n\t                lastHeight = element.offsetHeight;\n\t            };\n\t\n\t            reset();\n\t\n\t            var changed = function() {\n\t                if (element.resizedAttached) {\n\t                    element.resizedAttached.call();\n\t                }\n\t            };\n\t\n\t            var addEvent = function(el, name, cb) {\n\t                if (el.attachEvent) {\n\t                    el.attachEvent('on' + name, cb);\n\t                } else {\n\t                    el.addEventListener(name, cb);\n\t                }\n\t            };\n\t\n\t            var onScroll = function() {\n\t              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                  changed();\n\t              }\n\t              reset();\n\t            };\n\t\n\t            addEvent(expand, 'scroll', onScroll);\n\t            addEvent(shrink, 'scroll', onScroll);\n\t        }\n\t\n\t        var elementType = Object.prototype.toString.call(element);\n\t        var isCollectionTyped = ('[object Array]' === elementType\n\t            || ('[object NodeList]' === elementType)\n\t            || ('[object HTMLCollection]' === elementType)\n\t            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n\t            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n\t        );\n\t\n\t        if (isCollectionTyped) {\n\t            var i = 0, j = element.length;\n\t            for (; i < j; i++) {\n\t                attachResizeEvent(element[i], callback);\n\t            }\n\t        } else {\n\t            attachResizeEvent(element, callback);\n\t        }\n\t\n\t        this.detach = function() {\n\t            if (isCollectionTyped) {\n\t                var i = 0, j = element.length;\n\t                for (; i < j; i++) {\n\t                    ResizeSensor.detach(element[i]);\n\t                }\n\t            } else {\n\t                ResizeSensor.detach(element);\n\t            }\n\t        };\n\t    };\n\t\n\t    ResizeSensor.detach = function(element) {\n\t        if (element.resizeSensor) {\n\t            element.removeChild(element.resizeSensor);\n\t            delete element.resizeSensor;\n\t            delete element.resizedAttached;\n\t        }\n\t    };\n\t\n\t    // make available to common module loader\n\t    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t        module.exports = ResizeSensor;\n\t    }\n\t    else {\n\t        window.ResizeSensor = ResizeSensor;\n\t    }\n\t\n\t})();\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(5);\r\n\t/**\r\n\t * this class uses as proxy for EventEmitter2\r\n\t */\r\n\tvar EventEmitter = (function () {\r\n\t    function EventEmitter() {\r\n\t        this.ee = new deps_1.EE2();\r\n\t    }\r\n\t    EventEmitter.prototype.emit = function (eventName) {\r\n\t        var args = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            args[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        (_a = this.ee).emit.apply(_a, [eventName].concat(args));\r\n\t        var _a;\r\n\t    };\r\n\t    EventEmitter.prototype.on = function (eventName, callback) {\r\n\t        return this.ee.on(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.off = function (eventName, callback) {\r\n\t        return this.ee.off(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.subscribe = function (eventName, callback) {\r\n\t        var _this = this;\r\n\t        this.on(eventName, callback);\r\n\t        return function () { return _this.off(eventName, callback); };\r\n\t    };\r\n\t    EventEmitter.prototype.setMaxListeners = function (listenersCount) {\r\n\t        this.ee.setMaxListeners(listenersCount);\r\n\t    };\r\n\t    EventEmitter.prototype.removeAllListeners = function (eventName) {\r\n\t        this.ee.removeAllListeners(eventName);\r\n\t    };\r\n\t    return EventEmitter;\r\n\t}());\r\n\texports.EventEmitter = EventEmitter;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendsManager_1 = __webpack_require__(16);\r\n\tvar Screen_1 = __webpack_require__(17);\r\n\tvar AxisMarks_1 = __webpack_require__(18);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tvar CHART_STATE_EVENTS = {\r\n\t    INITIAL_STATE_APPLIED: 'initialStateApplied',\r\n\t    READY: 'ready',\r\n\t    DESTROY: 'destroy',\r\n\t    CHANGE: 'change',\r\n\t    TREND_CHANGE: 'trendChange',\r\n\t    TRENDS_CHANGE: 'trendsChange',\r\n\t    ZOOM: 'zoom',\r\n\t    RESIZE: 'resize',\r\n\t    SCROLL: 'scroll',\r\n\t    SCROLL_STOP: 'scrollStop',\r\n\t    PLUGINS_STATE_CHANGED: 'pluginsStateChanged'\r\n\t};\r\n\tvar LIGHT_BLUE = '#5273bd';\r\n\t/**\r\n\t *  all state changes caused only by Chart.setState method\r\n\t */\r\n\tvar Chart = (function () {\r\n\t    function Chart(initialState, plugins) {\r\n\t        if (plugins === void 0) { plugins = []; }\r\n\t        this.state = {\r\n\t            prevState: {},\r\n\t            zoom: 0,\r\n\t            xAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.ALL,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    scroll: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 0, end: 5 },\r\n\t                    margin: { start: 0, end: 5 }\r\n\t                },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                grid: { enabled: true, minSizePx: 100, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                autoScroll: true,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            yAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 5, end: 5 },\r\n\t                    margin: { start: 5, end: 5 },\r\n\t                },\r\n\t                grid: { enabled: true, minSizePx: 50, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            animations: {\r\n\t                enabled: true,\r\n\t                trendChangeSpeed: 0.5,\r\n\t                trendChangeEase: void 0,\r\n\t                zoomSpeed: 0.25,\r\n\t                zoomEase: void 0,\r\n\t                scrollSpeed: 0.5,\r\n\t                scrollEase: Linear.easeNone,\r\n\t                autoScrollSpeed: 1,\r\n\t                autoScrollEase: Linear.easeNone,\r\n\t            },\r\n\t            autoRender: { enabled: true, fps: 0 },\r\n\t            autoResize: true,\r\n\t            renderer: 'WebGLRenderer',\r\n\t            autoScroll: true,\r\n\t            controls: { enabled: true },\r\n\t            trendDefaultState: {\r\n\t                enabled: true,\r\n\t                type: Trend_1.TREND_TYPE.LINE,\r\n\t                data: [],\r\n\t                maxSegmentLength: 1000,\r\n\t                lineWidth: 2,\r\n\t                lineColor: 0xFFFFFF,\r\n\t                hasBackground: true,\r\n\t                backgroundColor: 'rgba(#FFFFFF, 0.07)',\r\n\t                hasBeacon: false,\r\n\t                settingsForTypes: {\r\n\t                    CANDLE: {\r\n\t                        minSegmentLengthInPx: 20,\r\n\t                        maxSegmentLengthInPx: 40,\r\n\t                    },\r\n\t                    LINE: {\r\n\t                        minSegmentLengthInPx: 2,\r\n\t                        maxSegmentLengthInPx: 10,\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            cursor: {\r\n\t                dragMode: false,\r\n\t                x: 0,\r\n\t                y: 0\r\n\t            },\r\n\t            font: {\r\n\t                s: '11px Arial',\r\n\t                m: '12px Arial',\r\n\t                l: '13px Arial'\r\n\t            },\r\n\t            backgroundColor: 0x000c2a,\r\n\t            showStats: false,\r\n\t            pluginsState: {},\r\n\t            eventEmitterMaxListeners: 20,\r\n\t            maxVisibleSegments: 1280\r\n\t        };\r\n\t        this.plugins = {};\r\n\t        /**\r\n\t         * true then state was initialized and ready to use\r\n\t         */\r\n\t        this.isReady = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, initialState);\r\n\t        this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\r\n\t        initialState.trends = this.trendsManager.calculatedOptions;\r\n\t        initialState = this.installPlugins(plugins, initialState);\r\n\t        this.setState(initialState);\r\n\t        this.setState({ computedData: this.getComputedData() });\r\n\t        this.savePrevState();\r\n\t        this.screen = new Screen_1.Screen(this);\r\n\t        this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\r\n\t        this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\r\n\t        this.initListeners();\r\n\t        // message to other modules that Chart.state is ready for use\r\n\t        this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\r\n\t        // message to other modules that Chart is ready for use\r\n\t        this.isReady = true;\r\n\t        this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\r\n\t    }\r\n\t    /**\r\n\t     * destroy state, use ChartView.destroy to completely destroy state\r\n\t     */\r\n\t    Chart.prototype.destroy = function () {\r\n\t        this.ee.emit(CHART_STATE_EVENTS.DESTROY);\r\n\t        this.ee.removeAllListeners();\r\n\t        this.state = {};\r\n\t    };\r\n\t    Chart.prototype.onDestroy = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\r\n\t    };\r\n\t    Chart.prototype.onInitialStateApplied = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\r\n\t    };\r\n\t    Chart.prototype.onReady = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\r\n\t    };\r\n\t    Chart.prototype.onChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendsChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onScrollStop = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\r\n\t    };\r\n\t    Chart.prototype.onScroll = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\r\n\t    };\r\n\t    Chart.prototype.onZoom = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\r\n\t    };\r\n\t    Chart.prototype.onResize = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\r\n\t    };\r\n\t    Chart.prototype.onPluginsStateChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\r\n\t    };\r\n\t    Chart.prototype.getTrend = function (trendName) {\r\n\t        return this.trendsManager.getTrend(trendName);\r\n\t    };\r\n\t    Chart.prototype.setState = function (newState, eventData, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var stateData = this.state;\r\n\t        var newStateObj = newState;\r\n\t        var changedProps = {};\r\n\t        for (var key in newStateObj) {\r\n\t            if (stateData[key] !== newStateObj[key]) {\r\n\t                changedProps[key] = newStateObj[key];\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(changedProps);\r\n\t        // temporary remove trends state from newState by performance reasons\r\n\t        var trendsData = {};\r\n\t        if (newState.trends)\r\n\t            for (var trendName in newState.trends) {\r\n\t                var trendOptions = newState.trends[trendName];\r\n\t                if (trendOptions.data)\r\n\t                    trendsData[trendName] = trendOptions.data;\r\n\t                delete trendOptions.data;\r\n\t            }\r\n\t        var newStateContainsData = Object.keys(trendsData).length > 0;\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, newState, false);\r\n\t        // return state to state\r\n\t        if (newStateContainsData)\r\n\t            for (var trendName in trendsData) {\r\n\t                this.state.trends[trendName].data = trendsData[trendName];\r\n\t            }\r\n\t        if (silent)\r\n\t            return;\r\n\t        // recalculate all dynamic state props\r\n\t        var recalculateResult = this.recalculateState(changedProps);\r\n\t        changedProps = recalculateResult.changedProps;\r\n\t        this.emitChangedStateEvents(changedProps, eventData);\r\n\t    };\r\n\t    /**\r\n\t     * recalculate all computed state props\r\n\t     */\r\n\t    Chart.prototype.recalculateState = function (changedProps) {\r\n\t        var data = this.state;\r\n\t        var patch = {};\r\n\t        var actualData = Utils_1.Utils.deepMerge({}, data);\r\n\t        // recalculate scroll position by changed cursor options\r\n\t        var cursorOptions = changedProps.cursor;\r\n\t        var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\r\n\t        if (isMouseDrag) {\r\n\t            var oldX = data.prevState.cursor.x;\r\n\t            var currentX = cursorOptions.x;\r\n\t            var currentScroll = data.xAxis.range.scroll;\r\n\t            var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\r\n\t            patch.xAxis = { range: { scroll: currentScroll + deltaXVal } };\r\n\t            actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: patch.xAxis });\r\n\t        }\r\n\t        var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\r\n\t        var scrollXChanged = false;\r\n\t        var needToRecalculateXAxis = (isMouseDrag ||\r\n\t            chartWasResized ||\r\n\t            (changedProps.xAxis && (changedProps.xAxis.range)) ||\r\n\t            this.state.xAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateXAxis) {\r\n\t            var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\r\n\t            if (xAxisPatch) {\r\n\t                scrollXChanged = true;\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { xAxis: xAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: xAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        // recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\r\n\t        var needToRecalculateYAxis = (chartWasResized ||\r\n\t            (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END ||\r\n\t                data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO ||\r\n\t                data.yAxis.range.isMirrorMode) &&\r\n\t                (scrollXChanged || changedProps.trends || changedProps.yAxis) ||\r\n\t            this.state.yAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateYAxis) {\r\n\t            var yAxisPatch = this.recalculateYAxis(actualData);\r\n\t            if (yAxisPatch) {\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { yAxis: yAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { yAxis: yAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(patch);\r\n\t        var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\r\n\t        patch.computedData = this.getComputedData(allChangedProps);\r\n\t        this.savePrevState(patch);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, patch);\r\n\t        return { changedProps: allChangedProps, patch: patch };\r\n\t    };\r\n\t    Chart.prototype.getComputedData = function (changedProps) {\r\n\t        var computeAll = !changedProps;\r\n\t        var computedData = {};\r\n\t        if (computeAll || changedProps.trends && this.trendsManager) {\r\n\t            computedData.trends = {\r\n\t                maxXVal: this.trendsManager.getEndXVal(),\r\n\t                minXVal: this.trendsManager.getStartXVal()\r\n\t            };\r\n\t        }\r\n\t        return computedData;\r\n\t    };\r\n\t    Chart.prototype.savePrevState = function (changedProps) {\r\n\t        if (!changedProps)\r\n\t            changedProps = this.state;\r\n\t        var prevState = this.state.prevState;\r\n\t        // prevent to store prev trend state by performance reasons\r\n\t        Utils_1.Utils.copyProps(this.state, prevState, changedProps, ['trends']);\r\n\t    };\r\n\t    Chart.prototype.emitChangedStateEvents = function (changedProps, eventData) {\r\n\t        var prevState = this.state.prevState;\r\n\t        // emit common change event\r\n\t        this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\r\n\t        // emit event for each changed state property\r\n\t        for (var key in changedProps) {\r\n\t            this.ee.emit(key + 'Change', changedProps[key], eventData);\r\n\t        }\r\n\t        if (!this.isReady)\r\n\t            return;\r\n\t        // emit special events based on changed state\r\n\t        var scrollStopEventNeeded = (changedProps.cursor &&\r\n\t            changedProps.cursor.dragMode === false &&\r\n\t            prevState.cursor.dragMode === true);\r\n\t        scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\r\n\t        var scrollChangeEventsNeeded = (changedProps.xAxis &&\r\n\t            changedProps.xAxis.range &&\r\n\t            changedProps.xAxis.range.scroll !== void 0);\r\n\t        scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\r\n\t        var zoomEventsNeeded = ((changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\r\n\t            (changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom));\r\n\t        zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\r\n\t        var resizeEventNeeded = (changedProps.width || changedProps.height);\r\n\t        resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\r\n\t        var pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\r\n\t        pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\r\n\t    };\r\n\t    /**\r\n\t     * init plugins and save plugins options in initialState\r\n\t     */\r\n\t    Chart.prototype.installPlugins = function (plugins, initialState) {\r\n\t        var _this = this;\r\n\t        initialState.pluginsState = {};\r\n\t        plugins.forEach(function (plugin) {\r\n\t            var PluginClass = plugin.constructor;\r\n\t            var pluginName = PluginClass.NAME;\r\n\t            initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\r\n\t            _this.plugins[pluginName] = plugin;\r\n\t            plugin.setupChart(_this);\r\n\t        });\r\n\t        return initialState;\r\n\t    };\r\n\t    /**\r\n\t     * returns plugin instance by plugin name\r\n\t     * @example\r\n\t     */\r\n\t    Chart.prototype.getPlugin = function (pluginName) {\r\n\t        return this.plugins[pluginName];\r\n\t    };\r\n\t    Chart.prototype.initListeners = function () {\r\n\t        var _this = this;\r\n\t        this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function (changedTrends, newData) {\r\n\t            _this.handleTrendsChange(changedTrends, newData);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.handleTrendsChange = function (changedTrends, newData) {\r\n\t        for (var trendName in changedTrends) {\r\n\t            this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\r\n\t        }\r\n\t    };\r\n\t    Chart.prototype.recalculateXAxis = function (actualData, changedProps) {\r\n\t        var axisRange = actualData.xAxis.range;\r\n\t        var patch = { range: {} };\r\n\t        var isInitialize = axisRange.zeroVal == void 0;\r\n\t        var zeroVal, scaleFactor;\r\n\t        var zoom = axisRange.zoom;\r\n\t        if (axisRange.isMirrorMode) {\r\n\t            Utils_1.Utils.error('range.isMirrorMode available only for yAxis.range');\r\n\t        }\r\n\t        if (isInitialize) {\r\n\t            zeroVal = axisRange.from;\r\n\t            scaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t        }\r\n\t        else {\r\n\t            zeroVal = axisRange.zeroVal;\r\n\t            scaleFactor = axisRange.scaleFactor;\r\n\t            // recalculate range.zoom and range.scroll then range.from or range.to was changed\r\n\t            if (changedProps.xAxis &&\r\n\t                (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\r\n\t                if (changedProps.xAxis.range.zoom) {\r\n\t                    Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\r\n\t                }\r\n\t                var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t                patch.range.scroll = axisRange.from - zeroVal;\r\n\t                patch.range.zoom = currentScaleFactor / scaleFactor;\r\n\t                return patch;\r\n\t            }\r\n\t        }\r\n\t        // recalculate range.from and range.to then range.zoom or range.scroll was changed\r\n\t        do {\r\n\t            var from = zeroVal + axisRange.scroll;\r\n\t            var to = from + actualData.width / (scaleFactor * zoom);\r\n\t            var rangeLength = to - from;\r\n\t            var needToRecalculateZoom = false;\r\n\t            var rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\r\n\t            var rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\r\n\t            needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\r\n\t            if (needToRecalculateZoom) {\r\n\t                var fixScale = rangeLength > axisRange.maxLength ?\r\n\t                    rangeLength / axisRange.maxLength :\r\n\t                    rangeLength / axisRange.minLength;\r\n\t                var zoom = zoom * fixScale;\r\n\t                patch.range.zoom = zoom;\r\n\t            }\r\n\t        } while (needToRecalculateZoom);\r\n\t        patch.range.from = from;\r\n\t        patch.range.to = to;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.recalculateYAxis = function (actualData) {\r\n\t        var patch = { range: {} };\r\n\t        var yAxisRange = actualData.yAxis.range;\r\n\t        var isInitialize = yAxisRange.scaleFactor == void 0;\r\n\t        var trends = this.trendsManager;\r\n\t        var trendsEndXVal = trends.getEndXVal();\r\n\t        var trendsStartXVal = trends.getStartXVal();\r\n\t        var xRange = actualData.xAxis.range;\r\n\t        var xFrom = xRange.from, xTo = xRange.to;\r\n\t        var xRangeLength = xTo - xFrom;\r\n\t        var zeroVal, scaleFactor, scroll, zoom, needToZoom;\r\n\t        // check situation when state was scrolled behind trends end or before trends start\r\n\t        if (xTo > trendsEndXVal) {\r\n\t            xTo = trendsEndXVal;\r\n\t            xFrom = xTo - xRangeLength;\r\n\t        }\r\n\t        else if (xFrom < trendsStartXVal) {\r\n\t            xFrom = trendsStartXVal;\r\n\t            xTo = xFrom + xRangeLength;\r\n\t        }\r\n\t        var maxY = trends.getMaxYVal(xFrom, xTo);\r\n\t        var minY = trends.getMinYVal(xFrom, xTo);\r\n\t        var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\r\n\t        if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\r\n\t            if (trendLastY > maxY)\r\n\t                maxY = trendLastY;\r\n\t            if (trendLastY < minY)\r\n\t                minY = trendLastY;\r\n\t        }\r\n\t        if (yAxisRange.isMirrorMode) {\r\n\t            if (yAxisRange.zeroVal == void 0)\r\n\t                Utils_1.Utils.error('range.zeroVal must be set when range.isMirrorMode');\r\n\t            var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\r\n\t            var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\r\n\t            var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\r\n\t            maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\r\n\t            minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\r\n\t        }\r\n\t        var margin = yAxisRange.margin;\r\n\t        var padding = {\r\n\t            start: yAxisRange.padding.start + margin.start,\r\n\t            end: yAxisRange.padding.end + margin.end\r\n\t        };\r\n\t        if (padding.end + padding.start >= actualData.height) {\r\n\t            Utils_1.Utils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\r\n\t        }\r\n\t        var rangeLength = maxY - minY;\r\n\t        var paddingTopInPercents = padding.end / actualData.height;\r\n\t        var paddingBottomInPercents = padding.start / actualData.height;\r\n\t        var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\r\n\t        var visibleRangeLength = rangeLength / rangeLengthInPercents;\r\n\t        var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\r\n\t        var toVal = maxY + visibleRangeLength * paddingTopInPercents;\r\n\t        if (isInitialize) {\r\n\t            zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\r\n\t            scaleFactor = actualData.height / (toVal - fromVal);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t            needToZoom = true;\r\n\t        }\r\n\t        else {\r\n\t            scaleFactor = yAxisRange.scaleFactor;\r\n\t            zeroVal = yAxisRange.zeroVal;\r\n\t            var maxScreenY = Math.round(this.getScreenYByValue(maxY));\r\n\t            var minScreenY = Math.round(this.getScreenYByValue(minY));\r\n\t            needToZoom = (maxScreenY > actualData.height - margin.end ||\r\n\t                maxScreenY < actualData.height - padding.end ||\r\n\t                minScreenY < margin.start ||\r\n\t                minScreenY > padding.start);\r\n\t        }\r\n\t        if (!needToZoom)\r\n\t            return null;\r\n\t        scroll = fromVal - zeroVal;\r\n\t        zoom = (actualData.height / (toVal - fromVal)) / scaleFactor;\r\n\t        var currentAxisRange = this.state.yAxis.range;\r\n\t        if (currentAxisRange.from !== fromVal)\r\n\t            patch.range.from = fromVal;\r\n\t        if (currentAxisRange.to !== toVal)\r\n\t            patch.range.to = toVal;\r\n\t        if (currentAxisRange.scroll !== scroll)\r\n\t            patch.range.scroll = scroll;\r\n\t        if (currentAxisRange.zoom !== zoom)\r\n\t            patch.range.zoom = zoom;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.zoom = function (zoomValue, origin) {\r\n\t        var _this = this;\r\n\t        if (origin === void 0) { origin = 0.5; }\r\n\t        var _a = this.state.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\r\n\t        var newZoom = zoom * zoomValue;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        var nextRange = this.state.width / (scaleFactor * newZoom);\r\n\t        var newScroll = scroll + (currentRange - nextRange) * origin;\r\n\t        this.setState({ xAxis: { range: { zoom: newZoom, scroll: newScroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.zoomSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.zoomToRange = function (range, origin) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        return this.zoom(currentRange / range, origin);\r\n\t    };\r\n\t    Chart.prototype.scrollToEnd = function () {\r\n\t        var _this = this;\r\n\t        var state = this.state;\r\n\t        var endXVal = this.trendsManager.getEndXVal();\r\n\t        var range = state.xAxis.range;\r\n\t        var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\r\n\t        this.setState({ xAxis: { range: { scroll: scroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.scrollSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to xVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to yVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Chart.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns x value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenX = function (x) {\r\n\t        var _a = this.state.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenY = function (y) {\r\n\t        var _a = this.state.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen x value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenYByValue = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByYAxis(yVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Chart.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    Chart.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    Chart.prototype.getScreenLeftVal = function () {\r\n\t        return this.getValueByScreenX(0);\r\n\t    };\r\n\t    Chart.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.state.width);\r\n\t    };\r\n\t    Chart.prototype.getPaddingRight = function () {\r\n\t        return this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\r\n\t    };\r\n\t    return Chart;\r\n\t}());\r\n\texports.Chart = Chart;\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendSegmentsManager_1 = __webpack_require__(15);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar deps_1 = __webpack_require__(5);\r\n\tvar EVENTS = {\r\n\t    CHANGE: 'Change',\r\n\t    PREPEND_REQUEST: 'prependRequest'\r\n\t};\r\n\t(function (TREND_TYPE) {\r\n\t    TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\r\n\t    TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\r\n\t})(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\r\n\tvar TREND_TYPE = exports.TREND_TYPE;\r\n\tvar Trend = (function () {\r\n\t    function Trend(chartState, trendName, initialState) {\r\n\t        this.minXVal = Infinity;\r\n\t        this.minYVal = Infinity;\r\n\t        this.maxXVal = -Infinity;\r\n\t        this.maxYVal = -Infinity;\r\n\t        var options = initialState.trends[trendName];\r\n\t        this.name = trendName;\r\n\t        this.chartState = chartState;\r\n\t        this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.state.trendDefaultState, options);\r\n\t        this.calculatedOptions.name = trendName;\r\n\t        if (options.dataset)\r\n\t            this.calculatedOptions.data = Trend.prepareData(options.dataset);\r\n\t        this.calculatedOptions.dataset = [];\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    Trend.prototype.onInitialStateApplied = function () {\r\n\t        this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\r\n\t    };\r\n\t    Trend.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var chartState = this.chartState;\r\n\t        chartState.onInitialStateApplied(function () { return _this.onInitialStateApplied(); });\r\n\t        chartState.onScrollStop(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onZoom(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onTrendChange(function (trendName, changedOptions, newData) { return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData); });\r\n\t        chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    Trend.prototype.getCalculatedOptions = function () {\r\n\t        return this.calculatedOptions;\r\n\t    };\r\n\t    Trend.prototype.appendData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData());\r\n\t        var updatedTrendData = options.data.concat(newData);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.prependData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData(), true);\r\n\t        var updatedTrendData = newData.concat(options.data);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.changeData = function (allData, newData) {\r\n\t        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\r\n\t            var item = newData_1[_i];\r\n\t            if (item.xVal < this.minXVal)\r\n\t                this.minXVal = item.xVal;\r\n\t            if (item.xVal > this.maxXVal)\r\n\t                this.maxXVal = item.xVal;\r\n\t            if (item.yVal < this.minYVal)\r\n\t                this.minYVal = item.yVal;\r\n\t            if (item.yVal > this.maxYVal)\r\n\t                this.maxYVal = item.yVal;\r\n\t        }\r\n\t        var options = this.getOptions();\r\n\t        var statePatch = { trends: (_a = {}, _a[options.name] = { data: allData }, _a) };\r\n\t        this.chartState.setState(statePatch, newData);\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.getData = function (fromX, toX) {\r\n\t        var data = this.getOptions().data;\r\n\t        if (fromX == void 0 && toX == void 0)\r\n\t            return data;\r\n\t        fromX = fromX !== void 0 ? fromX : data[0].xVal;\r\n\t        toX = toX !== void 0 ? toX : data[data.length].xVal;\r\n\t        var filteredData = [];\r\n\t        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\r\n\t            var item = data_1[_i];\r\n\t            if (item.xVal < fromX)\r\n\t                continue;\r\n\t            if (item.xVal > toX)\r\n\t                break;\r\n\t            filteredData.push(item);\r\n\t        }\r\n\t        return filteredData;\r\n\t    };\r\n\t    Trend.prototype.getFirstItem = function () {\r\n\t        return this.getOptions().data[0];\r\n\t    };\r\n\t    Trend.prototype.getLastItem = function () {\r\n\t        var data = this.getOptions().data;\r\n\t        return data[data.length - 1];\r\n\t    };\r\n\t    Trend.prototype.getOptions = function () {\r\n\t        return this.chartState.state.trends[this.name];\r\n\t    };\r\n\t    Trend.prototype.setOptions = function (options) {\r\n\t        this.chartState.setState({ trends: (_a = {}, _a[this.name] = options, _a) });\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.onPrependRequest = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.PREPEND_REQUEST, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for Chart.onTrendChange\r\n\t     */\r\n\t    Trend.prototype.onChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.CHANGE, cb);\r\n\t        return function () { _this.ee.off(EVENTS.CHANGE, cb); };\r\n\t    };\r\n\t    Trend.prototype.onDataChange = function (cb) {\r\n\t        var _this = this;\r\n\t        var onChangeCb = function (changedOptions, newData) {\r\n\t            if (newData)\r\n\t                cb(newData);\r\n\t        };\r\n\t        this.ee.on(EVENTS.CHANGE, onChangeCb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.CHANGE, onChangeCb);\r\n\t        };\r\n\t    };\r\n\t    Trend.prototype.checkForPrependRequest = function () {\r\n\t        var _this = this;\r\n\t        if (this.prependRequest)\r\n\t            return;\r\n\t        var chartState = this.chartState;\r\n\t        var minXVal = chartState.state.computedData.trends.minXVal;\r\n\t        var minScreenX = chartState.getScreenXByValue(minXVal);\r\n\t        var needToRequest = minScreenX > 0;\r\n\t        var _a = chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var requestedDataLength = to - from;\r\n\t        if (!needToRequest)\r\n\t            return;\r\n\t        this.prependRequest = new deps_1.Promise(function (resolve, reject) {\r\n\t            _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\r\n\t        });\r\n\t        this.prependRequest.then(function (newData) {\r\n\t            _this.prependData(newData);\r\n\t            _this.prependRequest = null;\r\n\t        }, function () {\r\n\t            _this.prependRequest = null;\r\n\t        });\r\n\t    };\r\n\t    Trend.prepareData = function (newData, currentData, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var data = [];\r\n\t        if (typeof newData[0] == 'number') {\r\n\t            currentData = currentData || [];\r\n\t            var initialItem = void 0;\r\n\t            var xVal = void 0;\r\n\t            if (isPrepend) {\r\n\t                initialItem = currentData[0];\r\n\t                xVal = initialItem.xVal - newData.length;\r\n\t            }\r\n\t            else {\r\n\t                initialItem = currentData[currentData.length - 1];\r\n\t                xVal = initialItem ? initialItem.xVal + 1 : 0;\r\n\t            }\r\n\t            for (var _i = 0, _a = newData; _i < _a.length; _i++) {\r\n\t                var yVal = _a[_i];\r\n\t                data.push({ xVal: xVal, yVal: yVal, id: Utils_1.Utils.getUid() });\r\n\t                xVal++;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            data = newData;\r\n\t        }\r\n\t        return data;\r\n\t    };\r\n\t    return Trend;\r\n\t}());\r\n\texports.Trend = Trend;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar MAX_ANIMATED_SEGMENTS = 100;\r\n\tvar EVENTS = {\r\n\t    REBUILD: 'rebuild',\r\n\t    DISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\r\n\t    ANIMATION_FRAME: 'animationFrame'\r\n\t};\r\n\t/**\r\n\t *  Class helps to display and animate trends segments\r\n\t */\r\n\tvar TrendSegmentsManager = (function () {\r\n\t    function TrendSegmentsManager(chartState, trend) {\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.segmentsLength = 0;\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForPrepend = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.trend = trend;\r\n\t        this.maxSegmentLength = trend.getOptions().maxSegmentLength;\r\n\t        this.tryToRebuildSegments();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendSegmentsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.trend.onChange(function (changedOptions, newData) { return _this.onTrendChangeHandler(changedOptions, newData); });\r\n\t        this.chartState.onZoom(function () { return _this.onZoomHandler(); });\r\n\t        this.chartState.onScroll(function () { return _this.recalculateDisplayedRange(); });\r\n\t        this.chartState.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.appendAnimation && this.appendAnimation.kill();\r\n\t        this.prependAnimation && this.prependAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onZoomHandler = function () {\r\n\t        var segmentsRebuilded = this.tryToRebuildSegments();\r\n\t        if (!segmentsRebuilded) {\r\n\t            this.recalculateDisplayedRange();\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onTrendChangeHandler = function (changedOptions, newData) {\r\n\t        var needToRebuildSegments = (changedOptions.type != void 0 ||\r\n\t            changedOptions.maxSegmentLength != void 0);\r\n\t        if (needToRebuildSegments) {\r\n\t            this.tryToRebuildSegments(true);\r\n\t            return;\r\n\t        }\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var data = this.trend.getData();\r\n\t        var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t        isAppend ? this.appendData(newData) : this.prependData(newData);\r\n\t        this.recalculateDisplayedRange();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getSegment = function (id) {\r\n\t        return this.segmentsById[id];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getEndSegment = function () {\r\n\t        return this.segmentsById[this.endSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getStartSegment = function () {\r\n\t        return this.segmentsById[this.startSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.tryToRebuildSegments = function (force) {\r\n\t        if (force === void 0) { force = false; }\r\n\t        var options = this.trend.getOptions();\r\n\t        var trendTypeName = Trend_1.TREND_TYPE[options.type];\r\n\t        var trendTypesSettings = options.settingsForTypes;\r\n\t        var trendTypeSettings = trendTypesSettings[trendTypeName];\r\n\t        var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\r\n\t        var needToRebuild = this.segments.length === 0 || force;\r\n\t        var segmentLength = this.maxSegmentLength;\r\n\t        // call toFixed(2) to prevent floating segment error compare\r\n\t        var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\r\n\t        var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\r\n\t        if (currentSegmentLengthInPx < minSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\r\n\t        }\r\n\t        else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\r\n\t        }\r\n\t        if (!needToRebuild)\r\n\t            return false;\r\n\t        this.maxSegmentLength = segmentLength;\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.segmentsLength = 0;\r\n\t        this.stopAllAnimations();\r\n\t        this.appendData(null, true);\r\n\t        this.recalculateDisplayedRange(true);\r\n\t        this.ee.emit(EVENTS.REBUILD);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.stopAllAnimations = function () {\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        if (this.prependAnimation)\r\n\t            this.prependAnimation.kill();\r\n\t        if (this.appendAnimation)\r\n\t            this.appendAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.recalculateDisplayedRange = function (segmentsAreRebuilded) {\r\n\t        if (segmentsAreRebuilded === void 0) { segmentsAreRebuilded = false; }\r\n\t        var _a = this.chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\r\n\t        var displayedRange = to - from;\r\n\t        this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\r\n\t        this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\r\n\t        this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\r\n\t        this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\r\n\t        if (segmentsAreRebuilded)\r\n\t            return;\r\n\t        var displayedRangeChanged = (firstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\r\n\t            lastDisplayedSegment.id !== this.lastDisplayedSegment.id);\r\n\t        if (displayedRangeChanged)\r\n\t            this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\r\n\t    };\r\n\t    // getSegments(fromX?: number, toX?: number): TrendSegment[] {\r\n\t    // \tvar segments = this.segments;\r\n\t    // \tif (fromX == void 0 && toX == void 0) return segments;\r\n\t    // \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\r\n\t    // \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\r\n\t    // \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\r\n\t    // \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\r\n\t    // \treturn segments.slice(startSegmentInd, endSegmentInd);\r\n\t    // }\r\n\t    /**\r\n\t     * returns array of segments for values array\r\n\t     * values must be sorted!\r\n\t     */\r\n\t    TrendSegmentsManager.prototype.getSegmentsForXValues = function (values) {\r\n\t        var valueInd = 0;\r\n\t        var value = values[valueInd];\r\n\t        var lastValueInd = values.length - 1;\r\n\t        var results = [];\r\n\t        var segment = this.getStartSegment();\r\n\t        if (!segment.hasValue)\r\n\t            return [];\r\n\t        while (segment) {\r\n\t            while (value < segment.startXVal) {\r\n\t                results.push(void 0);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            while (value > segment.endXVal) {\r\n\t                segment = segment.getNext();\r\n\t                if (!segment)\r\n\t                    break;\r\n\t            }\r\n\t            var valueInPoint = (segment.startXVal == value || segment.endXVal == value ||\r\n\t                (segment.startXVal < value && segment.endXVal > value));\r\n\t            if (valueInPoint) {\r\n\t                results.push(segment);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            if (valueInd > lastValueInd)\r\n\t                break;\r\n\t        }\r\n\t        return results;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrame = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onRebuild = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.REBUILD, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDisplayedRangeChanged = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocateNextSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var prevSegment = this.segmentsById[this.endSegmentId];\r\n\t        if (prevSegment && prevSegment.hasValue) {\r\n\t            prevSegment.nextId = id;\r\n\t            segment.prevId = prevSegment.id;\r\n\t        }\r\n\t        this.endSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.push(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocatePrevSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var nextSegment = this.segmentsById[this.startSegmentId];\r\n\t        if (nextSegment && nextSegment.hasValue) {\r\n\t            nextSegment.prevId = id;\r\n\t            segment.nextId = nextSegment.id;\r\n\t        }\r\n\t        this.startSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.unshift(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.appendData = function (newData, needRebuildSegments) {\r\n\t        // WARNING: bottleneck method!\r\n\t        if (needRebuildSegments === void 0) { needRebuildSegments = false; }\r\n\t        // var t1 = performance.now();\r\n\t        var trendData = this.trend.getData();\r\n\t        if (needRebuildSegments) {\r\n\t            newData = trendData;\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t        }\r\n\t        var startItemInd = trendData.length - newData.length;\r\n\t        var segment = this.getEndSegment() || this.allocateNextSegment();\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        var itemInd = 0;\r\n\t        while (itemInd < newData.length) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.appendItem(item);\r\n\t            var isLastItem = itemInd == newData.length - 1;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd++;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForAppend.length > 0) {\r\n\t                    segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\r\n\t                    segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForAppend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocateNextSegment();\r\n\t            var prevItem = trendData[startItemInd + itemInd - 1];\r\n\t            segment.appendItem(prevItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        // var t2 = performance.now();\r\n\t        // console.log(t2 - t1);\r\n\t        // do not create animation if segments was rebuilded\r\n\t        if (needRebuildSegments) {\r\n\t            for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\r\n\t                var segmentId = _a[_i];\r\n\t                var segment_1 = this.segmentsById[segmentId];\r\n\t                segment_1.currentAnimationState = segment_1.createAnimationState();\r\n\t            }\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t            return;\r\n\t        }\r\n\t        if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time);\r\n\t    };\r\n\t    // TODO: refactor duplicated code from appendData\r\n\t    TrendSegmentsManager.prototype.prependData = function (newData) {\r\n\t        var trendData = this.trend.getData();\r\n\t        var segment = this.getStartSegment() || this.segmentsById[0];\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var itemInd = newData.length - 1;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        while (itemInd >= 0) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.prependItem(item);\r\n\t            var isLastItem = itemInd == 0;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd--;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForPrepend.length > 0) {\r\n\t                    segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\r\n\t                    segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForPrepend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocatePrevSegment();\r\n\t            var nextItem = trendData[itemInd + 1];\r\n\t            segment.prependItem(nextItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time, true);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.animate = function (time, isPrepend) {\r\n\t        var _this = this;\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\r\n\t        if ((animation && animation.isActive()) || time == 0) {\r\n\t            if (animation)\r\n\t                animation.kill();\r\n\t            this.onAnimationFrameHandler(1, isPrepend);\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            return;\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var ease = animationsOptions.trendChangeEase;\r\n\t        var objectToAnimate = { animationValue: 0 };\r\n\t        animation = TweenLite.to(objectToAnimate, time, { animationValue: 1, ease: ease });\r\n\t        animation.eventCallback('onUpdate', function () { return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend); });\r\n\t        animation.eventCallback('onComplete', function () {\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            _this.appendAnimation = null;\r\n\t        });\r\n\t        if (isPrepend) {\r\n\t            this.prependAnimation = animation;\r\n\t        }\r\n\t        else {\r\n\t            this.appendAnimation = animation;\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrameHandler = function (coefficient, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\r\n\t            var segmentId = animatedSegmentsIds_1[_i];\r\n\t            var segment = this.segmentsById[segmentId];\r\n\t            for (var key in segment.targetAnimationState) {\r\n\t                var targetValue = segment.targetAnimationState[key];\r\n\t                var initialValue = segment.initialAnimationState[key];\r\n\t                var currentValue = initialValue + (targetValue - initialValue) * coefficient;\r\n\t                segment.currentAnimationState[key] = currentValue;\r\n\t            }\r\n\t        }\r\n\t        this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\r\n\t        this.ee.emit(EVENTS.ANIMATION_FRAME, this);\r\n\t    };\r\n\t    return TrendSegmentsManager;\r\n\t}());\r\n\texports.TrendSegmentsManager = TrendSegmentsManager;\r\n\tvar TrendSegment = (function () {\r\n\t    function TrendSegment(trendPoints, id) {\r\n\t        this.isCompleted = false;\r\n\t        this.items = [];\r\n\t        this.initialAnimationState = {};\r\n\t        this.targetAnimationState = {};\r\n\t        this.currentAnimationState = {};\r\n\t        this.trendSegments = trendPoints;\r\n\t        this.id = id;\r\n\t        this.maxLength = trendPoints.maxSegmentLength;\r\n\t    }\r\n\t    TrendSegment.prototype.createAnimationState = function () {\r\n\t        var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\r\n\t        return {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal,\r\n\t            startXVal: startXVal,\r\n\t            startYVal: startYVal,\r\n\t            endXVal: endXVal,\r\n\t            endYVal: endYVal,\r\n\t            maxYVal: maxYVal,\r\n\t            minYVal: minYVal,\r\n\t            maxLength: maxLength\r\n\t        };\r\n\t    };\r\n\t    ;\r\n\t    TrendSegment.prototype.appendItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.push(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var startXVal = items[0].xVal;\r\n\t        if (item.xVal - startXVal > this.maxLength)\r\n\t            return false;\r\n\t        items.push(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.prependItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.unshift(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var endXVal = items[items.length - 1].xVal;\r\n\t        if (endXVal - item.xVal > this.maxLength)\r\n\t            return false;\r\n\t        items.unshift(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.complete = function () {\r\n\t        this.isCompleted = true;\r\n\t        this.recalculateItems();\r\n\t        this.items = []; // free memory for completed ranges\r\n\t    };\r\n\t    TrendSegment.prototype.recalculateItems = function () {\r\n\t        var items = this.items;\r\n\t        var itemsLength = items.length;\r\n\t        if (itemsLength === 0)\r\n\t            Utils_1.Utils.error('Unable to create TrendSegment without TrendItems');\r\n\t        var endItem = items[itemsLength - 1];\r\n\t        var endXVal = endItem.xVal, endYVal = endItem.yVal;\r\n\t        var startXVal, startYVal;\r\n\t        var startItem = items[0];\r\n\t        startXVal = startItem.xVal;\r\n\t        startYVal = startItem.yVal;\r\n\t        var minX = Math.min(startXVal, endXVal);\r\n\t        var maxX = Math.max(startXVal, endXVal);\r\n\t        var middleXVal = minX + (maxX - minX) / 2;\r\n\t        var minY = Math.min(startYVal, endYVal);\r\n\t        var maxY = Math.max(startYVal, endYVal);\r\n\t        var middleYVal = minY + (maxY - minY) / 2;\r\n\t        var yVals = items.map(function (item) { return item.yVal; });\r\n\t        this.startXVal = startXVal;\r\n\t        this.startYVal = startYVal;\r\n\t        this.endXVal = endXVal;\r\n\t        this.endYVal = endYVal;\r\n\t        this.xVal = middleXVal;\r\n\t        this.yVal = middleYVal;\r\n\t        this.maxYVal = Math.max.apply(Math, yVals);\r\n\t        this.minYVal = Math.min.apply(Math, yVals);\r\n\t        if (!this.currentAnimationState)\r\n\t            this.currentAnimationState = this.createAnimationState();\r\n\t    };\r\n\t    TrendSegment.prototype.getNext = function () {\r\n\t        var nextPoint = this.trendSegments.segmentsById[this.nextId];\r\n\t        return nextPoint && nextPoint.hasValue ? nextPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getPrev = function () {\r\n\t        var prevPoint = this.trendSegments.segmentsById[this.prevId];\r\n\t        return prevPoint && prevPoint.hasValue ? prevPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getFrameVal = function () {\r\n\t        var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\r\n\t        return new Vector3(xVal, yVal, 0);\r\n\t    };\r\n\t    TrendSegment.prototype.getFramePoint = function () {\r\n\t        var frameVal = this.getFrameVal();\r\n\t        return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\r\n\t    };\r\n\t    return TrendSegment;\r\n\t}());\r\n\texports.TrendSegment = TrendSegment;\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar EVENTS = {\r\n\t    SEGMENTS_REBUILDED: 'segmentsRebuilded'\r\n\t};\r\n\t/**\r\n\t * Trends manager\r\n\t */\r\n\tvar TrendsManager = (function () {\r\n\t    function TrendsManager(state, initialState) {\r\n\t        this.trends = {};\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.chartState = state;\r\n\t        var trendsCalculatedOptions = {};\r\n\t        for (var trendName in initialState.trends) {\r\n\t            var trend = this.createTrend(state, trendName, initialState);\r\n\t            trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\r\n\t        }\r\n\t        this.calculatedOptions = trendsCalculatedOptions;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendsManager.prototype.getTrend = function (trendName) {\r\n\t        return this.trends[trendName];\r\n\t    };\r\n\t    TrendsManager.prototype.getEnabledTrends = function () {\r\n\t        var enabledTrends = [];\r\n\t        var allTrends = this.trends;\r\n\t        for (var trendName in allTrends) {\r\n\t            var trend = allTrends[trendName];\r\n\t            trend.getOptions().enabled && enabledTrends.push(trend);\r\n\t        }\r\n\t        return enabledTrends;\r\n\t    };\r\n\t    TrendsManager.prototype.getStartXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        return trends[0].getData()[0].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getEndXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var firstTrendData = trends[0].getData();\r\n\t        return firstTrendData[firstTrendData.length - 1].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getExtremumYVal = function (extremumIsMax, fromX, toX) {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var compareFn;\r\n\t        var result;\r\n\t        if (extremumIsMax) {\r\n\t            result = -Infinity;\r\n\t            compareFn = Math.max;\r\n\t        }\r\n\t        else {\r\n\t            result = Infinity;\r\n\t            compareFn = Math.min;\r\n\t        }\r\n\t        for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\r\n\t            var trend = trends_1[_i];\r\n\t            var trendData = trend.getData(fromX, toX);\r\n\t            var trendYValues = trendData.map(function (dataItem) { return dataItem.yVal; });\r\n\t            result = compareFn.apply(void 0, [result].concat(trendYValues));\r\n\t        }\r\n\t        if (result == Infinity || result == -Infinity)\r\n\t            result = NaN;\r\n\t        return result;\r\n\t    };\r\n\t    TrendsManager.prototype.getMaxYVal = function (fromX, toX) { return this.getExtremumYVal(true, fromX, toX); };\r\n\t    TrendsManager.prototype.getMinYVal = function (fromX, toX) { return this.getExtremumYVal(false, fromX, toX); };\r\n\t    TrendsManager.prototype.onSegmentsRebuilded = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\r\n\t    };\r\n\t    TrendsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onInitialStateApplied(function () { return _this.onInitialStateAppliedHandler(); });\r\n\t    };\r\n\t    TrendsManager.prototype.onInitialStateAppliedHandler = function () {\r\n\t        var _this = this;\r\n\t        var _loop_1 = function(trendName) {\r\n\t            this_1.trends[trendName].segmentsManager.onRebuild(function () { return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName); });\r\n\t        };\r\n\t        var this_1 = this;\r\n\t        for (var trendName in this.trends) {\r\n\t            _loop_1(trendName);\r\n\t        }\r\n\t    };\r\n\t    TrendsManager.prototype.createTrend = function (state, trendName, initialState) {\r\n\t        var trend = new Trend_1.Trend(state, trendName, initialState);\r\n\t        this.trends[trendName] = trend;\r\n\t        return trend;\r\n\t    };\r\n\t    return TrendsManager;\r\n\t}());\r\n\texports.TrendsManager = TrendsManager;\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\t/**\r\n\t * manage camera, and contains methods for transforming pixels to values\r\n\t */\r\n\tvar Screen = (function () {\r\n\t    function Screen(chartState) {\r\n\t        this.options = { scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1 };\r\n\t        this.currentScrollX = { x: 0 };\r\n\t        this.currentScrollY = { y: 0 };\r\n\t        this.currentZoomX = { val: 1 };\r\n\t        this.currentZoomY = { val: 1 };\r\n\t        this.chartState = chartState;\r\n\t        var _a = chartState.state, w = _a.width, h = _a.height;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.transform({\r\n\t            scrollY: this.valueToPxByYAxis(this.chartState.state.yAxis.range.scroll),\r\n\t            zoomY: 1\r\n\t        });\r\n\t        this.bindEvents();\r\n\t        //camera.position.z = 1500;\r\n\t    }\r\n\t    Screen.prototype.getCameraSettings = function () {\r\n\t        var _a = this.chartState.state, w = _a.width, h = _a.height;\r\n\t        // settings for pixel-perfect camera\r\n\t        var FOV = 75;\r\n\t        var vFOV = FOV * (Math.PI / 180);\r\n\t        return {\r\n\t            FOV: FOV,\r\n\t            aspect: w / h,\r\n\t            near: 0.1,\r\n\t            far: 5000,\r\n\t            z: h / (2 * Math.tan(vFOV / 2)),\r\n\t            // move 0,0 to left-bottom corner\r\n\t            x: w / 2,\r\n\t            y: h / 2\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onZoomFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'zoomFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onScrollFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'scrollFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onTransformationFrame = function (cb) {\r\n\t        var _this = this;\r\n\t        var eventName = 'transformationFrame';\r\n\t        this.ee.on(eventName, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(eventName, cb);\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.cameraIsMoving = function () {\r\n\t        return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() ||\r\n\t            this.zoomXAnimation && this.zoomXAnimation.isActive());\r\n\t    };\r\n\t    Screen.prototype.transform = function (options, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\r\n\t        if (scrollX != void 0)\r\n\t            this.options.scrollX = scrollX;\r\n\t        if (scrollY != void 0)\r\n\t            this.options.scrollY = scrollY;\r\n\t        if (zoomX != void 0)\r\n\t            this.options.zoomX = zoomX;\r\n\t        if (zoomY != void 0)\r\n\t            this.options.zoomY = zoomY;\r\n\t        if (scrollX != void 0 || zoomX) {\r\n\t            options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\r\n\t            this.options.scrollXVal = options.scrollXVal;\r\n\t        }\r\n\t        if (scrollY != void 0 || zoomY) {\r\n\t            options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\r\n\t            this.options.scrollYVal = options.scrollYVal;\r\n\t        }\r\n\t        if (silent)\r\n\t            return;\r\n\t        this.ee.emit('transformationFrame', options);\r\n\t        if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\r\n\t            this.ee.emit('scrollFrame', options);\r\n\t        }\r\n\t        if (options.zoomX != void 0 || options.zoomY != void 0) {\r\n\t            this.ee.emit('zoomFrame', options);\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        // handle scroll and zoom\r\n\t        state.onChange(function (changedProps) {\r\n\t            if (changedProps.xAxis && changedProps.xAxis.range) {\r\n\t                if (changedProps.xAxis.range.scroll != void 0)\r\n\t                    _this.onScrollXHandler(changedProps);\r\n\t                if (changedProps.xAxis.range.zoom)\r\n\t                    _this.onZoomXHandler();\r\n\t            }\r\n\t            if (changedProps.yAxis && changedProps.yAxis.range) {\r\n\t                if (changedProps.yAxis.range.scroll != void 0)\r\n\t                    _this.onScrollYHandler();\r\n\t                if (changedProps.yAxis.range.zoom)\r\n\t                    _this.onZoomYHandler();\r\n\t            }\r\n\t        });\r\n\t        state.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    Screen.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.scrollXAnimation && this.scrollXAnimation.kill();\r\n\t        this.scrollYAnimation && this.scrollYAnimation.kill();\r\n\t        this.zoomXAnimation && this.zoomXAnimation.kill();\r\n\t        this.zoomYAnimation && this.zoomYAnimation.kill();\r\n\t    };\r\n\t    Screen.prototype.onScrollXHandler = function (changedProps) {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var isDragMode = state.state.cursor.dragMode;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled && !isDragMode;\r\n\t        var zoomXChanged = changedProps.xAxis.range.zoom;\r\n\t        var isAutoscroll = state.state.autoScroll && !isDragMode && !zoomXChanged;\r\n\t        var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\r\n\t        var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\r\n\t        if (this.scrollXAnimation)\r\n\t            this.scrollXAnimation.pause();\r\n\t        var range = state.state.xAxis.range;\r\n\t        var targetX = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollX.x = this.options.scrollX;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollX: _this.currentScrollX.x });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\r\n\t                x: targetX, ease: ease\r\n\t            });\r\n\t            this.scrollXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollX.x = targetX;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onScrollYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        if (this.scrollYAnimation)\r\n\t            this.scrollYAnimation.pause();\r\n\t        var range = state.state.yAxis.range;\r\n\t        var targetY = range.scroll * range.scaleFactor * range.zoom;\r\n\t        this.currentScrollY.y = this.options.scrollY;\r\n\t        var cb = function () {\r\n\t            _this.transform({ scrollY: _this.currentScrollY.y });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\r\n\t                y: targetY, ease: animations.zoomEase\r\n\t            });\r\n\t            this.scrollYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentScrollY.y = targetY;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomXHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.state.xAxis.range.zoom;\r\n\t        if (this.zoomXAnimation)\r\n\t            this.zoomXAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomX: _this.currentZoomX.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomXAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomX.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    Screen.prototype.onZoomYHandler = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chartState;\r\n\t        var animations = state.state.animations;\r\n\t        var canAnimate = animations.enabled;\r\n\t        var time = animations.zoomSpeed;\r\n\t        var targetZoom = state.state.yAxis.range.zoom;\r\n\t        if (this.zoomYAnimation)\r\n\t            this.zoomYAnimation.pause();\r\n\t        var cb = function () {\r\n\t            _this.transform({ zoomY: _this.currentZoomY.val });\r\n\t        };\r\n\t        if (canAnimate) {\r\n\t            this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\r\n\t                val: targetZoom, ease: animations.zoomEase\r\n\t            });\r\n\t            this.zoomYAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.currentZoomY.val = targetZoom;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.chartState.state.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomX;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.chartState.state.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomY;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Screen.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.chartState.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.chartState.state.xAxis.range.scaleFactor * this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.chartState.state.yAxis.range.scaleFactor * this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.chartState.state.xAxis.range.scaleFactor / this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.chartState.state.yAxis.range.scaleFactor / this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollX value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenX = function (x) {\r\n\t        return this.chartState.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollY value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenY = function (y) {\r\n\t        return this.chartState.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    //\r\n\t    /**\r\n\t     *  returns screen scrollX value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.chartState.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    // /**\r\n\t    //  *  returns screen scrollY value by screen scrollY coordinate\r\n\t    //  */\r\n\t    // getScreenYByValue(scrollYVal: number): number {\r\n\t    // \tvar {scroll, zeroVal} = this.state.yAxis.range;\r\n\t    // \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\r\n\t    // }\r\n\t    //\r\n\t    //\r\n\t    /**\r\n\t     * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Screen.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenY = function (screenY) {\r\n\t        return this.getPointOnYAxis(this.getValueByScreenY(screenY));\r\n\t    };\r\n\t    Screen.prototype.getTop = function () {\r\n\t        return this.getPointByScreenY(this.chartState.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottom = function () {\r\n\t        return this.getPointByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getLeft = function () {\r\n\t        return this.getPointByScreenX(0);\r\n\t    };\r\n\t    Screen.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.chartState.state.width);\r\n\t    };\r\n\t    Screen.prototype.getTopVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottomVal = function () {\r\n\t        return this.getValueByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getCenterYVal = function () {\r\n\t        return this.getValueByScreenY(this.chartState.state.height / 2);\r\n\t    };\r\n\t    return Screen;\r\n\t}());\r\n\texports.Screen = Screen;\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar AXIS_MARK_DEFAULT_OPTIONS = {\r\n\t    type: 'simple',\r\n\t    lineWidth: 1,\r\n\t    value: 0,\r\n\t    showValue: false,\r\n\t    stickToEdges: false,\r\n\t    lineColor: '#FFFFFF',\r\n\t    title: ''\r\n\t};\r\n\tvar AxisMarks = (function () {\r\n\t    function AxisMarks(chartState, axisType) {\r\n\t        this.items = {};\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.axisType = axisType;\r\n\t        var marks = this.items;\r\n\t        var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\r\n\t        for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\r\n\t            var options = axisMarksOptions_1[_i];\r\n\t            var axisMark = void 0;\r\n\t            options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\r\n\t            // set mark name\r\n\t            if (!options.name)\r\n\t                options.name = Utils_1.Utils.getUid().toString();\r\n\t            if (marks[options.name])\r\n\t                Utils_1.Utils.error('duplicated mark name ' + options.name);\r\n\t            // create mark instance based on type option\r\n\t            if (options.type == 'timeleft') {\r\n\t                axisMark = new AxisTimeleftMark(chartState, axisType, options);\r\n\t            }\r\n\t            else {\r\n\t                axisMark = new AxisMark(chartState, axisType, options);\r\n\t            }\r\n\t            marks[options.name] = axisMark;\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarks.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, newData);\r\n\t        });\r\n\t        this.chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    AxisMarks.prototype.onTrendChange = function (trendName, newData) {\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var startVal = newData[0].xVal;\r\n\t        var endVal = newData[newData.length - 1].xVal;\r\n\t        var marks = this.items;\r\n\t        for (var markName in marks) {\r\n\t            var mark = marks[markName];\r\n\t            var markVal = mark.options.value;\r\n\t            var markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\r\n\t            if (markWasCrossed)\r\n\t                this.ee.emit('markCrossed', trendName, newData);\r\n\t        }\r\n\t    };\r\n\t    AxisMarks.prototype.getItems = function () {\r\n\t        return this.items;\r\n\t    };\r\n\t    AxisMarks.prototype.getItem = function (markName) {\r\n\t        return this.items[markName];\r\n\t    };\r\n\t    return AxisMarks;\r\n\t}());\r\n\texports.AxisMarks = AxisMarks;\r\n\tvar AxisMark = (function () {\r\n\t    function AxisMark(chartState, axisType, options) {\r\n\t        this.renderOnTrendsChange = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.options = options;\r\n\t        this.axisType = axisType;\r\n\t        this.chartState = chartState;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMark.prototype.bindEvents = function () { };\r\n\t    AxisMark.prototype.setOptions = function (newOptions) {\r\n\t        var value = this.options.value;\r\n\t        this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\r\n\t        if (this.options.value !== value)\r\n\t            this.ee.emit('valueChange');\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisMark.prototype.getDisplayedVal = function () {\r\n\t        var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\r\n\t        return String(displayedValue !== void 0 ? displayedValue : value);\r\n\t    };\r\n\t    AxisMark.prototype.onMarkCrossed = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('markCrossed', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('markCrossed', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('valueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('valueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onDisplayedValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('onDisplayedValueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('onDisplayedValueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.typeName = 'simple';\r\n\t    return AxisMark;\r\n\t}());\r\n\texports.AxisMark = AxisMark;\r\n\tvar AxisTimeleftMark = (function (_super) {\r\n\t    __extends(AxisTimeleftMark, _super);\r\n\t    function AxisTimeleftMark() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.renderOnTrendsChange = true;\r\n\t    }\r\n\t    AxisTimeleftMark.prototype.getDisplayedVal = function () {\r\n\t        var markVal = this.options.value;\r\n\t        var maxXVal = this.chartState.state.computedData.trends.maxXVal;\r\n\t        var time = markVal - maxXVal;\r\n\t        if (time < 0)\r\n\t            time = 0;\r\n\t        return Utils_1.Utils.msToTimeString(time);\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.onTrendsChange = function () {\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisTimeleftMark.typeName = 'timeleft';\r\n\t    return AxisTimeleftMark;\r\n\t}(AxisMark));\r\n\texports.AxisTimeleftMark = AxisTimeleftMark;\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t(function (AXIS_RANGE_TYPE) {\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\"; // TODO: AXIS_RANGE_TYPE.ALL\r\n\t})(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\r\n\tvar AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\r\n\t;\r\n\t(function (AXIS_TYPE) {\r\n\t    AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\r\n\t    AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\r\n\t})(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\r\n\tvar AXIS_TYPE = exports.AXIS_TYPE;\r\n\t(function (AXIS_DATA_TYPE) {\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\r\n\t})(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\r\n\tvar AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * base class for all widgets\r\n\t * each widget must have widgetName static property\r\n\t */\r\n\tvar ChartWidget = (function () {\r\n\t    function ChartWidget() {\r\n\t        this.unbindList = [];\r\n\t    }\r\n\t    ChartWidget.prototype.setupChart = function (chart) {\r\n\t        this.chart = chart;\r\n\t    };\r\n\t    ChartWidget.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unbindList = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unbindList.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unbindList.push.apply(unbindList, (args));\r\n\t        }\r\n\t        (_a = this.unbindList).push.apply(_a, unbindList);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartWidget.prototype.unbindEvents = function () {\r\n\t        this.unbindList.forEach(function (unbindEvent) { return unbindEvent(); });\r\n\t        this.unbindList.length = 0;\r\n\t    };\r\n\t    ChartWidget.widgetName = '';\r\n\t    return ChartWidget;\r\n\t}());\r\n\texports.ChartWidget = ChartWidget;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar GridWidget_1 = __webpack_require__(22);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar interfaces_1 = __webpack_require__(19);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\t/**\r\n\t * widget for drawing axis\r\n\t */\r\n\tvar AxisWidget = (function (_super) {\r\n\t    __extends(AxisWidget, _super);\r\n\t    function AxisWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    AxisWidget.prototype.onReadyHandler = function () {\r\n\t        var _this = this;\r\n\t        this.object3D = new Object3D();\r\n\t        this.axisXObject = new Object3D();\r\n\t        this.axisYObject = new Object3D();\r\n\t        this.object3D.add(this.axisXObject);\r\n\t        this.object3D.add(this.axisYObject);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        // canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\r\n\t        this.updateAxisXRequest = Utils_1.Utils.throttle(function () { return _this.updateAxis(interfaces_1.AXIS_TYPE.X); }, 1000);\r\n\t        this.onScrollChange(this.chart.screen.options.scrollX, this.chart.screen.options.scrollY);\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        this.bindEvent(state.screen.onTransformationFrame(function (options) {\r\n\t            _this.onScrollChange(options.scrollX, options.scrollY);\r\n\t        }), state.screen.onZoomFrame(function (options) { _this.onZoomFrame(options); }), state.onDestroy(function () { return _this.onDestroy(); }), state.onResize(function () { return _this.onResize(); }));\r\n\t    };\r\n\t    AxisWidget.prototype.onDestroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.unbindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.onScrollChange = function (x, y) {\r\n\t        if (y != void 0) {\r\n\t            this.axisYObject.position.y = y;\r\n\t            this.axisXObject.position.y = y;\r\n\t        }\r\n\t        if (x != void 0) {\r\n\t            this.axisYObject.position.x = x;\r\n\t            this.updateAxisXRequest();\r\n\t        }\r\n\t    };\r\n\t    AxisWidget.prototype.onResize = function () {\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t    };\r\n\t    AxisWidget.prototype.setupAxis = function (orientation) {\r\n\t        var _this = this;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var canvasWidth = 0, canvasHeight = 0;\r\n\t        var axisOptions;\r\n\t        // clean meshes\r\n\t        if (isXAxis) {\r\n\t            this.axisXObject.traverse(function (obj) { return _this.axisXObject.remove(obj); });\r\n\t            canvasWidth = visibleWidth * 3;\r\n\t            canvasHeight = 50;\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t        }\r\n\t        else {\r\n\t            this.axisYObject.traverse(function (obj) { return _this.axisYObject.remove(obj); });\r\n\t            canvasWidth = 50;\r\n\t            canvasHeight = visibleHeight * 3;\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t        }\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function (ctx) {\r\n\t            var color = new Color_1.ChartColor(axisOptions.color);\r\n\t            ctx.beginPath();\r\n\t            ctx.font = _this.chart.state.font.m;\r\n\t            ctx.fillStyle = color.rgbaStr;\r\n\t            ctx.strokeStyle = color.rgbaStr;\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisXObject.add(axisMesh);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisYObject.add(axisMesh);\r\n\t        }\r\n\t        this.updateAxis(orientation);\r\n\t    };\r\n\t    AxisWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisWidget.prototype.updateAxis = function (orientation) {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var _b = this.chart.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\r\n\t        var axisOptions;\r\n\t        var axisMesh;\r\n\t        var axisGridParams;\r\n\t        if (isXAxis) {\r\n\t            axisMesh = this.axisXObject.children[0];\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh = this.axisYObject.children[0];\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\r\n\t        }\r\n\t        var geometry = axisMesh.geometry;\r\n\t        var canvasWidth = geometry.parameters.width;\r\n\t        var canvasHeight = geometry.parameters.height;\r\n\t        var texture = axisMesh.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\r\n\t        }\r\n\t        // TODO: draw text and lines in different loops\r\n\t        var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\r\n\t        var startVal = axisGridParams.start - edgeOffset;\r\n\t        var endVal = axisGridParams.end + edgeOffset;\r\n\t        ctx.beginPath();\r\n\t        for (var val = startVal; val <= endVal; val += axisGridParams.step) {\r\n\t            var displayedValue = '';\r\n\t            if (isXAxis) {\r\n\t                var pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\r\n\t                ctx.textAlign = \"center\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(pxVal + 0.5, canvasHeight);\r\n\t                // ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\r\n\t                if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\r\n\t                    displayedValue = AxisWidget.getDateStr(val, axisGridParams);\r\n\t                }\r\n\t                else {\r\n\t                    displayedValue = Number(val.toFixed(14)).toString();\r\n\t                }\r\n\t                ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\r\n\t            }\r\n\t            else {\r\n\t                var pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\r\n\t                ctx.textAlign = \"right\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(canvasWidth, pxVal + 0.5);\r\n\t                // ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\r\n\t                displayedValue = Number(val.toFixed(14)).toString();\r\n\t                ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\r\n\t            }\r\n\t            ctx.stroke();\r\n\t        }\r\n\t        // uncomment to preview canvas borders\r\n\t        // ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t        ctx.stroke();\r\n\t        ctx.closePath();\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisWidget.prototype.onZoomFrame = function (options) {\r\n\t        if (options.zoomX) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        }\r\n\t        if (options.zoomY) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        }\r\n\t    };\r\n\t    // private temporaryHideAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar timeoutId = setTimeout(() => {\r\n\t    // \t\t\tthis.showAxis(orientation);\r\n\t    // \t}, 200);\r\n\t    //\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tclearTimeout(this.showAxisXTimeout);\r\n\t    // \t\tthis.showAxisXTimeout =\ttimeoutId;\r\n\t    // \t} else {\r\n\t    // \t\tclearTimeout(this.showAxisYTimeout);\r\n\t    // \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tthis.showAxisYTimeout = timeoutId;\r\n\t    // \t}\r\n\t    // }\r\n\t    // private showAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar material: MeshBasicMaterial;\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t} else {\r\n\t    // \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t}\r\n\t    // \tthis.updateAxis(orientation);\r\n\t    // \tTweenLite.to(material, 0.3, {opacity: 1});\r\n\t    // }\r\n\t    AxisWidget.getDateStr = function (timestamp, gridParams) {\r\n\t        var sec = 1000;\r\n\t        var min = sec * 60;\r\n\t        var hour = min * 60;\r\n\t        var day = hour * 60;\r\n\t        var step = gridParams.step;\r\n\t        var d = new Date(timestamp);\r\n\t        var tf = function (num) { return Utils_1.Utils.toFixed(num, 2); };\r\n\t        return tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\r\n\t    };\r\n\t    AxisWidget.widgetName = 'Axis';\r\n\t    return AxisWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisWidget = AxisWidget;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\t/**\r\n\t * widget for drawing state grid\r\n\t */\r\n\tvar GridWidget = (function (_super) {\r\n\t    __extends(GridWidget, _super);\r\n\t    function GridWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    GridWidget.prototype.onReadyHandler = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        this.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\r\n\t        this.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\r\n\t        this.initGrid();\r\n\t        this.updateGrid();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    GridWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        // grid is bigger then screen, so it's no need to update it on each scroll event\r\n\t        var updateGridThrottled = Utils_1.Utils.throttle(function () { return _this.updateGrid(); }, 1000);\r\n\t        this.bindEvent(this.chart.onScroll(function () { return updateGridThrottled(); }), this.chart.screen.onZoomFrame(function (options) {\r\n\t            updateGridThrottled();\r\n\t            _this.onZoomFrame(options);\r\n\t        }), this.chart.onDestroy(function () {\r\n\t            _this.isDestroyed = true;\r\n\t            _this.unbindEvents();\r\n\t        }), this.chart.onResize(function () {\r\n\t            _this.updateGrid();\r\n\t        }));\r\n\t    };\r\n\t    GridWidget.prototype.initGrid = function () {\r\n\t        var color = new Color_1.ChartColor(this.chart.state.xAxis.grid.color);\r\n\t        var geometry = new THREE.Geometry();\r\n\t        var material = new THREE.LineBasicMaterial({ linewidth: 1, color: color.value, opacity: color.a, transparent: true });\r\n\t        var xLinesCount = this.gridSizeH;\r\n\t        var yLinesCount = this.gridSizeV;\r\n\t        while (xLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        while (yLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        this.lineSegments = new LineSegments(geometry, material);\r\n\t        this.lineSegments.position.setZ(-1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t    };\r\n\t    GridWidget.prototype.updateGrid = function () {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var _a = this.chart.state, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\r\n\t        var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\r\n\t        var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\r\n\t        var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\r\n\t        var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\r\n\t        var gridScrollXVal = scrollXInSegments * axisXGrid.step;\r\n\t        var gridScrollYVal = scrollYInSegments * axisYGrid.step;\r\n\t        var startXVal = axisXGrid.start + gridScrollXVal;\r\n\t        var startYVal = axisYGrid.start + gridScrollYVal;\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var vertices = geometry.vertices;\r\n\t        var lineInd = 0;\r\n\t        for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\r\n\t            var value = startXVal + i * axisXGrid.step;\r\n\t            var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\r\n\t            var value = startYVal + i * axisYGrid.step;\r\n\t            var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\r\n\t    };\r\n\t    GridWidget.prototype.getHorizontalLineSegment = function (yVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\r\n\t        var widthVal = chartState.pxToValueByXAxis(chartState.state.width);\r\n\t        return [\r\n\t            new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0),\r\n\t            new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.getVerticalLineSegment = function (xVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\r\n\t        var heightVal = chartState.pxToValueByYAxis(chartState.state.height);\r\n\t        return [\r\n\t            new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0),\r\n\t            new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.onZoomFrame = function (options) {\r\n\t        var _a = this.chart.state, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        if (options.zoomX)\r\n\t            this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\r\n\t    };\r\n\t    // TODO: move this code to core\r\n\t    GridWidget.getGridParamsForAxis = function (axisOptions, axisWidth, zoom) {\r\n\t        var axisRange = axisOptions.range;\r\n\t        var from = axisRange.from;\r\n\t        var to = axisRange.to;\r\n\t        var axisLength = to - from;\r\n\t        var gridStep = 0;\r\n\t        var gridStepInPixels = 0;\r\n\t        var minGridStepInPixels = axisOptions.grid.minSizePx;\r\n\t        var axisLengthStr = String(axisLength);\r\n\t        var axisLengthPointPosition = axisLengthStr.indexOf('.');\r\n\t        var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\r\n\t        var gridStepFound = false;\r\n\t        var digitPos = 0;\r\n\t        while (!gridStepFound) {\r\n\t            var power = intPartLength - digitPos - 1;\r\n\t            var multiplier = (Math.pow(10, power) || 1);\r\n\t            var dividers = [1, 2, 5];\r\n\t            for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\r\n\t                var nextGridStep = multiplier / dividers[dividerInd];\r\n\t                var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\r\n\t                if (nextGridStepInPixels >= minGridStepInPixels) {\r\n\t                    gridStep = nextGridStep;\r\n\t                    gridStepInPixels = nextGridStepInPixels;\r\n\t                }\r\n\t                else {\r\n\t                    gridStepFound = true;\r\n\t                    if (gridStep === 0) {\r\n\t                        gridStep = nextGridStep;\r\n\t                        gridStepInPixels = nextGridStepInPixels;\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (!gridStepFound)\r\n\t                digitPos++;\r\n\t        }\r\n\t        var gridStart = Math.floor(from / gridStep) * gridStep;\r\n\t        var gridEnd = Math.floor(to / gridStep) * gridStep;\r\n\t        return {\r\n\t            start: gridStart,\r\n\t            end: gridEnd,\r\n\t            step: gridStep,\r\n\t            stepInPx: gridStepInPixels,\r\n\t            length: gridEnd - gridStart,\r\n\t            segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\r\n\t        };\r\n\t    };\r\n\t    GridWidget.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    GridWidget.widgetName = 'Grid';\r\n\t    return GridWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.GridWidget = GridWidget;\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar ChartColor = (function () {\r\n\t    function ChartColor(color) {\r\n\t        this.set(color);\r\n\t    }\r\n\t    /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\r\n\t    /**\r\n\t     * Parse hex/rgb{a} color syntax.\r\n\t     * @input string\r\n\t     * @returns array [r,g,b{,o}]\r\n\t     */\r\n\t    ChartColor.parseColor = function (color) {\r\n\t        var cache, p = parseInt // Use p as a byte saving reference to parseInt\r\n\t        , color = color.replace(/\\s\\s*/g, ''); //var\r\n\t        // Checks for 6 digit hex and converts string to integer\r\n\t        if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\r\n\t        else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\r\n\t            cache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\r\n\t        else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\r\n\t        else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3], +cache[4]];\r\n\t        else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3]];\r\n\t        else\r\n\t            throw Error(color + ' is not supported by parseColor');\r\n\t        // Performs RGBA conversion by default\r\n\t        isNaN(cache[3]) && (cache[3] = 1);\r\n\t        return cache;\r\n\t        // Adds or removes 4th value based on rgba support\r\n\t        // Support is flipped twice to prevent erros if\r\n\t        // it's not defined\r\n\t        //return cache.slice(0,3 + !!$.support.rgba);\r\n\t    };\r\n\t    ChartColor.prototype.set = function (color) {\r\n\t        if (typeof color == 'number') {\r\n\t            color = color.toString(16);\r\n\t            color = '#' + '0'.repeat(6 - color.length) + color;\r\n\t        }\r\n\t        var colorStr = color;\r\n\t        var rgba = ChartColor.parseColor(colorStr);\r\n\t        this.r = rgba[0];\r\n\t        this.g = rgba[1];\r\n\t        this.b = rgba[2];\r\n\t        this.a = rgba[3];\r\n\t        this.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\r\n\t        this.hexStr = '#' + this.value.toString(16);\r\n\t        this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\r\n\t    };\r\n\t    return ChartColor;\r\n\t}());\r\n\texports.ChartColor = ChartColor;\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Color_1 = __webpack_require__(23);\r\n\tvar TrendsGradientWidget = (function (_super) {\r\n\t    __extends(TrendsGradientWidget, _super);\r\n\t    function TrendsGradientWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsGradientWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendGradient;\r\n\t    };\r\n\t    TrendsGradientWidget.widgetName = \"TrendsGradient\";\r\n\t    return TrendsGradientWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsGradientWidget = TrendsGradientWidget;\r\n\tvar TrendGradient = (function (_super) {\r\n\t    __extends(TrendGradient, _super);\r\n\t    function TrendGradient(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        this.visibleSegmentsCnt = 0;\r\n\t        this.trend = chartState.trendsManager.getTrend(trendName);\r\n\t        this.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments);\r\n\t        this.initGradient();\r\n\t        this.updateSegments();\r\n\t    }\r\n\t    TrendGradient.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.hasBackground;\r\n\t    };\r\n\t    TrendGradient.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            // TODO: optimize updateSegments for onDisplayedRangeChanged\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.chart.onZoom(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendGradient.prototype.getObject3D = function () {\r\n\t        return this.gradient;\r\n\t    };\r\n\t    TrendGradient.prototype.initGradient = function () {\r\n\t        var geometry = new Geometry();\r\n\t        for (var i = 0; i < this.segmentsIds.length; i++) {\r\n\t            geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\r\n\t            var ind = i * 4;\r\n\t            // gradient segment scheme\r\n\t            //\r\n\t            // vert0 +---+ vert3\r\n\t            //       |\\  |\r\n\t            // face1 | \\ | face2\r\n\t            // \t     |  \\|\r\n\t            // vert1 +---+ vert2\r\n\t            geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\r\n\t        }\r\n\t        var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\r\n\t        this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color: color.value, transparent: true, opacity: color.a }));\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.gradient.frustumCulled = false;\r\n\t    };\r\n\t    TrendGradient.prototype.onZoomFrame = function (options) {\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        var currentScale = this.gradient.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendGradient.prototype.onSegmentsAnimate = function (trendSegmentsManager) {\r\n\t        var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\r\n\t        for (var i = 0; i < this.visibleSegmentsCnt; i++) {\r\n\t            var segmentId = this.segmentsIds[i];\r\n\t            if (!animatedSegmentsIds.includes(segmentId))\r\n\t                continue;\r\n\t            this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\r\n\t        }\r\n\t        this.gradient.geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendGradient.prototype.updateSegments = function () {\r\n\t        var geometry = this.gradient.geometry;\r\n\t        var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\r\n\t        var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\r\n\t        this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\r\n\t        var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\r\n\t        if (segmentsToProcessCnt > this.segmentsIds.length) {\r\n\t            Utils_1.Utils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\r\n\t        }\r\n\t        // setup visible segments and collapse invisible\r\n\t        for (var i = 0; i <= segmentsToProcessCnt; i++) {\r\n\t            if (segmentInd <= lastDisplayedSegmentInd) {\r\n\t                var segment = trendSegments[segmentInd];\r\n\t                this.setupSegmentVertices(i, segment.currentAnimationState);\r\n\t                this.segmentsIds[i] = segment.id;\r\n\t                segmentInd++;\r\n\t            }\r\n\t            else {\r\n\t                this.setupSegmentVertices(i);\r\n\t            }\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    /**\r\n\t     * setup gradient segment by segmentState\r\n\t     * if segmentState is undefined, then collapse vertices to 0,0,0\r\n\t     */\r\n\t    TrendGradient.prototype.setupSegmentVertices = function (segmentInd, segmentState) {\r\n\t        var gradientSegmentInd = segmentInd * 4;\r\n\t        var vertices = this.gradient.geometry.vertices;\r\n\t        var topLeft = vertices[gradientSegmentInd];\r\n\t        var bottomLeft = vertices[gradientSegmentInd + 1];\r\n\t        var bottomRight = vertices[gradientSegmentInd + 2];\r\n\t        var topRight = vertices[gradientSegmentInd + 3];\r\n\t        var screenHeightVal = Math.max(this.chart.pxToValueByYAxis(this.chart.state.height), this.chart.screen.pxToValueByYAxis(this.chart.state.height));\r\n\t        if (segmentState) {\r\n\t            var startX = this.toLocalX(segmentState.startXVal);\r\n\t            var startY = this.toLocalY(segmentState.startYVal);\r\n\t            var endX = this.toLocalX(segmentState.endXVal);\r\n\t            var endY = this.toLocalY(segmentState.endYVal);\r\n\t            topLeft.set(startX, startY, 0);\r\n\t            topRight.set(endX, endY, 0);\r\n\t            bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\r\n\t            bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\r\n\t        }\r\n\t        else {\r\n\t            topLeft.set(0, 0, 0);\r\n\t            topRight.set(0, 0, 0);\r\n\t            bottomLeft.set(0, 0, 0);\r\n\t            bottomRight.set(0, 0, 0);\r\n\t        }\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    return TrendGradient;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendGradient = TrendGradient;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(20);\r\n\tvar Object3D = THREE.Object3D;\r\n\t/**\r\n\t * abstract manager class for all trends widgets\r\n\t */\r\n\tvar TrendsWidget = (function (_super) {\r\n\t    __extends(TrendsWidget, _super);\r\n\t    function TrendsWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.widgets = {};\r\n\t    }\r\n\t    TrendsWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        this.onTrendsChange();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    TrendsWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        state.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t        state.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, changedOptions, newData);\r\n\t        });\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendsChange = function () {\r\n\t        var trendsOptions = this.chart.state.trends;\r\n\t        var TrendWidgetClass = this.getTrendWidgetClass();\r\n\t        for (var trendName in trendsOptions) {\r\n\t            var trendOptions = trendsOptions[trendName];\r\n\t            var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\r\n\t            if (widgetCanBeEnabled && !this.widgets[trendName]) {\r\n\t                this.createTrendWidget(trendName);\r\n\t            }\r\n\t            else if (!widgetCanBeEnabled && this.widgets[trendName]) {\r\n\t                this.destroyTrendWidget(trendName);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendChange = function (trendName, changedOptions, newData) {\r\n\t        var widget = this.widgets[trendName];\r\n\t        if (!widget)\r\n\t            return;\r\n\t        widget.onTrendChange(changedOptions);\r\n\t        if (newData) {\r\n\t            var data = this.chart.getTrend(trendName).getData();\r\n\t            var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t            isAppend ? widget.appendData(newData) : widget.prependData(newData);\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendsWidget.prototype.createTrendWidget = function (trendName) {\r\n\t        var WidgetConstructor = this.getTrendWidgetClass();\r\n\t        var widget = new WidgetConstructor(this.chart, trendName);\r\n\t        this.widgets[trendName] = widget;\r\n\t        var widgetObject = widget.getObject3D();\r\n\t        widgetObject.name = trendName;\r\n\t        this.object3D.add(widget.getObject3D());\r\n\t    };\r\n\t    TrendsWidget.prototype.destroyTrendWidget = function (trendName) {\r\n\t        this.widgets[trendName].onDestroy();\r\n\t        delete this.widgets[trendName];\r\n\t        var widgetObject = this.object3D.getObjectByName(trendName);\r\n\t        this.object3D.remove(widgetObject);\r\n\t    };\r\n\t    return TrendsWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.TrendsWidget = TrendsWidget;\r\n\t/**\r\n\t * based class for all trends widgets\r\n\t */\r\n\tvar TrendWidget = (function () {\r\n\t    function TrendWidget(chart, trendName) {\r\n\t        this.chart = chart;\r\n\t        this.trendName = trendName;\r\n\t        this.unbindList = [];\r\n\t        this.trend = chart.trendsManager.getTrend(trendName);\r\n\t        this.chart = chart;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendWidget.widgetIsEnabled = function (trendOptions, chart) {\r\n\t        return trendOptions.enabled;\r\n\t    };\r\n\t    TrendWidget.prototype.appendData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.prependData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.onTrendChange = function (changedOptions) { };\r\n\t    TrendWidget.prototype.onDestroy = function () {\r\n\t        for (var _i = 0, _a = this.unbindList; _i < _a.length; _i++) {\r\n\t            var unsubscriber = _a[_i];\r\n\t            unsubscriber();\r\n\t        }\r\n\t    };\r\n\t    TrendWidget.prototype.onSegmentsAnimate = function (segments) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoomFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onTransformationFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoom = function () {\r\n\t    };\r\n\t    TrendWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function (trendPoints) { return _this.onSegmentsAnimate(trendPoints); }));\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function (options) { return _this.onTransformationFrame(options); }));\r\n\t        this.bindEvent(this.chart.screen.onZoomFrame(function (options) { return _this.onZoomFrame(options); }));\r\n\t        this.bindEvent(this.chart.onZoom(function () { return _this.onZoom(); }));\r\n\t    };\r\n\t    ;\r\n\t    TrendWidget.prototype.bindEvent = function (unbind) {\r\n\t        this.unbindList.push(unbind);\r\n\t    };\r\n\t    return TrendWidget;\r\n\t}());\r\n\texports.TrendWidget = TrendWidget;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\t/**\r\n\t * widget for drawing trends lines\r\n\t */\r\n\tvar TrendsLineWidget = (function (_super) {\r\n\t    __extends(TrendsLineWidget, _super);\r\n\t    function TrendsLineWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsLineWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendLine;\r\n\t    };\r\n\t    TrendsLineWidget.widgetName = \"TrendsLine\";\r\n\t    return TrendsLineWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsLineWidget = TrendsLineWidget;\r\n\tvar TrendLine = (function (_super) {\r\n\t    __extends(TrendLine, _super);\r\n\t    function TrendLine(chart, trendName) {\r\n\t        _super.call(this, chart, trendName);\r\n\t        // contains indexes of free segments\r\n\t        this.freeSegmentsInds = [];\r\n\t        // contains segments to display\r\n\t        this.displayedSegments = {};\r\n\t        var options = this.trend.getOptions();\r\n\t        this.material = new LineBasicMaterial({ color: options.lineColor, linewidth: options.lineWidth });\r\n\t        this.initLine();\r\n\t    }\r\n\t    TrendLine.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\r\n\t    };\r\n\t    TrendLine.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    TrendLine.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroySegments();\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendLine.prototype.initLine = function () {\r\n\t        var geometry = new Geometry();\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.lineSegments = new LineSegments(geometry, this.material);\r\n\t        this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t        for (var i = 0; i < this.chart.state.maxVisibleSegments; i++) {\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t            this.freeSegmentsInds.push(i);\r\n\t        }\r\n\t        this.vertices = geometry.vertices;\r\n\t        this.setupSegments();\r\n\t    };\r\n\t    TrendLine.prototype.setupSegments = function () {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.displayedSegments) {\r\n\t            var lineSegment = this.displayedSegments[segmentId];\r\n\t            var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroySegment(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupSegment(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.setupSegment = function (segmentId, segmentState) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        if (!lineSegment) {\r\n\t            if (this.freeSegmentsInds.length == 0)\r\n\t                Utils_1.Utils.error('Max allocated segments reached');\r\n\t            var ind = this.freeSegmentsInds.pop();\r\n\t            lineSegment = this.displayedSegments[segmentId] = { segmentId: segmentId, ind: ind };\r\n\t        }\r\n\t        var segmentInd = lineSegment.ind;\r\n\t        var lineStartVertex = this.vertices[segmentInd * 2];\r\n\t        var lineEndVertex = this.vertices[segmentInd * 2 + 1];\r\n\t        lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\r\n\t        lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\r\n\t    };\r\n\t    TrendLine.prototype.destroySegments = function () {\r\n\t        for (var segmentId in this.displayedSegments)\r\n\t            this.destroySegment(Number(segmentId));\r\n\t    };\r\n\t    TrendLine.prototype.destroySegment = function (segmentId) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        var lineStartVertex = this.vertices[lineSegment.ind * 2];\r\n\t        var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\r\n\t        lineStartVertex.set(0, 0, 0);\r\n\t        lineEndVertex.set(0, 0, 0);\r\n\t        delete this.displayedSegments[segmentId];\r\n\t        this.freeSegmentsInds.push(lineSegment.ind);\r\n\t    };\r\n\t    TrendLine.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.lineSegments.scale;\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendLine.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.displayedSegments[segmentId])\r\n\t                continue;\r\n\t            this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendLine;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendLine = TrendLine;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar TrendsWidget_1 = __webpack_require__(25);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Line = THREE.Line;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar PlaneGeometry = THREE.PlaneGeometry;\r\n\tvar Trend_1 = __webpack_require__(14);\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Utils_1 = __webpack_require__(4);\r\n\tvar RISE_COLOR = 0x2CAC40;\r\n\tvar FALL_COLOR = 0xEE5533;\r\n\tvar MARGIN_PERCENT = 0.3;\r\n\tvar MAX_CANDLES = 100;\r\n\t/**\r\n\t * widget for drawing trends candles\r\n\t */\r\n\tvar TrendsCandlesWidget = (function (_super) {\r\n\t    __extends(TrendsCandlesWidget, _super);\r\n\t    function TrendsCandlesWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsCandlesWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendCandlesWidget;\r\n\t    };\r\n\t    TrendsCandlesWidget.widgetName = \"TrendsCandles\";\r\n\t    return TrendsCandlesWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsCandlesWidget = TrendsCandlesWidget;\r\n\tvar TrendCandlesWidget = (function (_super) {\r\n\t    __extends(TrendCandlesWidget, _super);\r\n\t    function TrendCandlesWidget(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        // contains indexes of free candles\r\n\t        this.freeCandlesInds = [];\r\n\t        this.candlesPool = [];\r\n\t        this.candles = {};\r\n\t        this.initObject();\r\n\t    }\r\n\t    TrendCandlesWidget.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroyCandles();\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.initObject = function () {\r\n\t        var stateData = this.chart.state;\r\n\t        var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.scaleXFactor = scaleXFactor;\r\n\t        this.scaleYFactor = scaleYFactor;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.object3D.frustumCulled = false;\r\n\t        for (var i = 0; i < MAX_CANDLES; i++)\r\n\t            this.freeCandlesInds.push(i);\r\n\t        this.setupCandles();\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.setupCandles = function () {\r\n\t        // remove invisible\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.candles) {\r\n\t            var segment_1 = this.candles[segmentId].segment;\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroyCandle(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupCandle(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandles = function () {\r\n\t        for (var segmentId in this.candles)\r\n\t            this.destroyCandle(Number(segmentId));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandle = function (segmentId) {\r\n\t        var candle = this.candles[segmentId];\r\n\t        this.object3D.remove(candle.getObject3D());\r\n\t        delete this.candles[segmentId];\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.object3D.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(this.scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(this.scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.candles[segmentId])\r\n\t                continue;\r\n\t            var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\r\n\t            this.setupCandle(segmentId, segmentState);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * create or modify candle\r\n\t     */\r\n\t    TrendCandlesWidget.prototype.setupCandle = function (candleId, segmentState) {\r\n\t        var candleInd = candleId % MAX_CANDLES;\r\n\t        // get candle from candlesPool to avoid creating new Objects by performance reasons\r\n\t        var candle = this.candlesPool[candleInd];\r\n\t        if (!candle) {\r\n\t            candle = this.candlesPool[candleInd] = new CandleWidget();\r\n\t        }\r\n\t        if (!this.candles[candleId]) {\r\n\t            this.candles[candleId] = candle;\r\n\t            this.object3D.add(candle.getObject3D());\r\n\t        }\r\n\t        candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\r\n\t        candle.setSegment(segmentState);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendCandlesWidget;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendCandlesWidget = TrendCandlesWidget;\r\n\tvar CandleWidget = (function () {\r\n\t    function CandleWidget() {\r\n\t        this.initObject();\r\n\t    }\r\n\t    CandleWidget.prototype.getObject3D = function () {\r\n\t        return this.rect;\r\n\t    };\r\n\t    CandleWidget.prototype.setSegment = function (segment) {\r\n\t        this.segment = segment;\r\n\t        var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\r\n\t        // update rect\r\n\t        var geometry = this.rect.geometry;\r\n\t        var material = this.rect.material;\r\n\t        var width = segment.endXVal - segment.startXVal;\r\n\t        width -= width * MARGIN_PERCENT;\r\n\t        var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\r\n\t        var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\r\n\t        leftTop.set(-width / 2, height / 2, 0);\r\n\t        rightTop.set(width / 2, height / 2, 0);\r\n\t        leftBottom.set(-width / 2, -height / 2, 0);\r\n\t        rightBottom.set(width / 2, -height / 2, 0);\r\n\t        // prevent to draw bars with height < 1px\r\n\t        if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\r\n\t            leftBottom.setY(leftBottom.y + 1);\r\n\t            rightBottom.setY(rightBottom.y + 1);\r\n\t        }\r\n\t        material.color.set(color);\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        // update lines\r\n\t        var vLineGeometry = this.vLine.geometry;\r\n\t        var vLineMaterial = this.vLine.material;\r\n\t        var lineTop = segment.maxYVal - segment.yVal;\r\n\t        var lineBottom = segment.minYVal - segment.yVal;\r\n\t        vLineGeometry.vertices[0].set(0, lineTop, 0);\r\n\t        vLineGeometry.vertices[1].set(0, lineBottom, 0);\r\n\t        vLineMaterial.color.set(color);\r\n\t        vLineGeometry.verticesNeedUpdate = true;\r\n\t        var hLineGeometry = this.hLine.geometry;\r\n\t        var hLineMaterial = this.hLine.material;\r\n\t        var lineLeft = (-width) / 2;\r\n\t        var lineRight = width / 2;\r\n\t        hLineGeometry.vertices[0].set(lineLeft, 0, 0);\r\n\t        hLineGeometry.vertices[1].set(lineRight, 0, 0);\r\n\t        hLineMaterial.color.set(color);\r\n\t        hLineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    CandleWidget.prototype.initObject = function () {\r\n\t        this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\r\n\t        var vLineGeometry = new Geometry();\r\n\t        var hLineGeometry = new Geometry();\r\n\t        vLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        hLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        this.vLine = new Line(vLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.hLine = new Line(hLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.rect.add(this.vLine);\r\n\t        this.rect.add(this.hLine);\r\n\t    };\r\n\t    return CandleWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(5));\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(21));\r\n\t__export(__webpack_require__(22));\r\n\t__export(__webpack_require__(25));\r\n\t__export(__webpack_require__(26));\r\n\t__export(__webpack_require__(24));\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** demoApp.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 877ad6a2bd81214aa755\n **/","\nimport { ChartView, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from '../src';\n\n// import { ChartView, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from 'three-charts';\n// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/TrendsMarksPlugin';\n// import { TrendsBeaconWidget } from '../plugins/build/TrendsBeaconWidget';\n// import { TrendsLoadingWidget } from '../plugins/build/TrendsLoadingWidget';\n// import { TrendsIndicatorWidget } from '../plugins/build/TrendsIndicatorWidget';\n// ChartView.preinstalledWidgets.push(TrendsLoadingWidget, TrendsBeaconWidget, TrendsIndicatorWidget);\n\nvar chart: ChartView;\n\nclass DataSourse {\n\tdata: ITrendItem[] = [];\n\tstartTime: number;\n\tendTime: number;\n\n\tconstructor() {\n\t\tlet sec = 0;\n\t\tlet val = 70;\n\t\tthis.startTime = Date.now();\n\n\t\twhile (sec < 100) { //2592000\n\t\t\tthis.data.push({\n\t\t\t\txVal: this.startTime + sec * 1000,\n\t\t\t\tyVal: val\n\t\t\t});\n\t\t\tval += Math.random() * 14 - 7;\n\t\t\tsec++;\n\t\t}\n\t\tthis.endTime = this.data[this.data.length - 1].xVal;\n\t}\n\n\tgetData() {\n\t\treturn Utils.deepCopy(this.data);\n\t}\n\n\tgetNext() {\n\t\tvar lastVal = this.data[this.data.length - 1];\n\t\tvar yVal = lastVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.endTime + 1000;\n\t\tthis.endTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.push(item);\n\t\treturn item;\n\t}\n\n\tgetPrev() {\n\t\tvar firstVal = this.data[0];\n\t\tvar yVal = firstVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.startTime - 1000;\n\t\tthis.startTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.unshift(item);\n\t\treturn item;\n\t}\n}\n\n// class MarksSource {\n// \tstatic getNext(val: number): ITrendMarkOptions {\n// \t\tif (Math.random() > 0.2) return null;\n// \t\treturn this.generate(val);\n// \t}\n//\n// \tstatic generate(val: number): ITrendMarkOptions {\n// \t\tlet descriptionColor = 'rgb(40,136,75)';\n// \t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\n// \t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\n// \t\t\tdescriptionColor = 'rgb(219,73,49)';\n// \t\t}\n//\n// \t\treturn {\n// \t\t\ttrendName: 'main',\n// \t\t\tvalue: val,\n// \t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\n// \t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\n// \t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\n// \t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\n// \t\t\torientation: orientation,\n// \t\t\tdescriptionColor: descriptionColor\n// \t\t}\n// \t}\n// }\n\nwindow.onload = function () {\n\n\tinitListeners();\n\n\tvar dsMain = new DataSourse();\n\tvar dsRed = new DataSourse();\n\tvar dsBlue = new DataSourse();\n\tvar now = Date.now();\n\n\n\n\tchart = new ChartView({\n\t\tyAxis: {\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true},\n\t\t\t],\n\t\t\trange: {\n\n\t\t\t\tpadding: {end: 100, start: 100},\n\t\t\t\tmargin: {end: 50, start: 50},\n\t\t\t\tzeroVal: 70\n\t\t\t}\n\t\t},\n\t\txAxis: {\n\t\t\t//range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\n\t\t\tdataType: AXIS_DATA_TYPE.DATE,\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.FIXED,\n\t\t\t\tfrom: Date.now(),\n\t\t\t\tto: Date.now() + 20000,\n\t\t\t\tpadding: {end: 200, start: 0},\n\t\t\t\tmaxLength: 5000000,\n\t\t\t\tminLength: 5000\n\t\t\t},\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true},\n\t\t\t\t{value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true}\n\t\t\t]\n\t\t\t// range: {\n\t\t\t// \tfrom: 80,\n\t\t\t// \tto: 90\n\t\t\t// }\n\t\t},\n\t\ttrends: {\n\t\t\t'main': {\n\t\t\t\ttype: TREND_TYPE.LINE,\n\t\t\t\tdataset: dsMain.getData(),\n\t\t\t\thasBeacon: true,\n\t\t\t\thasIndicator: true,\n\t\t\t\thasBackground: true,\n\t\t\t},\n\t\t\t// 'red': {dataset: dsRed.state, lineColor: 0xFF2222, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t\t// 'blue': {dataset: dsBlue.state, lineColor: 0x2222FF, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t},\n\t\tshowStats: true,\n\t\t// autoRender: {fps: 100},\n\t\t// animations: {enabled: false},\n\n\t\ttrendDefaultState: {\n\t\t\tsettingsForTypes: {\n\t\t\t\tLINE: {\n\t\t\t\t\tminSegmentLengthInPx: 10\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tdocument.querySelector('.chart')\n\t// \t,\n\t// [\n\t// \tnew TrendsMarksPlugin({items: [MarksSource.generate(now + 3000), MarksSource.generate(now + 3000), MarksSource.generate(now + 4000)]})\n\t// ]\n\t);\n\n\tchart.setState({animations: {enabled: false}});\n\tchart.setState({animations: {enabled: true}});\n\t\n\t(<any>window)['chart'] = chart;\n\n\tvar mainTrend = chart.getTrend('main');\n\tvar deadlineMark = chart.chart.xAxisMarks.getItem('deadline');\n\tvar closeMark = chart.chart.xAxisMarks.getItem('close');\n\n\tmainTrend.onDataChange(() => {\n\t\tvar closeValue = closeMark.options.value;\n\t\tif (mainTrend.getLastItem().xVal >= closeValue) {\n\t\t\tdeadlineMark.setOptions({value: closeValue + 10000});\n\t\t\tcloseMark.setOptions({value: closeValue + 20000})\n\t\t}\n\t\t// var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\n\t\t// if (markOptions) setTimeout(() => {\n\t\t// \tlet trendsMarks = state.state.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\n\t\t// \ttrendsMarks.createMark(markOptions);\n\t\t// }, 500);\n\t});\n\n\n\t// var previewChart1 = ChartView.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-state')[0],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.state, hasBeacon: true}\n\t// \t}\n\t// });\n\t//\n\t// var previewChart2 = ChartView.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-state')[1],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.state, hasBeacon: true}\n\t// \t},\n\t//\n\t// });\n\t//\n\t// var previewChart3 = ChartView.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-state')[2],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.state, hasBeacon: true},\n\t// \t\t'red': {dataset: dsRed.state, lineColor: 0xFF2222},\n\t// \t}\n\t// });\n\t//\n\n\tvar i = 0;\n\n\tchart.getTrend('main').onPrependRequest((requestedLength, resolve, reject) => {\n\t\tvar responseData: ITrendItem[] = [];\n\t\tvar ticksCount = Math.round(requestedLength / 1000) ;\n\t\twhile (ticksCount--) responseData.unshift(dsMain.getPrev());\n\t\tsetTimeout(() => {\n\t\t\tresolve(responseData);\n\t\t}, 2000)\n\t});\n\n\tsetInterval(() => {\n\t\ti++;\n\t\tvar val = dsMain.getNext();\n\n\t\t// [i % 2 ? 10 : 20]\n\n\t\t chart.getTrend('main').appendData([val]);\n\t\t// state.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\n\t\t// state.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// state.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// state.getTrend('red').appendData([val + 10 + Math.random() * 20]);\n\t\t// state.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\n\n\n\n\t\t// previewChart1.getTrend('main').appendData([val]);\n\t\t// previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\n\t\t// previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\n\t\t\n\t\t// previewChart1.appendData(dataToAppend1);\n\t\t//\n\t\t// var chartData2 = previewChart2.state.state.trends[0].state;\n\t\t// var lastItem2 = chartData2[chartData.length - 1];\n\t\t// var dataToAppend2 = [\n\t\t// \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\n\t\t// ];\n\t\t// previewChart2.appendData(dataToAppend2);\n\t\t// previewChart3.appendData(dataToAppend2);\n\t}, 1000);\n};\n\n\nfunction initListeners() {\n\tvar $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]') as HTMLInputElement;\n\t$checkboxMaintrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {main: {enabled: $checkboxMaintrend.checked}}});\n\t});\n\tvar $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]') as HTMLInputElement;\n\t$checkboxRedtrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {red: {enabled: $checkboxRedtrend.checked}}});\n\t});\n\tvar $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]') as HTMLInputElement;\n\t$checkboxBluetrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {blue: {enabled: $checkboxBluetrend.checked}}});\n\t});\n\n\tvar $switchLineBtn = document.querySelector('[name=\"switch-line\"]') as HTMLInputElement;\n\t$switchLineBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.LINE});\n\t});\n\n\tvar $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]') as HTMLInputElement;\n\t$switchBarsBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.CANDLE});\n\t});\n\n\tdocument.querySelector('[name=\"move-left\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.chart.state.xAxis.range;\n\t\tchart.setState({xAxis: {range: {from: currentRange.from - 2000}}});\n\t});\n\n\tdocument.querySelector('[name=\"move-right\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.chart.state.xAxis.range;\n\t\tchart.setState({xAxis: {range: {to: currentRange.to + 2000}}});\n\t});\n\t\n\tvar timeframeButtons = document.querySelectorAll(\".timeframe\");\n\tfor (var i = 0; i < timeframeButtons.length; i++) {\n\t\ttimeframeButtons[i].addEventListener(\"click\", function() {\n\t\t\tvar range = Number(this.getAttribute('data-range'));\n\t\t\tvar segmentLength = Number(this.getAttribute('data-segment-length'));\n\n\n\t\t\tchart.chart.setState({autoScroll: false});\n\t\t\tchart.chart.zoomToRange(range);\n\t\t\tchart.chart.scrollToEnd().then(() => {\n\t\t\t\tchart.chart.setState({autoScroll: true});\n\t\t\t});\n\t\t});\n\t}\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demoApp.ts\n **/","export * from './ChartView';\nexport * from './interfaces';\nexport * from './AxisMarks';\nexport * from './Screen';\nexport * from './Chart';\nexport * from './Trend';\nexport * from './TrendSegmentsManager';\nexport * from './TrendsManager';\nexport * from './Utils';\nexport * from './Widget';\nexport * from './Plugin';\nexport * from './Color';\nexport * from './widgets';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.ts\n **/","// deps must be always on top\nimport { ChartPlugin } from './Plugin';\nrequire('./deps/deps');\n\nimport { Trend } from \"./Trend\";\nimport Vector3 = THREE.Vector3;\nimport PerspectiveCamera = THREE.PerspectiveCamera;\nimport Scene = THREE.Scene;\nimport Renderer = THREE.Renderer;\nimport WebGLRenderer = THREE.WebGLRenderer;\nimport Object3D = THREE.Object3D;\nimport { Chart, IChartState } from \"./Chart\";\nimport { ChartWidget, IChartWidgetConstructor } from \"./Widget\";\nimport { Utils } from \"./Utils\";\nimport { IScreenTransformOptions } from \"./Screen\";\nimport { AxisWidget } from \"./widgets/AxisWidget\";\nimport { GridWidget } from \"./widgets/GridWidget\";\nimport { TrendsGradientWidget } from \"./widgets/TrendsGradientWidget\";\nimport { TrendsLineWidget } from \"./widgets/TrendsLineWidget\";\nimport { TrendsCandlesWidget } from './widgets/TrendsCandleWidget';\nimport { ResizeSensor, ResizeSensorType } from './deps';\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {ChartColor} from \"./Color\";\n\n\nexport class ChartView {\n\n\tstatic devicePixelRatio = window.devicePixelRatio;\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [];\n\tstatic renderers: {[rendererName: string]: any} = {\n\t\tCanvasRenderer: (THREE as any).CanvasRenderer,\n\t\tWebGLRenderer: THREE.WebGLRenderer\n\t};\n\n\tchart: Chart;\n\tisStopped: boolean;\n\tisDestroyed: boolean;\n\tprivate $container: Element;\n\tprivate $el: HTMLElement;\n\tprivate renderer: Renderer;\n\tprivate scene: Scene;\n\tprivate camera: PerspectiveCamera;\n\tprivate cameraInitialPosition: Vector3;\n\tprivate widgets: Array<ChartWidget> = [];\n\tprivate stats: Stats;\n\tprivate zoomThrottled: Function;\n\tprivate unsubscribers: Function[];\n\tprivate resizeSensor: ResizeSensorType;\n\tprivate pluginsAndWidgets: Array<ChartPlugin | ChartWidget>;\n\n\tconstructor(state: IChartState, $container: Element, pluginsAndWidgets: Array<ChartPlugin | ChartWidget> = []) {\n\n\t\tif (!THREE || !THREE.REVISION) Utils.error('three.js not found');\n\n\t\tif (!$container) {\n\t\t\tUtils.error('$el must be set');\n\t\t}\n\t\t// calculate state size\n\t\tlet style = getComputedStyle($container);\n\t\tstate.width = parseInt(style.width);\n\t\tstate.height = parseInt(style.height);\n\n\t\tlet plugins = pluginsAndWidgets.filter(pluginOrWidget => pluginOrWidget instanceof ChartPlugin) as ChartPlugin[];\n\n\t\tthis.chart = new Chart(state, plugins);\n\t\tthis.pluginsAndWidgets = pluginsAndWidgets;\n\t\tthis.zoomThrottled = Utils.throttle((zoomValue: number, origin: number) => this.zoom(zoomValue, origin), 200);\n\t\tthis.$container = $container;\n\t\tthis.init($container);\n\t};\n\n\tprivate init($container: Element) {\n\t\tvar chart = this.chart;\n\t\tvar {width: w, height: h, showStats, autoRender} = chart.state;\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.isStopped = !autoRender.enabled;\n\n\t\tvar renderer = this.renderer = new (ChartView.renderers[this.chart.state.renderer] as any)({\n\t\t\tantialias: true,\n\t\t\talpha: true\n\t\t});\n\t\tlet backgroundColor = new ChartColor(chart.state.backgroundColor);\n\t\trenderer.setSize(w, h);\n\t\trenderer.setPixelRatio(ChartView.devicePixelRatio);\n\t\trenderer.setClearColor(backgroundColor.value, backgroundColor.a);\n\t\t$container.appendChild(renderer.domElement);\n\t\tthis.$el = renderer.domElement;\n\t\tthis.$el.style.display = 'block';\n\n\t\tif (showStats) {\n\t\t\tthis.stats = new Stats();\n\t\t\t$container.appendChild(this.stats.domElement);\n\t\t}\n\n\t\tthis.setupCamera();\n\t\tthis.initWidgets();\n\t\tthis.bindEvents();\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\n\t */\n\tprivate initWidgets() {\n\t\tlet preinstalledWidgetsClasses = (this.constructor as typeof ChartView).preinstalledWidgets;\n\t\tlet customWidgets: ChartWidget[] = [];\n\n\t\tthis.pluginsAndWidgets.forEach(pluginOrWidget => {\n\t\t\tif (pluginOrWidget instanceof ChartWidget) {\n\t\t\t\tcustomWidgets.push(pluginOrWidget);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!(pluginOrWidget instanceof ChartPlugin)) return;\n\t\t\tlet pluginWidgetClasses = (pluginOrWidget.constructor as typeof ChartPlugin).providedWidgets;\n\t\t\tpreinstalledWidgetsClasses.push(...pluginWidgetClasses);\n\t\t});\n\n\t\tthis.widgets = customWidgets.concat(\n\t\t\tpreinstalledWidgetsClasses.map((WidgetClass: IChartWidgetConstructor) => new WidgetClass())\n\t\t);\n\n\t\tthis.widgets.forEach(widget => {\n\t\t\twidget.setupChart(this.chart);\n\t\t\twidget.onReadyHandler();\n\t\t\tthis.scene.add(widget.getObject3D());\n\t\t});\n\t}\n\n\tprivate renderLoop() {\n\t\tif (this.isDestroyed) return;\n\t\tthis.stats && this.stats.begin();\n\t\tthis.render();\n\t\tif (this.isStopped) return;\n\t\tvar fpsLimit = this.chart.state.autoRender.fps;\n\n\t\tif (fpsLimit) {\n\t\t\tlet delay = 1000 / fpsLimit;\n\t\t\tsetTimeout(() => requestAnimationFrame(() => this.renderLoop()), delay);\n\t\t} else {\n\t\t\trequestAnimationFrame(() => this.renderLoop());\n\t\t}\n\t\tthis.stats && this.stats.end();\n\t}\n\n\trender() {\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n\n\tstop() {\n\t\tthis.isStopped = true;\n\t}\n\n\trun() {\n\t\tthis.isStopped = false;\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * call to destroy state an init garbage collection\n\t */\n\tdestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.stop();\n\t\tthis.chart.destroy();\n\t\tthis.unbindEvents();\n\t\t// WARNING! undocumented method for free webgl context\n\t\ttry {\n\t\t\t(this.renderer as any).forceContextLoss();\n\t\t} catch (wtf) {\n\t\t\t// sometimes with many state instances forceContextLoss not working\n\t\t}\n\t\t(this.renderer as any).context = null;\n\t\tthis.renderer.domElement = null;\n\t\tthis.renderer = null;\n\t}\n\n\tgetState(): IChartState {\n\t\treturn this.chart.state\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.getTrend\n\t */\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.chart.getTrend(trendName);\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.setState\n\t */\n\tsetState(state: IChartState) {\n\t\treturn this.chart.setState(state);\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar $el = this.$el;\n\t\tif (this.chart.state.controls.enabled) {\n\t\t\t$el.addEventListener('mousewheel', (ev: MouseWheelEvent) => {\n\t\t\t\tthis.onMouseWheel(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousemove', (ev: MouseEvent) => {\n\t\t\t\tthis.onMouseMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousedown', (ev: MouseEvent) => this.onMouseDown(ev));\n\t\t\t$el.addEventListener('mouseup', (ev: MouseEvent) => this.onMouseUp(ev));\n\t\t\t$el.addEventListener('touchmove', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('touchend', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchEnd(ev)\n\t\t\t});\n\t\t}\n\t\tif (this.chart.state.autoResize) {\n\t\t\tthis.resizeSensor = new ResizeSensor(this.$container, () => {\n\t\t\t\tthis.onChartContainerResizeHandler(this.$container.clientWidth, this.$container.clientHeight);\n\t\t\t});\n\t\t}\n\n\t\tthis.unsubscribers = [\n\t\t\tthis.chart.onTrendsChange(() => this.autoscroll()),\n\t\t\tthis.chart.screen.onTransformationFrame((options) => this.onScreenTransformHandler(options)),\n\t\t\tthis.chart.onResize((options) => this.onChartResize())\n\t\t];\n\t}\n\n\tprivate unbindEvents() {\n\t\t// TODO: unbind events correctly\n\t\ttry {\n\t\t\tthis.resizeSensor && this.resizeSensor.detach();\n\t\t} catch (e) {\n\t\t\t// ups.. somebody already removed resizeSensor childNode\n\t\t\t// detected in angular2 apps\n\t\t}\n\t\tthis.$el.remove();\n\t\tthis.unsubscribers.forEach(unsubscribe => unsubscribe());\n\t}\n\n\tprivate setupCamera() {\n\t\tlet camSettings = this.chart.screen.getCameraSettings();\n\t\tif (!this.camera) {\n\t\t\tthis.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t\t\tthis.scene.add(this.camera);\n\t\t} else {\n\t\t\tthis.camera.fov = camSettings.FOV;\n\t\t\tthis.camera.aspect = camSettings.aspect;\n\t\t\tthis.camera.far = camSettings.far;\n\t\t\tthis.camera.near = camSettings.near;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\t\tthis.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t\tthis.cameraInitialPosition = this.camera.position.clone();\n\t\tthis.onScreenTransformHandler(this.chart.screen.options);\n\t}\n\n\tprivate onScreenTransformHandler(options: IScreenTransformOptions) {\n\t\tif (options.scrollX != void 0) {\n\t\t\tlet scrollX = this.cameraInitialPosition.x + options.scrollX;\n\t\t\t// scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setX(scrollX);\n\t\t}\n\t\tif (options.scrollY != void 0) {\n\t\t\tlet scrollY = this.cameraInitialPosition.y + options.scrollY;\n\t\t\t// scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setY(scrollY);\n\t\t}\n\t}\n\n\tprivate autoscroll() {\n\t\tvar state = this.chart;\n\t\tif (!state.state.autoScroll) return;\n\t\tvar oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\n\t\tvar trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\n\t\tif (trendsMaxXDelta > 0) {\n\t\t\tvar maxVisibleX = this.chart.screen.getScreenRightVal();\n\t\t\tvar paddingRightX = this.chart.getPaddingRight();\n\t\t\tvar currentScroll = state.state.xAxis.range.scroll;\n\t\t\tif (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar scrollDelta = trendsMaxXDelta;\n\t\t\tthis.setState({xAxis: {range: {scroll: currentScroll + scrollDelta}}});\n\t\t}\n\t}\n\n\tprivate onScrollStop() {\n\t\t// var tendsXMax = this.state.state.computedData.trends.maxX;\n\t\t// var paddingRightX = this.state.getPaddingRight();\n\t\t// if (tendsXMax < paddingRightX) {\n\t\t// \tthis.state.scrollToEnd();\n\t\t// }\n\t}\n\n\tprivate onMouseDown(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t}\n\n\tprivate onMouseUp(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onMouseMove(ev: MouseEvent) {\n\t\tif (this.chart.state.cursor.dragMode) {\n\t\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t\t}\n\t}\n\n\tprivate onMouseWheel(ev: MouseWheelEvent) {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t\tlet zoomOrigin = ev.layerX / this.chart.state.width;\n\t\tlet zoomValue = 1 + ev.wheelDeltaY * 0.001;\n\t\tthis.zoom(zoomValue, zoomOrigin);\n\t}\n\n\tprivate onTouchMove(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY}});\n\t}\n\n\tprivate onTouchEnd(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onChartContainerResizeHandler(width: number, height: number) {\n\t\tthis.setState({width, height});\n\t}\n\n\tprivate onChartResize() {\n\t\tlet {width, height} = this.chart.state;\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.setupCamera();\n\t}\n\n\tprivate zoom(zoomValue: number, zoomOrigin: number) {\n\t\tconst MAX_ZOOM_VALUE = 1.5;\n\t\tconst MIN_ZOOM_VALUE = 0.7;\n\t\tzoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t\tzoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t\tlet autoScrollIsEnabled = this.chart.state.autoScroll;\n\t\tif (autoScrollIsEnabled) this.chart.setState({autoScroll: false});\n\t\tthis.chart.zoom(zoomValue, zoomOrigin).then(() => {\n\t\t\tif (autoScrollIsEnabled) this.setState({autoScroll: true});\n\t\t});\n\t}\n\n\n}\n\n// install built-in widgets\nChartView.preinstalledWidgets = [\n\tTrendsLineWidget,\n\tTrendsCandlesWidget,\n\tAxisWidget,\n\tGridWidget,\n\tTrendsGradientWidget\n];\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ChartView.ts\n **/","import { Chart, IChartState } from \"./Chart\";\nimport { Utils } from './Utils';\nimport { EventEmitter } from './EventEmmiter';\nimport { ChartWidget } from './Widget';\n\nexport interface IChartPluginState {\n}\n\nexport interface IChartPluginConfig {\n\tinstallPluginWidgets?: boolean;\n}\n\nexport const DEFAULT_CONFIG: IChartPluginConfig = {\n\tinstallPluginWidgets: true\n};\n\n/**\n * base class for all plugins\n * NAME is mandatory\n */\nexport abstract class ChartPlugin {\n\tstatic NAME: string = '';\n\tstatic providedWidgets: typeof ChartWidget[] = [];\n\n\tinitialState: IChartPluginState;\n\tconfig: IChartPluginConfig;\n\tname: string;\n\tprotected chart: Chart;\n\tprotected unsubscribers: Function[] = [];\n\tprotected ee: EventEmitter;\n\n\tconstructor (options?: IChartPluginState, config: IChartPluginConfig = {}) {\n\t\tthis.initialState = options;\n\t\tthis.config = Utils.deepMerge(DEFAULT_CONFIG, config);\n\t\tthis.name = (this.constructor as typeof ChartPlugin).NAME;\n\t\tif (!this.name) Utils.error('Unnamed plugin detected');\n\t}\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvent(\n\t\t\tthis.chart.onInitialStateApplied(initialState => this.onInitialStateAppliedHandler(initialState)),\n\t\t\tthis.chart.onReady(() => this.onReadyHandler()),\n\t\t\tthis.chart.onDestroy(() => this.onDestroyHandler()),\n\t\t\tthis.chart.onPluginsStateChange(changedPluginsStates => changedPluginsStates[this.name] && this.onStateChanged(changedPluginsStates[this.name]))\n\t\t)\n\t}\n\n\tgetOptions(): IChartPluginState {\n\t\treturn this.chart.state.pluginsState[this.name];\n\t}\n\n\tprotected onInitialStateAppliedHandler(initialState: IChartState) {\n\t}\n\n\tprotected onReadyHandler() {\n\t}\n\n\tprotected onStateChanged(changedState: IChartPluginState) {\n\t}\n\n\tprotected onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t}\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unsubscribers: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunsubscribers.push(args[0] as Function);\n\t\t} else {\n\t\t\tunsubscribers.push(...args as Function[]);\n\t\t}\n\t\tthis.unsubscribers.push(...unsubscribers);\n\t}\n\n\n\tprotected unbindEvents() {\n\t\tthis.unsubscribers.forEach(unsubscriber => unsubscriber());\n\t\tthis.unsubscribers.length = 0;\n\t}\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Plugin.ts\n **/","import Texture = THREE.Texture;\nimport Color = THREE.Color;\nimport { TIteralable, IIteralable } from \"./interfaces\";\nimport { isPlainObject } from './deps/deps';\n\nfunction deepmerge(target: any, src: any, mergeArrays = true) {\n\tvar array = Array.isArray(src);\n\tvar dst: any = array && [] || {};\n\n\tif (array) {\n\t\ttarget = target || [];\n\t\tif (mergeArrays) {\n\t\t\tdst = dst.concat(target);\n\t\t}\n\t\tsrc.forEach(function(e: any, i: any) {\n\t\t\tif (typeof dst[i] === 'undefined') {\n\t\t\t\tdst[i] = e;\n\t\t\t} else if (typeof e === 'object') {\n\t\t\t\tdst[i] = deepmerge(target[i], e, mergeArrays);\n\t\t\t} else {\n\t\t\t\tif (target.indexOf(e) === -1) {\n\t\t\t\t\tdst.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tif (target && typeof target === 'object') {\n\t\t\tObject.keys(target).forEach(function (key) {\n\t\t\t\tdst[key] = target[key];\n\t\t\t})\n\t\t}\n\t\tObject.keys(src).forEach(function (key) {\n\t\t\tif (typeof src[key] !== 'object' || !src[key]) {\n\t\t\t\tdst[key] = src[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t} else {\n\t\t\t\t\tdst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn dst;\n}\n\n\n\nexport declare type TUid = number;\n\n/**\n * project utils static class\n */\nexport class Utils {\n\n\tprivate static currentId: TUid = 1;\n\n\t/**\n\t * deepMerge based on https://www.npmjs.com/package/deepmerge\n\t */\n\tstatic deepMerge<T> (obj1: T, obj2: T, mergeArrays?: boolean) {\n\t\treturn deepmerge(obj1, obj2, mergeArrays) as T;\n\t}\n\n\t/**\n\t * deepCopy based on JSON.stringify function\n\t * @deprecated\n\t */\n\tstatic deepCopy<T> (obj: T) {\n\t\t// TODO: use deepMerge function to copy\n\t\treturn JSON.parse(JSON.stringify(obj)) as T;\n\t}\n\n\t/**\n\t *\n\t * @example\n\t * // returns \"000015\"\n\t * Utils.toFixed(15, 6);\n\t */\n\tstatic toFixed(num: number, digitsCount: number): string {\n\t\tvar maxDigits = 15;\n\t\tvar result = '';\n\t\tvar intVal = Math.floor(num);\n\t\tvar intStr = intVal.toString();\n\t\tvar lengthDiff = digitsCount - intStr.length;\n\t\tif (lengthDiff > 0 ) {\n\t\t\tresult = (<any>'0').repeat(lengthDiff) + intStr;\n\t\t} else {\n\t\t\tresult = intStr;\n\t\t}\n\t\tvar afterPointDigitsCount = maxDigits - intStr.length;\n\t\tvar afterPointStr = num.toString().split('.')[1];\n\t\tif (afterPointStr) {\n\t\t\tresult += '.' + afterPointStr.substr(0, afterPointDigitsCount);\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic bindEvent() {\n\n\t}\n\n\t/**\n\t * generate texture from canvas context\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture {\n\t\tvar canvas: HTMLCanvasElement = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tvar ctx = canvas.getContext('2d');\n\t\tfn(ctx);\n\t\tvar texture = new THREE.Texture(canvas);\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * generate texture from canvas context with NearestFilter\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createPixelPerfectTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture{\n\t\tvar texture = this.createTexture(width, height, fn);\n\t\t// texture.magFilter = THREE.NearestFilter;\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic error(msg: string) {\n\t\tconsole.error('Chart error: ' + msg);\n\t\tthrow 'Chart: ' + msg;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic warn(msg: string) {\n\t\tconsole.warn('Chart warning: ' + msg);\n\t}\n\n\t/**\n\t * @returns new unique id\n\t */\n\tstatic getUid(): TUid {\n\t\treturn this.currentId++;\n\t}\n\n\t/**\n\t * @returns distance between numbers\n\t */\n\tstatic getDistance(num1: number, num2: number) {\n\t\treturn Math.max(num1, num2) - Math.min(num1, num2);\n\t}\n\n\tstatic binarySearchClosestInd(arr: IIteralable[], num: number, key: string): number {\n\t\tvar mid: number;\n\t\tvar lo = 0;\n\t\tvar hi = arr.length - 1;\n\t\twhile (hi - lo > 1) {\n\t\t\tmid = Math.floor ((lo + hi) / 2);\n\t\t\tif (arr[mid][key] < num) {\n\t\t\t\tlo = mid;\n\t\t\t} else {\n\t\t\t\thi = mid;\n\t\t\t}\n\t\t}\n\t\tif (num - arr[lo][key] <= arr[hi][key] - num) {\n\t\t\treturn lo;\n\t\t}\n\t\treturn hi;\n\t}\n\t\n\tstatic binarySearchClosest<ArrayItem>(arr: ArrayItem[], num: number, key: string): ArrayItem {\n\t\tlet ind = this.binarySearchClosestInd(arr, num, key);\n\t\treturn arr[ind];\n\t}\n\n\n\tstatic rectsIntersect(r1: number[], r2: number[]) {\n\t\tlet [left1, top1, width1, height1] = r1;\n\t\tlet [left2, top2, width2, height2] = r2;\n\t\tlet [right1, right2, bottom1, bottom2] = [left1 + width1, left2 + width2, top1 + height1, top2 + height2];\n\t\treturn !(left2 > right1 ||\n\t\t\tright2 < left1 ||\n\t\t\ttop2 > bottom1 ||\n\t\t\tbottom2 < top1\n\t\t);\n\t}\n\n\n\tstatic throttle(func: Function, ms: number) {\n\n\t\tvar isThrottled = false,\n\t\t\tsavedArgs: any,\n\t\t\tsavedThis: any;\n\n\t\tfunction wrapper() {\n\n\t\t\tif (isThrottled) { // (2)\n\t\t\t\tsavedArgs = arguments;\n\t\t\t\tsavedThis = this;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunc.apply(this, arguments); // (1)\n\n\t\t\tisThrottled = true;\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tisThrottled = false; // (3)\n\t\t\t\tif (savedArgs) {\n\t\t\t\t\twrapper.apply(savedThis, savedArgs);\n\t\t\t\t\tsavedArgs = savedThis = null;\n\t\t\t\t}\n\t\t\t}, ms);\n\t\t}\n\n\t\treturn wrapper;\n\t}\n\n\tstatic msToTimeString(timestamp: number) {\n\t\tvar h = Math.floor(timestamp / 360000);\n\t\tvar m =  Math.floor(timestamp / 60000);\n\t\tvar s =  Math.floor(timestamp / 1000);\n\t\treturn h + ':' + m + ':' + s;\n\t}\n\t\n\tstatic getRandomItem<T>(arr: Array<T>): T {\n\t\tvar ind = Math.floor(Math.random() * arr.length);\n\t\treturn arr[ind];\n\t}\n\n\tstatic copyProps(srcObject: TIteralable, dstObject: TIteralable, props: TIteralable, excludeProps: string[] = []) {\n\t\tfor (var key in props) {\n\t\t\tif (excludeProps.indexOf(key) !== -1) continue;\n\t\t\tif (srcObject[key] == void 0) continue;\n\t\t\tif (isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t\t\t\tthis.copyProps(srcObject[key], dstObject[key], props[key])\n\t\t\t} else {\n\t\t\t\tdstObject[key] = this.deepCopy(srcObject[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Utils.ts\n **/","/// <reference path=\"./ResizeSensor.ts\" />\n\n// TODO: think about different bundles\n\nimport { ResizeSensorType } from './ResizeSensor';\n(<any>window).TweenLite = TweenMax;\n(<any>window).Stats = require('three/examples/js/libs/stats.min');\n\n// require('gsap/src/uncompressed/easing/EasePack.js');\n// require('three/examples/js/renderers/CanvasRenderer.js');\n// require('three/examples/js/renderers/Projector.js');\nexport const isPlainObject = require('is-plain-object') as Function;\nexport const EE2 = require('eventemitter2') as typeof EventEmitter2;\n\n\nexport { Promise } from '../polyfills/es6-promise';\n\nexport * from './ResizeSensor';\nexport const ResizeSensor = require('css-element-queries/src/ResizeSensor') as ResizeSensorType;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/deps.ts\n **/","// stats.js - http://github.com/mrdoob/stats.js\nvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\nif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\nStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\nv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/examples/js/libs/stats.min.js\n ** module id = 6\n ** module chunks = 0 1\n **/","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nmodule.exports = function isPlainObject(o) {\n  var ctor,prot;\n  \n  if (isObjectObject(o) === false) return false;\n  \n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n  \n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n  \n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n  \n  // Most likely a plain Object\n  return true;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/is-plain-object/index.js\n ** module id = 7\n ** module chunks = 0 1\n **/","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isObject(val) {\n  return val != null && typeof val === 'object'\n    && !Array.isArray(val);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/isobject/index.js\n ** module id = 8\n ** module chunks = 0 1\n **/","/*!\n * EventEmitter2\n * https://github.com/hij1nx/EventEmitter2\n *\n * Copyright (c) 2013 hij1nx\n * Licensed under the MIT license.\n */\n;!function(undefined) {\n\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = {};\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n\n      this._conf = conf;\n\n      conf.delimiter && (this.delimiter = conf.delimiter);\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this.newListener = conf.newListener);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this.newListener = false;\n    configure.call(this, conf);\n  }\n\n  //\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return [];\n    }\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n    if (i === typeLength && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return [tree];\n      } else {\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n        return [tree];\n      }\n    }\n\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (currentType === '*') {\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n          }\n        }\n        return listeners;\n      } else if(currentType === '**') {\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n        if(endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n        }\n\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            if(branch === '*' || branch === '**') {\n              if(tree[branch]._listeners && !endReached) {\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n              }\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            } else if(branch === nextType) {\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            }\n          }\n        }\n        return listeners;\n      }\n\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n    }\n\n    xTree = tree['*'];\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i+1);\n    }\n\n    xxTree = tree['**'];\n    if(xxTree) {\n      if(i < typeLength) {\n        if(xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength);\n        }\n\n        // Build arrays of matching next branches and others.\n        for(branch in xxTree) {\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n            if(branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\n            } else if(branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n            }\n          }\n        }\n      } else if(xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength);\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener) {\n\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n    //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n    for(var i = 0, len = type.length; i+1 < len; i++) {\n      if(type[i] === '**' && type[i+1] === '**') {\n        return;\n      }\n    }\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n\n      if (!tree[name]) {\n        tree[name] = {};\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        }\n        else if(typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        }\n        else if (isArray(tree._listeners)) {\n\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n\n            var m = defaultMaxListeners;\n\n            if (typeof this._events.maxListeners !== 'undefined') {\n              m = this._events.maxListeners;\n            }\n\n            if (m > 0 && tree._listeners.length > m) {\n\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' +\n                            'leak detected. %d listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit.',\n                            tree._listeners.length);\n              console.trace();\n            }\n          }\n        }\n        return true;\n      }\n      name = type.shift();\n    }\n    return true;\n  }\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n    if (!this._conf) this._conf = {};\n    this._conf.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n\n    this.on(event, listener);\n\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function() {\n\n    this._events || init.call(this);\n\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) { return false; }\n    }\n\n    // Loop through the *_all* functions and invoke them.\n    if (this._all) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        this._all[i].apply(this, args);\n      }\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n\n      if (!this._all &&\n        !this._events.error &&\n        !(this.wildcard && this.listenerTree.error)) {\n\n        if (arguments[1] instanceof Error) {\n          throw arguments[1]; // Unhandled 'error' event\n        } else {\n          throw new Error(\"Uncaught, unspecified 'error' event.\");\n        }\n        return false;\n      }\n    }\n\n    var handler;\n\n    if(this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    }\n    else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      if (arguments.length === 1) {\n        handler.call(this);\n      }\n      else if (arguments.length > 1)\n        switch (arguments.length) {\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n          // slower\n          default:\n            var l = arguments.length;\n            var args = new Array(l - 1);\n            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n            handler.apply(this, args);\n        }\n      return true;\n    }\n    else if (handler) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        this.event = type;\n        listeners[i].apply(this, args);\n      }\n      return (listeners.length > 0) || !!this._all;\n    }\n    else {\n      return !!this._all;\n    }\n\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n\n    if (typeof type === 'function') {\n      this.onAny(type);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n    this._events || init.call(this);\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    this.emit('newListener', type, listener);\n\n    if(this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    }\n    else if(typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n    else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n      // Check for listener leak\n      if (!this._events[type].warned) {\n\n        var m = defaultMaxListeners;\n\n        if (typeof this._events.maxListeners !== 'undefined') {\n          m = this._events.maxListeners;\n        }\n\n        if (m > 0 && this._events[type].length > m) {\n\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' +\n                        'leak detected. %d listeners added. ' +\n                        'Use emitter.setMaxListeners() to increase limit.',\n                        this._events[type].length);\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if(!this._all) {\n      this._all = [];\n    }\n\n    // Add the function to the event listener collection.\n    this._all.push(fn);\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,leafs=[];\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n    }\n    else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({_listeners:handlers});\n    }\n\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n      if (isArray(handlers)) {\n\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener ||\n            (handlers[i].listener && handlers[i].listener === listener) ||\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if(this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        }\n        else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if(this.wildcard) {\n            delete leaf._listeners;\n          }\n          else {\n            delete this._events[type];\n          }\n        }\n        return this;\n      }\n      else if (handlers === listener ||\n        (handlers.listener && handlers.listener === listener) ||\n        (handlers._origin && handlers._origin === listener)) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function(type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n        var leaf = leafs[iLeaf];\n        leaf._listeners = null;\n      }\n    }\n    else {\n      if (!this._events[type]) return this;\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function(type) {\n    if(this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n\n    if (!this._events[type]) this._events[type] = [];\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  if (typeof define === 'function' && define.amd) {\n     // AMD. Register as an anonymous module.\n    define(function() {\n      return EventEmitter;\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    exports.EventEmitter2 = EventEmitter;\n  }\n  else {\n    // Browser global.\n    window.EventEmitter2 = EventEmitter;\n  }\n}();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/eventemitter2/lib/eventemitter2.js\n ** module id = 9\n ** module chunks = 0 1\n **/","module.exports = {Promise: window['Promise']}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/polyfills/es6-promise.js\n ** module id = 10\n ** module chunks = 0 1\n **/","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var shrinkChild = shrink.childNodes[0];\n\n            var lastWidth, lastHeight;\n\n            var reset = function() {\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n                expand.scrollLeft = expand.scrollWidth;\n                expand.scrollTop = expand.scrollHeight;\n                shrink.scrollLeft = shrink.scrollWidth;\n                shrink.scrollTop = shrink.scrollHeight;\n                lastWidth = element.offsetWidth;\n                lastHeight = element.offsetHeight;\n            };\n\n            reset();\n\n            var changed = function() {\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            var onScroll = function() {\n              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                  changed();\n              }\n              reset();\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        var elementType = Object.prototype.toString.call(element);\n        var isCollectionTyped = ('[object Array]' === elementType\n            || ('[object NodeList]' === elementType)\n            || ('[object HTMLCollection]' === elementType)\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n        );\n\n        if (isCollectionTyped) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n\n        this.detach = function() {\n            if (isCollectionTyped) {\n                var i = 0, j = element.length;\n                for (; i < j; i++) {\n                    ResizeSensor.detach(element[i]);\n                }\n            } else {\n                ResizeSensor.detach(element);\n            }\n        };\n    };\n\n    ResizeSensor.detach = function(element) {\n        if (element.resizeSensor) {\n            element.removeChild(element.resizeSensor);\n            delete element.resizeSensor;\n            delete element.resizedAttached;\n        }\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ResizeSensor;\n    }\n    else {\n        window.ResizeSensor = ResizeSensor;\n    }\n\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-element-queries/src/ResizeSensor.js\n ** module id = 11\n ** module chunks = 0 1\n **/","import {EE2} from './deps/deps';\n\n/**\n * this class uses as proxy for EventEmitter2\n */\nexport class EventEmitter {\n\tprivate ee: EventEmitter2;\n\tconstructor() {\n\t\tthis.ee = new EE2();\n\t}\n\temit(eventName: string, ...args: any[]) {\n\t\tthis.ee.emit(eventName, ...args)\n\t}\n\ton(eventName: string, callback: Function) {\n\t\treturn this.ee.on(eventName, callback)\n\t}\n\toff(eventName: string, callback: Function) {\n\t\treturn this.ee.off(eventName, callback);\n\t}\n\tsubscribe(eventName: string, callback: Function): Function {\n\t\tthis.on(eventName, callback);\n\t\treturn () => this.off(eventName, callback);\n\t}\n\tsetMaxListeners(listenersCount: number) {\n\t\tthis.ee.setMaxListeners(listenersCount);\n\t}\n\tremoveAllListeners(eventName?: string) {\n\t\tthis.ee.removeAllListeners(eventName);\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventEmmiter.ts\n **/","import Vector3 = THREE.Vector3;\nimport { ITrendOptions, Trend, ITrendData, TREND_TYPE } from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Utils} from './Utils';\nimport {TrendsManager, ITrendsOptions} from \"./TrendsManager\";\nimport {Screen} from \"./Screen\";\nimport {AxisMarks} from \"./AxisMarks\";\nimport {\n\tAXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions, IAnimationsOptions, AXIS_RANGE_TYPE\n} from \"./interfaces\";\nimport { Promise } from './deps/deps';\nimport { ChartPlugin } from './Plugin';\nimport {TChartColor} from \"./Color\";\n\n\ninterface IRecalculatedStateResult {\n\tchangedProps: IChartState,\n\tpatch: IChartState\n}\n\nconst CHART_STATE_EVENTS = {\n\tINITIAL_STATE_APPLIED: 'initialStateApplied',\n\tREADY: 'ready',\n\tDESTROY: 'destroy',\n\tCHANGE: 'change',\n\tTREND_CHANGE: 'trendChange',\n\tTRENDS_CHANGE: 'trendsChange',\n\tZOOM: 'zoom',\n\tRESIZE: 'resize',\n\tSCROLL: 'scroll',\n\tSCROLL_STOP: 'scrollStop',\n\tPLUGINS_STATE_CHANGED: 'pluginsStateChanged'\n};\n\n/**\n * readonly computed state state\n * calculated after recalculateState() call\n * contains cached values\n */\nexport interface IChartStateComputedData {\n\ttrends?: {\n\t\tmaxXVal: number,\n\t\tminXVal: number\n\t}\n}\n\nexport interface IChartState {\n\tprevState?: IChartState,\n\twidth?: number;\n\theight?: number;\n\tzoom?: number;\n\txAxis?: IAxisOptions,\n\tyAxis?: IAxisOptions,\n\tanimations?: IAnimationsOptions,\n\ttrends?: ITrendsOptions,\n\ttrendDefaultState?: ITrendOptions;\n\tcursor?: {\n\t\tdragMode?: boolean,\n\t\tx?: number,\n\t\ty?: number\n\t},\n\n\t/**\n\t * use fps = 0 for no limits\n\t */\n\tautoRender?: {enabled?: boolean, fps?: number};\n\n\t/**\n\t * by default 'WebGLRenderer'\n\t * also available 'CanvasRenderer'\n\t */\n\trenderer?: 'WebGLRenderer' | 'CanvasRenderer';\n\tfont?: {s?: string, m?: string, l?:string}\n\n\n\t/**\n\t * buffer size for displayed segments\n\t * used by widgets\n\t */\n\tmaxVisibleSegments?: number;\n\tautoResize?: boolean;\n\tcontrols?: {enabled: boolean};\n\tautoScroll?: boolean;\n\tshowStats?: boolean;\n\tbackgroundColor?: TChartColor;\n\tcomputedData?: IChartStateComputedData,\n\tpluginsState?: {[pluginName: string]: any};\n\teventEmitterMaxListeners?: number;\n}\n\nconst LIGHT_BLUE = '#5273bd';\n\n/**\n *  all state changes caused only by Chart.setState method\n */\nexport class Chart {\n\n\tstate: IChartState = {\n\t\tprevState: {},\n\t\tzoom: 0,\n\t\txAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.ALL,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tscroll: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 0, end: 5},\n\t\t\t\tmargin: {start: 0, end: 5}\n\t\t\t},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tgrid: {enabled: true, minSizePx:  100, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tautoScroll: true,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tyAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.RELATIVE_END,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 5, end: 5},\n\t\t\t\tmargin: {start: 5, end: 5},\n\t\t\t},\n\t\t\tgrid: {enabled: true, minSizePx:  50, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tanimations: {\n\t\t\tenabled: true,\n\t\t\ttrendChangeSpeed: 0.5,\n\t\t\ttrendChangeEase: void 0,\n\t\t\tzoomSpeed: 0.25,\n\t\t\tzoomEase:  void 0,\n\t\t\tscrollSpeed: 0.5,\n\t\t\tscrollEase: Linear.easeNone,\n\t\t\tautoScrollSpeed: 1,\n\t\t\tautoScrollEase: Linear.easeNone,\n\t\t},\n\t\tautoRender: {enabled: true, fps: 0},\n\t\tautoResize: true,\n\t\trenderer: 'WebGLRenderer',\n\t\tautoScroll: true,\n\t\tcontrols: {enabled: true},\n\t\ttrendDefaultState: {\n\t\t\tenabled: true,\n\t\t\ttype: TREND_TYPE.LINE,\n\t\t\tdata: [],\n\t\t\tmaxSegmentLength: 1000,\n\t\t\tlineWidth: 2,\n\t\t\tlineColor: 0xFFFFFF,\n\t\t\thasBackground: true,\n\t\t\tbackgroundColor: 'rgba(#FFFFFF, 0.07)',\n\t\t\thasBeacon: false,\n\t\t\tsettingsForTypes: {\n\t\t\t\tCANDLE: {\n\t\t\t\t\tminSegmentLengthInPx: 20,\n\t\t\t\t\tmaxSegmentLengthInPx: 40,\n\t\t\t\t},\n\t\t\t\tLINE: {\n\t\t\t\t\tminSegmentLengthInPx: 2,\n\t\t\t\t\tmaxSegmentLengthInPx: 10,\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcursor: {\n\t\t\tdragMode: false,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\tfont: {\n\t\t\ts: '11px Arial',\n\t\t\tm: '12px Arial',\n\t\t\tl: '13px Arial'\n\t\t},\n\t\tbackgroundColor: 0x000c2a,\n\t\tshowStats: false,\n\t\tpluginsState: {},\n\t\teventEmitterMaxListeners: 20,\n\t\tmaxVisibleSegments: 1280\n\t};\n\tplugins: {[pluginName: string]: ChartPlugin} = {};\n\ttrendsManager: TrendsManager;\n\tscreen: Screen;\n\txAxisMarks: AxisMarks;\n\tyAxisMarks: AxisMarks;\n\n\t/**\n\t * true then state was initialized and ready to use\n\t */\n\tisReady = false;\n\n\n\tprivate ee: EventEmitter;\n\n\tconstructor(\n\t\tinitialState: IChartState,\n\t\tplugins: ChartPlugin[] = []\n\t) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\n\n\t\tthis.state = Utils.deepMerge(this.state, initialState);\n\t\tthis.trendsManager = new TrendsManager(this, initialState);\n\t\tinitialState.trends = this.trendsManager.calculatedOptions;\n\t\tinitialState = this.installPlugins(plugins, initialState);\n\t\tthis.setState(initialState);\n\t\tthis.setState({computedData: this.getComputedData()});\n\t\tthis.savePrevState();\n\n\t\tthis.screen = new Screen(this);\n\t\tthis.xAxisMarks = new AxisMarks(this, AXIS_TYPE.X);\n\t\tthis.yAxisMarks = new AxisMarks(this, AXIS_TYPE.Y);\n\t\tthis.initListeners();\n\t\t\n\t\t// message to other modules that Chart.state is ready for use\n\t\tthis.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\n\t\t// message to other modules that Chart is ready for use\n\t\tthis.isReady = true;\n\t\tthis.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t}\n\n\t/**\n\t * destroy state, use ChartView.destroy to completely destroy state\n\t */\n\tdestroy() {\n\t\tthis.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t\tthis.ee.removeAllListeners();\n\t\tthis.state = {};\n\t}\n\n\tonDestroy(cb: Function) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t}\n\n\tonInitialStateApplied(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t}\n\n\tonReady(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t}\n\n\tonChange(cb: (changedProps: IChartState) => void ) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t}\n\n\tonTrendChange(cb: (trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t}\n\n\tonTrendsChange(cb: (trendsOptions: ITrendsOptions) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t}\n\n\tonScrollStop(cb: () => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t}\n\n\tonScroll(cb: (scrollOptions: {deltaX: number}) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t}\n\n\tonZoom(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t}\n\n\tonResize(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t}\n\n\tonPluginsStateChange(cb: (changedPluginsStates: {[pluginName: string]: Plugin}) => any) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t}\n\t\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.trendsManager.getTrend(trendName);\n\t}\n\n\tsetState(newState: IChartState, eventData?: any, silent = false) {\n\t\tlet stateData = this.state as {[key: string]: any};\n\t\tlet newStateObj = newState as {[key: string]: any};\n\n\t\tvar changedProps: {[key: string]: any} = {};\n\t\tfor (let key in newStateObj) {\n\t\t\tif (stateData[key] !== newStateObj[key]) {\n\t\t\t\tchangedProps[key] = newStateObj[key] as any;\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(changedProps as IChartState);\n\n\n\t\t// temporary remove trends state from newState by performance reasons\n\t\tlet trendsData: {[trendName: string]: ITrendData} = {};\n\t\tif (newState.trends) for (let trendName in newState.trends) {\n\t\t\tlet trendOptions = newState.trends[trendName];\n\t\t\tif (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t\t\tdelete trendOptions.data;\n\t\t}\n\t\tlet newStateContainsData = Object.keys(trendsData).length > 0;\n\t\t\n\n\t\tthis.state = Utils.deepMerge(this.state, newState, false);\n\n\t\t// return state to state\n\t\tif (newStateContainsData) for (let trendName in trendsData) {\n\t\t\tthis.state.trends[trendName].data = trendsData[trendName];\n\t\t}\n\n\t\tif (silent) return;\n\n\t\t// recalculate all dynamic state props\n\t\tvar recalculateResult = this.recalculateState(changedProps);\n\t\tchangedProps = recalculateResult.changedProps;\n\t\t\n\t\tthis.emitChangedStateEvents(changedProps, eventData);\n\n\t}\n\n\t/**\n\t * recalculate all computed state props\n\t */\n\tprivate recalculateState(changedProps?: IChartState): IRecalculatedStateResult {\n\t\tvar data = this.state;\n\t\tvar patch: IChartState = {};\n\t\tvar actualData = Utils.deepMerge({}, data);\n\n\t\t// recalculate scroll position by changed cursor options\n\t\tvar cursorOptions = changedProps.cursor;\n\t\tvar isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t\tif (isMouseDrag) {\n\t\t\tvar oldX = data.prevState.cursor.x;\n\t\t\tvar currentX =  cursorOptions.x;\n\t\t\tvar currentScroll = data.xAxis.range.scroll;\n\t\t\tvar deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t\t\tpatch.xAxis = {range: {scroll: currentScroll + deltaXVal}};\n\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: patch.xAxis} as IChartState)\n\t\t}\n\n\t\tlet chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\n\t\tlet scrollXChanged = false;\n\t\tlet needToRecalculateXAxis = (\n\t\t\tisMouseDrag ||\n\t\t\tchartWasResized ||\n\t\t\t(changedProps.xAxis && (changedProps.xAxis.range)) ||\n\t\t\tthis.state.xAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateXAxis) {\n\t\t\tlet xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t\t\tif (xAxisPatch) {\n\t\t\t\tscrollXChanged = true;\n\t\t\t\tpatch = Utils.deepMerge(patch, {xAxis: xAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: xAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\n\n\t\t// recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\n\t\tlet needToRecalculateYAxis = (\n\t\t\tchartWasResized ||\n\t\t\t(\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.RELATIVE_END ||\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.AUTO ||\n\t\t\t\tdata.yAxis.range.isMirrorMode\n\t\t\t) &&\n\t\t\t(scrollXChanged || changedProps.trends || changedProps.yAxis) ||\n\t\t\tthis.state.yAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateYAxis){\n\t\t\tlet yAxisPatch = this.recalculateYAxis(actualData);\n\t\t\tif (yAxisPatch) {\n\t\t\t\tpatch = Utils.deepMerge(patch, {yAxis: yAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {yAxis: yAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(patch);\n\t\tlet allChangedProps = Utils.deepMerge(changedProps, patch);\n\t\tpatch.computedData = this.getComputedData(allChangedProps);\n\t\tthis.savePrevState(patch);\n\t\tthis.state = Utils.deepMerge(this.state, patch);\n\t\treturn {changedProps: allChangedProps, patch: patch}\n\t}\n\n\tprivate getComputedData(changedProps?: IChartState): IChartStateComputedData {\n\t\tvar computeAll = !changedProps;\n\t\tvar computedData: IChartStateComputedData = {};\n\n\t\tif (computeAll || changedProps.trends && this.trendsManager) {\n\t\t\tcomputedData.trends = {\n\t\t\t\tmaxXVal: this.trendsManager.getEndXVal(),\n\t\t\t\tminXVal: this.trendsManager.getStartXVal()\n\t\t\t}\n\t\t}\n\t\treturn computedData;\n\t}\n\n\tprivate savePrevState(changedProps?: IChartState) {\n\t\tif (!changedProps) changedProps = this.state;\n\t\tvar prevState = this.state.prevState;\n\n\t\t// prevent to store prev trend state by performance reasons\n\t\tUtils.copyProps(this.state, prevState, changedProps, ['trends']);\n\n\t}\n\n\tprivate emitChangedStateEvents(changedProps: IChartState, eventData: any) {\n\t\tvar prevState = this.state.prevState;\n\n\t\t// emit common change event\n\t\tthis.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\n\t\t// emit event for each changed state property\n\t\tfor (let key in changedProps) {\n\t\t\tthis.ee.emit(key + 'Change', (changedProps as {[key: string]: any})[key], eventData);\n\t\t}\n\n\t\tif (!this.isReady) return;\n\n\t\t// emit special events based on changed state\n\t\tlet scrollStopEventNeeded = (\n\t\t\tchangedProps.cursor &&\n\t\t\tchangedProps.cursor.dragMode === false &&\n\t\t\tprevState.cursor.dragMode === true\n\t\t);\n\t\tscrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\n\t\tlet scrollChangeEventsNeeded = (\n\t\t\tchangedProps.xAxis &&\n\t\t\tchangedProps.xAxis.range &&\n\t\t\tchangedProps.xAxis.range.scroll !== void 0\n\t\t);\n\t\tscrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\n\t\tlet zoomEventsNeeded = (\n\t\t\t(changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\n\t\t\t(changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom)\n\t\t);\n\t\tzoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\n\t\tlet resizeEventNeeded = (changedProps.width || changedProps.height);\n\t\tresizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\n\t\tlet pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\n\t\tpluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t}\n\n\n\t/**\n\t * init plugins and save plugins options in initialState\n\t */\n\tprivate installPlugins(plugins: ChartPlugin[], initialState: IChartState): IChartState {\n\t\tinitialState.pluginsState = {};\n\t\tplugins.forEach(plugin => {\n\t\t\tlet PluginClass = plugin.constructor as typeof ChartPlugin;\n\t\t\tlet pluginName = PluginClass.NAME;\n\t\t\tinitialState.pluginsState[pluginName] = Utils.deepMerge({}, plugin.initialState);\n\t\t\tthis.plugins[pluginName] = plugin;\n\t\t\tplugin.setupChart(this);\n\t\t});\n\t\treturn initialState;\n\t}\n\n\n\t/**\n\t * returns plugin instance by plugin name\n\t * @example\n\t */\n\tgetPlugin(pluginName: string): ChartPlugin {\n\t\treturn this.plugins[pluginName];\n\t}\n\n\n\tprivate initListeners() {\n\t\tthis.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, (changedTrends: ITrendsOptions, newData: ITrendData) => {\n\t\t\tthis.handleTrendsChange(changedTrends, newData)\n\t\t});\n\t}\n\n\tprivate handleTrendsChange(changedTrends: ITrendsOptions, newData: ITrendData) {\n\t\tfor (let trendName in changedTrends) {\n\t\t\tthis.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t\t}\n\t}\n\n\tprivate recalculateXAxis(actualData: IChartState, changedProps: IChartState): IAxisOptions {\n\t\tvar axisRange = actualData.xAxis.range;\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar isInitialize = axisRange.zeroVal == void 0;\n\t\tvar zeroVal: number, scaleFactor: number;\n\t\tvar zoom = axisRange.zoom;\n\n\t\tif (axisRange.isMirrorMode) {\n\t\t\tUtils.error('range.isMirrorMode available only for yAxis.range');\n\t\t}\n\n\t\tif (isInitialize) {\n\t\t\tzeroVal = axisRange.from;\n\t\t\tscaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t} else {\n\t\t\tzeroVal = axisRange.zeroVal;\n\t\t\tscaleFactor = axisRange.scaleFactor;\n\n\t\t\t// recalculate range.zoom and range.scroll then range.from or range.to was changed\n\t\t\tif (\n\t\t\t\tchangedProps.xAxis &&\n\t\t\t\t(changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)\n\t\t\t) {\n\t\t\t\tif (changedProps.xAxis.range.zoom) {\n\t\t\t\t\tUtils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t\t\t\t}\n\t\t\t\tlet currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\t\tpatch.range.scroll = axisRange.from - zeroVal;\n\t\t\t\tpatch.range.zoom = currentScaleFactor / scaleFactor;\n\t\t\t\treturn patch;\n\t\t\t}\n\t\t}\n\n\n\t\t// recalculate range.from and range.to then range.zoom or range.scroll was changed\n\t\tdo {\n\t\t\tvar from = zeroVal + axisRange.scroll;\n\t\t\tvar to = from + actualData.width / (scaleFactor * zoom);\n\t\t\tvar rangeLength = to - from;\n\t\t\tvar needToRecalculateZoom = false;\n\t\t\tvar rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\n\t\t\tvar rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\n\t\t\tneedToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t\t\tif (needToRecalculateZoom) {\n\t\t\t\tvar fixScale = rangeLength > axisRange.maxLength ?\n\t\t\t\t\trangeLength / axisRange.maxLength :\n\t\t\t\t\trangeLength / axisRange.minLength;\n\t\t\t\tvar zoom = zoom * fixScale;\n\t\t\t\tpatch.range.zoom = zoom;\n\t\t\t}\n\t\t} while (needToRecalculateZoom);\n\n\t\tpatch.range.from = from;\n\t\tpatch.range.to = to;\n\t\treturn patch;\n\t}\n\n\n\tprivate recalculateYAxis(actualData: IChartState): IAxisOptions {\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar yAxisRange = actualData.yAxis.range;\n\t\tvar isInitialize = yAxisRange.scaleFactor == void 0;\n\t\tvar trends = this.trendsManager;\n\t\tvar trendsEndXVal = trends.getEndXVal();\n\t\tvar trendsStartXVal = trends.getStartXVal();\n\t\tvar xRange = actualData.xAxis.range;\n\t\tvar {from: xFrom, to: xTo} = xRange;\n\t\tvar xRangeLength = xTo - xFrom;\n\t\tvar zeroVal: number, scaleFactor: number, scroll: number, zoom: number, needToZoom: boolean;\n\n\t\t// check situation when state was scrolled behind trends end or before trends start\n\t\tif (xTo > trendsEndXVal) {\n\t\t\txTo = trendsEndXVal;\n\t\t\txFrom = xTo - xRangeLength;\n\t\t} else if (xFrom < trendsStartXVal) {\n\t\t\txFrom = trendsStartXVal;\n\t\t\txTo = xFrom + xRangeLength;\n\t\t}\n\n\t\tvar maxY = trends.getMaxYVal(xFrom, xTo);\n\t\tvar minY = trends.getMinYVal(xFrom, xTo);\n\n\t\tvar trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t\tif (yAxisRange.type == AXIS_RANGE_TYPE.RELATIVE_END) {\n\t\t\tif (trendLastY > maxY) maxY = trendLastY;\n\t\t\tif (trendLastY < minY) minY = trendLastY;\n\t\t}\n\n\t\tif (yAxisRange.isMirrorMode) {\n\t\t\tif (yAxisRange.zeroVal == void 0) Utils.error('range.zeroVal must be set when range.isMirrorMode');\n\t\t\tlet distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t\t\tlet distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t\t\tlet maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t\t\tmaxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t\t\tminY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t\t}\n\t\tlet margin = yAxisRange.margin;\n\t\tlet padding = {\n\t\t\tstart: yAxisRange.padding.start + margin.start,\n\t\t\tend: yAxisRange.padding.end + margin.end\n\t\t};\n\n\t\tif (padding.end + padding.start >= actualData.height) {\n\t\t\tUtils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\n\t\t}\n\n\t\tlet rangeLength = maxY - minY;\n\t\tlet paddingTopInPercents = padding.end / actualData.height;\n\t\tlet paddingBottomInPercents = padding.start / actualData.height;\n\t\tlet rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t\tlet visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t\tlet fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t\tlet toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t\t\n\t\tif (isInitialize) {\n\t\t\tzeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t\t\tscaleFactor = actualData.height / (toVal - fromVal);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t\tneedToZoom = true;\n\t\t} else {\n\t\t\tscaleFactor = yAxisRange.scaleFactor;\n\t\t\tzeroVal = yAxisRange.zeroVal;\n\n\t\t\tlet maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t\t\tlet minScreenY = Math.round(this.getScreenYByValue(minY));\n\t\t\tneedToZoom = (\n\t\t\t\tmaxScreenY > actualData.height - margin.end ||\n\t\t\t\tmaxScreenY < actualData.height - padding.end ||\n\t\t\t\tminScreenY < margin.start ||\n\t\t\t\tminScreenY > padding.start\n\t\t\t);\n\t\t}\n\n\t\tif (!needToZoom) return null;\n\n\t\tscroll = fromVal - zeroVal;\n\t\tzoom = (actualData.height / (toVal - fromVal)) / scaleFactor ;\n\n\t\tvar currentAxisRange = this.state.yAxis.range;\n\t\tif (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t\tif (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t\tif (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t\tif (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t\t\n\t\treturn patch;\n\t}\n\n\tzoom(zoomValue: number, origin = 0.5): Promise<void> {\n\t\tlet {zoom, scroll, scaleFactor} = this.state.xAxis.range;\n\t\tlet newZoom = zoom * zoomValue;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\tlet nextRange = this.state.width / (scaleFactor * newZoom);\n\t\tlet newScroll = scroll + (currentRange - nextRange) * origin;\n\t\tthis.setState({xAxis: {range: {zoom: newZoom, scroll: newScroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.zoomSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\t\n\tzoomToRange(range: number, origin?: number): Promise<void> {\n\t\tvar {scaleFactor, zoom} = this.state.xAxis.range;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\treturn this.zoom(currentRange / range, origin);\n\t}\n\n\tscrollToEnd(): Promise<void> {\n\t\tlet state = this.state;\n\t\tlet endXVal = this.trendsManager.getEndXVal();\n\t\tlet range = state.xAxis.range;\n\t\tvar scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t\tthis.setState({xAxis: {range: {scroll: scroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.scrollSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to xVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.xAxis.range;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to yVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.yAxis.range;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\n\t}\n\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  returns x value by screen x coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\tvar {zeroVal, scroll} = this.state.xAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  returns y value by screen y coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\tvar {zeroVal, scroll} = this.state.yAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByYAxis(y);\n\t}\n\n\n\t/**\n\t *  returns screen x value by screen y coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t/**\n\t *  returns screen y value by screen y coordinate\n\t */\n\tgetScreenYByValue(yVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t\treturn this.valueToPxByYAxis(yVal - zeroVal - scroll)\n\t}\n\n\n\t/**\n\t * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\n\n\tgetScreenLeftVal() {\n\t\treturn this.getValueByScreenX(0);\n\t}\n\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.state.width);\n\t}\n\n\n\tgetPaddingRight(): number {\n\t\treturn this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Chart.ts\n **/","import {Chart, IChartState} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {TrendSegmentsManager} from \"./TrendSegmentsManager\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Promise} from './deps/deps';\nimport { TChartColor } from './Color';\n\nexport interface IPrependPromiseExecutor {\n\t(requestedDataLength: number, resolve: (data: TTrendRawData) => void, reject: () => void): void;\n}\nconst EVENTS = {\n\tCHANGE: 'Change',\n\tPREPEND_REQUEST: 'prependRequest'\n};\nexport enum TREND_TYPE {LINE, CANDLE}\nexport type TTrendRawData = ITrendData | number[];\nexport interface ITrendItem {xVal: number, yVal: number, id?: number}\nexport interface ITrendData extends Array<ITrendItem>{}\nexport interface ITrendTypeSettings {\n\tminSegmentLengthInPx?: number;\n\tmaxSegmentLengthInPx?: number;\n}\nexport interface ITrendOptions {\n\tenabled?: boolean,\n\tdata?: ITrendData\n\tdataset?: ITrendData | number[];\n\tname?: string;\n\ttype?: TREND_TYPE;\n\tlineWidth?: number;\n\tlineColor?: TChartColor;\n\tbackgroundColor?: TChartColor;\n\thasIndicator?: boolean;\n\thasBackground?: boolean;\n\thasBeacon?: boolean;\n\tmaxSegmentLength?: number;\n\tsettingsForTypes?: {\n\t\tCANDLE?: ITrendTypeSettings,\n\t\tLINE?: ITrendTypeSettings\n\t}\n}\n\nexport class Trend {\n\tname: string;\n\tsegmentsManager: TrendSegmentsManager;\n\tminXVal = Infinity;\n\tminYVal = Infinity;\n\tmaxXVal = -Infinity;\n\tmaxYVal = -Infinity;\n\tprivate chartState: Chart;\n\tprivate calculatedOptions: ITrendOptions;\n\tprivate prependRequest: Promise<TTrendRawData>;\n\tprivate ee: EventEmitter;\n\t\n\tconstructor(chartState: Chart, trendName: string, initialState: IChartState) {\n\t\tvar options = initialState.trends[trendName];\n\t\tthis.name = trendName;\n\t\tthis.chartState = chartState;\n\t\tthis.calculatedOptions = Utils.deepMerge(this.chartState.state.trendDefaultState, options);\n\t\tthis.calculatedOptions.name = trendName;\n\t\tif (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t\tthis.calculatedOptions.dataset = [];\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvents();\n\t}\n\n\tprivate onInitialStateApplied() {\n\t\tthis.segmentsManager = new TrendSegmentsManager(this.chartState, this);\n\t}\n\n\tprivate bindEvents() {\n\t\tvar chartState = this.chartState;\n\t\tchartState.onInitialStateApplied(() => this.onInitialStateApplied());\n\t\tchartState.onScrollStop(() => this.checkForPrependRequest());\n\t\tchartState.onZoom(() => this.checkForPrependRequest());\n\t\tchartState.onTrendChange((trendName, changedOptions, newData) => this.ee.emit(EVENTS.CHANGE, changedOptions, newData));\n\t\tchartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tgetCalculatedOptions() {\n\t\treturn this.calculatedOptions;\n\t}\n\n\tappendData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData());\n\t\tvar updatedTrendData = options.data.concat(newData);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprependData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData(), true);\n\t\tvar updatedTrendData = newData.concat(options.data);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprivate changeData(allData: ITrendData, newData: ITrendData) {\n\t\tfor (let item of newData) {\n\t\t\tif (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t\t\tif (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t\t\tif (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t\t\tif (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t\t}\n\t\tvar options = this.getOptions();\n\t\tvar statePatch: IChartState = {trends: {[options.name]: {data: allData}}};\n\t\tthis.chartState.setState(statePatch, newData);\n\t}\n\t\n\tgetData(fromX?: number, toX?: number): ITrendData {\n\t\tvar data = this.getOptions().data;\n\t\tif (fromX == void 0 && toX == void 0) return data;\n\n\t\tfromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t\ttoX = toX !== void 0 ? toX : data[data.length].xVal;\n\t\tvar filteredData: ITrendData = [];\n\t\tfor (let item of data) {\n\t\t\tif (item.xVal < fromX) continue;\n\t\t\tif (item.xVal > toX) break;\n\t\t\tfilteredData.push(item)\n\t\t}\n\t\treturn filteredData;\n\t}\n\n\tgetFirstItem(): ITrendItem {\n\t\treturn this.getOptions().data[0];\n\t}\n\t\n\tgetLastItem(): ITrendItem {\n\t\tvar data = this.getOptions().data;\n\t\treturn data[data.length - 1];\n\t}\n\n\tgetOptions() {\n\t\treturn this.chartState.state.trends[this.name]\n\t}\n\n\tsetOptions(options: ITrendOptions) {\n\t\tthis.chartState.setState({trends: {[this.name]: options}});\n\t}\n\n\tonPrependRequest(cb: IPrependPromiseExecutor): Function {\n\t\tthis.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t\t}\n\t}\n\n\t/**\n\t * shortcut for Chart.onTrendChange\n\t */\n\tonChange(cb: (changedOptions: ITrendOptions, newData: ITrendData) => void): Function {\n\t\tthis.ee.on(EVENTS.CHANGE, cb);\n\t\treturn () => { this.ee.off(EVENTS.CHANGE, cb);}\n\t}\n\n\tonDataChange(cb: (newData: ITrendData) => void): Function {\n\t\tvar onChangeCb = (changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tif (newData) cb(newData);\n\t\t};\n\t\tthis.ee.on(EVENTS.CHANGE, onChangeCb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.CHANGE, onChangeCb);\n\t\t}\n\t}\n\n\tprivate checkForPrependRequest() {\n\t\tif (this.prependRequest) return;\n\t\tvar chartState = this.chartState;\n\t\tvar minXVal = chartState.state.computedData.trends.minXVal;\n\t\tvar minScreenX = chartState.getScreenXByValue(minXVal);\n\t\tvar needToRequest = minScreenX > 0;\n\t\tvar {from, to} = chartState.state.xAxis.range;\n\t\tvar requestedDataLength = to - from;\n\t\tif (!needToRequest) return;\n\t\t\n\t\tthis.prependRequest = new Promise<TTrendRawData>((resolve: Function, reject: Function) => {\n\t\t\tthis.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t\t});\n\n\t\tthis.prependRequest.then((newData: TTrendRawData) => {\n\t\t\tthis.prependData(newData);\n\t\t\tthis.prependRequest = null;\n\t\t}, () => {\n\t\t\tthis.prependRequest = null;\n\t\t})\n\t\n\t}\n\n\tstatic prepareData (newData: TTrendRawData, currentData?: ITrendData, isPrepend = false): ITrendData {\n\t\tvar data: ITrendData = [];\n\t\tif (typeof newData[0] == 'number') {\n\t\t\tcurrentData = currentData || [];\n\t\t\tlet initialItem: ITrendItem;\n\t\t\tlet xVal: number;\n\t\t\tif (isPrepend) {\n\t\t\t\tinitialItem = currentData[0];\n\t\t\t\txVal = initialItem.xVal - newData.length;\n\t\t\t} else {\n\t\t\t\tinitialItem = currentData[currentData.length - 1];\n\t\t\t\txVal = initialItem ? initialItem.xVal + 1 : 0;\n\t\t\t}\n\t\t\tfor (let yVal of newData as number[]) {\n\t\t\t\tdata.push({xVal: xVal, yVal: yVal, id: Utils.getUid()});\n\t\t\t\txVal++;\n\t\t\t}\n\t\t} else {\n\t\t\tdata = newData as ITrendData;\n\t\t}\n\t\treturn data;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Trend.ts\n **/","import { IIteralable } from \"./interfaces\";\nimport { EventEmitter } from './EventEmmiter';\nimport { Chart } from \"./Chart\";\nimport Vector3 = THREE.Vector3;\nimport { ITrendData, ITrendOptions, ITrendItem, Trend, TREND_TYPE, ITrendTypeSettings } from \"./Trend\";\nimport { Utils } from \"./Utils\";\n\nconst MAX_ANIMATED_SEGMENTS = 100;\nconst EVENTS = {\n\tREBUILD: 'rebuild',\n\tDISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\n\tANIMATION_FRAME: 'animationFrame'\n};\n\n/**\n *  Class helps to display and animate trends segments\n */\nexport class TrendSegmentsManager {\n\tsegmentsById: {[id: string]: TrendSegment} = {};\n\tsegments: TrendSegment[] = [];\n\tchartState: Chart;\n\tanimatedSegmentsIds: number[] = [];\n\tmaxSegmentLength: number;\n\tsegmentsLength = 0;\n\tfirstDisplayedSegmentInd: number;\n\tfirstDisplayedSegment: TrendSegment;\n\tlastDisplayedSegmentInd: number;\n\tlastDisplayedSegment: TrendSegment;\n\tprivate appendAnimation: TweenLite;\n\tprivate prependAnimation: TweenLite;\n\tprivate animatedSegmentsForAppend: number[] = [];\n\tprivate animatedSegmentsForPrepend: number[] = [];\n\tprivate nextEmptyId = 0;\n\tprivate startSegmentId = 0;\n\tprivate endSegmentId = 0;\n\tprivate trend: Trend;\n\tprivate ee: EventEmitter;\n\n\tconstructor (chartState: Chart, trend: Trend) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.trend = trend;\n\t\tthis.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t\tthis.tryToRebuildSegments();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.trend.onChange((changedOptions, newData) => this.onTrendChangeHandler(changedOptions, newData));\n\t\tthis.chartState.onZoom(() => this.onZoomHandler());\n\t\tthis.chartState.onScroll(() => this.recalculateDisplayedRange());\n\t\tthis.chartState.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.appendAnimation && this.appendAnimation.kill();\n\t\tthis.prependAnimation && this.prependAnimation.kill();\n\t}\n\n\tprivate onZoomHandler() {\n\t\tlet segmentsRebuilded = this.tryToRebuildSegments();\n\t\tif (!segmentsRebuilded) {\n\t\t\tthis.recalculateDisplayedRange()\n\t\t}\n\t}\n\n\tprivate onTrendChangeHandler(changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar needToRebuildSegments = (\n\t\t\tchangedOptions.type != void 0 ||\n\t\t\tchangedOptions.maxSegmentLength != void 0\n\t\t);\n\n\n\t\tif (needToRebuildSegments) {\n\t\t\tthis.tryToRebuildSegments(true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!newData) return;\n\n\t\tvar data = this.trend.getData();\n\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\tisAppend ? this.appendData(newData) : this.prependData(newData);\n\t\tthis.recalculateDisplayedRange();\n\t}\n\n\tgetSegment(id: number) {\n\t\treturn this.segmentsById[id];\n\t}\n\n\tgetEndSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.endSegmentId];\n\t}\n\n\tgetStartSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.startSegmentId];\n\t}\n\t\n\tprivate tryToRebuildSegments(force = false): boolean {\n\t\tlet options = this.trend.getOptions();\n\t\tlet trendTypeName = TREND_TYPE[options.type] as string;\n\t\tlet trendTypesSettings =  options.settingsForTypes as IIteralable;\n\t\tlet trendTypeSettings = trendTypesSettings[trendTypeName] as ITrendTypeSettings;\n\t\tlet {\n\t\t\tminSegmentLengthInPx,\n\t\t\tmaxSegmentLengthInPx\n\t\t} = trendTypeSettings;\n\n\t\tlet needToRebuild = this.segments.length === 0 || force;\n\t\tlet segmentLength = this.maxSegmentLength;\n\n\t\t// call toFixed(2) to prevent floating segment error compare\n\t\tlet currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t\tlet currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\n\t\tif (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t\t} else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t\t}\n\n\t\tif (!needToRebuild) return false;\n\n\t\tthis.maxSegmentLength = segmentLength;\n\t\tthis.segmentsById = {};\n\t\tthis.segments = [];\n\t\tthis.nextEmptyId = 0;\n\t\tthis.startSegmentId = 0;\n\t\tthis.endSegmentId = 0;\n\t\tthis.segmentsLength = 0;\n\t\tthis.stopAllAnimations();\n\t\tthis.appendData(null, true);\n\t\tthis.recalculateDisplayedRange(true);\n\t\tthis.ee.emit(EVENTS.REBUILD);\n\t}\n\n\tprivate stopAllAnimations() {\n\t\tthis.animatedSegmentsIds = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tif (this.prependAnimation) this.prependAnimation.kill();\n\t\tif (this.appendAnimation) this.appendAnimation.kill();\n\t}\n\t\n\tprivate recalculateDisplayedRange(segmentsAreRebuilded = false) {\n\t\tvar {from, to} = this.chartState.state.xAxis.range;\n\t\tvar {firstDisplayedSegment, lastDisplayedSegment} = this;\n\t\tvar displayedRange = to - from;\n\n\t\tthis.firstDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\n\t\tthis.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n\t\tthis.lastDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\n\t\tthis.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n\t\tif (segmentsAreRebuilded) return;\n\n\t\tvar displayedRangeChanged = (\n\t\t\tfirstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\n\t\t\tlastDisplayedSegment.id !== this.lastDisplayedSegment.id\n\t\t);\n\t\tif (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t}\n\n\t// getSegments(fromX?: number, toX?: number): TrendSegment[] {\n\t// \tvar segments = this.segments;\n\t// \tif (fromX == void 0 && toX == void 0) return segments;\n\t// \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\n\t// \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\n\t// \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\n\t// \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\n\t// \treturn segments.slice(startSegmentInd, endSegmentInd);\n\t// }\n\n\t/**\n\t * returns array of segments for values array\n\t * values must be sorted!\n\t */\n\tgetSegmentsForXValues(values: number[]): TrendSegment[] {\n\t\tvar valueInd = 0;\n\t\tvar value = values[valueInd];\n\t\tvar lastValueInd = values.length - 1;\n\t\tvar results: TrendSegment[] = [];\n\t\tvar segment = this.getStartSegment();\n\t\tif (!segment.hasValue) return [];\n\t\twhile (segment) {\n\t\t\n\t\t\twhile (value < segment.startXVal) {\n\t\t\t\tresults.push(void 0);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\n\t\t\twhile (value > segment.endXVal) {\n\t\t\t\tsegment = segment.getNext();\n\t\t\t\tif (!segment) break;\n\t\t\t}\n\t\t\n\t\t\tvar valueInPoint = (\n\t\t\t\tsegment.startXVal == value || segment.endXVal == value ||\n\t\t\t\t(segment.startXVal < value && segment.endXVal > value)\n\t\t\t);\n\t\t\tif (valueInPoint) {\n\t\t\t\tresults.push(segment);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\tif (valueInd > lastValueInd) break;\n\t\t}\n\t\treturn results;\n\t}\n\n\tonAnimationFrame(cb: (animationState: TrendSegmentsManager) => void): Function {\n\t\treturn this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t}\n\n\tonRebuild(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.REBUILD, cb);\n\t}\n\n\tonDisplayedRangeChanged(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t}\n\t\n\tallocateNextSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar prevSegment = this.segmentsById[this.endSegmentId];\n\t\tif (prevSegment && prevSegment.hasValue) {\n\t\t\tprevSegment.nextId = id;\n\t\t\tsegment.prevId = prevSegment.id;\n\t\t}\n\t\tthis.endSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.push(segment);\n\t\treturn segment;\n\t}\n\n\tallocatePrevSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar nextSegment = this.segmentsById[this.startSegmentId];\n\t\tif (nextSegment && nextSegment.hasValue) {\n\t\t\tnextSegment.prevId = id;\n\t\t\tsegment.nextId = nextSegment.id;\n\t\t}\n\t\tthis.startSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.unshift(segment);\n\t\treturn segment;\n\t}\n\n\tprivate appendData(newData: ITrendData, needRebuildSegments = false) {\n\n\t\t// WARNING: bottleneck method!\n\n\t\t// var t1 = performance.now();\n\t\tvar trendData = this.trend.getData();\n\t\tif (needRebuildSegments) {\n\t\t\tnewData = trendData;\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t}\n\n\t\tvar startItemInd = trendData.length - newData.length;\n\t\tvar segment = this.getEndSegment() || this.allocateNextSegment();\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\tvar itemInd = 0;\n\t\twhile (itemInd < newData.length) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.appendItem(item);\n\t\t\tlet isLastItem = itemInd == newData.length - 1;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd++;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForAppend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t\t\t\t\tsegment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForAppend.push(id);\n\n\t\t\t}\n\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocateNextSegment();\n\t\t\tlet prevItem = trendData[startItemInd + itemInd - 1];\n\t\t\tsegment.appendItem(prevItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\t// var t2 = performance.now();\n\t\t// console.log(t2 - t1);\n\n\t\t// do not create animation if segments was rebuilded\n\t\tif (needRebuildSegments) {\n\t\t\tfor (let segmentId of this.animatedSegmentsForAppend) {\n\t\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\t\tsegment.currentAnimationState = segment.createAnimationState();\n\t\t\t}\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t\treturn;\n\t\t}\n\t\tif (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time);\n\t}\n\n\n\t// TODO: refactor duplicated code from appendData\n\tprivate prependData(newData: ITrendData) {\n\t\tvar trendData = this.trend.getData();\n\t\tvar segment = this.getStartSegment() || this.segmentsById[0];\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar itemInd = newData.length - 1;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\twhile (itemInd >= 0) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.prependItem(item);\n\t\t\tlet isLastItem = itemInd == 0;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd--;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForPrepend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t\t\t\t\tsegment.initialAnimationState.endYVal =  initialAnimationState.startYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForPrepend.push(id);\n\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocatePrevSegment();\n\t\t\tlet nextItem = trendData[itemInd + 1];\n\t\t\tsegment.prependItem(nextItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\tif (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time, true);\n\t}\n\n\tprivate animate(time: number, isPrepend = false) {\n\n\t\tvar animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tvar animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\n\t\tif ((animation && animation.isActive()) || time == 0) {\n\t\t\tif (animation) animation.kill();\n\t\t\tthis.onAnimationFrameHandler(1, isPrepend);\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar ease = animationsOptions.trendChangeEase;\n\t\tvar objectToAnimate = {animationValue: 0};\n\t\tanimation = TweenLite.to(objectToAnimate, time, {animationValue: 1, ease});\n\t\tanimation.eventCallback('onUpdate', () => this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend));\n\t\tanimation.eventCallback('onComplete', () => {\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\tthis.appendAnimation = null;\n\t\t});\n\n\t\tif (isPrepend) {\n\t\t\tthis.prependAnimation = animation;\n\t\t} else {\n\t\t\tthis.appendAnimation = animation;\n\t\t}\n\t}\n\n\tprivate onAnimationFrameHandler(coefficient: number, isPrepend = false) {\n\t\tlet animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tfor (let segmentId of animatedSegmentsIds) {\n\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\tfor (let key in segment.targetAnimationState) {\n\t\t\t\tlet targetValue = segment.targetAnimationState[key] as number;\n\t\t\t\tlet initialValue = segment.initialAnimationState[key] as number;\n\t\t\t\tlet currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t\t\t\tsegment.currentAnimationState[key] = currentValue;\n\t\t\t}\n\t\t}\n\t\tthis.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t\tthis.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t}\n\n}\n\nexport interface ITrendSegmentState extends IIteralable {\n\txVal?: number;\n\tyVal?: number;\n\tstartXVal?: number;\n\tstartYVal?: number;\n\tendXVal?: number;\n\tendYVal?: number;\n\tmaxYVal?: number;\n\tminYVal?: number;\n\tmaxLength?: number;\n}\n\nexport class TrendSegment implements ITrendSegmentState {\n\tid: number;\n\tprevId: number;\n\tnextId: number;\n\thasValue: boolean;\n\txVal: number;\n\tyVal: number;\n\tstartXVal: number;\n\tstartYVal: number;\n\tendXVal: number;\n\tendYVal: number;\n\tmaxYVal: number;\n\tminYVal: number;\n\tisCompleted = false;\n\tmaxLength: number;\n\titems: ITrendItem[] = [];\n\n\tinitialAnimationState: ITrendSegmentState = {};\n\ttargetAnimationState: ITrendSegmentState = {};\n\tcurrentAnimationState: ITrendSegmentState = {};\n\n\tprivate trendSegments: TrendSegmentsManager;\n\t\n\tconstructor(trendPoints: TrendSegmentsManager, id: number) {\n\t\tthis.trendSegments = trendPoints;\n\t\tthis.id = id;\n\t\tthis.maxLength = trendPoints.maxSegmentLength;\n\t}\n\n\tcreateAnimationState(): ITrendSegmentState {\n\t\tvar {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t} = this;\n\t\treturn {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t}\n\t};\n\t\n\tappendItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.push(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar startXVal = items[0].xVal;\n\t\tif (item.xVal - startXVal > this.maxLength) return false;\n\t\titems.push(item);\n\t\treturn true;\n\t}\n\n\tprependItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.unshift(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar endXVal = items[items.length - 1].xVal;\n\t\tif (endXVal - item.xVal > this.maxLength) return false;\n\t\titems.unshift(item);\n\t\treturn true;\n\t}\n\n\tcomplete() {\n\t\tthis.isCompleted = true;\n\t\tthis.recalculateItems();\n\t\tthis.items = []; // free memory for completed ranges\n\t}\n\n\trecalculateItems() {\n\t\tlet items = this.items;\n\t\tlet itemsLength = items.length;\n\t\tif (itemsLength === 0) Utils.error('Unable to create TrendSegment without TrendItems');\n\t\tlet endItem = items[itemsLength - 1];\n\t\tlet {xVal: endXVal, yVal: endYVal} = endItem;\n\t\tlet startXVal: number, startYVal: number;\n\n\n\t\tlet startItem = items[0];\n\t\tstartXVal = startItem.xVal;\n\t\tstartYVal = startItem.yVal;\n\n\t\tlet minX = Math.min(startXVal, endXVal);\n\t\tlet maxX = Math.max(startXVal, endXVal);\n\t\tlet middleXVal = minX + (maxX - minX) / 2;\n\n\t\tlet minY = Math.min(startYVal, endYVal);\n\t\tlet maxY = Math.max(startYVal, endYVal);\n\t\tlet middleYVal = minY + (maxY - minY) / 2;\n\n\t\tlet yVals = items.map(item => item.yVal);\n\n\t\tthis.startXVal = startXVal;\n\t\tthis.startYVal = startYVal;\n\t\tthis.endXVal = endXVal;\n\t\tthis.endYVal = endYVal;\n\t\tthis.xVal = middleXVal;\n\t\tthis.yVal = middleYVal;\n\t\tthis.maxYVal = Math.max(...yVals);\n\t\tthis.minYVal = Math.min(...yVals);\n\t\tif (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t}\n\n\tgetNext() {\n\t\tvar nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t\treturn nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t}\n\n\tgetPrev() {\n\t\tvar prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t\treturn prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t}\n\t\n\tgetFrameVal(): Vector3 {\n\t\tlet {xVal, yVal} = this.createAnimationState();\n\t\treturn new Vector3(xVal, yVal, 0);\n\t}\n\n\tgetFramePoint(): Vector3 {\n\t\tvar frameVal = this.getFrameVal();\n\t\treturn this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendSegmentsManager.ts\n **/","\nimport {Trend, ITrendOptions} from \"./Trend\";\nimport {Chart, IChartState} from \"./Chart\";\nimport { EventEmitter } from './EventEmmiter';\n\nexport interface ITrendsOptions {\n\t[trendName: string]: ITrendOptions;\n}\n\nconst EVENTS = {\n\tSEGMENTS_REBUILDED: 'segmentsRebuilded'\n};\n\n/**\n * Trends manager\n */\nexport class TrendsManager {\n\ttrends: {[name: string]: Trend} = {};\n\tcalculatedOptions: ITrendsOptions;\n\tprivate ee = new EventEmitter();\n\tprivate chartState: Chart;\n\t\n\tconstructor(state: Chart, initialState: IChartState) {\n\t\tthis.chartState = state;\n\t\tvar trendsCalculatedOptions: ITrendsOptions = {};\n\t\tfor (let trendName in initialState.trends) {\n\t\t\tlet trend = this.createTrend(state, trendName, initialState);\n\t\t\ttrendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t\t}\n\t\tthis.calculatedOptions = trendsCalculatedOptions;\n\t\tthis.bindEvents();\n\t}\n\n\tgetTrend(trendName: string) {\n\t\treturn this.trends[trendName];\n\t}\n\t\n\tgetEnabledTrends(): Trend[] {\n\t\tvar enabledTrends: Trend[] = [];\n\t\tvar allTrends = this.trends;\n\t\tfor (let trendName in allTrends) {\n\t\t\tlet trend = allTrends[trendName];\n\t\t\ttrend.getOptions().enabled && enabledTrends.push(trend);\n\t\t}\n\t\treturn enabledTrends;\n\t}\n\n\n\tgetStartXVal() {\n\t\tvar trends = this.getEnabledTrends();\n\t\treturn trends[0].getData()[0].xVal;\n\t}\n\n\n\tgetEndXVal(): number {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar firstTrendData = trends[0].getData();\n\t\treturn firstTrendData[firstTrendData.length - 1].xVal;\n\t}\n\t\n\t\n\tgetExtremumYVal(extremumIsMax: boolean, fromX?: number, toX?: number) {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar compareFn: Function;\n\t\tvar result: number;\n\t\tif (extremumIsMax) {\n\t\t\tresult = -Infinity;\n\t\t\tcompareFn = Math.max;\n\t\t} else {\n\t\t\tresult = Infinity;\n\t\t\tcompareFn = Math.min;\n\t\t}\n\t\tfor (let trend of trends) {\n\t\t\tvar trendData = trend.getData(fromX, toX);\n\t\t\tvar trendYValues = trendData.map((dataItem) => dataItem.yVal);\n\t\t\tresult = compareFn(result, ...trendYValues);\n\t\t}\n\t\tif (result == Infinity || result == -Infinity) result = NaN;\n\t\treturn result;\n\t}\n\n\tgetMaxYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(true, fromX, toX)}\n\tgetMinYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(false, fromX, toX)}\n\n\tonSegmentsRebuilded(cb: (trendName: string) => any) {\n\t\treturn this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t}\n\n\tprivate bindEvents() {\n\t\tthis.chartState.onInitialStateApplied(() => this.onInitialStateAppliedHandler());\n\t}\n\n\tprivate onInitialStateAppliedHandler() {\n\t\tfor (let trendName in this.trends) {\n\t\t\tthis.trends[trendName].segmentsManager.onRebuild(() => this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName));\n\t\t}\n\t}\n\n\tprivate createTrend(state: Chart, trendName: string, initialState: IChartState): Trend {\n\t\tlet trend = new Trend(state, trendName, initialState);\n\t\tthis.trends[trendName] = trend;\n\t\treturn trend;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendsManager.ts\n **/","import PerspectiveCamera = THREE.PerspectiveCamera;\nimport Vector3 = THREE.Vector3;\nimport {Chart, IChartState} from \"./Chart\";\nimport forestgreen = THREE.ColorKeywords.forestgreen;\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IScreenTransformOptions {\n\tscrollXVal?: number,\n\tscrollYVal?: number,\n\tscrollX?: number,\n\tscrollY?: number,\n\tzoomX?: number,\n\tzoomY?: number\n}\n\n/**\n * manage camera, and contains methods for transforming pixels to values\n */\nexport class Screen {\n\toptions: IScreenTransformOptions = {scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1};\n\tprivate chartState: Chart;\n\tprivate scrollXAnimation: TweenLite;\n\tprivate scrollYAnimation: TweenLite;\n\tprivate zoomXAnimation: TweenLite;\n\tprivate zoomYAnimation: TweenLite;\n\tprivate currentScrollX = {x: 0};\n\tprivate currentScrollY = {y: 0};\n\tprivate currentZoomX = {val: 1};\n\tprivate currentZoomY = {val: 1};\n\tprivate ee: EventEmitter;\n\n\tconstructor(chartState: Chart) {\n\t\tthis.chartState = chartState;\n\t\tvar {width: w, height: h} = chartState.state;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.transform({\n\t\t\tscrollY: this.valueToPxByYAxis(this.chartState.state.yAxis.range.scroll),\n\t\t\tzoomY: 1\n\t\t});\n\t\tthis.bindEvents();\n\n\t\t//camera.position.z = 1500;\n\t}\n\t\n\tgetCameraSettings() {\n\n\t\tvar {width: w, height: h} = this.chartState.state;\n\n\t\t// settings for pixel-perfect camera\n\t\tvar FOV = 75;\n\t\tvar vFOV = FOV * (Math.PI / 180);\n\t\t\n\t\treturn {\n\t\t\tFOV: FOV,\n\t\t\taspect: w / h,\n\t\t\tnear: 0.1,\n\t\t\tfar: 5000,\n\t\t\tz: h / (2 * Math.tan(vFOV / 2) ),\n\n\t\t\t// move 0,0 to left-bottom corner\n\t\t\tx: w / 2,\n\t\t\ty: h / 2\n\t\t}\n\t}\n\n\tonZoomFrame(cb: (zoomX: number, zoomY: number) => void): Function {\n\t\tvar eventName = 'zoomFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonScrollFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'scrollFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tonTransformationFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\tvar eventName = 'transformationFrame';\n\t\tthis.ee.on(eventName, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(eventName, cb);\n\t\t}\n\t}\n\n\tcameraIsMoving(): boolean {\n\t\treturn !!(\n\t\t\tthis.scrollXAnimation && this.scrollXAnimation.isActive() ||\n\t\t\t\tthis.zoomXAnimation && this.zoomXAnimation.isActive()\n\t\t);\n\t}\n\n\tprivate transform (options: IScreenTransformOptions, silent = false) {\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = options;\n\t\t\n\t\tif (scrollX != void 0) this.options.scrollX = scrollX;\n\t\tif (scrollY != void 0) this.options.scrollY = scrollY;\n\t\tif (zoomX != void 0) this.options.zoomX = zoomX;\n\t\tif (zoomY != void 0) this.options.zoomY = zoomY;\n\n\t\tif (scrollX != void 0 || zoomX) {\n\t\t\toptions.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t\t\tthis.options.scrollXVal = options.scrollXVal;\n\t\t}\n\n\t\tif (scrollY != void 0 || zoomY) {\n\t\t\toptions.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t\t\tthis.options.scrollYVal = options.scrollYVal;\n\t\t}\n\n\t\tif (silent) return;\n\n\t\tthis.ee.emit('transformationFrame', options);\n\t\t\n\t\tif (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t\t\tthis.ee.emit('scrollFrame', options);\n\t\t}\n\t\t\n\t\tif (options.zoomX != void 0 || options.zoomY != void 0) {\n\t\t\tthis.ee.emit('zoomFrame', options);\n\t\t}\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar state = this.chartState;\n\n\t\t// handle scroll and zoom\n\t\tstate.onChange((changedProps) => {\n\t\t\tif (changedProps.xAxis && changedProps.xAxis.range) {\n\t\t\t\tif (changedProps.xAxis.range.scroll != void 0) this.onScrollXHandler(changedProps);\n\t\t\t\tif (changedProps.xAxis.range.zoom) this.onZoomXHandler();\n\t\t\t}\n\t\t\tif (changedProps.yAxis && changedProps.yAxis.range){\n\t\t\t\tif (changedProps.yAxis.range.scroll != void 0) this.onScrollYHandler();\n\t\t\t\tif (changedProps.yAxis.range.zoom) this.onZoomYHandler();\n\t\t\t}\n\t\t});\n\t\tstate.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.scrollXAnimation && this.scrollXAnimation.kill();\n\t\tthis.scrollYAnimation && this.scrollYAnimation.kill();\n\t\tthis.zoomXAnimation && this.zoomXAnimation.kill();\n\t\tthis.zoomYAnimation && this.zoomYAnimation.kill();\n\t}\n\n\tprivate onScrollXHandler(changedProps: IChartState) {\n\t\tvar state = this.chartState;\n\t\tvar isDragMode = state.state.cursor.dragMode;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled && !isDragMode;\n\t\tvar zoomXChanged = changedProps.xAxis.range.zoom;\n\t\tvar isAutoscroll = state.state.autoScroll && !isDragMode && !zoomXChanged;\n\t\tvar time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t\tvar ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t\tif (this.scrollXAnimation) this.scrollXAnimation.pause();\n\n\t\tvar range = state.state.xAxis.range;\n\t\tvar targetX = range.scroll * range.scaleFactor * range.zoom;\n\t\tthis.currentScrollX.x = this.options.scrollX;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollX: this.currentScrollX.x});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t\t\t\tx: targetX, ease: ease\n\t\t\t});\n\t\t\tthis.scrollXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollX.x = targetX;\n\t\t\tcb();\n\t\t}\n\n\t}\n\n\tprivate onScrollYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tif (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t\tvar range = state.state.yAxis.range;\n\t\tvar targetY = range.scroll * range.scaleFactor * range.zoom;\n\n\t\tthis.currentScrollY.y = this.options.scrollY;\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({scrollY: this.currentScrollY.y});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t\t\t\ty: targetY, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.scrollYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentScrollY.y = targetY;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomXHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.state.xAxis.range.zoom;\n\t\tif (this.zoomXAnimation) this.zoomXAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomX: this.currentZoomX.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomXAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomX.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tprivate onZoomYHandler() {\n\t\tvar state = this.chartState;\n\t\tvar animations =  state.state.animations;\n\t\tvar canAnimate = animations.enabled;\n\t\tvar time = animations.zoomSpeed;\n\t\tvar targetZoom = state.state.yAxis.range.zoom;\n\t\tif (this.zoomYAnimation) this.zoomYAnimation.pause();\n\n\t\tvar cb = () => {\n\t\t\tthis.transform({zoomY: this.currentZoomY.val});\n\t\t};\n\n\t\tif (canAnimate) {\n\t\t\tthis.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t\t\t\tval: targetZoom, ease: animations.zoomEase\n\t\t\t});\n\t\t\tthis.zoomYAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.currentZoomY.val = targetZoom;\n\t\t\tcb();\n\t\t}\n\t}\n\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zeroVal} = this.chartState.state.xAxis.range;\n\t\tvar zoom = this.options.zoomX;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zeroVal} =  this.chartState.state.yAxis.range;\n\t\tvar zoom = this.options.zoomY;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\n\t */\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\t\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.chartState.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.chartState.state.xAxis.range.scaleFactor * this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.chartState.state.yAxis.range.scaleFactor * this.options.zoomY;\n\t}\n\t\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.chartState.state.xAxis.range.scaleFactor / this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.chartState.state.yAxis.range.scaleFactor / this.options.zoomY;\n\t}\n\n\n\t/**\n\t *  returns scrollX value by screen scrollX coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\treturn this.chartState.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t}\n\t\n\t\n\t/**\n\t *  returns scrollY value by screen scrollY coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\treturn this.chartState.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t}\n\t\n\t//\n\t/**\n\t *  returns screen scrollX value by screen scrollY coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.chartState.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t// /**\n\t//  *  returns screen scrollY value by screen scrollY coordinate\n\t//  */\n\t// getScreenYByValue(scrollYVal: number): number {\n\t// \tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t// \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\n\t// }\n\t//\n\t//\n\t/**\n\t * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\t/**\n\t * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\n\t */\n\tgetPointByScreenY(screenY: number): number {\n\t\treturn this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t}\n\n\tgetTop(): number {\n\t\treturn this.getPointByScreenY(this.chartState.state.height);\n\t}\n\t\n\tgetBottom(): number {\n\t\treturn this.getPointByScreenY(0);\n\t}\n\n\tgetLeft(): number {\n\t\treturn this.getPointByScreenX(0);\n\t}\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.chartState.state.width);\n\t}\n\n\tgetTopVal() {\n\t\treturn this.getValueByScreenY(this.chartState.state.height);\n\t}\n\t\n\tgetBottomVal() {\n\t\treturn this.getValueByScreenY(0);\n\t}\n\n\tgetCenterYVal() {\n\t\treturn this.getValueByScreenY(this.chartState.state.height / 2);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Screen.ts\n **/","\nimport {Chart} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {AXIS_TYPE} from \"./interfaces\";\nimport {ITrendData, ITrendOptions} from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IAxisMarkUpdateOptions {\n\tvalue: number,\n\tdisplayedValue?: string\n}\n\nexport interface IAxisMarkOptions extends IAxisMarkUpdateOptions {\n\tname?: string;\n\ttitle?: string;\n\ttype?: string;\n\tlineColor?: string;\n\tlineWidth?: number;\n\tshowValue?: boolean;\n\tstickToEdges?: boolean;\n}\n\nconst AXIS_MARK_DEFAULT_OPTIONS: IAxisMarkOptions = {\n\ttype: 'simple',\n\tlineWidth: 1,\n\tvalue: 0,\n\tshowValue: false,\n\tstickToEdges: false,\n\tlineColor: '#FFFFFF',\n\ttitle: ''\n};\n\nexport class AxisMarks {\n\tprivate chartState: Chart;\n\tprivate axisType: AXIS_TYPE;\n\tprivate ee: EventEmitter;\n\tprivate items: {[name: string]: AxisMark} = {};\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.axisType = axisType;\n\t\tvar marks = this.items;\n\t\tvar axisMarksOptions = axisType == AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\n\t\t\n\t\tfor (let options of axisMarksOptions) {\n\t\t\tlet axisMark: AxisMark;\n\t\t\toptions = Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t\t\t\n\t\t\t// set mark name\n\t\t\tif (!options.name) options.name = Utils.getUid().toString();\n\t\t\tif (marks[options.name]) Utils.error('duplicated mark name ' + options.name);\n\t\t\t\n\t\t\t// create mark instance based on type option\n\t\t\tif (options.type == 'timeleft') {\n\t\t\t\taxisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t\t\t} else {\n\t\t\t\taxisMark = new AxisMark(chartState, axisType, options);\n\t\t\t}\n\t\t\tmarks[options.name] = axisMark;\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, newData)\n\t\t});\n\t\tthis.chartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tprivate onTrendChange(trendName: string, newData: ITrendData) {\n\t\tif (!newData) return;\n\t\tvar startVal = newData[0].xVal;\n\t\tvar endVal = newData[newData.length - 1].xVal;\n\t\tvar marks = this.items;\n\n\t\tfor (let markName in marks) {\n\t\t\tlet mark = marks[markName];\n\t\t\tlet markVal = mark.options.value;\n\t\t\tlet markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\n\t\t\tif (markWasCrossed) this.ee.emit('markCrossed', trendName, newData);\n\t\t}\n\t}\n\n\n\tgetItems() {\n\t\treturn this.items;\n\t}\n\t\n\tgetItem(markName: string) {\n\t\treturn this.items[markName];\n\t}\n\n}\n\nexport class AxisMark {\n\tstatic typeName = 'simple';\n\toptions: IAxisMarkOptions;\n\taxisType: AXIS_TYPE;\n\tprotected chartState: Chart;\n\tprotected renderOnTrendsChange = false;\n\tprotected ee: EventEmitter;\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE, options: IAxisMarkOptions) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.options = options;\n\t\tthis.axisType = axisType;\n\t\tthis.chartState = chartState;\n\t\tthis.bindEvents();\n\t}\n\t\n\tprotected bindEvents() {}\n\n\tsetOptions(newOptions: IAxisMarkUpdateOptions) {\n\t\tvar value = this.options.value;\n\t\tthis.options = Utils.deepMerge(this.options, newOptions);\n\t\tif (this.options.value !== value) this.ee.emit('valueChange');\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n\n\tgetDisplayedVal(): string {\n\t\tlet {value, displayedValue} = this.options;\n\t\treturn String(displayedValue !== void 0 ? displayedValue : value);\n\t}\n\n\tonMarkCrossed(cb: (trendName: string, newData: ITrendData) => void): Function {\n\t\tthis.ee.on('markCrossed', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('markCrossed', cb);\n\t\t}\n\t}\n\n\tonValueChange(cb: () => void) {\n\t\tthis.ee.on('valueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('valueChange', cb);\n\t\t}\n\t}\n\n\tonDisplayedValueChange(cb: () => void) {\n\t\tthis.ee.on('onDisplayedValueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('onDisplayedValueChange', cb);\n\t\t}\n\t}\n}\n\nexport class AxisTimeleftMark extends AxisMark {\n\tstatic typeName = 'timeleft';\n\tprotected renderOnTrendsChange = true;\n\t\n\tgetDisplayedVal(): string {\n\t\tvar markVal = this.options.value;\n\t\tvar maxXVal = this.chartState.state.computedData.trends.maxXVal;\n\t\tvar time = markVal - maxXVal;\n\t\tif (time < 0) time = 0;\n\t\treturn Utils.msToTimeString(time);\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendsChange(() => this.onTrendsChange());\n\t}\n\n\tprotected onTrendsChange() {\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AxisMarks.ts\n **/","\n\n/**\n * defines how axis range will be calculated\n * FIXED - directly use range.from and range.to value\n * AUTO - automatically sets range.from and range.to by visible part of opposite axis\n * RELATIVE_END - same as AUTO, but trend end always present in range\n * ALL - automatically sets range.from and range.to by all values of opposite axis\n *\n */\nimport {IAxisMarkOptions} from \"./AxisMarks\";\nimport {TChartColor} from \"./Color\";\nexport enum AXIS_RANGE_TYPE {\n\tFIXED,\n\tRELATIVE_END,\n\tAUTO,\n\tALL // TODO: AXIS_RANGE_TYPE.ALL\n}\n\n/**\n * Animation ease type\n */\nexport declare type TEase = Ease | Linear;\n\nexport declare type TIteralable = {[key: string]: any};\nexport interface IIteralable {[key: string]: any};\n\nexport enum AXIS_TYPE {X, Y}\n\nexport interface IAxisRange {\n\ttype?: AXIS_RANGE_TYPE,\n\tfrom?: number,\n\tto?: number,\n\tzoom?: number,\n\tscroll?: number,\n\n\t/**\n\t * Mode only for Y axis. When true displayed center of Y axis never changed. To use set range.zeroVal as center value.\n\t */\n\tisMirrorMode?: boolean,\n\n\tpadding?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmargin?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmaxLength?: number;\n\tminLength?: number;\n\n\t/**\n\t * value in world center coordinate\n\t */\n\tzeroVal?: number,\n\n\t/**\n\t * ratio between 1 pixel and 1 value for zoom = 1\n\t */\n\tscaleFactor?: number,\n}\n\nexport enum AXIS_DATA_TYPE {NUMBER, DATE}\n\nexport interface IAxisOptions {\n\trange?: IAxisRange;\n\tdataType?: AXIS_DATA_TYPE;\n\tautoScroll?: boolean;\n\tmarks?: IAxisMarkOptions[];\n\tgrid?: IGridOptions;\n\tcolor?: TChartColor;\n}\n\nexport interface IGridOptions {\n\tenabled: boolean;\n\tminSizePx?: number;\n\tcolor?: TChartColor;\n}\n\nexport interface IAnimationsOptions {\n\tenabled?: boolean,\n\ttrendChangeSpeed?: number,\n\ttrendChangeEase?: TEase,\n\tscrollSpeed?: number,\n\tscrollEase?: TEase,\n\tautoScrollSpeed?: number,\n\tautoScrollEase?: TEase,\n\tzoomSpeed?: number,\n\tzoomEase?: TEase,\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/interfaces.ts\n **/","import {Chart} from \"./Chart\";\nimport Object3D = THREE.Object3D;\n\nexport interface IChartWidgetConstructor {\n\tnew (): ChartWidget;\n\twidgetName: string;\n}\n\n/**\n * base class for all widgets\n * each widget must have widgetName static property\n */\nexport abstract class ChartWidget {\n\tstatic widgetName = '';\n\tprotected chart: Chart;\n\tprivate unbindList: Function[] = [];\n\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t}\n\n\tabstract onReadyHandler(): any;\n\tabstract getObject3D(): Object3D;\n\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unbindList: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunbindList.push(args[0] as Function);\n\t\t} else {\n\t\t\tunbindList.push(...args as Function[]);\n\t\t}\n\t\tthis.unbindList.push(...unbindList);\n\t}\n\tprotected unbindEvents() {\n\t\tthis.unbindList.forEach(unbindEvent => unbindEvent());\n\t\tthis.unbindList.length = 0;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Widget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport UVMapping = THREE.UVMapping;\nimport GridHelper = THREE.GridHelper;\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport {GridWidget, IGridParamsForAxis} from \"./GridWidget\";\nimport {Utils} from \"../Utils\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {AXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions} from \"../interfaces\";\nimport { ChartColor } from \"../Color\";\n\n/**\n * widget for drawing axis\n */\nexport class AxisWidget extends ChartWidget {\n\tstatic widgetName = 'Axis';\n\tprivate isDestroyed = false;\n\tprivate object3D: Object3D;\n\tprivate axisXObject: Object3D;\n\tprivate axisYObject: Object3D;\n\tprivate updateAxisXRequest: () => void;\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.axisXObject = new Object3D();\n\t\tthis.axisYObject = new Object3D();\n\t\tthis.object3D.add(this.axisXObject);\n\t\tthis.object3D.add(this.axisYObject);\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\n\t\t// canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\n\t\tthis.updateAxisXRequest = Utils.throttle(() => this.updateAxis(AXIS_TYPE.X), 1000);\n\n\t\tthis.onScrollChange(\n\t\t\tthis.chart.screen.options.scrollX,\n\t\t\tthis.chart.screen.options.scrollY\n\t\t);\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\tvar state = this.chart;\n\n\t\tthis.bindEvent(\n\t\t\tstate.screen.onTransformationFrame((options) => {\n\t\t\t\tthis.onScrollChange(options.scrollX, options.scrollY);\n\t\t\t}),\n\t\t\tstate.screen.onZoomFrame((options) => {this.onZoomFrame(options)}),\n\t\t\tstate.onDestroy(() => this.onDestroy()),\n\t\t\tstate.onResize(() => this.onResize())\n\t\t);\n\t}\n\n\tprivate onDestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.unbindEvents();\n\t}\n\n\tprivate onScrollChange(x: number, y: number) {\n\n\t\tif (y != void 0) {\n\t\t\tthis.axisYObject.position.y = y;\n\t\t\tthis.axisXObject.position.y = y;\n\t\t}\n\n\t\tif (x != void 0) {\n\t\t\tthis.axisYObject.position.x = x;\n\t\t\tthis.updateAxisXRequest();\n\t\t}\n\n\t}\n\n\tprivate onResize() {\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\t}\n\n\tprivate setupAxis(orientation: AXIS_TYPE) {\n\n\t\tlet isXAxis = orientation == AXIS_TYPE.X;\n\t\tlet {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tlet canvasWidth = 0, canvasHeight = 0;\n\t\tlet axisOptions: IAxisOptions;\n\n\t\t// clean meshes\n\t\tif (isXAxis) {\n\t\t\tthis.axisXObject.traverse(obj => this.axisXObject.remove(obj));\n\t\t\tcanvasWidth = visibleWidth * 3;\n\t\t\tcanvasHeight = 50;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t} else {\n\t\t\tthis.axisYObject.traverse(obj => this.axisYObject.remove(obj));\n\t\t\tcanvasWidth = 50;\n\t\t\tcanvasHeight = visibleHeight * 3;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t}\n\n\t\tvar texture = Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, (ctx) => {\n\t\t\tlet color = new ChartColor(axisOptions.color);\n\t\t\tctx.beginPath();\n\t\t\tctx.font = this.chart.state.font.m;\n\t\t\tctx.fillStyle = color.rgbaStr;\n\t\t\tctx.strokeStyle = color.rgbaStr;\n\t\t});\n\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tvar axisMesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(canvasWidth, canvasHeight),\n\t\t\tmaterial\n\t\t);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisXObject.add(axisMesh);\n\t\t} else {\n\t\t\taxisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisYObject.add(axisMesh);\n\t\t}\n\n\t\tthis.updateAxis(orientation);\n\n\t}\n\t\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate updateAxis(orientation: AXIS_TYPE) {\n\t\tif (this.isDestroyed) return;\n\t\tvar isXAxis = orientation == AXIS_TYPE.X;\n\t\tvar {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = this.chart.screen.options;\n\t\tvar axisOptions: IAxisOptions;\n\t\tvar axisMesh: Mesh;\n\t\tvar axisGridParams: IGridParamsForAxis;\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh = this.axisXObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t\t} else {\n\t\t\taxisMesh = this.axisYObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t\t}\n\n\t\tvar geometry = axisMesh.geometry as PlaneGeometry;\n\t\tvar canvasWidth = geometry.parameters.width;\n\t\tvar canvasHeight = geometry.parameters.height;\n\t\tvar texture = (axisMesh.material as MeshBasicMaterial).map;\n\t\tvar ctx = texture.image.getContext('2d');\n\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t\t}\n\n\n\t\t// TODO: draw text and lines in different loops\n\t\tvar edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t\tvar startVal = axisGridParams.start  - edgeOffset;\n\t\tvar endVal = axisGridParams.end + edgeOffset;\n\n\t\tctx.beginPath();\n\t\tfor (let val = startVal; val <= endVal; val += axisGridParams.step) {\n\t\t\tlet displayedValue = '';\n\t\t\tif (isXAxis) {\n\t\t\t\tlet pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(pxVal + 0.5, canvasHeight);\n\t\t\t\t// ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\n\t\t\t\tif (axisOptions.dataType == AXIS_DATA_TYPE.DATE) {\n\t\t\t\t\tdisplayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t\t\t\t} else {\n\t\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\t}\n\n\t\t\t\tctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t\t\t} else {\n\t\t\t\tlet pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\n\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(canvasWidth, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\n\n\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\tctx.fillText(displayedValue, canvasWidth - 15 , pxVal + 3);\n\n\t\t\t\t// uncomment for left-side axis\n\t\t\t\t// ctx.moveTo(0, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(5, pxVal + 0.5);\n\t\t\t\t// ctx.fillText(Number(val.toFixed(14)).toString(), 15 , pxVal + 3);\n\t\t\t}\n\t\t\tctx.stroke();\n\t\t}\n\t\t// uncomment to preview canvas borders\n\t\t// ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tif (options.zoomX) {\n\t\t\tthis.updateAxis(AXIS_TYPE.X);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.H)\n\t\t}\n\t\tif (options.zoomY) {\n\t\t\tthis.updateAxis(AXIS_TYPE.Y);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.V)\n\t\t}\n\t}\n\n\t// private temporaryHideAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar timeoutId = setTimeout(() => {\n\t// \t\t\tthis.showAxis(orientation);\n\t// \t}, 200);\n\t//\n\t// \tif (isXAxis) {\n\t// \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tclearTimeout(this.showAxisXTimeout);\n\t// \t\tthis.showAxisXTimeout =\ttimeoutId;\n\t// \t} else {\n\t// \t\tclearTimeout(this.showAxisYTimeout);\n\t// \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tthis.showAxisYTimeout = timeoutId;\n\t// \t}\n\t// }\n\n\t// private showAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar material: MeshBasicMaterial;\n\t// \tif (isXAxis) {\n\t// \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t} else {\n\t// \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t}\n\t// \tthis.updateAxis(orientation);\n\t// \tTweenLite.to(material, 0.3, {opacity: 1});\n\t// }\n\n\tstatic getDateStr(timestamp: number, gridParams: IGridParamsForAxis): string {\n\t\tvar sec = 1000;\n\t\tvar min = sec * 60;\n\t\tvar hour = min * 60;\n\t\tvar day = hour * 60;\n\t\tvar step = gridParams.step;\n\t\tvar d = new Date(timestamp);\n\t\tvar tf = (num: number) => Utils.toFixed(num, 2);\n\t\treturn tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport {ChartWidget} from \"../Widget\";\nimport LineSegments = THREE.LineSegments;\nimport {Utils} from \"../Utils\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {IAxisOptions} from \"../interfaces\";\nimport Color = THREE.Color;\nimport {ChartColor} from \"../Color\";\n\nexport interface IGridParamsForAxis {\n\tstart: number,\n\tend: number,\n\tstep: number,\n\tstepInPx: number,\n\tlength: number,\n\tsegmentsCount: number\n}\n\n/**\n * widget for drawing state grid\n */\nexport class GridWidget extends ChartWidget{\n\tstatic widgetName = 'Grid';\n\tprivate lineSegments: LineSegments;\n\tprivate gridSizeH: number;\n\tprivate gridSizeV: number;\n\tprivate isDestroyed = false;\n\n\tonReadyHandler() {\n\t\tvar {width, height, xAxis, yAxis} = this.chart.state;\n\t\tthis.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\n\t\tthis.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\n\t\tthis.initGrid();\n\t\tthis.updateGrid();\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\t// grid is bigger then screen, so it's no need to update it on each scroll event\n\t\tlet updateGridThrottled = Utils.throttle(() => this.updateGrid(), 1000);\n\t\tthis.bindEvent(this.chart.onScroll(() => updateGridThrottled()),\n\t\t\tthis.chart.screen.onZoomFrame((options) => {\n\t\t\t\tupdateGridThrottled();\n\t\t\t\tthis.onZoomFrame(options);\n\t\t\t}),\n\t\t\tthis.chart.onDestroy(() => {\n\t\t\t\tthis.isDestroyed = true;\n\t\t\t\tthis.unbindEvents();\n\t\t\t}),\n\t\t\tthis.chart.onResize(() => {\n\t\t\t\tthis.updateGrid();\n\t\t\t})\n\t\t);\n\n\t}\n\n\tprivate initGrid() {\n\t\tlet color = new ChartColor(this.chart.state.xAxis.grid.color);\n\t\tlet geometry = new THREE.Geometry();\n\t\tlet material = new THREE.LineBasicMaterial({linewidth: 1, color: color.value, opacity: color.a, transparent: true});\n\t\tlet xLinesCount = this.gridSizeH;\n\t\tlet yLinesCount = this.gridSizeV;\n\t\twhile (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\twhile (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\tthis.lineSegments = new LineSegments(geometry, material);\n\t\tthis.lineSegments.position.setZ(-1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t}\n\n\tprivate updateGrid() {\n\t\tif (this.isDestroyed) return;\n\t\tvar {yAxis, xAxis, width, height} = this.chart.state;\n\t\tvar axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t\tvar axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t\tvar scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t\tvar scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t\tvar gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t\tvar gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t\tvar startXVal = axisXGrid.start + gridScrollXVal;\n\t\tvar startYVal = axisYGrid.start + gridScrollYVal;\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tvar vertices = geometry.vertices;\n\t\tvar lineInd = 0;\n\n\t\tfor (let i =  -this.gridSizeH / 3; i < this.gridSizeH * 2/3; i++) {\n\t\t\tlet value = startXVal + i * axisXGrid.step;\n\t\t\tlet lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tfor (let i =  -this.gridSizeV / 3; i < this.gridSizeV * 2/3; i++) {\n\t\t\tlet value = startYVal + i * axisYGrid.step;\n\t\t\tlet lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\tthis.lineSegments.scale.set(\n\t\t\txAxis.range.scaleFactor * xAxis.range.zoom,\n\t\t\tyAxis.range.scaleFactor * yAxis.range.zoom,\n\t\t\t1\n\t\t)\n\t}\n\n\tprivate getHorizontalLineSegment(yVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\n\t\tvar widthVal = chartState.pxToValueByXAxis(chartState.state.width);\n\t\treturn [\n\t\t\tnew THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0 ),\n\t\t\tnew THREE.Vector3( -widthVal + scrollXVal, localYVal, 0 )\n\t\t];\n\t}\n\n\tprivate getVerticalLineSegment(xVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\n\t\tvar heightVal = chartState.pxToValueByYAxis(chartState.state.height);\n\t\treturn [\n\t\t\tnew THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0 ),\n\t\t\tnew THREE.Vector3(localXVal, -heightVal + scrollYVal, 0 )\n\t\t];\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar {xAxis, yAxis} = this.chart.state;\n\t\tif (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t\tif (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t}\n\n\n\t// TODO: move this code to core\n\tstatic getGridParamsForAxis(axisOptions: IAxisOptions, axisWidth: number, zoom: number): IGridParamsForAxis {\n\t\tlet axisRange = axisOptions.range;\n\t\tlet from = axisRange.from;\n\t\tlet to = axisRange.to;\n\t\tlet axisLength = to - from;\n\t\tlet gridStep = 0;\n\t\tlet gridStepInPixels = 0;\n\t\tlet minGridStepInPixels = axisOptions.grid.minSizePx;\n\t\tlet axisLengthStr = String(axisLength);\n\t\tlet axisLengthPointPosition = axisLengthStr.indexOf('.');\n\t\tlet intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\n\t\tlet gridStepFound = false;\n\t\tlet digitPos = 0;\n\t\twhile (!gridStepFound) {\n\n\t\t\tlet power = intPartLength - digitPos - 1;\n\t\t\tlet multiplier = (Math.pow(10, power) || 1);\n\t\t\tlet dividers = [1, 2, 5];\n\t\t\tfor (let dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t\t\t\tlet nextGridStep = multiplier / dividers[dividerInd];\n\t\t\t\tlet nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t\t\t\tif (nextGridStepInPixels >= minGridStepInPixels) {\n\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t} else {\n\t\t\t\t\tgridStepFound = true;\n\t\t\t\t\tif (gridStep === 0) {\n\t\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!gridStepFound) digitPos++\n\n\t\t}\n\n\t\tvar gridStart = Math.floor(from / gridStep) * gridStep;\n\t\tvar gridEnd = Math.floor(to / gridStep) * gridStep;\n\n\t\treturn {\n\t\t\tstart: gridStart,\n\t\t\tend: gridEnd,\n\t\t\tstep: gridStep,\n\t\t\tstepInPx: gridStepInPixels,\n\t\t\tlength: gridEnd - gridStart,\n\t\t\tsegmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t\t}\n\t}\n\t\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/GridWidget.ts\n **/","export declare type TChartColor = string | number;\n\n\nexport class ChartColor {\n\n\t/**!\n\t * @preserve $.parseColor\n\t * Copyright 2011 THEtheChad Elliott\n\t * Released under the MIT and GPL licenses.\n\t */\n\t/**\n\t * Parse hex/rgb{a} color syntax.\n\t * @input string\n\t * @returns array [r,g,b{,o}]\n\t */\n\tstatic parseColor(color: string): number[] {\n\n\t\tvar cache: any\n\t\t\t, p = parseInt // Use p as a byte saving reference to parseInt\n\t\t\t, color = color.replace(/\\s\\s*/g, '') // Remove all spaces\n\t\t\t;//var\n\n\t\t// Checks for 6 digit hex and converts string to integer\n\t\tif (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\n\n\t\t// Checks for 3 digit hex and converts string to integer\n\t\telse if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\n\t\t\tcache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\n\n\n\t\t// Checks for 6 digit hex with alpha and converts string to integer\n\t\telse if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\n\n\t\t// Checks for rgba and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3], +cache[4]];\n\n\t\t// Checks for rgb and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3]];\n\n\t\t// Otherwise throw an exception to make debugging easier\n\t\telse throw Error(color + ' is not supported by parseColor');\n\n\t\t// Performs RGBA conversion by default\n\t\tisNaN(cache[3]) && (cache[3] = 1);\n\t\treturn cache;\n\t\t// Adds or removes 4th value based on rgba support\n\t\t// Support is flipped twice to prevent erros if\n\t\t// it's not defined\n\t\t//return cache.slice(0,3 + !!$.support.rgba);\n\t}\n\n\tr: number;\n\tg: number;\n\tb: number;\n\ta: number;\n\tvalue: number;\n\thexStr: string;\n\trgbaStr: string;\n\n\tconstructor (color: TChartColor) {\n\t\tthis.set(color);\n\t}\n\n\tset(color: TChartColor) {\n\t\tif (typeof color == 'number') {\n\t\t\tcolor = (color as number).toString(16);\n\t\t\tcolor = '#' + '0'.repeat(6 - color.length) + color;\n\t\t}\n\t\tlet colorStr = color as string;\n\t\tlet rgba = ChartColor.parseColor(colorStr);\n\t\tthis.r = rgba[0];\n\t\tthis.g = rgba[1];\n\t\tthis.b = rgba[2];\n\t\tthis.a = rgba[3];\n\t\tthis.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\n\t\tthis.hexStr = '#' + this.value.toString(16);\n\t\tthis.rgbaStr = `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Color.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {ITrendOptions} from \"../Trend\";\nimport {Utils} from \"../Utils\";\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport { ChartColor } from '../Color';\n\nexport class TrendsGradientWidget extends TrendsWidget<TrendGradient> {\n\tstatic widgetName = \"TrendsGradient\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendGradient;\n\t}\n}\n\n\nexport class TrendGradient extends TrendWidget {\n\tprivate gradient: Mesh;\n\tprivate visibleSegmentsCnt = 0;\n\tprivate segmentsIds: Uint16Array;\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.hasBackground;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.trend = chartState.trendsManager.getTrend(trendName);\n\t\tthis.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments)\n\t\tthis.initGradient();\n\t\tthis.updateSegments();\n\t}\n\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\t// TODO: optimize updateSegments for onDisplayedRangeChanged\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.chart.onZoom(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t}\n\n\n\tgetObject3D(): Object3D {\n\t\treturn this.gradient;\n\t}\n\n\n\tinitGradient() {\n\t\tlet geometry = new Geometry();\n\n\n\t\tfor (let i = 0; i < this.segmentsIds.length; i++) {\n\t\t\tgeometry.vertices.push(\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3()\n\t\t\t);\n\t\t\tlet ind = i * 4;\n\n\t\t\t// gradient segment scheme\n\t\t\t//\n\t\t\t// vert0 +---+ vert3\n\t\t\t//       |\\  |\n\t\t\t// face1 | \\ | face2\n\t\t\t// \t     |  \\|\n\t\t\t// vert1 +---+ vert2\n\n\t\t\tgeometry.faces.push(\n\t\t\t\tnew THREE.Face3( ind, ind + 1, ind + 2 ),\n\t\t\t\tnew THREE.Face3( ind + 3, ind, ind + 2 )\n\t\t\t);\n\t\t}\n\n\t\tlet color = new ChartColor(this.trend.getOptions().backgroundColor);\n\t\tthis.gradient = new THREE.Mesh(\n\t\t\tgeometry,\n\t\t\tnew THREE.MeshBasicMaterial( {color: color.value, transparent: true, opacity: color.a} )\n\t\t);\n\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.gradient.frustumCulled = false;\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tvar currentScale = this.gradient.scale;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegmentsManager: TrendSegmentsManager) {\n\t\tlet animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n\t\tfor (let i = 0; i < this.visibleSegmentsCnt; i++) {\n\t\t\tlet segmentId = this.segmentsIds[i];\n\t\t\tif (!animatedSegmentsIds.includes(segmentId)) continue;\n\t\t\tthis.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n\t\t}\n\t\t(this.gradient.geometry as PlaneGeometry).verticesNeedUpdate = true;\n\t}\n\n\n\tprivate updateSegments() {\n\t\tlet geometry = this.gradient.geometry as PlaneGeometry;\n\t\tlet {\n\t\t\tsegments: trendSegments,\n\t\t\tfirstDisplayedSegmentInd: segmentInd,\n\t\t\tlastDisplayedSegmentInd\n\t\t} = this.trend.segmentsManager;\n\t\tlet prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n\t\tthis.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n\t\tlet segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n\n\t\tif (segmentsToProcessCnt > this.segmentsIds.length) {\n\t\t\tUtils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\n\t\t}\n\n\t\t// setup visible segments and collapse invisible\n\t\tfor (let i = 0; i <= segmentsToProcessCnt; i++) {\n\t\t\tif (segmentInd <= lastDisplayedSegmentInd) {\n\t\t\t\tlet segment = trendSegments[segmentInd];\n\t\t\t\tthis.setupSegmentVertices(i, segment.currentAnimationState);\n\t\t\t\tthis.segmentsIds[i] = segment.id;\n\t\t\t\tsegmentInd++;\n\t\t\t} else {\n\t\t\t\tthis.setupSegmentVertices(i);\n\t\t\t}\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\t/**\n\t * setup gradient segment by segmentState\n\t * if segmentState is undefined, then collapse vertices to 0,0,0\n\t */\n\tprivate setupSegmentVertices(segmentInd: number, segmentState?: ITrendSegmentState) {\n\t\tlet gradientSegmentInd = segmentInd * 4;\n\t\tlet vertices = (this.gradient.geometry as PlaneGeometry).vertices;\n\t\tlet\ttopLeft = vertices[gradientSegmentInd];\n\t\tlet\tbottomLeft = vertices[gradientSegmentInd + 1];\n\t\tlet\tbottomRight = vertices[gradientSegmentInd + 2];\n\t\tlet\ttopRight = vertices[gradientSegmentInd + 3];\n\t\tlet screenHeightVal = Math.max(\n\t\t\tthis.chart.pxToValueByYAxis(this.chart.state.height),\n\t\t\tthis.chart.screen.pxToValueByYAxis(this.chart.state.height)\n\t\t);\n\n\t\tif (segmentState) {\n\t\t\tlet startX = this.toLocalX(segmentState.startXVal);\n\t\t\tlet startY = this.toLocalY(segmentState.startYVal);\n\t\t\tlet endX = this.toLocalX(segmentState.endXVal);\n\t\t\tlet endY = this.toLocalY(segmentState.endYVal);\n\t\t\ttopLeft.set(startX, startY, 0);\n\t\t\ttopRight.set(endX, endY, 0);\n\t\t\tbottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n\t\t\tbottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n\t\t} else {\n\t\t\ttopLeft.set(0, 0, 0);\n\t\t\ttopRight.set(0, 0, 0);\n\t\t\tbottomLeft.set(0, 0, 0);\n\t\t\tbottomRight.set(0, 0, 0);\n\t\t}\n\n\t}\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsGradientWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport {ITrendOptions, ITrendData, Trend} from \"../Trend\";\nimport Vector2 = THREE.Vector2;\nimport Vector3 = THREE.Vector3;\nimport {TrendSegmentsManager} from \"../TrendSegmentsManager\";\nimport {IScreenTransformOptions} from \"../Screen\";\n\n\nexport interface ITrendWidgetClass<TrendWidgetType> {\n\tnew (chart: Chart, trendName: string): TrendWidgetType;\n\twidgetIsEnabled(trendOptions: ITrendOptions, chart: Chart): boolean;\n}\n\n/**\n * abstract manager class for all trends widgets\n */\nexport abstract class TrendsWidget<TrendWidgetType extends TrendWidget> extends ChartWidget {\n\tprotected abstract getTrendWidgetClass(): ITrendWidgetClass<TrendWidgetType>;\n\tprotected object3D: Object3D;\n\tprotected widgets: {[trendName: string]: TrendWidgetType} = {};\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.onTrendsChange();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tvar state = this.chart;\n\t\tstate.onTrendsChange(() => this.onTrendsChange());\n\t\tstate.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, changedOptions, newData)\n\t\t});\n\t}\n\n\tprotected onTrendsChange() {\n\t\tvar trendsOptions = this.chart.state.trends;\n\t\tvar TrendWidgetClass = this.getTrendWidgetClass();\n\t\tfor (let trendName in trendsOptions) {\n\t\t\tlet trendOptions = trendsOptions[trendName];\n\t\t\tlet widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\n\t\t\tif (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t\t\t\tthis.createTrendWidget(trendName);\n\t\t\t} else if (!widgetCanBeEnabled && this.widgets[trendName]){\n\t\t\t\tthis.destroyTrendWidget(trendName);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTrendChange(trendName: string, changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar widget = this.widgets[trendName];\n\t\tif (!widget) return;\n\t\twidget.onTrendChange(changedOptions);\n\t\tif (newData) {\n\t\t\tvar data = this.chart.getTrend(trendName).getData();\n\t\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\t\tisAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t\t}\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate createTrendWidget(trendName: string) {\n\t\tvar WidgetConstructor = this.getTrendWidgetClass();\n\t\tvar widget = new WidgetConstructor(this.chart, trendName);\n\t\tthis.widgets[trendName] = widget;\n\t\tvar widgetObject = widget.getObject3D();\n\t\twidgetObject.name = trendName;\n\t\tthis.object3D.add(widget.getObject3D());\n\t}\n\n\tprivate destroyTrendWidget(trendName: string) {\n\t\tthis.widgets[trendName].onDestroy();\n\t\tdelete this.widgets[trendName];\n\t\tvar widgetObject = this.object3D.getObjectByName(trendName);\n\t\tthis.object3D.remove(widgetObject);\n\t}\n}\n\n/**\n * based class for all trends widgets\n */\nexport abstract class TrendWidget {\n\tprotected trend: Trend;\n\tprotected unbindList: Function[] = [];\n\n\tconstructor (protected chart: Chart, protected trendName: string) {\n\t\tthis.trend = chart.trendsManager.getTrend(trendName);\n\t\tthis.chart = chart;\n\t\tthis.bindEvents();\n\t}\n\tabstract getObject3D(): Object3D;\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions, chart: Chart) {\n\t\treturn trendOptions.enabled;\n\t}\n\tappendData(newData: ITrendData) {};\n\tprependData(newData: ITrendData) {};\n\tonTrendChange(changedOptions?: ITrendOptions) {}\n\tonDestroy() {\n\t\tfor (let unsubscriber of this.unbindList) {\n\t\t\tunsubscriber();\n\t\t}\n\t}\n\tprotected onSegmentsAnimate(segments: TrendSegmentsManager) {\n\t}\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onTransformationFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onZoom() {\n\t}\n\n\n\tprotected bindEvents() {\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onAnimationFrame(\n\t\t\t(trendPoints: TrendSegmentsManager) => this.onSegmentsAnimate(trendPoints)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.screen.onTransformationFrame(\n\t\t\t(options) => this.onTransformationFrame(options)\n\t\t));\n\t\t\n\t\tthis.bindEvent(this.chart.screen.onZoomFrame(\n\t\t\t(options) => this.onZoomFrame(options)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.onZoom(() => this.onZoom()));\n\t};\n\n\tprotected bindEvent(unbind: Function) {\n\t\tthis.unbindList.push(unbind);\n\t}\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport { TrendSegmentsManager, ITrendSegmentState } from \"../TrendSegmentsManager\";\nimport LineSegments = THREE.LineSegments;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ITrendOptions, TREND_TYPE } from '../Trend';\nimport { Utils } from '../Utils';\n\n\n/**\n * widget for drawing trends lines\n */\nexport class TrendsLineWidget extends TrendsWidget<TrendLine> {\n\tstatic widgetName = \"TrendsLine\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendLine;\n\t}\n}\n\ninterface ILineSegment {\n\tind: number,\n\tsegmentId: number\n}\n\nexport class TrendLine extends TrendWidget {\n\tprivate material: LineBasicMaterial;\n\tprivate lineSegments: LineSegments;\n\tprivate vertices: Vector3[];\n\n\t// contains indexes of free segments\n\tprivate freeSegmentsInds: number[] = [];\n\n\t// contains segments to display\n\tprivate displayedSegments: {[segmentId: number]: ILineSegment} = {};\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.LINE;\n\t}\n\t\n\tconstructor (chart: Chart, trendName: string) {\n\t\tsuper(chart, trendName);\n\t\tvar options = this.trend.getOptions();\n\t\tthis.material = new LineBasicMaterial( { color: options.lineColor, linewidth: options.lineWidth } );\n\t\tthis.initLine();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroySegments();\n\t\t\tthis.setupSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupSegments();\n\t\t}));\n\t}\n\t\n\tprivate initLine() {\n\t\tlet geometry = new Geometry();\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.lineSegments = new LineSegments(geometry, this.material);\n\t\tthis.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t\tfor (let i = 0; i < this.chart.state.maxVisibleSegments; i++) {\n\t\t\tgeometry.vertices.push(new  Vector3(), new Vector3());\n\t\t\tthis.freeSegmentsInds.push(i);\n\t\t}\n\t\tthis.vertices = geometry.vertices;\n\t\tthis.setupSegments();\n\t}\n\n\tprivate setupSegments() {\n\t\tlet geometry = this.lineSegments.geometry as Geometry;\n\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.displayedSegments) {\n\t\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\t\tlet segment = this.trend.segmentsManager.segments[lineSegment.segmentId];\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupSegment(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate setupSegment(segmentId: number, segmentState: ITrendSegmentState) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tif (!lineSegment) {\n\t\t\tif (this.freeSegmentsInds.length == 0) Utils.error('Max allocated segments reached');\n\t\t\tlet ind = this.freeSegmentsInds.pop();\n\t\t\tlineSegment = this.displayedSegments[segmentId] = {segmentId, ind};\n\t\t}\n\t\tlet segmentInd = lineSegment.ind;\n\t\tlet lineStartVertex = this.vertices[segmentInd * 2];\n\t\tlet lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t\tlineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t\tlineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t}\n\n\tprivate destroySegments() {\n\t\tfor (let segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t}\n\n\tprivate destroySegment(segmentId: number) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tlet lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t\tlet lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t\tlineStartVertex.set(0, 0, 0);\n\t\tlineEndVertex.set(0, 0, 0);\n\t\tdelete this.displayedSegments[segmentId];\n\t\tthis.freeSegmentsInds.push(lineSegment.ind);\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.lineSegments.scale;\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.displayedSegments[segmentId]) continue;\n\t\t\tthis.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsLineWidget.ts\n **/","\n\nimport { TrendsWidget, TrendWidget } from './TrendsWidget';\nimport { Chart } from '../Chart';\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport Vector3 = THREE.Vector3;\nimport Mesh = THREE.Mesh;\nimport Line = THREE.Line;\nimport BoxGeometry = THREE.BoxGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { TREND_TYPE, ITrendOptions } from '../Trend';\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport remove = THREE.Cache.remove;\nimport { Utils } from '../Utils';\n\n\nconst RISE_COLOR = 0x2CAC40;\nconst FALL_COLOR = 0xEE5533;\nconst MARGIN_PERCENT = 0.3;\nconst MAX_CANDLES = 100;\n\n/**\n * widget for drawing trends candles\n */\nexport class TrendsCandlesWidget extends TrendsWidget<TrendCandlesWidget> {\n\tstatic widgetName = \"TrendsCandles\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendCandlesWidget;\n\t}\n}\n\n\nexport class TrendCandlesWidget extends TrendWidget {\n\tprivate scaleXFactor: number;\n\tprivate scaleYFactor: number;\n\tprivate object3D: Object3D;\n\t\n\t// contains indexes of free candles\n\tprivate freeCandlesInds: number[] = [];\n\tprivate candlesPool: CandleWidget[] = [];\n\tprivate candles: {[segmentId: number]: CandleWidget} = {};\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.CANDLE;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.initObject();\n\t}\n\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroyCandles();\n\t\t\tthis.setupCandles();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupCandles();\n\t\t}));\n\t}\n\t\n\tprivate initObject() {\n\t\tlet stateData = this.chart.state;\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = stateData.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = stateData.yAxis.range;\n\t\tthis.scaleXFactor = scaleXFactor;\n\t\tthis.scaleYFactor = scaleYFactor;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.object3D.frustumCulled = false;\n\t\tfor (let i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t\tthis.setupCandles();\n\t}\n\n\tprivate setupCandles() {\n\n\t\t// remove invisible\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.candles) {\n\t\t\tlet segment = this.candles[segmentId].segment;\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupCandle(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t}\n\n\tprivate destroyCandles() {\n\t\tfor (let segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t}\n\n\tprivate destroyCandle(segmentId: number) {\n\t\tlet candle = this.candles[segmentId];\n\t\tthis.object3D.remove(candle.getObject3D());\n\t\tdelete this.candles[segmentId];\n\t}\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.object3D.scale;\n\t\tif (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t}\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.candles[segmentId]) continue;\n\t\t\tlet segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t\t\tthis.setupCandle(segmentId, segmentState);\n\t\t}\n\t}\n\n\t/**\n\t * create or modify candle\n\t */\n\tprivate setupCandle(candleId: number, segmentState: ITrendSegmentState) {\n\t\tlet candleInd = candleId % MAX_CANDLES;\n\n\t\t// get candle from candlesPool to avoid creating new Objects by performance reasons\n\t\tlet candle = this.candlesPool[candleInd];\n\t\tif (!candle) {\n\t\t\tcandle = this.candlesPool[candleInd] = new CandleWidget();\n\t\t}\n\n\t\tif (!this.candles[candleId]) {\n\t\t\tthis.candles[candleId] = candle;\n\t\t\tthis.object3D.add(candle.getObject3D());\n\t\t}\n\t\tcandle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t\tcandle.setSegment(segmentState);\n\t}\n\n\ttoLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\ttoLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\ttoLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\nclass CandleWidget {\n\tsegment: ITrendSegmentState;\n\tprivate rect: Mesh;\n\tprivate vLine: Line;\n\tprivate hLine: Line;\n\tconstructor () {\n\t\tthis.initObject();\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.rect;\n\t}\n\n\tsetSegment(segment: ITrendSegmentState) {\n\t\tthis.segment = segment;\n\t\tlet color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\n\t\t// update rect\n\t\tlet geometry = this.rect.geometry as PlaneGeometry;\n\t\tlet material = this.rect.material as MeshBasicMaterial;\n\t\tlet width = segment.endXVal - segment.startXVal;\n\t\twidth -= width * MARGIN_PERCENT;\n\t\tlet height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t\tlet [leftTop, rightTop, leftBottom, rightBottom] = geometry.vertices;\n\t\tleftTop.set(-width / 2, height / 2, 0);\n\t\trightTop.set(width / 2, height / 2, 0);\n\t\tleftBottom.set(-width / 2, -height / 2, 0);\n\t\trightBottom.set(width / 2, -height / 2, 0);\n\n\t\t// prevent to draw bars with height < 1px\n\t\tif (Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t\t\tleftBottom.setY(leftBottom.y + 1);\n\t\t\trightBottom.setY(rightBottom.y + 1);\n\t\t}\n\n\t\tmaterial.color.set(color);\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\t// update lines\n\t\tlet vLineGeometry = this.vLine.geometry as Geometry;\n\t\tlet vLineMaterial = this.vLine.material as LineBasicMaterial;\n\t\tlet lineTop = segment.maxYVal - segment.yVal;\n\t\tlet lineBottom = segment.minYVal - segment.yVal;\n\t\tvLineGeometry.vertices[0].set(0, lineTop, 0);\n\t\tvLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t\tvLineMaterial.color.set(color);\n\t\tvLineGeometry.verticesNeedUpdate = true;\n\n\t\tlet hLineGeometry = this.hLine.geometry as Geometry;\n\t\tlet hLineMaterial = this.hLine.material as LineBasicMaterial;\n\t\tlet lineLeft = (-width) / 2;\n\t\tlet lineRight = width / 2;\n\t\thLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t\thLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t\thLineMaterial.color.set(color);\n\t\thLineGeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate initObject() {\n\t\tthis.rect = new Mesh(\n\t\t\tnew PlaneGeometry(1, 1),\n\t\t\tnew MeshBasicMaterial()\n\t\t);\n\t\tlet vLineGeometry = new Geometry();\n\t\tlet hLineGeometry = new Geometry();\n\t\tvLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\thLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\tthis.vLine = new Line(vLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.hLine = new Line(hLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.rect.add(this.vLine);\n\t\tthis.rect.add(this.hLine);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsCandleWidget.ts\n **/","export * from './deps'\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/index.ts\n **/","export * from './AxisWidget';\nexport * from './GridWidget';\nexport * from './TrendsWidget';\nexport * from './TrendsLineWidget';\nexport * from './TrendsGradientWidget';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/index.ts\n **/"],"sourceRoot":""}