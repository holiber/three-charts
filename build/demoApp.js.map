{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///demoApp.js","webpack:///webpack/bootstrap 45480a954172205a8eed?eb32","webpack:///./demo/demoApp.ts","webpack:///./~/three-chart/build/index.js","webpack:///./~/three-chart/build/ThreeChart.js","webpack:///./plugins/build/TrendsMarksPlugin/index.js","webpack:///./plugins/build/TrendsMarksPlugin/TrendsMarksPlugin.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","0","three_chart_1","TrendsMarksPlugin_1","chart","DataSourse","data","sec","val","startTime","Date","now","push","xVal","yVal","Math","random","endTime","length","prototype","getData","Utils","deepCopy","getNext","lastVal","item","getPrev","firstVal","unshift","MarksSource","generate","descriptionColor","orientation","getRandomItem","TREND_MARK_SIDE","TOP","BOTTOM","trendName","value","title","description","icon","iconColor","window","onload","initListeners","dsMain","dsRed","dsBlue","Chart","yAxis","marks","name","lineColor","stickToEdges","range","padding","end","start","margin","zeroVal","xAxis","dataType","AXIS_DATA_TYPE","DATE","type","AXIS_RANGE_TYPE","FIXED","from","to","maxLength","minLength","showValue","trends","main","TREND_TYPE","LINE","dataset","hasBeacon","hasIndicator","hasGradient","showStats","widgets","TrendsGradient","enabled","document","querySelector","TrendsMarksPlugin","items","setState","animations","mainTrend","getTrend","deadlineMark","state","xAxisMarks","getItem","closeMark","onDataChange","closeValue","options","getLastItem","setOptions","markOptions","setTimeout","trendsMarks","getPlugin","NAME","createMark","i","onPrependRequest","requestedLength","resolve","reject","responseData","ticksCount","round","setInterval","appendData","$checkboxMaintrend","addEventListener","checked","$checkboxRedtrend","red","$checkboxBluetrend","blue","$switchLineBtn","$switchBarsBtn","CANDLE","currentRange","timeframeButtons","querySelectorAll","Number","getAttribute","segmentLength","autoScroll","zoomToRange","scrollToEnd","then","34","35","__export","hasOwnProperty","PerspectiveCamera","THREE","State_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsLoadingWidget_1","AxisMarksWidget_1","BorderWidget_1","TrendsIndicatorWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","TrendsBeaconWidget_1","deps_1","MAX_DATA_LENGTH","$container","plugins","_this","REVISION","error","style","getComputedStyle","width","parseInt","height","ChartState","installedWidgets","zoomThrottled","throttle","zoomValue","origin","zoom","init","installWidget","Widget","widgetName","_a","w","h","autoRender","scene","Scene","isStopped","renderer","renderers","antialias","alpha","setPixelRatio","devicePixelRatio","setClearColor","backgroundColor","backgroundOpacity","setSize","appendChild","domElement","$el","display","stats","Stats","setupCamera","widgetsClasses","widgetOptions","WidgetConstructor","widget","add","getObject3D","bindEvents","renderLoop","isDestroyed","begin","render","fpsLimit","fps","delay","requestAnimationFrame","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","controls","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","forEach","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","oldTrendsMaxX","prevState","computedData","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","min","max","autoScrollIsEnabled","createPreviewChart","userOptions","previewChartOptions","Grid","Axis","deepMerge","CanvasRenderer","WebGLRenderer","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsBeaconWidget","TrendsIndicatorWidget","TrendsLoadingWidget","AxisMarksWidget","BorderWidget","TweenLite","TweenMax","isPlainObject","EE2","es6_promise_1","Promise","a","dom","k","d","children","l","createElement","cssText","g","performance","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","u","n","q","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","SpriteCanvasMaterial","parameters","Material","color","Color","program","setValues","Object","create","constructor","material","copy","console","log","_renderData","_elements","_lights","_projector","Projector","_canvas","canvas","undefined","_canvasWidth","_canvasHeight","_canvasWidthHalf","floor","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_context","_clearColor","_clearAlpha","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_camera","_v1","_v2","_v3","_v4","_v5","RenderableVertex","_v6","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_clipBox","Box2","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_vector3","Vector3","_centroid","_normal","_normalViewMatrix","Matrix3","setLineDash","autoClear","sortObjects","sortElements","info","vertices","faces","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","updateStyle","setViewport","setScissor","setScissorTest","setClearColorHex","hex","warn","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","intersect","expandByScalar","clearRect","setBlending","NormalBlending","setOpacity","setFillStyle","makeEmpty","clearColor","clearDepth","clearStencil","Camera","setTransform","translate","projectScene","elements","lights","getNormalMatrix","matrixWorldInverse","calculateLights","el","element","opacity","RenderableSprite","renderSprite","RenderableLine","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","RenderableFace","v3","overdraw","expand","renderFace3","union","setRGB","ll","light","lightColor","AmbientLight","DirectionalLight","PointLight","calculateLight","normal","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","multiplyScalar","subVectors","distance","distanceTo","blending","scaleX","scale","scaleY","dist","sqrt","SpriteMaterial","texture","map","pattern","version","textureToPattern","bitmap","image","ox","offset","oy","sx","repeat","sy","cx","cy","save","rotation","rotate","restore","getStyle","setStrokeStyle","beginPath","moveTo","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","LineDashedMaterial","dashSize","gapSize","uv1","uv2","uv3","drawTriangle","MeshLambertMaterial","MeshPhongMaterial","emissive","FaceColors","multiply","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","MeshBasicMaterial","mapping","UVMapping","uvs","patternPath","envMap","SphericalReflectionMapping","vertexNormalsModel","applyMatrix3","MeshNormalMaterial","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","repeatX","wrapS","RepeatWrapping","repeatY","wrapT","createPattern","onUpdate","u0","v0","u1","u2","det","idet","offsetX","offsetY","transform","clipImage","clip","pixels","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","lineWidth","lineCap","lineJoin","strokeStyle","RenderableObject","object","renderOrder","vertexNormalsLength","Vector2","Vector4","visible","vertex","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","objects","_vector4","Box3","_boundingBox","_points3","Array","_points4","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","unproject","pickingRay","RenderList","normals","normalMatrix","setObject","projectVertex","applyMatrix4","invW","pushVertex","getNextVertexInPool","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","getNextLineInPool","pushTriangle","side","DoubleSide","getNextFaceInPool","fromArray","arguments","uv","renderList","autoUpdate","updateMatrixWorld","parent","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","traverseVisible","Light","Mesh","Line","Sprite","frustumCulled","intersectsObject","getNextObjectInPool","applyProjection","sort","painterSort","o","ol","geometry","BufferGeometry","attributes","groups","positions","array","index","indices","group","count","Geometry","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","target","targetVertex","fl","face","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","step","LineSegments","clipLine","colors","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","isObject","isObjectObject","toString","ctor","prot","isArray","__WEBPACK_AMD_DEFINE_RESULT__","_isArray","obj","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","concat","**","growListenerTree","listener","split","slice","shift","warned","trace","setMaxListeners","event","once","fn","many","ttl","Error","off","apply","_origin","on","emit","_all","args","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","removeAllListeners","listenersAny","EventEmitter2","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","EventEmmiter_1","Widget_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","initialState","ALL","NUMBER","gridMinSize","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","Linear","easeNone","scrollSpeed","scrollEase","autoScrollSpeed","autoScrollEase","pluginsState","eventEmitterMaxListeners","isReady","ee","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","onDestroy","subscribe","onInitialStateApplied","onReady","onChange","onTrendChange","onZoom","onPluginsStateChange","newState","eventData","silent","stateData","changedProps","key","trendsData","trendOptions","newStateContainsData","keys","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","widgetsOptions","WidgetClass","defaultOptions","getDefaultOptions","ChartWidget","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","copyProps","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","pluginWidgets","PluginWidget","setupChartState","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","rangeLessThenMinValue","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","nextRange","newScroll","animationTime","endXVal","getPointOnXAxis","getPointOnYAxis","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","eventName","_i","listenersCount","deepmerge","src","mergeArrays","dst","indexOf","obj1","obj2","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","intStr","lengthDiff","afterPointDigitsCount","afterPointStr","substr","bindEvent","createTexture","ctx","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","getUid","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","parseColor","cache","replace","exec","isNaN","getHexColor","str","rgb","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","srcObject","dstObject","props","excludeProps","chartState","unsubscriber","Trend_1","EVENTS","SEGMENTS_REBUILDED","trendsCalculatedOptions","trend","createTrend","getCalculatedOptions","getEnabledTrends","enabledTrends","allTrends","getOptions","firstTrendData","getExtremumYVal","extremumIsMax","fromX","toX","compareFn","trends_1","trendData","trendYValues","dataItem","NaN","onSegmentsRebuilded","onInitialStateAppliedHandler","_loop_1","this_1","segments","onRebuild","Trend","TrendSegments_1","PREPEND_REQUEST","DEFAULT_OPTIONS","maxSegmentLength","settingsForTypes","minSegmentLengthInPx","maxSegmentLengthInPx","minYVal","maxYVal","prepareData","TrendSegments","checkForPrependRequest","changedOptions","rawData","updatedTrendData","changeData","prependData","allData","newData_1","statePatch","filteredData","data_1","getFirstItem","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","segmentsById","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","onDestroyHandler","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","currentSegmentLengthInPx","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","valueInPoint","onAnimationFrame","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","needRebuildSegments","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","prevPoint","getFrameVal","getFramePoint","frameVal","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","__extends","__","AXIS_MARK_DEFAULT_OPTIONS","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","_super","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","traverse","transparent","axisMesh","PlaneGeometry","axisOptions","axisGridParams","getGridParamsForAxis","edgeOffset","segmentsCount","pxVal","textAlign","getDateStr","gridParams","hour","day","tf","getHours","getMinutes","getSeconds","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","xLinesCount","yLinesCount","lineSegments","setZ","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","PlaneBufferGeometry","TrendsWidget_1","getTrendWidgetClass","TrendLoading","TrendsWidget","mesh","deactivate","widgetIsEnabled","activate","restart","updatePosition","center","arc","pointVector","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","widgetObject","getObjectByName","onSegmentsAnimate","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY","CANVAS_WIDTH","CANVAS_HEIGHT","OFFSET_X","TrendIndicator","initObject","lastItem","segmentEndXVal","segmentEndYVal","endPointVector","screenWidth","indicatorIsOutOfScreen","MAX_DISPLAYED_SEGMENTS","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","scaleXFactor","scaleYFactor","segmentIsNotDisplayed","destroySegment","setupSegment","segmentState","pop","segmentInd","lineStartVertex","lineEndVertex","toLocalX","toLocalY","currentScale","toLocalVec","vec","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","TrendBeacon","onStateChange","stopAnimation","animated","animationObject","trendsSegments","DEFAULT_CONFIG","installPluginWidgets","ChartPlugin","config","onChartReadyHandler","changedPluginsStates","onStateChanged","changedState","36","37","TrendsMarksWidget_1","trendsMarksPluginOptions","rects","onMarksChangeHandler","marksOptions","newMarkOptions","updateMarksSegments","calclulateMarksPositions","trendsMarksOptions","actualMarksNames","trendsMarksOptions_1","TrendMark","createMarkRect","left","top","isTopSideMark","newOffset","row","markRect","hasIntersection","_setOffset","_setRow","getTrendMarks","marksArr","xVals","_setSegment","points","markInd","trendMarks","TrendsMarksWidget","MAX_MARKS_IN_ROW","TrendMarksWidget","marksWidgets","onMarksChange","getTrendsMarksPlugin","marksItems","createMarkWidget","destroyMarkWidget","markWidget","TrendMarkWidget","onZoomFrameHandler","trendMark","markHeight","markWidth","lineHeight","show","markMesh","createMarkMesh","createMarkLine","isTopSide","circleOffset","circleR","circleX","circleY","textOffset","computeLineDistances","lineMaterial","meshMaterial","posX","posY","lineDistancesNeedUpdate","Elastic","easeOut"],"mappings":"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","file":"demoApp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar three_chart_1 = __webpack_require__(34);\r\n\tvar TrendsMarksPlugin_1 = __webpack_require__(36);\r\n\tvar chart;\r\n\tvar DataSourse = (function () {\r\n\t    function DataSourse() {\r\n\t        this.data = [];\r\n\t        var sec = 0;\r\n\t        var val = 70;\r\n\t        this.startTime = Date.now();\r\n\t        while (sec < 100) {\r\n\t            this.data.push({\r\n\t                xVal: this.startTime + sec * 1000,\r\n\t                yVal: val\r\n\t            });\r\n\t            val += Math.random() * 14 - 7;\r\n\t            sec++;\r\n\t        }\r\n\t        this.endTime = this.data[this.data.length - 1].xVal;\r\n\t    }\r\n\t    DataSourse.prototype.getData = function () {\r\n\t        return three_chart_1.Utils.deepCopy(this.data);\r\n\t    };\r\n\t    DataSourse.prototype.getNext = function () {\r\n\t        var lastVal = this.data[this.data.length - 1];\r\n\t        var yVal = lastVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.endTime + 1000;\r\n\t        this.endTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.push(item);\r\n\t        return item;\r\n\t    };\r\n\t    DataSourse.prototype.getPrev = function () {\r\n\t        var firstVal = this.data[0];\r\n\t        var yVal = firstVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.startTime - 1000;\r\n\t        this.startTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.unshift(item);\r\n\t        return item;\r\n\t    };\r\n\t    return DataSourse;\r\n\t}());\r\n\tvar MarksSource = (function () {\r\n\t    function MarksSource() {\r\n\t    }\r\n\t    MarksSource.getNext = function (val) {\r\n\t        if (Math.random() > 0.2)\r\n\t            return null;\r\n\t        return this.generate(val);\r\n\t    };\r\n\t    MarksSource.generate = function (val) {\r\n\t        var descriptionColor = 'rgb(40,136,75)';\r\n\t        var orientation = three_chart_1.Utils.getRandomItem([TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP, TrendsMarksPlugin_1.TREND_MARK_SIDE.BOTTOM]);\r\n\t        if (orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.BOTTOM) {\r\n\t            descriptionColor = 'rgb(219,73,49)';\r\n\t        }\r\n\t        return {\r\n\t            trendName: 'main',\r\n\t            value: val,\r\n\t            title: three_chart_1.Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\r\n\t            description: three_chart_1.Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\r\n\t            icon: three_chart_1.Utils.getRandomItem(['AM', 'SM', 'HP']),\r\n\t            iconColor: three_chart_1.Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\r\n\t            orientation: orientation,\r\n\t            descriptionColor: descriptionColor\r\n\t        };\r\n\t    };\r\n\t    return MarksSource;\r\n\t}());\r\n\twindow.onload = function () {\r\n\t    initListeners();\r\n\t    var dsMain = new DataSourse();\r\n\t    var dsRed = new DataSourse();\r\n\t    var dsBlue = new DataSourse();\r\n\t    var now = Date.now();\r\n\t    chart = new three_chart_1.Chart({\r\n\t        yAxis: {\r\n\t            marks: [\r\n\t                { value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true },\r\n\t            ],\r\n\t            range: {\r\n\t                padding: { end: 100, start: 100 },\r\n\t                margin: { end: 50, start: 50 },\r\n\t                zeroVal: 70\r\n\t            }\r\n\t        },\r\n\t        xAxis: {\r\n\t            //range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\r\n\t            dataType: three_chart_1.AXIS_DATA_TYPE.DATE,\r\n\t            range: {\r\n\t                type: three_chart_1.AXIS_RANGE_TYPE.FIXED,\r\n\t                from: Date.now(),\r\n\t                to: Date.now() + 20000,\r\n\t                padding: { end: 200, start: 0 },\r\n\t                maxLength: 5000000,\r\n\t                minLength: 5000\r\n\t            },\r\n\t            marks: [\r\n\t                { value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true },\r\n\t                { value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true }\r\n\t            ]\r\n\t        },\r\n\t        trends: {\r\n\t            'main': {\r\n\t                type: three_chart_1.TREND_TYPE.LINE,\r\n\t                dataset: dsMain.getData(),\r\n\t                hasBeacon: true,\r\n\t                hasIndicator: true,\r\n\t                hasGradient: false,\r\n\t            },\r\n\t        },\r\n\t        showStats: true,\r\n\t        // autoRender: {fps: 100},\r\n\t        // animations: {enabled: false},\r\n\t        widgets: {\r\n\t            //Grid: {enabled: false},\r\n\t            //Axis: {enabled: false},\r\n\t            TrendsGradient: { enabled: false },\r\n\t        }\r\n\t    }, document.querySelector('.chart'), [\r\n\t        new TrendsMarksPlugin_1.TrendsMarksPlugin({ items: [MarksSource.generate(now + 3000), MarksSource.generate(now + 3000), MarksSource.generate(now + 4000)] })\r\n\t    ]);\r\n\t    chart.setState({ animations: { enabled: false } });\r\n\t    chart.setState({ animations: { enabled: true } });\r\n\t    window['chart'] = chart;\r\n\t    var mainTrend = chart.getTrend('main');\r\n\t    var deadlineMark = chart.state.xAxisMarks.getItem('deadline');\r\n\t    var closeMark = chart.state.xAxisMarks.getItem('close');\r\n\t    mainTrend.onDataChange(function () {\r\n\t        var closeValue = closeMark.options.value;\r\n\t        if (mainTrend.getLastItem().xVal >= closeValue) {\r\n\t            deadlineMark.setOptions({ value: closeValue + 10000 });\r\n\t            closeMark.setOptions({ value: closeValue + 20000 });\r\n\t        }\r\n\t        var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\r\n\t        if (markOptions)\r\n\t            setTimeout(function () {\r\n\t                var trendsMarks = chart.state.getPlugin(TrendsMarksPlugin_1.TrendsMarksPlugin.NAME);\r\n\t                trendsMarks.createMark(markOptions);\r\n\t            }, 500);\r\n\t    });\r\n\t    // var previewChart1 = Chart.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-chart')[0],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.data, hasBeacon: true}\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart2 = Chart.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-chart')[1],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.data, hasBeacon: true}\r\n\t    // \t},\r\n\t    //\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart3 = Chart.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-chart')[2],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.data, hasBeacon: true},\r\n\t    // \t\t'red': {dataset: dsRed.data, lineColor: 0xFF2222},\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    var i = 0;\r\n\t    chart.getTrend('main').onPrependRequest(function (requestedLength, resolve, reject) {\r\n\t        var responseData = [];\r\n\t        var ticksCount = Math.round(requestedLength / 1000);\r\n\t        while (ticksCount--)\r\n\t            responseData.unshift(dsMain.getPrev());\r\n\t        setTimeout(function () {\r\n\t            resolve(responseData);\r\n\t        }, 2000);\r\n\t    });\r\n\t    setInterval(function () {\r\n\t        i++;\r\n\t        var val = dsMain.getNext();\r\n\t        // [i % 2 ? 10 : 20]\r\n\t        chart.getTrend('main').appendData([val]);\r\n\t        // chart.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\r\n\t        // chart.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // chart.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // chart.getTrend('red').appendData([val + 10 + Math.random() * 20]);\r\n\t        // chart.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.getTrend('main').appendData([val]);\r\n\t        // previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\r\n\t        // previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.appendData(dataToAppend1);\r\n\t        //\r\n\t        // var chartData2 = previewChart2.state.data.trends[0].data;\r\n\t        // var lastItem2 = chartData2[chartData.length - 1];\r\n\t        // var dataToAppend2 = [\r\n\t        // \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\r\n\t        // ];\r\n\t        // previewChart2.appendData(dataToAppend2);\r\n\t        // previewChart3.appendData(dataToAppend2);\r\n\t    }, 1000);\r\n\t};\r\n\tfunction initListeners() {\r\n\t    var $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]');\r\n\t    $checkboxMaintrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { main: { enabled: $checkboxMaintrend.checked } } });\r\n\t    });\r\n\t    var $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]');\r\n\t    $checkboxRedtrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { red: { enabled: $checkboxRedtrend.checked } } });\r\n\t    });\r\n\t    var $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]');\r\n\t    $checkboxBluetrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { blue: { enabled: $checkboxBluetrend.checked } } });\r\n\t    });\r\n\t    var $switchLineBtn = document.querySelector('[name=\"switch-line\"]');\r\n\t    $switchLineBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: three_chart_1.TREND_TYPE.LINE });\r\n\t    });\r\n\t    var $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]');\r\n\t    $switchBarsBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: three_chart_1.TREND_TYPE.CANDLE });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-left\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.state.data.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { from: currentRange.from - 2000 } } });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-right\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.state.data.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { to: currentRange.to + 2000 } } });\r\n\t    });\r\n\t    var timeframeButtons = document.querySelectorAll(\".timeframe\");\r\n\t    for (var i = 0; i < timeframeButtons.length; i++) {\r\n\t        timeframeButtons[i].addEventListener(\"click\", function () {\r\n\t            var range = Number(this.getAttribute('data-range'));\r\n\t            var segmentLength = Number(this.getAttribute('data-segment-length'));\r\n\t            chart.state.setState({ autoScroll: false });\r\n\t            chart.state.zoomToRange(range);\r\n\t            chart.state.scrollToEnd().then(function () {\r\n\t                chart.state.setState({ autoScroll: true });\r\n\t            });\r\n\t        });\r\n\t    }\r\n\t}\r\n\n\n/***/ },\n\n/***/ 34:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(35)\n\n/***/ },\n\n/***/ 35:\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t    if (true) module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"ThreeChart\"] = factory(); else root[\"ThreeChart\"] = factory();\n\t})(this, function() {\n\t    return function(modules) {\n\t        var installedModules = {};\n\t        function __webpack_require__(moduleId) {\n\t            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n\t            var module = installedModules[moduleId] = {\n\t                exports: {},\n\t                id: moduleId,\n\t                loaded: false\n\t            };\n\t            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t            module.loaded = true;\n\t            return module.exports;\n\t        }\n\t        __webpack_require__.m = modules;\n\t        __webpack_require__.c = installedModules;\n\t        __webpack_require__.p = \"\";\n\t        return __webpack_require__(0);\n\t    }([ function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(1));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(2));\n\t        __export(__webpack_require__(21));\n\t        __export(__webpack_require__(20));\n\t        __export(__webpack_require__(19));\n\t        __export(__webpack_require__(12));\n\t        __export(__webpack_require__(17));\n\t        __export(__webpack_require__(18));\n\t        __export(__webpack_require__(16));\n\t        __export(__webpack_require__(14));\n\t        __export(__webpack_require__(15));\n\t        __export(__webpack_require__(33));\n\t        __export(__webpack_require__(25));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        __webpack_require__(3);\n\t        var PerspectiveCamera = THREE.PerspectiveCamera;\n\t        var State_1 = __webpack_require__(12);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var AxisWidget_1 = __webpack_require__(22);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var TrendsLoadingWidget_1 = __webpack_require__(24);\n\t        var AxisMarksWidget_1 = __webpack_require__(26);\n\t        var BorderWidget_1 = __webpack_require__(27);\n\t        var TrendsIndicatorWidget_1 = __webpack_require__(28);\n\t        var TrendsLineWidget_1 = __webpack_require__(29);\n\t        var TrendsCandleWidget_1 = __webpack_require__(30);\n\t        var TrendsBeaconWidget_1 = __webpack_require__(31);\n\t        var deps_1 = __webpack_require__(32);\n\t        exports.MAX_DATA_LENGTH = 2692e3;\n\t        var Chart = function() {\n\t            function Chart(state, $container, plugins) {\n\t                var _this = this;\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.widgets = [];\n\t                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n\t                if (!$container) {\n\t                    Utils_1.Utils.error(\"$el must be set\");\n\t                }\n\t                var style = getComputedStyle($container);\n\t                state.width = parseInt(style.width);\n\t                state.height = parseInt(style.height);\n\t                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n\t                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n\t                    return _this.zoom(zoomValue, origin);\n\t                }, 200);\n\t                this.$container = $container;\n\t                this.init($container);\n\t            }\n\t            Chart.installWidget = function(Widget) {\n\t                if (!Widget.widgetName) {\n\t                    Utils_1.Utils.error(\"unnamed widget\");\n\t                }\n\t                this.installedWidgets[Widget.widgetName] = Widget;\n\t            };\n\t            Chart.prototype.init = function($container) {\n\t                var state = this.state;\n\t                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n\t                this.scene = new THREE.Scene();\n\t                this.isStopped = !autoRender.enabled;\n\t                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n\t                    antialias: true,\n\t                    alpha: true\n\t                });\n\t                renderer.setPixelRatio(Chart.devicePixelRatio);\n\t                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n\t                renderer.setSize(w, h);\n\t                $container.appendChild(renderer.domElement);\n\t                this.$el = renderer.domElement;\n\t                this.$el.style.display = \"block\";\n\t                if (showStats) {\n\t                    this.stats = new Stats();\n\t                    $container.appendChild(this.stats.domElement);\n\t                }\n\t                this.setupCamera();\n\t                var widgetsClasses = this.state.widgetsClasses;\n\t                for (var widgetName in widgetsClasses) {\n\t                    var widgetOptions = this.state.data.widgets[widgetName];\n\t                    if (!widgetOptions.enabled) continue;\n\t                    var WidgetConstructor = widgetsClasses[widgetName];\n\t                    var widget = new WidgetConstructor(this.state);\n\t                    this.scene.add(widget.getObject3D());\n\t                    this.widgets.push(widget);\n\t                }\n\t                this.bindEvents();\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.renderLoop = function() {\n\t                var _this = this;\n\t                if (this.isDestroyed) return;\n\t                this.stats && this.stats.begin();\n\t                this.render();\n\t                if (this.isStopped) return;\n\t                var fpsLimit = this.state.data.autoRender.fps;\n\t                if (fpsLimit) {\n\t                    var delay = 1e3 / fpsLimit;\n\t                    setTimeout(function() {\n\t                        return requestAnimationFrame(function() {\n\t                            return _this.renderLoop();\n\t                        });\n\t                    }, delay);\n\t                } else {\n\t                    requestAnimationFrame(function() {\n\t                        return _this.renderLoop();\n\t                    });\n\t                }\n\t                this.stats && this.stats.end();\n\t            };\n\t            Chart.prototype.render = function() {\n\t                this.renderer.render(this.scene, this.camera);\n\t            };\n\t            Chart.prototype.stop = function() {\n\t                this.isStopped = true;\n\t            };\n\t            Chart.prototype.run = function() {\n\t                this.isStopped = false;\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.destroy = function() {\n\t                this.isDestroyed = true;\n\t                this.stop();\n\t                this.state.destroy();\n\t                this.unbindEvents();\n\t                try {\n\t                    this.renderer.forceContextLoss();\n\t                } catch (wtf) {}\n\t                this.renderer.context = null;\n\t                this.renderer.domElement = null;\n\t                this.renderer = null;\n\t            };\n\t            Chart.prototype.getState = function() {\n\t                return this.state.data;\n\t            };\n\t            Chart.prototype.getTrend = function(trendName) {\n\t                return this.state.getTrend(trendName);\n\t            };\n\t            Chart.prototype.setState = function(state) {\n\t                return this.state.setState(state);\n\t            };\n\t            Chart.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var $el = this.$el;\n\t                if (this.state.data.controls.enabled) {\n\t                    $el.addEventListener(\"mousewheel\", function(ev) {\n\t                        _this.onMouseWheel(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousemove\", function(ev) {\n\t                        _this.onMouseMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousedown\", function(ev) {\n\t                        return _this.onMouseDown(ev);\n\t                    });\n\t                    $el.addEventListener(\"mouseup\", function(ev) {\n\t                        return _this.onMouseUp(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchmove\", function(ev) {\n\t                        _this.onTouchMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchend\", function(ev) {\n\t                        _this.onTouchEnd(ev);\n\t                    });\n\t                }\n\t                if (this.state.data.autoResize) {\n\t                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n\t                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n\t                    });\n\t                }\n\t                this.unsubscribers = [ this.state.onTrendsChange(function() {\n\t                    return _this.autoscroll();\n\t                }), this.state.screen.onTransformationFrame(function(options) {\n\t                    return _this.onScreenTransformHandler(options);\n\t                }), this.state.onResize(function(options) {\n\t                    return _this.onChartResize();\n\t                }) ];\n\t            };\n\t            Chart.prototype.unbindEvents = function() {\n\t                try {\n\t                    this.resizeSensor && this.resizeSensor.detach();\n\t                } catch (e) {}\n\t                this.$el.remove();\n\t                this.unsubscribers.forEach(function(unsubscribe) {\n\t                    return unsubscribe();\n\t                });\n\t            };\n\t            Chart.prototype.setupCamera = function() {\n\t                var camSettings = this.state.screen.getCameraSettings();\n\t                if (!this.camera) {\n\t                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t                    this.scene.add(this.camera);\n\t                } else {\n\t                    this.camera.fov = camSettings.FOV;\n\t                    this.camera.aspect = camSettings.aspect;\n\t                    this.camera.far = camSettings.far;\n\t                    this.camera.near = camSettings.near;\n\t                    this.camera.updateProjectionMatrix();\n\t                }\n\t                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t                this.cameraInitialPosition = this.camera.position.clone();\n\t                this.onScreenTransformHandler(this.state.screen.options);\n\t            };\n\t            Chart.prototype.onScreenTransformHandler = function(options) {\n\t                if (options.scrollX != void 0) {\n\t                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n\t                    this.camera.position.setX(scrollX_1);\n\t                }\n\t                if (options.scrollY != void 0) {\n\t                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n\t                    this.camera.position.setY(scrollY_1);\n\t                }\n\t            };\n\t            Chart.prototype.autoscroll = function() {\n\t                var state = this.state;\n\t                if (!state.data.autoScroll) return;\n\t                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n\t                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n\t                if (trendsMaxXDelta > 0) {\n\t                    var maxVisibleX = this.state.screen.getScreenRightVal();\n\t                    var paddingRightX = this.state.getPaddingRight();\n\t                    var currentScroll = state.data.xAxis.range.scroll;\n\t                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t                        return;\n\t                    }\n\t                    var scrollDelta = trendsMaxXDelta;\n\t                    this.setState({\n\t                        xAxis: {\n\t                            range: {\n\t                                scroll: currentScroll + scrollDelta\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onScrollStop = function() {};\n\t            Chart.prototype.onMouseDown = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.clientX,\n\t                        y: ev.clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseUp = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseMove = function(ev) {\n\t                if (this.state.data.cursor.dragMode) {\n\t                    this.setState({\n\t                        cursor: {\n\t                            dragMode: true,\n\t                            x: ev.clientX,\n\t                            y: ev.clientY\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onMouseWheel = function(ev) {\n\t                ev.stopPropagation();\n\t                ev.preventDefault();\n\t                var zoomOrigin = ev.layerX / this.state.data.width;\n\t                var zoomValue = 1 + ev.wheelDeltaY * .001;\n\t                this.zoom(zoomValue, zoomOrigin);\n\t            };\n\t            Chart.prototype.onTouchMove = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.touches[0].clientX,\n\t                        y: ev.touches[0].clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onTouchEnd = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n\t                this.setState({\n\t                    width: width,\n\t                    height: height\n\t                });\n\t            };\n\t            Chart.prototype.onChartResize = function() {\n\t                var _a = this.state.data, width = _a.width, height = _a.height;\n\t                this.renderer.setSize(width, height);\n\t                this.setupCamera();\n\t            };\n\t            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n\t                var _this = this;\n\t                var MAX_ZOOM_VALUE = 1.5;\n\t                var MIN_ZOOM_VALUE = .7;\n\t                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t                var autoScrollIsEnabled = this.state.data.autoScroll;\n\t                if (autoScrollIsEnabled) this.state.setState({\n\t                    autoScroll: false\n\t                });\n\t                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n\t                    if (autoScrollIsEnabled) _this.setState({\n\t                        autoScroll: true\n\t                    });\n\t                });\n\t            };\n\t            Chart.createPreviewChart = function(userOptions, $el) {\n\t                var previewChartOptions = {\n\t                    animations: {\n\t                        enabled: false\n\t                    },\n\t                    widgets: {\n\t                        Grid: {\n\t                            enabled: false\n\t                        },\n\t                        Axis: {\n\t                            enabled: false\n\t                        },\n\t                        TrendsGradient: {\n\t                            enabled: false\n\t                        }\n\t                    }\n\t                };\n\t                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n\t                return new Chart(options, $el);\n\t            };\n\t            Chart.devicePixelRatio = window.devicePixelRatio;\n\t            Chart.installedWidgets = {};\n\t            Chart.renderers = {\n\t                CanvasRenderer: THREE.CanvasRenderer,\n\t                WebGLRenderer: THREE.WebGLRenderer\n\t            };\n\t            return Chart;\n\t        }();\n\t        exports.Chart = Chart;\n\t        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n\t        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n\t        Chart.installWidget(AxisWidget_1.AxisWidget);\n\t        Chart.installWidget(GridWidget_1.GridWidget);\n\t        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n\t        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n\t        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n\t        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n\t        Chart.installWidget(BorderWidget_1.BorderWidget);\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        window.TweenLite = TweenMax;\n\t        window.Stats = __webpack_require__(4);\n\t        __webpack_require__(5);\n\t        __webpack_require__(6);\n\t        exports.isPlainObject = __webpack_require__(7);\n\t        exports.EE2 = __webpack_require__(9);\n\t        var es6_promise_1 = __webpack_require__(10);\n\t        exports.Promise = es6_promise_1.Promise;\n\t        exports.ResizeSensor = __webpack_require__(11);\n\t    }, function(module, exports) {\n\t        var Stats = function() {\n\t            function h(a) {\n\t                c.appendChild(a.dom);\n\t                return a;\n\t            }\n\t            function k(a) {\n\t                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n\t                l = a;\n\t            }\n\t            var l = 0, c = document.createElement(\"div\");\n\t            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n\t            c.addEventListener(\"click\", function(a) {\n\t                a.preventDefault();\n\t                k(++l % c.children.length);\n\t            }, !1);\n\t            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n\t            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n\t            k(0);\n\t            return {\n\t                REVISION: 16,\n\t                dom: c,\n\t                addPanel: h,\n\t                showPanel: k,\n\t                begin: function() {\n\t                    g = (performance || Date).now();\n\t                },\n\t                end: function() {\n\t                    a++;\n\t                    var c = (performance || Date).now();\n\t                    f.update(c - g, 200);\n\t                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n\t                        var d = performance.memory;\n\t                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n\t                    }\n\t                    return c;\n\t                },\n\t                update: function() {\n\t                    g = this.end();\n\t                },\n\t                domElement: c,\n\t                setMode: k\n\t            };\n\t        };\n\t        Stats.Panel = function(h, k, l) {\n\t            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n\t            q.width = r;\n\t            q.height = f;\n\t            q.style.cssText = \"width:80px;height:48px\";\n\t            var b = q.getContext(\"2d\");\n\t            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n\t            b.textBaseline = \"top\";\n\t            b.fillStyle = l;\n\t            b.fillRect(0, 0, r, f);\n\t            b.fillStyle = k;\n\t            b.fillText(h, t, u);\n\t            b.fillRect(d, m, n, p);\n\t            b.fillStyle = l;\n\t            b.globalAlpha = .9;\n\t            b.fillRect(d, m, n, p);\n\t            return {\n\t                dom: q,\n\t                update: function(f, v) {\n\t                    c = Math.min(c, f);\n\t                    g = Math.max(g, f);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = 1;\n\t                    b.fillRect(0, 0, r, m);\n\t                    b.fillStyle = k;\n\t                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n\t                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n\t                    b.fillRect(d + n - a, m, a, p);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = .9;\n\t                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n\t                }\n\t            };\n\t        };\n\t        \"object\" === typeof module && (module.exports = Stats);\n\t    }, function(module, exports) {\n\t        THREE.SpriteCanvasMaterial = function(parameters) {\n\t            THREE.Material.call(this);\n\t            this.type = \"SpriteCanvasMaterial\";\n\t            this.color = new THREE.Color(16777215);\n\t            this.program = function(context, color) {};\n\t            this.setValues(parameters);\n\t        };\n\t        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n\t        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n\t            var material = new THREE.SpriteCanvasMaterial();\n\t            material.copy(this);\n\t            material.color.copy(this.color);\n\t            material.program = this.program;\n\t            return material;\n\t        };\n\t        THREE.CanvasRenderer = function(parameters) {\n\t            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n\t            parameters = parameters || {};\n\t            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n\t                alpha: parameters.alpha === true\n\t            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n\t            if (_context.setLineDash === undefined) {\n\t                _context.setLineDash = function() {};\n\t            }\n\t            this.domElement = _canvas;\n\t            this.autoClear = true;\n\t            this.sortObjects = true;\n\t            this.sortElements = true;\n\t            this.info = {\n\t                render: {\n\t                    vertices: 0,\n\t                    faces: 0\n\t                }\n\t            };\n\t            this.supportsVertexTextures = function() {};\n\t            this.setFaceCulling = function() {};\n\t            this.getContext = function() {\n\t                return _context;\n\t            };\n\t            this.getContextAttributes = function() {\n\t                return _context.getContextAttributes();\n\t            };\n\t            this.getPixelRatio = function() {\n\t                return _pixelRatio;\n\t            };\n\t            this.setPixelRatio = function(value) {\n\t                if (value !== undefined) _pixelRatio = value;\n\t            };\n\t            this.setSize = function(width, height, updateStyle) {\n\t                _canvasWidth = width * _pixelRatio;\n\t                _canvasHeight = height * _pixelRatio;\n\t                _canvas.width = _canvasWidth;\n\t                _canvas.height = _canvasHeight;\n\t                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n\t                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n\t                if (updateStyle !== false) {\n\t                    _canvas.style.width = width + \"px\";\n\t                    _canvas.style.height = height + \"px\";\n\t                }\n\t                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _contextGlobalAlpha = 1;\n\t                _contextGlobalCompositeOperation = 0;\n\t                _contextStrokeStyle = null;\n\t                _contextFillStyle = null;\n\t                _contextLineWidth = null;\n\t                _contextLineCap = null;\n\t                _contextLineJoin = null;\n\t                this.setViewport(0, 0, width, height);\n\t            };\n\t            this.setViewport = function(x, y, width, height) {\n\t                _viewportX = x * _pixelRatio;\n\t                _viewportY = y * _pixelRatio;\n\t                _viewportWidth = width * _pixelRatio;\n\t                _viewportHeight = height * _pixelRatio;\n\t            };\n\t            this.setScissor = function() {};\n\t            this.setScissorTest = function() {};\n\t            this.setClearColor = function(color, alpha) {\n\t                _clearColor.set(color);\n\t                _clearAlpha = alpha !== undefined ? alpha : 1;\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t            };\n\t            this.setClearColorHex = function(hex, alpha) {\n\t                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n\t                this.setClearColor(hex, alpha);\n\t            };\n\t            this.getClearColor = function() {\n\t                return _clearColor;\n\t            };\n\t            this.getClearAlpha = function() {\n\t                return _clearAlpha;\n\t            };\n\t            this.getMaxAnisotropy = function() {\n\t                return 0;\n\t            };\n\t            this.clear = function() {\n\t                if (_clearBox.isEmpty() === false) {\n\t                    _clearBox.intersect(_clipBox);\n\t                    _clearBox.expandByScalar(2);\n\t                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n\t                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n\t                    if (_clearAlpha < 1) {\n\t                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    if (_clearAlpha > 0) {\n\t                        setBlending(THREE.NormalBlending);\n\t                        setOpacity(1);\n\t                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n\t                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    _clearBox.makeEmpty();\n\t                }\n\t            };\n\t            this.clearColor = function() {};\n\t            this.clearDepth = function() {};\n\t            this.clearStencil = function() {};\n\t            this.render = function(scene, camera) {\n\t                if (camera instanceof THREE.Camera === false) {\n\t                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n\t                    return;\n\t                }\n\t                if (this.autoClear === true) this.clear();\n\t                _this.info.render.vertices = 0;\n\t                _this.info.render.faces = 0;\n\t                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n\t                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n\t                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n\t                _elements = _renderData.elements;\n\t                _lights = _renderData.lights;\n\t                _camera = camera;\n\t                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\t                calculateLights();\n\t                for (var e = 0, el = _elements.length; e < el; e++) {\n\t                    var element = _elements[e];\n\t                    var material = element.material;\n\t                    if (material === undefined || material.opacity === 0) continue;\n\t                    _elemBox.makeEmpty();\n\t                    if (element instanceof THREE.RenderableSprite) {\n\t                        _v1 = element;\n\t                        _v1.x *= _canvasWidthHalf;\n\t                        _v1.y *= _canvasHeightHalf;\n\t                        renderSprite(_v1, element, material);\n\t                    } else if (element instanceof THREE.RenderableLine) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderLine(_v1, _v2, element, material);\n\t                        }\n\t                    } else if (element instanceof THREE.RenderableFace) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v3 = element.v3;\n\t                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n\t                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n\t                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _v3.positionScreen.x *= _canvasWidthHalf;\n\t                        _v3.positionScreen.y *= _canvasHeightHalf;\n\t                        if (material.overdraw > 0) {\n\t                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n\t                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n\t                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n\t                        }\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n\t                        }\n\t                    }\n\t                    _clearBox.union(_elemBox);\n\t                }\n\t                _context.setTransform(1, 0, 0, 1, 0, 0);\n\t            };\n\t            function calculateLights() {\n\t                _ambientLight.setRGB(0, 0, 0);\n\t                _directionalLights.setRGB(0, 0, 0);\n\t                _pointLights.setRGB(0, 0, 0);\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    var lightColor = light.color;\n\t                    if (light instanceof THREE.AmbientLight) {\n\t                        _ambientLight.add(lightColor);\n\t                    } else if (light instanceof THREE.DirectionalLight) {\n\t                        _directionalLights.add(lightColor);\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        _pointLights.add(lightColor);\n\t                    }\n\t                }\n\t            }\n\t            function calculateLight(position, normal, color) {\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    _lightColor.copy(light.color);\n\t                    if (light instanceof THREE.DirectionalLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\t                        var amount = normal.dot(lightPosition);\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\t                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n\t                        if (amount == 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    }\n\t                }\n\t            }\n\t            function renderSprite(v1, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                var scaleX = element.scale.x * _canvasWidthHalf;\n\t                var scaleY = element.scale.y * _canvasHeightHalf;\n\t                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n\t                _elemBox.min.set(v1.x - dist, v1.y - dist);\n\t                _elemBox.max.set(v1.x + dist, v1.y + dist);\n\t                if (material instanceof THREE.SpriteMaterial) {\n\t                    var texture = material.map;\n\t                    if (texture !== null) {\n\t                        var pattern = _patterns[texture.id];\n\t                        if (pattern === undefined || pattern.version !== texture.version) {\n\t                            pattern = textureToPattern(texture);\n\t                            _patterns[texture.id] = pattern;\n\t                        }\n\t                        if (pattern.canvas !== undefined) {\n\t                            setFillStyle(pattern.canvas);\n\t                            var bitmap = texture.image;\n\t                            var ox = bitmap.width * texture.offset.x;\n\t                            var oy = bitmap.height * texture.offset.y;\n\t                            var sx = bitmap.width * texture.repeat.x;\n\t                            var sy = bitmap.height * texture.repeat.y;\n\t                            var cx = scaleX / sx;\n\t                            var cy = scaleY / sy;\n\t                            _context.save();\n\t                            _context.translate(v1.x, v1.y);\n\t                            if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                            _context.translate(-scaleX / 2, -scaleY / 2);\n\t                            _context.scale(cx, cy);\n\t                            _context.translate(-ox, -oy);\n\t                            _context.fillRect(ox, oy, sx, sy);\n\t                            _context.restore();\n\t                        }\n\t                    } else {\n\t                        setFillStyle(material.color.getStyle());\n\t                        _context.save();\n\t                        _context.translate(v1.x, v1.y);\n\t                        if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                        _context.scale(scaleX, -scaleY);\n\t                        _context.fillRect(-.5, -.5, 1, 1);\n\t                        _context.restore();\n\t                    }\n\t                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setFillStyle(material.color.getStyle());\n\t                    _context.save();\n\t                    _context.translate(v1.x, v1.y);\n\t                    if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                    _context.scale(scaleX, scaleY);\n\t                    material.program(_context);\n\t                    _context.restore();\n\t                }\n\t            }\n\t            function renderLine(v1, v2, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _context.beginPath();\n\t                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n\t                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n\t                if (material instanceof THREE.LineBasicMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    if (material.vertexColors !== THREE.VertexColors) {\n\t                        setStrokeStyle(material.color.getStyle());\n\t                    } else {\n\t                        var colorStyle1 = element.vertexColors[0].getStyle();\n\t                        var colorStyle2 = element.vertexColors[1].getStyle();\n\t                        if (colorStyle1 === colorStyle2) {\n\t                            setStrokeStyle(colorStyle1);\n\t                        } else {\n\t                            try {\n\t                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n\t                                grad.addColorStop(0, colorStyle1);\n\t                                grad.addColorStop(1, colorStyle2);\n\t                            } catch (exception) {\n\t                                grad = colorStyle1;\n\t                            }\n\t                            setStrokeStyle(grad);\n\t                        }\n\t                    }\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                } else if (material instanceof THREE.LineDashedMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setLineDash([ material.dashSize, material.gapSize ]);\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                    setLineDash([]);\n\t                }\n\t            }\n\t            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n\t                _this.info.render.vertices += 3;\n\t                _this.info.render.faces++;\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _v1x = v1.positionScreen.x;\n\t                _v1y = v1.positionScreen.y;\n\t                _v2x = v2.positionScreen.x;\n\t                _v2y = v2.positionScreen.y;\n\t                _v3x = v3.positionScreen.x;\n\t                _v3y = v3.positionScreen.y;\n\t                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n\t                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n\t                    _diffuseColor.copy(material.color);\n\t                    _emissiveColor.copy(material.emissive);\n\t                    if (material.vertexColors === THREE.FaceColors) {\n\t                        _diffuseColor.multiply(element.color);\n\t                    }\n\t                    _color.copy(_ambientLight);\n\t                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\t                    calculateLight(_centroid, element.normalModel, _color);\n\t                    _color.multiply(_diffuseColor).add(_emissiveColor);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n\t                    if (material.map !== null) {\n\t                        var mapping = material.map.mapping;\n\t                        if (mapping === THREE.UVMapping) {\n\t                            _uvs = element.uvs;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n\t                        }\n\t                    } else if (material.envMap !== null) {\n\t                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n\t                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n\t                            _uv1x = .5 * _normal.x + .5;\n\t                            _uv1y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n\t                            _uv2x = .5 * _normal.x + .5;\n\t                            _uv2y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n\t                            _uv3x = .5 * _normal.x + .5;\n\t                            _uv3y = .5 * _normal.y + .5;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n\t                        }\n\t                    } else {\n\t                        _color.copy(material.color);\n\t                        if (material.vertexColors === THREE.FaceColors) {\n\t                            _color.multiply(element.color);\n\t                        }\n\t                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                    }\n\t                } else if (material instanceof THREE.MeshNormalMaterial) {\n\t                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n\t                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else {\n\t                    _color.setRGB(1, 1, 1);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                }\n\t            }\n\t            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n\t                _context.beginPath();\n\t                _context.moveTo(x0, y0);\n\t                _context.lineTo(x1, y1);\n\t                _context.lineTo(x2, y2);\n\t                _context.closePath();\n\t            }\n\t            function strokePath(color, linewidth, linecap, linejoin) {\n\t                setLineWidth(linewidth);\n\t                setLineCap(linecap);\n\t                setLineJoin(linejoin);\n\t                setStrokeStyle(color.getStyle());\n\t                _context.stroke();\n\t                _elemBox.expandByScalar(linewidth * 2);\n\t            }\n\t            function fillPath(color) {\n\t                setFillStyle(color.getStyle());\n\t                _context.fill();\n\t            }\n\t            function textureToPattern(texture) {\n\t                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: texture.version\n\t                    };\n\t                }\n\t                var image = texture.image;\n\t                if (image.complete === false) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: 0\n\t                    };\n\t                }\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = image.width;\n\t                canvas.height = image.height;\n\t                var context = canvas.getContext(\"2d\");\n\t                context.setTransform(1, 0, 0, -1, 0, image.height);\n\t                context.drawImage(image, 0, 0);\n\t                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t                var repeat = \"no-repeat\";\n\t                if (repeatX === true && repeatY === true) {\n\t                    repeat = \"repeat\";\n\t                } else if (repeatX === true) {\n\t                    repeat = \"repeat-x\";\n\t                } else if (repeatY === true) {\n\t                    repeat = \"repeat-y\";\n\t                }\n\t                var pattern = _context.createPattern(canvas, repeat);\n\t                if (texture.onUpdate) texture.onUpdate(texture);\n\t                return {\n\t                    canvas: pattern,\n\t                    version: texture.version\n\t                };\n\t            }\n\t            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n\t                var pattern = _patterns[texture.id];\n\t                if (pattern === undefined || pattern.version !== texture.version) {\n\t                    pattern = textureToPattern(texture);\n\t                    _patterns[texture.id] = pattern;\n\t                }\n\t                if (pattern.canvas !== undefined) {\n\t                    setFillStyle(pattern.canvas);\n\t                } else {\n\t                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n\t                    _context.fill();\n\t                    return;\n\t                }\n\t                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n\t                u0 = (u0 + offsetX) * width;\n\t                v0 = (v0 + offsetY) * height;\n\t                u1 = (u1 + offsetX) * width;\n\t                v1 = (v1 + offsetY) * height;\n\t                u2 = (u2 + offsetX) * width;\n\t                v2 = (v2 + offsetY) * height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                if (det === 0) return;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.fill();\n\t                _context.restore();\n\t            }\n\t            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n\t                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n\t                u0 *= width;\n\t                v0 *= height;\n\t                u1 *= width;\n\t                v1 *= height;\n\t                u2 *= width;\n\t                v2 *= height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.clip();\n\t                _context.drawImage(image, 0, 0);\n\t                _context.restore();\n\t            }\n\t            function expand(v1, v2, pixels) {\n\t                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n\t                if (det === 0) return;\n\t                idet = pixels / Math.sqrt(det);\n\t                x *= idet;\n\t                y *= idet;\n\t                v2.x += x;\n\t                v2.y += y;\n\t                v1.x -= x;\n\t                v1.y -= y;\n\t            }\n\t            function setOpacity(value) {\n\t                if (_contextGlobalAlpha !== value) {\n\t                    _context.globalAlpha = value;\n\t                    _contextGlobalAlpha = value;\n\t                }\n\t            }\n\t            function setBlending(value) {\n\t                if (_contextGlobalCompositeOperation !== value) {\n\t                    if (value === THREE.NormalBlending) {\n\t                        _context.globalCompositeOperation = \"source-over\";\n\t                    } else if (value === THREE.AdditiveBlending) {\n\t                        _context.globalCompositeOperation = \"lighter\";\n\t                    } else if (value === THREE.SubtractiveBlending) {\n\t                        _context.globalCompositeOperation = \"darker\";\n\t                    }\n\t                    _contextGlobalCompositeOperation = value;\n\t                }\n\t            }\n\t            function setLineWidth(value) {\n\t                if (_contextLineWidth !== value) {\n\t                    _context.lineWidth = value;\n\t                    _contextLineWidth = value;\n\t                }\n\t            }\n\t            function setLineCap(value) {\n\t                if (_contextLineCap !== value) {\n\t                    _context.lineCap = value;\n\t                    _contextLineCap = value;\n\t                }\n\t            }\n\t            function setLineJoin(value) {\n\t                if (_contextLineJoin !== value) {\n\t                    _context.lineJoin = value;\n\t                    _contextLineJoin = value;\n\t                }\n\t            }\n\t            function setStrokeStyle(value) {\n\t                if (_contextStrokeStyle !== value) {\n\t                    _context.strokeStyle = value;\n\t                    _contextStrokeStyle = value;\n\t                }\n\t            }\n\t            function setFillStyle(value) {\n\t                if (_contextFillStyle !== value) {\n\t                    _context.fillStyle = value;\n\t                    _contextFillStyle = value;\n\t                }\n\t            }\n\t            function setLineDash(value) {\n\t                if (_contextLineDash.length !== value.length) {\n\t                    _context.setLineDash(value);\n\t                    _contextLineDash = value;\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports) {\n\t        THREE.RenderableObject = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableFace = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.v3 = new THREE.RenderableVertex();\n\t            this.normalModel = new THREE.Vector3();\n\t            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t            this.vertexNormalsLength = 0;\n\t            this.color = new THREE.Color();\n\t            this.material = null;\n\t            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableVertex = function() {\n\t            this.position = new THREE.Vector3();\n\t            this.positionWorld = new THREE.Vector3();\n\t            this.positionScreen = new THREE.Vector4();\n\t            this.visible = true;\n\t        };\n\t        THREE.RenderableVertex.prototype.copy = function(vertex) {\n\t            this.positionWorld.copy(vertex.positionWorld);\n\t            this.positionScreen.copy(vertex.positionScreen);\n\t        };\n\t        THREE.RenderableLine = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t            this.material = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableSprite = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.x = 0;\n\t            this.y = 0;\n\t            this.z = 0;\n\t            this.rotation = 0;\n\t            this.scale = new THREE.Vector2();\n\t            this.material = null;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.Projector = function() {\n\t            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n\t                objects: [],\n\t                lights: [],\n\t                elements: []\n\t            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n\t            this.projectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n\t                vector.project(camera);\n\t            };\n\t            this.unprojectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n\t                vector.unproject(camera);\n\t            };\n\t            this.pickingRay = function(vector, camera) {\n\t                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n\t            };\n\t            var RenderList = function() {\n\t                var normals = [];\n\t                var uvs = [];\n\t                var object = null;\n\t                var material = null;\n\t                var normalMatrix = new THREE.Matrix3();\n\t                function setObject(value) {\n\t                    object = value;\n\t                    material = object.material;\n\t                    normalMatrix.getNormalMatrix(object.matrixWorld);\n\t                    normals.length = 0;\n\t                    uvs.length = 0;\n\t                }\n\t                function projectVertex(vertex) {\n\t                    var position = vertex.position;\n\t                    var positionWorld = vertex.positionWorld;\n\t                    var positionScreen = vertex.positionScreen;\n\t                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n\t                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n\t                    var invW = 1 / positionScreen.w;\n\t                    positionScreen.x *= invW;\n\t                    positionScreen.y *= invW;\n\t                    positionScreen.z *= invW;\n\t                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n\t                }\n\t                function pushVertex(x, y, z) {\n\t                    _vertex = getNextVertexInPool();\n\t                    _vertex.position.set(x, y, z);\n\t                    projectVertex(_vertex);\n\t                }\n\t                function pushNormal(x, y, z) {\n\t                    normals.push(x, y, z);\n\t                }\n\t                function pushUv(x, y) {\n\t                    uvs.push(x, y);\n\t                }\n\t                function checkTriangleVisibility(v1, v2, v3) {\n\t                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n\t                    _points3[0] = v1.positionScreen;\n\t                    _points3[1] = v2.positionScreen;\n\t                    _points3[2] = v3.positionScreen;\n\t                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n\t                }\n\t                function checkBackfaceCulling(v1, v2, v3) {\n\t                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n\t                }\n\t                function pushLine(a, b) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    _line = getNextLineInPool();\n\t                    _line.id = object.id;\n\t                    _line.v1.copy(v1);\n\t                    _line.v2.copy(v2);\n\t                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n\t                    _line.renderOrder = object.renderOrder;\n\t                    _line.material = object.material;\n\t                    _renderData.elements.push(_line);\n\t                }\n\t                function pushTriangle(a, b, c) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    var v3 = _vertexPool[c];\n\t                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\t                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n\t                        _face = getNextFaceInPool();\n\t                        _face.id = object.id;\n\t                        _face.v1.copy(v1);\n\t                        _face.v2.copy(v2);\n\t                        _face.v3.copy(v3);\n\t                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                        _face.renderOrder = object.renderOrder;\n\t                        _face.normalModel.fromArray(normals, a * 3);\n\t                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\t                        for (var i = 0; i < 3; i++) {\n\t                            var normal = _face.vertexNormalsModel[i];\n\t                            normal.fromArray(normals, arguments[i] * 3);\n\t                            normal.applyMatrix3(normalMatrix).normalize();\n\t                            var uv = _face.uvs[i];\n\t                            uv.fromArray(uvs, arguments[i] * 2);\n\t                        }\n\t                        _face.vertexNormalsLength = 3;\n\t                        _face.material = object.material;\n\t                        _renderData.elements.push(_face);\n\t                    }\n\t                }\n\t                return {\n\t                    setObject: setObject,\n\t                    projectVertex: projectVertex,\n\t                    checkTriangleVisibility: checkTriangleVisibility,\n\t                    checkBackfaceCulling: checkBackfaceCulling,\n\t                    pushVertex: pushVertex,\n\t                    pushNormal: pushNormal,\n\t                    pushUv: pushUv,\n\t                    pushLine: pushLine,\n\t                    pushTriangle: pushTriangle\n\t                };\n\t            };\n\t            var renderList = new RenderList();\n\t            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n\t                _faceCount = 0;\n\t                _lineCount = 0;\n\t                _spriteCount = 0;\n\t                _renderData.elements.length = 0;\n\t                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n\t                if (camera.parent === null) camera.updateMatrixWorld();\n\t                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\t                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\t                _frustum.setFromMatrix(_viewProjectionMatrix);\n\t                _objectCount = 0;\n\t                _renderData.objects.length = 0;\n\t                _renderData.lights.length = 0;\n\t                scene.traverseVisible(function(object) {\n\t                    if (object instanceof THREE.Light) {\n\t                        _renderData.lights.push(object);\n\t                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n\t                        var material = object.material;\n\t                        if (material.visible === false) return;\n\t                        if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n\t                            _object = getNextObjectInPool();\n\t                            _object.id = object.id;\n\t                            _object.object = object;\n\t                            _vector3.setFromMatrixPosition(object.matrixWorld);\n\t                            _vector3.applyProjection(_viewProjectionMatrix);\n\t                            _object.z = _vector3.z;\n\t                            _object.renderOrder = object.renderOrder;\n\t                            _renderData.objects.push(_object);\n\t                        }\n\t                    }\n\t                });\n\t                if (sortObjects === true) {\n\t                    _renderData.objects.sort(painterSort);\n\t                }\n\t                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n\t                    var object = _renderData.objects[o].object;\n\t                    var geometry = object.geometry;\n\t                    renderList.setObject(object);\n\t                    _modelMatrix = object.matrixWorld;\n\t                    _vertexCount = 0;\n\t                    if (object instanceof THREE.Mesh) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            var groups = geometry.groups;\n\t                            if (attributes.position === undefined) continue;\n\t                            var positions = attributes.position.array;\n\t                            for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                            }\n\t                            if (attributes.normal !== undefined) {\n\t                                var normals = attributes.normal.array;\n\t                                for (var i = 0, l = normals.length; i < l; i += 3) {\n\t                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n\t                                }\n\t                            }\n\t                            if (attributes.uv !== undefined) {\n\t                                var uvs = attributes.uv.array;\n\t                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n\t                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n\t                                }\n\t                            }\n\t                            if (geometry.index !== null) {\n\t                                var indices = geometry.index.array;\n\t                                if (groups.length > 0) {\n\t                                    for (var o = 0; o < groups.length; o++) {\n\t                                        var group = groups[o];\n\t                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n\t                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n\t                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n\t                                    renderList.pushTriangle(i, i + 1, i + 2);\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            var vertices = geometry.vertices;\n\t                            var faces = geometry.faces;\n\t                            var faceVertexUvs = geometry.faceVertexUvs[0];\n\t                            _normalMatrix.getNormalMatrix(_modelMatrix);\n\t                            var material = object.material;\n\t                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n\t                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n\t                                var vertex = vertices[v];\n\t                                _vector3.copy(vertex);\n\t                                if (material.morphTargets === true) {\n\t                                    var morphTargets = geometry.morphTargets;\n\t                                    var morphInfluences = object.morphTargetInfluences;\n\t                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n\t                                        var influence = morphInfluences[t];\n\t                                        if (influence === 0) continue;\n\t                                        var target = morphTargets[t];\n\t                                        var targetVertex = target.vertices[v];\n\t                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n\t                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n\t                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n\t                                    }\n\t                                }\n\t                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n\t                            }\n\t                            for (var f = 0, fl = faces.length; f < fl; f++) {\n\t                                var face = faces[f];\n\t                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n\t                                if (material === undefined) continue;\n\t                                var side = material.side;\n\t                                var v1 = _vertexPool[face.a];\n\t                                var v2 = _vertexPool[face.b];\n\t                                var v3 = _vertexPool[face.c];\n\t                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n\t                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\t                                if (side !== THREE.DoubleSide) {\n\t                                    if (side === THREE.FrontSide && visible === false) continue;\n\t                                    if (side === THREE.BackSide && visible === true) continue;\n\t                                }\n\t                                _face = getNextFaceInPool();\n\t                                _face.id = object.id;\n\t                                _face.v1.copy(v1);\n\t                                _face.v2.copy(v2);\n\t                                _face.v3.copy(v3);\n\t                                _face.normalModel.copy(face.normal);\n\t                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                    _face.normalModel.negate();\n\t                                }\n\t                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                var faceVertexNormals = face.vertexNormals;\n\t                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n\t                                    var normalModel = _face.vertexNormalsModel[n];\n\t                                    normalModel.copy(faceVertexNormals[n]);\n\t                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                        normalModel.negate();\n\t                                    }\n\t                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                }\n\t                                _face.vertexNormalsLength = faceVertexNormals.length;\n\t                                var vertexUvs = faceVertexUvs[f];\n\t                                if (vertexUvs !== undefined) {\n\t                                    for (var u = 0; u < 3; u++) {\n\t                                        _face.uvs[u].copy(vertexUvs[u]);\n\t                                    }\n\t                                }\n\t                                _face.color = face.color;\n\t                                _face.material = material;\n\t                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                                _face.renderOrder = object.renderOrder;\n\t                                _renderData.elements.push(_face);\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Line) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            if (attributes.position !== undefined) {\n\t                                var positions = attributes.position.array;\n\t                                for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                                }\n\t                                if (geometry.index !== null) {\n\t                                    var indices = geometry.index.array;\n\t                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n\t                                        renderList.pushLine(indices[i], indices[i + 1]);\n\t                                    }\n\t                                } else {\n\t                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n\t                                        renderList.pushLine(i, i + 1);\n\t                                    }\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\t                            var vertices = object.geometry.vertices;\n\t                            if (vertices.length === 0) continue;\n\t                            v1 = getNextVertexInPool();\n\t                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n\t                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n\t                                v1 = getNextVertexInPool();\n\t                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n\t                                if ((v + 1) % step > 0) continue;\n\t                                v2 = _vertexPool[_vertexCount - 2];\n\t                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\t                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\t                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n\t                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\t                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\t                                    _line = getNextLineInPool();\n\t                                    _line.id = object.id;\n\t                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\t                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\t                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n\t                                    _line.renderOrder = object.renderOrder;\n\t                                    _line.material = object.material;\n\t                                    if (object.material.vertexColors === THREE.VertexColors) {\n\t                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n\t                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n\t                                    }\n\t                                    _renderData.elements.push(_line);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Sprite) {\n\t                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\t                        _vector4.applyMatrix4(_viewProjectionMatrix);\n\t                        var invW = 1 / _vector4.w;\n\t                        _vector4.z *= invW;\n\t                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n\t                            _sprite = getNextSpriteInPool();\n\t                            _sprite.id = object.id;\n\t                            _sprite.x = _vector4.x * invW;\n\t                            _sprite.y = _vector4.y * invW;\n\t                            _sprite.z = _vector4.z;\n\t                            _sprite.renderOrder = object.renderOrder;\n\t                            _sprite.object = object;\n\t                            _sprite.rotation = object.rotation;\n\t                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n\t                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n\t                            _sprite.material = object.material;\n\t                            _renderData.elements.push(_sprite);\n\t                        }\n\t                    }\n\t                }\n\t                if (sortElements === true) {\n\t                    _renderData.elements.sort(painterSort);\n\t                }\n\t                return _renderData;\n\t            };\n\t            function getNextObjectInPool() {\n\t                if (_objectCount === _objectPoolLength) {\n\t                    var object = new THREE.RenderableObject();\n\t                    _objectPool.push(object);\n\t                    _objectPoolLength++;\n\t                    _objectCount++;\n\t                    return object;\n\t                }\n\t                return _objectPool[_objectCount++];\n\t            }\n\t            function getNextVertexInPool() {\n\t                if (_vertexCount === _vertexPoolLength) {\n\t                    var vertex = new THREE.RenderableVertex();\n\t                    _vertexPool.push(vertex);\n\t                    _vertexPoolLength++;\n\t                    _vertexCount++;\n\t                    return vertex;\n\t                }\n\t                return _vertexPool[_vertexCount++];\n\t            }\n\t            function getNextFaceInPool() {\n\t                if (_faceCount === _facePoolLength) {\n\t                    var face = new THREE.RenderableFace();\n\t                    _facePool.push(face);\n\t                    _facePoolLength++;\n\t                    _faceCount++;\n\t                    return face;\n\t                }\n\t                return _facePool[_faceCount++];\n\t            }\n\t            function getNextLineInPool() {\n\t                if (_lineCount === _linePoolLength) {\n\t                    var line = new THREE.RenderableLine();\n\t                    _linePool.push(line);\n\t                    _linePoolLength++;\n\t                    _lineCount++;\n\t                    return line;\n\t                }\n\t                return _linePool[_lineCount++];\n\t            }\n\t            function getNextSpriteInPool() {\n\t                if (_spriteCount === _spritePoolLength) {\n\t                    var sprite = new THREE.RenderableSprite();\n\t                    _spritePool.push(sprite);\n\t                    _spritePoolLength++;\n\t                    _spriteCount++;\n\t                    return sprite;\n\t                }\n\t                return _spritePool[_spriteCount++];\n\t            }\n\t            function painterSort(a, b) {\n\t                if (a.renderOrder !== b.renderOrder) {\n\t                    return a.renderOrder - b.renderOrder;\n\t                } else if (a.z !== b.z) {\n\t                    return b.z - a.z;\n\t                } else if (a.id !== b.id) {\n\t                    return a.id - b.id;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            }\n\t            function clipLine(s1, s2) {\n\t                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n\t                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n\t                    return true;\n\t                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n\t                    return false;\n\t                } else {\n\t                    if (bc1near < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n\t                    } else if (bc2near < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n\t                    }\n\t                    if (bc1far < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n\t                    } else if (bc2far < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n\t                    }\n\t                    if (alpha2 < alpha1) {\n\t                        return false;\n\t                    } else {\n\t                        s1.lerp(s2, alpha1);\n\t                        s2.lerp(s1, 1 - alpha2);\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        /*!\n\t\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        var isObject = __webpack_require__(8);\n\t        function isObjectObject(o) {\n\t            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n\t        }\n\t        module.exports = function isPlainObject(o) {\n\t            var ctor, prot;\n\t            if (isObjectObject(o) === false) return false;\n\t            ctor = o.constructor;\n\t            if (typeof ctor !== \"function\") return false;\n\t            prot = ctor.prototype;\n\t            if (isObjectObject(prot) === false) return false;\n\t            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n\t                return false;\n\t            }\n\t            return true;\n\t        };\n\t    }, function(module, exports) {\n\t        /*!\n\t\t * isobject <https://github.com/jonschlinkert/isobject>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        module.exports = function isObject(val) {\n\t            return val != null && typeof val === \"object\" && !Array.isArray(val);\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        var __WEBPACK_AMD_DEFINE_RESULT__;\n\t        !function(undefined) {\n\t            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t                return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t            };\n\t            var defaultMaxListeners = 10;\n\t            function init() {\n\t                this._events = {};\n\t                if (this._conf) {\n\t                    configure.call(this, this._conf);\n\t                }\n\t            }\n\t            function configure(conf) {\n\t                if (conf) {\n\t                    this._conf = conf;\n\t                    conf.delimiter && (this.delimiter = conf.delimiter);\n\t                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t                    conf.wildcard && (this.wildcard = conf.wildcard);\n\t                    conf.newListener && (this.newListener = conf.newListener);\n\t                    if (this.wildcard) {\n\t                        this.listenerTree = {};\n\t                    }\n\t                }\n\t            }\n\t            function EventEmitter(conf) {\n\t                this._events = {};\n\t                this.newListener = false;\n\t                configure.call(this, conf);\n\t            }\n\t            function searchListenerTree(handlers, type, tree, i) {\n\t                if (!tree) {\n\t                    return [];\n\t                }\n\t                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n\t                if (i === typeLength && tree._listeners) {\n\t                    if (typeof tree._listeners === \"function\") {\n\t                        handlers && handlers.push(tree._listeners);\n\t                        return [ tree ];\n\t                    } else {\n\t                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t                            handlers && handlers.push(tree._listeners[leaf]);\n\t                        }\n\t                        return [ tree ];\n\t                    }\n\t                }\n\t                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n\t                    if (currentType === \"*\") {\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    } else if (currentType === \"**\") {\n\t                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n\t                        if (endReached && tree._listeners) {\n\t                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t                        }\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                if (branch === \"*\" || branch === \"**\") {\n\t                                    if (tree[branch]._listeners && !endReached) {\n\t                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t                                    }\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                } else if (branch === nextType) {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n\t                                } else {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                }\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    }\n\t                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n\t                }\n\t                xTree = tree[\"*\"];\n\t                if (xTree) {\n\t                    searchListenerTree(handlers, type, xTree, i + 1);\n\t                }\n\t                xxTree = tree[\"**\"];\n\t                if (xxTree) {\n\t                    if (i < typeLength) {\n\t                        if (xxTree._listeners) {\n\t                            searchListenerTree(handlers, type, xxTree, typeLength);\n\t                        }\n\t                        for (branch in xxTree) {\n\t                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n\t                                if (branch === nextType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n\t                                } else if (branch === currentType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n\t                                } else {\n\t                                    isolatedBranch = {};\n\t                                    isolatedBranch[branch] = xxTree[branch];\n\t                                    searchListenerTree(handlers, type, {\n\t                                        \"**\": isolatedBranch\n\t                                    }, i + 1);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (xxTree._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree, typeLength);\n\t                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n\t                    }\n\t                }\n\t                return listeners;\n\t            }\n\t            function growListenerTree(type, listener) {\n\t                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                for (var i = 0, len = type.length; i + 1 < len; i++) {\n\t                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n\t                        return;\n\t                    }\n\t                }\n\t                var tree = this.listenerTree;\n\t                var name = type.shift();\n\t                while (name) {\n\t                    if (!tree[name]) {\n\t                        tree[name] = {};\n\t                    }\n\t                    tree = tree[name];\n\t                    if (type.length === 0) {\n\t                        if (!tree._listeners) {\n\t                            tree._listeners = listener;\n\t                        } else if (typeof tree._listeners === \"function\") {\n\t                            tree._listeners = [ tree._listeners, listener ];\n\t                        } else if (isArray(tree._listeners)) {\n\t                            tree._listeners.push(listener);\n\t                            if (!tree._listeners.warned) {\n\t                                var m = defaultMaxListeners;\n\t                                if (typeof this._events.maxListeners !== \"undefined\") {\n\t                                    m = this._events.maxListeners;\n\t                                }\n\t                                if (m > 0 && tree._listeners.length > m) {\n\t                                    tree._listeners.warned = true;\n\t                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n\t                                    console.trace();\n\t                                }\n\t                            }\n\t                        }\n\t                        return true;\n\t                    }\n\t                    name = type.shift();\n\t                }\n\t                return true;\n\t            }\n\t            EventEmitter.prototype.delimiter = \".\";\n\t            EventEmitter.prototype.setMaxListeners = function(n) {\n\t                this._events || init.call(this);\n\t                this._events.maxListeners = n;\n\t                if (!this._conf) this._conf = {};\n\t                this._conf.maxListeners = n;\n\t            };\n\t            EventEmitter.prototype.event = \"\";\n\t            EventEmitter.prototype.once = function(event, fn) {\n\t                this.many(event, 1, fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.many = function(event, ttl, fn) {\n\t                var self = this;\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"many only accepts instances of Function\");\n\t                }\n\t                function listener() {\n\t                    if (--ttl === 0) {\n\t                        self.off(event, listener);\n\t                    }\n\t                    fn.apply(this, arguments);\n\t                }\n\t                listener._origin = fn;\n\t                this.on(event, listener);\n\t                return self;\n\t            };\n\t            EventEmitter.prototype.emit = function() {\n\t                this._events || init.call(this);\n\t                var type = arguments[0];\n\t                if (type === \"newListener\" && !this.newListener) {\n\t                    if (!this._events.newListener) {\n\t                        return false;\n\t                    }\n\t                }\n\t                if (this._all) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    for (i = 0, l = this._all.length; i < l; i++) {\n\t                        this.event = type;\n\t                        this._all[i].apply(this, args);\n\t                    }\n\t                }\n\t                if (type === \"error\") {\n\t                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n\t                        if (arguments[1] instanceof Error) {\n\t                            throw arguments[1];\n\t                        } else {\n\t                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t                        }\n\t                        return false;\n\t                    }\n\t                }\n\t                var handler;\n\t                if (this.wildcard) {\n\t                    handler = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t                } else {\n\t                    handler = this._events[type];\n\t                }\n\t                if (typeof handler === \"function\") {\n\t                    this.event = type;\n\t                    if (arguments.length === 1) {\n\t                        handler.call(this);\n\t                    } else if (arguments.length > 1) switch (arguments.length) {\n\t                      case 2:\n\t                        handler.call(this, arguments[1]);\n\t                        break;\n\t\n\t                      case 3:\n\t                        handler.call(this, arguments[1], arguments[2]);\n\t                        break;\n\t\n\t                      default:\n\t                        var l = arguments.length;\n\t                        var args = new Array(l - 1);\n\t                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                        handler.apply(this, args);\n\t                    }\n\t                    return true;\n\t                } else if (handler) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    var listeners = handler.slice();\n\t                    for (var i = 0, l = listeners.length; i < l; i++) {\n\t                        this.event = type;\n\t                        listeners[i].apply(this, args);\n\t                    }\n\t                    return listeners.length > 0 || !!this._all;\n\t                } else {\n\t                    return !!this._all;\n\t                }\n\t            };\n\t            EventEmitter.prototype.on = function(type, listener) {\n\t                if (typeof type === \"function\") {\n\t                    this.onAny(type);\n\t                    return this;\n\t                }\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"on only accepts instances of Function\");\n\t                }\n\t                this._events || init.call(this);\n\t                this.emit(\"newListener\", type, listener);\n\t                if (this.wildcard) {\n\t                    growListenerTree.call(this, type, listener);\n\t                    return this;\n\t                }\n\t                if (!this._events[type]) {\n\t                    this._events[type] = listener;\n\t                } else if (typeof this._events[type] === \"function\") {\n\t                    this._events[type] = [ this._events[type], listener ];\n\t                } else if (isArray(this._events[type])) {\n\t                    this._events[type].push(listener);\n\t                    if (!this._events[type].warned) {\n\t                        var m = defaultMaxListeners;\n\t                        if (typeof this._events.maxListeners !== \"undefined\") {\n\t                            m = this._events.maxListeners;\n\t                        }\n\t                        if (m > 0 && this._events[type].length > m) {\n\t                            this._events[type].warned = true;\n\t                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n\t                            console.trace();\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.onAny = function(fn) {\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"onAny only accepts instances of Function\");\n\t                }\n\t                if (!this._all) {\n\t                    this._all = [];\n\t                }\n\t                this._all.push(fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t            EventEmitter.prototype.off = function(type, listener) {\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"removeListener only takes instances of Function\");\n\t                }\n\t                var handlers, leafs = [];\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    handlers = this._events[type];\n\t                    leafs.push({\n\t                        _listeners: handlers\n\t                    });\n\t                }\n\t                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                    var leaf = leafs[iLeaf];\n\t                    handlers = leaf._listeners;\n\t                    if (isArray(handlers)) {\n\t                        var position = -1;\n\t                        for (var i = 0, length = handlers.length; i < length; i++) {\n\t                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n\t                                position = i;\n\t                                break;\n\t                            }\n\t                        }\n\t                        if (position < 0) {\n\t                            continue;\n\t                        }\n\t                        if (this.wildcard) {\n\t                            leaf._listeners.splice(position, 1);\n\t                        } else {\n\t                            this._events[type].splice(position, 1);\n\t                        }\n\t                        if (handlers.length === 0) {\n\t                            if (this.wildcard) {\n\t                                delete leaf._listeners;\n\t                            } else {\n\t                                delete this._events[type];\n\t                            }\n\t                        }\n\t                        return this;\n\t                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n\t                        if (this.wildcard) {\n\t                            delete leaf._listeners;\n\t                        } else {\n\t                            delete this._events[type];\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.offAny = function(fn) {\n\t                var i = 0, l = 0, fns;\n\t                if (fn && this._all && this._all.length > 0) {\n\t                    fns = this._all;\n\t                    for (i = 0, l = fns.length; i < l; i++) {\n\t                        if (fn === fns[i]) {\n\t                            fns.splice(i, 1);\n\t                            return this;\n\t                        }\n\t                    }\n\t                } else {\n\t                    this._all = [];\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t            EventEmitter.prototype.removeAllListeners = function(type) {\n\t                if (arguments.length === 0) {\n\t                    !this._events || init.call(this);\n\t                    return this;\n\t                }\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                        var leaf = leafs[iLeaf];\n\t                        leaf._listeners = null;\n\t                    }\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    this._events[type] = null;\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.listeners = function(type) {\n\t                if (this.wildcard) {\n\t                    var handlers = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t                    return handlers;\n\t                }\n\t                this._events || init.call(this);\n\t                if (!this._events[type]) this._events[type] = [];\n\t                if (!isArray(this._events[type])) {\n\t                    this._events[type] = [ this._events[type] ];\n\t                }\n\t                return this._events[type];\n\t            };\n\t            EventEmitter.prototype.listenersAny = function() {\n\t                if (this._all) {\n\t                    return this._all;\n\t                } else {\n\t                    return [];\n\t                }\n\t            };\n\t            if (true) {\n\t                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t                    return EventEmitter;\n\t                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t            } else if (typeof exports === \"object\") {\n\t                exports.EventEmitter2 = EventEmitter;\n\t            } else {\n\t                window.EventEmitter2 = EventEmitter;\n\t            }\n\t        }();\n\t    }, function(module, exports) {\n\t        module.exports = {\n\t            Promise: window[\"Promise\"]\n\t        };\n\t    }, function(module, exports) {\n\t        (function() {\n\t            var ResizeSensor = function(element, callback) {\n\t                function EventQueue() {\n\t                    this.q = [];\n\t                    this.add = function(ev) {\n\t                        this.q.push(ev);\n\t                    };\n\t                    var i, j;\n\t                    this.call = function() {\n\t                        for (i = 0, j = this.q.length; i < j; i++) {\n\t                            this.q[i].call();\n\t                        }\n\t                    };\n\t                }\n\t                function getComputedStyle(element, prop) {\n\t                    if (element.currentStyle) {\n\t                        return element.currentStyle[prop];\n\t                    } else if (window.getComputedStyle) {\n\t                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t                    } else {\n\t                        return element.style[prop];\n\t                    }\n\t                }\n\t                function attachResizeEvent(element, resized) {\n\t                    if (!element.resizedAttached) {\n\t                        element.resizedAttached = new EventQueue();\n\t                        element.resizedAttached.add(resized);\n\t                    } else if (element.resizedAttached) {\n\t                        element.resizedAttached.add(resized);\n\t                        return;\n\t                    }\n\t                    element.resizeSensor = document.createElement(\"div\");\n\t                    element.resizeSensor.className = \"resize-sensor\";\n\t                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n\t                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n\t                    element.resizeSensor.style.cssText = style;\n\t                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n\t                    element.appendChild(element.resizeSensor);\n\t                    if (!{\n\t                        fixed: 1,\n\t                        absolute: 1\n\t                    }[getComputedStyle(element, \"position\")]) {\n\t                        element.style.position = \"relative\";\n\t                    }\n\t                    var expand = element.resizeSensor.childNodes[0];\n\t                    var expandChild = expand.childNodes[0];\n\t                    var shrink = element.resizeSensor.childNodes[1];\n\t                    var shrinkChild = shrink.childNodes[0];\n\t                    var lastWidth, lastHeight;\n\t                    var reset = function() {\n\t                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n\t                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n\t                        expand.scrollLeft = expand.scrollWidth;\n\t                        expand.scrollTop = expand.scrollHeight;\n\t                        shrink.scrollLeft = shrink.scrollWidth;\n\t                        shrink.scrollTop = shrink.scrollHeight;\n\t                        lastWidth = element.offsetWidth;\n\t                        lastHeight = element.offsetHeight;\n\t                    };\n\t                    reset();\n\t                    var changed = function() {\n\t                        if (element.resizedAttached) {\n\t                            element.resizedAttached.call();\n\t                        }\n\t                    };\n\t                    var addEvent = function(el, name, cb) {\n\t                        if (el.attachEvent) {\n\t                            el.attachEvent(\"on\" + name, cb);\n\t                        } else {\n\t                            el.addEventListener(name, cb);\n\t                        }\n\t                    };\n\t                    var onScroll = function() {\n\t                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                            changed();\n\t                        }\n\t                        reset();\n\t                    };\n\t                    addEvent(expand, \"scroll\", onScroll);\n\t                    addEvent(shrink, \"scroll\", onScroll);\n\t                }\n\t                var elementType = Object.prototype.toString.call(element);\n\t                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n\t                if (isCollectionTyped) {\n\t                    var i = 0, j = element.length;\n\t                    for (;i < j; i++) {\n\t                        attachResizeEvent(element[i], callback);\n\t                    }\n\t                } else {\n\t                    attachResizeEvent(element, callback);\n\t                }\n\t                this.detach = function() {\n\t                    if (isCollectionTyped) {\n\t                        var i = 0, j = element.length;\n\t                        for (;i < j; i++) {\n\t                            ResizeSensor.detach(element[i]);\n\t                        }\n\t                    } else {\n\t                        ResizeSensor.detach(element);\n\t                    }\n\t                };\n\t            };\n\t            ResizeSensor.detach = function(element) {\n\t                if (element.resizeSensor) {\n\t                    element.removeChild(element.resizeSensor);\n\t                    delete element.resizeSensor;\n\t                    delete element.resizedAttached;\n\t                }\n\t            };\n\t            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n\t                module.exports = ResizeSensor;\n\t            } else {\n\t                window.ResizeSensor = ResizeSensor;\n\t            }\n\t        })();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Widget_1 = __webpack_require__(15);\n\t        var TrendsManager_1 = __webpack_require__(16);\n\t        var Screen_1 = __webpack_require__(19);\n\t        var AxisMarks_1 = __webpack_require__(20);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var deps_1 = __webpack_require__(3);\n\t        var CHART_STATE_EVENTS = {\n\t            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n\t            READY: \"ready\",\n\t            DESTROY: \"destroy\",\n\t            CHANGE: \"change\",\n\t            TREND_CHANGE: \"trendChange\",\n\t            TRENDS_CHANGE: \"trendsChange\",\n\t            ZOOM: \"zoom\",\n\t            RESIZE: \"resize\",\n\t            SCROLL: \"scroll\",\n\t            SCROLL_STOP: \"scrollStop\",\n\t            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n\t        };\n\t        var ChartState = function() {\n\t            function ChartState(initialState, widgetsClasses, plugins) {\n\t                if (widgetsClasses === void 0) {\n\t                    widgetsClasses = {};\n\t                }\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.data = {\n\t                    prevState: {},\n\t                    $el: null,\n\t                    zoom: 0,\n\t                    xAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n\t                            from: 0,\n\t                            to: 0,\n\t                            scroll: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 0,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 0,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 100,\n\t                        autoScroll: true,\n\t                        marks: []\n\t                    },\n\t                    yAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n\t                            from: 0,\n\t                            to: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 5,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 5,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 50,\n\t                        marks: []\n\t                    },\n\t                    animations: {\n\t                        enabled: true,\n\t                        trendChangeSpeed: .5,\n\t                        trendChangeEase: void 0,\n\t                        zoomSpeed: .25,\n\t                        zoomEase: Linear.easeNone,\n\t                        scrollSpeed: .5,\n\t                        scrollEase: Linear.easeNone,\n\t                        autoScrollSpeed: 1,\n\t                        autoScrollEase: Linear.easeNone\n\t                    },\n\t                    autoRender: {\n\t                        enabled: true,\n\t                        fps: 0\n\t                    },\n\t                    autoResize: true,\n\t                    renderer: \"WebGLRenderer\",\n\t                    autoScroll: true,\n\t                    controls: {\n\t                        enabled: true\n\t                    },\n\t                    cursor: {\n\t                        dragMode: false,\n\t                        x: 0,\n\t                        y: 0\n\t                    },\n\t                    backgroundColor: 0,\n\t                    backgroundOpacity: 1,\n\t                    showStats: false,\n\t                    pluginsState: {},\n\t                    eventEmitterMaxListeners: 20\n\t                };\n\t                this.widgetsClasses = {};\n\t                this.plugins = {};\n\t                this.isReady = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n\t                this.widgetsClasses = widgetsClasses;\n\t                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n\t                initialState.trends = this.trendsManager.calculatedOptions;\n\t                initialState = this.installPlugins(plugins, initialState);\n\t                this.setState(initialState);\n\t                this.setState({\n\t                    computedData: this.getComputedData()\n\t                });\n\t                this.savePrevState();\n\t                this.screen = new Screen_1.Screen(this);\n\t                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n\t                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n\t                this.initListeners();\n\t                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\t                this.isReady = true;\n\t                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t            }\n\t            ChartState.prototype.destroy = function() {\n\t                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t                this.ee.removeAllListeners();\n\t                this.data = {};\n\t            };\n\t            ChartState.prototype.onDestroy = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t            };\n\t            ChartState.prototype.onInitialStateApplied = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t            };\n\t            ChartState.prototype.onReady = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t            };\n\t            ChartState.prototype.onChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendsChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onScrollStop = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t            };\n\t            ChartState.prototype.onScroll = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t            };\n\t            ChartState.prototype.onZoom = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t            };\n\t            ChartState.prototype.onResize = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t            };\n\t            ChartState.prototype.onPluginsStateChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t            };\n\t            ChartState.prototype.getTrend = function(trendName) {\n\t                return this.trendsManager.getTrend(trendName);\n\t            };\n\t            ChartState.prototype.setState = function(newState, eventData, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var stateData = this.data;\n\t                var changedProps = {};\n\t                for (var key in newState) {\n\t                    if (stateData[key] !== newState[key]) {\n\t                        changedProps[key] = newState[key];\n\t                    }\n\t                }\n\t                this.savePrevState(changedProps);\n\t                var trendsData = {};\n\t                if (newState.trends) for (var trendName in newState.trends) {\n\t                    var trendOptions = newState.trends[trendName];\n\t                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t                    delete trendOptions.data;\n\t                }\n\t                var newStateContainsData = Object.keys(trendsData).length > 0;\n\t                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n\t                if (newStateContainsData) for (var trendName in trendsData) {\n\t                    this.data.trends[trendName].data = trendsData[trendName];\n\t                }\n\t                if (silent) return;\n\t                var recalculateResult = this.recalculateState(changedProps);\n\t                changedProps = recalculateResult.changedProps;\n\t                this.emitChangedStateEvents(changedProps, eventData);\n\t            };\n\t            ChartState.prototype.recalculateState = function(changedProps) {\n\t                var data = this.data;\n\t                var patch = {};\n\t                var actualData = Utils_1.Utils.deepMerge({}, data);\n\t                if (changedProps.widgets || !data.widgets) {\n\t                    patch.widgets = {};\n\t                    var widgetsOptions = data.widgets || {};\n\t                    for (var widgetName in this.widgetsClasses) {\n\t                        var WidgetClass = this.widgetsClasses[widgetName];\n\t                        var userOptions = widgetsOptions[widgetName] || {};\n\t                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n\t                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n\t                    }\n\t                }\n\t                var cursorOptions = changedProps.cursor;\n\t                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t                if (isMouseDrag) {\n\t                    var oldX = data.prevState.cursor.x;\n\t                    var currentX = cursorOptions.x;\n\t                    var currentScroll = data.xAxis.range.scroll;\n\t                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t                    patch.xAxis = {\n\t                        range: {\n\t                            scroll: currentScroll + deltaXVal\n\t                        }\n\t                    };\n\t                    actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                        xAxis: patch.xAxis\n\t                    });\n\t                }\n\t                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\t                var scrollXChanged = false;\n\t                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateXAxis) {\n\t                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t                    if (xAxisPatch) {\n\t                        scrollXChanged = true;\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateYAxis) {\n\t                    var yAxisPatch = this.recalculateYAxis(actualData);\n\t                    if (yAxisPatch) {\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                this.savePrevState(patch);\n\t                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n\t                patch.computedData = this.getComputedData(allChangedProps);\n\t                this.savePrevState(patch);\n\t                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n\t                return {\n\t                    changedProps: allChangedProps,\n\t                    patch: patch\n\t                };\n\t            };\n\t            ChartState.prototype.getComputedData = function(changedProps) {\n\t                var computeAll = !changedProps;\n\t                var computedData = {};\n\t                if (computeAll || changedProps.trends && this.trendsManager) {\n\t                    computedData.trends = {\n\t                        maxXVal: this.trendsManager.getEndXVal(),\n\t                        minXVal: this.trendsManager.getStartXVal()\n\t                    };\n\t                }\n\t                return computedData;\n\t            };\n\t            ChartState.prototype.savePrevState = function(changedProps) {\n\t                if (!changedProps) changedProps = this.data;\n\t                var prevState = this.data.prevState;\n\t                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n\t            };\n\t            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n\t                var prevState = this.data.prevState;\n\t                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\t                for (var key in changedProps) {\n\t                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n\t                }\n\t                if (!this.isReady) return;\n\t                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n\t                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\t                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n\t                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\t                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n\t                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\t                var resizeEventNeeded = changedProps.width || changedProps.height;\n\t                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\t                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n\t                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t            };\n\t            ChartState.prototype.installPlugins = function(plugins, initialState) {\n\t                var _this = this;\n\t                initialState.pluginsState = {};\n\t                plugins.forEach(function(plugin) {\n\t                    var PluginClass = plugin.constructor;\n\t                    var pluginName = PluginClass.NAME;\n\t                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n\t                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n\t                    });\n\t                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n\t                    _this.plugins[pluginName] = plugin;\n\t                    plugin.setupChartState(_this);\n\t                });\n\t                return initialState;\n\t            };\n\t            ChartState.prototype.getPlugin = function(pluginName) {\n\t                return this.plugins[pluginName];\n\t            };\n\t            ChartState.prototype.initListeners = function() {\n\t                var _this = this;\n\t                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n\t                    _this.handleTrendsChange(changedTrends, newData);\n\t                });\n\t            };\n\t            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n\t                for (var trendName in changedTrends) {\n\t                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t                }\n\t            };\n\t            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n\t                var axisRange = actualData.xAxis.range;\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var isInitialize = axisRange.zeroVal == void 0;\n\t                var zeroVal, scaleFactor;\n\t                var zoom = axisRange.zoom;\n\t                if (axisRange.isMirrorMode) {\n\t                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n\t                }\n\t                if (isInitialize) {\n\t                    zeroVal = axisRange.from;\n\t                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                } else {\n\t                    zeroVal = axisRange.zeroVal;\n\t                    scaleFactor = axisRange.scaleFactor;\n\t                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n\t                        if (changedProps.xAxis.range.zoom) {\n\t                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t                        }\n\t                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                        patch.range.scroll = axisRange.from - zeroVal;\n\t                        patch.range.zoom = currentScaleFactor / scaleFactor;\n\t                        return patch;\n\t                    }\n\t                }\n\t                do {\n\t                    var from = zeroVal + axisRange.scroll;\n\t                    var to = from + actualData.width / (scaleFactor * zoom);\n\t                    var rangeLength = to - from;\n\t                    var needToRecalculateZoom = false;\n\t                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n\t                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n\t                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t                    if (needToRecalculateZoom) {\n\t                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n\t                        var zoom = zoom * fixScale;\n\t                        patch.range.zoom = zoom;\n\t                    }\n\t                } while (needToRecalculateZoom);\n\t                patch.range.from = from;\n\t                patch.range.to = to;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.recalculateYAxis = function(actualData) {\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var yAxisRange = actualData.yAxis.range;\n\t                var isInitialize = yAxisRange.scaleFactor == void 0;\n\t                var trends = this.trendsManager;\n\t                var trendsEndXVal = trends.getEndXVal();\n\t                var trendsStartXVal = trends.getStartXVal();\n\t                var xRange = actualData.xAxis.range;\n\t                var xFrom = xRange.from, xTo = xRange.to;\n\t                var xRangeLength = xTo - xFrom;\n\t                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n\t                if (xTo > trendsEndXVal) {\n\t                    xTo = trendsEndXVal;\n\t                    xFrom = xTo - xRangeLength;\n\t                } else if (xFrom < trendsStartXVal) {\n\t                    xFrom = trendsStartXVal;\n\t                    xTo = xFrom + xRangeLength;\n\t                }\n\t                var maxY = trends.getMaxYVal(xFrom, xTo);\n\t                var minY = trends.getMinYVal(xFrom, xTo);\n\t                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n\t                    if (trendLastY > maxY) maxY = trendLastY;\n\t                    if (trendLastY < minY) minY = trendLastY;\n\t                }\n\t                if (yAxisRange.isMirrorMode) {\n\t                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n\t                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t                }\n\t                var margin = yAxisRange.margin;\n\t                var padding = {\n\t                    start: yAxisRange.padding.start + margin.start,\n\t                    end: yAxisRange.padding.end + margin.end\n\t                };\n\t                if (padding.end + padding.start >= actualData.height) {\n\t                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n\t                }\n\t                var rangeLength = maxY - minY;\n\t                var paddingTopInPercents = padding.end / actualData.height;\n\t                var paddingBottomInPercents = padding.start / actualData.height;\n\t                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t                if (isInitialize) {\n\t                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t                    scaleFactor = actualData.height / (toVal - fromVal);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                    needToZoom = true;\n\t                } else {\n\t                    scaleFactor = yAxisRange.scaleFactor;\n\t                    zeroVal = yAxisRange.zeroVal;\n\t                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n\t                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n\t                }\n\t                if (!needToZoom) return null;\n\t                scroll = fromVal - zeroVal;\n\t                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n\t                var currentAxisRange = this.data.yAxis.range;\n\t                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.zoom = function(zoomValue, origin) {\n\t                var _this = this;\n\t                if (origin === void 0) {\n\t                    origin = .5;\n\t                }\n\t                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n\t                var newZoom = zoom * zoomValue;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                var nextRange = this.data.width / (scaleFactor * newZoom);\n\t                var newScroll = scroll + (currentRange - nextRange) * origin;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            zoom: newZoom,\n\t                            scroll: newScroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.zoomToRange = function(range, origin) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                return this.zoom(currentRange / range, origin);\n\t            };\n\t            ChartState.prototype.scrollToEnd = function() {\n\t                var _this = this;\n\t                var state = this.data;\n\t                var endXVal = this.trendsManager.getEndXVal();\n\t                var range = state.xAxis.range;\n\t                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            scroll: scroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getValueOnXAxis = function(x) {\n\t                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.getValueByScreenX = function(x) {\n\t                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.getValueByScreenY = function(y) {\n\t                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByYAxis(y);\n\t            };\n\t            ChartState.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenYByValue = function(yVal) {\n\t                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            ChartState.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            ChartState.prototype.getScreenLeftVal = function() {\n\t                return this.getValueByScreenX(0);\n\t            };\n\t            ChartState.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.data.width);\n\t            };\n\t            ChartState.prototype.getPaddingRight = function() {\n\t                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n\t            };\n\t            return ChartState;\n\t        }();\n\t        exports.ChartState = ChartState;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        var EventEmitter = function() {\n\t            function EventEmitter() {\n\t                this.ee = new deps_1.EE2();\n\t            }\n\t            EventEmitter.prototype.emit = function(eventName) {\n\t                var args = [];\n\t                for (var _i = 1; _i < arguments.length; _i++) {\n\t                    args[_i - 1] = arguments[_i];\n\t                }\n\t                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n\t                var _a;\n\t            };\n\t            EventEmitter.prototype.on = function(eventName, callback) {\n\t                return this.ee.on(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.off = function(eventName, callback) {\n\t                return this.ee.off(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.subscribe = function(eventName, callback) {\n\t                var _this = this;\n\t                this.on(eventName, callback);\n\t                return function() {\n\t                    return _this.off(eventName, callback);\n\t                };\n\t            };\n\t            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n\t                this.ee.setMaxListeners(listenersCount);\n\t            };\n\t            EventEmitter.prototype.removeAllListeners = function(eventName) {\n\t                this.ee.removeAllListeners(eventName);\n\t            };\n\t            return EventEmitter;\n\t        }();\n\t        exports.EventEmitter = EventEmitter;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        function deepmerge(target, src, mergeArrays) {\n\t            if (mergeArrays === void 0) {\n\t                mergeArrays = true;\n\t            }\n\t            var array = Array.isArray(src);\n\t            var dst = array && [] || {};\n\t            if (array) {\n\t                target = target || [];\n\t                if (mergeArrays) {\n\t                    dst = dst.concat(target);\n\t                }\n\t                src.forEach(function(e, i) {\n\t                    if (typeof dst[i] === \"undefined\") {\n\t                        dst[i] = e;\n\t                    } else if (typeof e === \"object\") {\n\t                        dst[i] = deepmerge(target[i], e, mergeArrays);\n\t                    } else {\n\t                        if (target.indexOf(e) === -1) {\n\t                            dst.push(e);\n\t                        }\n\t                    }\n\t                });\n\t            } else {\n\t                if (target && typeof target === \"object\") {\n\t                    Object.keys(target).forEach(function(key) {\n\t                        dst[key] = target[key];\n\t                    });\n\t                }\n\t                Object.keys(src).forEach(function(key) {\n\t                    if (typeof src[key] !== \"object\" || !src[key]) {\n\t                        dst[key] = src[key];\n\t                    } else {\n\t                        if (!target[key]) {\n\t                            dst[key] = src[key];\n\t                        } else {\n\t                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t            return dst;\n\t        }\n\t        var Utils = function() {\n\t            function Utils() {}\n\t            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n\t                return deepmerge(obj1, obj2, mergeArrays);\n\t            };\n\t            Utils.deepCopy = function(obj) {\n\t                return JSON.parse(JSON.stringify(obj));\n\t            };\n\t            Utils.toFixed = function(num, digitsCount) {\n\t                var maxDigits = 15;\n\t                var result = \"\";\n\t                var intVal = Math.floor(num);\n\t                var intStr = intVal.toString();\n\t                var lengthDiff = digitsCount - intStr.length;\n\t                if (lengthDiff > 0) {\n\t                    result = \"0\".repeat(lengthDiff) + intStr;\n\t                } else {\n\t                    result = intStr;\n\t                }\n\t                var afterPointDigitsCount = maxDigits - intStr.length;\n\t                var afterPointStr = num.toString().split(\".\")[1];\n\t                if (afterPointStr) {\n\t                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n\t                }\n\t                return result;\n\t            };\n\t            Utils.bindEvent = function() {};\n\t            Utils.createTexture = function(width, height, fn) {\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = width;\n\t                canvas.height = height;\n\t                var ctx = canvas.getContext(\"2d\");\n\t                fn(ctx);\n\t                var texture = new THREE.Texture(canvas);\n\t                texture.needsUpdate = true;\n\t                return texture;\n\t            };\n\t            Utils.createPixelPerfectTexture = function(width, height, fn) {\n\t                var texture = this.createTexture(width, height, fn);\n\t                texture.minFilter = THREE.NearestFilter;\n\t                return texture;\n\t            };\n\t            Utils.error = function(msg) {\n\t                console.error(\"Chart error: \" + msg);\n\t                throw \"Chart: \" + msg;\n\t            };\n\t            Utils.warn = function(msg) {\n\t                console.warn(\"Chart warning: \" + msg);\n\t            };\n\t            Utils.getUid = function() {\n\t                return this.currentId++;\n\t            };\n\t            Utils.getDistance = function(num1, num2) {\n\t                return Math.max(num1, num2) - Math.min(num1, num2);\n\t            };\n\t            Utils.binarySearchClosestInd = function(arr, num, key) {\n\t                var mid;\n\t                var lo = 0;\n\t                var hi = arr.length - 1;\n\t                while (hi - lo > 1) {\n\t                    mid = Math.floor((lo + hi) / 2);\n\t                    if (arr[mid][key] < num) {\n\t                        lo = mid;\n\t                    } else {\n\t                        hi = mid;\n\t                    }\n\t                }\n\t                if (num - arr[lo][key] <= arr[hi][key] - num) {\n\t                    return lo;\n\t                }\n\t                return hi;\n\t            };\n\t            Utils.binarySearchClosest = function(arr, num, key) {\n\t                var ind = this.binarySearchClosestInd(arr, num, key);\n\t                return arr[ind];\n\t            };\n\t            Utils.rectsIntersect = function(r1, r2) {\n\t                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n\t                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n\t                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n\t                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n\t            };\n\t            /**!\r\n\t\t     * @preserve $.parseColor\r\n\t\t     * Copyright 2011 THEtheChad Elliott\r\n\t\t     * Released under the MIT and GPL licenses.\r\n\t\t     */\n\t            Utils.parseColor = function(color) {\n\t                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n\t                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by $.parseColor\");\n\t                isNaN(cache[3]) && (cache[3] = 1);\n\t                return cache;\n\t            };\n\t            Utils.getHexColor = function(str) {\n\t                var rgb = this.parseColor(str);\n\t                return (rgb[0] << 8 * 2) + (rgb[1] << 8) + rgb[2];\n\t            };\n\t            Utils.throttle = function(func, ms) {\n\t                var isThrottled = false, savedArgs, savedThis;\n\t                function wrapper() {\n\t                    if (isThrottled) {\n\t                        savedArgs = arguments;\n\t                        savedThis = this;\n\t                        return;\n\t                    }\n\t                    func.apply(this, arguments);\n\t                    isThrottled = true;\n\t                    setTimeout(function() {\n\t                        isThrottled = false;\n\t                        if (savedArgs) {\n\t                            wrapper.apply(savedThis, savedArgs);\n\t                            savedArgs = savedThis = null;\n\t                        }\n\t                    }, ms);\n\t                }\n\t                return wrapper;\n\t            };\n\t            Utils.msToTimeString = function(timestamp) {\n\t                var h = Math.floor(timestamp / 36e4);\n\t                var m = Math.floor(timestamp / 6e4);\n\t                var s = Math.floor(timestamp / 1e3);\n\t                return h + \":\" + m + \":\" + s;\n\t            };\n\t            Utils.getRandomItem = function(arr) {\n\t                var ind = Math.floor(Math.random() * arr.length);\n\t                return arr[ind];\n\t            };\n\t            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n\t                if (excludeProps === void 0) {\n\t                    excludeProps = [];\n\t                }\n\t                for (var key in props) {\n\t                    if (excludeProps.indexOf(key) !== -1) continue;\n\t                    if (srcObject[key] == void 0) continue;\n\t                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n\t                    } else {\n\t                        dstObject[key] = this.deepCopy(srcObject[key]);\n\t                    }\n\t                }\n\t            };\n\t            Utils.currentId = 1;\n\t            return Utils;\n\t        }();\n\t        exports.Utils = Utils;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        var ChartWidget = function() {\n\t            function ChartWidget(chartState) {\n\t                this.unsubscribers = [];\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            ChartWidget.prototype.bindEvents = function() {};\n\t            ChartWidget.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartWidget.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartWidget.getDefaultOptions = function() {\n\t                return {\n\t                    enabled: true\n\t                };\n\t            };\n\t            ChartWidget.widgetName = \"\";\n\t            return ChartWidget;\n\t        }();\n\t        exports.ChartWidget = ChartWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Trend_1 = __webpack_require__(17);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var EVENTS = {\n\t            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n\t        };\n\t        var TrendsManager = function() {\n\t            function TrendsManager(state, initialState) {\n\t                this.trends = {};\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.chartState = state;\n\t                var trendsCalculatedOptions = {};\n\t                for (var trendName in initialState.trends) {\n\t                    var trend = this.createTrend(state, trendName, initialState);\n\t                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t                }\n\t                this.calculatedOptions = trendsCalculatedOptions;\n\t                this.bindEvents();\n\t            }\n\t            TrendsManager.prototype.getTrend = function(trendName) {\n\t                return this.trends[trendName];\n\t            };\n\t            TrendsManager.prototype.getEnabledTrends = function() {\n\t                var enabledTrends = [];\n\t                var allTrends = this.trends;\n\t                for (var trendName in allTrends) {\n\t                    var trend = allTrends[trendName];\n\t                    trend.getOptions().enabled && enabledTrends.push(trend);\n\t                }\n\t                return enabledTrends;\n\t            };\n\t            TrendsManager.prototype.getStartXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                return trends[0].getData()[0].xVal;\n\t            };\n\t            TrendsManager.prototype.getEndXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                var firstTrendData = trends[0].getData();\n\t                return firstTrendData[firstTrendData.length - 1].xVal;\n\t            };\n\t            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n\t                var trends = this.getEnabledTrends();\n\t                var compareFn;\n\t                var result;\n\t                if (extremumIsMax) {\n\t                    result = -Infinity;\n\t                    compareFn = Math.max;\n\t                } else {\n\t                    result = Infinity;\n\t                    compareFn = Math.min;\n\t                }\n\t                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n\t                    var trend = trends_1[_i];\n\t                    var trendData = trend.getData(fromX, toX);\n\t                    var trendYValues = trendData.map(function(dataItem) {\n\t                        return dataItem.yVal;\n\t                    });\n\t                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n\t                }\n\t                if (result == Infinity || result == -Infinity) result = NaN;\n\t                return result;\n\t            };\n\t            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(true, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(false, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n\t                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t            };\n\t            TrendsManager.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateAppliedHandler();\n\t                });\n\t            };\n\t            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n\t                var _this = this;\n\t                var _loop_1 = function(trendName) {\n\t                    this_1.trends[trendName].segments.onRebuild(function() {\n\t                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n\t                    });\n\t                };\n\t                var this_1 = this;\n\t                for (var trendName in this.trends) {\n\t                    _loop_1(trendName);\n\t                }\n\t            };\n\t            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n\t                var trend = new Trend_1.Trend(state, trendName, initialState);\n\t                this.trends[trendName] = trend;\n\t                return trend;\n\t            };\n\t            return TrendsManager;\n\t        }();\n\t        exports.TrendsManager = TrendsManager;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendSegments_1 = __webpack_require__(18);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var deps_1 = __webpack_require__(3);\n\t        var EVENTS = {\n\t            CHANGE: \"Change\",\n\t            PREPEND_REQUEST: \"prependRequest\"\n\t        };\n\t        (function(TREND_TYPE) {\n\t            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n\t            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n\t        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n\t        var TREND_TYPE = exports.TREND_TYPE;\n\t        var DEFAULT_OPTIONS = {\n\t            enabled: true,\n\t            type: TREND_TYPE.LINE,\n\t            data: [],\n\t            maxSegmentLength: 1e3,\n\t            lineWidth: 2,\n\t            lineColor: 16777215,\n\t            hasGradient: true,\n\t            hasBeacon: false,\n\t            settingsForTypes: {\n\t                CANDLE: {\n\t                    minSegmentLengthInPx: 20,\n\t                    maxSegmentLengthInPx: 40\n\t                },\n\t                LINE: {\n\t                    minSegmentLengthInPx: 2,\n\t                    maxSegmentLengthInPx: 10\n\t                }\n\t            }\n\t        };\n\t        var Trend = function() {\n\t            function Trend(chartState, trendName, initialState) {\n\t                this.minXVal = Infinity;\n\t                this.minYVal = Infinity;\n\t                this.maxXVal = -Infinity;\n\t                this.maxYVal = -Infinity;\n\t                var options = initialState.trends[trendName];\n\t                this.name = trendName;\n\t                this.chartState = chartState;\n\t                this.calculatedOptions = Utils_1.Utils.deepMerge(DEFAULT_OPTIONS, options);\n\t                this.calculatedOptions.name = trendName;\n\t                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t                this.calculatedOptions.dataset = [];\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvents();\n\t            }\n\t            Trend.prototype.onInitialStateApplied = function() {\n\t                this.segments = new TrendSegments_1.TrendSegments(this.chartState, this);\n\t            };\n\t            Trend.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var chartState = this.chartState;\n\t                chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateApplied();\n\t                });\n\t                chartState.onScrollStop(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onZoom(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n\t                });\n\t                chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            Trend.prototype.getCalculatedOptions = function() {\n\t                return this.calculatedOptions;\n\t            };\n\t            Trend.prototype.appendData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData());\n\t                var updatedTrendData = options.data.concat(newData);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.prependData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData(), true);\n\t                var updatedTrendData = newData.concat(options.data);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.changeData = function(allData, newData) {\n\t                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n\t                    var item = newData_1[_i];\n\t                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t                }\n\t                var options = this.getOptions();\n\t                var statePatch = {\n\t                    trends: (_a = {}, _a[options.name] = {\n\t                        data: allData\n\t                    }, _a)\n\t                };\n\t                this.chartState.setState(statePatch, newData);\n\t                var _a;\n\t            };\n\t            Trend.prototype.getData = function(fromX, toX) {\n\t                var data = this.getOptions().data;\n\t                if (fromX == void 0 && toX == void 0) return data;\n\t                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t                toX = toX !== void 0 ? toX : data[data.length].xVal;\n\t                var filteredData = [];\n\t                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n\t                    var item = data_1[_i];\n\t                    if (item.xVal < fromX) continue;\n\t                    if (item.xVal > toX) break;\n\t                    filteredData.push(item);\n\t                }\n\t                return filteredData;\n\t            };\n\t            Trend.prototype.getFirstItem = function() {\n\t                return this.getOptions().data[0];\n\t            };\n\t            Trend.prototype.getLastItem = function() {\n\t                var data = this.getOptions().data;\n\t                return data[data.length - 1];\n\t            };\n\t            Trend.prototype.getOptions = function() {\n\t                return this.chartState.data.trends[this.name];\n\t            };\n\t            Trend.prototype.setOptions = function(options) {\n\t                this.chartState.setState({\n\t                    trends: (_a = {}, _a[this.name] = options, _a)\n\t                });\n\t                var _a;\n\t            };\n\t            Trend.prototype.onPrependRequest = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.CHANGE, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onDataChange = function(cb) {\n\t                var _this = this;\n\t                var onChangeCb = function(changedOptions, newData) {\n\t                    if (newData) cb(newData);\n\t                };\n\t                this.ee.on(EVENTS.CHANGE, onChangeCb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n\t                };\n\t            };\n\t            Trend.prototype.checkForPrependRequest = function() {\n\t                var _this = this;\n\t                if (this.prependRequest) return;\n\t                var chartState = this.chartState;\n\t                var minXVal = chartState.data.computedData.trends.minXVal;\n\t                var minScreenX = chartState.getScreenXByValue(minXVal);\n\t                var needToRequest = minScreenX > 0;\n\t                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var requestedDataLength = to - from;\n\t                if (!needToRequest) return;\n\t                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n\t                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t                });\n\t                this.prependRequest.then(function(newData) {\n\t                    _this.prependData(newData);\n\t                    _this.prependRequest = null;\n\t                }, function() {\n\t                    _this.prependRequest = null;\n\t                });\n\t            };\n\t            Trend.prepareData = function(newData, currentData, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var data = [];\n\t                if (typeof newData[0] == \"number\") {\n\t                    currentData = currentData || [];\n\t                    var initialItem = void 0;\n\t                    var xVal = void 0;\n\t                    if (isPrepend) {\n\t                        initialItem = currentData[0];\n\t                        xVal = initialItem.xVal - newData.length;\n\t                    } else {\n\t                        initialItem = currentData[currentData.length - 1];\n\t                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n\t                    }\n\t                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n\t                        var yVal = _a[_i];\n\t                        data.push({\n\t                            xVal: xVal,\n\t                            yVal: yVal,\n\t                            id: Utils_1.Utils.getUid()\n\t                        });\n\t                        xVal++;\n\t                    }\n\t                } else {\n\t                    data = newData;\n\t                }\n\t                return data;\n\t            };\n\t            return Trend;\n\t        }();\n\t        exports.Trend = Trend;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var Vector3 = THREE.Vector3;\n\t        var Trend_1 = __webpack_require__(17);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var MAX_ANIMATED_SEGMENTS = 100;\n\t        var EVENTS = {\n\t            REBUILD: \"rebuild\",\n\t            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n\t            ANIMATION_FRAME: \"animationFrame\"\n\t        };\n\t        var TrendSegments = function() {\n\t            function TrendSegments(chartState, trend) {\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.animatedSegmentsIds = [];\n\t                this.segmentsLength = 0;\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForPrepend = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.trend = trend;\n\t                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t                this.tryToRebuildSegments();\n\t                this.bindEvents();\n\t            }\n\t            TrendSegments.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.trend.onChange(function(changedOptions, newData) {\n\t                    return _this.onTrendChangeHandler(changedOptions, newData);\n\t                });\n\t                this.chartState.onZoom(function() {\n\t                    return _this.onZoomHandler();\n\t                });\n\t                this.chartState.onScroll(function() {\n\t                    return _this.recalculateDisplayedRange();\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            TrendSegments.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.appendAnimation && this.appendAnimation.kill();\n\t                this.prependAnimation && this.prependAnimation.kill();\n\t            };\n\t            TrendSegments.prototype.onZoomHandler = function() {\n\t                var segmentsRebuilded = this.tryToRebuildSegments();\n\t                if (!segmentsRebuilded) {\n\t                    this.recalculateDisplayedRange();\n\t                }\n\t            };\n\t            TrendSegments.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n\t                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n\t                if (needToRebuildSegments) {\n\t                    this.tryToRebuildSegments(true);\n\t                    return;\n\t                }\n\t                if (!newData) return;\n\t                var data = this.trend.getData();\n\t                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                isAppend ? this.appendData(newData) : this.prependData(newData);\n\t                this.recalculateDisplayedRange();\n\t            };\n\t            TrendSegments.prototype.getEndSegment = function() {\n\t                return this.segmentsById[this.endSegmentId];\n\t            };\n\t            TrendSegments.prototype.getStartSegment = function() {\n\t                return this.segmentsById[this.startSegmentId];\n\t            };\n\t            TrendSegments.prototype.tryToRebuildSegments = function(force) {\n\t                if (force === void 0) {\n\t                    force = false;\n\t                }\n\t                var options = this.trend.getOptions();\n\t                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n\t                var trendTypesSettings = options.settingsForTypes;\n\t                var trendTypeSettings = trendTypesSettings[trendTypeName];\n\t                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n\t                var needToRebuild = this.segments.length === 0 || force;\n\t                var segmentLength = this.maxSegmentLength;\n\t                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\t                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t                }\n\t                if (!needToRebuild) return false;\n\t                this.maxSegmentLength = segmentLength;\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.segmentsLength = 0;\n\t                this.stopAllAnimations();\n\t                this.appendData(null, true);\n\t                this.recalculateDisplayedRange(true);\n\t                this.ee.emit(EVENTS.REBUILD);\n\t            };\n\t            TrendSegments.prototype.stopAllAnimations = function() {\n\t                this.animatedSegmentsIds = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                if (this.prependAnimation) this.prependAnimation.kill();\n\t                if (this.appendAnimation) this.appendAnimation.kill();\n\t            };\n\t            TrendSegments.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n\t                if (segmentsAreRebuilded === void 0) {\n\t                    segmentsAreRebuilded = false;\n\t                }\n\t                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n\t                var displayedRange = to - from;\n\t                this.firstDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, from - displayedRange, \"startXVal\");\n\t                this.lastDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, to + displayedRange, \"endXVal\");\n\t                if (segmentsAreRebuilded) return;\n\t                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n\t                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t            };\n\t            TrendSegments.prototype.getSegmentsForXValues = function(values) {\n\t                var valueInd = 0;\n\t                var value = values[valueInd];\n\t                var lastValueInd = values.length - 1;\n\t                var results = [];\n\t                var segment = this.getStartSegment();\n\t                if (!segment.hasValue) return [];\n\t                while (segment) {\n\t                    while (value < segment.startXVal) {\n\t                        results.push(void 0);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    while (value > segment.endXVal) {\n\t                        segment = segment.getNext();\n\t                        if (!segment) break;\n\t                    }\n\t                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n\t                    if (valueInPoint) {\n\t                        results.push(segment);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    if (valueInd > lastValueInd) break;\n\t                }\n\t                return results;\n\t            };\n\t            TrendSegments.prototype.onAnimationFrame = function(cb) {\n\t                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t            };\n\t            TrendSegments.prototype.onRebuild = function(cb) {\n\t                return this.ee.subscribe(EVENTS.REBUILD, cb);\n\t            };\n\t            TrendSegments.prototype.onDisplayedRangeChanged = function(cb) {\n\t                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t            };\n\t            TrendSegments.prototype.allocateNextSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var prevSegment = this.segmentsById[this.endSegmentId];\n\t                if (prevSegment && prevSegment.hasValue) {\n\t                    prevSegment.nextId = id;\n\t                    segment.prevId = prevSegment.id;\n\t                }\n\t                this.endSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.push(segment);\n\t                return segment;\n\t            };\n\t            TrendSegments.prototype.allocatePrevSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var nextSegment = this.segmentsById[this.startSegmentId];\n\t                if (nextSegment && nextSegment.hasValue) {\n\t                    nextSegment.prevId = id;\n\t                    segment.nextId = nextSegment.id;\n\t                }\n\t                this.startSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.unshift(segment);\n\t                return segment;\n\t            };\n\t            TrendSegments.prototype.appendData = function(newData, needRebuildSegments) {\n\t                if (needRebuildSegments === void 0) {\n\t                    needRebuildSegments = false;\n\t                }\n\t                var trendData = this.trend.getData();\n\t                if (needRebuildSegments) {\n\t                    newData = trendData;\n\t                    this.animatedSegmentsForAppend = [];\n\t                }\n\t                var startItemInd = trendData.length - newData.length;\n\t                var segment = this.getEndSegment() || this.allocateNextSegment();\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                var itemInd = 0;\n\t                while (itemInd < newData.length) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.appendItem(item);\n\t                    var isLastItem = itemInd == newData.length - 1;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd++;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForAppend.length > 0) {\n\t                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForAppend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocateNextSegment();\n\t                    var prevItem = trendData[startItemInd + itemInd - 1];\n\t                    segment.appendItem(prevItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (needRebuildSegments) {\n\t                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n\t                        var segmentId = _a[_i];\n\t                        var segment_1 = this.segmentsById[segmentId];\n\t                        segment_1.currentAnimationState = segment_1.createAnimationState();\n\t                    }\n\t                    this.animatedSegmentsForAppend = [];\n\t                    return;\n\t                }\n\t                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time);\n\t            };\n\t            TrendSegments.prototype.prependData = function(newData) {\n\t                var trendData = this.trend.getData();\n\t                var segment = this.getStartSegment() || this.segmentsById[0];\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var itemInd = newData.length - 1;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                while (itemInd >= 0) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.prependItem(item);\n\t                    var isLastItem = itemInd == 0;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd--;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForPrepend.length > 0) {\n\t                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForPrepend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocatePrevSegment();\n\t                    var nextItem = trendData[itemInd + 1];\n\t                    segment.prependItem(nextItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time, true);\n\t            };\n\t            TrendSegments.prototype.animate = function(time, isPrepend) {\n\t                var _this = this;\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\t                if (animation && animation.isActive() || time == 0) {\n\t                    if (animation) animation.kill();\n\t                    this.onAnimationFrameHandler(1, isPrepend);\n\t                    animatedSegmentsIds.length = 0;\n\t                    return;\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var ease = animationsOptions.trendChangeEase;\n\t                var objectToAnimate = {\n\t                    animationValue: 0\n\t                };\n\t                animation = TweenLite.to(objectToAnimate, time, {\n\t                    animationValue: 1,\n\t                    ease: ease\n\t                });\n\t                animation.eventCallback(\"onUpdate\", function() {\n\t                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animatedSegmentsIds.length = 0;\n\t                    _this.appendAnimation = null;\n\t                });\n\t                if (isPrepend) {\n\t                    this.prependAnimation = animation;\n\t                } else {\n\t                    this.appendAnimation = animation;\n\t                }\n\t            };\n\t            TrendSegments.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n\t                    var segmentId = animatedSegmentsIds_1[_i];\n\t                    var segment = this.segmentsById[segmentId];\n\t                    for (var key in segment.targetAnimationState) {\n\t                        var targetValue = segment.targetAnimationState[key];\n\t                        var initialValue = segment.initialAnimationState[key];\n\t                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t                        segment.currentAnimationState[key] = currentValue;\n\t                    }\n\t                }\n\t                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t            };\n\t            return TrendSegments;\n\t        }();\n\t        exports.TrendSegments = TrendSegments;\n\t        var TrendSegment = function() {\n\t            function TrendSegment(trendPoints, id) {\n\t                this.isCompleted = false;\n\t                this.items = [];\n\t                this.initialAnimationState = {};\n\t                this.targetAnimationState = {};\n\t                this.currentAnimationState = {};\n\t                this.trendSegments = trendPoints;\n\t                this.id = id;\n\t                this.maxLength = trendPoints.maxSegmentLength;\n\t            }\n\t            TrendSegment.prototype.createAnimationState = function() {\n\t                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n\t                return {\n\t                    xVal: xVal,\n\t                    yVal: yVal,\n\t                    startXVal: startXVal,\n\t                    startYVal: startYVal,\n\t                    endXVal: endXVal,\n\t                    endYVal: endYVal,\n\t                    maxYVal: maxYVal,\n\t                    minYVal: minYVal,\n\t                    maxLength: maxLength\n\t                };\n\t            };\n\t            TrendSegment.prototype.appendItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.push(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var startXVal = items[0].xVal;\n\t                if (item.xVal - startXVal > this.maxLength) return false;\n\t                items.push(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.prependItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.unshift(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var endXVal = items[items.length - 1].xVal;\n\t                if (endXVal - item.xVal > this.maxLength) return false;\n\t                items.unshift(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.complete = function() {\n\t                this.isCompleted = true;\n\t                this.recalculateItems();\n\t                this.items = [];\n\t            };\n\t            TrendSegment.prototype.recalculateItems = function() {\n\t                var items = this.items;\n\t                var itemsLength = items.length;\n\t                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n\t                var endItem = items[itemsLength - 1];\n\t                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n\t                var startXVal, startYVal;\n\t                var startItem = items[0];\n\t                startXVal = startItem.xVal;\n\t                startYVal = startItem.yVal;\n\t                var minX = Math.min(startXVal, endXVal);\n\t                var maxX = Math.max(startXVal, endXVal);\n\t                var middleXVal = minX + (maxX - minX) / 2;\n\t                var minY = Math.min(startYVal, endYVal);\n\t                var maxY = Math.max(startYVal, endYVal);\n\t                var middleYVal = minY + (maxY - minY) / 2;\n\t                var yVals = items.map(function(item) {\n\t                    return item.yVal;\n\t                });\n\t                this.startXVal = startXVal;\n\t                this.startYVal = startYVal;\n\t                this.endXVal = endXVal;\n\t                this.endYVal = endYVal;\n\t                this.xVal = middleXVal;\n\t                this.yVal = middleYVal;\n\t                this.maxYVal = Math.max.apply(Math, yVals);\n\t                this.minYVal = Math.min.apply(Math, yVals);\n\t                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t            };\n\t            TrendSegment.prototype.getNext = function() {\n\t                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t            };\n\t            TrendSegment.prototype.getPrev = function() {\n\t                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t            };\n\t            TrendSegment.prototype.getFrameVal = function() {\n\t                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n\t                return new Vector3(xVal, yVal, 0);\n\t            };\n\t            TrendSegment.prototype.getFramePoint = function() {\n\t                var frameVal = this.getFrameVal();\n\t                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t            };\n\t            return TrendSegment;\n\t        }();\n\t        exports.TrendSegment = TrendSegment;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var Screen = function() {\n\t            function Screen(chartState) {\n\t                this.options = {\n\t                    scrollXVal: 0,\n\t                    scrollX: 0,\n\t                    scrollYVal: 0,\n\t                    scrollY: 0,\n\t                    zoomX: 1,\n\t                    zoomY: 1\n\t                };\n\t                this.currentScrollX = {\n\t                    x: 0\n\t                };\n\t                this.currentScrollY = {\n\t                    y: 0\n\t                };\n\t                this.currentZoomX = {\n\t                    val: 1\n\t                };\n\t                this.currentZoomY = {\n\t                    val: 1\n\t                };\n\t                this.chartState = chartState;\n\t                var _a = chartState.data, w = _a.width, h = _a.height;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.transform({\n\t                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n\t                    zoomY: 1\n\t                });\n\t                this.bindEvents();\n\t            }\n\t            Screen.prototype.getCameraSettings = function() {\n\t                var _a = this.chartState.data, w = _a.width, h = _a.height;\n\t                var FOV = 75;\n\t                var vFOV = FOV * (Math.PI / 180);\n\t                return {\n\t                    FOV: FOV,\n\t                    aspect: w / h,\n\t                    near: .1,\n\t                    far: 5e3,\n\t                    z: h / (2 * Math.tan(vFOV / 2)),\n\t                    x: w / 2,\n\t                    y: h / 2\n\t                };\n\t            };\n\t            Screen.prototype.onZoomFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"zoomFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onScrollFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"scrollFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onTransformationFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"transformationFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.cameraIsMoving = function() {\n\t                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n\t            };\n\t            Screen.prototype.transform = function(options, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n\t                if (scrollX != void 0) this.options.scrollX = scrollX;\n\t                if (scrollY != void 0) this.options.scrollY = scrollY;\n\t                if (zoomX != void 0) this.options.zoomX = zoomX;\n\t                if (zoomY != void 0) this.options.zoomY = zoomY;\n\t                if (scrollX != void 0 || zoomX) {\n\t                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t                    this.options.scrollXVal = options.scrollXVal;\n\t                }\n\t                if (scrollY != void 0 || zoomY) {\n\t                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t                    this.options.scrollYVal = options.scrollYVal;\n\t                }\n\t                if (silent) return;\n\t                this.ee.emit(\"transformationFrame\", options);\n\t                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t                    this.ee.emit(\"scrollFrame\", options);\n\t                }\n\t                if (options.zoomX != void 0 || options.zoomY != void 0) {\n\t                    this.ee.emit(\"zoomFrame\", options);\n\t                }\n\t            };\n\t            Screen.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onChange(function(changedProps) {\n\t                    if (changedProps.xAxis && changedProps.xAxis.range) {\n\t                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n\t                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n\t                    }\n\t                    if (changedProps.yAxis && changedProps.yAxis.range) {\n\t                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n\t                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n\t                    }\n\t                });\n\t                state.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            Screen.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.scrollXAnimation && this.scrollXAnimation.kill();\n\t                this.scrollYAnimation && this.scrollYAnimation.kill();\n\t                this.zoomXAnimation && this.zoomXAnimation.kill();\n\t                this.zoomYAnimation && this.zoomYAnimation.kill();\n\t            };\n\t            Screen.prototype.onScrollXHandler = function(changedProps) {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var isDragMode = state.data.cursor.dragMode;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled && !isDragMode;\n\t                var zoomXChanged = changedProps.xAxis.range.zoom;\n\t                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n\t                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n\t                var range = state.data.xAxis.range;\n\t                var targetX = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollX.x = this.options.scrollX;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollX: _this.currentScrollX.x\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t                        x: targetX,\n\t                        ease: ease\n\t                    });\n\t                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollX.x = targetX;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onScrollYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t                var range = state.data.yAxis.range;\n\t                var targetY = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollY.y = this.options.scrollY;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollY: _this.currentScrollY.y\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t                        y: targetY,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollY.y = targetY;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomXHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.xAxis.range.zoom;\n\t                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomX: _this.currentZoomX.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomX.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.yAxis.range.zoom;\n\t                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomY: _this.currentZoomY.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomY.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomX;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomY;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            Screen.prototype.getValueOnXAxis = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n\t            };\n\t            Screen.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n\t            };\n\t            Screen.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n\t            };\n\t            Screen.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n\t            };\n\t            Screen.prototype.getValueByScreenX = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.getValueByScreenY = function(y) {\n\t                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t            };\n\t            Screen.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            Screen.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            Screen.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            Screen.prototype.getPointByScreenY = function(screenY) {\n\t                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t            };\n\t            Screen.prototype.getTop = function() {\n\t                return this.getPointByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottom = function() {\n\t                return this.getPointByScreenY(0);\n\t            };\n\t            Screen.prototype.getLeft = function() {\n\t                return this.getPointByScreenX(0);\n\t            };\n\t            Screen.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.chartState.data.width);\n\t            };\n\t            Screen.prototype.getTopVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottomVal = function() {\n\t                return this.getValueByScreenY(0);\n\t            };\n\t            Screen.prototype.getCenterYVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height / 2);\n\t            };\n\t            return Screen;\n\t        }();\n\t        exports.Screen = Screen;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var AXIS_MARK_DEFAULT_OPTIONS = {\n\t            type: \"simple\",\n\t            lineWidth: 1,\n\t            value: 0,\n\t            showValue: false,\n\t            stickToEdges: false,\n\t            lineColor: \"#FFFFFF\",\n\t            title: \"\"\n\t        };\n\t        var AxisMarks = function() {\n\t            function AxisMarks(chartState, axisType) {\n\t                this.items = {};\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.axisType = axisType;\n\t                var marks = this.items;\n\t                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n\t                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n\t                    var options = axisMarksOptions_1[_i];\n\t                    var axisMark = void 0;\n\t                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n\t                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n\t                    if (options.type == \"timeleft\") {\n\t                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t                    } else {\n\t                        axisMark = new AxisMark(chartState, axisType, options);\n\t                    }\n\t                    marks[options.name] = axisMark;\n\t                }\n\t                this.bindEvents();\n\t            }\n\t            AxisMarks.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, newData);\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n\t                if (!newData) return;\n\t                var startVal = newData[0].xVal;\n\t                var endVal = newData[newData.length - 1].xVal;\n\t                var marks = this.items;\n\t                for (var markName in marks) {\n\t                    var mark = marks[markName];\n\t                    var markVal = mark.options.value;\n\t                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n\t                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n\t                }\n\t            };\n\t            AxisMarks.prototype.getItems = function() {\n\t                return this.items;\n\t            };\n\t            AxisMarks.prototype.getItem = function(markName) {\n\t                return this.items[markName];\n\t            };\n\t            return AxisMarks;\n\t        }();\n\t        exports.AxisMarks = AxisMarks;\n\t        var AxisMark = function() {\n\t            function AxisMark(chartState, axisType, options) {\n\t                this.renderOnTrendsChange = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.options = options;\n\t                this.axisType = axisType;\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            AxisMark.prototype.bindEvents = function() {};\n\t            AxisMark.prototype.setOptions = function(newOptions) {\n\t                var value = this.options.value;\n\t                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n\t                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisMark.prototype.getDisplayedVal = function() {\n\t                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n\t                return String(displayedValue !== void 0 ? displayedValue : value);\n\t            };\n\t            AxisMark.prototype.onMarkCrossed = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"markCrossed\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"markCrossed\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"valueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"valueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"onDisplayedValueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"onDisplayedValueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.typeName = \"simple\";\n\t            return AxisMark;\n\t        }();\n\t        exports.AxisMark = AxisMark;\n\t        var AxisTimeleftMark = function(_super) {\n\t            __extends(AxisTimeleftMark, _super);\n\t            function AxisTimeleftMark() {\n\t                _super.apply(this, arguments);\n\t                this.renderOnTrendsChange = true;\n\t            }\n\t            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n\t                var markVal = this.options.value;\n\t                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n\t                var time = markVal - maxXVal;\n\t                if (time < 0) time = 0;\n\t                return Utils_1.Utils.msToTimeString(time);\n\t            };\n\t            AxisTimeleftMark.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t            };\n\t            AxisTimeleftMark.prototype.onTrendsChange = function() {\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisTimeleftMark.typeName = \"timeleft\";\n\t            return AxisTimeleftMark;\n\t        }(AxisMark);\n\t        exports.AxisTimeleftMark = AxisTimeleftMark;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        (function(AXIS_RANGE_TYPE) {\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n\t        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n\t        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n\t        (function(AXIS_TYPE) {\n\t            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n\t            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n\t        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n\t        var AXIS_TYPE = exports.AXIS_TYPE;\n\t        (function(AXIS_DATA_TYPE) {\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n\t        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n\t        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Mesh = THREE.Mesh;\n\t        var Object3D = THREE.Object3D;\n\t        var Widget_1 = __webpack_require__(15);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var AxisWidget = function(_super) {\n\t            __extends(AxisWidget, _super);\n\t            function AxisWidget(state) {\n\t                var _this = this;\n\t                _super.call(this, state);\n\t                this.isDestroyed = false;\n\t                this.object3D = new Object3D();\n\t                this.axisXObject = new Object3D();\n\t                this.axisYObject = new Object3D();\n\t                this.object3D.add(this.axisXObject);\n\t                this.object3D.add(this.axisYObject);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }, 1e3);\n\t                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n\t            }\n\t            AxisWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n\t                    _this.onScrollChange(options.scrollX, options.scrollY);\n\t                }), state.screen.onZoomFrame(function(options) {\n\t                    _this.onZoomFrame(options);\n\t                }), state.onDestroy(function() {\n\t                    return _this.onDestroy();\n\t                }), state.onResize(function() {\n\t                    return _this.onResize();\n\t                }));\n\t            };\n\t            AxisWidget.prototype.onDestroy = function() {\n\t                this.isDestroyed = true;\n\t                this.unbindEvents();\n\t            };\n\t            AxisWidget.prototype.onScrollChange = function(x, y) {\n\t                if (y != void 0) {\n\t                    this.axisYObject.position.y = y;\n\t                    this.axisXObject.position.y = y;\n\t                }\n\t                if (x != void 0) {\n\t                    this.axisYObject.position.x = x;\n\t                    this.updateAxisXRequest();\n\t                }\n\t            };\n\t            AxisWidget.prototype.onResize = function() {\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t            };\n\t            AxisWidget.prototype.setupAxis = function(orientation) {\n\t                var _this = this;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var canvasWidth = 0, canvasHeight = 0;\n\t                if (isXAxis) {\n\t                    this.axisXObject.traverse(function(obj) {\n\t                        return _this.axisXObject.remove(obj);\n\t                    });\n\t                    canvasWidth = visibleWidth * 3;\n\t                    canvasHeight = 50;\n\t                } else {\n\t                    this.axisYObject.traverse(function(obj) {\n\t                        return _this.axisYObject.remove(obj);\n\t                    });\n\t                    canvasWidth = 50;\n\t                    canvasHeight = visibleHeight * 3;\n\t                }\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n\t                if (isXAxis) {\n\t                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisXObject.add(axisMesh);\n\t                } else {\n\t                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisYObject.add(axisMesh);\n\t                }\n\t                this.updateAxis(orientation);\n\t            };\n\t            AxisWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisWidget.prototype.updateAxis = function(orientation) {\n\t                if (this.isDestroyed) return;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n\t                var axisOptions;\n\t                var axisMesh;\n\t                var axisGridParams;\n\t                if (isXAxis) {\n\t                    axisMesh = this.axisXObject.children[0];\n\t                    axisOptions = this.chartState.data.xAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t                } else {\n\t                    axisMesh = this.axisYObject.children[0];\n\t                    axisOptions = this.chartState.data.yAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t                }\n\t                var geometry = axisMesh.geometry;\n\t                var canvasWidth = geometry.parameters.width;\n\t                var canvasHeight = geometry.parameters.height;\n\t                var texture = axisMesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t                if (isXAxis) {\n\t                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t                }\n\t                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t                var startVal = axisGridParams.start - edgeOffset;\n\t                var endVal = axisGridParams.end + edgeOffset;\n\t                ctx.beginPath();\n\t                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n\t                    var displayedValue = \"\";\n\t                    if (isXAxis) {\n\t                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t                        ctx.textAlign = \"center\";\n\t                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n\t                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t                        } else {\n\t                            displayedValue = Number(val.toFixed(14)).toString();\n\t                        }\n\t                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t                    } else {\n\t                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n\t                        ctx.textAlign = \"right\";\n\t                        displayedValue = Number(val.toFixed(14)).toString();\n\t                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n\t                    }\n\t                    ctx.stroke();\n\t                }\n\t                ctx.stroke();\n\t                ctx.closePath();\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisWidget.prototype.onZoomFrame = function(options) {\n\t                if (options.zoomX) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }\n\t                if (options.zoomY) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n\t                }\n\t            };\n\t            AxisWidget.getDateStr = function(timestamp, gridParams) {\n\t                var sec = 1e3;\n\t                var min = sec * 60;\n\t                var hour = min * 60;\n\t                var day = hour * 60;\n\t                var step = gridParams.step;\n\t                var d = new Date(timestamp);\n\t                var tf = function(num) {\n\t                    return Utils_1.Utils.toFixed(num, 2);\n\t                };\n\t                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n\t            };\n\t            AxisWidget.widgetName = \"Axis\";\n\t            return AxisWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisWidget = AxisWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Vector3 = THREE.Vector3;\n\t        var Widget_1 = __webpack_require__(15);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var GridWidget = function(_super) {\n\t            __extends(GridWidget, _super);\n\t            function GridWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.isDestroyed = false;\n\t                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n\t                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n\t                this.initGrid();\n\t                this.updateGrid();\n\t            }\n\t            GridWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateGrid();\n\t                }, 1e3);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return updateGridThrottled();\n\t                }), this.chartState.screen.onZoomFrame(function(options) {\n\t                    updateGridThrottled();\n\t                    _this.onZoomFrame(options);\n\t                }), this.chartState.onDestroy(function() {\n\t                    _this.isDestroyed = true;\n\t                    _this.unbindEvents();\n\t                }), this.chartState.onResize(function() {\n\t                    _this.updateGrid();\n\t                }));\n\t            };\n\t            GridWidget.prototype.initGrid = function() {\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: .1,\n\t                    transparent: true\n\t                });\n\t                var xLinesCount = this.gridSizeH;\n\t                var yLinesCount = this.gridSizeV;\n\t                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t                this.lineSegments.position.setZ(-1);\n\t                this.lineSegments.frustumCulled = false;\n\t            };\n\t            GridWidget.prototype.updateGrid = function() {\n\t                if (this.isDestroyed) return;\n\t                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n\t                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t                var startXVal = axisXGrid.start + gridScrollXVal;\n\t                var startYVal = axisYGrid.start + gridScrollYVal;\n\t                var geometry = this.lineSegments.geometry;\n\t                var vertices = geometry.vertices;\n\t                var lineInd = 0;\n\t                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n\t                    var value = startXVal + i * axisXGrid.step;\n\t                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n\t                    var value = startYVal + i * axisYGrid.step;\n\t                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n\t            };\n\t            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n\t                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n\t                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n\t                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n\t                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.onZoomFrame = function(options) {\n\t                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t            };\n\t            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n\t                var axisRange = axisOptions.range;\n\t                var from = axisRange.from;\n\t                var to = axisRange.to;\n\t                var axisLength = to - from;\n\t                var gridStep = 0;\n\t                var gridStepInPixels = 0;\n\t                var minGridStepInPixels = axisOptions.gridMinSize;\n\t                var axisLengthStr = String(axisLength);\n\t                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n\t                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\t                var gridStepFound = false;\n\t                var digitPos = 0;\n\t                while (!gridStepFound) {\n\t                    var power = intPartLength - digitPos - 1;\n\t                    var multiplier = Math.pow(10, power) || 1;\n\t                    var dividers = [ 1, 2, 5 ];\n\t                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t                        var nextGridStep = multiplier / dividers[dividerInd];\n\t                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t                        if (nextGridStepInPixels >= minGridStepInPixels) {\n\t                            gridStep = nextGridStep;\n\t                            gridStepInPixels = nextGridStepInPixels;\n\t                        } else {\n\t                            gridStepFound = true;\n\t                            if (gridStep === 0) {\n\t                                gridStep = nextGridStep;\n\t                                gridStepInPixels = nextGridStepInPixels;\n\t                            }\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!gridStepFound) digitPos++;\n\t                }\n\t                var gridStart = Math.floor(from / gridStep) * gridStep;\n\t                var gridEnd = Math.floor(to / gridStep) * gridStep;\n\t                return {\n\t                    start: gridStart,\n\t                    end: gridEnd,\n\t                    step: gridStep,\n\t                    stepInPx: gridStepInPixels,\n\t                    length: gridEnd - gridStart,\n\t                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t                };\n\t            };\n\t            GridWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            GridWidget.widgetName = \"Grid\";\n\t            return GridWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.GridWidget = GridWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(17);\n\t        var TrendsLoadingWidget = function(_super) {\n\t            __extends(TrendsLoadingWidget, _super);\n\t            function TrendsLoadingWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLoading;\n\t            };\n\t            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n\t            return TrendsLoadingWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n\t        var TrendLoading = function(_super) {\n\t            __extends(TrendLoading, _super);\n\t            function TrendLoading(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.isActive = false;\n\t                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendLoading.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                this.deactivate();\n\t            }\n\t            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled && chartState.data.animations.enabled;\n\t            };\n\t            TrendLoading.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendLoading.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.onPrependRequest(function() {\n\t                    return _this.activate();\n\t                }));\n\t            };\n\t            TrendLoading.prototype.prependData = function() {\n\t                this.deactivate();\n\t            };\n\t            TrendLoading.prototype.activate = function() {\n\t                var mesh = this.mesh;\n\t                mesh.material.opacity = 1;\n\t                mesh.rotation.z = 0;\n\t                var animation = TweenLite.to(this.mesh.rotation, .5, {\n\t                    z: Math.PI * 2\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animation.restart();\n\t                });\n\t                this.animation = animation;\n\t                this.isActive = true;\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.deactivate = function() {\n\t                this.animation && this.animation.kill();\n\t                this.mesh.material.opacity = 0;\n\t                this.isActive = false;\n\t            };\n\t            TrendLoading.createTexture = function() {\n\t                var h = 64, w = 64;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                    ctx.lineWidth = 5;\n\t                    var center = h / 2;\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n\t                    ctx.stroke();\n\t                });\n\t            };\n\t            TrendLoading.prototype.onZoomFrame = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.updatePosition = function() {\n\t                if (!this.isActive) return;\n\t                var trend = this.trend;\n\t                var segment = trend.segments.getStartSegment();\n\t                var x, y;\n\t                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    x = segment.currentAnimationState.startXVal;\n\t                    y = segment.currentAnimationState.startYVal;\n\t                } else {\n\t                    x = segment.currentAnimationState.xVal - segment.maxLength;\n\t                    y = segment.currentAnimationState.yVal;\n\t                }\n\t                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n\t                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n\t            };\n\t            return TrendLoading;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLoading = TrendLoading;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(15);\n\t        var Object3D = THREE.Object3D;\n\t        var TrendsWidget = function(_super) {\n\t            __extends(TrendsWidget, _super);\n\t            function TrendsWidget(state) {\n\t                _super.call(this, state);\n\t                this.widgets = {};\n\t                this.object3D = new Object3D();\n\t                this.onTrendsChange();\n\t            }\n\t            TrendsWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t                state.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, changedOptions, newData);\n\t                });\n\t            };\n\t            TrendsWidget.prototype.onTrendsChange = function() {\n\t                var trendsOptions = this.chartState.data.trends;\n\t                var TrendWidgetClass = this.getTrendWidgetClass();\n\t                for (var trendName in trendsOptions) {\n\t                    var trendOptions = trendsOptions[trendName];\n\t                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n\t                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t                        this.createTrendWidget(trendName);\n\t                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n\t                        this.destroyTrendWidget(trendName);\n\t                    }\n\t                }\n\t            };\n\t            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n\t                var widget = this.widgets[trendName];\n\t                if (!widget) return;\n\t                widget.onTrendChange(changedOptions);\n\t                if (newData) {\n\t                    var data = this.chartState.getTrend(trendName).getData();\n\t                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t                }\n\t            };\n\t            TrendsWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n\t                var WidgetConstructor = this.getTrendWidgetClass();\n\t                var widget = new WidgetConstructor(this.chartState, trendName);\n\t                this.widgets[trendName] = widget;\n\t                var widgetObject = widget.getObject3D();\n\t                widgetObject.name = trendName;\n\t                this.object3D.add(widget.getObject3D());\n\t            };\n\t            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n\t                this.widgets[trendName].onDestroy();\n\t                delete this.widgets[trendName];\n\t                var widgetObject = this.object3D.getObjectByName(trendName);\n\t                this.object3D.remove(widgetObject);\n\t            };\n\t            return TrendsWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.TrendsWidget = TrendsWidget;\n\t        var TrendWidget = function() {\n\t            function TrendWidget(chartState, trendName) {\n\t                this.chartState = chartState;\n\t                this.trendName = trendName;\n\t                this.unsubscribers = [];\n\t                this.trend = chartState.trendsManager.getTrend(trendName);\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled;\n\t            };\n\t            TrendWidget.prototype.appendData = function(newData) {};\n\t            TrendWidget.prototype.prependData = function(newData) {};\n\t            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n\t            TrendWidget.prototype.onDestroy = function() {\n\t                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n\t                    var unsubscriber = _a[_i];\n\t                    unsubscriber();\n\t                }\n\t            };\n\t            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n\t            TrendWidget.prototype.onZoomFrame = function(options) {};\n\t            TrendWidget.prototype.onTransformationFrame = function(options) {};\n\t            TrendWidget.prototype.onZoom = function() {};\n\t            TrendWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.trend.segments.onAnimationFrame(function(trendPoints) {\n\t                    return _this.onSegmentsAnimate(trendPoints);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n\t                    return _this.onTransformationFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n\t                    return _this.onZoomFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.onZoom(function() {\n\t                    return _this.onZoom();\n\t                }));\n\t            };\n\t            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n\t                this.unsubscribers.push(unsubscriber);\n\t            };\n\t            return TrendWidget;\n\t        }();\n\t        exports.TrendWidget = TrendWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(15);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Line = THREE.Line;\n\t        var Mesh = THREE.Mesh;\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var AxisMarksWidget = function(_super) {\n\t            __extends(AxisMarksWidget, _super);\n\t            function AxisMarksWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.axisMarksWidgets = [];\n\t                this.object3D = new Object3D();\n\t                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n\t                var items = xAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t                items = yAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t            }\n\t            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n\t                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n\t                this.axisMarksWidgets.push(axisMarkWidget);\n\t                this.object3D.add(axisMarkWidget.getObject3D());\n\t            };\n\t            AxisMarksWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n\t                    return _this.updateMarksPositions();\n\t                }), this.chartState.onResize(function() {\n\t                    return _this.updateMarksPositions();\n\t                }));\n\t            };\n\t            AxisMarksWidget.prototype.updateMarksPositions = function() {\n\t                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n\t                    var widget = _a[_i];\n\t                    widget.updatePosition();\n\t                }\n\t            };\n\t            AxisMarksWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarksWidget.widgetName = \"AxisMarks\";\n\t            return AxisMarksWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisMarksWidget = AxisMarksWidget;\n\t        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n\t            var axisMark = axisMarkWidget.axisMark;\n\t            ctx.fillStyle = axisMark.options.lineColor;\n\t            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\t            var xCoord = 15;\n\t            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n\t                ctx.textAlign = \"end\";\n\t                xCoord = axisMarkWidget.indicatorWidth;\n\t            }\n\t            ctx.fillText(axisMark.options.title, xCoord, 20);\n\t            if (!axisMark.options.showValue) return;\n\t            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n\t            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n\t        };\n\t        var INDICATOR_POS_Z = .1;\n\t        var AxisMarkWidget = function() {\n\t            function AxisMarkWidget(chartState, axisMark) {\n\t                this.indicatorWidth = 128;\n\t                this.indicatorHeight = 64;\n\t                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\t                this.chartState = chartState;\n\t                this.axisMark = axisMark;\n\t                this.axisType = axisMark.axisType;\n\t                this.frameValue = axisMark.options.value;\n\t                this.object3D = new Object3D();\n\t                this.object3D.position.setZ(-.1);\n\t                this.line = this.createLine();\n\t                this.object3D.add(this.line);\n\t                this.indicator = this.createIndicator();\n\t                this.object3D.add(this.indicator);\n\t                this.renderIndicator();\n\t                this.updatePosition();\n\t                this.bindEvents();\n\t            }\n\t            AxisMarkWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarkWidget.prototype.createLine = function() {\n\t                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n\t                var lineGeometry = new Geometry();\n\t                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n\t                return new Line(lineGeometry, new LineBasicMaterial({\n\t                    color: Utils_1.Utils.getHexColor(lineColor),\n\t                    linewidth: lineWidth\n\t                }));\n\t            };\n\t            AxisMarkWidget.prototype.createIndicator = function() {\n\t                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n\t            };\n\t            AxisMarkWidget.prototype.renderIndicator = function() {\n\t                var texture = this.indicator.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisMarkWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.axisMark.onDisplayedValueChange(function() {\n\t                    return _this.renderIndicator();\n\t                });\n\t                this.axisMark.onValueChange(function() {\n\t                    return _this.onValueChangeHandler();\n\t                });\n\t            };\n\t            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n\t                var _this = this;\n\t                if (this.moveAnimation) this.moveAnimation.kill();\n\t                var animations = this.chartState.data.animations;\n\t                var targetValue = this.axisMark.options.value;\n\t                var cb = function() {\n\t                    _this.updatePosition();\n\t                };\n\t                if (animations.enabled) {\n\t                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n\t                        frameValue: targetValue,\n\t                        ease: animations.trendChangeEase\n\t                    });\n\t                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.frameValue = targetValue;\n\t                    cb();\n\t                }\n\t            };\n\t            AxisMarkWidget.prototype.updatePosition = function() {\n\t                var chartState = this.chartState;\n\t                var screen = chartState.screen;\n\t                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n\t                var lineGeometry = this.line.geometry;\n\t                var hasStickMode = this.axisMark.options.stickToEdges;\n\t                var _a = this.chartState.data, width = _a.width, height = _a.height;\n\t                if (isXAxis) {\n\t                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t                    this.object3D.position.y = screen.getBottom();\n\t                    lineGeometry.vertices[1].setY(height);\n\t                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n\t                } else {\n\t                    var val = this.frameValue;\n\t                    var bottomVal = screen.getBottomVal();\n\t                    var topVal = screen.getTopVal();\n\t                    var needToStickOnTop = hasStickMode && val > topVal;\n\t                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n\t                    var centerYVal = screen.getCenterYVal();\n\t                    this.object3D.position.x = screen.getLeft();\n\t                    if (needToStickOnTop) {\n\t                        this.object3D.position.y = screen.getTop();\n\t                    } else if (needToStickOnBottom) {\n\t                        this.object3D.position.y = screen.getBottom();\n\t                    } else {\n\t                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t                    }\n\t                    lineGeometry.vertices[1].setX(width);\n\t                    var indicatorPosY = val > centerYVal ? -35 : 10;\n\t                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t                }\n\t                lineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            AxisMarkWidget.typeName = \"simple\";\n\t            return AxisMarkWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(15);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Vector3 = THREE.Vector3;\n\t        var BorderWidget = function(_super) {\n\t            __extends(BorderWidget, _super);\n\t            function BorderWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                var _a = chartState.data, width = _a.width, height = _a.height;\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: 0,\n\t                    transparent: true\n\t                });\n\t                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t            }\n\t            BorderWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            BorderWidget.widgetName = \"Border\";\n\t            return BorderWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.BorderWidget = BorderWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Color = THREE.Color;\n\t        var CANVAS_WIDTH = 128;\n\t        var CANVAS_HEIGHT = 64;\n\t        var OFFSET_X = 15;\n\t        var TrendsIndicatorWidget = function(_super) {\n\t            __extends(TrendsIndicatorWidget, _super);\n\t            function TrendsIndicatorWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendIndicator;\n\t            };\n\t            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n\t            return TrendsIndicatorWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n\t        var TrendIndicator = function(_super) {\n\t            __extends(TrendIndicator, _super);\n\t            function TrendIndicator(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                this.onTrendChange();\n\t            }\n\t            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasIndicator;\n\t            };\n\t            TrendIndicator.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendIndicator.prototype.onTrendChange = function() {\n\t                var trendData = this.trend.getData();\n\t                var lastItem = trendData[trendData.length - 1];\n\t                var texture = this.mesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\t                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n\t                texture.needsUpdate = true;\n\t            };\n\t            TrendIndicator.prototype.initObject = function() {\n\t                var color = new Color(this.trend.getOptions().lineColor);\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"15px Arial\";\n\t                    ctx.fillStyle = color.getStyle();\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n\t            };\n\t            TrendIndicator.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n\t                this.segment = segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n\t                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x + OFFSET_X;\n\t                var y = endPointVector.y;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n\t                if (indicatorIsOutOfScreen) {\n\t                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n\t                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n\t                    y -= 25;\n\t                }\n\t                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n\t            };\n\t            return TrendIndicator;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendIndicator = TrendIndicator;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Trend_1 = __webpack_require__(17);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var MAX_DISPLAYED_SEGMENTS = 2e3;\n\t        var TrendsLineWidget = function(_super) {\n\t            __extends(TrendsLineWidget, _super);\n\t            function TrendsLineWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLine;\n\t            };\n\t            TrendsLineWidget.widgetName = \"TrendsLine\";\n\t            return TrendsLineWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLineWidget = TrendsLineWidget;\n\t        var TrendLine = function(_super) {\n\t            __extends(TrendLine, _super);\n\t            function TrendLine(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeSegmentsInds = [];\n\t                this.displayedSegments = {};\n\t                var options = this.trend.getOptions();\n\t                this.material = new LineBasicMaterial({\n\t                    color: options.lineColor,\n\t                    linewidth: options.lineWidth\n\t                });\n\t                this.initLine();\n\t            }\n\t            TrendLine.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendLine.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            TrendLine.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segments.onRebuild(function() {\n\t                    _this.destroySegments();\n\t                    _this.setupSegments();\n\t                }));\n\t                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n\t                    _this.setupSegments();\n\t                }));\n\t            };\n\t            TrendLine.prototype.initLine = function() {\n\t                var geometry = new Geometry();\n\t                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.scaleXFactor = scaleXFactor;\n\t                this.scaleYFactor = scaleYFactor;\n\t                this.lineSegments = new LineSegments(geometry, this.material);\n\t                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.lineSegments.frustumCulled = false;\n\t                for (var i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\n\t                    geometry.vertices.push(new Vector3(), new Vector3());\n\t                    this.freeSegmentsInds.push(i);\n\t                }\n\t                this.vertices = geometry.vertices;\n\t                this.setupSegments();\n\t            };\n\t            TrendLine.prototype.setupSegments = function() {\n\t                var geometry = this.lineSegments.geometry;\n\t                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.displayedSegments) {\n\t                    var lineSegment = this.displayedSegments[segmentId];\n\t                    var segment_1 = this.trend.segments.segments[lineSegment.segmentId];\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupSegment(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                if (!lineSegment) {\n\t                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n\t                    var ind = this.freeSegmentsInds.pop();\n\t                    lineSegment = this.displayedSegments[segmentId] = {\n\t                        segmentId: segmentId,\n\t                        ind: ind\n\t                    };\n\t                }\n\t                var segmentInd = lineSegment.ind;\n\t                var lineStartVertex = this.vertices[segmentInd * 2];\n\t                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t            };\n\t            TrendLine.prototype.destroySegments = function() {\n\t                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t            };\n\t            TrendLine.prototype.destroySegment = function(segmentId) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t                lineStartVertex.set(0, 0, 0);\n\t                lineEndVertex.set(0, 0, 0);\n\t                delete this.displayedSegments[segmentId];\n\t                this.freeSegmentsInds.push(lineSegment.ind);\n\t            };\n\t            TrendLine.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.lineSegments.scale;\n\t                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t            };\n\t            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                var geometry = this.lineSegments.geometry;\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.displayedSegments[segmentId]) continue;\n\t                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendLine;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLine = TrendLine;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var Vector3 = THREE.Vector3;\n\t        var Mesh = THREE.Mesh;\n\t        var Line = THREE.Line;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var PlaneGeometry = THREE.PlaneGeometry;\n\t        var Trend_1 = __webpack_require__(17);\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var RISE_COLOR = 2927680;\n\t        var FALL_COLOR = 15619379;\n\t        var MARGIN_PERCENT = .3;\n\t        var MAX_CANDLES = 100;\n\t        var TrendsCandlesWidget = function(_super) {\n\t            __extends(TrendsCandlesWidget, _super);\n\t            function TrendsCandlesWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendCandlesWidget;\n\t            };\n\t            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n\t            return TrendsCandlesWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n\t        var TrendCandlesWidget = function(_super) {\n\t            __extends(TrendCandlesWidget, _super);\n\t            function TrendCandlesWidget(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeCandlesInds = [];\n\t                this.candlesPool = [];\n\t                this.candles = {};\n\t                this.initObject();\n\t            }\n\t            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n\t            };\n\t            TrendCandlesWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendCandlesWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segments.onRebuild(function() {\n\t                    _this.destroyCandles();\n\t                    _this.setupCandles();\n\t                }));\n\t                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n\t                    _this.setupCandles();\n\t                }));\n\t            };\n\t            TrendCandlesWidget.prototype.initObject = function() {\n\t                var stateData = this.chartState.data;\n\t                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.scaleXFactor = scaleXFactor;\n\t                this.scaleYFactor = scaleYFactor;\n\t                this.object3D = new Object3D();\n\t                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.object3D.frustumCulled = false;\n\t                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t                this.setupCandles();\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandles = function() {\n\t                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.candles) {\n\t                    var segment_1 = this.candles[segmentId].segment;\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupCandle(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandles = function() {\n\t                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n\t                var candle = this.candles[segmentId];\n\t                this.object3D.remove(candle.getObject3D());\n\t                delete this.candles[segmentId];\n\t            };\n\t            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.object3D.scale;\n\t                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t            };\n\t            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.candles[segmentId]) continue;\n\t                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t                    this.setupCandle(segmentId, segmentState);\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n\t                var candleInd = candleId % MAX_CANDLES;\n\t                var candle = this.candlesPool[candleInd];\n\t                if (!candle) {\n\t                    candle = this.candlesPool[candleInd] = new CandleWidget();\n\t                }\n\t                if (!this.candles[candleId]) {\n\t                    this.candles[candleId] = candle;\n\t                    this.object3D.add(candle.getObject3D());\n\t                }\n\t                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t                candle.setSegment(segmentState);\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendCandlesWidget;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendCandlesWidget = TrendCandlesWidget;\n\t        var CandleWidget = function() {\n\t            function CandleWidget() {\n\t                this.initObject();\n\t            }\n\t            CandleWidget.prototype.getObject3D = function() {\n\t                return this.rect;\n\t            };\n\t            CandleWidget.prototype.setSegment = function(segment) {\n\t                this.segment = segment;\n\t                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\t                var geometry = this.rect.geometry;\n\t                var material = this.rect.material;\n\t                var width = segment.endXVal - segment.startXVal;\n\t                width -= width * MARGIN_PERCENT;\n\t                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n\t                leftTop.set(-width / 2, height / 2, 0);\n\t                rightTop.set(width / 2, height / 2, 0);\n\t                leftBottom.set(-width / 2, -height / 2, 0);\n\t                rightBottom.set(width / 2, -height / 2, 0);\n\t                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t                    leftBottom.setY(leftBottom.y + 1);\n\t                    rightBottom.setY(rightBottom.y + 1);\n\t                }\n\t                material.color.set(color);\n\t                geometry.verticesNeedUpdate = true;\n\t                var vLineGeometry = this.vLine.geometry;\n\t                var vLineMaterial = this.vLine.material;\n\t                var lineTop = segment.maxYVal - segment.yVal;\n\t                var lineBottom = segment.minYVal - segment.yVal;\n\t                vLineGeometry.vertices[0].set(0, lineTop, 0);\n\t                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t                vLineMaterial.color.set(color);\n\t                vLineGeometry.verticesNeedUpdate = true;\n\t                var hLineGeometry = this.hLine.geometry;\n\t                var hLineMaterial = this.hLine.material;\n\t                var lineLeft = -width / 2;\n\t                var lineRight = width / 2;\n\t                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t                hLineMaterial.color.set(color);\n\t                hLineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            CandleWidget.prototype.initObject = function() {\n\t                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n\t                var vLineGeometry = new Geometry();\n\t                var hLineGeometry = new Geometry();\n\t                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.rect.add(this.vLine);\n\t                this.rect.add(this.hLine);\n\t            };\n\t            return CandleWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(17);\n\t        var TrendsBeaconWidget = function(_super) {\n\t            __extends(TrendsBeaconWidget, _super);\n\t            function TrendsBeaconWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendBeacon;\n\t            };\n\t            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n\t            return TrendsBeaconWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n\t        var TrendBeacon = function(_super) {\n\t            __extends(TrendBeacon, _super);\n\t            function TrendBeacon(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                if (state.data.animations.enabled) {\n\t                    this.animate();\n\t                }\n\t                this.updatePosition();\n\t            }\n\t            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendBeacon.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendBeacon.prototype.onTrendChange = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return _this.updatePosition();\n\t                }));\n\t                this.bindEvent(this.chartState.onChange(function(changedProps) {\n\t                    return _this.onStateChange(changedProps);\n\t                }));\n\t                this.bindEvent(this.chartState.onDestroy(function() {\n\t                    return _this.stopAnimation();\n\t                }));\n\t            };\n\t            TrendBeacon.prototype.initObject = function() {\n\t                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                light.scale.set(.2, .2, 1);\n\t                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture()\n\t                })));\n\t                this.segment = this.trend.segments.getEndSegment();\n\t            };\n\t            TrendBeacon.prototype.animate = function() {\n\t                var _this = this;\n\t                this.animated = true;\n\t                var object = this.mesh;\n\t                var animationObject = {\n\t                    scale: object.scale.x,\n\t                    opacity: object.material.opacity\n\t                };\n\t                this.mesh.scale.set(.1, .1, 1);\n\t                setTimeout(function() {\n\t                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n\t                        scale: 1,\n\t                        opacity: 0\n\t                    });\n\t                    animation.eventCallback(\"onUpdate\", function() {\n\t                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n\t                        object.material.opacity = animationObject.opacity;\n\t                    }).eventCallback(\"onComplete\", function() {\n\t                        _this.animation && animation.restart();\n\t                    });\n\t                }, 500);\n\t            };\n\t            TrendBeacon.prototype.stopAnimation = function() {\n\t                this.animated = false;\n\t                this.animation && this.animation.kill();\n\t                this.animation = null;\n\t            };\n\t            TrendBeacon.createTexture = function() {\n\t                var h = 32, w = 32;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n\t                    ctx.fillStyle = \"white\";\n\t                    ctx.fill();\n\t                });\n\t            };\n\t            TrendBeacon.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n\t                this.segment = trendsSegments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onStateChange = function(changedProps) {\n\t                if (!changedProps.animations) return;\n\t                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n\t                if (changedProps.animations.enabled) {\n\t                    this.animate();\n\t                } else {\n\t                    this.stopAnimation();\n\t                }\n\t            };\n\t            TrendBeacon.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var xVal, yVal;\n\t                var currentAnimationState = this.segment.currentAnimationState;\n\t                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    xVal = currentAnimationState.endXVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                } else {\n\t                    xVal = currentAnimationState.xVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                }\n\t                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n\t                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n\t                this.mesh.position.set(x, endPointVector.y, .1);\n\t            };\n\t            return TrendBeacon;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendBeacon = TrendBeacon;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(3));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        exports.DEFAULT_CONFIG = {\n\t            installPluginWidgets: true\n\t        };\n\t        var ChartPlugin = function() {\n\t            function ChartPlugin(options, config) {\n\t                if (config === void 0) {\n\t                    config = {};\n\t                }\n\t                this.unsubscribers = [];\n\t                this.initialState = options;\n\t                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n\t                this.name = this.constructor.NAME;\n\t                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n\t            }\n\t            ChartPlugin.prototype.setupChartState = function(chartState) {\n\t                var _this = this;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n\t                    return _this.onInitialStateAppliedHandler(initialState);\n\t                }), this.chartState.onReady(function() {\n\t                    return _this.onChartReadyHandler();\n\t                }), this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n\t                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n\t                }));\n\t            };\n\t            ChartPlugin.prototype.getOptions = function() {\n\t                return this.chartState.data.pluginsState[this.name];\n\t            };\n\t            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n\t            ChartPlugin.prototype.onChartReadyHandler = function() {};\n\t            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n\t            ChartPlugin.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t            };\n\t            ChartPlugin.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartPlugin.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartPlugin.NAME = \"\";\n\t            ChartPlugin.pluginWidgets = [];\n\t            return ChartPlugin;\n\t        }();\n\t        exports.ChartPlugin = ChartPlugin;\n\t    } ]);\n\t});\n\t\n\t\n\t//# sourceMappingURL=ThreeChart.js.map\n\n/***/ },\n\n/***/ 36:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(37)\n\n/***/ },\n\n/***/ 37:\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t    if (true) module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"THREE_CHARTS\"] = factory(); else root[\"THREE_CHARTS\"] = factory();\n\t})(this, function() {\n\t    return function(modules) {\n\t        var installedModules = {};\n\t        function __webpack_require__(moduleId) {\n\t            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n\t            var module = installedModules[moduleId] = {\n\t                exports: {},\n\t                id: moduleId,\n\t                loaded: false\n\t            };\n\t            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t            module.loaded = true;\n\t            return module.exports;\n\t        }\n\t        __webpack_require__.m = modules;\n\t        __webpack_require__.c = installedModules;\n\t        __webpack_require__.p = \"\";\n\t        return __webpack_require__(0);\n\t    }([ function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(1));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var three_chart_1 = __webpack_require__(2);\n\t        var TrendsMarksWidget_1 = __webpack_require__(4);\n\t        (function(TREND_MARK_SIDE) {\n\t            TREND_MARK_SIDE[TREND_MARK_SIDE[\"TOP\"] = 0] = \"TOP\";\n\t            TREND_MARK_SIDE[TREND_MARK_SIDE[\"BOTTOM\"] = 1] = \"BOTTOM\";\n\t        })(exports.TREND_MARK_SIDE || (exports.TREND_MARK_SIDE = {}));\n\t        var TREND_MARK_SIDE = exports.TREND_MARK_SIDE;\n\t        (function(EVENTS) {\n\t            EVENTS[EVENTS[\"CHANGE\"] = 0] = \"CHANGE\";\n\t        })(exports.EVENTS || (exports.EVENTS = {}));\n\t        var EVENTS = exports.EVENTS;\n\t        var AXIS_MARK_DEFAULT_OPTIONS = {\n\t            trendName: \"\",\n\t            title: \"\",\n\t            description: \"\",\n\t            descriptionColor: \"rgb(40,136,75)\",\n\t            value: 0,\n\t            iconColor: \"rgb(255, 102, 217)\",\n\t            orientation: TREND_MARK_SIDE.TOP,\n\t            width: 65,\n\t            height: 80,\n\t            offset: 40,\n\t            margin: 20\n\t        };\n\t        var TrendsMarksPlugin = function(_super) {\n\t            __extends(TrendsMarksPlugin, _super);\n\t            function TrendsMarksPlugin(trendsMarksPluginOptions) {\n\t                _super.call(this, trendsMarksPluginOptions);\n\t                this.items = {};\n\t                this.rects = {};\n\t            }\n\t            TrendsMarksPlugin.prototype.onInitialStateApplied = function() {\n\t                this.bindEvents();\n\t                this.onMarksChangeHandler();\n\t            };\n\t            TrendsMarksPlugin.prototype.onStateChanged = function() {\n\t                this.onMarksChangeHandler();\n\t            };\n\t            TrendsMarksPlugin.prototype.getOptions = function() {\n\t                return _super.prototype.getOptions.call(this);\n\t            };\n\t            TrendsMarksPlugin.prototype.getItems = function() {\n\t                return this.items;\n\t            };\n\t            TrendsMarksPlugin.prototype.getItem = function(markName) {\n\t                return this.items[markName];\n\t            };\n\t            TrendsMarksPlugin.prototype.createMark = function(options) {\n\t                var marksOptions = this.getOptions().items;\n\t                var newMarkOptions = marksOptions.concat([ options ]);\n\t                this.chartState.setState({\n\t                    pluginsState: (_a = {}, _a[this.name] = {\n\t                        items: newMarkOptions\n\t                    }, _a)\n\t                });\n\t                var _a;\n\t            };\n\t            TrendsMarksPlugin.prototype.onChange = function(cb) {\n\t                return this.ee.subscribe(EVENTS[EVENTS.CHANGE], cb);\n\t            };\n\t            TrendsMarksPlugin.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.trendsManager.onSegmentsRebuilded(function() {\n\t                    return _this.updateMarksSegments();\n\t                });\n\t                this.chartState.screen.onZoomFrame(function() {\n\t                    return _this.calclulateMarksPositions();\n\t                });\n\t            };\n\t            TrendsMarksPlugin.prototype.onInitialStateAppliedHandler = function() {\n\t                this.onMarksChangeHandler();\n\t            };\n\t            TrendsMarksPlugin.prototype.onMarksChangeHandler = function() {\n\t                var trendsMarksOptions = this.getOptions().items;\n\t                var actualMarksNames = [];\n\t                for (var _i = 0, trendsMarksOptions_1 = trendsMarksOptions; _i < trendsMarksOptions_1.length; _i++) {\n\t                    var options = trendsMarksOptions_1[_i];\n\t                    var marks = this.items;\n\t                    if (!options.name) {\n\t                        options.name = three_chart_1.Utils.getUid().toString();\n\t                        actualMarksNames.push(options.name);\n\t                        if (marks[options.name]) three_chart_1.Utils.error(\"duplicated mark name \" + options.name);\n\t                    } else if (marks[options.name]) {\n\t                        actualMarksNames.push(options.name);\n\t                        continue;\n\t                    }\n\t                    options = three_chart_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t                    var mark = new TrendMark(this.chartState, options);\n\t                    marks[options.name] = mark;\n\t                }\n\t                for (var markName in this.items) {\n\t                    if (actualMarksNames.indexOf(markName) != -1) continue;\n\t                    delete this.items[markName];\n\t                }\n\t                this.updateMarksSegments();\n\t                this.ee.emit(EVENTS[EVENTS.CHANGE]);\n\t            };\n\t            TrendsMarksPlugin.prototype.calclulateMarksPositions = function() {\n\t                this.rects = {};\n\t                for (var markName in this.items) {\n\t                    this.createMarkRect(this.items[markName]);\n\t                }\n\t            };\n\t            TrendsMarksPlugin.prototype.createMarkRect = function(mark) {\n\t                if (!mark.segment) return;\n\t                var state = this.chartState;\n\t                var options = mark.options;\n\t                var width = options.width, height = options.height, offset = options.offset, name = options.name;\n\t                var left = state.getPointOnXAxis(mark.xVal) - width / 2;\n\t                var top = state.getPointOnYAxis(mark.yVal);\n\t                var isTopSideMark = options.orientation == TREND_MARK_SIDE.TOP;\n\t                var newOffset;\n\t                var row = 0;\n\t                if (isTopSideMark) {\n\t                    top += offset + height;\n\t                } else {\n\t                    top -= offset;\n\t                }\n\t                var markRect = [ left, top, width, height ];\n\t                var hasIntersection = false;\n\t                do {\n\t                    for (var markName in this.rects) {\n\t                        var rect = this.rects[markName];\n\t                        hasIntersection = three_chart_1.Utils.rectsIntersect(rect, markRect);\n\t                        if (!hasIntersection) continue;\n\t                        if (isTopSideMark) {\n\t                            markRect[1] = rect[1] + markRect[3] + options.margin;\n\t                        } else {\n\t                            markRect[1] = rect[1] - rect[3] - options.margin;\n\t                        }\n\t                        row++;\n\t                        break;\n\t                    }\n\t                } while (hasIntersection);\n\t                if (isTopSideMark) {\n\t                    newOffset = markRect[1] - markRect[3] - state.getPointOnYAxis(mark.yVal);\n\t                } else {\n\t                    newOffset = state.getPointOnYAxis(mark.yVal) - markRect[1];\n\t                }\n\t                mark._setOffset(newOffset);\n\t                mark._setRow(row);\n\t                this.rects[name] = markRect;\n\t            };\n\t            TrendsMarksPlugin.prototype.updateMarksSegments = function() {\n\t                var chartState = this.chartState;\n\t                var trends = chartState.trendsManager.trends;\n\t                for (var trendName in trends) {\n\t                    var marks = this.getTrendMarks(trendName);\n\t                    var marksArr = [];\n\t                    var xVals = [];\n\t                    for (var markName in marks) {\n\t                        var mark = marks[markName];\n\t                        xVals.push(mark.options.value);\n\t                        marksArr.push(mark);\n\t                        mark._setSegment(null);\n\t                    }\n\t                    marksArr.sort(function(a, b) {\n\t                        return a.options.value - b.options.value;\n\t                    });\n\t                    var trend = chartState.getTrend(trendName);\n\t                    var points = trend.segments.getSegmentsForXValues(xVals.sort(function(a, b) {\n\t                        return a - b;\n\t                    }));\n\t                    for (var markInd = 0; markInd < marksArr.length; markInd++) {\n\t                        marksArr[markInd]._setSegment(points[markInd]);\n\t                    }\n\t                }\n\t                this.calclulateMarksPositions();\n\t            };\n\t            TrendsMarksPlugin.prototype.getTrendMarks = function(trendName) {\n\t                var trendMarks = [];\n\t                for (var markName in this.items) {\n\t                    if (this.items[markName].options.trendName != trendName) continue;\n\t                    trendMarks.push(this.items[markName]);\n\t                }\n\t                return trendMarks;\n\t            };\n\t            TrendsMarksPlugin.NAME = \"TrendsMarks\";\n\t            TrendsMarksPlugin.pluginWidgets = [ TrendsMarksWidget_1.TrendsMarksWidget ];\n\t            return TrendsMarksPlugin;\n\t        }(three_chart_1.ChartPlugin);\n\t        exports.TrendsMarksPlugin = TrendsMarksPlugin;\n\t        var TrendMark = function() {\n\t            function TrendMark(chartState, options) {\n\t                this.row = 0;\n\t                this.options = options;\n\t                this.chartState = chartState;\n\t            }\n\t            TrendMark.prototype._setSegment = function(segment) {\n\t                this.segment = segment;\n\t                if (!segment) return;\n\t                var trend = this.chartState.getTrend(this.options.trendName);\n\t                if (trend.getOptions().type == three_chart_1.TREND_TYPE.LINE) {\n\t                    this.xVal = segment.endXVal;\n\t                    this.yVal = segment.endYVal;\n\t                } else if (this.options.orientation == TREND_MARK_SIDE.TOP) {\n\t                    this.xVal = segment.xVal;\n\t                    this.yVal = segment.maxYVal;\n\t                } else {\n\t                    this.xVal = segment.xVal;\n\t                    this.yVal = segment.minYVal;\n\t                }\n\t            };\n\t            TrendMark.prototype._setOffset = function(offset) {\n\t                this.offset = offset;\n\t            };\n\t            TrendMark.prototype._setRow = function(row) {\n\t                this.row = row;\n\t            };\n\t            return TrendMark;\n\t        }();\n\t        exports.TrendMark = TrendMark;\n\t    }, function(module, exports, __webpack_require__) {\n\t        module.exports = __webpack_require__(3);\n\t    }, function(module, exports, __webpack_require__) {\n\t        (function webpackUniversalModuleDefinition(root, factory) {\n\t            if (true) module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"ThreeChart\"] = factory(); else root[\"ThreeChart\"] = factory();\n\t        })(this, function() {\n\t            return function(modules) {\n\t                var installedModules = {};\n\t                function __webpack_require__(moduleId) {\n\t                    if (installedModules[moduleId]) return installedModules[moduleId].exports;\n\t                    var module = installedModules[moduleId] = {\n\t                        exports: {},\n\t                        id: moduleId,\n\t                        loaded: false\n\t                    };\n\t                    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t                    module.loaded = true;\n\t                    return module.exports;\n\t                }\n\t                __webpack_require__.m = modules;\n\t                __webpack_require__.c = installedModules;\n\t                __webpack_require__.p = \"\";\n\t                return __webpack_require__(0);\n\t            }([ function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                function __export(m) {\n\t                    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t                }\n\t                __export(__webpack_require__(1));\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                function __export(m) {\n\t                    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t                }\n\t                __export(__webpack_require__(2));\n\t                __export(__webpack_require__(21));\n\t                __export(__webpack_require__(20));\n\t                __export(__webpack_require__(19));\n\t                __export(__webpack_require__(12));\n\t                __export(__webpack_require__(17));\n\t                __export(__webpack_require__(18));\n\t                __export(__webpack_require__(16));\n\t                __export(__webpack_require__(14));\n\t                __export(__webpack_require__(15));\n\t                __export(__webpack_require__(33));\n\t                __export(__webpack_require__(25));\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                __webpack_require__(3);\n\t                var PerspectiveCamera = THREE.PerspectiveCamera;\n\t                var State_1 = __webpack_require__(12);\n\t                var Utils_1 = __webpack_require__(14);\n\t                var AxisWidget_1 = __webpack_require__(22);\n\t                var GridWidget_1 = __webpack_require__(23);\n\t                var TrendsLoadingWidget_1 = __webpack_require__(24);\n\t                var AxisMarksWidget_1 = __webpack_require__(26);\n\t                var BorderWidget_1 = __webpack_require__(27);\n\t                var TrendsIndicatorWidget_1 = __webpack_require__(28);\n\t                var TrendsLineWidget_1 = __webpack_require__(29);\n\t                var TrendsCandleWidget_1 = __webpack_require__(30);\n\t                var TrendsBeaconWidget_1 = __webpack_require__(31);\n\t                var deps_1 = __webpack_require__(32);\n\t                exports.MAX_DATA_LENGTH = 2692e3;\n\t                var Chart = function() {\n\t                    function Chart(state, $container, plugins) {\n\t                        var _this = this;\n\t                        if (plugins === void 0) {\n\t                            plugins = [];\n\t                        }\n\t                        this.widgets = [];\n\t                        if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n\t                        if (!$container) {\n\t                            Utils_1.Utils.error(\"$el must be set\");\n\t                        }\n\t                        var style = getComputedStyle($container);\n\t                        state.width = parseInt(style.width);\n\t                        state.height = parseInt(style.height);\n\t                        this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n\t                        this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n\t                            return _this.zoom(zoomValue, origin);\n\t                        }, 200);\n\t                        this.$container = $container;\n\t                        this.init($container);\n\t                    }\n\t                    Chart.installWidget = function(Widget) {\n\t                        if (!Widget.widgetName) {\n\t                            Utils_1.Utils.error(\"unnamed widget\");\n\t                        }\n\t                        this.installedWidgets[Widget.widgetName] = Widget;\n\t                    };\n\t                    Chart.prototype.init = function($container) {\n\t                        var state = this.state;\n\t                        var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n\t                        this.scene = new THREE.Scene();\n\t                        this.isStopped = !autoRender.enabled;\n\t                        var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n\t                            antialias: true,\n\t                            alpha: true\n\t                        });\n\t                        renderer.setPixelRatio(Chart.devicePixelRatio);\n\t                        renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n\t                        renderer.setSize(w, h);\n\t                        $container.appendChild(renderer.domElement);\n\t                        this.$el = renderer.domElement;\n\t                        this.$el.style.display = \"block\";\n\t                        if (showStats) {\n\t                            this.stats = new Stats();\n\t                            $container.appendChild(this.stats.domElement);\n\t                        }\n\t                        this.setupCamera();\n\t                        var widgetsClasses = this.state.widgetsClasses;\n\t                        for (var widgetName in widgetsClasses) {\n\t                            var widgetOptions = this.state.data.widgets[widgetName];\n\t                            if (!widgetOptions.enabled) continue;\n\t                            var WidgetConstructor = widgetsClasses[widgetName];\n\t                            var widget = new WidgetConstructor(this.state);\n\t                            this.scene.add(widget.getObject3D());\n\t                            this.widgets.push(widget);\n\t                        }\n\t                        this.bindEvents();\n\t                        this.renderLoop();\n\t                    };\n\t                    Chart.prototype.renderLoop = function() {\n\t                        var _this = this;\n\t                        if (this.isDestroyed) return;\n\t                        this.stats && this.stats.begin();\n\t                        this.render();\n\t                        if (this.isStopped) return;\n\t                        var fpsLimit = this.state.data.autoRender.fps;\n\t                        if (fpsLimit) {\n\t                            var delay = 1e3 / fpsLimit;\n\t                            setTimeout(function() {\n\t                                return requestAnimationFrame(function() {\n\t                                    return _this.renderLoop();\n\t                                });\n\t                            }, delay);\n\t                        } else {\n\t                            requestAnimationFrame(function() {\n\t                                return _this.renderLoop();\n\t                            });\n\t                        }\n\t                        this.stats && this.stats.end();\n\t                    };\n\t                    Chart.prototype.render = function() {\n\t                        this.renderer.render(this.scene, this.camera);\n\t                    };\n\t                    Chart.prototype.stop = function() {\n\t                        this.isStopped = true;\n\t                    };\n\t                    Chart.prototype.run = function() {\n\t                        this.isStopped = false;\n\t                        this.renderLoop();\n\t                    };\n\t                    Chart.prototype.destroy = function() {\n\t                        this.isDestroyed = true;\n\t                        this.stop();\n\t                        this.state.destroy();\n\t                        this.unbindEvents();\n\t                        try {\n\t                            this.renderer.forceContextLoss();\n\t                        } catch (wtf) {}\n\t                        this.renderer.context = null;\n\t                        this.renderer.domElement = null;\n\t                        this.renderer = null;\n\t                    };\n\t                    Chart.prototype.getState = function() {\n\t                        return this.state.data;\n\t                    };\n\t                    Chart.prototype.getTrend = function(trendName) {\n\t                        return this.state.getTrend(trendName);\n\t                    };\n\t                    Chart.prototype.setState = function(state) {\n\t                        return this.state.setState(state);\n\t                    };\n\t                    Chart.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        var $el = this.$el;\n\t                        if (this.state.data.controls.enabled) {\n\t                            $el.addEventListener(\"mousewheel\", function(ev) {\n\t                                _this.onMouseWheel(ev);\n\t                            });\n\t                            $el.addEventListener(\"mousemove\", function(ev) {\n\t                                _this.onMouseMove(ev);\n\t                            });\n\t                            $el.addEventListener(\"mousedown\", function(ev) {\n\t                                return _this.onMouseDown(ev);\n\t                            });\n\t                            $el.addEventListener(\"mouseup\", function(ev) {\n\t                                return _this.onMouseUp(ev);\n\t                            });\n\t                            $el.addEventListener(\"touchmove\", function(ev) {\n\t                                _this.onTouchMove(ev);\n\t                            });\n\t                            $el.addEventListener(\"touchend\", function(ev) {\n\t                                _this.onTouchEnd(ev);\n\t                            });\n\t                        }\n\t                        if (this.state.data.autoResize) {\n\t                            this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n\t                                _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n\t                            });\n\t                        }\n\t                        this.unsubscribers = [ this.state.onTrendsChange(function() {\n\t                            return _this.autoscroll();\n\t                        }), this.state.screen.onTransformationFrame(function(options) {\n\t                            return _this.onScreenTransformHandler(options);\n\t                        }), this.state.onResize(function(options) {\n\t                            return _this.onChartResize();\n\t                        }) ];\n\t                    };\n\t                    Chart.prototype.unbindEvents = function() {\n\t                        try {\n\t                            this.resizeSensor && this.resizeSensor.detach();\n\t                        } catch (e) {}\n\t                        this.$el.remove();\n\t                        this.unsubscribers.forEach(function(unsubscribe) {\n\t                            return unsubscribe();\n\t                        });\n\t                    };\n\t                    Chart.prototype.setupCamera = function() {\n\t                        var camSettings = this.state.screen.getCameraSettings();\n\t                        if (!this.camera) {\n\t                            this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t                            this.scene.add(this.camera);\n\t                        } else {\n\t                            this.camera.fov = camSettings.FOV;\n\t                            this.camera.aspect = camSettings.aspect;\n\t                            this.camera.far = camSettings.far;\n\t                            this.camera.near = camSettings.near;\n\t                            this.camera.updateProjectionMatrix();\n\t                        }\n\t                        this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t                        this.cameraInitialPosition = this.camera.position.clone();\n\t                        this.onScreenTransformHandler(this.state.screen.options);\n\t                    };\n\t                    Chart.prototype.onScreenTransformHandler = function(options) {\n\t                        if (options.scrollX != void 0) {\n\t                            var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n\t                            this.camera.position.setX(scrollX_1);\n\t                        }\n\t                        if (options.scrollY != void 0) {\n\t                            var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n\t                            this.camera.position.setY(scrollY_1);\n\t                        }\n\t                    };\n\t                    Chart.prototype.autoscroll = function() {\n\t                        var state = this.state;\n\t                        if (!state.data.autoScroll) return;\n\t                        var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n\t                        var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n\t                        if (trendsMaxXDelta > 0) {\n\t                            var maxVisibleX = this.state.screen.getScreenRightVal();\n\t                            var paddingRightX = this.state.getPaddingRight();\n\t                            var currentScroll = state.data.xAxis.range.scroll;\n\t                            if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t                                return;\n\t                            }\n\t                            var scrollDelta = trendsMaxXDelta;\n\t                            this.setState({\n\t                                xAxis: {\n\t                                    range: {\n\t                                        scroll: currentScroll + scrollDelta\n\t                                    }\n\t                                }\n\t                            });\n\t                        }\n\t                    };\n\t                    Chart.prototype.onScrollStop = function() {};\n\t                    Chart.prototype.onMouseDown = function(ev) {\n\t                        this.setState({\n\t                            cursor: {\n\t                                dragMode: true,\n\t                                x: ev.clientX,\n\t                                y: ev.clientY\n\t                            }\n\t                        });\n\t                    };\n\t                    Chart.prototype.onMouseUp = function(ev) {\n\t                        this.setState({\n\t                            cursor: {\n\t                                dragMode: false\n\t                            }\n\t                        });\n\t                    };\n\t                    Chart.prototype.onMouseMove = function(ev) {\n\t                        if (this.state.data.cursor.dragMode) {\n\t                            this.setState({\n\t                                cursor: {\n\t                                    dragMode: true,\n\t                                    x: ev.clientX,\n\t                                    y: ev.clientY\n\t                                }\n\t                            });\n\t                        }\n\t                    };\n\t                    Chart.prototype.onMouseWheel = function(ev) {\n\t                        ev.stopPropagation();\n\t                        ev.preventDefault();\n\t                        var zoomOrigin = ev.layerX / this.state.data.width;\n\t                        var zoomValue = 1 + ev.wheelDeltaY * .001;\n\t                        this.zoom(zoomValue, zoomOrigin);\n\t                    };\n\t                    Chart.prototype.onTouchMove = function(ev) {\n\t                        this.setState({\n\t                            cursor: {\n\t                                dragMode: true,\n\t                                x: ev.touches[0].clientX,\n\t                                y: ev.touches[0].clientY\n\t                            }\n\t                        });\n\t                    };\n\t                    Chart.prototype.onTouchEnd = function(ev) {\n\t                        this.setState({\n\t                            cursor: {\n\t                                dragMode: false\n\t                            }\n\t                        });\n\t                    };\n\t                    Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n\t                        this.setState({\n\t                            width: width,\n\t                            height: height\n\t                        });\n\t                    };\n\t                    Chart.prototype.onChartResize = function() {\n\t                        var _a = this.state.data, width = _a.width, height = _a.height;\n\t                        this.renderer.setSize(width, height);\n\t                        this.setupCamera();\n\t                    };\n\t                    Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n\t                        var _this = this;\n\t                        var MAX_ZOOM_VALUE = 1.5;\n\t                        var MIN_ZOOM_VALUE = .7;\n\t                        zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t                        zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t                        var autoScrollIsEnabled = this.state.data.autoScroll;\n\t                        if (autoScrollIsEnabled) this.state.setState({\n\t                            autoScroll: false\n\t                        });\n\t                        this.state.zoom(zoomValue, zoomOrigin).then(function() {\n\t                            if (autoScrollIsEnabled) _this.setState({\n\t                                autoScroll: true\n\t                            });\n\t                        });\n\t                    };\n\t                    Chart.createPreviewChart = function(userOptions, $el) {\n\t                        var previewChartOptions = {\n\t                            animations: {\n\t                                enabled: false\n\t                            },\n\t                            widgets: {\n\t                                Grid: {\n\t                                    enabled: false\n\t                                },\n\t                                Axis: {\n\t                                    enabled: false\n\t                                },\n\t                                TrendsGradient: {\n\t                                    enabled: false\n\t                                }\n\t                            }\n\t                        };\n\t                        var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n\t                        return new Chart(options, $el);\n\t                    };\n\t                    Chart.devicePixelRatio = window.devicePixelRatio;\n\t                    Chart.installedWidgets = {};\n\t                    Chart.renderers = {\n\t                        CanvasRenderer: THREE.CanvasRenderer,\n\t                        WebGLRenderer: THREE.WebGLRenderer\n\t                    };\n\t                    return Chart;\n\t                }();\n\t                exports.Chart = Chart;\n\t                Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n\t                Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n\t                Chart.installWidget(AxisWidget_1.AxisWidget);\n\t                Chart.installWidget(GridWidget_1.GridWidget);\n\t                Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n\t                Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n\t                Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n\t                Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n\t                Chart.installWidget(BorderWidget_1.BorderWidget);\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                window.TweenLite = TweenMax;\n\t                window.Stats = __webpack_require__(4);\n\t                __webpack_require__(5);\n\t                __webpack_require__(6);\n\t                exports.isPlainObject = __webpack_require__(7);\n\t                exports.EE2 = __webpack_require__(9);\n\t                var es6_promise_1 = __webpack_require__(10);\n\t                exports.Promise = es6_promise_1.Promise;\n\t                exports.ResizeSensor = __webpack_require__(11);\n\t            }, function(module, exports) {\n\t                var Stats = function() {\n\t                    function h(a) {\n\t                        c.appendChild(a.dom);\n\t                        return a;\n\t                    }\n\t                    function k(a) {\n\t                        for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n\t                        l = a;\n\t                    }\n\t                    var l = 0, c = document.createElement(\"div\");\n\t                    c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n\t                    c.addEventListener(\"click\", function(a) {\n\t                        a.preventDefault();\n\t                        k(++l % c.children.length);\n\t                    }, !1);\n\t                    var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n\t                    if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n\t                    k(0);\n\t                    return {\n\t                        REVISION: 16,\n\t                        dom: c,\n\t                        addPanel: h,\n\t                        showPanel: k,\n\t                        begin: function() {\n\t                            g = (performance || Date).now();\n\t                        },\n\t                        end: function() {\n\t                            a++;\n\t                            var c = (performance || Date).now();\n\t                            f.update(c - g, 200);\n\t                            if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n\t                                var d = performance.memory;\n\t                                t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n\t                            }\n\t                            return c;\n\t                        },\n\t                        update: function() {\n\t                            g = this.end();\n\t                        },\n\t                        domElement: c,\n\t                        setMode: k\n\t                    };\n\t                };\n\t                Stats.Panel = function(h, k, l) {\n\t                    var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n\t                    q.width = r;\n\t                    q.height = f;\n\t                    q.style.cssText = \"width:80px;height:48px\";\n\t                    var b = q.getContext(\"2d\");\n\t                    b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n\t                    b.textBaseline = \"top\";\n\t                    b.fillStyle = l;\n\t                    b.fillRect(0, 0, r, f);\n\t                    b.fillStyle = k;\n\t                    b.fillText(h, t, u);\n\t                    b.fillRect(d, m, n, p);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = .9;\n\t                    b.fillRect(d, m, n, p);\n\t                    return {\n\t                        dom: q,\n\t                        update: function(f, v) {\n\t                            c = Math.min(c, f);\n\t                            g = Math.max(g, f);\n\t                            b.fillStyle = l;\n\t                            b.globalAlpha = 1;\n\t                            b.fillRect(0, 0, r, m);\n\t                            b.fillStyle = k;\n\t                            b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n\t                            b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n\t                            b.fillRect(d + n - a, m, a, p);\n\t                            b.fillStyle = l;\n\t                            b.globalAlpha = .9;\n\t                            b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n\t                        }\n\t                    };\n\t                };\n\t                \"object\" === typeof module && (module.exports = Stats);\n\t            }, function(module, exports) {\n\t                THREE.SpriteCanvasMaterial = function(parameters) {\n\t                    THREE.Material.call(this);\n\t                    this.type = \"SpriteCanvasMaterial\";\n\t                    this.color = new THREE.Color(16777215);\n\t                    this.program = function(context, color) {};\n\t                    this.setValues(parameters);\n\t                };\n\t                THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n\t                THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t                THREE.SpriteCanvasMaterial.prototype.clone = function() {\n\t                    var material = new THREE.SpriteCanvasMaterial();\n\t                    material.copy(this);\n\t                    material.color.copy(this.color);\n\t                    material.program = this.program;\n\t                    return material;\n\t                };\n\t                THREE.CanvasRenderer = function(parameters) {\n\t                    console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n\t                    parameters = parameters || {};\n\t                    var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n\t                        alpha: parameters.alpha === true\n\t                    }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n\t                    if (_context.setLineDash === undefined) {\n\t                        _context.setLineDash = function() {};\n\t                    }\n\t                    this.domElement = _canvas;\n\t                    this.autoClear = true;\n\t                    this.sortObjects = true;\n\t                    this.sortElements = true;\n\t                    this.info = {\n\t                        render: {\n\t                            vertices: 0,\n\t                            faces: 0\n\t                        }\n\t                    };\n\t                    this.supportsVertexTextures = function() {};\n\t                    this.setFaceCulling = function() {};\n\t                    this.getContext = function() {\n\t                        return _context;\n\t                    };\n\t                    this.getContextAttributes = function() {\n\t                        return _context.getContextAttributes();\n\t                    };\n\t                    this.getPixelRatio = function() {\n\t                        return _pixelRatio;\n\t                    };\n\t                    this.setPixelRatio = function(value) {\n\t                        if (value !== undefined) _pixelRatio = value;\n\t                    };\n\t                    this.setSize = function(width, height, updateStyle) {\n\t                        _canvasWidth = width * _pixelRatio;\n\t                        _canvasHeight = height * _pixelRatio;\n\t                        _canvas.width = _canvasWidth;\n\t                        _canvas.height = _canvasHeight;\n\t                        _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n\t                        _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n\t                        if (updateStyle !== false) {\n\t                            _canvas.style.width = width + \"px\";\n\t                            _canvas.style.height = height + \"px\";\n\t                        }\n\t                        _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                        _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                        _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                        _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                        _contextGlobalAlpha = 1;\n\t                        _contextGlobalCompositeOperation = 0;\n\t                        _contextStrokeStyle = null;\n\t                        _contextFillStyle = null;\n\t                        _contextLineWidth = null;\n\t                        _contextLineCap = null;\n\t                        _contextLineJoin = null;\n\t                        this.setViewport(0, 0, width, height);\n\t                    };\n\t                    this.setViewport = function(x, y, width, height) {\n\t                        _viewportX = x * _pixelRatio;\n\t                        _viewportY = y * _pixelRatio;\n\t                        _viewportWidth = width * _pixelRatio;\n\t                        _viewportHeight = height * _pixelRatio;\n\t                    };\n\t                    this.setScissor = function() {};\n\t                    this.setScissorTest = function() {};\n\t                    this.setClearColor = function(color, alpha) {\n\t                        _clearColor.set(color);\n\t                        _clearAlpha = alpha !== undefined ? alpha : 1;\n\t                        _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                        _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                    };\n\t                    this.setClearColorHex = function(hex, alpha) {\n\t                        console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n\t                        this.setClearColor(hex, alpha);\n\t                    };\n\t                    this.getClearColor = function() {\n\t                        return _clearColor;\n\t                    };\n\t                    this.getClearAlpha = function() {\n\t                        return _clearAlpha;\n\t                    };\n\t                    this.getMaxAnisotropy = function() {\n\t                        return 0;\n\t                    };\n\t                    this.clear = function() {\n\t                        if (_clearBox.isEmpty() === false) {\n\t                            _clearBox.intersect(_clipBox);\n\t                            _clearBox.expandByScalar(2);\n\t                            _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t                            _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n\t                            _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t                            _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n\t                            if (_clearAlpha < 1) {\n\t                                _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                            }\n\t                            if (_clearAlpha > 0) {\n\t                                setBlending(THREE.NormalBlending);\n\t                                setOpacity(1);\n\t                                setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n\t                                _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                            }\n\t                            _clearBox.makeEmpty();\n\t                        }\n\t                    };\n\t                    this.clearColor = function() {};\n\t                    this.clearDepth = function() {};\n\t                    this.clearStencil = function() {};\n\t                    this.render = function(scene, camera) {\n\t                        if (camera instanceof THREE.Camera === false) {\n\t                            console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n\t                            return;\n\t                        }\n\t                        if (this.autoClear === true) this.clear();\n\t                        _this.info.render.vertices = 0;\n\t                        _this.info.render.faces = 0;\n\t                        _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n\t                        _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n\t                        _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n\t                        _elements = _renderData.elements;\n\t                        _lights = _renderData.lights;\n\t                        _camera = camera;\n\t                        _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\t                        calculateLights();\n\t                        for (var e = 0, el = _elements.length; e < el; e++) {\n\t                            var element = _elements[e];\n\t                            var material = element.material;\n\t                            if (material === undefined || material.opacity === 0) continue;\n\t                            _elemBox.makeEmpty();\n\t                            if (element instanceof THREE.RenderableSprite) {\n\t                                _v1 = element;\n\t                                _v1.x *= _canvasWidthHalf;\n\t                                _v1.y *= _canvasHeightHalf;\n\t                                renderSprite(_v1, element, material);\n\t                            } else if (element instanceof THREE.RenderableLine) {\n\t                                _v1 = element.v1;\n\t                                _v2 = element.v2;\n\t                                _v1.positionScreen.x *= _canvasWidthHalf;\n\t                                _v1.positionScreen.y *= _canvasHeightHalf;\n\t                                _v2.positionScreen.x *= _canvasWidthHalf;\n\t                                _v2.positionScreen.y *= _canvasHeightHalf;\n\t                                _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n\t                                if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                                    renderLine(_v1, _v2, element, material);\n\t                                }\n\t                            } else if (element instanceof THREE.RenderableFace) {\n\t                                _v1 = element.v1;\n\t                                _v2 = element.v2;\n\t                                _v3 = element.v3;\n\t                                if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n\t                                if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n\t                                if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n\t                                _v1.positionScreen.x *= _canvasWidthHalf;\n\t                                _v1.positionScreen.y *= _canvasHeightHalf;\n\t                                _v2.positionScreen.x *= _canvasWidthHalf;\n\t                                _v2.positionScreen.y *= _canvasHeightHalf;\n\t                                _v3.positionScreen.x *= _canvasWidthHalf;\n\t                                _v3.positionScreen.y *= _canvasHeightHalf;\n\t                                if (material.overdraw > 0) {\n\t                                    expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n\t                                    expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n\t                                    expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n\t                                }\n\t                                _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n\t                                if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                                    renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n\t                                }\n\t                            }\n\t                            _clearBox.union(_elemBox);\n\t                        }\n\t                        _context.setTransform(1, 0, 0, 1, 0, 0);\n\t                    };\n\t                    function calculateLights() {\n\t                        _ambientLight.setRGB(0, 0, 0);\n\t                        _directionalLights.setRGB(0, 0, 0);\n\t                        _pointLights.setRGB(0, 0, 0);\n\t                        for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                            var light = _lights[l];\n\t                            var lightColor = light.color;\n\t                            if (light instanceof THREE.AmbientLight) {\n\t                                _ambientLight.add(lightColor);\n\t                            } else if (light instanceof THREE.DirectionalLight) {\n\t                                _directionalLights.add(lightColor);\n\t                            } else if (light instanceof THREE.PointLight) {\n\t                                _pointLights.add(lightColor);\n\t                            }\n\t                        }\n\t                    }\n\t                    function calculateLight(position, normal, color) {\n\t                        for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                            var light = _lights[l];\n\t                            _lightColor.copy(light.color);\n\t                            if (light instanceof THREE.DirectionalLight) {\n\t                                var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\t                                var amount = normal.dot(lightPosition);\n\t                                if (amount <= 0) continue;\n\t                                amount *= light.intensity;\n\t                                color.add(_lightColor.multiplyScalar(amount));\n\t                            } else if (light instanceof THREE.PointLight) {\n\t                                var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\t                                var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n\t                                if (amount <= 0) continue;\n\t                                amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n\t                                if (amount == 0) continue;\n\t                                amount *= light.intensity;\n\t                                color.add(_lightColor.multiplyScalar(amount));\n\t                            }\n\t                        }\n\t                    }\n\t                    function renderSprite(v1, element, material) {\n\t                        setOpacity(material.opacity);\n\t                        setBlending(material.blending);\n\t                        var scaleX = element.scale.x * _canvasWidthHalf;\n\t                        var scaleY = element.scale.y * _canvasHeightHalf;\n\t                        var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n\t                        _elemBox.min.set(v1.x - dist, v1.y - dist);\n\t                        _elemBox.max.set(v1.x + dist, v1.y + dist);\n\t                        if (material instanceof THREE.SpriteMaterial) {\n\t                            var texture = material.map;\n\t                            if (texture !== null) {\n\t                                var pattern = _patterns[texture.id];\n\t                                if (pattern === undefined || pattern.version !== texture.version) {\n\t                                    pattern = textureToPattern(texture);\n\t                                    _patterns[texture.id] = pattern;\n\t                                }\n\t                                if (pattern.canvas !== undefined) {\n\t                                    setFillStyle(pattern.canvas);\n\t                                    var bitmap = texture.image;\n\t                                    var ox = bitmap.width * texture.offset.x;\n\t                                    var oy = bitmap.height * texture.offset.y;\n\t                                    var sx = bitmap.width * texture.repeat.x;\n\t                                    var sy = bitmap.height * texture.repeat.y;\n\t                                    var cx = scaleX / sx;\n\t                                    var cy = scaleY / sy;\n\t                                    _context.save();\n\t                                    _context.translate(v1.x, v1.y);\n\t                                    if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                                    _context.translate(-scaleX / 2, -scaleY / 2);\n\t                                    _context.scale(cx, cy);\n\t                                    _context.translate(-ox, -oy);\n\t                                    _context.fillRect(ox, oy, sx, sy);\n\t                                    _context.restore();\n\t                                }\n\t                            } else {\n\t                                setFillStyle(material.color.getStyle());\n\t                                _context.save();\n\t                                _context.translate(v1.x, v1.y);\n\t                                if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                                _context.scale(scaleX, -scaleY);\n\t                                _context.fillRect(-.5, -.5, 1, 1);\n\t                                _context.restore();\n\t                            }\n\t                        } else if (material instanceof THREE.SpriteCanvasMaterial) {\n\t                            setStrokeStyle(material.color.getStyle());\n\t                            setFillStyle(material.color.getStyle());\n\t                            _context.save();\n\t                            _context.translate(v1.x, v1.y);\n\t                            if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                            _context.scale(scaleX, scaleY);\n\t                            material.program(_context);\n\t                            _context.restore();\n\t                        }\n\t                    }\n\t                    function renderLine(v1, v2, element, material) {\n\t                        setOpacity(material.opacity);\n\t                        setBlending(material.blending);\n\t                        _context.beginPath();\n\t                        _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n\t                        _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n\t                        if (material instanceof THREE.LineBasicMaterial) {\n\t                            setLineWidth(material.linewidth);\n\t                            setLineCap(material.linecap);\n\t                            setLineJoin(material.linejoin);\n\t                            if (material.vertexColors !== THREE.VertexColors) {\n\t                                setStrokeStyle(material.color.getStyle());\n\t                            } else {\n\t                                var colorStyle1 = element.vertexColors[0].getStyle();\n\t                                var colorStyle2 = element.vertexColors[1].getStyle();\n\t                                if (colorStyle1 === colorStyle2) {\n\t                                    setStrokeStyle(colorStyle1);\n\t                                } else {\n\t                                    try {\n\t                                        var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n\t                                        grad.addColorStop(0, colorStyle1);\n\t                                        grad.addColorStop(1, colorStyle2);\n\t                                    } catch (exception) {\n\t                                        grad = colorStyle1;\n\t                                    }\n\t                                    setStrokeStyle(grad);\n\t                                }\n\t                            }\n\t                            _context.stroke();\n\t                            _elemBox.expandByScalar(material.linewidth * 2);\n\t                        } else if (material instanceof THREE.LineDashedMaterial) {\n\t                            setLineWidth(material.linewidth);\n\t                            setLineCap(material.linecap);\n\t                            setLineJoin(material.linejoin);\n\t                            setStrokeStyle(material.color.getStyle());\n\t                            setLineDash([ material.dashSize, material.gapSize ]);\n\t                            _context.stroke();\n\t                            _elemBox.expandByScalar(material.linewidth * 2);\n\t                            setLineDash([]);\n\t                        }\n\t                    }\n\t                    function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n\t                        _this.info.render.vertices += 3;\n\t                        _this.info.render.faces++;\n\t                        setOpacity(material.opacity);\n\t                        setBlending(material.blending);\n\t                        _v1x = v1.positionScreen.x;\n\t                        _v1y = v1.positionScreen.y;\n\t                        _v2x = v2.positionScreen.x;\n\t                        _v2y = v2.positionScreen.y;\n\t                        _v3x = v3.positionScreen.x;\n\t                        _v3y = v3.positionScreen.y;\n\t                        drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n\t                        if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n\t                            _diffuseColor.copy(material.color);\n\t                            _emissiveColor.copy(material.emissive);\n\t                            if (material.vertexColors === THREE.FaceColors) {\n\t                                _diffuseColor.multiply(element.color);\n\t                            }\n\t                            _color.copy(_ambientLight);\n\t                            _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\t                            calculateLight(_centroid, element.normalModel, _color);\n\t                            _color.multiply(_diffuseColor).add(_emissiveColor);\n\t                            material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                        } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n\t                            if (material.map !== null) {\n\t                                var mapping = material.map.mapping;\n\t                                if (mapping === THREE.UVMapping) {\n\t                                    _uvs = element.uvs;\n\t                                    patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n\t                                }\n\t                            } else if (material.envMap !== null) {\n\t                                if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n\t                                    _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n\t                                    _uv1x = .5 * _normal.x + .5;\n\t                                    _uv1y = .5 * _normal.y + .5;\n\t                                    _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n\t                                    _uv2x = .5 * _normal.x + .5;\n\t                                    _uv2y = .5 * _normal.y + .5;\n\t                                    _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n\t                                    _uv3x = .5 * _normal.x + .5;\n\t                                    _uv3y = .5 * _normal.y + .5;\n\t                                    patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n\t                                }\n\t                            } else {\n\t                                _color.copy(material.color);\n\t                                if (material.vertexColors === THREE.FaceColors) {\n\t                                    _color.multiply(element.color);\n\t                                }\n\t                                material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                            }\n\t                        } else if (material instanceof THREE.MeshNormalMaterial) {\n\t                            _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n\t                            _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n\t                            material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                        } else {\n\t                            _color.setRGB(1, 1, 1);\n\t                            material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                        }\n\t                    }\n\t                    function drawTriangle(x0, y0, x1, y1, x2, y2) {\n\t                        _context.beginPath();\n\t                        _context.moveTo(x0, y0);\n\t                        _context.lineTo(x1, y1);\n\t                        _context.lineTo(x2, y2);\n\t                        _context.closePath();\n\t                    }\n\t                    function strokePath(color, linewidth, linecap, linejoin) {\n\t                        setLineWidth(linewidth);\n\t                        setLineCap(linecap);\n\t                        setLineJoin(linejoin);\n\t                        setStrokeStyle(color.getStyle());\n\t                        _context.stroke();\n\t                        _elemBox.expandByScalar(linewidth * 2);\n\t                    }\n\t                    function fillPath(color) {\n\t                        setFillStyle(color.getStyle());\n\t                        _context.fill();\n\t                    }\n\t                    function textureToPattern(texture) {\n\t                        if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n\t                            return {\n\t                                canvas: undefined,\n\t                                version: texture.version\n\t                            };\n\t                        }\n\t                        var image = texture.image;\n\t                        if (image.complete === false) {\n\t                            return {\n\t                                canvas: undefined,\n\t                                version: 0\n\t                            };\n\t                        }\n\t                        var canvas = document.createElement(\"canvas\");\n\t                        canvas.width = image.width;\n\t                        canvas.height = image.height;\n\t                        var context = canvas.getContext(\"2d\");\n\t                        context.setTransform(1, 0, 0, -1, 0, image.height);\n\t                        context.drawImage(image, 0, 0);\n\t                        var repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t                        var repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t                        var repeat = \"no-repeat\";\n\t                        if (repeatX === true && repeatY === true) {\n\t                            repeat = \"repeat\";\n\t                        } else if (repeatX === true) {\n\t                            repeat = \"repeat-x\";\n\t                        } else if (repeatY === true) {\n\t                            repeat = \"repeat-y\";\n\t                        }\n\t                        var pattern = _context.createPattern(canvas, repeat);\n\t                        if (texture.onUpdate) texture.onUpdate(texture);\n\t                        return {\n\t                            canvas: pattern,\n\t                            version: texture.version\n\t                        };\n\t                    }\n\t                    function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n\t                        var pattern = _patterns[texture.id];\n\t                        if (pattern === undefined || pattern.version !== texture.version) {\n\t                            pattern = textureToPattern(texture);\n\t                            _patterns[texture.id] = pattern;\n\t                        }\n\t                        if (pattern.canvas !== undefined) {\n\t                            setFillStyle(pattern.canvas);\n\t                        } else {\n\t                            setFillStyle(\"rgba( 0, 0, 0, 1)\");\n\t                            _context.fill();\n\t                            return;\n\t                        }\n\t                        var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n\t                        u0 = (u0 + offsetX) * width;\n\t                        v0 = (v0 + offsetY) * height;\n\t                        u1 = (u1 + offsetX) * width;\n\t                        v1 = (v1 + offsetY) * height;\n\t                        u2 = (u2 + offsetX) * width;\n\t                        v2 = (v2 + offsetY) * height;\n\t                        x1 -= x0;\n\t                        y1 -= y0;\n\t                        x2 -= x0;\n\t                        y2 -= y0;\n\t                        u1 -= u0;\n\t                        v1 -= v0;\n\t                        u2 -= u0;\n\t                        v2 -= v0;\n\t                        det = u1 * v2 - u2 * v1;\n\t                        if (det === 0) return;\n\t                        idet = 1 / det;\n\t                        a = (v2 * x1 - v1 * x2) * idet;\n\t                        b = (v2 * y1 - v1 * y2) * idet;\n\t                        c = (u1 * x2 - u2 * x1) * idet;\n\t                        d = (u1 * y2 - u2 * y1) * idet;\n\t                        e = x0 - a * u0 - c * v0;\n\t                        f = y0 - b * u0 - d * v0;\n\t                        _context.save();\n\t                        _context.transform(a, b, c, d, e, f);\n\t                        _context.fill();\n\t                        _context.restore();\n\t                    }\n\t                    function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n\t                        var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n\t                        u0 *= width;\n\t                        v0 *= height;\n\t                        u1 *= width;\n\t                        v1 *= height;\n\t                        u2 *= width;\n\t                        v2 *= height;\n\t                        x1 -= x0;\n\t                        y1 -= y0;\n\t                        x2 -= x0;\n\t                        y2 -= y0;\n\t                        u1 -= u0;\n\t                        v1 -= v0;\n\t                        u2 -= u0;\n\t                        v2 -= v0;\n\t                        det = u1 * v2 - u2 * v1;\n\t                        idet = 1 / det;\n\t                        a = (v2 * x1 - v1 * x2) * idet;\n\t                        b = (v2 * y1 - v1 * y2) * idet;\n\t                        c = (u1 * x2 - u2 * x1) * idet;\n\t                        d = (u1 * y2 - u2 * y1) * idet;\n\t                        e = x0 - a * u0 - c * v0;\n\t                        f = y0 - b * u0 - d * v0;\n\t                        _context.save();\n\t                        _context.transform(a, b, c, d, e, f);\n\t                        _context.clip();\n\t                        _context.drawImage(image, 0, 0);\n\t                        _context.restore();\n\t                    }\n\t                    function expand(v1, v2, pixels) {\n\t                        var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n\t                        if (det === 0) return;\n\t                        idet = pixels / Math.sqrt(det);\n\t                        x *= idet;\n\t                        y *= idet;\n\t                        v2.x += x;\n\t                        v2.y += y;\n\t                        v1.x -= x;\n\t                        v1.y -= y;\n\t                    }\n\t                    function setOpacity(value) {\n\t                        if (_contextGlobalAlpha !== value) {\n\t                            _context.globalAlpha = value;\n\t                            _contextGlobalAlpha = value;\n\t                        }\n\t                    }\n\t                    function setBlending(value) {\n\t                        if (_contextGlobalCompositeOperation !== value) {\n\t                            if (value === THREE.NormalBlending) {\n\t                                _context.globalCompositeOperation = \"source-over\";\n\t                            } else if (value === THREE.AdditiveBlending) {\n\t                                _context.globalCompositeOperation = \"lighter\";\n\t                            } else if (value === THREE.SubtractiveBlending) {\n\t                                _context.globalCompositeOperation = \"darker\";\n\t                            }\n\t                            _contextGlobalCompositeOperation = value;\n\t                        }\n\t                    }\n\t                    function setLineWidth(value) {\n\t                        if (_contextLineWidth !== value) {\n\t                            _context.lineWidth = value;\n\t                            _contextLineWidth = value;\n\t                        }\n\t                    }\n\t                    function setLineCap(value) {\n\t                        if (_contextLineCap !== value) {\n\t                            _context.lineCap = value;\n\t                            _contextLineCap = value;\n\t                        }\n\t                    }\n\t                    function setLineJoin(value) {\n\t                        if (_contextLineJoin !== value) {\n\t                            _context.lineJoin = value;\n\t                            _contextLineJoin = value;\n\t                        }\n\t                    }\n\t                    function setStrokeStyle(value) {\n\t                        if (_contextStrokeStyle !== value) {\n\t                            _context.strokeStyle = value;\n\t                            _contextStrokeStyle = value;\n\t                        }\n\t                    }\n\t                    function setFillStyle(value) {\n\t                        if (_contextFillStyle !== value) {\n\t                            _context.fillStyle = value;\n\t                            _contextFillStyle = value;\n\t                        }\n\t                    }\n\t                    function setLineDash(value) {\n\t                        if (_contextLineDash.length !== value.length) {\n\t                            _context.setLineDash(value);\n\t                            _contextLineDash = value;\n\t                        }\n\t                    }\n\t                };\n\t            }, function(module, exports) {\n\t                THREE.RenderableObject = function() {\n\t                    this.id = 0;\n\t                    this.object = null;\n\t                    this.z = 0;\n\t                    this.renderOrder = 0;\n\t                };\n\t                THREE.RenderableFace = function() {\n\t                    this.id = 0;\n\t                    this.v1 = new THREE.RenderableVertex();\n\t                    this.v2 = new THREE.RenderableVertex();\n\t                    this.v3 = new THREE.RenderableVertex();\n\t                    this.normalModel = new THREE.Vector3();\n\t                    this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t                    this.vertexNormalsLength = 0;\n\t                    this.color = new THREE.Color();\n\t                    this.material = null;\n\t                    this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t                    this.z = 0;\n\t                    this.renderOrder = 0;\n\t                };\n\t                THREE.RenderableVertex = function() {\n\t                    this.position = new THREE.Vector3();\n\t                    this.positionWorld = new THREE.Vector3();\n\t                    this.positionScreen = new THREE.Vector4();\n\t                    this.visible = true;\n\t                };\n\t                THREE.RenderableVertex.prototype.copy = function(vertex) {\n\t                    this.positionWorld.copy(vertex.positionWorld);\n\t                    this.positionScreen.copy(vertex.positionScreen);\n\t                };\n\t                THREE.RenderableLine = function() {\n\t                    this.id = 0;\n\t                    this.v1 = new THREE.RenderableVertex();\n\t                    this.v2 = new THREE.RenderableVertex();\n\t                    this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t                    this.material = null;\n\t                    this.z = 0;\n\t                    this.renderOrder = 0;\n\t                };\n\t                THREE.RenderableSprite = function() {\n\t                    this.id = 0;\n\t                    this.object = null;\n\t                    this.x = 0;\n\t                    this.y = 0;\n\t                    this.z = 0;\n\t                    this.rotation = 0;\n\t                    this.scale = new THREE.Vector2();\n\t                    this.material = null;\n\t                    this.renderOrder = 0;\n\t                };\n\t                THREE.Projector = function() {\n\t                    var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n\t                        objects: [],\n\t                        lights: [],\n\t                        elements: []\n\t                    }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n\t                    this.projectVector = function(vector, camera) {\n\t                        console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n\t                        vector.project(camera);\n\t                    };\n\t                    this.unprojectVector = function(vector, camera) {\n\t                        console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n\t                        vector.unproject(camera);\n\t                    };\n\t                    this.pickingRay = function(vector, camera) {\n\t                        console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n\t                    };\n\t                    var RenderList = function() {\n\t                        var normals = [];\n\t                        var uvs = [];\n\t                        var object = null;\n\t                        var material = null;\n\t                        var normalMatrix = new THREE.Matrix3();\n\t                        function setObject(value) {\n\t                            object = value;\n\t                            material = object.material;\n\t                            normalMatrix.getNormalMatrix(object.matrixWorld);\n\t                            normals.length = 0;\n\t                            uvs.length = 0;\n\t                        }\n\t                        function projectVertex(vertex) {\n\t                            var position = vertex.position;\n\t                            var positionWorld = vertex.positionWorld;\n\t                            var positionScreen = vertex.positionScreen;\n\t                            positionWorld.copy(position).applyMatrix4(_modelMatrix);\n\t                            positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n\t                            var invW = 1 / positionScreen.w;\n\t                            positionScreen.x *= invW;\n\t                            positionScreen.y *= invW;\n\t                            positionScreen.z *= invW;\n\t                            vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n\t                        }\n\t                        function pushVertex(x, y, z) {\n\t                            _vertex = getNextVertexInPool();\n\t                            _vertex.position.set(x, y, z);\n\t                            projectVertex(_vertex);\n\t                        }\n\t                        function pushNormal(x, y, z) {\n\t                            normals.push(x, y, z);\n\t                        }\n\t                        function pushUv(x, y) {\n\t                            uvs.push(x, y);\n\t                        }\n\t                        function checkTriangleVisibility(v1, v2, v3) {\n\t                            if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n\t                            _points3[0] = v1.positionScreen;\n\t                            _points3[1] = v2.positionScreen;\n\t                            _points3[2] = v3.positionScreen;\n\t                            return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n\t                        }\n\t                        function checkBackfaceCulling(v1, v2, v3) {\n\t                            return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n\t                        }\n\t                        function pushLine(a, b) {\n\t                            var v1 = _vertexPool[a];\n\t                            var v2 = _vertexPool[b];\n\t                            _line = getNextLineInPool();\n\t                            _line.id = object.id;\n\t                            _line.v1.copy(v1);\n\t                            _line.v2.copy(v2);\n\t                            _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n\t                            _line.renderOrder = object.renderOrder;\n\t                            _line.material = object.material;\n\t                            _renderData.elements.push(_line);\n\t                        }\n\t                        function pushTriangle(a, b, c) {\n\t                            var v1 = _vertexPool[a];\n\t                            var v2 = _vertexPool[b];\n\t                            var v3 = _vertexPool[c];\n\t                            if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\t                            if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n\t                                _face = getNextFaceInPool();\n\t                                _face.id = object.id;\n\t                                _face.v1.copy(v1);\n\t                                _face.v2.copy(v2);\n\t                                _face.v3.copy(v3);\n\t                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                                _face.renderOrder = object.renderOrder;\n\t                                _face.normalModel.fromArray(normals, a * 3);\n\t                                _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\t                                for (var i = 0; i < 3; i++) {\n\t                                    var normal = _face.vertexNormalsModel[i];\n\t                                    normal.fromArray(normals, arguments[i] * 3);\n\t                                    normal.applyMatrix3(normalMatrix).normalize();\n\t                                    var uv = _face.uvs[i];\n\t                                    uv.fromArray(uvs, arguments[i] * 2);\n\t                                }\n\t                                _face.vertexNormalsLength = 3;\n\t                                _face.material = object.material;\n\t                                _renderData.elements.push(_face);\n\t                            }\n\t                        }\n\t                        return {\n\t                            setObject: setObject,\n\t                            projectVertex: projectVertex,\n\t                            checkTriangleVisibility: checkTriangleVisibility,\n\t                            checkBackfaceCulling: checkBackfaceCulling,\n\t                            pushVertex: pushVertex,\n\t                            pushNormal: pushNormal,\n\t                            pushUv: pushUv,\n\t                            pushLine: pushLine,\n\t                            pushTriangle: pushTriangle\n\t                        };\n\t                    };\n\t                    var renderList = new RenderList();\n\t                    this.projectScene = function(scene, camera, sortObjects, sortElements) {\n\t                        _faceCount = 0;\n\t                        _lineCount = 0;\n\t                        _spriteCount = 0;\n\t                        _renderData.elements.length = 0;\n\t                        if (scene.autoUpdate === true) scene.updateMatrixWorld();\n\t                        if (camera.parent === null) camera.updateMatrixWorld();\n\t                        _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\t                        _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\t                        _frustum.setFromMatrix(_viewProjectionMatrix);\n\t                        _objectCount = 0;\n\t                        _renderData.objects.length = 0;\n\t                        _renderData.lights.length = 0;\n\t                        scene.traverseVisible(function(object) {\n\t                            if (object instanceof THREE.Light) {\n\t                                _renderData.lights.push(object);\n\t                            } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n\t                                var material = object.material;\n\t                                if (material.visible === false) return;\n\t                                if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n\t                                    _object = getNextObjectInPool();\n\t                                    _object.id = object.id;\n\t                                    _object.object = object;\n\t                                    _vector3.setFromMatrixPosition(object.matrixWorld);\n\t                                    _vector3.applyProjection(_viewProjectionMatrix);\n\t                                    _object.z = _vector3.z;\n\t                                    _object.renderOrder = object.renderOrder;\n\t                                    _renderData.objects.push(_object);\n\t                                }\n\t                            }\n\t                        });\n\t                        if (sortObjects === true) {\n\t                            _renderData.objects.sort(painterSort);\n\t                        }\n\t                        for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n\t                            var object = _renderData.objects[o].object;\n\t                            var geometry = object.geometry;\n\t                            renderList.setObject(object);\n\t                            _modelMatrix = object.matrixWorld;\n\t                            _vertexCount = 0;\n\t                            if (object instanceof THREE.Mesh) {\n\t                                if (geometry instanceof THREE.BufferGeometry) {\n\t                                    var attributes = geometry.attributes;\n\t                                    var groups = geometry.groups;\n\t                                    if (attributes.position === undefined) continue;\n\t                                    var positions = attributes.position.array;\n\t                                    for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                        renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                                    }\n\t                                    if (attributes.normal !== undefined) {\n\t                                        var normals = attributes.normal.array;\n\t                                        for (var i = 0, l = normals.length; i < l; i += 3) {\n\t                                            renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n\t                                        }\n\t                                    }\n\t                                    if (attributes.uv !== undefined) {\n\t                                        var uvs = attributes.uv.array;\n\t                                        for (var i = 0, l = uvs.length; i < l; i += 2) {\n\t                                            renderList.pushUv(uvs[i], uvs[i + 1]);\n\t                                        }\n\t                                    }\n\t                                    if (geometry.index !== null) {\n\t                                        var indices = geometry.index.array;\n\t                                        if (groups.length > 0) {\n\t                                            for (var o = 0; o < groups.length; o++) {\n\t                                                var group = groups[o];\n\t                                                for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n\t                                                    renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                                }\n\t                                            }\n\t                                        } else {\n\t                                            for (var i = 0, l = indices.length; i < l; i += 3) {\n\t                                                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                            }\n\t                                        }\n\t                                    } else {\n\t                                        for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n\t                                            renderList.pushTriangle(i, i + 1, i + 2);\n\t                                        }\n\t                                    }\n\t                                } else if (geometry instanceof THREE.Geometry) {\n\t                                    var vertices = geometry.vertices;\n\t                                    var faces = geometry.faces;\n\t                                    var faceVertexUvs = geometry.faceVertexUvs[0];\n\t                                    _normalMatrix.getNormalMatrix(_modelMatrix);\n\t                                    var material = object.material;\n\t                                    var isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t                                    var objectMaterials = isFaceMaterial === true ? object.material : null;\n\t                                    for (var v = 0, vl = vertices.length; v < vl; v++) {\n\t                                        var vertex = vertices[v];\n\t                                        _vector3.copy(vertex);\n\t                                        if (material.morphTargets === true) {\n\t                                            var morphTargets = geometry.morphTargets;\n\t                                            var morphInfluences = object.morphTargetInfluences;\n\t                                            for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n\t                                                var influence = morphInfluences[t];\n\t                                                if (influence === 0) continue;\n\t                                                var target = morphTargets[t];\n\t                                                var targetVertex = target.vertices[v];\n\t                                                _vector3.x += (targetVertex.x - vertex.x) * influence;\n\t                                                _vector3.y += (targetVertex.y - vertex.y) * influence;\n\t                                                _vector3.z += (targetVertex.z - vertex.z) * influence;\n\t                                            }\n\t                                        }\n\t                                        renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n\t                                    }\n\t                                    for (var f = 0, fl = faces.length; f < fl; f++) {\n\t                                        var face = faces[f];\n\t                                        material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n\t                                        if (material === undefined) continue;\n\t                                        var side = material.side;\n\t                                        var v1 = _vertexPool[face.a];\n\t                                        var v2 = _vertexPool[face.b];\n\t                                        var v3 = _vertexPool[face.c];\n\t                                        if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n\t                                        var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\t                                        if (side !== THREE.DoubleSide) {\n\t                                            if (side === THREE.FrontSide && visible === false) continue;\n\t                                            if (side === THREE.BackSide && visible === true) continue;\n\t                                        }\n\t                                        _face = getNextFaceInPool();\n\t                                        _face.id = object.id;\n\t                                        _face.v1.copy(v1);\n\t                                        _face.v2.copy(v2);\n\t                                        _face.v3.copy(v3);\n\t                                        _face.normalModel.copy(face.normal);\n\t                                        if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                            _face.normalModel.negate();\n\t                                        }\n\t                                        _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                        var faceVertexNormals = face.vertexNormals;\n\t                                        for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n\t                                            var normalModel = _face.vertexNormalsModel[n];\n\t                                            normalModel.copy(faceVertexNormals[n]);\n\t                                            if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                                normalModel.negate();\n\t                                            }\n\t                                            normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                        }\n\t                                        _face.vertexNormalsLength = faceVertexNormals.length;\n\t                                        var vertexUvs = faceVertexUvs[f];\n\t                                        if (vertexUvs !== undefined) {\n\t                                            for (var u = 0; u < 3; u++) {\n\t                                                _face.uvs[u].copy(vertexUvs[u]);\n\t                                            }\n\t                                        }\n\t                                        _face.color = face.color;\n\t                                        _face.material = material;\n\t                                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                                        _face.renderOrder = object.renderOrder;\n\t                                        _renderData.elements.push(_face);\n\t                                    }\n\t                                }\n\t                            } else if (object instanceof THREE.Line) {\n\t                                if (geometry instanceof THREE.BufferGeometry) {\n\t                                    var attributes = geometry.attributes;\n\t                                    if (attributes.position !== undefined) {\n\t                                        var positions = attributes.position.array;\n\t                                        for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                            renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                                        }\n\t                                        if (geometry.index !== null) {\n\t                                            var indices = geometry.index.array;\n\t                                            for (var i = 0, l = indices.length; i < l; i += 2) {\n\t                                                renderList.pushLine(indices[i], indices[i + 1]);\n\t                                            }\n\t                                        } else {\n\t                                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                                            for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n\t                                                renderList.pushLine(i, i + 1);\n\t                                            }\n\t                                        }\n\t                                    }\n\t                                } else if (geometry instanceof THREE.Geometry) {\n\t                                    _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\t                                    var vertices = object.geometry.vertices;\n\t                                    if (vertices.length === 0) continue;\n\t                                    v1 = getNextVertexInPool();\n\t                                    v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n\t                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                                    for (var v = 1, vl = vertices.length; v < vl; v++) {\n\t                                        v1 = getNextVertexInPool();\n\t                                        v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n\t                                        if ((v + 1) % step > 0) continue;\n\t                                        v2 = _vertexPool[_vertexCount - 2];\n\t                                        _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\t                                        _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\t                                        if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n\t                                            _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\t                                            _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\t                                            _line = getNextLineInPool();\n\t                                            _line.id = object.id;\n\t                                            _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\t                                            _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\t                                            _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n\t                                            _line.renderOrder = object.renderOrder;\n\t                                            _line.material = object.material;\n\t                                            if (object.material.vertexColors === THREE.VertexColors) {\n\t                                                _line.vertexColors[0].copy(object.geometry.colors[v]);\n\t                                                _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n\t                                            }\n\t                                            _renderData.elements.push(_line);\n\t                                        }\n\t                                    }\n\t                                }\n\t                            } else if (object instanceof THREE.Sprite) {\n\t                                _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\t                                _vector4.applyMatrix4(_viewProjectionMatrix);\n\t                                var invW = 1 / _vector4.w;\n\t                                _vector4.z *= invW;\n\t                                if (_vector4.z >= -1 && _vector4.z <= 1) {\n\t                                    _sprite = getNextSpriteInPool();\n\t                                    _sprite.id = object.id;\n\t                                    _sprite.x = _vector4.x * invW;\n\t                                    _sprite.y = _vector4.y * invW;\n\t                                    _sprite.z = _vector4.z;\n\t                                    _sprite.renderOrder = object.renderOrder;\n\t                                    _sprite.object = object;\n\t                                    _sprite.rotation = object.rotation;\n\t                                    _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n\t                                    _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n\t                                    _sprite.material = object.material;\n\t                                    _renderData.elements.push(_sprite);\n\t                                }\n\t                            }\n\t                        }\n\t                        if (sortElements === true) {\n\t                            _renderData.elements.sort(painterSort);\n\t                        }\n\t                        return _renderData;\n\t                    };\n\t                    function getNextObjectInPool() {\n\t                        if (_objectCount === _objectPoolLength) {\n\t                            var object = new THREE.RenderableObject();\n\t                            _objectPool.push(object);\n\t                            _objectPoolLength++;\n\t                            _objectCount++;\n\t                            return object;\n\t                        }\n\t                        return _objectPool[_objectCount++];\n\t                    }\n\t                    function getNextVertexInPool() {\n\t                        if (_vertexCount === _vertexPoolLength) {\n\t                            var vertex = new THREE.RenderableVertex();\n\t                            _vertexPool.push(vertex);\n\t                            _vertexPoolLength++;\n\t                            _vertexCount++;\n\t                            return vertex;\n\t                        }\n\t                        return _vertexPool[_vertexCount++];\n\t                    }\n\t                    function getNextFaceInPool() {\n\t                        if (_faceCount === _facePoolLength) {\n\t                            var face = new THREE.RenderableFace();\n\t                            _facePool.push(face);\n\t                            _facePoolLength++;\n\t                            _faceCount++;\n\t                            return face;\n\t                        }\n\t                        return _facePool[_faceCount++];\n\t                    }\n\t                    function getNextLineInPool() {\n\t                        if (_lineCount === _linePoolLength) {\n\t                            var line = new THREE.RenderableLine();\n\t                            _linePool.push(line);\n\t                            _linePoolLength++;\n\t                            _lineCount++;\n\t                            return line;\n\t                        }\n\t                        return _linePool[_lineCount++];\n\t                    }\n\t                    function getNextSpriteInPool() {\n\t                        if (_spriteCount === _spritePoolLength) {\n\t                            var sprite = new THREE.RenderableSprite();\n\t                            _spritePool.push(sprite);\n\t                            _spritePoolLength++;\n\t                            _spriteCount++;\n\t                            return sprite;\n\t                        }\n\t                        return _spritePool[_spriteCount++];\n\t                    }\n\t                    function painterSort(a, b) {\n\t                        if (a.renderOrder !== b.renderOrder) {\n\t                            return a.renderOrder - b.renderOrder;\n\t                        } else if (a.z !== b.z) {\n\t                            return b.z - a.z;\n\t                        } else if (a.id !== b.id) {\n\t                            return a.id - b.id;\n\t                        } else {\n\t                            return 0;\n\t                        }\n\t                    }\n\t                    function clipLine(s1, s2) {\n\t                        var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n\t                        if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n\t                            return true;\n\t                        } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n\t                            return false;\n\t                        } else {\n\t                            if (bc1near < 0) {\n\t                                alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n\t                            } else if (bc2near < 0) {\n\t                                alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n\t                            }\n\t                            if (bc1far < 0) {\n\t                                alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n\t                            } else if (bc2far < 0) {\n\t                                alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n\t                            }\n\t                            if (alpha2 < alpha1) {\n\t                                return false;\n\t                            } else {\n\t                                s1.lerp(s2, alpha1);\n\t                                s2.lerp(s1, 1 - alpha2);\n\t                                return true;\n\t                            }\n\t                        }\n\t                    }\n\t                };\n\t            }, function(module, exports, __webpack_require__) {\n\t                /*!\n\t\t\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t\t\t *\n\t\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t\t * Licensed under the MIT License.\n\t\t\t */\n\t                \"use strict\";\n\t                var isObject = __webpack_require__(8);\n\t                function isObjectObject(o) {\n\t                    return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n\t                }\n\t                module.exports = function isPlainObject(o) {\n\t                    var ctor, prot;\n\t                    if (isObjectObject(o) === false) return false;\n\t                    ctor = o.constructor;\n\t                    if (typeof ctor !== \"function\") return false;\n\t                    prot = ctor.prototype;\n\t                    if (isObjectObject(prot) === false) return false;\n\t                    if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n\t                        return false;\n\t                    }\n\t                    return true;\n\t                };\n\t            }, function(module, exports) {\n\t                /*!\n\t\t\t * isobject <https://github.com/jonschlinkert/isobject>\n\t\t\t *\n\t\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t\t * Licensed under the MIT License.\n\t\t\t */\n\t                \"use strict\";\n\t                module.exports = function isObject(val) {\n\t                    return val != null && typeof val === \"object\" && !Array.isArray(val);\n\t                };\n\t            }, function(module, exports, __webpack_require__) {\n\t                var __WEBPACK_AMD_DEFINE_RESULT__;\n\t                !function(undefined) {\n\t                    var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t                        return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t                    };\n\t                    var defaultMaxListeners = 10;\n\t                    function init() {\n\t                        this._events = {};\n\t                        if (this._conf) {\n\t                            configure.call(this, this._conf);\n\t                        }\n\t                    }\n\t                    function configure(conf) {\n\t                        if (conf) {\n\t                            this._conf = conf;\n\t                            conf.delimiter && (this.delimiter = conf.delimiter);\n\t                            conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t                            conf.wildcard && (this.wildcard = conf.wildcard);\n\t                            conf.newListener && (this.newListener = conf.newListener);\n\t                            if (this.wildcard) {\n\t                                this.listenerTree = {};\n\t                            }\n\t                        }\n\t                    }\n\t                    function EventEmitter(conf) {\n\t                        this._events = {};\n\t                        this.newListener = false;\n\t                        configure.call(this, conf);\n\t                    }\n\t                    function searchListenerTree(handlers, type, tree, i) {\n\t                        if (!tree) {\n\t                            return [];\n\t                        }\n\t                        var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n\t                        if (i === typeLength && tree._listeners) {\n\t                            if (typeof tree._listeners === \"function\") {\n\t                                handlers && handlers.push(tree._listeners);\n\t                                return [ tree ];\n\t                            } else {\n\t                                for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t                                    handlers && handlers.push(tree._listeners[leaf]);\n\t                                }\n\t                                return [ tree ];\n\t                            }\n\t                        }\n\t                        if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n\t                            if (currentType === \"*\") {\n\t                                for (branch in tree) {\n\t                                    if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n\t                                    }\n\t                                }\n\t                                return listeners;\n\t                            } else if (currentType === \"**\") {\n\t                                endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n\t                                if (endReached && tree._listeners) {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t                                }\n\t                                for (branch in tree) {\n\t                                    if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                        if (branch === \"*\" || branch === \"**\") {\n\t                                            if (tree[branch]._listeners && !endReached) {\n\t                                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t                                            }\n\t                                            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                        } else if (branch === nextType) {\n\t                                            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n\t                                        } else {\n\t                                            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                        }\n\t                                    }\n\t                                }\n\t                                return listeners;\n\t                            }\n\t                            listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n\t                        }\n\t                        xTree = tree[\"*\"];\n\t                        if (xTree) {\n\t                            searchListenerTree(handlers, type, xTree, i + 1);\n\t                        }\n\t                        xxTree = tree[\"**\"];\n\t                        if (xxTree) {\n\t                            if (i < typeLength) {\n\t                                if (xxTree._listeners) {\n\t                                    searchListenerTree(handlers, type, xxTree, typeLength);\n\t                                }\n\t                                for (branch in xxTree) {\n\t                                    if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n\t                                        if (branch === nextType) {\n\t                                            searchListenerTree(handlers, type, xxTree[branch], i + 2);\n\t                                        } else if (branch === currentType) {\n\t                                            searchListenerTree(handlers, type, xxTree[branch], i + 1);\n\t                                        } else {\n\t                                            isolatedBranch = {};\n\t                                            isolatedBranch[branch] = xxTree[branch];\n\t                                            searchListenerTree(handlers, type, {\n\t                                                \"**\": isolatedBranch\n\t                                            }, i + 1);\n\t                                        }\n\t                                    }\n\t                                }\n\t                            } else if (xxTree._listeners) {\n\t                                searchListenerTree(handlers, type, xxTree, typeLength);\n\t                            } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n\t                                searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    }\n\t                    function growListenerTree(type, listener) {\n\t                        type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                        for (var i = 0, len = type.length; i + 1 < len; i++) {\n\t                            if (type[i] === \"**\" && type[i + 1] === \"**\") {\n\t                                return;\n\t                            }\n\t                        }\n\t                        var tree = this.listenerTree;\n\t                        var name = type.shift();\n\t                        while (name) {\n\t                            if (!tree[name]) {\n\t                                tree[name] = {};\n\t                            }\n\t                            tree = tree[name];\n\t                            if (type.length === 0) {\n\t                                if (!tree._listeners) {\n\t                                    tree._listeners = listener;\n\t                                } else if (typeof tree._listeners === \"function\") {\n\t                                    tree._listeners = [ tree._listeners, listener ];\n\t                                } else if (isArray(tree._listeners)) {\n\t                                    tree._listeners.push(listener);\n\t                                    if (!tree._listeners.warned) {\n\t                                        var m = defaultMaxListeners;\n\t                                        if (typeof this._events.maxListeners !== \"undefined\") {\n\t                                            m = this._events.maxListeners;\n\t                                        }\n\t                                        if (m > 0 && tree._listeners.length > m) {\n\t                                            tree._listeners.warned = true;\n\t                                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n\t                                            console.trace();\n\t                                        }\n\t                                    }\n\t                                }\n\t                                return true;\n\t                            }\n\t                            name = type.shift();\n\t                        }\n\t                        return true;\n\t                    }\n\t                    EventEmitter.prototype.delimiter = \".\";\n\t                    EventEmitter.prototype.setMaxListeners = function(n) {\n\t                        this._events || init.call(this);\n\t                        this._events.maxListeners = n;\n\t                        if (!this._conf) this._conf = {};\n\t                        this._conf.maxListeners = n;\n\t                    };\n\t                    EventEmitter.prototype.event = \"\";\n\t                    EventEmitter.prototype.once = function(event, fn) {\n\t                        this.many(event, 1, fn);\n\t                        return this;\n\t                    };\n\t                    EventEmitter.prototype.many = function(event, ttl, fn) {\n\t                        var self = this;\n\t                        if (typeof fn !== \"function\") {\n\t                            throw new Error(\"many only accepts instances of Function\");\n\t                        }\n\t                        function listener() {\n\t                            if (--ttl === 0) {\n\t                                self.off(event, listener);\n\t                            }\n\t                            fn.apply(this, arguments);\n\t                        }\n\t                        listener._origin = fn;\n\t                        this.on(event, listener);\n\t                        return self;\n\t                    };\n\t                    EventEmitter.prototype.emit = function() {\n\t                        this._events || init.call(this);\n\t                        var type = arguments[0];\n\t                        if (type === \"newListener\" && !this.newListener) {\n\t                            if (!this._events.newListener) {\n\t                                return false;\n\t                            }\n\t                        }\n\t                        if (this._all) {\n\t                            var l = arguments.length;\n\t                            var args = new Array(l - 1);\n\t                            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                            for (i = 0, l = this._all.length; i < l; i++) {\n\t                                this.event = type;\n\t                                this._all[i].apply(this, args);\n\t                            }\n\t                        }\n\t                        if (type === \"error\") {\n\t                            if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n\t                                if (arguments[1] instanceof Error) {\n\t                                    throw arguments[1];\n\t                                } else {\n\t                                    throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t                                }\n\t                                return false;\n\t                            }\n\t                        }\n\t                        var handler;\n\t                        if (this.wildcard) {\n\t                            handler = [];\n\t                            var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                            searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t                        } else {\n\t                            handler = this._events[type];\n\t                        }\n\t                        if (typeof handler === \"function\") {\n\t                            this.event = type;\n\t                            if (arguments.length === 1) {\n\t                                handler.call(this);\n\t                            } else if (arguments.length > 1) switch (arguments.length) {\n\t                              case 2:\n\t                                handler.call(this, arguments[1]);\n\t                                break;\n\t\n\t                              case 3:\n\t                                handler.call(this, arguments[1], arguments[2]);\n\t                                break;\n\t\n\t                              default:\n\t                                var l = arguments.length;\n\t                                var args = new Array(l - 1);\n\t                                for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                                handler.apply(this, args);\n\t                            }\n\t                            return true;\n\t                        } else if (handler) {\n\t                            var l = arguments.length;\n\t                            var args = new Array(l - 1);\n\t                            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                            var listeners = handler.slice();\n\t                            for (var i = 0, l = listeners.length; i < l; i++) {\n\t                                this.event = type;\n\t                                listeners[i].apply(this, args);\n\t                            }\n\t                            return listeners.length > 0 || !!this._all;\n\t                        } else {\n\t                            return !!this._all;\n\t                        }\n\t                    };\n\t                    EventEmitter.prototype.on = function(type, listener) {\n\t                        if (typeof type === \"function\") {\n\t                            this.onAny(type);\n\t                            return this;\n\t                        }\n\t                        if (typeof listener !== \"function\") {\n\t                            throw new Error(\"on only accepts instances of Function\");\n\t                        }\n\t                        this._events || init.call(this);\n\t                        this.emit(\"newListener\", type, listener);\n\t                        if (this.wildcard) {\n\t                            growListenerTree.call(this, type, listener);\n\t                            return this;\n\t                        }\n\t                        if (!this._events[type]) {\n\t                            this._events[type] = listener;\n\t                        } else if (typeof this._events[type] === \"function\") {\n\t                            this._events[type] = [ this._events[type], listener ];\n\t                        } else if (isArray(this._events[type])) {\n\t                            this._events[type].push(listener);\n\t                            if (!this._events[type].warned) {\n\t                                var m = defaultMaxListeners;\n\t                                if (typeof this._events.maxListeners !== \"undefined\") {\n\t                                    m = this._events.maxListeners;\n\t                                }\n\t                                if (m > 0 && this._events[type].length > m) {\n\t                                    this._events[type].warned = true;\n\t                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n\t                                    console.trace();\n\t                                }\n\t                            }\n\t                        }\n\t                        return this;\n\t                    };\n\t                    EventEmitter.prototype.onAny = function(fn) {\n\t                        if (typeof fn !== \"function\") {\n\t                            throw new Error(\"onAny only accepts instances of Function\");\n\t                        }\n\t                        if (!this._all) {\n\t                            this._all = [];\n\t                        }\n\t                        this._all.push(fn);\n\t                        return this;\n\t                    };\n\t                    EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t                    EventEmitter.prototype.off = function(type, listener) {\n\t                        if (typeof listener !== \"function\") {\n\t                            throw new Error(\"removeListener only takes instances of Function\");\n\t                        }\n\t                        var handlers, leafs = [];\n\t                        if (this.wildcard) {\n\t                            var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                            leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                        } else {\n\t                            if (!this._events[type]) return this;\n\t                            handlers = this._events[type];\n\t                            leafs.push({\n\t                                _listeners: handlers\n\t                            });\n\t                        }\n\t                        for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                            var leaf = leafs[iLeaf];\n\t                            handlers = leaf._listeners;\n\t                            if (isArray(handlers)) {\n\t                                var position = -1;\n\t                                for (var i = 0, length = handlers.length; i < length; i++) {\n\t                                    if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n\t                                        position = i;\n\t                                        break;\n\t                                    }\n\t                                }\n\t                                if (position < 0) {\n\t                                    continue;\n\t                                }\n\t                                if (this.wildcard) {\n\t                                    leaf._listeners.splice(position, 1);\n\t                                } else {\n\t                                    this._events[type].splice(position, 1);\n\t                                }\n\t                                if (handlers.length === 0) {\n\t                                    if (this.wildcard) {\n\t                                        delete leaf._listeners;\n\t                                    } else {\n\t                                        delete this._events[type];\n\t                                    }\n\t                                }\n\t                                return this;\n\t                            } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n\t                                if (this.wildcard) {\n\t                                    delete leaf._listeners;\n\t                                } else {\n\t                                    delete this._events[type];\n\t                                }\n\t                            }\n\t                        }\n\t                        return this;\n\t                    };\n\t                    EventEmitter.prototype.offAny = function(fn) {\n\t                        var i = 0, l = 0, fns;\n\t                        if (fn && this._all && this._all.length > 0) {\n\t                            fns = this._all;\n\t                            for (i = 0, l = fns.length; i < l; i++) {\n\t                                if (fn === fns[i]) {\n\t                                    fns.splice(i, 1);\n\t                                    return this;\n\t                                }\n\t                            }\n\t                        } else {\n\t                            this._all = [];\n\t                        }\n\t                        return this;\n\t                    };\n\t                    EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t                    EventEmitter.prototype.removeAllListeners = function(type) {\n\t                        if (arguments.length === 0) {\n\t                            !this._events || init.call(this);\n\t                            return this;\n\t                        }\n\t                        if (this.wildcard) {\n\t                            var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                            var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                            for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                                var leaf = leafs[iLeaf];\n\t                                leaf._listeners = null;\n\t                            }\n\t                        } else {\n\t                            if (!this._events[type]) return this;\n\t                            this._events[type] = null;\n\t                        }\n\t                        return this;\n\t                    };\n\t                    EventEmitter.prototype.listeners = function(type) {\n\t                        if (this.wildcard) {\n\t                            var handlers = [];\n\t                            var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                            searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t                            return handlers;\n\t                        }\n\t                        this._events || init.call(this);\n\t                        if (!this._events[type]) this._events[type] = [];\n\t                        if (!isArray(this._events[type])) {\n\t                            this._events[type] = [ this._events[type] ];\n\t                        }\n\t                        return this._events[type];\n\t                    };\n\t                    EventEmitter.prototype.listenersAny = function() {\n\t                        if (this._all) {\n\t                            return this._all;\n\t                        } else {\n\t                            return [];\n\t                        }\n\t                    };\n\t                    if (true) {\n\t                        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t                            return EventEmitter;\n\t                        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t                    } else if (typeof exports === \"object\") {\n\t                        exports.EventEmitter2 = EventEmitter;\n\t                    } else {\n\t                        window.EventEmitter2 = EventEmitter;\n\t                    }\n\t                }();\n\t            }, function(module, exports) {\n\t                module.exports = {\n\t                    Promise: window[\"Promise\"]\n\t                };\n\t            }, function(module, exports) {\n\t                (function() {\n\t                    var ResizeSensor = function(element, callback) {\n\t                        function EventQueue() {\n\t                            this.q = [];\n\t                            this.add = function(ev) {\n\t                                this.q.push(ev);\n\t                            };\n\t                            var i, j;\n\t                            this.call = function() {\n\t                                for (i = 0, j = this.q.length; i < j; i++) {\n\t                                    this.q[i].call();\n\t                                }\n\t                            };\n\t                        }\n\t                        function getComputedStyle(element, prop) {\n\t                            if (element.currentStyle) {\n\t                                return element.currentStyle[prop];\n\t                            } else if (window.getComputedStyle) {\n\t                                return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t                            } else {\n\t                                return element.style[prop];\n\t                            }\n\t                        }\n\t                        function attachResizeEvent(element, resized) {\n\t                            if (!element.resizedAttached) {\n\t                                element.resizedAttached = new EventQueue();\n\t                                element.resizedAttached.add(resized);\n\t                            } else if (element.resizedAttached) {\n\t                                element.resizedAttached.add(resized);\n\t                                return;\n\t                            }\n\t                            element.resizeSensor = document.createElement(\"div\");\n\t                            element.resizeSensor.className = \"resize-sensor\";\n\t                            var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n\t                            var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n\t                            element.resizeSensor.style.cssText = style;\n\t                            element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n\t                            element.appendChild(element.resizeSensor);\n\t                            if (!{\n\t                                fixed: 1,\n\t                                absolute: 1\n\t                            }[getComputedStyle(element, \"position\")]) {\n\t                                element.style.position = \"relative\";\n\t                            }\n\t                            var expand = element.resizeSensor.childNodes[0];\n\t                            var expandChild = expand.childNodes[0];\n\t                            var shrink = element.resizeSensor.childNodes[1];\n\t                            var shrinkChild = shrink.childNodes[0];\n\t                            var lastWidth, lastHeight;\n\t                            var reset = function() {\n\t                                expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n\t                                expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n\t                                expand.scrollLeft = expand.scrollWidth;\n\t                                expand.scrollTop = expand.scrollHeight;\n\t                                shrink.scrollLeft = shrink.scrollWidth;\n\t                                shrink.scrollTop = shrink.scrollHeight;\n\t                                lastWidth = element.offsetWidth;\n\t                                lastHeight = element.offsetHeight;\n\t                            };\n\t                            reset();\n\t                            var changed = function() {\n\t                                if (element.resizedAttached) {\n\t                                    element.resizedAttached.call();\n\t                                }\n\t                            };\n\t                            var addEvent = function(el, name, cb) {\n\t                                if (el.attachEvent) {\n\t                                    el.attachEvent(\"on\" + name, cb);\n\t                                } else {\n\t                                    el.addEventListener(name, cb);\n\t                                }\n\t                            };\n\t                            var onScroll = function() {\n\t                                if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                                    changed();\n\t                                }\n\t                                reset();\n\t                            };\n\t                            addEvent(expand, \"scroll\", onScroll);\n\t                            addEvent(shrink, \"scroll\", onScroll);\n\t                        }\n\t                        var elementType = Object.prototype.toString.call(element);\n\t                        var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n\t                        if (isCollectionTyped) {\n\t                            var i = 0, j = element.length;\n\t                            for (;i < j; i++) {\n\t                                attachResizeEvent(element[i], callback);\n\t                            }\n\t                        } else {\n\t                            attachResizeEvent(element, callback);\n\t                        }\n\t                        this.detach = function() {\n\t                            if (isCollectionTyped) {\n\t                                var i = 0, j = element.length;\n\t                                for (;i < j; i++) {\n\t                                    ResizeSensor.detach(element[i]);\n\t                                }\n\t                            } else {\n\t                                ResizeSensor.detach(element);\n\t                            }\n\t                        };\n\t                    };\n\t                    ResizeSensor.detach = function(element) {\n\t                        if (element.resizeSensor) {\n\t                            element.removeChild(element.resizeSensor);\n\t                            delete element.resizeSensor;\n\t                            delete element.resizedAttached;\n\t                        }\n\t                    };\n\t                    if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n\t                        module.exports = ResizeSensor;\n\t                    } else {\n\t                        window.ResizeSensor = ResizeSensor;\n\t                    }\n\t                })();\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var Vector3 = THREE.Vector3;\n\t                var EventEmmiter_1 = __webpack_require__(13);\n\t                var Utils_1 = __webpack_require__(14);\n\t                var Widget_1 = __webpack_require__(15);\n\t                var TrendsManager_1 = __webpack_require__(16);\n\t                var Screen_1 = __webpack_require__(19);\n\t                var AxisMarks_1 = __webpack_require__(20);\n\t                var interfaces_1 = __webpack_require__(21);\n\t                var deps_1 = __webpack_require__(3);\n\t                var CHART_STATE_EVENTS = {\n\t                    INITIAL_STATE_APPLIED: \"initialStateApplied\",\n\t                    READY: \"ready\",\n\t                    DESTROY: \"destroy\",\n\t                    CHANGE: \"change\",\n\t                    TREND_CHANGE: \"trendChange\",\n\t                    TRENDS_CHANGE: \"trendsChange\",\n\t                    ZOOM: \"zoom\",\n\t                    RESIZE: \"resize\",\n\t                    SCROLL: \"scroll\",\n\t                    SCROLL_STOP: \"scrollStop\",\n\t                    PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n\t                };\n\t                var ChartState = function() {\n\t                    function ChartState(initialState, widgetsClasses, plugins) {\n\t                        if (widgetsClasses === void 0) {\n\t                            widgetsClasses = {};\n\t                        }\n\t                        if (plugins === void 0) {\n\t                            plugins = [];\n\t                        }\n\t                        this.data = {\n\t                            prevState: {},\n\t                            $el: null,\n\t                            zoom: 0,\n\t                            xAxis: {\n\t                                range: {\n\t                                    type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n\t                                    from: 0,\n\t                                    to: 0,\n\t                                    scroll: 0,\n\t                                    zoom: 1,\n\t                                    padding: {\n\t                                        start: 0,\n\t                                        end: 5\n\t                                    },\n\t                                    margin: {\n\t                                        start: 0,\n\t                                        end: 5\n\t                                    }\n\t                                },\n\t                                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                                gridMinSize: 100,\n\t                                autoScroll: true,\n\t                                marks: []\n\t                            },\n\t                            yAxis: {\n\t                                range: {\n\t                                    type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n\t                                    from: 0,\n\t                                    to: 0,\n\t                                    zoom: 1,\n\t                                    padding: {\n\t                                        start: 5,\n\t                                        end: 5\n\t                                    },\n\t                                    margin: {\n\t                                        start: 5,\n\t                                        end: 5\n\t                                    }\n\t                                },\n\t                                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                                gridMinSize: 50,\n\t                                marks: []\n\t                            },\n\t                            animations: {\n\t                                enabled: true,\n\t                                trendChangeSpeed: .5,\n\t                                trendChangeEase: void 0,\n\t                                zoomSpeed: .25,\n\t                                zoomEase: Linear.easeNone,\n\t                                scrollSpeed: .5,\n\t                                scrollEase: Linear.easeNone,\n\t                                autoScrollSpeed: 1,\n\t                                autoScrollEase: Linear.easeNone\n\t                            },\n\t                            autoRender: {\n\t                                enabled: true,\n\t                                fps: 0\n\t                            },\n\t                            autoResize: true,\n\t                            renderer: \"WebGLRenderer\",\n\t                            autoScroll: true,\n\t                            controls: {\n\t                                enabled: true\n\t                            },\n\t                            cursor: {\n\t                                dragMode: false,\n\t                                x: 0,\n\t                                y: 0\n\t                            },\n\t                            backgroundColor: 0,\n\t                            backgroundOpacity: 1,\n\t                            showStats: false,\n\t                            pluginsState: {},\n\t                            eventEmitterMaxListeners: 20\n\t                        };\n\t                        this.widgetsClasses = {};\n\t                        this.plugins = {};\n\t                        this.isReady = false;\n\t                        this.ee = new EventEmmiter_1.EventEmitter();\n\t                        this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n\t                        this.widgetsClasses = widgetsClasses;\n\t                        this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n\t                        initialState.trends = this.trendsManager.calculatedOptions;\n\t                        initialState = this.installPlugins(plugins, initialState);\n\t                        this.setState(initialState);\n\t                        this.setState({\n\t                            computedData: this.getComputedData()\n\t                        });\n\t                        this.savePrevState();\n\t                        this.screen = new Screen_1.Screen(this);\n\t                        this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n\t                        this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n\t                        this.initListeners();\n\t                        this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\t                        this.isReady = true;\n\t                        this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t                    }\n\t                    ChartState.prototype.destroy = function() {\n\t                        this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t                        this.ee.removeAllListeners();\n\t                        this.data = {};\n\t                    };\n\t                    ChartState.prototype.onDestroy = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t                    };\n\t                    ChartState.prototype.onInitialStateApplied = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t                    };\n\t                    ChartState.prototype.onReady = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t                    };\n\t                    ChartState.prototype.onChange = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t                    };\n\t                    ChartState.prototype.onTrendChange = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t                    };\n\t                    ChartState.prototype.onTrendsChange = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t                    };\n\t                    ChartState.prototype.onScrollStop = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t                    };\n\t                    ChartState.prototype.onScroll = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t                    };\n\t                    ChartState.prototype.onZoom = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t                    };\n\t                    ChartState.prototype.onResize = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t                    };\n\t                    ChartState.prototype.onPluginsStateChange = function(cb) {\n\t                        return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t                    };\n\t                    ChartState.prototype.getTrend = function(trendName) {\n\t                        return this.trendsManager.getTrend(trendName);\n\t                    };\n\t                    ChartState.prototype.setState = function(newState, eventData, silent) {\n\t                        if (silent === void 0) {\n\t                            silent = false;\n\t                        }\n\t                        var stateData = this.data;\n\t                        var changedProps = {};\n\t                        for (var key in newState) {\n\t                            if (stateData[key] !== newState[key]) {\n\t                                changedProps[key] = newState[key];\n\t                            }\n\t                        }\n\t                        this.savePrevState(changedProps);\n\t                        var trendsData = {};\n\t                        if (newState.trends) for (var trendName in newState.trends) {\n\t                            var trendOptions = newState.trends[trendName];\n\t                            if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t                            delete trendOptions.data;\n\t                        }\n\t                        var newStateContainsData = Object.keys(trendsData).length > 0;\n\t                        this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n\t                        if (newStateContainsData) for (var trendName in trendsData) {\n\t                            this.data.trends[trendName].data = trendsData[trendName];\n\t                        }\n\t                        if (silent) return;\n\t                        var recalculateResult = this.recalculateState(changedProps);\n\t                        changedProps = recalculateResult.changedProps;\n\t                        this.emitChangedStateEvents(changedProps, eventData);\n\t                    };\n\t                    ChartState.prototype.recalculateState = function(changedProps) {\n\t                        var data = this.data;\n\t                        var patch = {};\n\t                        var actualData = Utils_1.Utils.deepMerge({}, data);\n\t                        if (changedProps.widgets || !data.widgets) {\n\t                            patch.widgets = {};\n\t                            var widgetsOptions = data.widgets || {};\n\t                            for (var widgetName in this.widgetsClasses) {\n\t                                var WidgetClass = this.widgetsClasses[widgetName];\n\t                                var userOptions = widgetsOptions[widgetName] || {};\n\t                                var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n\t                                patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n\t                            }\n\t                        }\n\t                        var cursorOptions = changedProps.cursor;\n\t                        var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t                        if (isMouseDrag) {\n\t                            var oldX = data.prevState.cursor.x;\n\t                            var currentX = cursorOptions.x;\n\t                            var currentScroll = data.xAxis.range.scroll;\n\t                            var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t                            patch.xAxis = {\n\t                                range: {\n\t                                    scroll: currentScroll + deltaXVal\n\t                                }\n\t                            };\n\t                            actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                                xAxis: patch.xAxis\n\t                            });\n\t                        }\n\t                        var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\t                        var scrollXChanged = false;\n\t                        var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n\t                        if (needToRecalculateXAxis) {\n\t                            var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t                            if (xAxisPatch) {\n\t                                scrollXChanged = true;\n\t                                patch = Utils_1.Utils.deepMerge(patch, {\n\t                                    xAxis: xAxisPatch\n\t                                });\n\t                                actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                                    xAxis: xAxisPatch\n\t                                });\n\t                            }\n\t                        }\n\t                        var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n\t                        if (needToRecalculateYAxis) {\n\t                            var yAxisPatch = this.recalculateYAxis(actualData);\n\t                            if (yAxisPatch) {\n\t                                patch = Utils_1.Utils.deepMerge(patch, {\n\t                                    yAxis: yAxisPatch\n\t                                });\n\t                                actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                                    yAxis: yAxisPatch\n\t                                });\n\t                            }\n\t                        }\n\t                        this.savePrevState(patch);\n\t                        var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n\t                        patch.computedData = this.getComputedData(allChangedProps);\n\t                        this.savePrevState(patch);\n\t                        this.data = Utils_1.Utils.deepMerge(this.data, patch);\n\t                        return {\n\t                            changedProps: allChangedProps,\n\t                            patch: patch\n\t                        };\n\t                    };\n\t                    ChartState.prototype.getComputedData = function(changedProps) {\n\t                        var computeAll = !changedProps;\n\t                        var computedData = {};\n\t                        if (computeAll || changedProps.trends && this.trendsManager) {\n\t                            computedData.trends = {\n\t                                maxXVal: this.trendsManager.getEndXVal(),\n\t                                minXVal: this.trendsManager.getStartXVal()\n\t                            };\n\t                        }\n\t                        return computedData;\n\t                    };\n\t                    ChartState.prototype.savePrevState = function(changedProps) {\n\t                        if (!changedProps) changedProps = this.data;\n\t                        var prevState = this.data.prevState;\n\t                        Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n\t                    };\n\t                    ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n\t                        var prevState = this.data.prevState;\n\t                        this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\t                        for (var key in changedProps) {\n\t                            this.ee.emit(key + \"Change\", changedProps[key], eventData);\n\t                        }\n\t                        if (!this.isReady) return;\n\t                        var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n\t                        scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\t                        var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n\t                        scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\t                        var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n\t                        zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\t                        var resizeEventNeeded = changedProps.width || changedProps.height;\n\t                        resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\t                        var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n\t                        pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t                    };\n\t                    ChartState.prototype.installPlugins = function(plugins, initialState) {\n\t                        var _this = this;\n\t                        initialState.pluginsState = {};\n\t                        plugins.forEach(function(plugin) {\n\t                            var PluginClass = plugin.constructor;\n\t                            var pluginName = PluginClass.NAME;\n\t                            PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n\t                                return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n\t                            });\n\t                            initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n\t                            _this.plugins[pluginName] = plugin;\n\t                            plugin.setupChartState(_this);\n\t                        });\n\t                        return initialState;\n\t                    };\n\t                    ChartState.prototype.getPlugin = function(pluginName) {\n\t                        return this.plugins[pluginName];\n\t                    };\n\t                    ChartState.prototype.initListeners = function() {\n\t                        var _this = this;\n\t                        this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n\t                            _this.handleTrendsChange(changedTrends, newData);\n\t                        });\n\t                    };\n\t                    ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n\t                        for (var trendName in changedTrends) {\n\t                            this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t                        }\n\t                    };\n\t                    ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n\t                        var axisRange = actualData.xAxis.range;\n\t                        var patch = {\n\t                            range: {}\n\t                        };\n\t                        var isInitialize = axisRange.zeroVal == void 0;\n\t                        var zeroVal, scaleFactor;\n\t                        var zoom = axisRange.zoom;\n\t                        if (axisRange.isMirrorMode) {\n\t                            Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n\t                        }\n\t                        if (isInitialize) {\n\t                            zeroVal = axisRange.from;\n\t                            scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                            patch = {\n\t                                range: {\n\t                                    zeroVal: zeroVal,\n\t                                    scaleFactor: scaleFactor\n\t                                }\n\t                            };\n\t                        } else {\n\t                            zeroVal = axisRange.zeroVal;\n\t                            scaleFactor = axisRange.scaleFactor;\n\t                            if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n\t                                if (changedProps.xAxis.range.zoom) {\n\t                                    Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t                                }\n\t                                var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                                patch.range.scroll = axisRange.from - zeroVal;\n\t                                patch.range.zoom = currentScaleFactor / scaleFactor;\n\t                                return patch;\n\t                            }\n\t                        }\n\t                        do {\n\t                            var from = zeroVal + axisRange.scroll;\n\t                            var to = from + actualData.width / (scaleFactor * zoom);\n\t                            var rangeLength = to - from;\n\t                            var needToRecalculateZoom = false;\n\t                            var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n\t                            var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n\t                            needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t                            if (needToRecalculateZoom) {\n\t                                var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n\t                                var zoom = zoom * fixScale;\n\t                                patch.range.zoom = zoom;\n\t                            }\n\t                        } while (needToRecalculateZoom);\n\t                        patch.range.from = from;\n\t                        patch.range.to = to;\n\t                        return patch;\n\t                    };\n\t                    ChartState.prototype.recalculateYAxis = function(actualData) {\n\t                        var patch = {\n\t                            range: {}\n\t                        };\n\t                        var yAxisRange = actualData.yAxis.range;\n\t                        var isInitialize = yAxisRange.scaleFactor == void 0;\n\t                        var trends = this.trendsManager;\n\t                        var trendsEndXVal = trends.getEndXVal();\n\t                        var trendsStartXVal = trends.getStartXVal();\n\t                        var xRange = actualData.xAxis.range;\n\t                        var xFrom = xRange.from, xTo = xRange.to;\n\t                        var xRangeLength = xTo - xFrom;\n\t                        var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n\t                        if (xTo > trendsEndXVal) {\n\t                            xTo = trendsEndXVal;\n\t                            xFrom = xTo - xRangeLength;\n\t                        } else if (xFrom < trendsStartXVal) {\n\t                            xFrom = trendsStartXVal;\n\t                            xTo = xFrom + xRangeLength;\n\t                        }\n\t                        var maxY = trends.getMaxYVal(xFrom, xTo);\n\t                        var minY = trends.getMinYVal(xFrom, xTo);\n\t                        var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t                        if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n\t                            if (trendLastY > maxY) maxY = trendLastY;\n\t                            if (trendLastY < minY) minY = trendLastY;\n\t                        }\n\t                        if (yAxisRange.isMirrorMode) {\n\t                            if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n\t                            var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t                            var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t                            var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t                            maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t                            minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t                        }\n\t                        var margin = yAxisRange.margin;\n\t                        var padding = {\n\t                            start: yAxisRange.padding.start + margin.start,\n\t                            end: yAxisRange.padding.end + margin.end\n\t                        };\n\t                        if (padding.end + padding.start >= actualData.height) {\n\t                            Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n\t                        }\n\t                        var rangeLength = maxY - minY;\n\t                        var paddingTopInPercents = padding.end / actualData.height;\n\t                        var paddingBottomInPercents = padding.start / actualData.height;\n\t                        var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t                        var visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t                        var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t                        var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t                        if (isInitialize) {\n\t                            zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t                            scaleFactor = actualData.height / (toVal - fromVal);\n\t                            patch = {\n\t                                range: {\n\t                                    zeroVal: zeroVal,\n\t                                    scaleFactor: scaleFactor\n\t                                }\n\t                            };\n\t                            needToZoom = true;\n\t                        } else {\n\t                            scaleFactor = yAxisRange.scaleFactor;\n\t                            zeroVal = yAxisRange.zeroVal;\n\t                            var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t                            var minScreenY = Math.round(this.getScreenYByValue(minY));\n\t                            needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n\t                        }\n\t                        if (!needToZoom) return null;\n\t                        scroll = fromVal - zeroVal;\n\t                        zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n\t                        var currentAxisRange = this.data.yAxis.range;\n\t                        if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t                        if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t                        if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t                        if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t                        return patch;\n\t                    };\n\t                    ChartState.prototype.zoom = function(zoomValue, origin) {\n\t                        var _this = this;\n\t                        if (origin === void 0) {\n\t                            origin = .5;\n\t                        }\n\t                        var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n\t                        var newZoom = zoom * zoomValue;\n\t                        var currentRange = this.data.width / (scaleFactor * zoom);\n\t                        var nextRange = this.data.width / (scaleFactor * newZoom);\n\t                        var newScroll = scroll + (currentRange - nextRange) * origin;\n\t                        this.setState({\n\t                            xAxis: {\n\t                                range: {\n\t                                    zoom: newZoom,\n\t                                    scroll: newScroll\n\t                                }\n\t                            }\n\t                        });\n\t                        return new deps_1.Promise(function(resolve) {\n\t                            var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n\t                            setTimeout(resolve, animationTime * 1e3);\n\t                        });\n\t                    };\n\t                    ChartState.prototype.zoomToRange = function(range, origin) {\n\t                        var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n\t                        var currentRange = this.data.width / (scaleFactor * zoom);\n\t                        return this.zoom(currentRange / range, origin);\n\t                    };\n\t                    ChartState.prototype.scrollToEnd = function() {\n\t                        var _this = this;\n\t                        var state = this.data;\n\t                        var endXVal = this.trendsManager.getEndXVal();\n\t                        var range = state.xAxis.range;\n\t                        var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t                        this.setState({\n\t                            xAxis: {\n\t                                range: {\n\t                                    scroll: scroll\n\t                                }\n\t                            }\n\t                        });\n\t                        return new deps_1.Promise(function(resolve) {\n\t                            var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n\t                            setTimeout(resolve, animationTime * 1e3);\n\t                        });\n\t                    };\n\t                    ChartState.prototype.getPointOnXAxis = function(xVal) {\n\t                        var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                        return (xVal - zeroVal) * scaleFactor * zoom;\n\t                    };\n\t                    ChartState.prototype.getPointOnYAxis = function(yVal) {\n\t                        var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                        return (yVal - zeroVal) * scaleFactor * zoom;\n\t                    };\n\t                    ChartState.prototype.getValueOnXAxis = function(x) {\n\t                        return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t                    };\n\t                    ChartState.prototype.valueToPxByXAxis = function(xVal) {\n\t                        return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n\t                    };\n\t                    ChartState.prototype.valueToPxByYAxis = function(yVal) {\n\t                        return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n\t                    };\n\t                    ChartState.prototype.pxToValueByXAxis = function(xVal) {\n\t                        return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n\t                    };\n\t                    ChartState.prototype.pxToValueByYAxis = function(yVal) {\n\t                        return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n\t                    };\n\t                    ChartState.prototype.getValueByScreenX = function(x) {\n\t                        var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                        return zeroVal + scroll + this.pxToValueByXAxis(x);\n\t                    };\n\t                    ChartState.prototype.getValueByScreenY = function(y) {\n\t                        var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                        return zeroVal + scroll + this.pxToValueByYAxis(y);\n\t                    };\n\t                    ChartState.prototype.getScreenXByValue = function(xVal) {\n\t                        var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t                    };\n\t                    ChartState.prototype.getScreenYByValue = function(yVal) {\n\t                        var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                        return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n\t                    };\n\t                    ChartState.prototype.getScreenXByPoint = function(xVal) {\n\t                        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t                    };\n\t                    ChartState.prototype.getPointByScreenX = function(screenX) {\n\t                        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t                    };\n\t                    ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n\t                        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t                    };\n\t                    ChartState.prototype.getScreenLeftVal = function() {\n\t                        return this.getValueByScreenX(0);\n\t                    };\n\t                    ChartState.prototype.getScreenRightVal = function() {\n\t                        return this.getValueByScreenX(this.data.width);\n\t                    };\n\t                    ChartState.prototype.getPaddingRight = function() {\n\t                        return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n\t                    };\n\t                    return ChartState;\n\t                }();\n\t                exports.ChartState = ChartState;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var deps_1 = __webpack_require__(3);\n\t                var EventEmitter = function() {\n\t                    function EventEmitter() {\n\t                        this.ee = new deps_1.EE2();\n\t                    }\n\t                    EventEmitter.prototype.emit = function(eventName) {\n\t                        var args = [];\n\t                        for (var _i = 1; _i < arguments.length; _i++) {\n\t                            args[_i - 1] = arguments[_i];\n\t                        }\n\t                        (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n\t                        var _a;\n\t                    };\n\t                    EventEmitter.prototype.on = function(eventName, callback) {\n\t                        return this.ee.on(eventName, callback);\n\t                    };\n\t                    EventEmitter.prototype.off = function(eventName, callback) {\n\t                        return this.ee.off(eventName, callback);\n\t                    };\n\t                    EventEmitter.prototype.subscribe = function(eventName, callback) {\n\t                        var _this = this;\n\t                        this.on(eventName, callback);\n\t                        return function() {\n\t                            return _this.off(eventName, callback);\n\t                        };\n\t                    };\n\t                    EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n\t                        this.ee.setMaxListeners(listenersCount);\n\t                    };\n\t                    EventEmitter.prototype.removeAllListeners = function(eventName) {\n\t                        this.ee.removeAllListeners(eventName);\n\t                    };\n\t                    return EventEmitter;\n\t                }();\n\t                exports.EventEmitter = EventEmitter;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var deps_1 = __webpack_require__(3);\n\t                function deepmerge(target, src, mergeArrays) {\n\t                    if (mergeArrays === void 0) {\n\t                        mergeArrays = true;\n\t                    }\n\t                    var array = Array.isArray(src);\n\t                    var dst = array && [] || {};\n\t                    if (array) {\n\t                        target = target || [];\n\t                        if (mergeArrays) {\n\t                            dst = dst.concat(target);\n\t                        }\n\t                        src.forEach(function(e, i) {\n\t                            if (typeof dst[i] === \"undefined\") {\n\t                                dst[i] = e;\n\t                            } else if (typeof e === \"object\") {\n\t                                dst[i] = deepmerge(target[i], e, mergeArrays);\n\t                            } else {\n\t                                if (target.indexOf(e) === -1) {\n\t                                    dst.push(e);\n\t                                }\n\t                            }\n\t                        });\n\t                    } else {\n\t                        if (target && typeof target === \"object\") {\n\t                            Object.keys(target).forEach(function(key) {\n\t                                dst[key] = target[key];\n\t                            });\n\t                        }\n\t                        Object.keys(src).forEach(function(key) {\n\t                            if (typeof src[key] !== \"object\" || !src[key]) {\n\t                                dst[key] = src[key];\n\t                            } else {\n\t                                if (!target[key]) {\n\t                                    dst[key] = src[key];\n\t                                } else {\n\t                                    dst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t                                }\n\t                            }\n\t                        });\n\t                    }\n\t                    return dst;\n\t                }\n\t                var Utils = function() {\n\t                    function Utils() {}\n\t                    Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n\t                        return deepmerge(obj1, obj2, mergeArrays);\n\t                    };\n\t                    Utils.deepCopy = function(obj) {\n\t                        return JSON.parse(JSON.stringify(obj));\n\t                    };\n\t                    Utils.toFixed = function(num, digitsCount) {\n\t                        var maxDigits = 15;\n\t                        var result = \"\";\n\t                        var intVal = Math.floor(num);\n\t                        var intStr = intVal.toString();\n\t                        var lengthDiff = digitsCount - intStr.length;\n\t                        if (lengthDiff > 0) {\n\t                            result = \"0\".repeat(lengthDiff) + intStr;\n\t                        } else {\n\t                            result = intStr;\n\t                        }\n\t                        var afterPointDigitsCount = maxDigits - intStr.length;\n\t                        var afterPointStr = num.toString().split(\".\")[1];\n\t                        if (afterPointStr) {\n\t                            result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n\t                        }\n\t                        return result;\n\t                    };\n\t                    Utils.bindEvent = function() {};\n\t                    Utils.createTexture = function(width, height, fn) {\n\t                        var canvas = document.createElement(\"canvas\");\n\t                        canvas.width = width;\n\t                        canvas.height = height;\n\t                        var ctx = canvas.getContext(\"2d\");\n\t                        fn(ctx);\n\t                        var texture = new THREE.Texture(canvas);\n\t                        texture.needsUpdate = true;\n\t                        return texture;\n\t                    };\n\t                    Utils.createPixelPerfectTexture = function(width, height, fn) {\n\t                        var texture = this.createTexture(width, height, fn);\n\t                        texture.minFilter = THREE.NearestFilter;\n\t                        return texture;\n\t                    };\n\t                    Utils.error = function(msg) {\n\t                        console.error(\"Chart error: \" + msg);\n\t                        throw \"Chart: \" + msg;\n\t                    };\n\t                    Utils.warn = function(msg) {\n\t                        console.warn(\"Chart warning: \" + msg);\n\t                    };\n\t                    Utils.getUid = function() {\n\t                        return this.currentId++;\n\t                    };\n\t                    Utils.getDistance = function(num1, num2) {\n\t                        return Math.max(num1, num2) - Math.min(num1, num2);\n\t                    };\n\t                    Utils.binarySearchClosestInd = function(arr, num, key) {\n\t                        var mid;\n\t                        var lo = 0;\n\t                        var hi = arr.length - 1;\n\t                        while (hi - lo > 1) {\n\t                            mid = Math.floor((lo + hi) / 2);\n\t                            if (arr[mid][key] < num) {\n\t                                lo = mid;\n\t                            } else {\n\t                                hi = mid;\n\t                            }\n\t                        }\n\t                        if (num - arr[lo][key] <= arr[hi][key] - num) {\n\t                            return lo;\n\t                        }\n\t                        return hi;\n\t                    };\n\t                    Utils.binarySearchClosest = function(arr, num, key) {\n\t                        var ind = this.binarySearchClosestInd(arr, num, key);\n\t                        return arr[ind];\n\t                    };\n\t                    Utils.rectsIntersect = function(r1, r2) {\n\t                        var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n\t                        var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n\t                        var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n\t                        return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n\t                    };\n\t                    /**!\r\n\t\t\t     * @preserve $.parseColor\r\n\t\t\t     * Copyright 2011 THEtheChad Elliott\r\n\t\t\t     * Released under the MIT and GPL licenses.\r\n\t\t\t     */\n\t                    Utils.parseColor = function(color) {\n\t                        var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n\t                        if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by $.parseColor\");\n\t                        isNaN(cache[3]) && (cache[3] = 1);\n\t                        return cache;\n\t                    };\n\t                    Utils.getHexColor = function(str) {\n\t                        var rgb = this.parseColor(str);\n\t                        return (rgb[0] << 8 * 2) + (rgb[1] << 8) + rgb[2];\n\t                    };\n\t                    Utils.throttle = function(func, ms) {\n\t                        var isThrottled = false, savedArgs, savedThis;\n\t                        function wrapper() {\n\t                            if (isThrottled) {\n\t                                savedArgs = arguments;\n\t                                savedThis = this;\n\t                                return;\n\t                            }\n\t                            func.apply(this, arguments);\n\t                            isThrottled = true;\n\t                            setTimeout(function() {\n\t                                isThrottled = false;\n\t                                if (savedArgs) {\n\t                                    wrapper.apply(savedThis, savedArgs);\n\t                                    savedArgs = savedThis = null;\n\t                                }\n\t                            }, ms);\n\t                        }\n\t                        return wrapper;\n\t                    };\n\t                    Utils.msToTimeString = function(timestamp) {\n\t                        var h = Math.floor(timestamp / 36e4);\n\t                        var m = Math.floor(timestamp / 6e4);\n\t                        var s = Math.floor(timestamp / 1e3);\n\t                        return h + \":\" + m + \":\" + s;\n\t                    };\n\t                    Utils.getRandomItem = function(arr) {\n\t                        var ind = Math.floor(Math.random() * arr.length);\n\t                        return arr[ind];\n\t                    };\n\t                    Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n\t                        if (excludeProps === void 0) {\n\t                            excludeProps = [];\n\t                        }\n\t                        for (var key in props) {\n\t                            if (excludeProps.indexOf(key) !== -1) continue;\n\t                            if (srcObject[key] == void 0) continue;\n\t                            if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t                                this.copyProps(srcObject[key], dstObject[key], props[key]);\n\t                            } else {\n\t                                dstObject[key] = this.deepCopy(srcObject[key]);\n\t                            }\n\t                        }\n\t                    };\n\t                    Utils.currentId = 1;\n\t                    return Utils;\n\t                }();\n\t                exports.Utils = Utils;\n\t            }, function(module, exports) {\n\t                \"use strict\";\n\t                var ChartWidget = function() {\n\t                    function ChartWidget(chartState) {\n\t                        this.unsubscribers = [];\n\t                        this.chartState = chartState;\n\t                        this.bindEvents();\n\t                    }\n\t                    ChartWidget.prototype.bindEvents = function() {};\n\t                    ChartWidget.prototype.bindEvent = function() {\n\t                        var args = [];\n\t                        for (var _i = 0; _i < arguments.length; _i++) {\n\t                            args[_i - 0] = arguments[_i];\n\t                        }\n\t                        var unsubscribers = [];\n\t                        if (!Array.isArray(args[0])) {\n\t                            unsubscribers.push(args[0]);\n\t                        } else {\n\t                            unsubscribers.push.apply(unsubscribers, args);\n\t                        }\n\t                        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                        var _a;\n\t                    };\n\t                    ChartWidget.prototype.unbindEvents = function() {\n\t                        this.unsubscribers.forEach(function(unsubscriber) {\n\t                            return unsubscriber();\n\t                        });\n\t                        this.unsubscribers.length = 0;\n\t                    };\n\t                    ChartWidget.getDefaultOptions = function() {\n\t                        return {\n\t                            enabled: true\n\t                        };\n\t                    };\n\t                    ChartWidget.widgetName = \"\";\n\t                    return ChartWidget;\n\t                }();\n\t                exports.ChartWidget = ChartWidget;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var Trend_1 = __webpack_require__(17);\n\t                var EventEmmiter_1 = __webpack_require__(13);\n\t                var EVENTS = {\n\t                    SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n\t                };\n\t                var TrendsManager = function() {\n\t                    function TrendsManager(state, initialState) {\n\t                        this.trends = {};\n\t                        this.ee = new EventEmmiter_1.EventEmitter();\n\t                        this.chartState = state;\n\t                        var trendsCalculatedOptions = {};\n\t                        for (var trendName in initialState.trends) {\n\t                            var trend = this.createTrend(state, trendName, initialState);\n\t                            trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t                        }\n\t                        this.calculatedOptions = trendsCalculatedOptions;\n\t                        this.bindEvents();\n\t                    }\n\t                    TrendsManager.prototype.getTrend = function(trendName) {\n\t                        return this.trends[trendName];\n\t                    };\n\t                    TrendsManager.prototype.getEnabledTrends = function() {\n\t                        var enabledTrends = [];\n\t                        var allTrends = this.trends;\n\t                        for (var trendName in allTrends) {\n\t                            var trend = allTrends[trendName];\n\t                            trend.getOptions().enabled && enabledTrends.push(trend);\n\t                        }\n\t                        return enabledTrends;\n\t                    };\n\t                    TrendsManager.prototype.getStartXVal = function() {\n\t                        var trends = this.getEnabledTrends();\n\t                        return trends[0].getData()[0].xVal;\n\t                    };\n\t                    TrendsManager.prototype.getEndXVal = function() {\n\t                        var trends = this.getEnabledTrends();\n\t                        var firstTrendData = trends[0].getData();\n\t                        return firstTrendData[firstTrendData.length - 1].xVal;\n\t                    };\n\t                    TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n\t                        var trends = this.getEnabledTrends();\n\t                        var compareFn;\n\t                        var result;\n\t                        if (extremumIsMax) {\n\t                            result = -Infinity;\n\t                            compareFn = Math.max;\n\t                        } else {\n\t                            result = Infinity;\n\t                            compareFn = Math.min;\n\t                        }\n\t                        for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n\t                            var trend = trends_1[_i];\n\t                            var trendData = trend.getData(fromX, toX);\n\t                            var trendYValues = trendData.map(function(dataItem) {\n\t                                return dataItem.yVal;\n\t                            });\n\t                            result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n\t                        }\n\t                        if (result == Infinity || result == -Infinity) result = NaN;\n\t                        return result;\n\t                    };\n\t                    TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n\t                        return this.getExtremumYVal(true, fromX, toX);\n\t                    };\n\t                    TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n\t                        return this.getExtremumYVal(false, fromX, toX);\n\t                    };\n\t                    TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n\t                        return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t                    };\n\t                    TrendsManager.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        this.chartState.onInitialStateApplied(function() {\n\t                            return _this.onInitialStateAppliedHandler();\n\t                        });\n\t                    };\n\t                    TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n\t                        var _this = this;\n\t                        var _loop_1 = function(trendName) {\n\t                            this_1.trends[trendName].segments.onRebuild(function() {\n\t                                return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n\t                            });\n\t                        };\n\t                        var this_1 = this;\n\t                        for (var trendName in this.trends) {\n\t                            _loop_1(trendName);\n\t                        }\n\t                    };\n\t                    TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n\t                        var trend = new Trend_1.Trend(state, trendName, initialState);\n\t                        this.trends[trendName] = trend;\n\t                        return trend;\n\t                    };\n\t                    return TrendsManager;\n\t                }();\n\t                exports.TrendsManager = TrendsManager;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var Utils_1 = __webpack_require__(14);\n\t                var TrendSegments_1 = __webpack_require__(18);\n\t                var EventEmmiter_1 = __webpack_require__(13);\n\t                var deps_1 = __webpack_require__(3);\n\t                var EVENTS = {\n\t                    CHANGE: \"Change\",\n\t                    PREPEND_REQUEST: \"prependRequest\"\n\t                };\n\t                (function(TREND_TYPE) {\n\t                    TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n\t                    TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n\t                })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n\t                var TREND_TYPE = exports.TREND_TYPE;\n\t                var DEFAULT_OPTIONS = {\n\t                    enabled: true,\n\t                    type: TREND_TYPE.LINE,\n\t                    data: [],\n\t                    maxSegmentLength: 1e3,\n\t                    lineWidth: 2,\n\t                    lineColor: 16777215,\n\t                    hasGradient: true,\n\t                    hasBeacon: false,\n\t                    settingsForTypes: {\n\t                        CANDLE: {\n\t                            minSegmentLengthInPx: 20,\n\t                            maxSegmentLengthInPx: 40\n\t                        },\n\t                        LINE: {\n\t                            minSegmentLengthInPx: 2,\n\t                            maxSegmentLengthInPx: 10\n\t                        }\n\t                    }\n\t                };\n\t                var Trend = function() {\n\t                    function Trend(chartState, trendName, initialState) {\n\t                        this.minXVal = Infinity;\n\t                        this.minYVal = Infinity;\n\t                        this.maxXVal = -Infinity;\n\t                        this.maxYVal = -Infinity;\n\t                        var options = initialState.trends[trendName];\n\t                        this.name = trendName;\n\t                        this.chartState = chartState;\n\t                        this.calculatedOptions = Utils_1.Utils.deepMerge(DEFAULT_OPTIONS, options);\n\t                        this.calculatedOptions.name = trendName;\n\t                        if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t                        this.calculatedOptions.dataset = [];\n\t                        this.ee = new EventEmmiter_1.EventEmitter();\n\t                        this.bindEvents();\n\t                    }\n\t                    Trend.prototype.onInitialStateApplied = function() {\n\t                        this.segments = new TrendSegments_1.TrendSegments(this.chartState, this);\n\t                    };\n\t                    Trend.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        var chartState = this.chartState;\n\t                        chartState.onInitialStateApplied(function() {\n\t                            return _this.onInitialStateApplied();\n\t                        });\n\t                        chartState.onScrollStop(function() {\n\t                            return _this.checkForPrependRequest();\n\t                        });\n\t                        chartState.onZoom(function() {\n\t                            return _this.checkForPrependRequest();\n\t                        });\n\t                        chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                            return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n\t                        });\n\t                        chartState.onDestroy(function() {\n\t                            return _this.ee.removeAllListeners();\n\t                        });\n\t                    };\n\t                    Trend.prototype.getCalculatedOptions = function() {\n\t                        return this.calculatedOptions;\n\t                    };\n\t                    Trend.prototype.appendData = function(rawData) {\n\t                        var options = this.getOptions();\n\t                        var newData = Trend.prepareData(rawData, this.getData());\n\t                        var updatedTrendData = options.data.concat(newData);\n\t                        this.changeData(updatedTrendData, newData);\n\t                    };\n\t                    Trend.prototype.prependData = function(rawData) {\n\t                        var options = this.getOptions();\n\t                        var newData = Trend.prepareData(rawData, this.getData(), true);\n\t                        var updatedTrendData = newData.concat(options.data);\n\t                        this.changeData(updatedTrendData, newData);\n\t                    };\n\t                    Trend.prototype.changeData = function(allData, newData) {\n\t                        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n\t                            var item = newData_1[_i];\n\t                            if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t                            if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t                            if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t                            if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t                        }\n\t                        var options = this.getOptions();\n\t                        var statePatch = {\n\t                            trends: (_a = {}, _a[options.name] = {\n\t                                data: allData\n\t                            }, _a)\n\t                        };\n\t                        this.chartState.setState(statePatch, newData);\n\t                        var _a;\n\t                    };\n\t                    Trend.prototype.getData = function(fromX, toX) {\n\t                        var data = this.getOptions().data;\n\t                        if (fromX == void 0 && toX == void 0) return data;\n\t                        fromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t                        toX = toX !== void 0 ? toX : data[data.length].xVal;\n\t                        var filteredData = [];\n\t                        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n\t                            var item = data_1[_i];\n\t                            if (item.xVal < fromX) continue;\n\t                            if (item.xVal > toX) break;\n\t                            filteredData.push(item);\n\t                        }\n\t                        return filteredData;\n\t                    };\n\t                    Trend.prototype.getFirstItem = function() {\n\t                        return this.getOptions().data[0];\n\t                    };\n\t                    Trend.prototype.getLastItem = function() {\n\t                        var data = this.getOptions().data;\n\t                        return data[data.length - 1];\n\t                    };\n\t                    Trend.prototype.getOptions = function() {\n\t                        return this.chartState.data.trends[this.name];\n\t                    };\n\t                    Trend.prototype.setOptions = function(options) {\n\t                        this.chartState.setState({\n\t                            trends: (_a = {}, _a[this.name] = options, _a)\n\t                        });\n\t                        var _a;\n\t                    };\n\t                    Trend.prototype.onPrependRequest = function(cb) {\n\t                        var _this = this;\n\t                        this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t                        return function() {\n\t                            _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t                        };\n\t                    };\n\t                    Trend.prototype.onChange = function(cb) {\n\t                        var _this = this;\n\t                        this.ee.on(EVENTS.CHANGE, cb);\n\t                        return function() {\n\t                            _this.ee.off(EVENTS.CHANGE, cb);\n\t                        };\n\t                    };\n\t                    Trend.prototype.onDataChange = function(cb) {\n\t                        var _this = this;\n\t                        var onChangeCb = function(changedOptions, newData) {\n\t                            if (newData) cb(newData);\n\t                        };\n\t                        this.ee.on(EVENTS.CHANGE, onChangeCb);\n\t                        return function() {\n\t                            _this.ee.off(EVENTS.CHANGE, onChangeCb);\n\t                        };\n\t                    };\n\t                    Trend.prototype.checkForPrependRequest = function() {\n\t                        var _this = this;\n\t                        if (this.prependRequest) return;\n\t                        var chartState = this.chartState;\n\t                        var minXVal = chartState.data.computedData.trends.minXVal;\n\t                        var minScreenX = chartState.getScreenXByValue(minXVal);\n\t                        var needToRequest = minScreenX > 0;\n\t                        var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                        var requestedDataLength = to - from;\n\t                        if (!needToRequest) return;\n\t                        this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n\t                            _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t                        });\n\t                        this.prependRequest.then(function(newData) {\n\t                            _this.prependData(newData);\n\t                            _this.prependRequest = null;\n\t                        }, function() {\n\t                            _this.prependRequest = null;\n\t                        });\n\t                    };\n\t                    Trend.prepareData = function(newData, currentData, isPrepend) {\n\t                        if (isPrepend === void 0) {\n\t                            isPrepend = false;\n\t                        }\n\t                        var data = [];\n\t                        if (typeof newData[0] == \"number\") {\n\t                            currentData = currentData || [];\n\t                            var initialItem = void 0;\n\t                            var xVal = void 0;\n\t                            if (isPrepend) {\n\t                                initialItem = currentData[0];\n\t                                xVal = initialItem.xVal - newData.length;\n\t                            } else {\n\t                                initialItem = currentData[currentData.length - 1];\n\t                                xVal = initialItem ? initialItem.xVal + 1 : 0;\n\t                            }\n\t                            for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n\t                                var yVal = _a[_i];\n\t                                data.push({\n\t                                    xVal: xVal,\n\t                                    yVal: yVal,\n\t                                    id: Utils_1.Utils.getUid()\n\t                                });\n\t                                xVal++;\n\t                            }\n\t                        } else {\n\t                            data = newData;\n\t                        }\n\t                        return data;\n\t                    };\n\t                    return Trend;\n\t                }();\n\t                exports.Trend = Trend;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var EventEmmiter_1 = __webpack_require__(13);\n\t                var Vector3 = THREE.Vector3;\n\t                var Trend_1 = __webpack_require__(17);\n\t                var Utils_1 = __webpack_require__(14);\n\t                var MAX_ANIMATED_SEGMENTS = 100;\n\t                var EVENTS = {\n\t                    REBUILD: \"rebuild\",\n\t                    DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n\t                    ANIMATION_FRAME: \"animationFrame\"\n\t                };\n\t                var TrendSegments = function() {\n\t                    function TrendSegments(chartState, trend) {\n\t                        this.segmentsById = {};\n\t                        this.segments = [];\n\t                        this.animatedSegmentsIds = [];\n\t                        this.segmentsLength = 0;\n\t                        this.animatedSegmentsForAppend = [];\n\t                        this.animatedSegmentsForPrepend = [];\n\t                        this.nextEmptyId = 0;\n\t                        this.startSegmentId = 0;\n\t                        this.endSegmentId = 0;\n\t                        this.chartState = chartState;\n\t                        this.ee = new EventEmmiter_1.EventEmitter();\n\t                        this.trend = trend;\n\t                        this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t                        this.tryToRebuildSegments();\n\t                        this.bindEvents();\n\t                    }\n\t                    TrendSegments.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        this.trend.onChange(function(changedOptions, newData) {\n\t                            return _this.onTrendChangeHandler(changedOptions, newData);\n\t                        });\n\t                        this.chartState.onZoom(function() {\n\t                            return _this.onZoomHandler();\n\t                        });\n\t                        this.chartState.onScroll(function() {\n\t                            return _this.recalculateDisplayedRange();\n\t                        });\n\t                        this.chartState.onDestroy(function() {\n\t                            return _this.onDestroyHandler();\n\t                        });\n\t                    };\n\t                    TrendSegments.prototype.onDestroyHandler = function() {\n\t                        this.ee.removeAllListeners();\n\t                        this.appendAnimation && this.appendAnimation.kill();\n\t                        this.prependAnimation && this.prependAnimation.kill();\n\t                    };\n\t                    TrendSegments.prototype.onZoomHandler = function() {\n\t                        var segmentsRebuilded = this.tryToRebuildSegments();\n\t                        if (!segmentsRebuilded) {\n\t                            this.recalculateDisplayedRange();\n\t                        }\n\t                    };\n\t                    TrendSegments.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n\t                        var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n\t                        if (needToRebuildSegments) {\n\t                            this.tryToRebuildSegments(true);\n\t                            return;\n\t                        }\n\t                        if (!newData) return;\n\t                        var data = this.trend.getData();\n\t                        var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                        isAppend ? this.appendData(newData) : this.prependData(newData);\n\t                        this.recalculateDisplayedRange();\n\t                    };\n\t                    TrendSegments.prototype.getEndSegment = function() {\n\t                        return this.segmentsById[this.endSegmentId];\n\t                    };\n\t                    TrendSegments.prototype.getStartSegment = function() {\n\t                        return this.segmentsById[this.startSegmentId];\n\t                    };\n\t                    TrendSegments.prototype.tryToRebuildSegments = function(force) {\n\t                        if (force === void 0) {\n\t                            force = false;\n\t                        }\n\t                        var options = this.trend.getOptions();\n\t                        var trendTypeName = Trend_1.TREND_TYPE[options.type];\n\t                        var trendTypesSettings = options.settingsForTypes;\n\t                        var trendTypeSettings = trendTypesSettings[trendTypeName];\n\t                        var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n\t                        var needToRebuild = this.segments.length === 0 || force;\n\t                        var segmentLength = this.maxSegmentLength;\n\t                        var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t                        var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\t                        if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t                            needToRebuild = true;\n\t                            segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t                        } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t                            needToRebuild = true;\n\t                            segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t                        }\n\t                        if (!needToRebuild) return false;\n\t                        this.maxSegmentLength = segmentLength;\n\t                        this.segmentsById = {};\n\t                        this.segments = [];\n\t                        this.nextEmptyId = 0;\n\t                        this.startSegmentId = 0;\n\t                        this.endSegmentId = 0;\n\t                        this.segmentsLength = 0;\n\t                        this.stopAllAnimations();\n\t                        this.appendData(null, true);\n\t                        this.recalculateDisplayedRange(true);\n\t                        this.ee.emit(EVENTS.REBUILD);\n\t                    };\n\t                    TrendSegments.prototype.stopAllAnimations = function() {\n\t                        this.animatedSegmentsIds = [];\n\t                        this.animatedSegmentsForAppend = [];\n\t                        this.animatedSegmentsForAppend = [];\n\t                        if (this.prependAnimation) this.prependAnimation.kill();\n\t                        if (this.appendAnimation) this.appendAnimation.kill();\n\t                    };\n\t                    TrendSegments.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n\t                        if (segmentsAreRebuilded === void 0) {\n\t                            segmentsAreRebuilded = false;\n\t                        }\n\t                        var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                        var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n\t                        var displayedRange = to - from;\n\t                        this.firstDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, from - displayedRange, \"startXVal\");\n\t                        this.lastDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, to + displayedRange, \"endXVal\");\n\t                        if (segmentsAreRebuilded) return;\n\t                        var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n\t                        if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t                    };\n\t                    TrendSegments.prototype.getSegmentsForXValues = function(values) {\n\t                        var valueInd = 0;\n\t                        var value = values[valueInd];\n\t                        var lastValueInd = values.length - 1;\n\t                        var results = [];\n\t                        var segment = this.getStartSegment();\n\t                        if (!segment.hasValue) return [];\n\t                        while (segment) {\n\t                            while (value < segment.startXVal) {\n\t                                results.push(void 0);\n\t                                value = values[++valueInd];\n\t                            }\n\t                            while (value > segment.endXVal) {\n\t                                segment = segment.getNext();\n\t                                if (!segment) break;\n\t                            }\n\t                            var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n\t                            if (valueInPoint) {\n\t                                results.push(segment);\n\t                                value = values[++valueInd];\n\t                            }\n\t                            if (valueInd > lastValueInd) break;\n\t                        }\n\t                        return results;\n\t                    };\n\t                    TrendSegments.prototype.onAnimationFrame = function(cb) {\n\t                        return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t                    };\n\t                    TrendSegments.prototype.onRebuild = function(cb) {\n\t                        return this.ee.subscribe(EVENTS.REBUILD, cb);\n\t                    };\n\t                    TrendSegments.prototype.onDisplayedRangeChanged = function(cb) {\n\t                        return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t                    };\n\t                    TrendSegments.prototype.allocateNextSegment = function() {\n\t                        var id = this.nextEmptyId++;\n\t                        var segment = new TrendSegment(this, id);\n\t                        var prevSegment = this.segmentsById[this.endSegmentId];\n\t                        if (prevSegment && prevSegment.hasValue) {\n\t                            prevSegment.nextId = id;\n\t                            segment.prevId = prevSegment.id;\n\t                        }\n\t                        this.endSegmentId = id;\n\t                        this.segmentsLength++;\n\t                        this.segmentsById[id] = segment;\n\t                        this.segments.push(segment);\n\t                        return segment;\n\t                    };\n\t                    TrendSegments.prototype.allocatePrevSegment = function() {\n\t                        var id = this.nextEmptyId++;\n\t                        var segment = new TrendSegment(this, id);\n\t                        var nextSegment = this.segmentsById[this.startSegmentId];\n\t                        if (nextSegment && nextSegment.hasValue) {\n\t                            nextSegment.prevId = id;\n\t                            segment.nextId = nextSegment.id;\n\t                        }\n\t                        this.startSegmentId = id;\n\t                        this.segmentsLength++;\n\t                        this.segmentsById[id] = segment;\n\t                        this.segments.unshift(segment);\n\t                        return segment;\n\t                    };\n\t                    TrendSegments.prototype.appendData = function(newData, needRebuildSegments) {\n\t                        if (needRebuildSegments === void 0) {\n\t                            needRebuildSegments = false;\n\t                        }\n\t                        var trendData = this.trend.getData();\n\t                        if (needRebuildSegments) {\n\t                            newData = trendData;\n\t                            this.animatedSegmentsForAppend = [];\n\t                        }\n\t                        var startItemInd = trendData.length - newData.length;\n\t                        var segment = this.getEndSegment() || this.allocateNextSegment();\n\t                        var initialSegment = segment.hasValue ? segment : null;\n\t                        var initialAnimationState = segment.createAnimationState();\n\t                        var itemInd = 0;\n\t                        while (itemInd < newData.length) {\n\t                            var item = newData[itemInd];\n\t                            var itemIsInserted = segment.appendItem(item);\n\t                            var isLastItem = itemInd == newData.length - 1;\n\t                            if (itemIsInserted) {\n\t                                if (!isLastItem) itemInd++;\n\t                            } else {\n\t                                if (!segment.isCompleted) segment.complete();\n\t                            }\n\t                            if (isLastItem && itemIsInserted) {\n\t                                segment.recalculateItems();\n\t                            }\n\t                            var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                            if (segmentIsReadyForAnimate) {\n\t                                var id = segment.id;\n\t                                if (!initialSegment) initialSegment = segment;\n\t                                if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                                if (this.animatedSegmentsForAppend.length > 0) {\n\t                                    segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t                                    segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t                                }\n\t                                segment.targetAnimationState = segment.createAnimationState();\n\t                                this.animatedSegmentsForAppend.push(id);\n\t                            }\n\t                            if (isLastItem && itemIsInserted) break;\n\t                            if (!segment.isCompleted) continue;\n\t                            segment = this.allocateNextSegment();\n\t                            var prevItem = trendData[startItemInd + itemInd - 1];\n\t                            segment.appendItem(prevItem);\n\t                        }\n\t                        var animationsOptions = this.chartState.data.animations;\n\t                        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                        if (needRebuildSegments) {\n\t                            for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n\t                                var segmentId = _a[_i];\n\t                                var segment_1 = this.segmentsById[segmentId];\n\t                                segment_1.currentAnimationState = segment_1.createAnimationState();\n\t                            }\n\t                            this.animatedSegmentsForAppend = [];\n\t                            return;\n\t                        }\n\t                        if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                        this.animate(time);\n\t                    };\n\t                    TrendSegments.prototype.prependData = function(newData) {\n\t                        var trendData = this.trend.getData();\n\t                        var segment = this.getStartSegment() || this.segmentsById[0];\n\t                        var initialSegment = segment.hasValue ? segment : null;\n\t                        var itemInd = newData.length - 1;\n\t                        var initialAnimationState = segment.createAnimationState();\n\t                        while (itemInd >= 0) {\n\t                            var item = newData[itemInd];\n\t                            var itemIsInserted = segment.prependItem(item);\n\t                            var isLastItem = itemInd == 0;\n\t                            if (itemIsInserted) {\n\t                                if (!isLastItem) itemInd--;\n\t                            } else {\n\t                                if (!segment.isCompleted) segment.complete();\n\t                            }\n\t                            if (isLastItem && itemIsInserted) {\n\t                                segment.recalculateItems();\n\t                            }\n\t                            var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                            if (segmentIsReadyForAnimate) {\n\t                                var id = segment.id;\n\t                                if (!initialSegment) initialSegment = segment;\n\t                                if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                                if (this.animatedSegmentsForPrepend.length > 0) {\n\t                                    segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t                                    segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n\t                                }\n\t                                segment.targetAnimationState = segment.createAnimationState();\n\t                                this.animatedSegmentsForPrepend.push(id);\n\t                            }\n\t                            if (isLastItem && itemIsInserted) break;\n\t                            if (!segment.isCompleted) continue;\n\t                            segment = this.allocatePrevSegment();\n\t                            var nextItem = trendData[itemInd + 1];\n\t                            segment.prependItem(nextItem);\n\t                        }\n\t                        var animationsOptions = this.chartState.data.animations;\n\t                        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                        if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                        this.animate(time, true);\n\t                    };\n\t                    TrendSegments.prototype.animate = function(time, isPrepend) {\n\t                        var _this = this;\n\t                        if (isPrepend === void 0) {\n\t                            isPrepend = false;\n\t                        }\n\t                        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                        var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\t                        if (animation && animation.isActive() || time == 0) {\n\t                            if (animation) animation.kill();\n\t                            this.onAnimationFrameHandler(1, isPrepend);\n\t                            animatedSegmentsIds.length = 0;\n\t                            return;\n\t                        }\n\t                        var animationsOptions = this.chartState.data.animations;\n\t                        var ease = animationsOptions.trendChangeEase;\n\t                        var objectToAnimate = {\n\t                            animationValue: 0\n\t                        };\n\t                        animation = TweenLite.to(objectToAnimate, time, {\n\t                            animationValue: 1,\n\t                            ease: ease\n\t                        });\n\t                        animation.eventCallback(\"onUpdate\", function() {\n\t                            return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n\t                        });\n\t                        animation.eventCallback(\"onComplete\", function() {\n\t                            animatedSegmentsIds.length = 0;\n\t                            _this.appendAnimation = null;\n\t                        });\n\t                        if (isPrepend) {\n\t                            this.prependAnimation = animation;\n\t                        } else {\n\t                            this.appendAnimation = animation;\n\t                        }\n\t                    };\n\t                    TrendSegments.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n\t                        if (isPrepend === void 0) {\n\t                            isPrepend = false;\n\t                        }\n\t                        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                        for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n\t                            var segmentId = animatedSegmentsIds_1[_i];\n\t                            var segment = this.segmentsById[segmentId];\n\t                            for (var key in segment.targetAnimationState) {\n\t                                var targetValue = segment.targetAnimationState[key];\n\t                                var initialValue = segment.initialAnimationState[key];\n\t                                var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t                                segment.currentAnimationState[key] = currentValue;\n\t                            }\n\t                        }\n\t                        this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t                        this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t                    };\n\t                    return TrendSegments;\n\t                }();\n\t                exports.TrendSegments = TrendSegments;\n\t                var TrendSegment = function() {\n\t                    function TrendSegment(trendPoints, id) {\n\t                        this.isCompleted = false;\n\t                        this.items = [];\n\t                        this.initialAnimationState = {};\n\t                        this.targetAnimationState = {};\n\t                        this.currentAnimationState = {};\n\t                        this.trendSegments = trendPoints;\n\t                        this.id = id;\n\t                        this.maxLength = trendPoints.maxSegmentLength;\n\t                    }\n\t                    TrendSegment.prototype.createAnimationState = function() {\n\t                        var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n\t                        return {\n\t                            xVal: xVal,\n\t                            yVal: yVal,\n\t                            startXVal: startXVal,\n\t                            startYVal: startYVal,\n\t                            endXVal: endXVal,\n\t                            endYVal: endYVal,\n\t                            maxYVal: maxYVal,\n\t                            minYVal: minYVal,\n\t                            maxLength: maxLength\n\t                        };\n\t                    };\n\t                    TrendSegment.prototype.appendItem = function(item) {\n\t                        if (this.isCompleted) return false;\n\t                        var items = this.items;\n\t                        if (items.length < 2) {\n\t                            this.items.push(item);\n\t                            this.hasValue = true;\n\t                            return true;\n\t                        }\n\t                        var startXVal = items[0].xVal;\n\t                        if (item.xVal - startXVal > this.maxLength) return false;\n\t                        items.push(item);\n\t                        return true;\n\t                    };\n\t                    TrendSegment.prototype.prependItem = function(item) {\n\t                        if (this.isCompleted) return false;\n\t                        var items = this.items;\n\t                        if (items.length < 2) {\n\t                            this.items.unshift(item);\n\t                            this.hasValue = true;\n\t                            return true;\n\t                        }\n\t                        var endXVal = items[items.length - 1].xVal;\n\t                        if (endXVal - item.xVal > this.maxLength) return false;\n\t                        items.unshift(item);\n\t                        return true;\n\t                    };\n\t                    TrendSegment.prototype.complete = function() {\n\t                        this.isCompleted = true;\n\t                        this.recalculateItems();\n\t                        this.items = [];\n\t                    };\n\t                    TrendSegment.prototype.recalculateItems = function() {\n\t                        var items = this.items;\n\t                        var itemsLength = items.length;\n\t                        if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n\t                        var endItem = items[itemsLength - 1];\n\t                        var endXVal = endItem.xVal, endYVal = endItem.yVal;\n\t                        var startXVal, startYVal;\n\t                        var startItem = items[0];\n\t                        startXVal = startItem.xVal;\n\t                        startYVal = startItem.yVal;\n\t                        var minX = Math.min(startXVal, endXVal);\n\t                        var maxX = Math.max(startXVal, endXVal);\n\t                        var middleXVal = minX + (maxX - minX) / 2;\n\t                        var minY = Math.min(startYVal, endYVal);\n\t                        var maxY = Math.max(startYVal, endYVal);\n\t                        var middleYVal = minY + (maxY - minY) / 2;\n\t                        var yVals = items.map(function(item) {\n\t                            return item.yVal;\n\t                        });\n\t                        this.startXVal = startXVal;\n\t                        this.startYVal = startYVal;\n\t                        this.endXVal = endXVal;\n\t                        this.endYVal = endYVal;\n\t                        this.xVal = middleXVal;\n\t                        this.yVal = middleYVal;\n\t                        this.maxYVal = Math.max.apply(Math, yVals);\n\t                        this.minYVal = Math.min.apply(Math, yVals);\n\t                        if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t                    };\n\t                    TrendSegment.prototype.getNext = function() {\n\t                        var nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t                        return nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t                    };\n\t                    TrendSegment.prototype.getPrev = function() {\n\t                        var prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t                        return prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t                    };\n\t                    TrendSegment.prototype.getFrameVal = function() {\n\t                        var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n\t                        return new Vector3(xVal, yVal, 0);\n\t                    };\n\t                    TrendSegment.prototype.getFramePoint = function() {\n\t                        var frameVal = this.getFrameVal();\n\t                        return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t                    };\n\t                    return TrendSegment;\n\t                }();\n\t                exports.TrendSegment = TrendSegment;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var Vector3 = THREE.Vector3;\n\t                var EventEmmiter_1 = __webpack_require__(13);\n\t                var Screen = function() {\n\t                    function Screen(chartState) {\n\t                        this.options = {\n\t                            scrollXVal: 0,\n\t                            scrollX: 0,\n\t                            scrollYVal: 0,\n\t                            scrollY: 0,\n\t                            zoomX: 1,\n\t                            zoomY: 1\n\t                        };\n\t                        this.currentScrollX = {\n\t                            x: 0\n\t                        };\n\t                        this.currentScrollY = {\n\t                            y: 0\n\t                        };\n\t                        this.currentZoomX = {\n\t                            val: 1\n\t                        };\n\t                        this.currentZoomY = {\n\t                            val: 1\n\t                        };\n\t                        this.chartState = chartState;\n\t                        var _a = chartState.data, w = _a.width, h = _a.height;\n\t                        this.ee = new EventEmmiter_1.EventEmitter();\n\t                        this.transform({\n\t                            scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n\t                            zoomY: 1\n\t                        });\n\t                        this.bindEvents();\n\t                    }\n\t                    Screen.prototype.getCameraSettings = function() {\n\t                        var _a = this.chartState.data, w = _a.width, h = _a.height;\n\t                        var FOV = 75;\n\t                        var vFOV = FOV * (Math.PI / 180);\n\t                        return {\n\t                            FOV: FOV,\n\t                            aspect: w / h,\n\t                            near: .1,\n\t                            far: 5e3,\n\t                            z: h / (2 * Math.tan(vFOV / 2)),\n\t                            x: w / 2,\n\t                            y: h / 2\n\t                        };\n\t                    };\n\t                    Screen.prototype.onZoomFrame = function(cb) {\n\t                        var _this = this;\n\t                        var eventName = \"zoomFrame\";\n\t                        this.ee.on(eventName, cb);\n\t                        return function() {\n\t                            _this.ee.off(eventName, cb);\n\t                        };\n\t                    };\n\t                    Screen.prototype.onScrollFrame = function(cb) {\n\t                        var _this = this;\n\t                        var eventName = \"scrollFrame\";\n\t                        this.ee.on(eventName, cb);\n\t                        return function() {\n\t                            _this.ee.off(eventName, cb);\n\t                        };\n\t                    };\n\t                    Screen.prototype.onTransformationFrame = function(cb) {\n\t                        var _this = this;\n\t                        var eventName = \"transformationFrame\";\n\t                        this.ee.on(eventName, cb);\n\t                        return function() {\n\t                            _this.ee.off(eventName, cb);\n\t                        };\n\t                    };\n\t                    Screen.prototype.cameraIsMoving = function() {\n\t                        return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n\t                    };\n\t                    Screen.prototype.transform = function(options, silent) {\n\t                        if (silent === void 0) {\n\t                            silent = false;\n\t                        }\n\t                        var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n\t                        if (scrollX != void 0) this.options.scrollX = scrollX;\n\t                        if (scrollY != void 0) this.options.scrollY = scrollY;\n\t                        if (zoomX != void 0) this.options.zoomX = zoomX;\n\t                        if (zoomY != void 0) this.options.zoomY = zoomY;\n\t                        if (scrollX != void 0 || zoomX) {\n\t                            options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t                            this.options.scrollXVal = options.scrollXVal;\n\t                        }\n\t                        if (scrollY != void 0 || zoomY) {\n\t                            options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t                            this.options.scrollYVal = options.scrollYVal;\n\t                        }\n\t                        if (silent) return;\n\t                        this.ee.emit(\"transformationFrame\", options);\n\t                        if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t                            this.ee.emit(\"scrollFrame\", options);\n\t                        }\n\t                        if (options.zoomX != void 0 || options.zoomY != void 0) {\n\t                            this.ee.emit(\"zoomFrame\", options);\n\t                        }\n\t                    };\n\t                    Screen.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        var state = this.chartState;\n\t                        state.onChange(function(changedProps) {\n\t                            if (changedProps.xAxis && changedProps.xAxis.range) {\n\t                                if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n\t                                if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n\t                            }\n\t                            if (changedProps.yAxis && changedProps.yAxis.range) {\n\t                                if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n\t                                if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n\t                            }\n\t                        });\n\t                        state.onDestroy(function() {\n\t                            return _this.onDestroyHandler();\n\t                        });\n\t                    };\n\t                    Screen.prototype.onDestroyHandler = function() {\n\t                        this.ee.removeAllListeners();\n\t                        this.scrollXAnimation && this.scrollXAnimation.kill();\n\t                        this.scrollYAnimation && this.scrollYAnimation.kill();\n\t                        this.zoomXAnimation && this.zoomXAnimation.kill();\n\t                        this.zoomYAnimation && this.zoomYAnimation.kill();\n\t                    };\n\t                    Screen.prototype.onScrollXHandler = function(changedProps) {\n\t                        var _this = this;\n\t                        var state = this.chartState;\n\t                        var isDragMode = state.data.cursor.dragMode;\n\t                        var animations = state.data.animations;\n\t                        var canAnimate = animations.enabled && !isDragMode;\n\t                        var zoomXChanged = changedProps.xAxis.range.zoom;\n\t                        var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n\t                        var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t                        var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t                        if (this.scrollXAnimation) this.scrollXAnimation.pause();\n\t                        var range = state.data.xAxis.range;\n\t                        var targetX = range.scroll * range.scaleFactor * range.zoom;\n\t                        this.currentScrollX.x = this.options.scrollX;\n\t                        var cb = function() {\n\t                            _this.transform({\n\t                                scrollX: _this.currentScrollX.x\n\t                            });\n\t                        };\n\t                        if (canAnimate) {\n\t                            this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t                                x: targetX,\n\t                                ease: ease\n\t                            });\n\t                            this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n\t                        } else {\n\t                            this.currentScrollX.x = targetX;\n\t                            cb();\n\t                        }\n\t                    };\n\t                    Screen.prototype.onScrollYHandler = function() {\n\t                        var _this = this;\n\t                        var state = this.chartState;\n\t                        var animations = state.data.animations;\n\t                        var canAnimate = animations.enabled;\n\t                        var time = animations.zoomSpeed;\n\t                        if (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t                        var range = state.data.yAxis.range;\n\t                        var targetY = range.scroll * range.scaleFactor * range.zoom;\n\t                        this.currentScrollY.y = this.options.scrollY;\n\t                        var cb = function() {\n\t                            _this.transform({\n\t                                scrollY: _this.currentScrollY.y\n\t                            });\n\t                        };\n\t                        if (canAnimate) {\n\t                            this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t                                y: targetY,\n\t                                ease: animations.zoomEase\n\t                            });\n\t                            this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n\t                        } else {\n\t                            this.currentScrollY.y = targetY;\n\t                            cb();\n\t                        }\n\t                    };\n\t                    Screen.prototype.onZoomXHandler = function() {\n\t                        var _this = this;\n\t                        var state = this.chartState;\n\t                        var animations = state.data.animations;\n\t                        var canAnimate = animations.enabled;\n\t                        var time = animations.zoomSpeed;\n\t                        var targetZoom = state.data.xAxis.range.zoom;\n\t                        if (this.zoomXAnimation) this.zoomXAnimation.pause();\n\t                        var cb = function() {\n\t                            _this.transform({\n\t                                zoomX: _this.currentZoomX.val\n\t                            });\n\t                        };\n\t                        if (canAnimate) {\n\t                            this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t                                val: targetZoom,\n\t                                ease: animations.zoomEase\n\t                            });\n\t                            this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n\t                        } else {\n\t                            this.currentZoomX.val = targetZoom;\n\t                            cb();\n\t                        }\n\t                    };\n\t                    Screen.prototype.onZoomYHandler = function() {\n\t                        var _this = this;\n\t                        var state = this.chartState;\n\t                        var animations = state.data.animations;\n\t                        var canAnimate = animations.enabled;\n\t                        var time = animations.zoomSpeed;\n\t                        var targetZoom = state.data.yAxis.range.zoom;\n\t                        if (this.zoomYAnimation) this.zoomYAnimation.pause();\n\t                        var cb = function() {\n\t                            _this.transform({\n\t                                zoomY: _this.currentZoomY.val\n\t                            });\n\t                        };\n\t                        if (canAnimate) {\n\t                            this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t                                val: targetZoom,\n\t                                ease: animations.zoomEase\n\t                            });\n\t                            this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n\t                        } else {\n\t                            this.currentZoomY.val = targetZoom;\n\t                            cb();\n\t                        }\n\t                    };\n\t                    Screen.prototype.getPointOnXAxis = function(xVal) {\n\t                        var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                        var zoom = this.options.zoomX;\n\t                        return (xVal - zeroVal) * scaleFactor * zoom;\n\t                    };\n\t                    Screen.prototype.getPointOnYAxis = function(yVal) {\n\t                        var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                        var zoom = this.options.zoomY;\n\t                        return (yVal - zeroVal) * scaleFactor * zoom;\n\t                    };\n\t                    Screen.prototype.getPointOnChart = function(xVal, yVal) {\n\t                        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t                    };\n\t                    Screen.prototype.getValueOnXAxis = function(x) {\n\t                        return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t                    };\n\t                    Screen.prototype.valueToPxByXAxis = function(xVal) {\n\t                        return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n\t                    };\n\t                    Screen.prototype.valueToPxByYAxis = function(yVal) {\n\t                        return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n\t                    };\n\t                    Screen.prototype.pxToValueByXAxis = function(xVal) {\n\t                        return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n\t                    };\n\t                    Screen.prototype.pxToValueByYAxis = function(yVal) {\n\t                        return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n\t                    };\n\t                    Screen.prototype.getValueByScreenX = function(x) {\n\t                        return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t                    };\n\t                    Screen.prototype.getValueByScreenY = function(y) {\n\t                        return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t                    };\n\t                    Screen.prototype.getScreenXByValue = function(xVal) {\n\t                        var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t                    };\n\t                    Screen.prototype.getScreenXByPoint = function(xVal) {\n\t                        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t                    };\n\t                    Screen.prototype.getPointByScreenX = function(screenX) {\n\t                        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t                    };\n\t                    Screen.prototype.getPointByScreenY = function(screenY) {\n\t                        return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t                    };\n\t                    Screen.prototype.getTop = function() {\n\t                        return this.getPointByScreenY(this.chartState.data.height);\n\t                    };\n\t                    Screen.prototype.getBottom = function() {\n\t                        return this.getPointByScreenY(0);\n\t                    };\n\t                    Screen.prototype.getLeft = function() {\n\t                        return this.getPointByScreenX(0);\n\t                    };\n\t                    Screen.prototype.getScreenRightVal = function() {\n\t                        return this.getValueByScreenX(this.chartState.data.width);\n\t                    };\n\t                    Screen.prototype.getTopVal = function() {\n\t                        return this.getValueByScreenY(this.chartState.data.height);\n\t                    };\n\t                    Screen.prototype.getBottomVal = function() {\n\t                        return this.getValueByScreenY(0);\n\t                    };\n\t                    Screen.prototype.getCenterYVal = function() {\n\t                        return this.getValueByScreenY(this.chartState.data.height / 2);\n\t                    };\n\t                    return Screen;\n\t                }();\n\t                exports.Screen = Screen;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Utils_1 = __webpack_require__(14);\n\t                var interfaces_1 = __webpack_require__(21);\n\t                var EventEmmiter_1 = __webpack_require__(13);\n\t                var AXIS_MARK_DEFAULT_OPTIONS = {\n\t                    type: \"simple\",\n\t                    lineWidth: 1,\n\t                    value: 0,\n\t                    showValue: false,\n\t                    stickToEdges: false,\n\t                    lineColor: \"#FFFFFF\",\n\t                    title: \"\"\n\t                };\n\t                var AxisMarks = function() {\n\t                    function AxisMarks(chartState, axisType) {\n\t                        this.items = {};\n\t                        this.chartState = chartState;\n\t                        this.ee = new EventEmmiter_1.EventEmitter();\n\t                        this.axisType = axisType;\n\t                        var marks = this.items;\n\t                        var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n\t                        for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n\t                            var options = axisMarksOptions_1[_i];\n\t                            var axisMark = void 0;\n\t                            options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t                            if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n\t                            if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n\t                            if (options.type == \"timeleft\") {\n\t                                axisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t                            } else {\n\t                                axisMark = new AxisMark(chartState, axisType, options);\n\t                            }\n\t                            marks[options.name] = axisMark;\n\t                        }\n\t                        this.bindEvents();\n\t                    }\n\t                    AxisMarks.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                            _this.onTrendChange(trendName, newData);\n\t                        });\n\t                        this.chartState.onDestroy(function() {\n\t                            return _this.ee.removeAllListeners();\n\t                        });\n\t                    };\n\t                    AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n\t                        if (!newData) return;\n\t                        var startVal = newData[0].xVal;\n\t                        var endVal = newData[newData.length - 1].xVal;\n\t                        var marks = this.items;\n\t                        for (var markName in marks) {\n\t                            var mark = marks[markName];\n\t                            var markVal = mark.options.value;\n\t                            var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n\t                            if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n\t                        }\n\t                    };\n\t                    AxisMarks.prototype.getItems = function() {\n\t                        return this.items;\n\t                    };\n\t                    AxisMarks.prototype.getItem = function(markName) {\n\t                        return this.items[markName];\n\t                    };\n\t                    return AxisMarks;\n\t                }();\n\t                exports.AxisMarks = AxisMarks;\n\t                var AxisMark = function() {\n\t                    function AxisMark(chartState, axisType, options) {\n\t                        this.renderOnTrendsChange = false;\n\t                        this.ee = new EventEmmiter_1.EventEmitter();\n\t                        this.options = options;\n\t                        this.axisType = axisType;\n\t                        this.chartState = chartState;\n\t                        this.bindEvents();\n\t                    }\n\t                    AxisMark.prototype.bindEvents = function() {};\n\t                    AxisMark.prototype.setOptions = function(newOptions) {\n\t                        var value = this.options.value;\n\t                        this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n\t                        if (this.options.value !== value) this.ee.emit(\"valueChange\");\n\t                        this.ee.emit(\"onDisplayedValueChange\");\n\t                    };\n\t                    AxisMark.prototype.getDisplayedVal = function() {\n\t                        var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n\t                        return String(displayedValue !== void 0 ? displayedValue : value);\n\t                    };\n\t                    AxisMark.prototype.onMarkCrossed = function(cb) {\n\t                        var _this = this;\n\t                        this.ee.on(\"markCrossed\", cb);\n\t                        return function() {\n\t                            _this.ee.off(\"markCrossed\", cb);\n\t                        };\n\t                    };\n\t                    AxisMark.prototype.onValueChange = function(cb) {\n\t                        var _this = this;\n\t                        this.ee.on(\"valueChange\", cb);\n\t                        return function() {\n\t                            _this.ee.off(\"valueChange\", cb);\n\t                        };\n\t                    };\n\t                    AxisMark.prototype.onDisplayedValueChange = function(cb) {\n\t                        var _this = this;\n\t                        this.ee.on(\"onDisplayedValueChange\", cb);\n\t                        return function() {\n\t                            _this.ee.off(\"onDisplayedValueChange\", cb);\n\t                        };\n\t                    };\n\t                    AxisMark.typeName = \"simple\";\n\t                    return AxisMark;\n\t                }();\n\t                exports.AxisMark = AxisMark;\n\t                var AxisTimeleftMark = function(_super) {\n\t                    __extends(AxisTimeleftMark, _super);\n\t                    function AxisTimeleftMark() {\n\t                        _super.apply(this, arguments);\n\t                        this.renderOnTrendsChange = true;\n\t                    }\n\t                    AxisTimeleftMark.prototype.getDisplayedVal = function() {\n\t                        var markVal = this.options.value;\n\t                        var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n\t                        var time = markVal - maxXVal;\n\t                        if (time < 0) time = 0;\n\t                        return Utils_1.Utils.msToTimeString(time);\n\t                    };\n\t                    AxisTimeleftMark.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        this.chartState.onTrendsChange(function() {\n\t                            return _this.onTrendsChange();\n\t                        });\n\t                    };\n\t                    AxisTimeleftMark.prototype.onTrendsChange = function() {\n\t                        this.ee.emit(\"onDisplayedValueChange\");\n\t                    };\n\t                    AxisTimeleftMark.typeName = \"timeleft\";\n\t                    return AxisTimeleftMark;\n\t                }(AxisMark);\n\t                exports.AxisTimeleftMark = AxisTimeleftMark;\n\t            }, function(module, exports) {\n\t                \"use strict\";\n\t                (function(AXIS_RANGE_TYPE) {\n\t                    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n\t                    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n\t                    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n\t                    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n\t                })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n\t                var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n\t                (function(AXIS_TYPE) {\n\t                    AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n\t                    AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n\t                })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n\t                var AXIS_TYPE = exports.AXIS_TYPE;\n\t                (function(AXIS_DATA_TYPE) {\n\t                    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n\t                    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n\t                })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n\t                var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Mesh = THREE.Mesh;\n\t                var Object3D = THREE.Object3D;\n\t                var Widget_1 = __webpack_require__(15);\n\t                var GridWidget_1 = __webpack_require__(23);\n\t                var Utils_1 = __webpack_require__(14);\n\t                var interfaces_1 = __webpack_require__(21);\n\t                var AxisWidget = function(_super) {\n\t                    __extends(AxisWidget, _super);\n\t                    function AxisWidget(state) {\n\t                        var _this = this;\n\t                        _super.call(this, state);\n\t                        this.isDestroyed = false;\n\t                        this.object3D = new Object3D();\n\t                        this.axisXObject = new Object3D();\n\t                        this.axisYObject = new Object3D();\n\t                        this.object3D.add(this.axisXObject);\n\t                        this.object3D.add(this.axisYObject);\n\t                        this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t                        this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n\t                            return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                        }, 1e3);\n\t                        this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n\t                    }\n\t                    AxisWidget.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        var state = this.chartState;\n\t                        this.bindEvent(state.screen.onTransformationFrame(function(options) {\n\t                            _this.onScrollChange(options.scrollX, options.scrollY);\n\t                        }), state.screen.onZoomFrame(function(options) {\n\t                            _this.onZoomFrame(options);\n\t                        }), state.onDestroy(function() {\n\t                            return _this.onDestroy();\n\t                        }), state.onResize(function() {\n\t                            return _this.onResize();\n\t                        }));\n\t                    };\n\t                    AxisWidget.prototype.onDestroy = function() {\n\t                        this.isDestroyed = true;\n\t                        this.unbindEvents();\n\t                    };\n\t                    AxisWidget.prototype.onScrollChange = function(x, y) {\n\t                        if (y != void 0) {\n\t                            this.axisYObject.position.y = y;\n\t                            this.axisXObject.position.y = y;\n\t                        }\n\t                        if (x != void 0) {\n\t                            this.axisYObject.position.x = x;\n\t                            this.updateAxisXRequest();\n\t                        }\n\t                    };\n\t                    AxisWidget.prototype.onResize = function() {\n\t                        this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t                    };\n\t                    AxisWidget.prototype.setupAxis = function(orientation) {\n\t                        var _this = this;\n\t                        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                        var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                        var canvasWidth = 0, canvasHeight = 0;\n\t                        if (isXAxis) {\n\t                            this.axisXObject.traverse(function(obj) {\n\t                                return _this.axisXObject.remove(obj);\n\t                            });\n\t                            canvasWidth = visibleWidth * 3;\n\t                            canvasHeight = 50;\n\t                        } else {\n\t                            this.axisYObject.traverse(function(obj) {\n\t                                return _this.axisYObject.remove(obj);\n\t                            });\n\t                            canvasWidth = 50;\n\t                            canvasHeight = visibleHeight * 3;\n\t                        }\n\t                        var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n\t                            ctx.beginPath();\n\t                            ctx.font = \"10px Arial\";\n\t                            ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t                            ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n\t                        });\n\t                        var material = new THREE.MeshBasicMaterial({\n\t                            map: texture,\n\t                            side: THREE.FrontSide\n\t                        });\n\t                        material.transparent = true;\n\t                        var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n\t                        if (isXAxis) {\n\t                            axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t                            this.axisXObject.add(axisMesh);\n\t                        } else {\n\t                            axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t                            this.axisYObject.add(axisMesh);\n\t                        }\n\t                        this.updateAxis(orientation);\n\t                    };\n\t                    AxisWidget.prototype.getObject3D = function() {\n\t                        return this.object3D;\n\t                    };\n\t                    AxisWidget.prototype.updateAxis = function(orientation) {\n\t                        if (this.isDestroyed) return;\n\t                        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                        var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                        var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n\t                        var axisOptions;\n\t                        var axisMesh;\n\t                        var axisGridParams;\n\t                        if (isXAxis) {\n\t                            axisMesh = this.axisXObject.children[0];\n\t                            axisOptions = this.chartState.data.xAxis;\n\t                            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t                        } else {\n\t                            axisMesh = this.axisYObject.children[0];\n\t                            axisOptions = this.chartState.data.yAxis;\n\t                            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t                        }\n\t                        var geometry = axisMesh.geometry;\n\t                        var canvasWidth = geometry.parameters.width;\n\t                        var canvasHeight = geometry.parameters.height;\n\t                        var texture = axisMesh.material.map;\n\t                        var ctx = texture.image.getContext(\"2d\");\n\t                        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t                        if (isXAxis) {\n\t                            axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t                        }\n\t                        var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t                        var startVal = axisGridParams.start - edgeOffset;\n\t                        var endVal = axisGridParams.end + edgeOffset;\n\t                        ctx.beginPath();\n\t                        for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n\t                            var displayedValue = \"\";\n\t                            if (isXAxis) {\n\t                                var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t                                ctx.textAlign = \"center\";\n\t                                if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n\t                                    displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t                                } else {\n\t                                    displayedValue = Number(val.toFixed(14)).toString();\n\t                                }\n\t                                ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t                            } else {\n\t                                var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n\t                                ctx.textAlign = \"right\";\n\t                                displayedValue = Number(val.toFixed(14)).toString();\n\t                                ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n\t                            }\n\t                            ctx.stroke();\n\t                        }\n\t                        ctx.stroke();\n\t                        ctx.closePath();\n\t                        texture.needsUpdate = true;\n\t                    };\n\t                    AxisWidget.prototype.onZoomFrame = function(options) {\n\t                        if (options.zoomX) {\n\t                            this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                        }\n\t                        if (options.zoomY) {\n\t                            this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n\t                        }\n\t                    };\n\t                    AxisWidget.getDateStr = function(timestamp, gridParams) {\n\t                        var sec = 1e3;\n\t                        var min = sec * 60;\n\t                        var hour = min * 60;\n\t                        var day = hour * 60;\n\t                        var step = gridParams.step;\n\t                        var d = new Date(timestamp);\n\t                        var tf = function(num) {\n\t                            return Utils_1.Utils.toFixed(num, 2);\n\t                        };\n\t                        return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n\t                    };\n\t                    AxisWidget.widgetName = \"Axis\";\n\t                    return AxisWidget;\n\t                }(Widget_1.ChartWidget);\n\t                exports.AxisWidget = AxisWidget;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Vector3 = THREE.Vector3;\n\t                var Widget_1 = __webpack_require__(15);\n\t                var LineSegments = THREE.LineSegments;\n\t                var Utils_1 = __webpack_require__(14);\n\t                var GridWidget = function(_super) {\n\t                    __extends(GridWidget, _super);\n\t                    function GridWidget(chartState) {\n\t                        _super.call(this, chartState);\n\t                        this.isDestroyed = false;\n\t                        var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                        this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n\t                        this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n\t                        this.initGrid();\n\t                        this.updateGrid();\n\t                    }\n\t                    GridWidget.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        var updateGridThrottled = Utils_1.Utils.throttle(function() {\n\t                            return _this.updateGrid();\n\t                        }, 1e3);\n\t                        this.bindEvent(this.chartState.onScroll(function() {\n\t                            return updateGridThrottled();\n\t                        }), this.chartState.screen.onZoomFrame(function(options) {\n\t                            updateGridThrottled();\n\t                            _this.onZoomFrame(options);\n\t                        }), this.chartState.onDestroy(function() {\n\t                            _this.isDestroyed = true;\n\t                            _this.unbindEvents();\n\t                        }), this.chartState.onResize(function() {\n\t                            _this.updateGrid();\n\t                        }));\n\t                    };\n\t                    GridWidget.prototype.initGrid = function() {\n\t                        var geometry = new THREE.Geometry();\n\t                        var material = new THREE.LineBasicMaterial({\n\t                            linewidth: 1,\n\t                            opacity: .1,\n\t                            transparent: true\n\t                        });\n\t                        var xLinesCount = this.gridSizeH;\n\t                        var yLinesCount = this.gridSizeV;\n\t                        while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                        while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                        this.lineSegments = new LineSegments(geometry, material);\n\t                        this.lineSegments.position.setZ(-1);\n\t                        this.lineSegments.frustumCulled = false;\n\t                    };\n\t                    GridWidget.prototype.updateGrid = function() {\n\t                        if (this.isDestroyed) return;\n\t                        var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n\t                        var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t                        var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t                        var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t                        var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t                        var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t                        var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t                        var startXVal = axisXGrid.start + gridScrollXVal;\n\t                        var startYVal = axisYGrid.start + gridScrollYVal;\n\t                        var geometry = this.lineSegments.geometry;\n\t                        var vertices = geometry.vertices;\n\t                        var lineInd = 0;\n\t                        for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n\t                            var value = startXVal + i * axisXGrid.step;\n\t                            var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                            lineInd++;\n\t                        }\n\t                        for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n\t                            var value = startYVal + i * axisYGrid.step;\n\t                            var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                            lineInd++;\n\t                        }\n\t                        geometry.verticesNeedUpdate = true;\n\t                        this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n\t                    };\n\t                    GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n\t                        var chartState = this.chartState;\n\t                        var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n\t                        var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n\t                        return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n\t                    };\n\t                    GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n\t                        var chartState = this.chartState;\n\t                        var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n\t                        var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n\t                        return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n\t                    };\n\t                    GridWidget.prototype.onZoomFrame = function(options) {\n\t                        var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                        if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t                        if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t                    };\n\t                    GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n\t                        var axisRange = axisOptions.range;\n\t                        var from = axisRange.from;\n\t                        var to = axisRange.to;\n\t                        var axisLength = to - from;\n\t                        var gridStep = 0;\n\t                        var gridStepInPixels = 0;\n\t                        var minGridStepInPixels = axisOptions.gridMinSize;\n\t                        var axisLengthStr = String(axisLength);\n\t                        var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n\t                        var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\t                        var gridStepFound = false;\n\t                        var digitPos = 0;\n\t                        while (!gridStepFound) {\n\t                            var power = intPartLength - digitPos - 1;\n\t                            var multiplier = Math.pow(10, power) || 1;\n\t                            var dividers = [ 1, 2, 5 ];\n\t                            for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t                                var nextGridStep = multiplier / dividers[dividerInd];\n\t                                var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t                                if (nextGridStepInPixels >= minGridStepInPixels) {\n\t                                    gridStep = nextGridStep;\n\t                                    gridStepInPixels = nextGridStepInPixels;\n\t                                } else {\n\t                                    gridStepFound = true;\n\t                                    if (gridStep === 0) {\n\t                                        gridStep = nextGridStep;\n\t                                        gridStepInPixels = nextGridStepInPixels;\n\t                                    }\n\t                                    break;\n\t                                }\n\t                            }\n\t                            if (!gridStepFound) digitPos++;\n\t                        }\n\t                        var gridStart = Math.floor(from / gridStep) * gridStep;\n\t                        var gridEnd = Math.floor(to / gridStep) * gridStep;\n\t                        return {\n\t                            start: gridStart,\n\t                            end: gridEnd,\n\t                            step: gridStep,\n\t                            stepInPx: gridStepInPixels,\n\t                            length: gridEnd - gridStart,\n\t                            segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t                        };\n\t                    };\n\t                    GridWidget.prototype.getObject3D = function() {\n\t                        return this.lineSegments;\n\t                    };\n\t                    GridWidget.widgetName = \"Grid\";\n\t                    return GridWidget;\n\t                }(Widget_1.ChartWidget);\n\t                exports.GridWidget = GridWidget;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Utils_1 = __webpack_require__(14);\n\t                var Mesh = THREE.Mesh;\n\t                var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t                var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t                var TrendsWidget_1 = __webpack_require__(25);\n\t                var Trend_1 = __webpack_require__(17);\n\t                var TrendsLoadingWidget = function(_super) {\n\t                    __extends(TrendsLoadingWidget, _super);\n\t                    function TrendsLoadingWidget() {\n\t                        _super.apply(this, arguments);\n\t                    }\n\t                    TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n\t                        return TrendLoading;\n\t                    };\n\t                    TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n\t                    return TrendsLoadingWidget;\n\t                }(TrendsWidget_1.TrendsWidget);\n\t                exports.TrendsLoadingWidget = TrendsLoadingWidget;\n\t                var TrendLoading = function(_super) {\n\t                    __extends(TrendLoading, _super);\n\t                    function TrendLoading(state, trendName) {\n\t                        _super.call(this, state, trendName);\n\t                        this.isActive = false;\n\t                        this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                            map: TrendLoading.createTexture(),\n\t                            transparent: true\n\t                        }));\n\t                        this.deactivate();\n\t                    }\n\t                    TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n\t                        return trendOptions.enabled && chartState.data.animations.enabled;\n\t                    };\n\t                    TrendLoading.prototype.getObject3D = function() {\n\t                        return this.mesh;\n\t                    };\n\t                    TrendLoading.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        _super.prototype.bindEvents.call(this);\n\t                        this.bindEvent(this.trend.onPrependRequest(function() {\n\t                            return _this.activate();\n\t                        }));\n\t                    };\n\t                    TrendLoading.prototype.prependData = function() {\n\t                        this.deactivate();\n\t                    };\n\t                    TrendLoading.prototype.activate = function() {\n\t                        var mesh = this.mesh;\n\t                        mesh.material.opacity = 1;\n\t                        mesh.rotation.z = 0;\n\t                        var animation = TweenLite.to(this.mesh.rotation, .5, {\n\t                            z: Math.PI * 2\n\t                        });\n\t                        animation.eventCallback(\"onComplete\", function() {\n\t                            animation.restart();\n\t                        });\n\t                        this.animation = animation;\n\t                        this.isActive = true;\n\t                        this.updatePosition();\n\t                    };\n\t                    TrendLoading.prototype.deactivate = function() {\n\t                        this.animation && this.animation.kill();\n\t                        this.mesh.material.opacity = 0;\n\t                        this.isActive = false;\n\t                    };\n\t                    TrendLoading.createTexture = function() {\n\t                        var h = 64, w = 64;\n\t                        return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                            ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                            ctx.lineWidth = 5;\n\t                            var center = h / 2;\n\t                            ctx.beginPath();\n\t                            ctx.arc(center, center, 22, 0, Math.PI / 2);\n\t                            ctx.stroke();\n\t                            ctx.beginPath();\n\t                            ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n\t                            ctx.stroke();\n\t                            ctx.beginPath();\n\t                            ctx.arc(center, center, 3, 0, Math.PI * 2);\n\t                            ctx.stroke();\n\t                        });\n\t                    };\n\t                    TrendLoading.prototype.onZoomFrame = function() {\n\t                        this.updatePosition();\n\t                    };\n\t                    TrendLoading.prototype.updatePosition = function() {\n\t                        if (!this.isActive) return;\n\t                        var trend = this.trend;\n\t                        var segment = trend.segments.getStartSegment();\n\t                        var x, y;\n\t                        if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                            x = segment.currentAnimationState.startXVal;\n\t                            y = segment.currentAnimationState.startYVal;\n\t                        } else {\n\t                            x = segment.currentAnimationState.xVal - segment.maxLength;\n\t                            y = segment.currentAnimationState.yVal;\n\t                        }\n\t                        var pointVector = this.chartState.screen.getPointOnChart(x, y);\n\t                        this.mesh.position.set(pointVector.x, pointVector.y, 0);\n\t                    };\n\t                    return TrendLoading;\n\t                }(TrendsWidget_1.TrendWidget);\n\t                exports.TrendLoading = TrendLoading;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Widget_1 = __webpack_require__(15);\n\t                var Object3D = THREE.Object3D;\n\t                var TrendsWidget = function(_super) {\n\t                    __extends(TrendsWidget, _super);\n\t                    function TrendsWidget(state) {\n\t                        _super.call(this, state);\n\t                        this.widgets = {};\n\t                        this.object3D = new Object3D();\n\t                        this.onTrendsChange();\n\t                    }\n\t                    TrendsWidget.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        var state = this.chartState;\n\t                        state.onTrendsChange(function() {\n\t                            return _this.onTrendsChange();\n\t                        });\n\t                        state.onTrendChange(function(trendName, changedOptions, newData) {\n\t                            _this.onTrendChange(trendName, changedOptions, newData);\n\t                        });\n\t                    };\n\t                    TrendsWidget.prototype.onTrendsChange = function() {\n\t                        var trendsOptions = this.chartState.data.trends;\n\t                        var TrendWidgetClass = this.getTrendWidgetClass();\n\t                        for (var trendName in trendsOptions) {\n\t                            var trendOptions = trendsOptions[trendName];\n\t                            var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n\t                            if (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t                                this.createTrendWidget(trendName);\n\t                            } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n\t                                this.destroyTrendWidget(trendName);\n\t                            }\n\t                        }\n\t                    };\n\t                    TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n\t                        var widget = this.widgets[trendName];\n\t                        if (!widget) return;\n\t                        widget.onTrendChange(changedOptions);\n\t                        if (newData) {\n\t                            var data = this.chartState.getTrend(trendName).getData();\n\t                            var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                            isAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t                        }\n\t                    };\n\t                    TrendsWidget.prototype.getObject3D = function() {\n\t                        return this.object3D;\n\t                    };\n\t                    TrendsWidget.prototype.createTrendWidget = function(trendName) {\n\t                        var WidgetConstructor = this.getTrendWidgetClass();\n\t                        var widget = new WidgetConstructor(this.chartState, trendName);\n\t                        this.widgets[trendName] = widget;\n\t                        var widgetObject = widget.getObject3D();\n\t                        widgetObject.name = trendName;\n\t                        this.object3D.add(widget.getObject3D());\n\t                    };\n\t                    TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n\t                        this.widgets[trendName].onDestroy();\n\t                        delete this.widgets[trendName];\n\t                        var widgetObject = this.object3D.getObjectByName(trendName);\n\t                        this.object3D.remove(widgetObject);\n\t                    };\n\t                    return TrendsWidget;\n\t                }(Widget_1.ChartWidget);\n\t                exports.TrendsWidget = TrendsWidget;\n\t                var TrendWidget = function() {\n\t                    function TrendWidget(chartState, trendName) {\n\t                        this.chartState = chartState;\n\t                        this.trendName = trendName;\n\t                        this.unsubscribers = [];\n\t                        this.trend = chartState.trendsManager.getTrend(trendName);\n\t                        this.chartState = chartState;\n\t                        this.bindEvents();\n\t                    }\n\t                    TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n\t                        return trendOptions.enabled;\n\t                    };\n\t                    TrendWidget.prototype.appendData = function(newData) {};\n\t                    TrendWidget.prototype.prependData = function(newData) {};\n\t                    TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n\t                    TrendWidget.prototype.onDestroy = function() {\n\t                        for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n\t                            var unsubscriber = _a[_i];\n\t                            unsubscriber();\n\t                        }\n\t                    };\n\t                    TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n\t                    TrendWidget.prototype.onZoomFrame = function(options) {};\n\t                    TrendWidget.prototype.onTransformationFrame = function(options) {};\n\t                    TrendWidget.prototype.onZoom = function() {};\n\t                    TrendWidget.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        this.bindEvent(this.trend.segments.onAnimationFrame(function(trendPoints) {\n\t                            return _this.onSegmentsAnimate(trendPoints);\n\t                        }));\n\t                        this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n\t                            return _this.onTransformationFrame(options);\n\t                        }));\n\t                        this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n\t                            return _this.onZoomFrame(options);\n\t                        }));\n\t                        this.bindEvent(this.chartState.onZoom(function() {\n\t                            return _this.onZoom();\n\t                        }));\n\t                    };\n\t                    TrendWidget.prototype.bindEvent = function(unsubscriber) {\n\t                        this.unsubscribers.push(unsubscriber);\n\t                    };\n\t                    return TrendWidget;\n\t                }();\n\t                exports.TrendWidget = TrendWidget;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Widget_1 = __webpack_require__(15);\n\t                var Object3D = THREE.Object3D;\n\t                var Geometry = THREE.Geometry;\n\t                var LineBasicMaterial = THREE.LineBasicMaterial;\n\t                var Vector3 = THREE.Vector3;\n\t                var Utils_1 = __webpack_require__(14);\n\t                var Line = THREE.Line;\n\t                var Mesh = THREE.Mesh;\n\t                var interfaces_1 = __webpack_require__(21);\n\t                var AxisMarksWidget = function(_super) {\n\t                    __extends(AxisMarksWidget, _super);\n\t                    function AxisMarksWidget(chartState) {\n\t                        _super.call(this, chartState);\n\t                        this.axisMarksWidgets = [];\n\t                        this.object3D = new Object3D();\n\t                        var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n\t                        var items = xAxisMarks.getItems();\n\t                        for (var markName in items) {\n\t                            this.createAxisMark(items[markName]);\n\t                        }\n\t                        items = yAxisMarks.getItems();\n\t                        for (var markName in items) {\n\t                            this.createAxisMark(items[markName]);\n\t                        }\n\t                    }\n\t                    AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n\t                        var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n\t                        this.axisMarksWidgets.push(axisMarkWidget);\n\t                        this.object3D.add(axisMarkWidget.getObject3D());\n\t                    };\n\t                    AxisMarksWidget.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n\t                            return _this.updateMarksPositions();\n\t                        }), this.chartState.onResize(function() {\n\t                            return _this.updateMarksPositions();\n\t                        }));\n\t                    };\n\t                    AxisMarksWidget.prototype.updateMarksPositions = function() {\n\t                        for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n\t                            var widget = _a[_i];\n\t                            widget.updatePosition();\n\t                        }\n\t                    };\n\t                    AxisMarksWidget.prototype.getObject3D = function() {\n\t                        return this.object3D;\n\t                    };\n\t                    AxisMarksWidget.widgetName = \"AxisMarks\";\n\t                    return AxisMarksWidget;\n\t                }(Widget_1.ChartWidget);\n\t                exports.AxisMarksWidget = AxisMarksWidget;\n\t                var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n\t                    var axisMark = axisMarkWidget.axisMark;\n\t                    ctx.fillStyle = axisMark.options.lineColor;\n\t                    ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\t                    var xCoord = 15;\n\t                    if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n\t                        ctx.textAlign = \"end\";\n\t                        xCoord = axisMarkWidget.indicatorWidth;\n\t                    }\n\t                    ctx.fillText(axisMark.options.title, xCoord, 20);\n\t                    if (!axisMark.options.showValue) return;\n\t                    ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n\t                    ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n\t                };\n\t                var INDICATOR_POS_Z = .1;\n\t                var AxisMarkWidget = function() {\n\t                    function AxisMarkWidget(chartState, axisMark) {\n\t                        this.indicatorWidth = 128;\n\t                        this.indicatorHeight = 64;\n\t                        this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\t                        this.chartState = chartState;\n\t                        this.axisMark = axisMark;\n\t                        this.axisType = axisMark.axisType;\n\t                        this.frameValue = axisMark.options.value;\n\t                        this.object3D = new Object3D();\n\t                        this.object3D.position.setZ(-.1);\n\t                        this.line = this.createLine();\n\t                        this.object3D.add(this.line);\n\t                        this.indicator = this.createIndicator();\n\t                        this.object3D.add(this.indicator);\n\t                        this.renderIndicator();\n\t                        this.updatePosition();\n\t                        this.bindEvents();\n\t                    }\n\t                    AxisMarkWidget.prototype.getObject3D = function() {\n\t                        return this.object3D;\n\t                    };\n\t                    AxisMarkWidget.prototype.createLine = function() {\n\t                        var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n\t                        var lineGeometry = new Geometry();\n\t                        lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n\t                        return new Line(lineGeometry, new LineBasicMaterial({\n\t                            color: Utils_1.Utils.getHexColor(lineColor),\n\t                            linewidth: lineWidth\n\t                        }));\n\t                    };\n\t                    AxisMarkWidget.prototype.createIndicator = function() {\n\t                        var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n\t                        var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n\t                            ctx.beginPath();\n\t                            ctx.font = \"10px Arial\";\n\t                        });\n\t                        var material = new THREE.MeshBasicMaterial({\n\t                            map: texture,\n\t                            side: THREE.FrontSide\n\t                        });\n\t                        material.transparent = true;\n\t                        return new Mesh(new THREE.PlaneGeometry(width, height), material);\n\t                    };\n\t                    AxisMarkWidget.prototype.renderIndicator = function() {\n\t                        var texture = this.indicator.material.map;\n\t                        var ctx = texture.image.getContext(\"2d\");\n\t                        DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t                        texture.needsUpdate = true;\n\t                    };\n\t                    AxisMarkWidget.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        this.axisMark.onDisplayedValueChange(function() {\n\t                            return _this.renderIndicator();\n\t                        });\n\t                        this.axisMark.onValueChange(function() {\n\t                            return _this.onValueChangeHandler();\n\t                        });\n\t                    };\n\t                    AxisMarkWidget.prototype.onValueChangeHandler = function() {\n\t                        var _this = this;\n\t                        if (this.moveAnimation) this.moveAnimation.kill();\n\t                        var animations = this.chartState.data.animations;\n\t                        var targetValue = this.axisMark.options.value;\n\t                        var cb = function() {\n\t                            _this.updatePosition();\n\t                        };\n\t                        if (animations.enabled) {\n\t                            this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n\t                                frameValue: targetValue,\n\t                                ease: animations.trendChangeEase\n\t                            });\n\t                            this.moveAnimation.eventCallback(\"onUpdate\", cb);\n\t                        } else {\n\t                            this.frameValue = targetValue;\n\t                            cb();\n\t                        }\n\t                    };\n\t                    AxisMarkWidget.prototype.updatePosition = function() {\n\t                        var chartState = this.chartState;\n\t                        var screen = chartState.screen;\n\t                        var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n\t                        var lineGeometry = this.line.geometry;\n\t                        var hasStickMode = this.axisMark.options.stickToEdges;\n\t                        var _a = this.chartState.data, width = _a.width, height = _a.height;\n\t                        if (isXAxis) {\n\t                            this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t                            this.object3D.position.y = screen.getBottom();\n\t                            lineGeometry.vertices[1].setY(height);\n\t                            this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n\t                        } else {\n\t                            var val = this.frameValue;\n\t                            var bottomVal = screen.getBottomVal();\n\t                            var topVal = screen.getTopVal();\n\t                            var needToStickOnTop = hasStickMode && val > topVal;\n\t                            var needToStickOnBottom = hasStickMode && val < bottomVal;\n\t                            var centerYVal = screen.getCenterYVal();\n\t                            this.object3D.position.x = screen.getLeft();\n\t                            if (needToStickOnTop) {\n\t                                this.object3D.position.y = screen.getTop();\n\t                            } else if (needToStickOnBottom) {\n\t                                this.object3D.position.y = screen.getBottom();\n\t                            } else {\n\t                                this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t                            }\n\t                            lineGeometry.vertices[1].setX(width);\n\t                            var indicatorPosY = val > centerYVal ? -35 : 10;\n\t                            this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t                        }\n\t                        lineGeometry.verticesNeedUpdate = true;\n\t                    };\n\t                    AxisMarkWidget.typeName = \"simple\";\n\t                    return AxisMarkWidget;\n\t                }();\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Widget_1 = __webpack_require__(15);\n\t                var LineSegments = THREE.LineSegments;\n\t                var Vector3 = THREE.Vector3;\n\t                var BorderWidget = function(_super) {\n\t                    __extends(BorderWidget, _super);\n\t                    function BorderWidget(chartState) {\n\t                        _super.call(this, chartState);\n\t                        var _a = chartState.data, width = _a.width, height = _a.height;\n\t                        var geometry = new THREE.Geometry();\n\t                        var material = new THREE.LineBasicMaterial({\n\t                            linewidth: 1,\n\t                            opacity: 0,\n\t                            transparent: true\n\t                        });\n\t                        geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n\t                        this.lineSegments = new LineSegments(geometry, material);\n\t                    }\n\t                    BorderWidget.prototype.getObject3D = function() {\n\t                        return this.lineSegments;\n\t                    };\n\t                    BorderWidget.widgetName = \"Border\";\n\t                    return BorderWidget;\n\t                }(Widget_1.ChartWidget);\n\t                exports.BorderWidget = BorderWidget;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Utils_1 = __webpack_require__(14);\n\t                var Mesh = THREE.Mesh;\n\t                var TrendsWidget_1 = __webpack_require__(25);\n\t                var Color = THREE.Color;\n\t                var CANVAS_WIDTH = 128;\n\t                var CANVAS_HEIGHT = 64;\n\t                var OFFSET_X = 15;\n\t                var TrendsIndicatorWidget = function(_super) {\n\t                    __extends(TrendsIndicatorWidget, _super);\n\t                    function TrendsIndicatorWidget() {\n\t                        _super.apply(this, arguments);\n\t                    }\n\t                    TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n\t                        return TrendIndicator;\n\t                    };\n\t                    TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n\t                    return TrendsIndicatorWidget;\n\t                }(TrendsWidget_1.TrendsWidget);\n\t                exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n\t                var TrendIndicator = function(_super) {\n\t                    __extends(TrendIndicator, _super);\n\t                    function TrendIndicator(state, trendName) {\n\t                        _super.call(this, state, trendName);\n\t                        this.initObject();\n\t                        this.onTrendChange();\n\t                    }\n\t                    TrendIndicator.widgetIsEnabled = function(trendOptions) {\n\t                        return trendOptions.enabled && trendOptions.hasIndicator;\n\t                    };\n\t                    TrendIndicator.prototype.getObject3D = function() {\n\t                        return this.mesh;\n\t                    };\n\t                    TrendIndicator.prototype.onTrendChange = function() {\n\t                        var trendData = this.trend.getData();\n\t                        var lastItem = trendData[trendData.length - 1];\n\t                        var texture = this.mesh.material.map;\n\t                        var ctx = texture.image.getContext(\"2d\");\n\t                        ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\t                        ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n\t                        texture.needsUpdate = true;\n\t                    };\n\t                    TrendIndicator.prototype.initObject = function() {\n\t                        var color = new Color(this.trend.getOptions().lineColor);\n\t                        var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n\t                            ctx.beginPath();\n\t                            ctx.font = \"15px Arial\";\n\t                            ctx.fillStyle = color.getStyle();\n\t                            ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                        });\n\t                        var material = new THREE.MeshBasicMaterial({\n\t                            map: texture,\n\t                            side: THREE.FrontSide\n\t                        });\n\t                        material.transparent = true;\n\t                        this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n\t                    };\n\t                    TrendIndicator.prototype.onTransformationFrame = function() {\n\t                        this.segment = this.trend.segments.getEndSegment();\n\t                        this.updatePosition();\n\t                    };\n\t                    TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n\t                        this.segment = segments.getEndSegment();\n\t                        this.updatePosition();\n\t                    };\n\t                    TrendIndicator.prototype.updatePosition = function() {\n\t                        var state = this.chartState;\n\t                        var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n\t                        var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n\t                        var screenWidth = state.data.width;\n\t                        var x = endPointVector.x + OFFSET_X;\n\t                        var y = endPointVector.y;\n\t                        var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                        var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n\t                        if (indicatorIsOutOfScreen) {\n\t                            if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n\t                            if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n\t                            y -= 25;\n\t                        }\n\t                        this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n\t                    };\n\t                    return TrendIndicator;\n\t                }(TrendsWidget_1.TrendWidget);\n\t                exports.TrendIndicator = TrendIndicator;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Geometry = THREE.Geometry;\n\t                var LineBasicMaterial = THREE.LineBasicMaterial;\n\t                var Vector3 = THREE.Vector3;\n\t                var TrendsWidget_1 = __webpack_require__(25);\n\t                var LineSegments = THREE.LineSegments;\n\t                var Trend_1 = __webpack_require__(17);\n\t                var Utils_1 = __webpack_require__(14);\n\t                var MAX_DISPLAYED_SEGMENTS = 2e3;\n\t                var TrendsLineWidget = function(_super) {\n\t                    __extends(TrendsLineWidget, _super);\n\t                    function TrendsLineWidget() {\n\t                        _super.apply(this, arguments);\n\t                    }\n\t                    TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n\t                        return TrendLine;\n\t                    };\n\t                    TrendsLineWidget.widgetName = \"TrendsLine\";\n\t                    return TrendsLineWidget;\n\t                }(TrendsWidget_1.TrendsWidget);\n\t                exports.TrendsLineWidget = TrendsLineWidget;\n\t                var TrendLine = function(_super) {\n\t                    __extends(TrendLine, _super);\n\t                    function TrendLine(chartState, trendName) {\n\t                        _super.call(this, chartState, trendName);\n\t                        this.freeSegmentsInds = [];\n\t                        this.displayedSegments = {};\n\t                        var options = this.trend.getOptions();\n\t                        this.material = new LineBasicMaterial({\n\t                            color: options.lineColor,\n\t                            linewidth: options.lineWidth\n\t                        });\n\t                        this.initLine();\n\t                    }\n\t                    TrendLine.widgetIsEnabled = function(trendOptions) {\n\t                        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t                    };\n\t                    TrendLine.prototype.getObject3D = function() {\n\t                        return this.lineSegments;\n\t                    };\n\t                    TrendLine.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        _super.prototype.bindEvents.call(this);\n\t                        this.bindEvent(this.trend.segments.onRebuild(function() {\n\t                            _this.destroySegments();\n\t                            _this.setupSegments();\n\t                        }));\n\t                        this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n\t                            _this.setupSegments();\n\t                        }));\n\t                    };\n\t                    TrendLine.prototype.initLine = function() {\n\t                        var geometry = new Geometry();\n\t                        var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                        var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                        this.scaleXFactor = scaleXFactor;\n\t                        this.scaleYFactor = scaleYFactor;\n\t                        this.lineSegments = new LineSegments(geometry, this.material);\n\t                        this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                        this.lineSegments.frustumCulled = false;\n\t                        for (var i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\n\t                            geometry.vertices.push(new Vector3(), new Vector3());\n\t                            this.freeSegmentsInds.push(i);\n\t                        }\n\t                        this.vertices = geometry.vertices;\n\t                        this.setupSegments();\n\t                    };\n\t                    TrendLine.prototype.setupSegments = function() {\n\t                        var geometry = this.lineSegments.geometry;\n\t                        var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                        for (var segmentId in this.displayedSegments) {\n\t                            var lineSegment = this.displayedSegments[segmentId];\n\t                            var segment_1 = this.trend.segments.segments[lineSegment.segmentId];\n\t                            var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                            if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t                        }\n\t                        var segment = firstDisplayedSegment;\n\t                        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                            this.setupSegment(segment.id, segment.currentAnimationState);\n\t                            segment = segment.getNext();\n\t                        }\n\t                        geometry.verticesNeedUpdate = true;\n\t                    };\n\t                    TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n\t                        var lineSegment = this.displayedSegments[segmentId];\n\t                        if (!lineSegment) {\n\t                            if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n\t                            var ind = this.freeSegmentsInds.pop();\n\t                            lineSegment = this.displayedSegments[segmentId] = {\n\t                                segmentId: segmentId,\n\t                                ind: ind\n\t                            };\n\t                        }\n\t                        var segmentInd = lineSegment.ind;\n\t                        var lineStartVertex = this.vertices[segmentInd * 2];\n\t                        var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t                        lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t                        lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t                    };\n\t                    TrendLine.prototype.destroySegments = function() {\n\t                        for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t                    };\n\t                    TrendLine.prototype.destroySegment = function(segmentId) {\n\t                        var lineSegment = this.displayedSegments[segmentId];\n\t                        var lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t                        var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t                        lineStartVertex.set(0, 0, 0);\n\t                        lineEndVertex.set(0, 0, 0);\n\t                        delete this.displayedSegments[segmentId];\n\t                        this.freeSegmentsInds.push(lineSegment.ind);\n\t                    };\n\t                    TrendLine.prototype.onZoomFrame = function(options) {\n\t                        var currentScale = this.lineSegments.scale;\n\t                        if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                        if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t                    };\n\t                    TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                        var geometry = this.lineSegments.geometry;\n\t                        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                            var segmentId = _a[_i];\n\t                            if (!this.displayedSegments[segmentId]) continue;\n\t                            this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t                        }\n\t                        geometry.verticesNeedUpdate = true;\n\t                    };\n\t                    TrendLine.prototype.toLocalX = function(xVal) {\n\t                        return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t                    };\n\t                    TrendLine.prototype.toLocalY = function(yVal) {\n\t                        return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t                    };\n\t                    TrendLine.prototype.toLocalVec = function(vec) {\n\t                        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t                    };\n\t                    return TrendLine;\n\t                }(TrendsWidget_1.TrendWidget);\n\t                exports.TrendLine = TrendLine;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var TrendsWidget_1 = __webpack_require__(25);\n\t                var Object3D = THREE.Object3D;\n\t                var Geometry = THREE.Geometry;\n\t                var Vector3 = THREE.Vector3;\n\t                var Mesh = THREE.Mesh;\n\t                var Line = THREE.Line;\n\t                var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t                var PlaneGeometry = THREE.PlaneGeometry;\n\t                var Trend_1 = __webpack_require__(17);\n\t                var LineBasicMaterial = THREE.LineBasicMaterial;\n\t                var Utils_1 = __webpack_require__(14);\n\t                var RISE_COLOR = 2927680;\n\t                var FALL_COLOR = 15619379;\n\t                var MARGIN_PERCENT = .3;\n\t                var MAX_CANDLES = 100;\n\t                var TrendsCandlesWidget = function(_super) {\n\t                    __extends(TrendsCandlesWidget, _super);\n\t                    function TrendsCandlesWidget() {\n\t                        _super.apply(this, arguments);\n\t                    }\n\t                    TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n\t                        return TrendCandlesWidget;\n\t                    };\n\t                    TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n\t                    return TrendsCandlesWidget;\n\t                }(TrendsWidget_1.TrendsWidget);\n\t                exports.TrendsCandlesWidget = TrendsCandlesWidget;\n\t                var TrendCandlesWidget = function(_super) {\n\t                    __extends(TrendCandlesWidget, _super);\n\t                    function TrendCandlesWidget(chartState, trendName) {\n\t                        _super.call(this, chartState, trendName);\n\t                        this.freeCandlesInds = [];\n\t                        this.candlesPool = [];\n\t                        this.candles = {};\n\t                        this.initObject();\n\t                    }\n\t                    TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n\t                        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n\t                    };\n\t                    TrendCandlesWidget.prototype.getObject3D = function() {\n\t                        return this.object3D;\n\t                    };\n\t                    TrendCandlesWidget.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        _super.prototype.bindEvents.call(this);\n\t                        this.bindEvent(this.trend.segments.onRebuild(function() {\n\t                            _this.destroyCandles();\n\t                            _this.setupCandles();\n\t                        }));\n\t                        this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n\t                            _this.setupCandles();\n\t                        }));\n\t                    };\n\t                    TrendCandlesWidget.prototype.initObject = function() {\n\t                        var stateData = this.chartState.data;\n\t                        var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                        var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                        this.scaleXFactor = scaleXFactor;\n\t                        this.scaleYFactor = scaleYFactor;\n\t                        this.object3D = new Object3D();\n\t                        this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                        this.object3D.frustumCulled = false;\n\t                        for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t                        this.setupCandles();\n\t                    };\n\t                    TrendCandlesWidget.prototype.setupCandles = function() {\n\t                        var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                        for (var segmentId in this.candles) {\n\t                            var segment_1 = this.candles[segmentId].segment;\n\t                            var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                            if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t                        }\n\t                        var segment = firstDisplayedSegment;\n\t                        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                            this.setupCandle(segment.id, segment.currentAnimationState);\n\t                            segment = segment.getNext();\n\t                        }\n\t                    };\n\t                    TrendCandlesWidget.prototype.destroyCandles = function() {\n\t                        for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t                    };\n\t                    TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n\t                        var candle = this.candles[segmentId];\n\t                        this.object3D.remove(candle.getObject3D());\n\t                        delete this.candles[segmentId];\n\t                    };\n\t                    TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n\t                        var currentScale = this.object3D.scale;\n\t                        if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                        if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t                    };\n\t                    TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                            var segmentId = _a[_i];\n\t                            if (!this.candles[segmentId]) continue;\n\t                            var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t                            this.setupCandle(segmentId, segmentState);\n\t                        }\n\t                    };\n\t                    TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n\t                        var candleInd = candleId % MAX_CANDLES;\n\t                        var candle = this.candlesPool[candleInd];\n\t                        if (!candle) {\n\t                            candle = this.candlesPool[candleInd] = new CandleWidget();\n\t                        }\n\t                        if (!this.candles[candleId]) {\n\t                            this.candles[candleId] = candle;\n\t                            this.object3D.add(candle.getObject3D());\n\t                        }\n\t                        candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t                        candle.setSegment(segmentState);\n\t                    };\n\t                    TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n\t                        return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t                    };\n\t                    TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n\t                        return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t                    };\n\t                    TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n\t                        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t                    };\n\t                    return TrendCandlesWidget;\n\t                }(TrendsWidget_1.TrendWidget);\n\t                exports.TrendCandlesWidget = TrendCandlesWidget;\n\t                var CandleWidget = function() {\n\t                    function CandleWidget() {\n\t                        this.initObject();\n\t                    }\n\t                    CandleWidget.prototype.getObject3D = function() {\n\t                        return this.rect;\n\t                    };\n\t                    CandleWidget.prototype.setSegment = function(segment) {\n\t                        this.segment = segment;\n\t                        var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\t                        var geometry = this.rect.geometry;\n\t                        var material = this.rect.material;\n\t                        var width = segment.endXVal - segment.startXVal;\n\t                        width -= width * MARGIN_PERCENT;\n\t                        var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t                        var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n\t                        leftTop.set(-width / 2, height / 2, 0);\n\t                        rightTop.set(width / 2, height / 2, 0);\n\t                        leftBottom.set(-width / 2, -height / 2, 0);\n\t                        rightBottom.set(width / 2, -height / 2, 0);\n\t                        if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t                            leftBottom.setY(leftBottom.y + 1);\n\t                            rightBottom.setY(rightBottom.y + 1);\n\t                        }\n\t                        material.color.set(color);\n\t                        geometry.verticesNeedUpdate = true;\n\t                        var vLineGeometry = this.vLine.geometry;\n\t                        var vLineMaterial = this.vLine.material;\n\t                        var lineTop = segment.maxYVal - segment.yVal;\n\t                        var lineBottom = segment.minYVal - segment.yVal;\n\t                        vLineGeometry.vertices[0].set(0, lineTop, 0);\n\t                        vLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t                        vLineMaterial.color.set(color);\n\t                        vLineGeometry.verticesNeedUpdate = true;\n\t                        var hLineGeometry = this.hLine.geometry;\n\t                        var hLineMaterial = this.hLine.material;\n\t                        var lineLeft = -width / 2;\n\t                        var lineRight = width / 2;\n\t                        hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t                        hLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t                        hLineMaterial.color.set(color);\n\t                        hLineGeometry.verticesNeedUpdate = true;\n\t                    };\n\t                    CandleWidget.prototype.initObject = function() {\n\t                        this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n\t                        var vLineGeometry = new Geometry();\n\t                        var hLineGeometry = new Geometry();\n\t                        vLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                        hLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                        this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n\t                            linewidth: 1\n\t                        }));\n\t                        this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n\t                            linewidth: 1\n\t                        }));\n\t                        this.rect.add(this.vLine);\n\t                        this.rect.add(this.hLine);\n\t                    };\n\t                    return CandleWidget;\n\t                }();\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var __extends = this && this.__extends || function(d, b) {\n\t                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t                    function __() {\n\t                        this.constructor = d;\n\t                    }\n\t                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t                };\n\t                var Utils_1 = __webpack_require__(14);\n\t                var Mesh = THREE.Mesh;\n\t                var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t                var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t                var TrendsWidget_1 = __webpack_require__(25);\n\t                var Trend_1 = __webpack_require__(17);\n\t                var TrendsBeaconWidget = function(_super) {\n\t                    __extends(TrendsBeaconWidget, _super);\n\t                    function TrendsBeaconWidget() {\n\t                        _super.apply(this, arguments);\n\t                    }\n\t                    TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n\t                        return TrendBeacon;\n\t                    };\n\t                    TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n\t                    return TrendsBeaconWidget;\n\t                }(TrendsWidget_1.TrendsWidget);\n\t                exports.TrendsBeaconWidget = TrendsBeaconWidget;\n\t                var TrendBeacon = function(_super) {\n\t                    __extends(TrendBeacon, _super);\n\t                    function TrendBeacon(state, trendName) {\n\t                        _super.call(this, state, trendName);\n\t                        this.initObject();\n\t                        if (state.data.animations.enabled) {\n\t                            this.animate();\n\t                        }\n\t                        this.updatePosition();\n\t                    }\n\t                    TrendBeacon.widgetIsEnabled = function(trendOptions) {\n\t                        return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t                    };\n\t                    TrendBeacon.prototype.getObject3D = function() {\n\t                        return this.mesh;\n\t                    };\n\t                    TrendBeacon.prototype.onTrendChange = function() {\n\t                        this.updatePosition();\n\t                    };\n\t                    TrendBeacon.prototype.bindEvents = function() {\n\t                        var _this = this;\n\t                        _super.prototype.bindEvents.call(this);\n\t                        this.bindEvent(this.chartState.onScroll(function() {\n\t                            return _this.updatePosition();\n\t                        }));\n\t                        this.bindEvent(this.chartState.onChange(function(changedProps) {\n\t                            return _this.onStateChange(changedProps);\n\t                        }));\n\t                        this.bindEvent(this.chartState.onDestroy(function() {\n\t                            return _this.stopAnimation();\n\t                        }));\n\t                    };\n\t                    TrendBeacon.prototype.initObject = function() {\n\t                        var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                            map: TrendBeacon.createTexture(),\n\t                            transparent: true\n\t                        }));\n\t                        light.scale.set(.2, .2, 1);\n\t                        light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n\t                            map: TrendBeacon.createTexture()\n\t                        })));\n\t                        this.segment = this.trend.segments.getEndSegment();\n\t                    };\n\t                    TrendBeacon.prototype.animate = function() {\n\t                        var _this = this;\n\t                        this.animated = true;\n\t                        var object = this.mesh;\n\t                        var animationObject = {\n\t                            scale: object.scale.x,\n\t                            opacity: object.material.opacity\n\t                        };\n\t                        this.mesh.scale.set(.1, .1, 1);\n\t                        setTimeout(function() {\n\t                            var animation = _this.animation = TweenLite.to(animationObject, 1, {\n\t                                scale: 1,\n\t                                opacity: 0\n\t                            });\n\t                            animation.eventCallback(\"onUpdate\", function() {\n\t                                object.scale.set(animationObject.scale, animationObject.scale, 1);\n\t                                object.material.opacity = animationObject.opacity;\n\t                            }).eventCallback(\"onComplete\", function() {\n\t                                _this.animation && animation.restart();\n\t                            });\n\t                        }, 500);\n\t                    };\n\t                    TrendBeacon.prototype.stopAnimation = function() {\n\t                        this.animated = false;\n\t                        this.animation && this.animation.kill();\n\t                        this.animation = null;\n\t                    };\n\t                    TrendBeacon.createTexture = function() {\n\t                        var h = 32, w = 32;\n\t                        return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                            ctx.beginPath();\n\t                            ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n\t                            ctx.fillStyle = \"white\";\n\t                            ctx.fill();\n\t                        });\n\t                    };\n\t                    TrendBeacon.prototype.onTransformationFrame = function() {\n\t                        this.segment = this.trend.segments.getEndSegment();\n\t                        this.updatePosition();\n\t                    };\n\t                    TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n\t                        this.segment = trendsSegments.getEndSegment();\n\t                        this.updatePosition();\n\t                    };\n\t                    TrendBeacon.prototype.onStateChange = function(changedProps) {\n\t                        if (!changedProps.animations) return;\n\t                        if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n\t                        if (changedProps.animations.enabled) {\n\t                            this.animate();\n\t                        } else {\n\t                            this.stopAnimation();\n\t                        }\n\t                    };\n\t                    TrendBeacon.prototype.updatePosition = function() {\n\t                        var state = this.chartState;\n\t                        var xVal, yVal;\n\t                        var currentAnimationState = this.segment.currentAnimationState;\n\t                        if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                            xVal = currentAnimationState.endXVal;\n\t                            yVal = currentAnimationState.endYVal;\n\t                        } else {\n\t                            xVal = currentAnimationState.xVal;\n\t                            yVal = currentAnimationState.endYVal;\n\t                        }\n\t                        var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n\t                        var screenWidth = state.data.width;\n\t                        var x = endPointVector.x;\n\t                        var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                        if (screenX < 0) x = state.screen.getPointByScreenX(0);\n\t                        if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n\t                        this.mesh.position.set(x, endPointVector.y, .1);\n\t                    };\n\t                    return TrendBeacon;\n\t                }(TrendsWidget_1.TrendWidget);\n\t                exports.TrendBeacon = TrendBeacon;\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                function __export(m) {\n\t                    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t                }\n\t                __export(__webpack_require__(3));\n\t            }, function(module, exports, __webpack_require__) {\n\t                \"use strict\";\n\t                var Utils_1 = __webpack_require__(14);\n\t                var EventEmmiter_1 = __webpack_require__(13);\n\t                exports.DEFAULT_CONFIG = {\n\t                    installPluginWidgets: true\n\t                };\n\t                var ChartPlugin = function() {\n\t                    function ChartPlugin(options, config) {\n\t                        if (config === void 0) {\n\t                            config = {};\n\t                        }\n\t                        this.unsubscribers = [];\n\t                        this.initialState = options;\n\t                        this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n\t                        this.name = this.constructor.NAME;\n\t                        if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n\t                    }\n\t                    ChartPlugin.prototype.setupChartState = function(chartState) {\n\t                        var _this = this;\n\t                        this.chartState = chartState;\n\t                        this.ee = new EventEmmiter_1.EventEmitter();\n\t                        this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n\t                            return _this.onInitialStateAppliedHandler(initialState);\n\t                        }), this.chartState.onReady(function() {\n\t                            return _this.onChartReadyHandler();\n\t                        }), this.chartState.onDestroy(function() {\n\t                            return _this.onDestroyHandler();\n\t                        }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n\t                            return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n\t                        }));\n\t                    };\n\t                    ChartPlugin.prototype.getOptions = function() {\n\t                        return this.chartState.data.pluginsState[this.name];\n\t                    };\n\t                    ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n\t                    ChartPlugin.prototype.onChartReadyHandler = function() {};\n\t                    ChartPlugin.prototype.onStateChanged = function(changedState) {};\n\t                    ChartPlugin.prototype.onDestroyHandler = function() {\n\t                        this.ee.removeAllListeners();\n\t                    };\n\t                    ChartPlugin.prototype.bindEvent = function() {\n\t                        var args = [];\n\t                        for (var _i = 0; _i < arguments.length; _i++) {\n\t                            args[_i - 0] = arguments[_i];\n\t                        }\n\t                        var unsubscribers = [];\n\t                        if (!Array.isArray(args[0])) {\n\t                            unsubscribers.push(args[0]);\n\t                        } else {\n\t                            unsubscribers.push.apply(unsubscribers, args);\n\t                        }\n\t                        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                        var _a;\n\t                    };\n\t                    ChartPlugin.prototype.unbindEvents = function() {\n\t                        this.unsubscribers.forEach(function(unsubscriber) {\n\t                            return unsubscriber();\n\t                        });\n\t                        this.unsubscribers.length = 0;\n\t                    };\n\t                    ChartPlugin.NAME = \"\";\n\t                    ChartPlugin.pluginWidgets = [];\n\t                    return ChartPlugin;\n\t                }();\n\t                exports.ChartPlugin = ChartPlugin;\n\t            } ]);\n\t        });\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var three_chart_1 = __webpack_require__(2);\n\t        var Geometry = THREE.Geometry;\n\t        var Mesh = THREE.Mesh;\n\t        var Object3D = THREE.Object3D;\n\t        var TrendsMarksPlugin_1 = __webpack_require__(1);\n\t        var MAX_MARKS_IN_ROW = 3;\n\t        var TrendsMarksWidget = function(_super) {\n\t            __extends(TrendsMarksWidget, _super);\n\t            function TrendsMarksWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsMarksWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendMarksWidget;\n\t            };\n\t            TrendsMarksWidget.widgetName = \"TrendsMarks\";\n\t            return TrendsMarksWidget;\n\t        }(three_chart_1.TrendsWidget);\n\t        exports.TrendsMarksWidget = TrendsMarksWidget;\n\t        var TrendMarksWidget = function(_super) {\n\t            __extends(TrendMarksWidget, _super);\n\t            function TrendMarksWidget(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.marksWidgets = {};\n\t                this.object3D = new Object3D();\n\t                this.onMarksChange();\n\t            }\n\t            TrendMarksWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendMarksWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.getTrendsMarksPlugin().onChange(function() {\n\t                    return _this.onMarksChange();\n\t                });\n\t            };\n\t            TrendMarksWidget.prototype.getTrendsMarksPlugin = function() {\n\t                return this.chartState.getPlugin(TrendsMarksPlugin_1.TrendsMarksPlugin.NAME);\n\t            };\n\t            TrendMarksWidget.prototype.onMarksChange = function() {\n\t                var marksItems = this.getTrendsMarksPlugin().getItems();\n\t                var widgets = this.marksWidgets;\n\t                var actualMarksNames = [];\n\t                for (var markName in marksItems) {\n\t                    actualMarksNames.push(markName);\n\t                    if (!widgets[markName]) this.createMarkWidget(marksItems[markName]);\n\t                }\n\t                for (var markName in this.marksWidgets) {\n\t                    if (actualMarksNames.indexOf(markName) !== -1) continue;\n\t                    this.destroyMarkWidget(markName);\n\t                }\n\t            };\n\t            TrendMarksWidget.prototype.createMarkWidget = function(mark) {\n\t                if (!mark.segment) return;\n\t                var markWidget = new TrendMarkWidget(this.chartState, mark);\n\t                this.marksWidgets[mark.options.name] = markWidget;\n\t                this.object3D.add(markWidget.getObject3D());\n\t            };\n\t            TrendMarksWidget.prototype.destroyMarkWidget = function(markName) {\n\t                this.object3D.remove(this.marksWidgets[markName].getObject3D());\n\t                delete this.marksWidgets[markName];\n\t            };\n\t            TrendMarksWidget.prototype.onZoomFrame = function() {\n\t                var widgets = this.marksWidgets;\n\t                for (var markName in widgets) {\n\t                    widgets[markName].onZoomFrameHandler();\n\t                }\n\t            };\n\t            TrendMarksWidget.prototype.onSegmentsAnimate = function() {\n\t                var widgets = this.marksWidgets;\n\t                for (var markName in widgets) {\n\t                    widgets[markName].onSegmentsAnimate();\n\t                }\n\t            };\n\t            return TrendMarksWidget;\n\t        }(three_chart_1.TrendWidget);\n\t        exports.TrendMarksWidget = TrendMarksWidget;\n\t        var TrendMarkWidget = function() {\n\t            function TrendMarkWidget(chartState, trendMark) {\n\t                this.markHeight = 74;\n\t                this.markWidth = 150;\n\t                this.position = {\n\t                    lineHeight: 30,\n\t                    x: 0,\n\t                    y: 0\n\t                };\n\t                this.chartState = chartState;\n\t                this.mark = trendMark;\n\t                this.initObject();\n\t                this.show();\n\t            }\n\t            TrendMarkWidget.prototype.initObject = function() {\n\t                this.object3D = new Object3D();\n\t                this.markMesh = this.createMarkMesh();\n\t                this.line = this.createMarkLine();\n\t                this.object3D.add(this.markMesh);\n\t                this.object3D.add(this.line);\n\t            };\n\t            TrendMarkWidget.prototype.createMarkMesh = function() {\n\t                var _a = this, markHeight = _a.markHeight, markWidth = _a.markWidth;\n\t                var mark = this.mark.options;\n\t                var isTopSide = mark.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP;\n\t                var texture = three_chart_1.Utils.createPixelPerfectTexture(markWidth, markHeight, function(ctx) {\n\t                    var circleOffset = isTopSide ? 30 : 0;\n\t                    var circleR = 22;\n\t                    var circleX = markWidth / 2;\n\t                    var circleY = circleOffset + circleR;\n\t                    var textOffset = isTopSide ? 10 : circleR * 2 + 15;\n\t                    ctx.beginPath();\n\t                    ctx.textAlign = \"center\";\n\t                    ctx.font = \"11px Arial\";\n\t                    ctx.fillStyle = \"rgba(255,255,255, 0.6)\";\n\t                    ctx.fillText(mark.title, circleX, textOffset);\n\t                    ctx.fillStyle = mark.descriptionColor;\n\t                    ctx.fillText(mark.description, circleX, textOffset + 12);\n\t                    ctx.beginPath();\n\t                    ctx.fillStyle = mark.iconColor;\n\t                    ctx.arc(circleX, circleY, circleR, 0, 2 * Math.PI);\n\t                    ctx.fill();\n\t                    ctx.font = \"19px Arial\";\n\t                    ctx.fillStyle = \"rgb(255, 255, 255)\";\n\t                    ctx.fillText(mark.icon, circleX, circleY + 7);\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                var mesh = new Mesh(new THREE.PlaneGeometry(markWidth, markHeight), material);\n\t                var offset = this.mark.options.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP ? this.mark.offset : -this.mark.offset;\n\t                return mesh;\n\t            };\n\t            TrendMarkWidget.prototype.createMarkLine = function() {\n\t                var lineGeometry = new Geometry();\n\t                lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, this.mark.offset, 0));\n\t                lineGeometry.computeLineDistances();\n\t                var lineMaterial = new THREE.LineDashedMaterial({\n\t                    dashSize: 1,\n\t                    gapSize: 4,\n\t                    transparent: true,\n\t                    opacity: .6\n\t                });\n\t                var line = new THREE.Line(lineGeometry, lineMaterial);\n\t                line.position.setZ(-.1);\n\t                return line;\n\t            };\n\t            TrendMarkWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendMarkWidget.prototype.onSegmentsAnimate = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendMarkWidget.prototype.onZoomFrameHandler = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendMarkWidget.prototype.updatePosition = function() {\n\t                if (!this.mark.segment) return;\n\t                var mark = this.mark;\n\t                var meshMaterial = this.markMesh.material;\n\t                var lineMaterial = this.line.material;\n\t                if (mark.row >= MAX_MARKS_IN_ROW - 1) {\n\t                    meshMaterial.opacity = 0;\n\t                    lineMaterial.opacity = 0;\n\t                } else {\n\t                    meshMaterial.opacity = 1;\n\t                    lineMaterial.opacity = 1;\n\t                }\n\t                var screen = this.chartState.screen;\n\t                var posX = screen.getPointOnXAxis(mark.xVal);\n\t                var posY = screen.getPointOnYAxis(mark.yVal);\n\t                var lineGeometry = this.line.geometry;\n\t                if (mark.options.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP) {\n\t                    this.markMesh.position.setY(this.markHeight / 2 + mark.offset);\n\t                    lineGeometry.vertices[1].setY(mark.offset);\n\t                } else {\n\t                    this.markMesh.position.setY(-mark.offset - this.markHeight / 2);\n\t                    lineGeometry.vertices[1].setY(-mark.offset);\n\t                }\n\t                lineGeometry.verticesNeedUpdate = true;\n\t                lineGeometry.lineDistancesNeedUpdate = true;\n\t                lineGeometry.computeLineDistances();\n\t                this.object3D.position.set(posX, posY, 0);\n\t            };\n\t            TrendMarkWidget.prototype.show = function() {\n\t                if (!this.mark.segment) return;\n\t                this.updatePosition();\n\t                var animations = this.chartState.data.animations;\n\t                var time = animations.enabled ? 1 : 0;\n\t                this.object3D.scale.set(.01, .01, 1);\n\t                TweenLite.to(this.object3D.scale, time, {\n\t                    x: 1,\n\t                    y: 1,\n\t                    ease: Elastic.easeOut\n\t                });\n\t            };\n\t            return TrendMarkWidget;\n\t        }();\n\t    } ]);\n\t});\n\t\n\t\n\t//# sourceMappingURL=TrendsMarksPlugin.js.map\n\n/***/ }\n\n/******/ })\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** demoApp.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 45480a954172205a8eed\n **/","import { Chart, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from 'three-chart';\nimport enabled = THREE.Cache.enabled;\nimport { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/TrendsMarksPlugin';\n\nvar chart: Chart;\n\nclass DataSourse {\n\tdata: ITrendItem[] = [];\n\tstartTime: number;\n\tendTime: number;\n\n\tconstructor() {\n\t\tlet sec = 0;\n\t\tlet val = 70;\n\t\tthis.startTime = Date.now();\n\n\t\twhile (sec < 100) { //2592000\n\t\t\tthis.data.push({\n\t\t\t\txVal: this.startTime + sec * 1000,\n\t\t\t\tyVal: val\n\t\t\t});\n\t\t\tval += Math.random() * 14 - 7;\n\t\t\tsec++;\n\t\t}\n\t\tthis.endTime = this.data[this.data.length - 1].xVal;\n\t}\n\n\tgetData() {\n\t\treturn Utils.deepCopy(this.data);\n\t}\n\n\tgetNext() {\n\t\tvar lastVal = this.data[this.data.length - 1];\n\t\tvar yVal = lastVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.endTime + 1000;\n\t\tthis.endTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.push(item);\n\t\treturn item;\n\t}\n\n\tgetPrev() {\n\t\tvar firstVal = this.data[0];\n\t\tvar yVal = firstVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.startTime - 1000;\n\t\tthis.startTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.unshift(item);\n\t\treturn item;\n\t}\n}\n\nclass MarksSource {\n\tstatic getNext(val: number): ITrendMarkOptions {\n\t\tif (Math.random() > 0.2) return null;\n\t\treturn this.generate(val);\n\t}\n\n\tstatic generate(val: number): ITrendMarkOptions {\n\t\tlet descriptionColor = 'rgb(40,136,75)';\n\t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\n\t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\n\t\t\tdescriptionColor = 'rgb(219,73,49)';\n\t\t}\n\n\t\treturn {\n\t\t\ttrendName: 'main',\n\t\t\tvalue: val,\n\t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\n\t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\n\t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\n\t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\n\t\t\torientation: orientation,\n\t\t\tdescriptionColor: descriptionColor\n\t\t}\n\t}\n}\n\nwindow.onload = function () {\n\n\tinitListeners();\n\n\tvar dsMain = new DataSourse();\n\tvar dsRed = new DataSourse();\n\tvar dsBlue = new DataSourse();\n\tvar now = Date.now();\n\n\tchart = new Chart({\n\t\tyAxis: {\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true},\n\t\t\t],\n\t\t\trange: {\n\n\t\t\t\tpadding: {end: 100, start: 100},\n\t\t\t\tmargin: {end: 50, start: 50},\n\t\t\t\tzeroVal: 70\n\t\t\t}\n\t\t},\n\t\txAxis: {\n\t\t\t//range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\n\t\t\tdataType: AXIS_DATA_TYPE.DATE,\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.FIXED,\n\t\t\t\tfrom: Date.now(),\n\t\t\t\tto: Date.now() + 20000,\n\t\t\t\tpadding: {end: 200, start: 0},\n\t\t\t\tmaxLength: 5000000,\n\t\t\t\tminLength: 5000\n\t\t\t},\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true},\n\t\t\t\t{value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true}\n\t\t\t]\n\t\t\t// range: {\n\t\t\t// \tfrom: 80,\n\t\t\t// \tto: 90\n\t\t\t// }\n\t\t},\n\t\ttrends: {\n\t\t\t'main': {\n\t\t\t\ttype: TREND_TYPE.LINE,\n\t\t\t\tdataset: dsMain.getData(),\n\t\t\t\thasBeacon: true,\n\t\t\t\thasIndicator: true,\n\t\t\t\thasGradient: false,\n\t\t\t},\n\t\t\t// 'red': {dataset: dsRed.data, lineColor: 0xFF2222, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t\t// 'blue': {dataset: dsBlue.data, lineColor: 0x2222FF, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t},\n\t\tshowStats: true,\n\t\t// autoRender: {fps: 100},\n\t\t// animations: {enabled: false},\n\t\twidgets: {\n\t\t\t//Grid: {enabled: false},\n\t\t\t//Axis: {enabled: false},\n\t\t\tTrendsGradient: {enabled: false},\n\t\t\t//TrendsBeacon: {enabled: false},\n\t\t\t//TrendsIndicator: {enabled: false},\n\t\t\t// TrendsMarks: {enabled: false},\n\t\t\t// TrendsLoading: {enabled: false},\n\t\t\t// AxisMarks: {enabled: false}\n\t\t}\n\t},\n\tdocument.querySelector('.chart')\n\t\t,\n\t[\n\t\tnew TrendsMarksPlugin({items: [MarksSource.generate(now + 3000), MarksSource.generate(now + 3000), MarksSource.generate(now + 4000)]})\n\t]\n\t);\n\n\tchart.setState({animations: {enabled: false}});\n\tchart.setState({animations: {enabled: true}});\n\t\n\t(<any>window)['chart'] = chart;\n\n\tvar mainTrend = chart.getTrend('main');\n\tvar deadlineMark = chart.state.xAxisMarks.getItem('deadline');\n\tvar closeMark = chart.state.xAxisMarks.getItem('close');\n\n\tmainTrend.onDataChange(() => {\n\t\tvar closeValue = closeMark.options.value;\n\t\tif (mainTrend.getLastItem().xVal >= closeValue) {\n\t\t\tdeadlineMark.setOptions({value: closeValue + 10000});\n\t\t\tcloseMark.setOptions({value: closeValue + 20000})\n\t\t}\n\t\tvar markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\n\t\tif (markOptions) setTimeout(() => {\n\t\t\tlet trendsMarks = chart.state.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\n\t\t\ttrendsMarks.createMark(markOptions);\n\t\t}, 500);\n\t});\n\n\n\t// var previewChart1 = Chart.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-chart')[0],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.data, hasBeacon: true}\n\t// \t}\n\t// });\n\t//\n\t// var previewChart2 = Chart.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-chart')[1],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.data, hasBeacon: true}\n\t// \t},\n\t//\n\t// });\n\t//\n\t// var previewChart3 = Chart.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-chart')[2],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.data, hasBeacon: true},\n\t// \t\t'red': {dataset: dsRed.data, lineColor: 0xFF2222},\n\t// \t}\n\t// });\n\t//\n\n\tvar i = 0;\n\n\tchart.getTrend('main').onPrependRequest((requestedLength, resolve, reject) => {\n\t\tvar responseData: ITrendItem[] = [];\n\t\tvar ticksCount = Math.round(requestedLength / 1000) ;\n\t\twhile (ticksCount--) responseData.unshift(dsMain.getPrev());\n\t\tsetTimeout(() => {\n\t\t\tresolve(responseData);\n\t\t}, 2000)\n\t});\n\n\tsetInterval(() => {\n\t\ti++;\n\t\tvar val = dsMain.getNext();\n\n\t\t// [i % 2 ? 10 : 20]\n\n\t\t chart.getTrend('main').appendData([val]);\n\t\t// chart.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\n\t\t// chart.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// chart.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// chart.getTrend('red').appendData([val + 10 + Math.random() * 20]);\n\t\t// chart.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\n\n\n\n\t\t// previewChart1.getTrend('main').appendData([val]);\n\t\t// previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\n\t\t// previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\n\t\t\n\t\t// previewChart1.appendData(dataToAppend1);\n\t\t//\n\t\t// var chartData2 = previewChart2.state.data.trends[0].data;\n\t\t// var lastItem2 = chartData2[chartData.length - 1];\n\t\t// var dataToAppend2 = [\n\t\t// \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\n\t\t// ];\n\t\t// previewChart2.appendData(dataToAppend2);\n\t\t// previewChart3.appendData(dataToAppend2);\n\t}, 1000);\n};\n\n\nfunction initListeners() {\n\tvar $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]') as HTMLInputElement;\n\t$checkboxMaintrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {main: {enabled: $checkboxMaintrend.checked}}});\n\t});\n\tvar $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]') as HTMLInputElement;\n\t$checkboxRedtrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {red: {enabled: $checkboxRedtrend.checked}}});\n\t});\n\tvar $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]') as HTMLInputElement;\n\t$checkboxBluetrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {blue: {enabled: $checkboxBluetrend.checked}}});\n\t});\n\n\tvar $switchLineBtn = document.querySelector('[name=\"switch-line\"]') as HTMLInputElement;\n\t$switchLineBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.LINE});\n\t});\n\n\tvar $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]') as HTMLInputElement;\n\t$switchBarsBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.CANDLE});\n\t});\n\n\tdocument.querySelector('[name=\"move-left\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.state.data.xAxis.range;\n\t\tchart.setState({xAxis: {range: {from: currentRange.from - 2000}}});\n\t});\n\n\tdocument.querySelector('[name=\"move-right\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.state.data.xAxis.range;\n\t\tchart.setState({xAxis: {range: {to: currentRange.to + 2000}}});\n\t});\n\t\n\tvar timeframeButtons = document.querySelectorAll(\".timeframe\");\n\tfor (var i = 0; i < timeframeButtons.length; i++) {\n\t\ttimeframeButtons[i].addEventListener(\"click\", function() {\n\t\t\tvar range = Number(this.getAttribute('data-range'));\n\t\t\tvar segmentLength = Number(this.getAttribute('data-segment-length'));\n\n\n\t\t\tchart.state.setState({autoScroll: false});\n\t\t\tchart.state.zoomToRange(range);\n\t\t\tchart.state.scrollToEnd().then(() => {\n\t\t\t\tchart.state.setState({autoScroll: true});\n\t\t\t});\n\t\t});\n\t}\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demoApp.ts\n **/","module.exports = require(\"./ThreeChart\")\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-chart/build/index.js\n ** module id = 34\n ** module chunks = 1\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n    if (typeof exports === \"object\" && typeof module === \"object\") module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"ThreeChart\"] = factory(); else root[\"ThreeChart\"] = factory();\n})(this, function() {\n    return function(modules) {\n        var installedModules = {};\n        function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n            var module = installedModules[moduleId] = {\n                exports: {},\n                id: moduleId,\n                loaded: false\n            };\n            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n            module.loaded = true;\n            return module.exports;\n        }\n        __webpack_require__.m = modules;\n        __webpack_require__.c = installedModules;\n        __webpack_require__.p = \"\";\n        return __webpack_require__(0);\n    }([ function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(1));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(2));\n        __export(__webpack_require__(21));\n        __export(__webpack_require__(20));\n        __export(__webpack_require__(19));\n        __export(__webpack_require__(12));\n        __export(__webpack_require__(17));\n        __export(__webpack_require__(18));\n        __export(__webpack_require__(16));\n        __export(__webpack_require__(14));\n        __export(__webpack_require__(15));\n        __export(__webpack_require__(33));\n        __export(__webpack_require__(25));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        __webpack_require__(3);\n        var PerspectiveCamera = THREE.PerspectiveCamera;\n        var State_1 = __webpack_require__(12);\n        var Utils_1 = __webpack_require__(14);\n        var AxisWidget_1 = __webpack_require__(22);\n        var GridWidget_1 = __webpack_require__(23);\n        var TrendsLoadingWidget_1 = __webpack_require__(24);\n        var AxisMarksWidget_1 = __webpack_require__(26);\n        var BorderWidget_1 = __webpack_require__(27);\n        var TrendsIndicatorWidget_1 = __webpack_require__(28);\n        var TrendsLineWidget_1 = __webpack_require__(29);\n        var TrendsCandleWidget_1 = __webpack_require__(30);\n        var TrendsBeaconWidget_1 = __webpack_require__(31);\n        var deps_1 = __webpack_require__(32);\n        exports.MAX_DATA_LENGTH = 2692e3;\n        var Chart = function() {\n            function Chart(state, $container, plugins) {\n                var _this = this;\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.widgets = [];\n                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n                if (!$container) {\n                    Utils_1.Utils.error(\"$el must be set\");\n                }\n                var style = getComputedStyle($container);\n                state.width = parseInt(style.width);\n                state.height = parseInt(style.height);\n                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n                    return _this.zoom(zoomValue, origin);\n                }, 200);\n                this.$container = $container;\n                this.init($container);\n            }\n            Chart.installWidget = function(Widget) {\n                if (!Widget.widgetName) {\n                    Utils_1.Utils.error(\"unnamed widget\");\n                }\n                this.installedWidgets[Widget.widgetName] = Widget;\n            };\n            Chart.prototype.init = function($container) {\n                var state = this.state;\n                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n                this.scene = new THREE.Scene();\n                this.isStopped = !autoRender.enabled;\n                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n                    antialias: true,\n                    alpha: true\n                });\n                renderer.setPixelRatio(Chart.devicePixelRatio);\n                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n                renderer.setSize(w, h);\n                $container.appendChild(renderer.domElement);\n                this.$el = renderer.domElement;\n                this.$el.style.display = \"block\";\n                if (showStats) {\n                    this.stats = new Stats();\n                    $container.appendChild(this.stats.domElement);\n                }\n                this.setupCamera();\n                var widgetsClasses = this.state.widgetsClasses;\n                for (var widgetName in widgetsClasses) {\n                    var widgetOptions = this.state.data.widgets[widgetName];\n                    if (!widgetOptions.enabled) continue;\n                    var WidgetConstructor = widgetsClasses[widgetName];\n                    var widget = new WidgetConstructor(this.state);\n                    this.scene.add(widget.getObject3D());\n                    this.widgets.push(widget);\n                }\n                this.bindEvents();\n                this.renderLoop();\n            };\n            Chart.prototype.renderLoop = function() {\n                var _this = this;\n                if (this.isDestroyed) return;\n                this.stats && this.stats.begin();\n                this.render();\n                if (this.isStopped) return;\n                var fpsLimit = this.state.data.autoRender.fps;\n                if (fpsLimit) {\n                    var delay = 1e3 / fpsLimit;\n                    setTimeout(function() {\n                        return requestAnimationFrame(function() {\n                            return _this.renderLoop();\n                        });\n                    }, delay);\n                } else {\n                    requestAnimationFrame(function() {\n                        return _this.renderLoop();\n                    });\n                }\n                this.stats && this.stats.end();\n            };\n            Chart.prototype.render = function() {\n                this.renderer.render(this.scene, this.camera);\n            };\n            Chart.prototype.stop = function() {\n                this.isStopped = true;\n            };\n            Chart.prototype.run = function() {\n                this.isStopped = false;\n                this.renderLoop();\n            };\n            Chart.prototype.destroy = function() {\n                this.isDestroyed = true;\n                this.stop();\n                this.state.destroy();\n                this.unbindEvents();\n                try {\n                    this.renderer.forceContextLoss();\n                } catch (wtf) {}\n                this.renderer.context = null;\n                this.renderer.domElement = null;\n                this.renderer = null;\n            };\n            Chart.prototype.getState = function() {\n                return this.state.data;\n            };\n            Chart.prototype.getTrend = function(trendName) {\n                return this.state.getTrend(trendName);\n            };\n            Chart.prototype.setState = function(state) {\n                return this.state.setState(state);\n            };\n            Chart.prototype.bindEvents = function() {\n                var _this = this;\n                var $el = this.$el;\n                if (this.state.data.controls.enabled) {\n                    $el.addEventListener(\"mousewheel\", function(ev) {\n                        _this.onMouseWheel(ev);\n                    });\n                    $el.addEventListener(\"mousemove\", function(ev) {\n                        _this.onMouseMove(ev);\n                    });\n                    $el.addEventListener(\"mousedown\", function(ev) {\n                        return _this.onMouseDown(ev);\n                    });\n                    $el.addEventListener(\"mouseup\", function(ev) {\n                        return _this.onMouseUp(ev);\n                    });\n                    $el.addEventListener(\"touchmove\", function(ev) {\n                        _this.onTouchMove(ev);\n                    });\n                    $el.addEventListener(\"touchend\", function(ev) {\n                        _this.onTouchEnd(ev);\n                    });\n                }\n                if (this.state.data.autoResize) {\n                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n                    });\n                }\n                this.unsubscribers = [ this.state.onTrendsChange(function() {\n                    return _this.autoscroll();\n                }), this.state.screen.onTransformationFrame(function(options) {\n                    return _this.onScreenTransformHandler(options);\n                }), this.state.onResize(function(options) {\n                    return _this.onChartResize();\n                }) ];\n            };\n            Chart.prototype.unbindEvents = function() {\n                try {\n                    this.resizeSensor && this.resizeSensor.detach();\n                } catch (e) {}\n                this.$el.remove();\n                this.unsubscribers.forEach(function(unsubscribe) {\n                    return unsubscribe();\n                });\n            };\n            Chart.prototype.setupCamera = function() {\n                var camSettings = this.state.screen.getCameraSettings();\n                if (!this.camera) {\n                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n                    this.scene.add(this.camera);\n                } else {\n                    this.camera.fov = camSettings.FOV;\n                    this.camera.aspect = camSettings.aspect;\n                    this.camera.far = camSettings.far;\n                    this.camera.near = camSettings.near;\n                    this.camera.updateProjectionMatrix();\n                }\n                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n                this.cameraInitialPosition = this.camera.position.clone();\n                this.onScreenTransformHandler(this.state.screen.options);\n            };\n            Chart.prototype.onScreenTransformHandler = function(options) {\n                if (options.scrollX != void 0) {\n                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n                    this.camera.position.setX(scrollX_1);\n                }\n                if (options.scrollY != void 0) {\n                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n                    this.camera.position.setY(scrollY_1);\n                }\n            };\n            Chart.prototype.autoscroll = function() {\n                var state = this.state;\n                if (!state.data.autoScroll) return;\n                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n                if (trendsMaxXDelta > 0) {\n                    var maxVisibleX = this.state.screen.getScreenRightVal();\n                    var paddingRightX = this.state.getPaddingRight();\n                    var currentScroll = state.data.xAxis.range.scroll;\n                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n                        return;\n                    }\n                    var scrollDelta = trendsMaxXDelta;\n                    this.setState({\n                        xAxis: {\n                            range: {\n                                scroll: currentScroll + scrollDelta\n                            }\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onScrollStop = function() {};\n            Chart.prototype.onMouseDown = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.clientX,\n                        y: ev.clientY\n                    }\n                });\n            };\n            Chart.prototype.onMouseUp = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onMouseMove = function(ev) {\n                if (this.state.data.cursor.dragMode) {\n                    this.setState({\n                        cursor: {\n                            dragMode: true,\n                            x: ev.clientX,\n                            y: ev.clientY\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onMouseWheel = function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n                var zoomOrigin = ev.layerX / this.state.data.width;\n                var zoomValue = 1 + ev.wheelDeltaY * .001;\n                this.zoom(zoomValue, zoomOrigin);\n            };\n            Chart.prototype.onTouchMove = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.touches[0].clientX,\n                        y: ev.touches[0].clientY\n                    }\n                });\n            };\n            Chart.prototype.onTouchEnd = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n                this.setState({\n                    width: width,\n                    height: height\n                });\n            };\n            Chart.prototype.onChartResize = function() {\n                var _a = this.state.data, width = _a.width, height = _a.height;\n                this.renderer.setSize(width, height);\n                this.setupCamera();\n            };\n            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n                var _this = this;\n                var MAX_ZOOM_VALUE = 1.5;\n                var MIN_ZOOM_VALUE = .7;\n                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n                var autoScrollIsEnabled = this.state.data.autoScroll;\n                if (autoScrollIsEnabled) this.state.setState({\n                    autoScroll: false\n                });\n                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n                    if (autoScrollIsEnabled) _this.setState({\n                        autoScroll: true\n                    });\n                });\n            };\n            Chart.createPreviewChart = function(userOptions, $el) {\n                var previewChartOptions = {\n                    animations: {\n                        enabled: false\n                    },\n                    widgets: {\n                        Grid: {\n                            enabled: false\n                        },\n                        Axis: {\n                            enabled: false\n                        },\n                        TrendsGradient: {\n                            enabled: false\n                        }\n                    }\n                };\n                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n                return new Chart(options, $el);\n            };\n            Chart.devicePixelRatio = window.devicePixelRatio;\n            Chart.installedWidgets = {};\n            Chart.renderers = {\n                CanvasRenderer: THREE.CanvasRenderer,\n                WebGLRenderer: THREE.WebGLRenderer\n            };\n            return Chart;\n        }();\n        exports.Chart = Chart;\n        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n        Chart.installWidget(AxisWidget_1.AxisWidget);\n        Chart.installWidget(GridWidget_1.GridWidget);\n        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n        Chart.installWidget(BorderWidget_1.BorderWidget);\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        window.TweenLite = TweenMax;\n        window.Stats = __webpack_require__(4);\n        __webpack_require__(5);\n        __webpack_require__(6);\n        exports.isPlainObject = __webpack_require__(7);\n        exports.EE2 = __webpack_require__(9);\n        var es6_promise_1 = __webpack_require__(10);\n        exports.Promise = es6_promise_1.Promise;\n        exports.ResizeSensor = __webpack_require__(11);\n    }, function(module, exports) {\n        var Stats = function() {\n            function h(a) {\n                c.appendChild(a.dom);\n                return a;\n            }\n            function k(a) {\n                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n                l = a;\n            }\n            var l = 0, c = document.createElement(\"div\");\n            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n            c.addEventListener(\"click\", function(a) {\n                a.preventDefault();\n                k(++l % c.children.length);\n            }, !1);\n            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n            k(0);\n            return {\n                REVISION: 16,\n                dom: c,\n                addPanel: h,\n                showPanel: k,\n                begin: function() {\n                    g = (performance || Date).now();\n                },\n                end: function() {\n                    a++;\n                    var c = (performance || Date).now();\n                    f.update(c - g, 200);\n                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n                        var d = performance.memory;\n                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                    }\n                    return c;\n                },\n                update: function() {\n                    g = this.end();\n                },\n                domElement: c,\n                setMode: k\n            };\n        };\n        Stats.Panel = function(h, k, l) {\n            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n            q.width = r;\n            q.height = f;\n            q.style.cssText = \"width:80px;height:48px\";\n            var b = q.getContext(\"2d\");\n            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n            b.textBaseline = \"top\";\n            b.fillStyle = l;\n            b.fillRect(0, 0, r, f);\n            b.fillStyle = k;\n            b.fillText(h, t, u);\n            b.fillRect(d, m, n, p);\n            b.fillStyle = l;\n            b.globalAlpha = .9;\n            b.fillRect(d, m, n, p);\n            return {\n                dom: q,\n                update: function(f, v) {\n                    c = Math.min(c, f);\n                    g = Math.max(g, f);\n                    b.fillStyle = l;\n                    b.globalAlpha = 1;\n                    b.fillRect(0, 0, r, m);\n                    b.fillStyle = k;\n                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                    b.fillRect(d + n - a, m, a, p);\n                    b.fillStyle = l;\n                    b.globalAlpha = .9;\n                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n                }\n            };\n        };\n        \"object\" === typeof module && (module.exports = Stats);\n    }, function(module, exports) {\n        THREE.SpriteCanvasMaterial = function(parameters) {\n            THREE.Material.call(this);\n            this.type = \"SpriteCanvasMaterial\";\n            this.color = new THREE.Color(16777215);\n            this.program = function(context, color) {};\n            this.setValues(parameters);\n        };\n        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n            var material = new THREE.SpriteCanvasMaterial();\n            material.copy(this);\n            material.color.copy(this.color);\n            material.program = this.program;\n            return material;\n        };\n        THREE.CanvasRenderer = function(parameters) {\n            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n            parameters = parameters || {};\n            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n                alpha: parameters.alpha === true\n            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n            if (_context.setLineDash === undefined) {\n                _context.setLineDash = function() {};\n            }\n            this.domElement = _canvas;\n            this.autoClear = true;\n            this.sortObjects = true;\n            this.sortElements = true;\n            this.info = {\n                render: {\n                    vertices: 0,\n                    faces: 0\n                }\n            };\n            this.supportsVertexTextures = function() {};\n            this.setFaceCulling = function() {};\n            this.getContext = function() {\n                return _context;\n            };\n            this.getContextAttributes = function() {\n                return _context.getContextAttributes();\n            };\n            this.getPixelRatio = function() {\n                return _pixelRatio;\n            };\n            this.setPixelRatio = function(value) {\n                if (value !== undefined) _pixelRatio = value;\n            };\n            this.setSize = function(width, height, updateStyle) {\n                _canvasWidth = width * _pixelRatio;\n                _canvasHeight = height * _pixelRatio;\n                _canvas.width = _canvasWidth;\n                _canvas.height = _canvasHeight;\n                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n                if (updateStyle !== false) {\n                    _canvas.style.width = width + \"px\";\n                    _canvas.style.height = height + \"px\";\n                }\n                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _contextGlobalAlpha = 1;\n                _contextGlobalCompositeOperation = 0;\n                _contextStrokeStyle = null;\n                _contextFillStyle = null;\n                _contextLineWidth = null;\n                _contextLineCap = null;\n                _contextLineJoin = null;\n                this.setViewport(0, 0, width, height);\n            };\n            this.setViewport = function(x, y, width, height) {\n                _viewportX = x * _pixelRatio;\n                _viewportY = y * _pixelRatio;\n                _viewportWidth = width * _pixelRatio;\n                _viewportHeight = height * _pixelRatio;\n            };\n            this.setScissor = function() {};\n            this.setScissorTest = function() {};\n            this.setClearColor = function(color, alpha) {\n                _clearColor.set(color);\n                _clearAlpha = alpha !== undefined ? alpha : 1;\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n            };\n            this.setClearColorHex = function(hex, alpha) {\n                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n                this.setClearColor(hex, alpha);\n            };\n            this.getClearColor = function() {\n                return _clearColor;\n            };\n            this.getClearAlpha = function() {\n                return _clearAlpha;\n            };\n            this.getMaxAnisotropy = function() {\n                return 0;\n            };\n            this.clear = function() {\n                if (_clearBox.isEmpty() === false) {\n                    _clearBox.intersect(_clipBox);\n                    _clearBox.expandByScalar(2);\n                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n                    if (_clearAlpha < 1) {\n                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    if (_clearAlpha > 0) {\n                        setBlending(THREE.NormalBlending);\n                        setOpacity(1);\n                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    _clearBox.makeEmpty();\n                }\n            };\n            this.clearColor = function() {};\n            this.clearDepth = function() {};\n            this.clearStencil = function() {};\n            this.render = function(scene, camera) {\n                if (camera instanceof THREE.Camera === false) {\n                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n                    return;\n                }\n                if (this.autoClear === true) this.clear();\n                _this.info.render.vertices = 0;\n                _this.info.render.faces = 0;\n                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n                _elements = _renderData.elements;\n                _lights = _renderData.lights;\n                _camera = camera;\n                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n                calculateLights();\n                for (var e = 0, el = _elements.length; e < el; e++) {\n                    var element = _elements[e];\n                    var material = element.material;\n                    if (material === undefined || material.opacity === 0) continue;\n                    _elemBox.makeEmpty();\n                    if (element instanceof THREE.RenderableSprite) {\n                        _v1 = element;\n                        _v1.x *= _canvasWidthHalf;\n                        _v1.y *= _canvasHeightHalf;\n                        renderSprite(_v1, element, material);\n                    } else if (element instanceof THREE.RenderableLine) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderLine(_v1, _v2, element, material);\n                        }\n                    } else if (element instanceof THREE.RenderableFace) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v3 = element.v3;\n                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _v3.positionScreen.x *= _canvasWidthHalf;\n                        _v3.positionScreen.y *= _canvasHeightHalf;\n                        if (material.overdraw > 0) {\n                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n                        }\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n                        }\n                    }\n                    _clearBox.union(_elemBox);\n                }\n                _context.setTransform(1, 0, 0, 1, 0, 0);\n            };\n            function calculateLights() {\n                _ambientLight.setRGB(0, 0, 0);\n                _directionalLights.setRGB(0, 0, 0);\n                _pointLights.setRGB(0, 0, 0);\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    var lightColor = light.color;\n                    if (light instanceof THREE.AmbientLight) {\n                        _ambientLight.add(lightColor);\n                    } else if (light instanceof THREE.DirectionalLight) {\n                        _directionalLights.add(lightColor);\n                    } else if (light instanceof THREE.PointLight) {\n                        _pointLights.add(lightColor);\n                    }\n                }\n            }\n            function calculateLight(position, normal, color) {\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    _lightColor.copy(light.color);\n                    if (light instanceof THREE.DirectionalLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n                        var amount = normal.dot(lightPosition);\n                        if (amount <= 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    } else if (light instanceof THREE.PointLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n                        if (amount <= 0) continue;\n                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n                        if (amount == 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    }\n                }\n            }\n            function renderSprite(v1, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                var scaleX = element.scale.x * _canvasWidthHalf;\n                var scaleY = element.scale.y * _canvasHeightHalf;\n                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n                _elemBox.min.set(v1.x - dist, v1.y - dist);\n                _elemBox.max.set(v1.x + dist, v1.y + dist);\n                if (material instanceof THREE.SpriteMaterial) {\n                    var texture = material.map;\n                    if (texture !== null) {\n                        var pattern = _patterns[texture.id];\n                        if (pattern === undefined || pattern.version !== texture.version) {\n                            pattern = textureToPattern(texture);\n                            _patterns[texture.id] = pattern;\n                        }\n                        if (pattern.canvas !== undefined) {\n                            setFillStyle(pattern.canvas);\n                            var bitmap = texture.image;\n                            var ox = bitmap.width * texture.offset.x;\n                            var oy = bitmap.height * texture.offset.y;\n                            var sx = bitmap.width * texture.repeat.x;\n                            var sy = bitmap.height * texture.repeat.y;\n                            var cx = scaleX / sx;\n                            var cy = scaleY / sy;\n                            _context.save();\n                            _context.translate(v1.x, v1.y);\n                            if (material.rotation !== 0) _context.rotate(material.rotation);\n                            _context.translate(-scaleX / 2, -scaleY / 2);\n                            _context.scale(cx, cy);\n                            _context.translate(-ox, -oy);\n                            _context.fillRect(ox, oy, sx, sy);\n                            _context.restore();\n                        }\n                    } else {\n                        setFillStyle(material.color.getStyle());\n                        _context.save();\n                        _context.translate(v1.x, v1.y);\n                        if (material.rotation !== 0) _context.rotate(material.rotation);\n                        _context.scale(scaleX, -scaleY);\n                        _context.fillRect(-.5, -.5, 1, 1);\n                        _context.restore();\n                    }\n                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n                    setStrokeStyle(material.color.getStyle());\n                    setFillStyle(material.color.getStyle());\n                    _context.save();\n                    _context.translate(v1.x, v1.y);\n                    if (material.rotation !== 0) _context.rotate(material.rotation);\n                    _context.scale(scaleX, scaleY);\n                    material.program(_context);\n                    _context.restore();\n                }\n            }\n            function renderLine(v1, v2, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _context.beginPath();\n                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n                if (material instanceof THREE.LineBasicMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    if (material.vertexColors !== THREE.VertexColors) {\n                        setStrokeStyle(material.color.getStyle());\n                    } else {\n                        var colorStyle1 = element.vertexColors[0].getStyle();\n                        var colorStyle2 = element.vertexColors[1].getStyle();\n                        if (colorStyle1 === colorStyle2) {\n                            setStrokeStyle(colorStyle1);\n                        } else {\n                            try {\n                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n                                grad.addColorStop(0, colorStyle1);\n                                grad.addColorStop(1, colorStyle2);\n                            } catch (exception) {\n                                grad = colorStyle1;\n                            }\n                            setStrokeStyle(grad);\n                        }\n                    }\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                } else if (material instanceof THREE.LineDashedMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    setStrokeStyle(material.color.getStyle());\n                    setLineDash([ material.dashSize, material.gapSize ]);\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                    setLineDash([]);\n                }\n            }\n            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n                _this.info.render.vertices += 3;\n                _this.info.render.faces++;\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _v1x = v1.positionScreen.x;\n                _v1y = v1.positionScreen.y;\n                _v2x = v2.positionScreen.x;\n                _v2y = v2.positionScreen.y;\n                _v3x = v3.positionScreen.x;\n                _v3y = v3.positionScreen.y;\n                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n                    _diffuseColor.copy(material.color);\n                    _emissiveColor.copy(material.emissive);\n                    if (material.vertexColors === THREE.FaceColors) {\n                        _diffuseColor.multiply(element.color);\n                    }\n                    _color.copy(_ambientLight);\n                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n                    calculateLight(_centroid, element.normalModel, _color);\n                    _color.multiply(_diffuseColor).add(_emissiveColor);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n                    if (material.map !== null) {\n                        var mapping = material.map.mapping;\n                        if (mapping === THREE.UVMapping) {\n                            _uvs = element.uvs;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n                        }\n                    } else if (material.envMap !== null) {\n                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n                            _uv1x = .5 * _normal.x + .5;\n                            _uv1y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n                            _uv2x = .5 * _normal.x + .5;\n                            _uv2y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n                            _uv3x = .5 * _normal.x + .5;\n                            _uv3y = .5 * _normal.y + .5;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n                        }\n                    } else {\n                        _color.copy(material.color);\n                        if (material.vertexColors === THREE.FaceColors) {\n                            _color.multiply(element.color);\n                        }\n                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                    }\n                } else if (material instanceof THREE.MeshNormalMaterial) {\n                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else {\n                    _color.setRGB(1, 1, 1);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                }\n            }\n            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n                _context.beginPath();\n                _context.moveTo(x0, y0);\n                _context.lineTo(x1, y1);\n                _context.lineTo(x2, y2);\n                _context.closePath();\n            }\n            function strokePath(color, linewidth, linecap, linejoin) {\n                setLineWidth(linewidth);\n                setLineCap(linecap);\n                setLineJoin(linejoin);\n                setStrokeStyle(color.getStyle());\n                _context.stroke();\n                _elemBox.expandByScalar(linewidth * 2);\n            }\n            function fillPath(color) {\n                setFillStyle(color.getStyle());\n                _context.fill();\n            }\n            function textureToPattern(texture) {\n                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n                    return {\n                        canvas: undefined,\n                        version: texture.version\n                    };\n                }\n                var image = texture.image;\n                if (image.complete === false) {\n                    return {\n                        canvas: undefined,\n                        version: 0\n                    };\n                }\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                var context = canvas.getContext(\"2d\");\n                context.setTransform(1, 0, 0, -1, 0, image.height);\n                context.drawImage(image, 0, 0);\n                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n                var repeat = \"no-repeat\";\n                if (repeatX === true && repeatY === true) {\n                    repeat = \"repeat\";\n                } else if (repeatX === true) {\n                    repeat = \"repeat-x\";\n                } else if (repeatY === true) {\n                    repeat = \"repeat-y\";\n                }\n                var pattern = _context.createPattern(canvas, repeat);\n                if (texture.onUpdate) texture.onUpdate(texture);\n                return {\n                    canvas: pattern,\n                    version: texture.version\n                };\n            }\n            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n                var pattern = _patterns[texture.id];\n                if (pattern === undefined || pattern.version !== texture.version) {\n                    pattern = textureToPattern(texture);\n                    _patterns[texture.id] = pattern;\n                }\n                if (pattern.canvas !== undefined) {\n                    setFillStyle(pattern.canvas);\n                } else {\n                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n                    _context.fill();\n                    return;\n                }\n                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n                u0 = (u0 + offsetX) * width;\n                v0 = (v0 + offsetY) * height;\n                u1 = (u1 + offsetX) * width;\n                v1 = (v1 + offsetY) * height;\n                u2 = (u2 + offsetX) * width;\n                v2 = (v2 + offsetY) * height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                if (det === 0) return;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.fill();\n                _context.restore();\n            }\n            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n                u0 *= width;\n                v0 *= height;\n                u1 *= width;\n                v1 *= height;\n                u2 *= width;\n                v2 *= height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.clip();\n                _context.drawImage(image, 0, 0);\n                _context.restore();\n            }\n            function expand(v1, v2, pixels) {\n                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n                if (det === 0) return;\n                idet = pixels / Math.sqrt(det);\n                x *= idet;\n                y *= idet;\n                v2.x += x;\n                v2.y += y;\n                v1.x -= x;\n                v1.y -= y;\n            }\n            function setOpacity(value) {\n                if (_contextGlobalAlpha !== value) {\n                    _context.globalAlpha = value;\n                    _contextGlobalAlpha = value;\n                }\n            }\n            function setBlending(value) {\n                if (_contextGlobalCompositeOperation !== value) {\n                    if (value === THREE.NormalBlending) {\n                        _context.globalCompositeOperation = \"source-over\";\n                    } else if (value === THREE.AdditiveBlending) {\n                        _context.globalCompositeOperation = \"lighter\";\n                    } else if (value === THREE.SubtractiveBlending) {\n                        _context.globalCompositeOperation = \"darker\";\n                    }\n                    _contextGlobalCompositeOperation = value;\n                }\n            }\n            function setLineWidth(value) {\n                if (_contextLineWidth !== value) {\n                    _context.lineWidth = value;\n                    _contextLineWidth = value;\n                }\n            }\n            function setLineCap(value) {\n                if (_contextLineCap !== value) {\n                    _context.lineCap = value;\n                    _contextLineCap = value;\n                }\n            }\n            function setLineJoin(value) {\n                if (_contextLineJoin !== value) {\n                    _context.lineJoin = value;\n                    _contextLineJoin = value;\n                }\n            }\n            function setStrokeStyle(value) {\n                if (_contextStrokeStyle !== value) {\n                    _context.strokeStyle = value;\n                    _contextStrokeStyle = value;\n                }\n            }\n            function setFillStyle(value) {\n                if (_contextFillStyle !== value) {\n                    _context.fillStyle = value;\n                    _contextFillStyle = value;\n                }\n            }\n            function setLineDash(value) {\n                if (_contextLineDash.length !== value.length) {\n                    _context.setLineDash(value);\n                    _contextLineDash = value;\n                }\n            }\n        };\n    }, function(module, exports) {\n        THREE.RenderableObject = function() {\n            this.id = 0;\n            this.object = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableFace = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.v3 = new THREE.RenderableVertex();\n            this.normalModel = new THREE.Vector3();\n            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n            this.vertexNormalsLength = 0;\n            this.color = new THREE.Color();\n            this.material = null;\n            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableVertex = function() {\n            this.position = new THREE.Vector3();\n            this.positionWorld = new THREE.Vector3();\n            this.positionScreen = new THREE.Vector4();\n            this.visible = true;\n        };\n        THREE.RenderableVertex.prototype.copy = function(vertex) {\n            this.positionWorld.copy(vertex.positionWorld);\n            this.positionScreen.copy(vertex.positionScreen);\n        };\n        THREE.RenderableLine = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n            this.material = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableSprite = function() {\n            this.id = 0;\n            this.object = null;\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.rotation = 0;\n            this.scale = new THREE.Vector2();\n            this.material = null;\n            this.renderOrder = 0;\n        };\n        THREE.Projector = function() {\n            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n                objects: [],\n                lights: [],\n                elements: []\n            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n            this.projectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n                vector.project(camera);\n            };\n            this.unprojectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n                vector.unproject(camera);\n            };\n            this.pickingRay = function(vector, camera) {\n                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n            };\n            var RenderList = function() {\n                var normals = [];\n                var uvs = [];\n                var object = null;\n                var material = null;\n                var normalMatrix = new THREE.Matrix3();\n                function setObject(value) {\n                    object = value;\n                    material = object.material;\n                    normalMatrix.getNormalMatrix(object.matrixWorld);\n                    normals.length = 0;\n                    uvs.length = 0;\n                }\n                function projectVertex(vertex) {\n                    var position = vertex.position;\n                    var positionWorld = vertex.positionWorld;\n                    var positionScreen = vertex.positionScreen;\n                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n                    var invW = 1 / positionScreen.w;\n                    positionScreen.x *= invW;\n                    positionScreen.y *= invW;\n                    positionScreen.z *= invW;\n                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n                }\n                function pushVertex(x, y, z) {\n                    _vertex = getNextVertexInPool();\n                    _vertex.position.set(x, y, z);\n                    projectVertex(_vertex);\n                }\n                function pushNormal(x, y, z) {\n                    normals.push(x, y, z);\n                }\n                function pushUv(x, y) {\n                    uvs.push(x, y);\n                }\n                function checkTriangleVisibility(v1, v2, v3) {\n                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n                    _points3[0] = v1.positionScreen;\n                    _points3[1] = v2.positionScreen;\n                    _points3[2] = v3.positionScreen;\n                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n                }\n                function checkBackfaceCulling(v1, v2, v3) {\n                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n                }\n                function pushLine(a, b) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    _line = getNextLineInPool();\n                    _line.id = object.id;\n                    _line.v1.copy(v1);\n                    _line.v2.copy(v2);\n                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n                    _line.renderOrder = object.renderOrder;\n                    _line.material = object.material;\n                    _renderData.elements.push(_line);\n                }\n                function pushTriangle(a, b, c) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    var v3 = _vertexPool[c];\n                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n                        _face = getNextFaceInPool();\n                        _face.id = object.id;\n                        _face.v1.copy(v1);\n                        _face.v2.copy(v2);\n                        _face.v3.copy(v3);\n                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                        _face.renderOrder = object.renderOrder;\n                        _face.normalModel.fromArray(normals, a * 3);\n                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n                        for (var i = 0; i < 3; i++) {\n                            var normal = _face.vertexNormalsModel[i];\n                            normal.fromArray(normals, arguments[i] * 3);\n                            normal.applyMatrix3(normalMatrix).normalize();\n                            var uv = _face.uvs[i];\n                            uv.fromArray(uvs, arguments[i] * 2);\n                        }\n                        _face.vertexNormalsLength = 3;\n                        _face.material = object.material;\n                        _renderData.elements.push(_face);\n                    }\n                }\n                return {\n                    setObject: setObject,\n                    projectVertex: projectVertex,\n                    checkTriangleVisibility: checkTriangleVisibility,\n                    checkBackfaceCulling: checkBackfaceCulling,\n                    pushVertex: pushVertex,\n                    pushNormal: pushNormal,\n                    pushUv: pushUv,\n                    pushLine: pushLine,\n                    pushTriangle: pushTriangle\n                };\n            };\n            var renderList = new RenderList();\n            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n                _faceCount = 0;\n                _lineCount = 0;\n                _spriteCount = 0;\n                _renderData.elements.length = 0;\n                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n                if (camera.parent === null) camera.updateMatrixWorld();\n                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n                _frustum.setFromMatrix(_viewProjectionMatrix);\n                _objectCount = 0;\n                _renderData.objects.length = 0;\n                _renderData.lights.length = 0;\n                scene.traverseVisible(function(object) {\n                    if (object instanceof THREE.Light) {\n                        _renderData.lights.push(object);\n                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n                        var material = object.material;\n                        if (material.visible === false) return;\n                        if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n                            _object = getNextObjectInPool();\n                            _object.id = object.id;\n                            _object.object = object;\n                            _vector3.setFromMatrixPosition(object.matrixWorld);\n                            _vector3.applyProjection(_viewProjectionMatrix);\n                            _object.z = _vector3.z;\n                            _object.renderOrder = object.renderOrder;\n                            _renderData.objects.push(_object);\n                        }\n                    }\n                });\n                if (sortObjects === true) {\n                    _renderData.objects.sort(painterSort);\n                }\n                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n                    var object = _renderData.objects[o].object;\n                    var geometry = object.geometry;\n                    renderList.setObject(object);\n                    _modelMatrix = object.matrixWorld;\n                    _vertexCount = 0;\n                    if (object instanceof THREE.Mesh) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            var groups = geometry.groups;\n                            if (attributes.position === undefined) continue;\n                            var positions = attributes.position.array;\n                            for (var i = 0, l = positions.length; i < l; i += 3) {\n                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                            }\n                            if (attributes.normal !== undefined) {\n                                var normals = attributes.normal.array;\n                                for (var i = 0, l = normals.length; i < l; i += 3) {\n                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n                                }\n                            }\n                            if (attributes.uv !== undefined) {\n                                var uvs = attributes.uv.array;\n                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n                                }\n                            }\n                            if (geometry.index !== null) {\n                                var indices = geometry.index.array;\n                                if (groups.length > 0) {\n                                    for (var o = 0; o < groups.length; o++) {\n                                        var group = groups[o];\n                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                        }\n                                    }\n                                } else {\n                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                    }\n                                }\n                            } else {\n                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                                    renderList.pushTriangle(i, i + 1, i + 2);\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            var vertices = geometry.vertices;\n                            var faces = geometry.faces;\n                            var faceVertexUvs = geometry.faceVertexUvs[0];\n                            _normalMatrix.getNormalMatrix(_modelMatrix);\n                            var material = object.material;\n                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n                                var vertex = vertices[v];\n                                _vector3.copy(vertex);\n                                if (material.morphTargets === true) {\n                                    var morphTargets = geometry.morphTargets;\n                                    var morphInfluences = object.morphTargetInfluences;\n                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                                        var influence = morphInfluences[t];\n                                        if (influence === 0) continue;\n                                        var target = morphTargets[t];\n                                        var targetVertex = target.vertices[v];\n                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n                                    }\n                                }\n                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n                            }\n                            for (var f = 0, fl = faces.length; f < fl; f++) {\n                                var face = faces[f];\n                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n                                if (material === undefined) continue;\n                                var side = material.side;\n                                var v1 = _vertexPool[face.a];\n                                var v2 = _vertexPool[face.b];\n                                var v3 = _vertexPool[face.c];\n                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n                                if (side !== THREE.DoubleSide) {\n                                    if (side === THREE.FrontSide && visible === false) continue;\n                                    if (side === THREE.BackSide && visible === true) continue;\n                                }\n                                _face = getNextFaceInPool();\n                                _face.id = object.id;\n                                _face.v1.copy(v1);\n                                _face.v2.copy(v2);\n                                _face.v3.copy(v3);\n                                _face.normalModel.copy(face.normal);\n                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                    _face.normalModel.negate();\n                                }\n                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n                                var faceVertexNormals = face.vertexNormals;\n                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n                                    var normalModel = _face.vertexNormalsModel[n];\n                                    normalModel.copy(faceVertexNormals[n]);\n                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                        normalModel.negate();\n                                    }\n                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n                                }\n                                _face.vertexNormalsLength = faceVertexNormals.length;\n                                var vertexUvs = faceVertexUvs[f];\n                                if (vertexUvs !== undefined) {\n                                    for (var u = 0; u < 3; u++) {\n                                        _face.uvs[u].copy(vertexUvs[u]);\n                                    }\n                                }\n                                _face.color = face.color;\n                                _face.material = material;\n                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                                _face.renderOrder = object.renderOrder;\n                                _renderData.elements.push(_face);\n                            }\n                        }\n                    } else if (object instanceof THREE.Line) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            if (attributes.position !== undefined) {\n                                var positions = attributes.position.array;\n                                for (var i = 0, l = positions.length; i < l; i += 3) {\n                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                                }\n                                if (geometry.index !== null) {\n                                    var indices = geometry.index.array;\n                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n                                        renderList.pushLine(indices[i], indices[i + 1]);\n                                    }\n                                } else {\n                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                                        renderList.pushLine(i, i + 1);\n                                    }\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n                            var vertices = object.geometry.vertices;\n                            if (vertices.length === 0) continue;\n                            v1 = getNextVertexInPool();\n                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n                                v1 = getNextVertexInPool();\n                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n                                if ((v + 1) % step > 0) continue;\n                                v2 = _vertexPool[_vertexCount - 2];\n                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n                                    _line = getNextLineInPool();\n                                    _line.id = object.id;\n                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n                                    _line.renderOrder = object.renderOrder;\n                                    _line.material = object.material;\n                                    if (object.material.vertexColors === THREE.VertexColors) {\n                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                                    }\n                                    _renderData.elements.push(_line);\n                                }\n                            }\n                        }\n                    } else if (object instanceof THREE.Sprite) {\n                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n                        _vector4.applyMatrix4(_viewProjectionMatrix);\n                        var invW = 1 / _vector4.w;\n                        _vector4.z *= invW;\n                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n                            _sprite = getNextSpriteInPool();\n                            _sprite.id = object.id;\n                            _sprite.x = _vector4.x * invW;\n                            _sprite.y = _vector4.y * invW;\n                            _sprite.z = _vector4.z;\n                            _sprite.renderOrder = object.renderOrder;\n                            _sprite.object = object;\n                            _sprite.rotation = object.rotation;\n                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n                            _sprite.material = object.material;\n                            _renderData.elements.push(_sprite);\n                        }\n                    }\n                }\n                if (sortElements === true) {\n                    _renderData.elements.sort(painterSort);\n                }\n                return _renderData;\n            };\n            function getNextObjectInPool() {\n                if (_objectCount === _objectPoolLength) {\n                    var object = new THREE.RenderableObject();\n                    _objectPool.push(object);\n                    _objectPoolLength++;\n                    _objectCount++;\n                    return object;\n                }\n                return _objectPool[_objectCount++];\n            }\n            function getNextVertexInPool() {\n                if (_vertexCount === _vertexPoolLength) {\n                    var vertex = new THREE.RenderableVertex();\n                    _vertexPool.push(vertex);\n                    _vertexPoolLength++;\n                    _vertexCount++;\n                    return vertex;\n                }\n                return _vertexPool[_vertexCount++];\n            }\n            function getNextFaceInPool() {\n                if (_faceCount === _facePoolLength) {\n                    var face = new THREE.RenderableFace();\n                    _facePool.push(face);\n                    _facePoolLength++;\n                    _faceCount++;\n                    return face;\n                }\n                return _facePool[_faceCount++];\n            }\n            function getNextLineInPool() {\n                if (_lineCount === _linePoolLength) {\n                    var line = new THREE.RenderableLine();\n                    _linePool.push(line);\n                    _linePoolLength++;\n                    _lineCount++;\n                    return line;\n                }\n                return _linePool[_lineCount++];\n            }\n            function getNextSpriteInPool() {\n                if (_spriteCount === _spritePoolLength) {\n                    var sprite = new THREE.RenderableSprite();\n                    _spritePool.push(sprite);\n                    _spritePoolLength++;\n                    _spriteCount++;\n                    return sprite;\n                }\n                return _spritePool[_spriteCount++];\n            }\n            function painterSort(a, b) {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                } else if (a.z !== b.z) {\n                    return b.z - a.z;\n                } else if (a.id !== b.id) {\n                    return a.id - b.id;\n                } else {\n                    return 0;\n                }\n            }\n            function clipLine(s1, s2) {\n                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n                    return true;\n                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n                    return false;\n                } else {\n                    if (bc1near < 0) {\n                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n                    } else if (bc2near < 0) {\n                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n                    }\n                    if (bc1far < 0) {\n                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n                    } else if (bc2far < 0) {\n                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n                    }\n                    if (alpha2 < alpha1) {\n                        return false;\n                    } else {\n                        s1.lerp(s2, alpha1);\n                        s2.lerp(s1, 1 - alpha2);\n                        return true;\n                    }\n                }\n            }\n        };\n    }, function(module, exports, __webpack_require__) {\n        /*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        var isObject = __webpack_require__(8);\n        function isObjectObject(o) {\n            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n        }\n        module.exports = function isPlainObject(o) {\n            var ctor, prot;\n            if (isObjectObject(o) === false) return false;\n            ctor = o.constructor;\n            if (typeof ctor !== \"function\") return false;\n            prot = ctor.prototype;\n            if (isObjectObject(prot) === false) return false;\n            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n                return false;\n            }\n            return true;\n        };\n    }, function(module, exports) {\n        /*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        module.exports = function isObject(val) {\n            return val != null && typeof val === \"object\" && !Array.isArray(val);\n        };\n    }, function(module, exports, __webpack_require__) {\n        var __WEBPACK_AMD_DEFINE_RESULT__;\n        !function(undefined) {\n            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n                return Object.prototype.toString.call(obj) === \"[object Array]\";\n            };\n            var defaultMaxListeners = 10;\n            function init() {\n                this._events = {};\n                if (this._conf) {\n                    configure.call(this, this._conf);\n                }\n            }\n            function configure(conf) {\n                if (conf) {\n                    this._conf = conf;\n                    conf.delimiter && (this.delimiter = conf.delimiter);\n                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n                    conf.wildcard && (this.wildcard = conf.wildcard);\n                    conf.newListener && (this.newListener = conf.newListener);\n                    if (this.wildcard) {\n                        this.listenerTree = {};\n                    }\n                }\n            }\n            function EventEmitter(conf) {\n                this._events = {};\n                this.newListener = false;\n                configure.call(this, conf);\n            }\n            function searchListenerTree(handlers, type, tree, i) {\n                if (!tree) {\n                    return [];\n                }\n                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n                if (i === typeLength && tree._listeners) {\n                    if (typeof tree._listeners === \"function\") {\n                        handlers && handlers.push(tree._listeners);\n                        return [ tree ];\n                    } else {\n                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n                            handlers && handlers.push(tree._listeners[leaf]);\n                        }\n                        return [ tree ];\n                    }\n                }\n                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n                    if (currentType === \"*\") {\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n                            }\n                        }\n                        return listeners;\n                    } else if (currentType === \"**\") {\n                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n                        if (endReached && tree._listeners) {\n                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n                        }\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                if (branch === \"*\" || branch === \"**\") {\n                                    if (tree[branch]._listeners && !endReached) {\n                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n                                    }\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                } else if (branch === nextType) {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n                                } else {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                }\n                            }\n                        }\n                        return listeners;\n                    }\n                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n                }\n                xTree = tree[\"*\"];\n                if (xTree) {\n                    searchListenerTree(handlers, type, xTree, i + 1);\n                }\n                xxTree = tree[\"**\"];\n                if (xxTree) {\n                    if (i < typeLength) {\n                        if (xxTree._listeners) {\n                            searchListenerTree(handlers, type, xxTree, typeLength);\n                        }\n                        for (branch in xxTree) {\n                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n                                if (branch === nextType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n                                } else if (branch === currentType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n                                } else {\n                                    isolatedBranch = {};\n                                    isolatedBranch[branch] = xxTree[branch];\n                                    searchListenerTree(handlers, type, {\n                                        \"**\": isolatedBranch\n                                    }, i + 1);\n                                }\n                            }\n                        }\n                    } else if (xxTree._listeners) {\n                        searchListenerTree(handlers, type, xxTree, typeLength);\n                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n                    }\n                }\n                return listeners;\n            }\n            function growListenerTree(type, listener) {\n                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                for (var i = 0, len = type.length; i + 1 < len; i++) {\n                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n                        return;\n                    }\n                }\n                var tree = this.listenerTree;\n                var name = type.shift();\n                while (name) {\n                    if (!tree[name]) {\n                        tree[name] = {};\n                    }\n                    tree = tree[name];\n                    if (type.length === 0) {\n                        if (!tree._listeners) {\n                            tree._listeners = listener;\n                        } else if (typeof tree._listeners === \"function\") {\n                            tree._listeners = [ tree._listeners, listener ];\n                        } else if (isArray(tree._listeners)) {\n                            tree._listeners.push(listener);\n                            if (!tree._listeners.warned) {\n                                var m = defaultMaxListeners;\n                                if (typeof this._events.maxListeners !== \"undefined\") {\n                                    m = this._events.maxListeners;\n                                }\n                                if (m > 0 && tree._listeners.length > m) {\n                                    tree._listeners.warned = true;\n                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n                                    console.trace();\n                                }\n                            }\n                        }\n                        return true;\n                    }\n                    name = type.shift();\n                }\n                return true;\n            }\n            EventEmitter.prototype.delimiter = \".\";\n            EventEmitter.prototype.setMaxListeners = function(n) {\n                this._events || init.call(this);\n                this._events.maxListeners = n;\n                if (!this._conf) this._conf = {};\n                this._conf.maxListeners = n;\n            };\n            EventEmitter.prototype.event = \"\";\n            EventEmitter.prototype.once = function(event, fn) {\n                this.many(event, 1, fn);\n                return this;\n            };\n            EventEmitter.prototype.many = function(event, ttl, fn) {\n                var self = this;\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"many only accepts instances of Function\");\n                }\n                function listener() {\n                    if (--ttl === 0) {\n                        self.off(event, listener);\n                    }\n                    fn.apply(this, arguments);\n                }\n                listener._origin = fn;\n                this.on(event, listener);\n                return self;\n            };\n            EventEmitter.prototype.emit = function() {\n                this._events || init.call(this);\n                var type = arguments[0];\n                if (type === \"newListener\" && !this.newListener) {\n                    if (!this._events.newListener) {\n                        return false;\n                    }\n                }\n                if (this._all) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    for (i = 0, l = this._all.length; i < l; i++) {\n                        this.event = type;\n                        this._all[i].apply(this, args);\n                    }\n                }\n                if (type === \"error\") {\n                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n                        if (arguments[1] instanceof Error) {\n                            throw arguments[1];\n                        } else {\n                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n                        }\n                        return false;\n                    }\n                }\n                var handler;\n                if (this.wildcard) {\n                    handler = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n                } else {\n                    handler = this._events[type];\n                }\n                if (typeof handler === \"function\") {\n                    this.event = type;\n                    if (arguments.length === 1) {\n                        handler.call(this);\n                    } else if (arguments.length > 1) switch (arguments.length) {\n                      case 2:\n                        handler.call(this, arguments[1]);\n                        break;\n\n                      case 3:\n                        handler.call(this, arguments[1], arguments[2]);\n                        break;\n\n                      default:\n                        var l = arguments.length;\n                        var args = new Array(l - 1);\n                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                        handler.apply(this, args);\n                    }\n                    return true;\n                } else if (handler) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    var listeners = handler.slice();\n                    for (var i = 0, l = listeners.length; i < l; i++) {\n                        this.event = type;\n                        listeners[i].apply(this, args);\n                    }\n                    return listeners.length > 0 || !!this._all;\n                } else {\n                    return !!this._all;\n                }\n            };\n            EventEmitter.prototype.on = function(type, listener) {\n                if (typeof type === \"function\") {\n                    this.onAny(type);\n                    return this;\n                }\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"on only accepts instances of Function\");\n                }\n                this._events || init.call(this);\n                this.emit(\"newListener\", type, listener);\n                if (this.wildcard) {\n                    growListenerTree.call(this, type, listener);\n                    return this;\n                }\n                if (!this._events[type]) {\n                    this._events[type] = listener;\n                } else if (typeof this._events[type] === \"function\") {\n                    this._events[type] = [ this._events[type], listener ];\n                } else if (isArray(this._events[type])) {\n                    this._events[type].push(listener);\n                    if (!this._events[type].warned) {\n                        var m = defaultMaxListeners;\n                        if (typeof this._events.maxListeners !== \"undefined\") {\n                            m = this._events.maxListeners;\n                        }\n                        if (m > 0 && this._events[type].length > m) {\n                            this._events[type].warned = true;\n                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n                            console.trace();\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.onAny = function(fn) {\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"onAny only accepts instances of Function\");\n                }\n                if (!this._all) {\n                    this._all = [];\n                }\n                this._all.push(fn);\n                return this;\n            };\n            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n            EventEmitter.prototype.off = function(type, listener) {\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"removeListener only takes instances of Function\");\n                }\n                var handlers, leafs = [];\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                } else {\n                    if (!this._events[type]) return this;\n                    handlers = this._events[type];\n                    leafs.push({\n                        _listeners: handlers\n                    });\n                }\n                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                    var leaf = leafs[iLeaf];\n                    handlers = leaf._listeners;\n                    if (isArray(handlers)) {\n                        var position = -1;\n                        for (var i = 0, length = handlers.length; i < length; i++) {\n                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n                                position = i;\n                                break;\n                            }\n                        }\n                        if (position < 0) {\n                            continue;\n                        }\n                        if (this.wildcard) {\n                            leaf._listeners.splice(position, 1);\n                        } else {\n                            this._events[type].splice(position, 1);\n                        }\n                        if (handlers.length === 0) {\n                            if (this.wildcard) {\n                                delete leaf._listeners;\n                            } else {\n                                delete this._events[type];\n                            }\n                        }\n                        return this;\n                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n                        if (this.wildcard) {\n                            delete leaf._listeners;\n                        } else {\n                            delete this._events[type];\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.offAny = function(fn) {\n                var i = 0, l = 0, fns;\n                if (fn && this._all && this._all.length > 0) {\n                    fns = this._all;\n                    for (i = 0, l = fns.length; i < l; i++) {\n                        if (fn === fns[i]) {\n                            fns.splice(i, 1);\n                            return this;\n                        }\n                    }\n                } else {\n                    this._all = [];\n                }\n                return this;\n            };\n            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n            EventEmitter.prototype.removeAllListeners = function(type) {\n                if (arguments.length === 0) {\n                    !this._events || init.call(this);\n                    return this;\n                }\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                        var leaf = leafs[iLeaf];\n                        leaf._listeners = null;\n                    }\n                } else {\n                    if (!this._events[type]) return this;\n                    this._events[type] = null;\n                }\n                return this;\n            };\n            EventEmitter.prototype.listeners = function(type) {\n                if (this.wildcard) {\n                    var handlers = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n                    return handlers;\n                }\n                this._events || init.call(this);\n                if (!this._events[type]) this._events[type] = [];\n                if (!isArray(this._events[type])) {\n                    this._events[type] = [ this._events[type] ];\n                }\n                return this._events[type];\n            };\n            EventEmitter.prototype.listenersAny = function() {\n                if (this._all) {\n                    return this._all;\n                } else {\n                    return [];\n                }\n            };\n            if (true) {\n                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n                    return EventEmitter;\n                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n            } else if (typeof exports === \"object\") {\n                exports.EventEmitter2 = EventEmitter;\n            } else {\n                window.EventEmitter2 = EventEmitter;\n            }\n        }();\n    }, function(module, exports) {\n        module.exports = {\n            Promise: window[\"Promise\"]\n        };\n    }, function(module, exports) {\n        (function() {\n            var ResizeSensor = function(element, callback) {\n                function EventQueue() {\n                    this.q = [];\n                    this.add = function(ev) {\n                        this.q.push(ev);\n                    };\n                    var i, j;\n                    this.call = function() {\n                        for (i = 0, j = this.q.length; i < j; i++) {\n                            this.q[i].call();\n                        }\n                    };\n                }\n                function getComputedStyle(element, prop) {\n                    if (element.currentStyle) {\n                        return element.currentStyle[prop];\n                    } else if (window.getComputedStyle) {\n                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n                    } else {\n                        return element.style[prop];\n                    }\n                }\n                function attachResizeEvent(element, resized) {\n                    if (!element.resizedAttached) {\n                        element.resizedAttached = new EventQueue();\n                        element.resizedAttached.add(resized);\n                    } else if (element.resizedAttached) {\n                        element.resizedAttached.add(resized);\n                        return;\n                    }\n                    element.resizeSensor = document.createElement(\"div\");\n                    element.resizeSensor.className = \"resize-sensor\";\n                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n                    element.resizeSensor.style.cssText = style;\n                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n                    element.appendChild(element.resizeSensor);\n                    if (!{\n                        fixed: 1,\n                        absolute: 1\n                    }[getComputedStyle(element, \"position\")]) {\n                        element.style.position = \"relative\";\n                    }\n                    var expand = element.resizeSensor.childNodes[0];\n                    var expandChild = expand.childNodes[0];\n                    var shrink = element.resizeSensor.childNodes[1];\n                    var shrinkChild = shrink.childNodes[0];\n                    var lastWidth, lastHeight;\n                    var reset = function() {\n                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n                        expand.scrollLeft = expand.scrollWidth;\n                        expand.scrollTop = expand.scrollHeight;\n                        shrink.scrollLeft = shrink.scrollWidth;\n                        shrink.scrollTop = shrink.scrollHeight;\n                        lastWidth = element.offsetWidth;\n                        lastHeight = element.offsetHeight;\n                    };\n                    reset();\n                    var changed = function() {\n                        if (element.resizedAttached) {\n                            element.resizedAttached.call();\n                        }\n                    };\n                    var addEvent = function(el, name, cb) {\n                        if (el.attachEvent) {\n                            el.attachEvent(\"on\" + name, cb);\n                        } else {\n                            el.addEventListener(name, cb);\n                        }\n                    };\n                    var onScroll = function() {\n                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                            changed();\n                        }\n                        reset();\n                    };\n                    addEvent(expand, \"scroll\", onScroll);\n                    addEvent(shrink, \"scroll\", onScroll);\n                }\n                var elementType = Object.prototype.toString.call(element);\n                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n                if (isCollectionTyped) {\n                    var i = 0, j = element.length;\n                    for (;i < j; i++) {\n                        attachResizeEvent(element[i], callback);\n                    }\n                } else {\n                    attachResizeEvent(element, callback);\n                }\n                this.detach = function() {\n                    if (isCollectionTyped) {\n                        var i = 0, j = element.length;\n                        for (;i < j; i++) {\n                            ResizeSensor.detach(element[i]);\n                        }\n                    } else {\n                        ResizeSensor.detach(element);\n                    }\n                };\n            };\n            ResizeSensor.detach = function(element) {\n                if (element.resizeSensor) {\n                    element.removeChild(element.resizeSensor);\n                    delete element.resizeSensor;\n                    delete element.resizedAttached;\n                }\n            };\n            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n                module.exports = ResizeSensor;\n            } else {\n                window.ResizeSensor = ResizeSensor;\n            }\n        })();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var EventEmmiter_1 = __webpack_require__(13);\n        var Utils_1 = __webpack_require__(14);\n        var Widget_1 = __webpack_require__(15);\n        var TrendsManager_1 = __webpack_require__(16);\n        var Screen_1 = __webpack_require__(19);\n        var AxisMarks_1 = __webpack_require__(20);\n        var interfaces_1 = __webpack_require__(21);\n        var deps_1 = __webpack_require__(3);\n        var CHART_STATE_EVENTS = {\n            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n            READY: \"ready\",\n            DESTROY: \"destroy\",\n            CHANGE: \"change\",\n            TREND_CHANGE: \"trendChange\",\n            TRENDS_CHANGE: \"trendsChange\",\n            ZOOM: \"zoom\",\n            RESIZE: \"resize\",\n            SCROLL: \"scroll\",\n            SCROLL_STOP: \"scrollStop\",\n            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n        };\n        var ChartState = function() {\n            function ChartState(initialState, widgetsClasses, plugins) {\n                if (widgetsClasses === void 0) {\n                    widgetsClasses = {};\n                }\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.data = {\n                    prevState: {},\n                    $el: null,\n                    zoom: 0,\n                    xAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n                            from: 0,\n                            to: 0,\n                            scroll: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 0,\n                                end: 5\n                            },\n                            margin: {\n                                start: 0,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 100,\n                        autoScroll: true,\n                        marks: []\n                    },\n                    yAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n                            from: 0,\n                            to: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 5,\n                                end: 5\n                            },\n                            margin: {\n                                start: 5,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 50,\n                        marks: []\n                    },\n                    animations: {\n                        enabled: true,\n                        trendChangeSpeed: .5,\n                        trendChangeEase: void 0,\n                        zoomSpeed: .25,\n                        zoomEase: Linear.easeNone,\n                        scrollSpeed: .5,\n                        scrollEase: Linear.easeNone,\n                        autoScrollSpeed: 1,\n                        autoScrollEase: Linear.easeNone\n                    },\n                    autoRender: {\n                        enabled: true,\n                        fps: 0\n                    },\n                    autoResize: true,\n                    renderer: \"WebGLRenderer\",\n                    autoScroll: true,\n                    controls: {\n                        enabled: true\n                    },\n                    cursor: {\n                        dragMode: false,\n                        x: 0,\n                        y: 0\n                    },\n                    backgroundColor: 0,\n                    backgroundOpacity: 1,\n                    showStats: false,\n                    pluginsState: {},\n                    eventEmitterMaxListeners: 20\n                };\n                this.widgetsClasses = {};\n                this.plugins = {};\n                this.isReady = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n                this.widgetsClasses = widgetsClasses;\n                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n                initialState.trends = this.trendsManager.calculatedOptions;\n                initialState = this.installPlugins(plugins, initialState);\n                this.setState(initialState);\n                this.setState({\n                    computedData: this.getComputedData()\n                });\n                this.savePrevState();\n                this.screen = new Screen_1.Screen(this);\n                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n                this.initListeners();\n                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n                this.isReady = true;\n                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n            }\n            ChartState.prototype.destroy = function() {\n                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n                this.ee.removeAllListeners();\n                this.data = {};\n            };\n            ChartState.prototype.onDestroy = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n            };\n            ChartState.prototype.onInitialStateApplied = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n            };\n            ChartState.prototype.onReady = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n            };\n            ChartState.prototype.onChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n            };\n            ChartState.prototype.onTrendChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n            };\n            ChartState.prototype.onTrendsChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n            };\n            ChartState.prototype.onScrollStop = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n            };\n            ChartState.prototype.onScroll = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n            };\n            ChartState.prototype.onZoom = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n            };\n            ChartState.prototype.onResize = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n            };\n            ChartState.prototype.onPluginsStateChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n            };\n            ChartState.prototype.getTrend = function(trendName) {\n                return this.trendsManager.getTrend(trendName);\n            };\n            ChartState.prototype.setState = function(newState, eventData, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var stateData = this.data;\n                var changedProps = {};\n                for (var key in newState) {\n                    if (stateData[key] !== newState[key]) {\n                        changedProps[key] = newState[key];\n                    }\n                }\n                this.savePrevState(changedProps);\n                var trendsData = {};\n                if (newState.trends) for (var trendName in newState.trends) {\n                    var trendOptions = newState.trends[trendName];\n                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n                    delete trendOptions.data;\n                }\n                var newStateContainsData = Object.keys(trendsData).length > 0;\n                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n                if (newStateContainsData) for (var trendName in trendsData) {\n                    this.data.trends[trendName].data = trendsData[trendName];\n                }\n                if (silent) return;\n                var recalculateResult = this.recalculateState(changedProps);\n                changedProps = recalculateResult.changedProps;\n                this.emitChangedStateEvents(changedProps, eventData);\n            };\n            ChartState.prototype.recalculateState = function(changedProps) {\n                var data = this.data;\n                var patch = {};\n                var actualData = Utils_1.Utils.deepMerge({}, data);\n                if (changedProps.widgets || !data.widgets) {\n                    patch.widgets = {};\n                    var widgetsOptions = data.widgets || {};\n                    for (var widgetName in this.widgetsClasses) {\n                        var WidgetClass = this.widgetsClasses[widgetName];\n                        var userOptions = widgetsOptions[widgetName] || {};\n                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n                    }\n                }\n                var cursorOptions = changedProps.cursor;\n                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n                if (isMouseDrag) {\n                    var oldX = data.prevState.cursor.x;\n                    var currentX = cursorOptions.x;\n                    var currentScroll = data.xAxis.range.scroll;\n                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n                    patch.xAxis = {\n                        range: {\n                            scroll: currentScroll + deltaXVal\n                        }\n                    };\n                    actualData = Utils_1.Utils.deepMerge(actualData, {\n                        xAxis: patch.xAxis\n                    });\n                }\n                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n                var scrollXChanged = false;\n                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n                if (needToRecalculateXAxis) {\n                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n                    if (xAxisPatch) {\n                        scrollXChanged = true;\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            xAxis: xAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            xAxis: xAxisPatch\n                        });\n                    }\n                }\n                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n                if (needToRecalculateYAxis) {\n                    var yAxisPatch = this.recalculateYAxis(actualData);\n                    if (yAxisPatch) {\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            yAxis: yAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            yAxis: yAxisPatch\n                        });\n                    }\n                }\n                this.savePrevState(patch);\n                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n                patch.computedData = this.getComputedData(allChangedProps);\n                this.savePrevState(patch);\n                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n                return {\n                    changedProps: allChangedProps,\n                    patch: patch\n                };\n            };\n            ChartState.prototype.getComputedData = function(changedProps) {\n                var computeAll = !changedProps;\n                var computedData = {};\n                if (computeAll || changedProps.trends && this.trendsManager) {\n                    computedData.trends = {\n                        maxXVal: this.trendsManager.getEndXVal(),\n                        minXVal: this.trendsManager.getStartXVal()\n                    };\n                }\n                return computedData;\n            };\n            ChartState.prototype.savePrevState = function(changedProps) {\n                if (!changedProps) changedProps = this.data;\n                var prevState = this.data.prevState;\n                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n            };\n            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n                var prevState = this.data.prevState;\n                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n                for (var key in changedProps) {\n                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n                }\n                if (!this.isReady) return;\n                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n                var resizeEventNeeded = changedProps.width || changedProps.height;\n                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n            };\n            ChartState.prototype.installPlugins = function(plugins, initialState) {\n                var _this = this;\n                initialState.pluginsState = {};\n                plugins.forEach(function(plugin) {\n                    var PluginClass = plugin.constructor;\n                    var pluginName = PluginClass.NAME;\n                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n                    });\n                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n                    _this.plugins[pluginName] = plugin;\n                    plugin.setupChartState(_this);\n                });\n                return initialState;\n            };\n            ChartState.prototype.getPlugin = function(pluginName) {\n                return this.plugins[pluginName];\n            };\n            ChartState.prototype.initListeners = function() {\n                var _this = this;\n                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n                    _this.handleTrendsChange(changedTrends, newData);\n                });\n            };\n            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n                for (var trendName in changedTrends) {\n                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n                }\n            };\n            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n                var axisRange = actualData.xAxis.range;\n                var patch = {\n                    range: {}\n                };\n                var isInitialize = axisRange.zeroVal == void 0;\n                var zeroVal, scaleFactor;\n                var zoom = axisRange.zoom;\n                if (axisRange.isMirrorMode) {\n                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n                }\n                if (isInitialize) {\n                    zeroVal = axisRange.from;\n                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                } else {\n                    zeroVal = axisRange.zeroVal;\n                    scaleFactor = axisRange.scaleFactor;\n                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n                        if (changedProps.xAxis.range.zoom) {\n                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n                        }\n                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                        patch.range.scroll = axisRange.from - zeroVal;\n                        patch.range.zoom = currentScaleFactor / scaleFactor;\n                        return patch;\n                    }\n                }\n                do {\n                    var from = zeroVal + axisRange.scroll;\n                    var to = from + actualData.width / (scaleFactor * zoom);\n                    var rangeLength = to - from;\n                    var needToRecalculateZoom = false;\n                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n                    if (needToRecalculateZoom) {\n                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n                        var zoom = zoom * fixScale;\n                        patch.range.zoom = zoom;\n                    }\n                } while (needToRecalculateZoom);\n                patch.range.from = from;\n                patch.range.to = to;\n                return patch;\n            };\n            ChartState.prototype.recalculateYAxis = function(actualData) {\n                var patch = {\n                    range: {}\n                };\n                var yAxisRange = actualData.yAxis.range;\n                var isInitialize = yAxisRange.scaleFactor == void 0;\n                var trends = this.trendsManager;\n                var trendsEndXVal = trends.getEndXVal();\n                var trendsStartXVal = trends.getStartXVal();\n                var xRange = actualData.xAxis.range;\n                var xFrom = xRange.from, xTo = xRange.to;\n                var xRangeLength = xTo - xFrom;\n                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n                if (xTo > trendsEndXVal) {\n                    xTo = trendsEndXVal;\n                    xFrom = xTo - xRangeLength;\n                } else if (xFrom < trendsStartXVal) {\n                    xFrom = trendsStartXVal;\n                    xTo = xFrom + xRangeLength;\n                }\n                var maxY = trends.getMaxYVal(xFrom, xTo);\n                var minY = trends.getMinYVal(xFrom, xTo);\n                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n                    if (trendLastY > maxY) maxY = trendLastY;\n                    if (trendLastY < minY) minY = trendLastY;\n                }\n                if (yAxisRange.isMirrorMode) {\n                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n                }\n                var margin = yAxisRange.margin;\n                var padding = {\n                    start: yAxisRange.padding.start + margin.start,\n                    end: yAxisRange.padding.end + margin.end\n                };\n                if (padding.end + padding.start >= actualData.height) {\n                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n                }\n                var rangeLength = maxY - minY;\n                var paddingTopInPercents = padding.end / actualData.height;\n                var paddingBottomInPercents = padding.start / actualData.height;\n                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n                if (isInitialize) {\n                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n                    scaleFactor = actualData.height / (toVal - fromVal);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                    needToZoom = true;\n                } else {\n                    scaleFactor = yAxisRange.scaleFactor;\n                    zeroVal = yAxisRange.zeroVal;\n                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n                }\n                if (!needToZoom) return null;\n                scroll = fromVal - zeroVal;\n                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n                var currentAxisRange = this.data.yAxis.range;\n                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n                return patch;\n            };\n            ChartState.prototype.zoom = function(zoomValue, origin) {\n                var _this = this;\n                if (origin === void 0) {\n                    origin = .5;\n                }\n                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n                var newZoom = zoom * zoomValue;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                var nextRange = this.data.width / (scaleFactor * newZoom);\n                var newScroll = scroll + (currentRange - nextRange) * origin;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            zoom: newZoom,\n                            scroll: newScroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.zoomToRange = function(range, origin) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                return this.zoom(currentRange / range, origin);\n            };\n            ChartState.prototype.scrollToEnd = function() {\n                var _this = this;\n                var state = this.data;\n                var endXVal = this.trendsManager.getEndXVal();\n                var range = state.xAxis.range;\n                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            scroll: scroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getValueOnXAxis = function(x) {\n                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.getValueByScreenX = function(x) {\n                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.getValueByScreenY = function(y) {\n                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByYAxis(y);\n            };\n            ChartState.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenYByValue = function(yVal) {\n                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            ChartState.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            ChartState.prototype.getScreenLeftVal = function() {\n                return this.getValueByScreenX(0);\n            };\n            ChartState.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.data.width);\n            };\n            ChartState.prototype.getPaddingRight = function() {\n                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n            };\n            return ChartState;\n        }();\n        exports.ChartState = ChartState;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        var EventEmitter = function() {\n            function EventEmitter() {\n                this.ee = new deps_1.EE2();\n            }\n            EventEmitter.prototype.emit = function(eventName) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n                var _a;\n            };\n            EventEmitter.prototype.on = function(eventName, callback) {\n                return this.ee.on(eventName, callback);\n            };\n            EventEmitter.prototype.off = function(eventName, callback) {\n                return this.ee.off(eventName, callback);\n            };\n            EventEmitter.prototype.subscribe = function(eventName, callback) {\n                var _this = this;\n                this.on(eventName, callback);\n                return function() {\n                    return _this.off(eventName, callback);\n                };\n            };\n            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n                this.ee.setMaxListeners(listenersCount);\n            };\n            EventEmitter.prototype.removeAllListeners = function(eventName) {\n                this.ee.removeAllListeners(eventName);\n            };\n            return EventEmitter;\n        }();\n        exports.EventEmitter = EventEmitter;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        function deepmerge(target, src, mergeArrays) {\n            if (mergeArrays === void 0) {\n                mergeArrays = true;\n            }\n            var array = Array.isArray(src);\n            var dst = array && [] || {};\n            if (array) {\n                target = target || [];\n                if (mergeArrays) {\n                    dst = dst.concat(target);\n                }\n                src.forEach(function(e, i) {\n                    if (typeof dst[i] === \"undefined\") {\n                        dst[i] = e;\n                    } else if (typeof e === \"object\") {\n                        dst[i] = deepmerge(target[i], e, mergeArrays);\n                    } else {\n                        if (target.indexOf(e) === -1) {\n                            dst.push(e);\n                        }\n                    }\n                });\n            } else {\n                if (target && typeof target === \"object\") {\n                    Object.keys(target).forEach(function(key) {\n                        dst[key] = target[key];\n                    });\n                }\n                Object.keys(src).forEach(function(key) {\n                    if (typeof src[key] !== \"object\" || !src[key]) {\n                        dst[key] = src[key];\n                    } else {\n                        if (!target[key]) {\n                            dst[key] = src[key];\n                        } else {\n                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n                        }\n                    }\n                });\n            }\n            return dst;\n        }\n        var Utils = function() {\n            function Utils() {}\n            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n                return deepmerge(obj1, obj2, mergeArrays);\n            };\n            Utils.deepCopy = function(obj) {\n                return JSON.parse(JSON.stringify(obj));\n            };\n            Utils.toFixed = function(num, digitsCount) {\n                var maxDigits = 15;\n                var result = \"\";\n                var intVal = Math.floor(num);\n                var intStr = intVal.toString();\n                var lengthDiff = digitsCount - intStr.length;\n                if (lengthDiff > 0) {\n                    result = \"0\".repeat(lengthDiff) + intStr;\n                } else {\n                    result = intStr;\n                }\n                var afterPointDigitsCount = maxDigits - intStr.length;\n                var afterPointStr = num.toString().split(\".\")[1];\n                if (afterPointStr) {\n                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n                }\n                return result;\n            };\n            Utils.bindEvent = function() {};\n            Utils.createTexture = function(width, height, fn) {\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = width;\n                canvas.height = height;\n                var ctx = canvas.getContext(\"2d\");\n                fn(ctx);\n                var texture = new THREE.Texture(canvas);\n                texture.needsUpdate = true;\n                return texture;\n            };\n            Utils.createPixelPerfectTexture = function(width, height, fn) {\n                var texture = this.createTexture(width, height, fn);\n                texture.minFilter = THREE.NearestFilter;\n                return texture;\n            };\n            Utils.error = function(msg) {\n                console.error(\"Chart error: \" + msg);\n                throw \"Chart: \" + msg;\n            };\n            Utils.warn = function(msg) {\n                console.warn(\"Chart warning: \" + msg);\n            };\n            Utils.getUid = function() {\n                return this.currentId++;\n            };\n            Utils.getDistance = function(num1, num2) {\n                return Math.max(num1, num2) - Math.min(num1, num2);\n            };\n            Utils.binarySearchClosestInd = function(arr, num, key) {\n                var mid;\n                var lo = 0;\n                var hi = arr.length - 1;\n                while (hi - lo > 1) {\n                    mid = Math.floor((lo + hi) / 2);\n                    if (arr[mid][key] < num) {\n                        lo = mid;\n                    } else {\n                        hi = mid;\n                    }\n                }\n                if (num - arr[lo][key] <= arr[hi][key] - num) {\n                    return lo;\n                }\n                return hi;\n            };\n            Utils.binarySearchClosest = function(arr, num, key) {\n                var ind = this.binarySearchClosestInd(arr, num, key);\n                return arr[ind];\n            };\n            Utils.rectsIntersect = function(r1, r2) {\n                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n            };\n            /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\n            Utils.parseColor = function(color) {\n                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by $.parseColor\");\n                isNaN(cache[3]) && (cache[3] = 1);\n                return cache;\n            };\n            Utils.getHexColor = function(str) {\n                var rgb = this.parseColor(str);\n                return (rgb[0] << 8 * 2) + (rgb[1] << 8) + rgb[2];\n            };\n            Utils.throttle = function(func, ms) {\n                var isThrottled = false, savedArgs, savedThis;\n                function wrapper() {\n                    if (isThrottled) {\n                        savedArgs = arguments;\n                        savedThis = this;\n                        return;\n                    }\n                    func.apply(this, arguments);\n                    isThrottled = true;\n                    setTimeout(function() {\n                        isThrottled = false;\n                        if (savedArgs) {\n                            wrapper.apply(savedThis, savedArgs);\n                            savedArgs = savedThis = null;\n                        }\n                    }, ms);\n                }\n                return wrapper;\n            };\n            Utils.msToTimeString = function(timestamp) {\n                var h = Math.floor(timestamp / 36e4);\n                var m = Math.floor(timestamp / 6e4);\n                var s = Math.floor(timestamp / 1e3);\n                return h + \":\" + m + \":\" + s;\n            };\n            Utils.getRandomItem = function(arr) {\n                var ind = Math.floor(Math.random() * arr.length);\n                return arr[ind];\n            };\n            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n                if (excludeProps === void 0) {\n                    excludeProps = [];\n                }\n                for (var key in props) {\n                    if (excludeProps.indexOf(key) !== -1) continue;\n                    if (srcObject[key] == void 0) continue;\n                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n                    } else {\n                        dstObject[key] = this.deepCopy(srcObject[key]);\n                    }\n                }\n            };\n            Utils.currentId = 1;\n            return Utils;\n        }();\n        exports.Utils = Utils;\n    }, function(module, exports) {\n        \"use strict\";\n        var ChartWidget = function() {\n            function ChartWidget(chartState) {\n                this.unsubscribers = [];\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            ChartWidget.prototype.bindEvents = function() {};\n            ChartWidget.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartWidget.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartWidget.getDefaultOptions = function() {\n                return {\n                    enabled: true\n                };\n            };\n            ChartWidget.widgetName = \"\";\n            return ChartWidget;\n        }();\n        exports.ChartWidget = ChartWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Trend_1 = __webpack_require__(17);\n        var EventEmmiter_1 = __webpack_require__(13);\n        var EVENTS = {\n            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n        };\n        var TrendsManager = function() {\n            function TrendsManager(state, initialState) {\n                this.trends = {};\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.chartState = state;\n                var trendsCalculatedOptions = {};\n                for (var trendName in initialState.trends) {\n                    var trend = this.createTrend(state, trendName, initialState);\n                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n                }\n                this.calculatedOptions = trendsCalculatedOptions;\n                this.bindEvents();\n            }\n            TrendsManager.prototype.getTrend = function(trendName) {\n                return this.trends[trendName];\n            };\n            TrendsManager.prototype.getEnabledTrends = function() {\n                var enabledTrends = [];\n                var allTrends = this.trends;\n                for (var trendName in allTrends) {\n                    var trend = allTrends[trendName];\n                    trend.getOptions().enabled && enabledTrends.push(trend);\n                }\n                return enabledTrends;\n            };\n            TrendsManager.prototype.getStartXVal = function() {\n                var trends = this.getEnabledTrends();\n                return trends[0].getData()[0].xVal;\n            };\n            TrendsManager.prototype.getEndXVal = function() {\n                var trends = this.getEnabledTrends();\n                var firstTrendData = trends[0].getData();\n                return firstTrendData[firstTrendData.length - 1].xVal;\n            };\n            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n                var trends = this.getEnabledTrends();\n                var compareFn;\n                var result;\n                if (extremumIsMax) {\n                    result = -Infinity;\n                    compareFn = Math.max;\n                } else {\n                    result = Infinity;\n                    compareFn = Math.min;\n                }\n                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n                    var trend = trends_1[_i];\n                    var trendData = trend.getData(fromX, toX);\n                    var trendYValues = trendData.map(function(dataItem) {\n                        return dataItem.yVal;\n                    });\n                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n                }\n                if (result == Infinity || result == -Infinity) result = NaN;\n                return result;\n            };\n            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n                return this.getExtremumYVal(true, fromX, toX);\n            };\n            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n                return this.getExtremumYVal(false, fromX, toX);\n            };\n            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n            };\n            TrendsManager.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateAppliedHandler();\n                });\n            };\n            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n                var _this = this;\n                var _loop_1 = function(trendName) {\n                    this_1.trends[trendName].segments.onRebuild(function() {\n                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n                    });\n                };\n                var this_1 = this;\n                for (var trendName in this.trends) {\n                    _loop_1(trendName);\n                }\n            };\n            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n                var trend = new Trend_1.Trend(state, trendName, initialState);\n                this.trends[trendName] = trend;\n                return trend;\n            };\n            return TrendsManager;\n        }();\n        exports.TrendsManager = TrendsManager;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var TrendSegments_1 = __webpack_require__(18);\n        var EventEmmiter_1 = __webpack_require__(13);\n        var deps_1 = __webpack_require__(3);\n        var EVENTS = {\n            CHANGE: \"Change\",\n            PREPEND_REQUEST: \"prependRequest\"\n        };\n        (function(TREND_TYPE) {\n            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n        var TREND_TYPE = exports.TREND_TYPE;\n        var DEFAULT_OPTIONS = {\n            enabled: true,\n            type: TREND_TYPE.LINE,\n            data: [],\n            maxSegmentLength: 1e3,\n            lineWidth: 2,\n            lineColor: 16777215,\n            hasGradient: true,\n            hasBeacon: false,\n            settingsForTypes: {\n                CANDLE: {\n                    minSegmentLengthInPx: 20,\n                    maxSegmentLengthInPx: 40\n                },\n                LINE: {\n                    minSegmentLengthInPx: 2,\n                    maxSegmentLengthInPx: 10\n                }\n            }\n        };\n        var Trend = function() {\n            function Trend(chartState, trendName, initialState) {\n                this.minXVal = Infinity;\n                this.minYVal = Infinity;\n                this.maxXVal = -Infinity;\n                this.maxYVal = -Infinity;\n                var options = initialState.trends[trendName];\n                this.name = trendName;\n                this.chartState = chartState;\n                this.calculatedOptions = Utils_1.Utils.deepMerge(DEFAULT_OPTIONS, options);\n                this.calculatedOptions.name = trendName;\n                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n                this.calculatedOptions.dataset = [];\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvents();\n            }\n            Trend.prototype.onInitialStateApplied = function() {\n                this.segments = new TrendSegments_1.TrendSegments(this.chartState, this);\n            };\n            Trend.prototype.bindEvents = function() {\n                var _this = this;\n                var chartState = this.chartState;\n                chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateApplied();\n                });\n                chartState.onScrollStop(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onZoom(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n                });\n                chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            Trend.prototype.getCalculatedOptions = function() {\n                return this.calculatedOptions;\n            };\n            Trend.prototype.appendData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData());\n                var updatedTrendData = options.data.concat(newData);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.prependData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData(), true);\n                var updatedTrendData = newData.concat(options.data);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.changeData = function(allData, newData) {\n                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n                    var item = newData_1[_i];\n                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n                }\n                var options = this.getOptions();\n                var statePatch = {\n                    trends: (_a = {}, _a[options.name] = {\n                        data: allData\n                    }, _a)\n                };\n                this.chartState.setState(statePatch, newData);\n                var _a;\n            };\n            Trend.prototype.getData = function(fromX, toX) {\n                var data = this.getOptions().data;\n                if (fromX == void 0 && toX == void 0) return data;\n                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n                toX = toX !== void 0 ? toX : data[data.length].xVal;\n                var filteredData = [];\n                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                    var item = data_1[_i];\n                    if (item.xVal < fromX) continue;\n                    if (item.xVal > toX) break;\n                    filteredData.push(item);\n                }\n                return filteredData;\n            };\n            Trend.prototype.getFirstItem = function() {\n                return this.getOptions().data[0];\n            };\n            Trend.prototype.getLastItem = function() {\n                var data = this.getOptions().data;\n                return data[data.length - 1];\n            };\n            Trend.prototype.getOptions = function() {\n                return this.chartState.data.trends[this.name];\n            };\n            Trend.prototype.setOptions = function(options) {\n                this.chartState.setState({\n                    trends: (_a = {}, _a[this.name] = options, _a)\n                });\n                var _a;\n            };\n            Trend.prototype.onPrependRequest = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n                return function() {\n                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n                };\n            };\n            Trend.prototype.onChange = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.CHANGE, cb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, cb);\n                };\n            };\n            Trend.prototype.onDataChange = function(cb) {\n                var _this = this;\n                var onChangeCb = function(changedOptions, newData) {\n                    if (newData) cb(newData);\n                };\n                this.ee.on(EVENTS.CHANGE, onChangeCb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n                };\n            };\n            Trend.prototype.checkForPrependRequest = function() {\n                var _this = this;\n                if (this.prependRequest) return;\n                var chartState = this.chartState;\n                var minXVal = chartState.data.computedData.trends.minXVal;\n                var minScreenX = chartState.getScreenXByValue(minXVal);\n                var needToRequest = minScreenX > 0;\n                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var requestedDataLength = to - from;\n                if (!needToRequest) return;\n                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n                });\n                this.prependRequest.then(function(newData) {\n                    _this.prependData(newData);\n                    _this.prependRequest = null;\n                }, function() {\n                    _this.prependRequest = null;\n                });\n            };\n            Trend.prepareData = function(newData, currentData, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var data = [];\n                if (typeof newData[0] == \"number\") {\n                    currentData = currentData || [];\n                    var initialItem = void 0;\n                    var xVal = void 0;\n                    if (isPrepend) {\n                        initialItem = currentData[0];\n                        xVal = initialItem.xVal - newData.length;\n                    } else {\n                        initialItem = currentData[currentData.length - 1];\n                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n                    }\n                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n                        var yVal = _a[_i];\n                        data.push({\n                            xVal: xVal,\n                            yVal: yVal,\n                            id: Utils_1.Utils.getUid()\n                        });\n                        xVal++;\n                    }\n                } else {\n                    data = newData;\n                }\n                return data;\n            };\n            return Trend;\n        }();\n        exports.Trend = Trend;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var EventEmmiter_1 = __webpack_require__(13);\n        var Vector3 = THREE.Vector3;\n        var Trend_1 = __webpack_require__(17);\n        var Utils_1 = __webpack_require__(14);\n        var MAX_ANIMATED_SEGMENTS = 100;\n        var EVENTS = {\n            REBUILD: \"rebuild\",\n            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n            ANIMATION_FRAME: \"animationFrame\"\n        };\n        var TrendSegments = function() {\n            function TrendSegments(chartState, trend) {\n                this.segmentsById = {};\n                this.segments = [];\n                this.animatedSegmentsIds = [];\n                this.segmentsLength = 0;\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForPrepend = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.trend = trend;\n                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n                this.tryToRebuildSegments();\n                this.bindEvents();\n            }\n            TrendSegments.prototype.bindEvents = function() {\n                var _this = this;\n                this.trend.onChange(function(changedOptions, newData) {\n                    return _this.onTrendChangeHandler(changedOptions, newData);\n                });\n                this.chartState.onZoom(function() {\n                    return _this.onZoomHandler();\n                });\n                this.chartState.onScroll(function() {\n                    return _this.recalculateDisplayedRange();\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            TrendSegments.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.appendAnimation && this.appendAnimation.kill();\n                this.prependAnimation && this.prependAnimation.kill();\n            };\n            TrendSegments.prototype.onZoomHandler = function() {\n                var segmentsRebuilded = this.tryToRebuildSegments();\n                if (!segmentsRebuilded) {\n                    this.recalculateDisplayedRange();\n                }\n            };\n            TrendSegments.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n                if (needToRebuildSegments) {\n                    this.tryToRebuildSegments(true);\n                    return;\n                }\n                if (!newData) return;\n                var data = this.trend.getData();\n                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                isAppend ? this.appendData(newData) : this.prependData(newData);\n                this.recalculateDisplayedRange();\n            };\n            TrendSegments.prototype.getEndSegment = function() {\n                return this.segmentsById[this.endSegmentId];\n            };\n            TrendSegments.prototype.getStartSegment = function() {\n                return this.segmentsById[this.startSegmentId];\n            };\n            TrendSegments.prototype.tryToRebuildSegments = function(force) {\n                if (force === void 0) {\n                    force = false;\n                }\n                var options = this.trend.getOptions();\n                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n                var trendTypesSettings = options.settingsForTypes;\n                var trendTypeSettings = trendTypesSettings[trendTypeName];\n                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n                var needToRebuild = this.segments.length === 0 || force;\n                var segmentLength = this.maxSegmentLength;\n                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n                }\n                if (!needToRebuild) return false;\n                this.maxSegmentLength = segmentLength;\n                this.segmentsById = {};\n                this.segments = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.segmentsLength = 0;\n                this.stopAllAnimations();\n                this.appendData(null, true);\n                this.recalculateDisplayedRange(true);\n                this.ee.emit(EVENTS.REBUILD);\n            };\n            TrendSegments.prototype.stopAllAnimations = function() {\n                this.animatedSegmentsIds = [];\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForAppend = [];\n                if (this.prependAnimation) this.prependAnimation.kill();\n                if (this.appendAnimation) this.appendAnimation.kill();\n            };\n            TrendSegments.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n                if (segmentsAreRebuilded === void 0) {\n                    segmentsAreRebuilded = false;\n                }\n                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n                var displayedRange = to - from;\n                this.firstDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, from - displayedRange, \"startXVal\");\n                this.lastDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, to + displayedRange, \"endXVal\");\n                if (segmentsAreRebuilded) return;\n                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n            };\n            TrendSegments.prototype.getSegmentsForXValues = function(values) {\n                var valueInd = 0;\n                var value = values[valueInd];\n                var lastValueInd = values.length - 1;\n                var results = [];\n                var segment = this.getStartSegment();\n                if (!segment.hasValue) return [];\n                while (segment) {\n                    while (value < segment.startXVal) {\n                        results.push(void 0);\n                        value = values[++valueInd];\n                    }\n                    while (value > segment.endXVal) {\n                        segment = segment.getNext();\n                        if (!segment) break;\n                    }\n                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n                    if (valueInPoint) {\n                        results.push(segment);\n                        value = values[++valueInd];\n                    }\n                    if (valueInd > lastValueInd) break;\n                }\n                return results;\n            };\n            TrendSegments.prototype.onAnimationFrame = function(cb) {\n                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n            };\n            TrendSegments.prototype.onRebuild = function(cb) {\n                return this.ee.subscribe(EVENTS.REBUILD, cb);\n            };\n            TrendSegments.prototype.onDisplayedRangeChanged = function(cb) {\n                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n            };\n            TrendSegments.prototype.allocateNextSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var prevSegment = this.segmentsById[this.endSegmentId];\n                if (prevSegment && prevSegment.hasValue) {\n                    prevSegment.nextId = id;\n                    segment.prevId = prevSegment.id;\n                }\n                this.endSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.push(segment);\n                return segment;\n            };\n            TrendSegments.prototype.allocatePrevSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var nextSegment = this.segmentsById[this.startSegmentId];\n                if (nextSegment && nextSegment.hasValue) {\n                    nextSegment.prevId = id;\n                    segment.nextId = nextSegment.id;\n                }\n                this.startSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.unshift(segment);\n                return segment;\n            };\n            TrendSegments.prototype.appendData = function(newData, needRebuildSegments) {\n                if (needRebuildSegments === void 0) {\n                    needRebuildSegments = false;\n                }\n                var trendData = this.trend.getData();\n                if (needRebuildSegments) {\n                    newData = trendData;\n                    this.animatedSegmentsForAppend = [];\n                }\n                var startItemInd = trendData.length - newData.length;\n                var segment = this.getEndSegment() || this.allocateNextSegment();\n                var initialSegment = segment.hasValue ? segment : null;\n                var initialAnimationState = segment.createAnimationState();\n                var itemInd = 0;\n                while (itemInd < newData.length) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.appendItem(item);\n                    var isLastItem = itemInd == newData.length - 1;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd++;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForAppend.length > 0) {\n                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForAppend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocateNextSegment();\n                    var prevItem = trendData[startItemInd + itemInd - 1];\n                    segment.appendItem(prevItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (needRebuildSegments) {\n                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n                        var segmentId = _a[_i];\n                        var segment_1 = this.segmentsById[segmentId];\n                        segment_1.currentAnimationState = segment_1.createAnimationState();\n                    }\n                    this.animatedSegmentsForAppend = [];\n                    return;\n                }\n                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time);\n            };\n            TrendSegments.prototype.prependData = function(newData) {\n                var trendData = this.trend.getData();\n                var segment = this.getStartSegment() || this.segmentsById[0];\n                var initialSegment = segment.hasValue ? segment : null;\n                var itemInd = newData.length - 1;\n                var initialAnimationState = segment.createAnimationState();\n                while (itemInd >= 0) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.prependItem(item);\n                    var isLastItem = itemInd == 0;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd--;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForPrepend.length > 0) {\n                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForPrepend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocatePrevSegment();\n                    var nextItem = trendData[itemInd + 1];\n                    segment.prependItem(nextItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time, true);\n            };\n            TrendSegments.prototype.animate = function(time, isPrepend) {\n                var _this = this;\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n                if (animation && animation.isActive() || time == 0) {\n                    if (animation) animation.kill();\n                    this.onAnimationFrameHandler(1, isPrepend);\n                    animatedSegmentsIds.length = 0;\n                    return;\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var ease = animationsOptions.trendChangeEase;\n                var objectToAnimate = {\n                    animationValue: 0\n                };\n                animation = TweenLite.to(objectToAnimate, time, {\n                    animationValue: 1,\n                    ease: ease\n                });\n                animation.eventCallback(\"onUpdate\", function() {\n                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animatedSegmentsIds.length = 0;\n                    _this.appendAnimation = null;\n                });\n                if (isPrepend) {\n                    this.prependAnimation = animation;\n                } else {\n                    this.appendAnimation = animation;\n                }\n            };\n            TrendSegments.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n                    var segmentId = animatedSegmentsIds_1[_i];\n                    var segment = this.segmentsById[segmentId];\n                    for (var key in segment.targetAnimationState) {\n                        var targetValue = segment.targetAnimationState[key];\n                        var initialValue = segment.initialAnimationState[key];\n                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n                        segment.currentAnimationState[key] = currentValue;\n                    }\n                }\n                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n            };\n            return TrendSegments;\n        }();\n        exports.TrendSegments = TrendSegments;\n        var TrendSegment = function() {\n            function TrendSegment(trendPoints, id) {\n                this.isCompleted = false;\n                this.items = [];\n                this.initialAnimationState = {};\n                this.targetAnimationState = {};\n                this.currentAnimationState = {};\n                this.trendSegments = trendPoints;\n                this.id = id;\n                this.maxLength = trendPoints.maxSegmentLength;\n            }\n            TrendSegment.prototype.createAnimationState = function() {\n                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n                return {\n                    xVal: xVal,\n                    yVal: yVal,\n                    startXVal: startXVal,\n                    startYVal: startYVal,\n                    endXVal: endXVal,\n                    endYVal: endYVal,\n                    maxYVal: maxYVal,\n                    minYVal: minYVal,\n                    maxLength: maxLength\n                };\n            };\n            TrendSegment.prototype.appendItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.push(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var startXVal = items[0].xVal;\n                if (item.xVal - startXVal > this.maxLength) return false;\n                items.push(item);\n                return true;\n            };\n            TrendSegment.prototype.prependItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.unshift(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var endXVal = items[items.length - 1].xVal;\n                if (endXVal - item.xVal > this.maxLength) return false;\n                items.unshift(item);\n                return true;\n            };\n            TrendSegment.prototype.complete = function() {\n                this.isCompleted = true;\n                this.recalculateItems();\n                this.items = [];\n            };\n            TrendSegment.prototype.recalculateItems = function() {\n                var items = this.items;\n                var itemsLength = items.length;\n                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n                var endItem = items[itemsLength - 1];\n                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n                var startXVal, startYVal;\n                var startItem = items[0];\n                startXVal = startItem.xVal;\n                startYVal = startItem.yVal;\n                var minX = Math.min(startXVal, endXVal);\n                var maxX = Math.max(startXVal, endXVal);\n                var middleXVal = minX + (maxX - minX) / 2;\n                var minY = Math.min(startYVal, endYVal);\n                var maxY = Math.max(startYVal, endYVal);\n                var middleYVal = minY + (maxY - minY) / 2;\n                var yVals = items.map(function(item) {\n                    return item.yVal;\n                });\n                this.startXVal = startXVal;\n                this.startYVal = startYVal;\n                this.endXVal = endXVal;\n                this.endYVal = endYVal;\n                this.xVal = middleXVal;\n                this.yVal = middleYVal;\n                this.maxYVal = Math.max.apply(Math, yVals);\n                this.minYVal = Math.min.apply(Math, yVals);\n                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n            };\n            TrendSegment.prototype.getNext = function() {\n                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n            };\n            TrendSegment.prototype.getPrev = function() {\n                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n            };\n            TrendSegment.prototype.getFrameVal = function() {\n                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n                return new Vector3(xVal, yVal, 0);\n            };\n            TrendSegment.prototype.getFramePoint = function() {\n                var frameVal = this.getFrameVal();\n                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n            };\n            return TrendSegment;\n        }();\n        exports.TrendSegment = TrendSegment;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var EventEmmiter_1 = __webpack_require__(13);\n        var Screen = function() {\n            function Screen(chartState) {\n                this.options = {\n                    scrollXVal: 0,\n                    scrollX: 0,\n                    scrollYVal: 0,\n                    scrollY: 0,\n                    zoomX: 1,\n                    zoomY: 1\n                };\n                this.currentScrollX = {\n                    x: 0\n                };\n                this.currentScrollY = {\n                    y: 0\n                };\n                this.currentZoomX = {\n                    val: 1\n                };\n                this.currentZoomY = {\n                    val: 1\n                };\n                this.chartState = chartState;\n                var _a = chartState.data, w = _a.width, h = _a.height;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.transform({\n                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n                    zoomY: 1\n                });\n                this.bindEvents();\n            }\n            Screen.prototype.getCameraSettings = function() {\n                var _a = this.chartState.data, w = _a.width, h = _a.height;\n                var FOV = 75;\n                var vFOV = FOV * (Math.PI / 180);\n                return {\n                    FOV: FOV,\n                    aspect: w / h,\n                    near: .1,\n                    far: 5e3,\n                    z: h / (2 * Math.tan(vFOV / 2)),\n                    x: w / 2,\n                    y: h / 2\n                };\n            };\n            Screen.prototype.onZoomFrame = function(cb) {\n                var _this = this;\n                var eventName = \"zoomFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onScrollFrame = function(cb) {\n                var _this = this;\n                var eventName = \"scrollFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onTransformationFrame = function(cb) {\n                var _this = this;\n                var eventName = \"transformationFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.cameraIsMoving = function() {\n                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n            };\n            Screen.prototype.transform = function(options, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n                if (scrollX != void 0) this.options.scrollX = scrollX;\n                if (scrollY != void 0) this.options.scrollY = scrollY;\n                if (zoomX != void 0) this.options.zoomX = zoomX;\n                if (zoomY != void 0) this.options.zoomY = zoomY;\n                if (scrollX != void 0 || zoomX) {\n                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n                    this.options.scrollXVal = options.scrollXVal;\n                }\n                if (scrollY != void 0 || zoomY) {\n                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n                    this.options.scrollYVal = options.scrollYVal;\n                }\n                if (silent) return;\n                this.ee.emit(\"transformationFrame\", options);\n                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n                    this.ee.emit(\"scrollFrame\", options);\n                }\n                if (options.zoomX != void 0 || options.zoomY != void 0) {\n                    this.ee.emit(\"zoomFrame\", options);\n                }\n            };\n            Screen.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onChange(function(changedProps) {\n                    if (changedProps.xAxis && changedProps.xAxis.range) {\n                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n                    }\n                    if (changedProps.yAxis && changedProps.yAxis.range) {\n                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n                    }\n                });\n                state.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            Screen.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.scrollXAnimation && this.scrollXAnimation.kill();\n                this.scrollYAnimation && this.scrollYAnimation.kill();\n                this.zoomXAnimation && this.zoomXAnimation.kill();\n                this.zoomYAnimation && this.zoomYAnimation.kill();\n            };\n            Screen.prototype.onScrollXHandler = function(changedProps) {\n                var _this = this;\n                var state = this.chartState;\n                var isDragMode = state.data.cursor.dragMode;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled && !isDragMode;\n                var zoomXChanged = changedProps.xAxis.range.zoom;\n                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n                var range = state.data.xAxis.range;\n                var targetX = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollX.x = this.options.scrollX;\n                var cb = function() {\n                    _this.transform({\n                        scrollX: _this.currentScrollX.x\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n                        x: targetX,\n                        ease: ease\n                    });\n                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollX.x = targetX;\n                    cb();\n                }\n            };\n            Screen.prototype.onScrollYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n                var range = state.data.yAxis.range;\n                var targetY = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollY.y = this.options.scrollY;\n                var cb = function() {\n                    _this.transform({\n                        scrollY: _this.currentScrollY.y\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n                        y: targetY,\n                        ease: animations.zoomEase\n                    });\n                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollY.y = targetY;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomXHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.xAxis.range.zoom;\n                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomX: _this.currentZoomX.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomX.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.yAxis.range.zoom;\n                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomY: _this.currentZoomY.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomY.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomX;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomY;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            Screen.prototype.getValueOnXAxis = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n            };\n            Screen.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n            };\n            Screen.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n            };\n            Screen.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n            };\n            Screen.prototype.getValueByScreenX = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.getValueByScreenY = function(y) {\n                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n            };\n            Screen.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            Screen.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            Screen.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            Screen.prototype.getPointByScreenY = function(screenY) {\n                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n            };\n            Screen.prototype.getTop = function() {\n                return this.getPointByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottom = function() {\n                return this.getPointByScreenY(0);\n            };\n            Screen.prototype.getLeft = function() {\n                return this.getPointByScreenX(0);\n            };\n            Screen.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.chartState.data.width);\n            };\n            Screen.prototype.getTopVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottomVal = function() {\n                return this.getValueByScreenY(0);\n            };\n            Screen.prototype.getCenterYVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height / 2);\n            };\n            return Screen;\n        }();\n        exports.Screen = Screen;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var EventEmmiter_1 = __webpack_require__(13);\n        var AXIS_MARK_DEFAULT_OPTIONS = {\n            type: \"simple\",\n            lineWidth: 1,\n            value: 0,\n            showValue: false,\n            stickToEdges: false,\n            lineColor: \"#FFFFFF\",\n            title: \"\"\n        };\n        var AxisMarks = function() {\n            function AxisMarks(chartState, axisType) {\n                this.items = {};\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.axisType = axisType;\n                var marks = this.items;\n                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n                    var options = axisMarksOptions_1[_i];\n                    var axisMark = void 0;\n                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n                    if (options.type == \"timeleft\") {\n                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n                    } else {\n                        axisMark = new AxisMark(chartState, axisType, options);\n                    }\n                    marks[options.name] = axisMark;\n                }\n                this.bindEvents();\n            }\n            AxisMarks.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, newData);\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n                if (!newData) return;\n                var startVal = newData[0].xVal;\n                var endVal = newData[newData.length - 1].xVal;\n                var marks = this.items;\n                for (var markName in marks) {\n                    var mark = marks[markName];\n                    var markVal = mark.options.value;\n                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n                }\n            };\n            AxisMarks.prototype.getItems = function() {\n                return this.items;\n            };\n            AxisMarks.prototype.getItem = function(markName) {\n                return this.items[markName];\n            };\n            return AxisMarks;\n        }();\n        exports.AxisMarks = AxisMarks;\n        var AxisMark = function() {\n            function AxisMark(chartState, axisType, options) {\n                this.renderOnTrendsChange = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.options = options;\n                this.axisType = axisType;\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            AxisMark.prototype.bindEvents = function() {};\n            AxisMark.prototype.setOptions = function(newOptions) {\n                var value = this.options.value;\n                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisMark.prototype.getDisplayedVal = function() {\n                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n                return String(displayedValue !== void 0 ? displayedValue : value);\n            };\n            AxisMark.prototype.onMarkCrossed = function(cb) {\n                var _this = this;\n                this.ee.on(\"markCrossed\", cb);\n                return function() {\n                    _this.ee.off(\"markCrossed\", cb);\n                };\n            };\n            AxisMark.prototype.onValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"valueChange\", cb);\n                return function() {\n                    _this.ee.off(\"valueChange\", cb);\n                };\n            };\n            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"onDisplayedValueChange\", cb);\n                return function() {\n                    _this.ee.off(\"onDisplayedValueChange\", cb);\n                };\n            };\n            AxisMark.typeName = \"simple\";\n            return AxisMark;\n        }();\n        exports.AxisMark = AxisMark;\n        var AxisTimeleftMark = function(_super) {\n            __extends(AxisTimeleftMark, _super);\n            function AxisTimeleftMark() {\n                _super.apply(this, arguments);\n                this.renderOnTrendsChange = true;\n            }\n            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n                var markVal = this.options.value;\n                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n                var time = markVal - maxXVal;\n                if (time < 0) time = 0;\n                return Utils_1.Utils.msToTimeString(time);\n            };\n            AxisTimeleftMark.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n            };\n            AxisTimeleftMark.prototype.onTrendsChange = function() {\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisTimeleftMark.typeName = \"timeleft\";\n            return AxisTimeleftMark;\n        }(AxisMark);\n        exports.AxisTimeleftMark = AxisTimeleftMark;\n    }, function(module, exports) {\n        \"use strict\";\n        (function(AXIS_RANGE_TYPE) {\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n        (function(AXIS_TYPE) {\n            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n        var AXIS_TYPE = exports.AXIS_TYPE;\n        (function(AXIS_DATA_TYPE) {\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Mesh = THREE.Mesh;\n        var Object3D = THREE.Object3D;\n        var Widget_1 = __webpack_require__(15);\n        var GridWidget_1 = __webpack_require__(23);\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var AxisWidget = function(_super) {\n            __extends(AxisWidget, _super);\n            function AxisWidget(state) {\n                var _this = this;\n                _super.call(this, state);\n                this.isDestroyed = false;\n                this.object3D = new Object3D();\n                this.axisXObject = new Object3D();\n                this.axisYObject = new Object3D();\n                this.object3D.add(this.axisXObject);\n                this.object3D.add(this.axisYObject);\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }, 1e3);\n                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n            }\n            AxisWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n                    _this.onScrollChange(options.scrollX, options.scrollY);\n                }), state.screen.onZoomFrame(function(options) {\n                    _this.onZoomFrame(options);\n                }), state.onDestroy(function() {\n                    return _this.onDestroy();\n                }), state.onResize(function() {\n                    return _this.onResize();\n                }));\n            };\n            AxisWidget.prototype.onDestroy = function() {\n                this.isDestroyed = true;\n                this.unbindEvents();\n            };\n            AxisWidget.prototype.onScrollChange = function(x, y) {\n                if (y != void 0) {\n                    this.axisYObject.position.y = y;\n                    this.axisXObject.position.y = y;\n                }\n                if (x != void 0) {\n                    this.axisYObject.position.x = x;\n                    this.updateAxisXRequest();\n                }\n            };\n            AxisWidget.prototype.onResize = function() {\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n            };\n            AxisWidget.prototype.setupAxis = function(orientation) {\n                var _this = this;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var canvasWidth = 0, canvasHeight = 0;\n                if (isXAxis) {\n                    this.axisXObject.traverse(function(obj) {\n                        return _this.axisXObject.remove(obj);\n                    });\n                    canvasWidth = visibleWidth * 3;\n                    canvasHeight = 50;\n                } else {\n                    this.axisYObject.traverse(function(obj) {\n                        return _this.axisYObject.remove(obj);\n                    });\n                    canvasWidth = 50;\n                    canvasHeight = visibleHeight * 3;\n                }\n                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n                if (isXAxis) {\n                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisXObject.add(axisMesh);\n                } else {\n                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisYObject.add(axisMesh);\n                }\n                this.updateAxis(orientation);\n            };\n            AxisWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisWidget.prototype.updateAxis = function(orientation) {\n                if (this.isDestroyed) return;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n                var axisOptions;\n                var axisMesh;\n                var axisGridParams;\n                if (isXAxis) {\n                    axisMesh = this.axisXObject.children[0];\n                    axisOptions = this.chartState.data.xAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n                } else {\n                    axisMesh = this.axisYObject.children[0];\n                    axisOptions = this.chartState.data.yAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n                }\n                var geometry = axisMesh.geometry;\n                var canvasWidth = geometry.parameters.width;\n                var canvasHeight = geometry.parameters.height;\n                var texture = axisMesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                if (isXAxis) {\n                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n                }\n                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n                var startVal = axisGridParams.start - edgeOffset;\n                var endVal = axisGridParams.end + edgeOffset;\n                ctx.beginPath();\n                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n                    var displayedValue = \"\";\n                    if (isXAxis) {\n                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n                        ctx.textAlign = \"center\";\n                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n                        } else {\n                            displayedValue = Number(val.toFixed(14)).toString();\n                        }\n                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n                    } else {\n                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n                        ctx.textAlign = \"right\";\n                        displayedValue = Number(val.toFixed(14)).toString();\n                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n                    }\n                    ctx.stroke();\n                }\n                ctx.stroke();\n                ctx.closePath();\n                texture.needsUpdate = true;\n            };\n            AxisWidget.prototype.onZoomFrame = function(options) {\n                if (options.zoomX) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }\n                if (options.zoomY) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n                }\n            };\n            AxisWidget.getDateStr = function(timestamp, gridParams) {\n                var sec = 1e3;\n                var min = sec * 60;\n                var hour = min * 60;\n                var day = hour * 60;\n                var step = gridParams.step;\n                var d = new Date(timestamp);\n                var tf = function(num) {\n                    return Utils_1.Utils.toFixed(num, 2);\n                };\n                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n            };\n            AxisWidget.widgetName = \"Axis\";\n            return AxisWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisWidget = AxisWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Vector3 = THREE.Vector3;\n        var Widget_1 = __webpack_require__(15);\n        var LineSegments = THREE.LineSegments;\n        var Utils_1 = __webpack_require__(14);\n        var GridWidget = function(_super) {\n            __extends(GridWidget, _super);\n            function GridWidget(chartState) {\n                _super.call(this, chartState);\n                this.isDestroyed = false;\n                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n                this.initGrid();\n                this.updateGrid();\n            }\n            GridWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n                    return _this.updateGrid();\n                }, 1e3);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return updateGridThrottled();\n                }), this.chartState.screen.onZoomFrame(function(options) {\n                    updateGridThrottled();\n                    _this.onZoomFrame(options);\n                }), this.chartState.onDestroy(function() {\n                    _this.isDestroyed = true;\n                    _this.unbindEvents();\n                }), this.chartState.onResize(function() {\n                    _this.updateGrid();\n                }));\n            };\n            GridWidget.prototype.initGrid = function() {\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: .1,\n                    transparent: true\n                });\n                var xLinesCount = this.gridSizeH;\n                var yLinesCount = this.gridSizeV;\n                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                this.lineSegments = new LineSegments(geometry, material);\n                this.lineSegments.position.setZ(-1);\n                this.lineSegments.frustumCulled = false;\n            };\n            GridWidget.prototype.updateGrid = function() {\n                if (this.isDestroyed) return;\n                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n                var startXVal = axisXGrid.start + gridScrollXVal;\n                var startYVal = axisYGrid.start + gridScrollYVal;\n                var geometry = this.lineSegments.geometry;\n                var vertices = geometry.vertices;\n                var lineInd = 0;\n                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n                    var value = startXVal + i * axisXGrid.step;\n                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n                    var value = startYVal + i * axisYGrid.step;\n                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                geometry.verticesNeedUpdate = true;\n                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n            };\n            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n            };\n            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n            };\n            GridWidget.prototype.onZoomFrame = function(options) {\n                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n            };\n            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n                var axisRange = axisOptions.range;\n                var from = axisRange.from;\n                var to = axisRange.to;\n                var axisLength = to - from;\n                var gridStep = 0;\n                var gridStepInPixels = 0;\n                var minGridStepInPixels = axisOptions.gridMinSize;\n                var axisLengthStr = String(axisLength);\n                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n                var gridStepFound = false;\n                var digitPos = 0;\n                while (!gridStepFound) {\n                    var power = intPartLength - digitPos - 1;\n                    var multiplier = Math.pow(10, power) || 1;\n                    var dividers = [ 1, 2, 5 ];\n                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n                        var nextGridStep = multiplier / dividers[dividerInd];\n                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n                        if (nextGridStepInPixels >= minGridStepInPixels) {\n                            gridStep = nextGridStep;\n                            gridStepInPixels = nextGridStepInPixels;\n                        } else {\n                            gridStepFound = true;\n                            if (gridStep === 0) {\n                                gridStep = nextGridStep;\n                                gridStepInPixels = nextGridStepInPixels;\n                            }\n                            break;\n                        }\n                    }\n                    if (!gridStepFound) digitPos++;\n                }\n                var gridStart = Math.floor(from / gridStep) * gridStep;\n                var gridEnd = Math.floor(to / gridStep) * gridStep;\n                return {\n                    start: gridStart,\n                    end: gridEnd,\n                    step: gridStep,\n                    stepInPx: gridStepInPixels,\n                    length: gridEnd - gridStart,\n                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n                };\n            };\n            GridWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            GridWidget.widgetName = \"Grid\";\n            return GridWidget;\n        }(Widget_1.ChartWidget);\n        exports.GridWidget = GridWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(17);\n        var TrendsLoadingWidget = function(_super) {\n            __extends(TrendsLoadingWidget, _super);\n            function TrendsLoadingWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLoading;\n            };\n            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n            return TrendsLoadingWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n        var TrendLoading = function(_super) {\n            __extends(TrendLoading, _super);\n            function TrendLoading(state, trendName) {\n                _super.call(this, state, trendName);\n                this.isActive = false;\n                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendLoading.createTexture(),\n                    transparent: true\n                }));\n                this.deactivate();\n            }\n            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled && chartState.data.animations.enabled;\n            };\n            TrendLoading.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendLoading.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.onPrependRequest(function() {\n                    return _this.activate();\n                }));\n            };\n            TrendLoading.prototype.prependData = function() {\n                this.deactivate();\n            };\n            TrendLoading.prototype.activate = function() {\n                var mesh = this.mesh;\n                mesh.material.opacity = 1;\n                mesh.rotation.z = 0;\n                var animation = TweenLite.to(this.mesh.rotation, .5, {\n                    z: Math.PI * 2\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animation.restart();\n                });\n                this.animation = animation;\n                this.isActive = true;\n                this.updatePosition();\n            };\n            TrendLoading.prototype.deactivate = function() {\n                this.animation && this.animation.kill();\n                this.mesh.material.opacity = 0;\n                this.isActive = false;\n            };\n            TrendLoading.createTexture = function() {\n                var h = 64, w = 64;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                    ctx.lineWidth = 5;\n                    var center = h / 2;\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n                    ctx.stroke();\n                });\n            };\n            TrendLoading.prototype.onZoomFrame = function() {\n                this.updatePosition();\n            };\n            TrendLoading.prototype.updatePosition = function() {\n                if (!this.isActive) return;\n                var trend = this.trend;\n                var segment = trend.segments.getStartSegment();\n                var x, y;\n                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    x = segment.currentAnimationState.startXVal;\n                    y = segment.currentAnimationState.startYVal;\n                } else {\n                    x = segment.currentAnimationState.xVal - segment.maxLength;\n                    y = segment.currentAnimationState.yVal;\n                }\n                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n            };\n            return TrendLoading;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLoading = TrendLoading;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(15);\n        var Object3D = THREE.Object3D;\n        var TrendsWidget = function(_super) {\n            __extends(TrendsWidget, _super);\n            function TrendsWidget(state) {\n                _super.call(this, state);\n                this.widgets = {};\n                this.object3D = new Object3D();\n                this.onTrendsChange();\n            }\n            TrendsWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n                state.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, changedOptions, newData);\n                });\n            };\n            TrendsWidget.prototype.onTrendsChange = function() {\n                var trendsOptions = this.chartState.data.trends;\n                var TrendWidgetClass = this.getTrendWidgetClass();\n                for (var trendName in trendsOptions) {\n                    var trendOptions = trendsOptions[trendName];\n                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n                        this.createTrendWidget(trendName);\n                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n                        this.destroyTrendWidget(trendName);\n                    }\n                }\n            };\n            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n                var widget = this.widgets[trendName];\n                if (!widget) return;\n                widget.onTrendChange(changedOptions);\n                if (newData) {\n                    var data = this.chartState.getTrend(trendName).getData();\n                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n                }\n            };\n            TrendsWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n                var WidgetConstructor = this.getTrendWidgetClass();\n                var widget = new WidgetConstructor(this.chartState, trendName);\n                this.widgets[trendName] = widget;\n                var widgetObject = widget.getObject3D();\n                widgetObject.name = trendName;\n                this.object3D.add(widget.getObject3D());\n            };\n            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n                this.widgets[trendName].onDestroy();\n                delete this.widgets[trendName];\n                var widgetObject = this.object3D.getObjectByName(trendName);\n                this.object3D.remove(widgetObject);\n            };\n            return TrendsWidget;\n        }(Widget_1.ChartWidget);\n        exports.TrendsWidget = TrendsWidget;\n        var TrendWidget = function() {\n            function TrendWidget(chartState, trendName) {\n                this.chartState = chartState;\n                this.trendName = trendName;\n                this.unsubscribers = [];\n                this.trend = chartState.trendsManager.getTrend(trendName);\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled;\n            };\n            TrendWidget.prototype.appendData = function(newData) {};\n            TrendWidget.prototype.prependData = function(newData) {};\n            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n            TrendWidget.prototype.onDestroy = function() {\n                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n                    var unsubscriber = _a[_i];\n                    unsubscriber();\n                }\n            };\n            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n            TrendWidget.prototype.onZoomFrame = function(options) {};\n            TrendWidget.prototype.onTransformationFrame = function(options) {};\n            TrendWidget.prototype.onZoom = function() {};\n            TrendWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.trend.segments.onAnimationFrame(function(trendPoints) {\n                    return _this.onSegmentsAnimate(trendPoints);\n                }));\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n                    return _this.onTransformationFrame(options);\n                }));\n                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n                    return _this.onZoomFrame(options);\n                }));\n                this.bindEvent(this.chartState.onZoom(function() {\n                    return _this.onZoom();\n                }));\n            };\n            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n                this.unsubscribers.push(unsubscriber);\n            };\n            return TrendWidget;\n        }();\n        exports.TrendWidget = TrendWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(15);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var Utils_1 = __webpack_require__(14);\n        var Line = THREE.Line;\n        var Mesh = THREE.Mesh;\n        var interfaces_1 = __webpack_require__(21);\n        var AxisMarksWidget = function(_super) {\n            __extends(AxisMarksWidget, _super);\n            function AxisMarksWidget(chartState) {\n                _super.call(this, chartState);\n                this.axisMarksWidgets = [];\n                this.object3D = new Object3D();\n                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n                var items = xAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n                items = yAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n            }\n            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n                this.axisMarksWidgets.push(axisMarkWidget);\n                this.object3D.add(axisMarkWidget.getObject3D());\n            };\n            AxisMarksWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n                    return _this.updateMarksPositions();\n                }), this.chartState.onResize(function() {\n                    return _this.updateMarksPositions();\n                }));\n            };\n            AxisMarksWidget.prototype.updateMarksPositions = function() {\n                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n                    var widget = _a[_i];\n                    widget.updatePosition();\n                }\n            };\n            AxisMarksWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarksWidget.widgetName = \"AxisMarks\";\n            return AxisMarksWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisMarksWidget = AxisMarksWidget;\n        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n            var axisMark = axisMarkWidget.axisMark;\n            ctx.fillStyle = axisMark.options.lineColor;\n            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n            var xCoord = 15;\n            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n                ctx.textAlign = \"end\";\n                xCoord = axisMarkWidget.indicatorWidth;\n            }\n            ctx.fillText(axisMark.options.title, xCoord, 20);\n            if (!axisMark.options.showValue) return;\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n        };\n        var INDICATOR_POS_Z = .1;\n        var AxisMarkWidget = function() {\n            function AxisMarkWidget(chartState, axisMark) {\n                this.indicatorWidth = 128;\n                this.indicatorHeight = 64;\n                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n                this.chartState = chartState;\n                this.axisMark = axisMark;\n                this.axisType = axisMark.axisType;\n                this.frameValue = axisMark.options.value;\n                this.object3D = new Object3D();\n                this.object3D.position.setZ(-.1);\n                this.line = this.createLine();\n                this.object3D.add(this.line);\n                this.indicator = this.createIndicator();\n                this.object3D.add(this.indicator);\n                this.renderIndicator();\n                this.updatePosition();\n                this.bindEvents();\n            }\n            AxisMarkWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarkWidget.prototype.createLine = function() {\n                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n                var lineGeometry = new Geometry();\n                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n                return new Line(lineGeometry, new LineBasicMaterial({\n                    color: Utils_1.Utils.getHexColor(lineColor),\n                    linewidth: lineWidth\n                }));\n            };\n            AxisMarkWidget.prototype.createIndicator = function() {\n                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n            };\n            AxisMarkWidget.prototype.renderIndicator = function() {\n                var texture = this.indicator.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n                texture.needsUpdate = true;\n            };\n            AxisMarkWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.axisMark.onDisplayedValueChange(function() {\n                    return _this.renderIndicator();\n                });\n                this.axisMark.onValueChange(function() {\n                    return _this.onValueChangeHandler();\n                });\n            };\n            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n                var _this = this;\n                if (this.moveAnimation) this.moveAnimation.kill();\n                var animations = this.chartState.data.animations;\n                var targetValue = this.axisMark.options.value;\n                var cb = function() {\n                    _this.updatePosition();\n                };\n                if (animations.enabled) {\n                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n                        frameValue: targetValue,\n                        ease: animations.trendChangeEase\n                    });\n                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.frameValue = targetValue;\n                    cb();\n                }\n            };\n            AxisMarkWidget.prototype.updatePosition = function() {\n                var chartState = this.chartState;\n                var screen = chartState.screen;\n                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n                var lineGeometry = this.line.geometry;\n                var hasStickMode = this.axisMark.options.stickToEdges;\n                var _a = this.chartState.data, width = _a.width, height = _a.height;\n                if (isXAxis) {\n                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n                    this.object3D.position.y = screen.getBottom();\n                    lineGeometry.vertices[1].setY(height);\n                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n                } else {\n                    var val = this.frameValue;\n                    var bottomVal = screen.getBottomVal();\n                    var topVal = screen.getTopVal();\n                    var needToStickOnTop = hasStickMode && val > topVal;\n                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n                    var centerYVal = screen.getCenterYVal();\n                    this.object3D.position.x = screen.getLeft();\n                    if (needToStickOnTop) {\n                        this.object3D.position.y = screen.getTop();\n                    } else if (needToStickOnBottom) {\n                        this.object3D.position.y = screen.getBottom();\n                    } else {\n                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n                    }\n                    lineGeometry.vertices[1].setX(width);\n                    var indicatorPosY = val > centerYVal ? -35 : 10;\n                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n                }\n                lineGeometry.verticesNeedUpdate = true;\n            };\n            AxisMarkWidget.typeName = \"simple\";\n            return AxisMarkWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(15);\n        var LineSegments = THREE.LineSegments;\n        var Vector3 = THREE.Vector3;\n        var BorderWidget = function(_super) {\n            __extends(BorderWidget, _super);\n            function BorderWidget(chartState) {\n                _super.call(this, chartState);\n                var _a = chartState.data, width = _a.width, height = _a.height;\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: 0,\n                    transparent: true\n                });\n                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n                this.lineSegments = new LineSegments(geometry, material);\n            }\n            BorderWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            BorderWidget.widgetName = \"Border\";\n            return BorderWidget;\n        }(Widget_1.ChartWidget);\n        exports.BorderWidget = BorderWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Color = THREE.Color;\n        var CANVAS_WIDTH = 128;\n        var CANVAS_HEIGHT = 64;\n        var OFFSET_X = 15;\n        var TrendsIndicatorWidget = function(_super) {\n            __extends(TrendsIndicatorWidget, _super);\n            function TrendsIndicatorWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n                return TrendIndicator;\n            };\n            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n            return TrendsIndicatorWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n        var TrendIndicator = function(_super) {\n            __extends(TrendIndicator, _super);\n            function TrendIndicator(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                this.onTrendChange();\n            }\n            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasIndicator;\n            };\n            TrendIndicator.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendIndicator.prototype.onTrendChange = function() {\n                var trendData = this.trend.getData();\n                var lastItem = trendData[trendData.length - 1];\n                var texture = this.mesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n                texture.needsUpdate = true;\n            };\n            TrendIndicator.prototype.initObject = function() {\n                var color = new Color(this.trend.getOptions().lineColor);\n                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"15px Arial\";\n                    ctx.fillStyle = color.getStyle();\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n            };\n            TrendIndicator.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n                this.segment = segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x + OFFSET_X;\n                var y = endPointVector.y;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n                if (indicatorIsOutOfScreen) {\n                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n                    y -= 25;\n                }\n                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n            };\n            return TrendIndicator;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendIndicator = TrendIndicator;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var LineSegments = THREE.LineSegments;\n        var Trend_1 = __webpack_require__(17);\n        var Utils_1 = __webpack_require__(14);\n        var MAX_DISPLAYED_SEGMENTS = 2e3;\n        var TrendsLineWidget = function(_super) {\n            __extends(TrendsLineWidget, _super);\n            function TrendsLineWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLine;\n            };\n            TrendsLineWidget.widgetName = \"TrendsLine\";\n            return TrendsLineWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLineWidget = TrendsLineWidget;\n        var TrendLine = function(_super) {\n            __extends(TrendLine, _super);\n            function TrendLine(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeSegmentsInds = [];\n                this.displayedSegments = {};\n                var options = this.trend.getOptions();\n                this.material = new LineBasicMaterial({\n                    color: options.lineColor,\n                    linewidth: options.lineWidth\n                });\n                this.initLine();\n            }\n            TrendLine.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendLine.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            TrendLine.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segments.onRebuild(function() {\n                    _this.destroySegments();\n                    _this.setupSegments();\n                }));\n                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n                    _this.setupSegments();\n                }));\n            };\n            TrendLine.prototype.initLine = function() {\n                var geometry = new Geometry();\n                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.scaleXFactor = scaleXFactor;\n                this.scaleYFactor = scaleYFactor;\n                this.lineSegments = new LineSegments(geometry, this.material);\n                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.lineSegments.frustumCulled = false;\n                for (var i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\n                    geometry.vertices.push(new Vector3(), new Vector3());\n                    this.freeSegmentsInds.push(i);\n                }\n                this.vertices = geometry.vertices;\n                this.setupSegments();\n            };\n            TrendLine.prototype.setupSegments = function() {\n                var geometry = this.lineSegments.geometry;\n                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.displayedSegments) {\n                    var lineSegment = this.displayedSegments[segmentId];\n                    var segment_1 = this.trend.segments.segments[lineSegment.segmentId];\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupSegment(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n                var lineSegment = this.displayedSegments[segmentId];\n                if (!lineSegment) {\n                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n                    var ind = this.freeSegmentsInds.pop();\n                    lineSegment = this.displayedSegments[segmentId] = {\n                        segmentId: segmentId,\n                        ind: ind\n                    };\n                }\n                var segmentInd = lineSegment.ind;\n                var lineStartVertex = this.vertices[segmentInd * 2];\n                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n            };\n            TrendLine.prototype.destroySegments = function() {\n                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n            };\n            TrendLine.prototype.destroySegment = function(segmentId) {\n                var lineSegment = this.displayedSegments[segmentId];\n                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n                lineStartVertex.set(0, 0, 0);\n                lineEndVertex.set(0, 0, 0);\n                delete this.displayedSegments[segmentId];\n                this.freeSegmentsInds.push(lineSegment.ind);\n            };\n            TrendLine.prototype.onZoomFrame = function(options) {\n                var currentScale = this.lineSegments.scale;\n                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n            };\n            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n                var geometry = this.lineSegments.geometry;\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.displayedSegments[segmentId]) continue;\n                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendLine;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLine = TrendLine;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var Vector3 = THREE.Vector3;\n        var Mesh = THREE.Mesh;\n        var Line = THREE.Line;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var PlaneGeometry = THREE.PlaneGeometry;\n        var Trend_1 = __webpack_require__(17);\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Utils_1 = __webpack_require__(14);\n        var RISE_COLOR = 2927680;\n        var FALL_COLOR = 15619379;\n        var MARGIN_PERCENT = .3;\n        var MAX_CANDLES = 100;\n        var TrendsCandlesWidget = function(_super) {\n            __extends(TrendsCandlesWidget, _super);\n            function TrendsCandlesWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n                return TrendCandlesWidget;\n            };\n            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n            return TrendsCandlesWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n        var TrendCandlesWidget = function(_super) {\n            __extends(TrendCandlesWidget, _super);\n            function TrendCandlesWidget(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeCandlesInds = [];\n                this.candlesPool = [];\n                this.candles = {};\n                this.initObject();\n            }\n            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n            };\n            TrendCandlesWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendCandlesWidget.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segments.onRebuild(function() {\n                    _this.destroyCandles();\n                    _this.setupCandles();\n                }));\n                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n                    _this.setupCandles();\n                }));\n            };\n            TrendCandlesWidget.prototype.initObject = function() {\n                var stateData = this.chartState.data;\n                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.scaleXFactor = scaleXFactor;\n                this.scaleYFactor = scaleYFactor;\n                this.object3D = new Object3D();\n                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.object3D.frustumCulled = false;\n                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n                this.setupCandles();\n            };\n            TrendCandlesWidget.prototype.setupCandles = function() {\n                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.candles) {\n                    var segment_1 = this.candles[segmentId].segment;\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupCandle(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n            };\n            TrendCandlesWidget.prototype.destroyCandles = function() {\n                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n            };\n            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n                var candle = this.candles[segmentId];\n                this.object3D.remove(candle.getObject3D());\n                delete this.candles[segmentId];\n            };\n            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n                var currentScale = this.object3D.scale;\n                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n            };\n            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.candles[segmentId]) continue;\n                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n                    this.setupCandle(segmentId, segmentState);\n                }\n            };\n            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n                var candleInd = candleId % MAX_CANDLES;\n                var candle = this.candlesPool[candleInd];\n                if (!candle) {\n                    candle = this.candlesPool[candleInd] = new CandleWidget();\n                }\n                if (!this.candles[candleId]) {\n                    this.candles[candleId] = candle;\n                    this.object3D.add(candle.getObject3D());\n                }\n                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n                candle.setSegment(segmentState);\n            };\n            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendCandlesWidget;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendCandlesWidget = TrendCandlesWidget;\n        var CandleWidget = function() {\n            function CandleWidget() {\n                this.initObject();\n            }\n            CandleWidget.prototype.getObject3D = function() {\n                return this.rect;\n            };\n            CandleWidget.prototype.setSegment = function(segment) {\n                this.segment = segment;\n                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n                var geometry = this.rect.geometry;\n                var material = this.rect.material;\n                var width = segment.endXVal - segment.startXVal;\n                width -= width * MARGIN_PERCENT;\n                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n                leftTop.set(-width / 2, height / 2, 0);\n                rightTop.set(width / 2, height / 2, 0);\n                leftBottom.set(-width / 2, -height / 2, 0);\n                rightBottom.set(width / 2, -height / 2, 0);\n                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n                    leftBottom.setY(leftBottom.y + 1);\n                    rightBottom.setY(rightBottom.y + 1);\n                }\n                material.color.set(color);\n                geometry.verticesNeedUpdate = true;\n                var vLineGeometry = this.vLine.geometry;\n                var vLineMaterial = this.vLine.material;\n                var lineTop = segment.maxYVal - segment.yVal;\n                var lineBottom = segment.minYVal - segment.yVal;\n                vLineGeometry.vertices[0].set(0, lineTop, 0);\n                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n                vLineMaterial.color.set(color);\n                vLineGeometry.verticesNeedUpdate = true;\n                var hLineGeometry = this.hLine.geometry;\n                var hLineMaterial = this.hLine.material;\n                var lineLeft = -width / 2;\n                var lineRight = width / 2;\n                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n                hLineMaterial.color.set(color);\n                hLineGeometry.verticesNeedUpdate = true;\n            };\n            CandleWidget.prototype.initObject = function() {\n                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n                var vLineGeometry = new Geometry();\n                var hLineGeometry = new Geometry();\n                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.rect.add(this.vLine);\n                this.rect.add(this.hLine);\n            };\n            return CandleWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(17);\n        var TrendsBeaconWidget = function(_super) {\n            __extends(TrendsBeaconWidget, _super);\n            function TrendsBeaconWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n                return TrendBeacon;\n            };\n            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n            return TrendsBeaconWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n        var TrendBeacon = function(_super) {\n            __extends(TrendBeacon, _super);\n            function TrendBeacon(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                if (state.data.animations.enabled) {\n                    this.animate();\n                }\n                this.updatePosition();\n            }\n            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendBeacon.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendBeacon.prototype.onTrendChange = function() {\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return _this.updatePosition();\n                }));\n                this.bindEvent(this.chartState.onChange(function(changedProps) {\n                    return _this.onStateChange(changedProps);\n                }));\n                this.bindEvent(this.chartState.onDestroy(function() {\n                    return _this.stopAnimation();\n                }));\n            };\n            TrendBeacon.prototype.initObject = function() {\n                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture(),\n                    transparent: true\n                }));\n                light.scale.set(.2, .2, 1);\n                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture()\n                })));\n                this.segment = this.trend.segments.getEndSegment();\n            };\n            TrendBeacon.prototype.animate = function() {\n                var _this = this;\n                this.animated = true;\n                var object = this.mesh;\n                var animationObject = {\n                    scale: object.scale.x,\n                    opacity: object.material.opacity\n                };\n                this.mesh.scale.set(.1, .1, 1);\n                setTimeout(function() {\n                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n                        scale: 1,\n                        opacity: 0\n                    });\n                    animation.eventCallback(\"onUpdate\", function() {\n                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n                        object.material.opacity = animationObject.opacity;\n                    }).eventCallback(\"onComplete\", function() {\n                        _this.animation && animation.restart();\n                    });\n                }, 500);\n            };\n            TrendBeacon.prototype.stopAnimation = function() {\n                this.animated = false;\n                this.animation && this.animation.kill();\n                this.animation = null;\n            };\n            TrendBeacon.createTexture = function() {\n                var h = 32, w = 32;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.beginPath();\n                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = \"white\";\n                    ctx.fill();\n                });\n            };\n            TrendBeacon.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n                this.segment = trendsSegments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onStateChange = function(changedProps) {\n                if (!changedProps.animations) return;\n                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n                if (changedProps.animations.enabled) {\n                    this.animate();\n                } else {\n                    this.stopAnimation();\n                }\n            };\n            TrendBeacon.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var xVal, yVal;\n                var currentAnimationState = this.segment.currentAnimationState;\n                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    xVal = currentAnimationState.endXVal;\n                    yVal = currentAnimationState.endYVal;\n                } else {\n                    xVal = currentAnimationState.xVal;\n                    yVal = currentAnimationState.endYVal;\n                }\n                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n                this.mesh.position.set(x, endPointVector.y, .1);\n            };\n            return TrendBeacon;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendBeacon = TrendBeacon;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(3));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var EventEmmiter_1 = __webpack_require__(13);\n        exports.DEFAULT_CONFIG = {\n            installPluginWidgets: true\n        };\n        var ChartPlugin = function() {\n            function ChartPlugin(options, config) {\n                if (config === void 0) {\n                    config = {};\n                }\n                this.unsubscribers = [];\n                this.initialState = options;\n                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n                this.name = this.constructor.NAME;\n                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n            }\n            ChartPlugin.prototype.setupChartState = function(chartState) {\n                var _this = this;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n                    return _this.onInitialStateAppliedHandler(initialState);\n                }), this.chartState.onReady(function() {\n                    return _this.onChartReadyHandler();\n                }), this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n                }));\n            };\n            ChartPlugin.prototype.getOptions = function() {\n                return this.chartState.data.pluginsState[this.name];\n            };\n            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n            ChartPlugin.prototype.onChartReadyHandler = function() {};\n            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n            ChartPlugin.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n            };\n            ChartPlugin.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartPlugin.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartPlugin.NAME = \"\";\n            ChartPlugin.pluginWidgets = [];\n            return ChartPlugin;\n        }();\n        exports.ChartPlugin = ChartPlugin;\n    } ]);\n});\n\n\n//# sourceMappingURL=ThreeChart.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-chart/build/ThreeChart.js\n ** module id = 35\n ** module chunks = 1\n **/","module.exports = require(\"./TrendsMarksPlugin\")\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./plugins/build/TrendsMarksPlugin/index.js\n ** module id = 36\n ** module chunks = 1\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n    if (typeof exports === \"object\" && typeof module === \"object\") module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"THREE_CHARTS\"] = factory(); else root[\"THREE_CHARTS\"] = factory();\n})(this, function() {\n    return function(modules) {\n        var installedModules = {};\n        function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n            var module = installedModules[moduleId] = {\n                exports: {},\n                id: moduleId,\n                loaded: false\n            };\n            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n            module.loaded = true;\n            return module.exports;\n        }\n        __webpack_require__.m = modules;\n        __webpack_require__.c = installedModules;\n        __webpack_require__.p = \"\";\n        return __webpack_require__(0);\n    }([ function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(1));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var three_chart_1 = __webpack_require__(2);\n        var TrendsMarksWidget_1 = __webpack_require__(4);\n        (function(TREND_MARK_SIDE) {\n            TREND_MARK_SIDE[TREND_MARK_SIDE[\"TOP\"] = 0] = \"TOP\";\n            TREND_MARK_SIDE[TREND_MARK_SIDE[\"BOTTOM\"] = 1] = \"BOTTOM\";\n        })(exports.TREND_MARK_SIDE || (exports.TREND_MARK_SIDE = {}));\n        var TREND_MARK_SIDE = exports.TREND_MARK_SIDE;\n        (function(EVENTS) {\n            EVENTS[EVENTS[\"CHANGE\"] = 0] = \"CHANGE\";\n        })(exports.EVENTS || (exports.EVENTS = {}));\n        var EVENTS = exports.EVENTS;\n        var AXIS_MARK_DEFAULT_OPTIONS = {\n            trendName: \"\",\n            title: \"\",\n            description: \"\",\n            descriptionColor: \"rgb(40,136,75)\",\n            value: 0,\n            iconColor: \"rgb(255, 102, 217)\",\n            orientation: TREND_MARK_SIDE.TOP,\n            width: 65,\n            height: 80,\n            offset: 40,\n            margin: 20\n        };\n        var TrendsMarksPlugin = function(_super) {\n            __extends(TrendsMarksPlugin, _super);\n            function TrendsMarksPlugin(trendsMarksPluginOptions) {\n                _super.call(this, trendsMarksPluginOptions);\n                this.items = {};\n                this.rects = {};\n            }\n            TrendsMarksPlugin.prototype.onInitialStateApplied = function() {\n                this.bindEvents();\n                this.onMarksChangeHandler();\n            };\n            TrendsMarksPlugin.prototype.onStateChanged = function() {\n                this.onMarksChangeHandler();\n            };\n            TrendsMarksPlugin.prototype.getOptions = function() {\n                return _super.prototype.getOptions.call(this);\n            };\n            TrendsMarksPlugin.prototype.getItems = function() {\n                return this.items;\n            };\n            TrendsMarksPlugin.prototype.getItem = function(markName) {\n                return this.items[markName];\n            };\n            TrendsMarksPlugin.prototype.createMark = function(options) {\n                var marksOptions = this.getOptions().items;\n                var newMarkOptions = marksOptions.concat([ options ]);\n                this.chartState.setState({\n                    pluginsState: (_a = {}, _a[this.name] = {\n                        items: newMarkOptions\n                    }, _a)\n                });\n                var _a;\n            };\n            TrendsMarksPlugin.prototype.onChange = function(cb) {\n                return this.ee.subscribe(EVENTS[EVENTS.CHANGE], cb);\n            };\n            TrendsMarksPlugin.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.trendsManager.onSegmentsRebuilded(function() {\n                    return _this.updateMarksSegments();\n                });\n                this.chartState.screen.onZoomFrame(function() {\n                    return _this.calclulateMarksPositions();\n                });\n            };\n            TrendsMarksPlugin.prototype.onInitialStateAppliedHandler = function() {\n                this.onMarksChangeHandler();\n            };\n            TrendsMarksPlugin.prototype.onMarksChangeHandler = function() {\n                var trendsMarksOptions = this.getOptions().items;\n                var actualMarksNames = [];\n                for (var _i = 0, trendsMarksOptions_1 = trendsMarksOptions; _i < trendsMarksOptions_1.length; _i++) {\n                    var options = trendsMarksOptions_1[_i];\n                    var marks = this.items;\n                    if (!options.name) {\n                        options.name = three_chart_1.Utils.getUid().toString();\n                        actualMarksNames.push(options.name);\n                        if (marks[options.name]) three_chart_1.Utils.error(\"duplicated mark name \" + options.name);\n                    } else if (marks[options.name]) {\n                        actualMarksNames.push(options.name);\n                        continue;\n                    }\n                    options = three_chart_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n                    var mark = new TrendMark(this.chartState, options);\n                    marks[options.name] = mark;\n                }\n                for (var markName in this.items) {\n                    if (actualMarksNames.indexOf(markName) != -1) continue;\n                    delete this.items[markName];\n                }\n                this.updateMarksSegments();\n                this.ee.emit(EVENTS[EVENTS.CHANGE]);\n            };\n            TrendsMarksPlugin.prototype.calclulateMarksPositions = function() {\n                this.rects = {};\n                for (var markName in this.items) {\n                    this.createMarkRect(this.items[markName]);\n                }\n            };\n            TrendsMarksPlugin.prototype.createMarkRect = function(mark) {\n                if (!mark.segment) return;\n                var state = this.chartState;\n                var options = mark.options;\n                var width = options.width, height = options.height, offset = options.offset, name = options.name;\n                var left = state.getPointOnXAxis(mark.xVal) - width / 2;\n                var top = state.getPointOnYAxis(mark.yVal);\n                var isTopSideMark = options.orientation == TREND_MARK_SIDE.TOP;\n                var newOffset;\n                var row = 0;\n                if (isTopSideMark) {\n                    top += offset + height;\n                } else {\n                    top -= offset;\n                }\n                var markRect = [ left, top, width, height ];\n                var hasIntersection = false;\n                do {\n                    for (var markName in this.rects) {\n                        var rect = this.rects[markName];\n                        hasIntersection = three_chart_1.Utils.rectsIntersect(rect, markRect);\n                        if (!hasIntersection) continue;\n                        if (isTopSideMark) {\n                            markRect[1] = rect[1] + markRect[3] + options.margin;\n                        } else {\n                            markRect[1] = rect[1] - rect[3] - options.margin;\n                        }\n                        row++;\n                        break;\n                    }\n                } while (hasIntersection);\n                if (isTopSideMark) {\n                    newOffset = markRect[1] - markRect[3] - state.getPointOnYAxis(mark.yVal);\n                } else {\n                    newOffset = state.getPointOnYAxis(mark.yVal) - markRect[1];\n                }\n                mark._setOffset(newOffset);\n                mark._setRow(row);\n                this.rects[name] = markRect;\n            };\n            TrendsMarksPlugin.prototype.updateMarksSegments = function() {\n                var chartState = this.chartState;\n                var trends = chartState.trendsManager.trends;\n                for (var trendName in trends) {\n                    var marks = this.getTrendMarks(trendName);\n                    var marksArr = [];\n                    var xVals = [];\n                    for (var markName in marks) {\n                        var mark = marks[markName];\n                        xVals.push(mark.options.value);\n                        marksArr.push(mark);\n                        mark._setSegment(null);\n                    }\n                    marksArr.sort(function(a, b) {\n                        return a.options.value - b.options.value;\n                    });\n                    var trend = chartState.getTrend(trendName);\n                    var points = trend.segments.getSegmentsForXValues(xVals.sort(function(a, b) {\n                        return a - b;\n                    }));\n                    for (var markInd = 0; markInd < marksArr.length; markInd++) {\n                        marksArr[markInd]._setSegment(points[markInd]);\n                    }\n                }\n                this.calclulateMarksPositions();\n            };\n            TrendsMarksPlugin.prototype.getTrendMarks = function(trendName) {\n                var trendMarks = [];\n                for (var markName in this.items) {\n                    if (this.items[markName].options.trendName != trendName) continue;\n                    trendMarks.push(this.items[markName]);\n                }\n                return trendMarks;\n            };\n            TrendsMarksPlugin.NAME = \"TrendsMarks\";\n            TrendsMarksPlugin.pluginWidgets = [ TrendsMarksWidget_1.TrendsMarksWidget ];\n            return TrendsMarksPlugin;\n        }(three_chart_1.ChartPlugin);\n        exports.TrendsMarksPlugin = TrendsMarksPlugin;\n        var TrendMark = function() {\n            function TrendMark(chartState, options) {\n                this.row = 0;\n                this.options = options;\n                this.chartState = chartState;\n            }\n            TrendMark.prototype._setSegment = function(segment) {\n                this.segment = segment;\n                if (!segment) return;\n                var trend = this.chartState.getTrend(this.options.trendName);\n                if (trend.getOptions().type == three_chart_1.TREND_TYPE.LINE) {\n                    this.xVal = segment.endXVal;\n                    this.yVal = segment.endYVal;\n                } else if (this.options.orientation == TREND_MARK_SIDE.TOP) {\n                    this.xVal = segment.xVal;\n                    this.yVal = segment.maxYVal;\n                } else {\n                    this.xVal = segment.xVal;\n                    this.yVal = segment.minYVal;\n                }\n            };\n            TrendMark.prototype._setOffset = function(offset) {\n                this.offset = offset;\n            };\n            TrendMark.prototype._setRow = function(row) {\n                this.row = row;\n            };\n            return TrendMark;\n        }();\n        exports.TrendMark = TrendMark;\n    }, function(module, exports, __webpack_require__) {\n        module.exports = __webpack_require__(3);\n    }, function(module, exports, __webpack_require__) {\n        (function webpackUniversalModuleDefinition(root, factory) {\n            if (true) module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"ThreeChart\"] = factory(); else root[\"ThreeChart\"] = factory();\n        })(this, function() {\n            return function(modules) {\n                var installedModules = {};\n                function __webpack_require__(moduleId) {\n                    if (installedModules[moduleId]) return installedModules[moduleId].exports;\n                    var module = installedModules[moduleId] = {\n                        exports: {},\n                        id: moduleId,\n                        loaded: false\n                    };\n                    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n                    module.loaded = true;\n                    return module.exports;\n                }\n                __webpack_require__.m = modules;\n                __webpack_require__.c = installedModules;\n                __webpack_require__.p = \"\";\n                return __webpack_require__(0);\n            }([ function(module, exports, __webpack_require__) {\n                \"use strict\";\n                function __export(m) {\n                    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n                }\n                __export(__webpack_require__(1));\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                function __export(m) {\n                    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n                }\n                __export(__webpack_require__(2));\n                __export(__webpack_require__(21));\n                __export(__webpack_require__(20));\n                __export(__webpack_require__(19));\n                __export(__webpack_require__(12));\n                __export(__webpack_require__(17));\n                __export(__webpack_require__(18));\n                __export(__webpack_require__(16));\n                __export(__webpack_require__(14));\n                __export(__webpack_require__(15));\n                __export(__webpack_require__(33));\n                __export(__webpack_require__(25));\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                __webpack_require__(3);\n                var PerspectiveCamera = THREE.PerspectiveCamera;\n                var State_1 = __webpack_require__(12);\n                var Utils_1 = __webpack_require__(14);\n                var AxisWidget_1 = __webpack_require__(22);\n                var GridWidget_1 = __webpack_require__(23);\n                var TrendsLoadingWidget_1 = __webpack_require__(24);\n                var AxisMarksWidget_1 = __webpack_require__(26);\n                var BorderWidget_1 = __webpack_require__(27);\n                var TrendsIndicatorWidget_1 = __webpack_require__(28);\n                var TrendsLineWidget_1 = __webpack_require__(29);\n                var TrendsCandleWidget_1 = __webpack_require__(30);\n                var TrendsBeaconWidget_1 = __webpack_require__(31);\n                var deps_1 = __webpack_require__(32);\n                exports.MAX_DATA_LENGTH = 2692e3;\n                var Chart = function() {\n                    function Chart(state, $container, plugins) {\n                        var _this = this;\n                        if (plugins === void 0) {\n                            plugins = [];\n                        }\n                        this.widgets = [];\n                        if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n                        if (!$container) {\n                            Utils_1.Utils.error(\"$el must be set\");\n                        }\n                        var style = getComputedStyle($container);\n                        state.width = parseInt(style.width);\n                        state.height = parseInt(style.height);\n                        this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n                        this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n                            return _this.zoom(zoomValue, origin);\n                        }, 200);\n                        this.$container = $container;\n                        this.init($container);\n                    }\n                    Chart.installWidget = function(Widget) {\n                        if (!Widget.widgetName) {\n                            Utils_1.Utils.error(\"unnamed widget\");\n                        }\n                        this.installedWidgets[Widget.widgetName] = Widget;\n                    };\n                    Chart.prototype.init = function($container) {\n                        var state = this.state;\n                        var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n                        this.scene = new THREE.Scene();\n                        this.isStopped = !autoRender.enabled;\n                        var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n                            antialias: true,\n                            alpha: true\n                        });\n                        renderer.setPixelRatio(Chart.devicePixelRatio);\n                        renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n                        renderer.setSize(w, h);\n                        $container.appendChild(renderer.domElement);\n                        this.$el = renderer.domElement;\n                        this.$el.style.display = \"block\";\n                        if (showStats) {\n                            this.stats = new Stats();\n                            $container.appendChild(this.stats.domElement);\n                        }\n                        this.setupCamera();\n                        var widgetsClasses = this.state.widgetsClasses;\n                        for (var widgetName in widgetsClasses) {\n                            var widgetOptions = this.state.data.widgets[widgetName];\n                            if (!widgetOptions.enabled) continue;\n                            var WidgetConstructor = widgetsClasses[widgetName];\n                            var widget = new WidgetConstructor(this.state);\n                            this.scene.add(widget.getObject3D());\n                            this.widgets.push(widget);\n                        }\n                        this.bindEvents();\n                        this.renderLoop();\n                    };\n                    Chart.prototype.renderLoop = function() {\n                        var _this = this;\n                        if (this.isDestroyed) return;\n                        this.stats && this.stats.begin();\n                        this.render();\n                        if (this.isStopped) return;\n                        var fpsLimit = this.state.data.autoRender.fps;\n                        if (fpsLimit) {\n                            var delay = 1e3 / fpsLimit;\n                            setTimeout(function() {\n                                return requestAnimationFrame(function() {\n                                    return _this.renderLoop();\n                                });\n                            }, delay);\n                        } else {\n                            requestAnimationFrame(function() {\n                                return _this.renderLoop();\n                            });\n                        }\n                        this.stats && this.stats.end();\n                    };\n                    Chart.prototype.render = function() {\n                        this.renderer.render(this.scene, this.camera);\n                    };\n                    Chart.prototype.stop = function() {\n                        this.isStopped = true;\n                    };\n                    Chart.prototype.run = function() {\n                        this.isStopped = false;\n                        this.renderLoop();\n                    };\n                    Chart.prototype.destroy = function() {\n                        this.isDestroyed = true;\n                        this.stop();\n                        this.state.destroy();\n                        this.unbindEvents();\n                        try {\n                            this.renderer.forceContextLoss();\n                        } catch (wtf) {}\n                        this.renderer.context = null;\n                        this.renderer.domElement = null;\n                        this.renderer = null;\n                    };\n                    Chart.prototype.getState = function() {\n                        return this.state.data;\n                    };\n                    Chart.prototype.getTrend = function(trendName) {\n                        return this.state.getTrend(trendName);\n                    };\n                    Chart.prototype.setState = function(state) {\n                        return this.state.setState(state);\n                    };\n                    Chart.prototype.bindEvents = function() {\n                        var _this = this;\n                        var $el = this.$el;\n                        if (this.state.data.controls.enabled) {\n                            $el.addEventListener(\"mousewheel\", function(ev) {\n                                _this.onMouseWheel(ev);\n                            });\n                            $el.addEventListener(\"mousemove\", function(ev) {\n                                _this.onMouseMove(ev);\n                            });\n                            $el.addEventListener(\"mousedown\", function(ev) {\n                                return _this.onMouseDown(ev);\n                            });\n                            $el.addEventListener(\"mouseup\", function(ev) {\n                                return _this.onMouseUp(ev);\n                            });\n                            $el.addEventListener(\"touchmove\", function(ev) {\n                                _this.onTouchMove(ev);\n                            });\n                            $el.addEventListener(\"touchend\", function(ev) {\n                                _this.onTouchEnd(ev);\n                            });\n                        }\n                        if (this.state.data.autoResize) {\n                            this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n                                _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n                            });\n                        }\n                        this.unsubscribers = [ this.state.onTrendsChange(function() {\n                            return _this.autoscroll();\n                        }), this.state.screen.onTransformationFrame(function(options) {\n                            return _this.onScreenTransformHandler(options);\n                        }), this.state.onResize(function(options) {\n                            return _this.onChartResize();\n                        }) ];\n                    };\n                    Chart.prototype.unbindEvents = function() {\n                        try {\n                            this.resizeSensor && this.resizeSensor.detach();\n                        } catch (e) {}\n                        this.$el.remove();\n                        this.unsubscribers.forEach(function(unsubscribe) {\n                            return unsubscribe();\n                        });\n                    };\n                    Chart.prototype.setupCamera = function() {\n                        var camSettings = this.state.screen.getCameraSettings();\n                        if (!this.camera) {\n                            this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n                            this.scene.add(this.camera);\n                        } else {\n                            this.camera.fov = camSettings.FOV;\n                            this.camera.aspect = camSettings.aspect;\n                            this.camera.far = camSettings.far;\n                            this.camera.near = camSettings.near;\n                            this.camera.updateProjectionMatrix();\n                        }\n                        this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n                        this.cameraInitialPosition = this.camera.position.clone();\n                        this.onScreenTransformHandler(this.state.screen.options);\n                    };\n                    Chart.prototype.onScreenTransformHandler = function(options) {\n                        if (options.scrollX != void 0) {\n                            var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n                            this.camera.position.setX(scrollX_1);\n                        }\n                        if (options.scrollY != void 0) {\n                            var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n                            this.camera.position.setY(scrollY_1);\n                        }\n                    };\n                    Chart.prototype.autoscroll = function() {\n                        var state = this.state;\n                        if (!state.data.autoScroll) return;\n                        var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n                        var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n                        if (trendsMaxXDelta > 0) {\n                            var maxVisibleX = this.state.screen.getScreenRightVal();\n                            var paddingRightX = this.state.getPaddingRight();\n                            var currentScroll = state.data.xAxis.range.scroll;\n                            if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n                                return;\n                            }\n                            var scrollDelta = trendsMaxXDelta;\n                            this.setState({\n                                xAxis: {\n                                    range: {\n                                        scroll: currentScroll + scrollDelta\n                                    }\n                                }\n                            });\n                        }\n                    };\n                    Chart.prototype.onScrollStop = function() {};\n                    Chart.prototype.onMouseDown = function(ev) {\n                        this.setState({\n                            cursor: {\n                                dragMode: true,\n                                x: ev.clientX,\n                                y: ev.clientY\n                            }\n                        });\n                    };\n                    Chart.prototype.onMouseUp = function(ev) {\n                        this.setState({\n                            cursor: {\n                                dragMode: false\n                            }\n                        });\n                    };\n                    Chart.prototype.onMouseMove = function(ev) {\n                        if (this.state.data.cursor.dragMode) {\n                            this.setState({\n                                cursor: {\n                                    dragMode: true,\n                                    x: ev.clientX,\n                                    y: ev.clientY\n                                }\n                            });\n                        }\n                    };\n                    Chart.prototype.onMouseWheel = function(ev) {\n                        ev.stopPropagation();\n                        ev.preventDefault();\n                        var zoomOrigin = ev.layerX / this.state.data.width;\n                        var zoomValue = 1 + ev.wheelDeltaY * .001;\n                        this.zoom(zoomValue, zoomOrigin);\n                    };\n                    Chart.prototype.onTouchMove = function(ev) {\n                        this.setState({\n                            cursor: {\n                                dragMode: true,\n                                x: ev.touches[0].clientX,\n                                y: ev.touches[0].clientY\n                            }\n                        });\n                    };\n                    Chart.prototype.onTouchEnd = function(ev) {\n                        this.setState({\n                            cursor: {\n                                dragMode: false\n                            }\n                        });\n                    };\n                    Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n                        this.setState({\n                            width: width,\n                            height: height\n                        });\n                    };\n                    Chart.prototype.onChartResize = function() {\n                        var _a = this.state.data, width = _a.width, height = _a.height;\n                        this.renderer.setSize(width, height);\n                        this.setupCamera();\n                    };\n                    Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n                        var _this = this;\n                        var MAX_ZOOM_VALUE = 1.5;\n                        var MIN_ZOOM_VALUE = .7;\n                        zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n                        zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n                        var autoScrollIsEnabled = this.state.data.autoScroll;\n                        if (autoScrollIsEnabled) this.state.setState({\n                            autoScroll: false\n                        });\n                        this.state.zoom(zoomValue, zoomOrigin).then(function() {\n                            if (autoScrollIsEnabled) _this.setState({\n                                autoScroll: true\n                            });\n                        });\n                    };\n                    Chart.createPreviewChart = function(userOptions, $el) {\n                        var previewChartOptions = {\n                            animations: {\n                                enabled: false\n                            },\n                            widgets: {\n                                Grid: {\n                                    enabled: false\n                                },\n                                Axis: {\n                                    enabled: false\n                                },\n                                TrendsGradient: {\n                                    enabled: false\n                                }\n                            }\n                        };\n                        var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n                        return new Chart(options, $el);\n                    };\n                    Chart.devicePixelRatio = window.devicePixelRatio;\n                    Chart.installedWidgets = {};\n                    Chart.renderers = {\n                        CanvasRenderer: THREE.CanvasRenderer,\n                        WebGLRenderer: THREE.WebGLRenderer\n                    };\n                    return Chart;\n                }();\n                exports.Chart = Chart;\n                Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n                Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n                Chart.installWidget(AxisWidget_1.AxisWidget);\n                Chart.installWidget(GridWidget_1.GridWidget);\n                Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n                Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n                Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n                Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n                Chart.installWidget(BorderWidget_1.BorderWidget);\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                window.TweenLite = TweenMax;\n                window.Stats = __webpack_require__(4);\n                __webpack_require__(5);\n                __webpack_require__(6);\n                exports.isPlainObject = __webpack_require__(7);\n                exports.EE2 = __webpack_require__(9);\n                var es6_promise_1 = __webpack_require__(10);\n                exports.Promise = es6_promise_1.Promise;\n                exports.ResizeSensor = __webpack_require__(11);\n            }, function(module, exports) {\n                var Stats = function() {\n                    function h(a) {\n                        c.appendChild(a.dom);\n                        return a;\n                    }\n                    function k(a) {\n                        for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n                        l = a;\n                    }\n                    var l = 0, c = document.createElement(\"div\");\n                    c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n                    c.addEventListener(\"click\", function(a) {\n                        a.preventDefault();\n                        k(++l % c.children.length);\n                    }, !1);\n                    var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n                    if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n                    k(0);\n                    return {\n                        REVISION: 16,\n                        dom: c,\n                        addPanel: h,\n                        showPanel: k,\n                        begin: function() {\n                            g = (performance || Date).now();\n                        },\n                        end: function() {\n                            a++;\n                            var c = (performance || Date).now();\n                            f.update(c - g, 200);\n                            if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n                                var d = performance.memory;\n                                t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                            }\n                            return c;\n                        },\n                        update: function() {\n                            g = this.end();\n                        },\n                        domElement: c,\n                        setMode: k\n                    };\n                };\n                Stats.Panel = function(h, k, l) {\n                    var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n                    q.width = r;\n                    q.height = f;\n                    q.style.cssText = \"width:80px;height:48px\";\n                    var b = q.getContext(\"2d\");\n                    b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n                    b.textBaseline = \"top\";\n                    b.fillStyle = l;\n                    b.fillRect(0, 0, r, f);\n                    b.fillStyle = k;\n                    b.fillText(h, t, u);\n                    b.fillRect(d, m, n, p);\n                    b.fillStyle = l;\n                    b.globalAlpha = .9;\n                    b.fillRect(d, m, n, p);\n                    return {\n                        dom: q,\n                        update: function(f, v) {\n                            c = Math.min(c, f);\n                            g = Math.max(g, f);\n                            b.fillStyle = l;\n                            b.globalAlpha = 1;\n                            b.fillRect(0, 0, r, m);\n                            b.fillStyle = k;\n                            b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n                            b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                            b.fillRect(d + n - a, m, a, p);\n                            b.fillStyle = l;\n                            b.globalAlpha = .9;\n                            b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n                        }\n                    };\n                };\n                \"object\" === typeof module && (module.exports = Stats);\n            }, function(module, exports) {\n                THREE.SpriteCanvasMaterial = function(parameters) {\n                    THREE.Material.call(this);\n                    this.type = \"SpriteCanvasMaterial\";\n                    this.color = new THREE.Color(16777215);\n                    this.program = function(context, color) {};\n                    this.setValues(parameters);\n                };\n                THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n                THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n                THREE.SpriteCanvasMaterial.prototype.clone = function() {\n                    var material = new THREE.SpriteCanvasMaterial();\n                    material.copy(this);\n                    material.color.copy(this.color);\n                    material.program = this.program;\n                    return material;\n                };\n                THREE.CanvasRenderer = function(parameters) {\n                    console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n                    parameters = parameters || {};\n                    var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n                        alpha: parameters.alpha === true\n                    }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n                    if (_context.setLineDash === undefined) {\n                        _context.setLineDash = function() {};\n                    }\n                    this.domElement = _canvas;\n                    this.autoClear = true;\n                    this.sortObjects = true;\n                    this.sortElements = true;\n                    this.info = {\n                        render: {\n                            vertices: 0,\n                            faces: 0\n                        }\n                    };\n                    this.supportsVertexTextures = function() {};\n                    this.setFaceCulling = function() {};\n                    this.getContext = function() {\n                        return _context;\n                    };\n                    this.getContextAttributes = function() {\n                        return _context.getContextAttributes();\n                    };\n                    this.getPixelRatio = function() {\n                        return _pixelRatio;\n                    };\n                    this.setPixelRatio = function(value) {\n                        if (value !== undefined) _pixelRatio = value;\n                    };\n                    this.setSize = function(width, height, updateStyle) {\n                        _canvasWidth = width * _pixelRatio;\n                        _canvasHeight = height * _pixelRatio;\n                        _canvas.width = _canvasWidth;\n                        _canvas.height = _canvasHeight;\n                        _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n                        _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n                        if (updateStyle !== false) {\n                            _canvas.style.width = width + \"px\";\n                            _canvas.style.height = height + \"px\";\n                        }\n                        _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                        _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                        _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                        _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                        _contextGlobalAlpha = 1;\n                        _contextGlobalCompositeOperation = 0;\n                        _contextStrokeStyle = null;\n                        _contextFillStyle = null;\n                        _contextLineWidth = null;\n                        _contextLineCap = null;\n                        _contextLineJoin = null;\n                        this.setViewport(0, 0, width, height);\n                    };\n                    this.setViewport = function(x, y, width, height) {\n                        _viewportX = x * _pixelRatio;\n                        _viewportY = y * _pixelRatio;\n                        _viewportWidth = width * _pixelRatio;\n                        _viewportHeight = height * _pixelRatio;\n                    };\n                    this.setScissor = function() {};\n                    this.setScissorTest = function() {};\n                    this.setClearColor = function(color, alpha) {\n                        _clearColor.set(color);\n                        _clearAlpha = alpha !== undefined ? alpha : 1;\n                        _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                        _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                    };\n                    this.setClearColorHex = function(hex, alpha) {\n                        console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n                        this.setClearColor(hex, alpha);\n                    };\n                    this.getClearColor = function() {\n                        return _clearColor;\n                    };\n                    this.getClearAlpha = function() {\n                        return _clearAlpha;\n                    };\n                    this.getMaxAnisotropy = function() {\n                        return 0;\n                    };\n                    this.clear = function() {\n                        if (_clearBox.isEmpty() === false) {\n                            _clearBox.intersect(_clipBox);\n                            _clearBox.expandByScalar(2);\n                            _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n                            _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n                            _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n                            _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n                            if (_clearAlpha < 1) {\n                                _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                            }\n                            if (_clearAlpha > 0) {\n                                setBlending(THREE.NormalBlending);\n                                setOpacity(1);\n                                setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n                                _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                            }\n                            _clearBox.makeEmpty();\n                        }\n                    };\n                    this.clearColor = function() {};\n                    this.clearDepth = function() {};\n                    this.clearStencil = function() {};\n                    this.render = function(scene, camera) {\n                        if (camera instanceof THREE.Camera === false) {\n                            console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n                            return;\n                        }\n                        if (this.autoClear === true) this.clear();\n                        _this.info.render.vertices = 0;\n                        _this.info.render.faces = 0;\n                        _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n                        _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n                        _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n                        _elements = _renderData.elements;\n                        _lights = _renderData.lights;\n                        _camera = camera;\n                        _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n                        calculateLights();\n                        for (var e = 0, el = _elements.length; e < el; e++) {\n                            var element = _elements[e];\n                            var material = element.material;\n                            if (material === undefined || material.opacity === 0) continue;\n                            _elemBox.makeEmpty();\n                            if (element instanceof THREE.RenderableSprite) {\n                                _v1 = element;\n                                _v1.x *= _canvasWidthHalf;\n                                _v1.y *= _canvasHeightHalf;\n                                renderSprite(_v1, element, material);\n                            } else if (element instanceof THREE.RenderableLine) {\n                                _v1 = element.v1;\n                                _v2 = element.v2;\n                                _v1.positionScreen.x *= _canvasWidthHalf;\n                                _v1.positionScreen.y *= _canvasHeightHalf;\n                                _v2.positionScreen.x *= _canvasWidthHalf;\n                                _v2.positionScreen.y *= _canvasHeightHalf;\n                                _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n                                if (_clipBox.intersectsBox(_elemBox) === true) {\n                                    renderLine(_v1, _v2, element, material);\n                                }\n                            } else if (element instanceof THREE.RenderableFace) {\n                                _v1 = element.v1;\n                                _v2 = element.v2;\n                                _v3 = element.v3;\n                                if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n                                if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n                                if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n                                _v1.positionScreen.x *= _canvasWidthHalf;\n                                _v1.positionScreen.y *= _canvasHeightHalf;\n                                _v2.positionScreen.x *= _canvasWidthHalf;\n                                _v2.positionScreen.y *= _canvasHeightHalf;\n                                _v3.positionScreen.x *= _canvasWidthHalf;\n                                _v3.positionScreen.y *= _canvasHeightHalf;\n                                if (material.overdraw > 0) {\n                                    expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n                                    expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n                                    expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n                                }\n                                _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n                                if (_clipBox.intersectsBox(_elemBox) === true) {\n                                    renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n                                }\n                            }\n                            _clearBox.union(_elemBox);\n                        }\n                        _context.setTransform(1, 0, 0, 1, 0, 0);\n                    };\n                    function calculateLights() {\n                        _ambientLight.setRGB(0, 0, 0);\n                        _directionalLights.setRGB(0, 0, 0);\n                        _pointLights.setRGB(0, 0, 0);\n                        for (var l = 0, ll = _lights.length; l < ll; l++) {\n                            var light = _lights[l];\n                            var lightColor = light.color;\n                            if (light instanceof THREE.AmbientLight) {\n                                _ambientLight.add(lightColor);\n                            } else if (light instanceof THREE.DirectionalLight) {\n                                _directionalLights.add(lightColor);\n                            } else if (light instanceof THREE.PointLight) {\n                                _pointLights.add(lightColor);\n                            }\n                        }\n                    }\n                    function calculateLight(position, normal, color) {\n                        for (var l = 0, ll = _lights.length; l < ll; l++) {\n                            var light = _lights[l];\n                            _lightColor.copy(light.color);\n                            if (light instanceof THREE.DirectionalLight) {\n                                var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n                                var amount = normal.dot(lightPosition);\n                                if (amount <= 0) continue;\n                                amount *= light.intensity;\n                                color.add(_lightColor.multiplyScalar(amount));\n                            } else if (light instanceof THREE.PointLight) {\n                                var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n                                var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n                                if (amount <= 0) continue;\n                                amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n                                if (amount == 0) continue;\n                                amount *= light.intensity;\n                                color.add(_lightColor.multiplyScalar(amount));\n                            }\n                        }\n                    }\n                    function renderSprite(v1, element, material) {\n                        setOpacity(material.opacity);\n                        setBlending(material.blending);\n                        var scaleX = element.scale.x * _canvasWidthHalf;\n                        var scaleY = element.scale.y * _canvasHeightHalf;\n                        var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n                        _elemBox.min.set(v1.x - dist, v1.y - dist);\n                        _elemBox.max.set(v1.x + dist, v1.y + dist);\n                        if (material instanceof THREE.SpriteMaterial) {\n                            var texture = material.map;\n                            if (texture !== null) {\n                                var pattern = _patterns[texture.id];\n                                if (pattern === undefined || pattern.version !== texture.version) {\n                                    pattern = textureToPattern(texture);\n                                    _patterns[texture.id] = pattern;\n                                }\n                                if (pattern.canvas !== undefined) {\n                                    setFillStyle(pattern.canvas);\n                                    var bitmap = texture.image;\n                                    var ox = bitmap.width * texture.offset.x;\n                                    var oy = bitmap.height * texture.offset.y;\n                                    var sx = bitmap.width * texture.repeat.x;\n                                    var sy = bitmap.height * texture.repeat.y;\n                                    var cx = scaleX / sx;\n                                    var cy = scaleY / sy;\n                                    _context.save();\n                                    _context.translate(v1.x, v1.y);\n                                    if (material.rotation !== 0) _context.rotate(material.rotation);\n                                    _context.translate(-scaleX / 2, -scaleY / 2);\n                                    _context.scale(cx, cy);\n                                    _context.translate(-ox, -oy);\n                                    _context.fillRect(ox, oy, sx, sy);\n                                    _context.restore();\n                                }\n                            } else {\n                                setFillStyle(material.color.getStyle());\n                                _context.save();\n                                _context.translate(v1.x, v1.y);\n                                if (material.rotation !== 0) _context.rotate(material.rotation);\n                                _context.scale(scaleX, -scaleY);\n                                _context.fillRect(-.5, -.5, 1, 1);\n                                _context.restore();\n                            }\n                        } else if (material instanceof THREE.SpriteCanvasMaterial) {\n                            setStrokeStyle(material.color.getStyle());\n                            setFillStyle(material.color.getStyle());\n                            _context.save();\n                            _context.translate(v1.x, v1.y);\n                            if (material.rotation !== 0) _context.rotate(material.rotation);\n                            _context.scale(scaleX, scaleY);\n                            material.program(_context);\n                            _context.restore();\n                        }\n                    }\n                    function renderLine(v1, v2, element, material) {\n                        setOpacity(material.opacity);\n                        setBlending(material.blending);\n                        _context.beginPath();\n                        _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n                        _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n                        if (material instanceof THREE.LineBasicMaterial) {\n                            setLineWidth(material.linewidth);\n                            setLineCap(material.linecap);\n                            setLineJoin(material.linejoin);\n                            if (material.vertexColors !== THREE.VertexColors) {\n                                setStrokeStyle(material.color.getStyle());\n                            } else {\n                                var colorStyle1 = element.vertexColors[0].getStyle();\n                                var colorStyle2 = element.vertexColors[1].getStyle();\n                                if (colorStyle1 === colorStyle2) {\n                                    setStrokeStyle(colorStyle1);\n                                } else {\n                                    try {\n                                        var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n                                        grad.addColorStop(0, colorStyle1);\n                                        grad.addColorStop(1, colorStyle2);\n                                    } catch (exception) {\n                                        grad = colorStyle1;\n                                    }\n                                    setStrokeStyle(grad);\n                                }\n                            }\n                            _context.stroke();\n                            _elemBox.expandByScalar(material.linewidth * 2);\n                        } else if (material instanceof THREE.LineDashedMaterial) {\n                            setLineWidth(material.linewidth);\n                            setLineCap(material.linecap);\n                            setLineJoin(material.linejoin);\n                            setStrokeStyle(material.color.getStyle());\n                            setLineDash([ material.dashSize, material.gapSize ]);\n                            _context.stroke();\n                            _elemBox.expandByScalar(material.linewidth * 2);\n                            setLineDash([]);\n                        }\n                    }\n                    function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n                        _this.info.render.vertices += 3;\n                        _this.info.render.faces++;\n                        setOpacity(material.opacity);\n                        setBlending(material.blending);\n                        _v1x = v1.positionScreen.x;\n                        _v1y = v1.positionScreen.y;\n                        _v2x = v2.positionScreen.x;\n                        _v2y = v2.positionScreen.y;\n                        _v3x = v3.positionScreen.x;\n                        _v3y = v3.positionScreen.y;\n                        drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n                        if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n                            _diffuseColor.copy(material.color);\n                            _emissiveColor.copy(material.emissive);\n                            if (material.vertexColors === THREE.FaceColors) {\n                                _diffuseColor.multiply(element.color);\n                            }\n                            _color.copy(_ambientLight);\n                            _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n                            calculateLight(_centroid, element.normalModel, _color);\n                            _color.multiply(_diffuseColor).add(_emissiveColor);\n                            material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                        } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n                            if (material.map !== null) {\n                                var mapping = material.map.mapping;\n                                if (mapping === THREE.UVMapping) {\n                                    _uvs = element.uvs;\n                                    patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n                                }\n                            } else if (material.envMap !== null) {\n                                if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n                                    _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n                                    _uv1x = .5 * _normal.x + .5;\n                                    _uv1y = .5 * _normal.y + .5;\n                                    _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n                                    _uv2x = .5 * _normal.x + .5;\n                                    _uv2y = .5 * _normal.y + .5;\n                                    _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n                                    _uv3x = .5 * _normal.x + .5;\n                                    _uv3y = .5 * _normal.y + .5;\n                                    patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n                                }\n                            } else {\n                                _color.copy(material.color);\n                                if (material.vertexColors === THREE.FaceColors) {\n                                    _color.multiply(element.color);\n                                }\n                                material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                            }\n                        } else if (material instanceof THREE.MeshNormalMaterial) {\n                            _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n                            _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n                            material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                        } else {\n                            _color.setRGB(1, 1, 1);\n                            material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                        }\n                    }\n                    function drawTriangle(x0, y0, x1, y1, x2, y2) {\n                        _context.beginPath();\n                        _context.moveTo(x0, y0);\n                        _context.lineTo(x1, y1);\n                        _context.lineTo(x2, y2);\n                        _context.closePath();\n                    }\n                    function strokePath(color, linewidth, linecap, linejoin) {\n                        setLineWidth(linewidth);\n                        setLineCap(linecap);\n                        setLineJoin(linejoin);\n                        setStrokeStyle(color.getStyle());\n                        _context.stroke();\n                        _elemBox.expandByScalar(linewidth * 2);\n                    }\n                    function fillPath(color) {\n                        setFillStyle(color.getStyle());\n                        _context.fill();\n                    }\n                    function textureToPattern(texture) {\n                        if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n                            return {\n                                canvas: undefined,\n                                version: texture.version\n                            };\n                        }\n                        var image = texture.image;\n                        if (image.complete === false) {\n                            return {\n                                canvas: undefined,\n                                version: 0\n                            };\n                        }\n                        var canvas = document.createElement(\"canvas\");\n                        canvas.width = image.width;\n                        canvas.height = image.height;\n                        var context = canvas.getContext(\"2d\");\n                        context.setTransform(1, 0, 0, -1, 0, image.height);\n                        context.drawImage(image, 0, 0);\n                        var repeatX = texture.wrapS === THREE.RepeatWrapping;\n                        var repeatY = texture.wrapT === THREE.RepeatWrapping;\n                        var repeat = \"no-repeat\";\n                        if (repeatX === true && repeatY === true) {\n                            repeat = \"repeat\";\n                        } else if (repeatX === true) {\n                            repeat = \"repeat-x\";\n                        } else if (repeatY === true) {\n                            repeat = \"repeat-y\";\n                        }\n                        var pattern = _context.createPattern(canvas, repeat);\n                        if (texture.onUpdate) texture.onUpdate(texture);\n                        return {\n                            canvas: pattern,\n                            version: texture.version\n                        };\n                    }\n                    function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n                        var pattern = _patterns[texture.id];\n                        if (pattern === undefined || pattern.version !== texture.version) {\n                            pattern = textureToPattern(texture);\n                            _patterns[texture.id] = pattern;\n                        }\n                        if (pattern.canvas !== undefined) {\n                            setFillStyle(pattern.canvas);\n                        } else {\n                            setFillStyle(\"rgba( 0, 0, 0, 1)\");\n                            _context.fill();\n                            return;\n                        }\n                        var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n                        u0 = (u0 + offsetX) * width;\n                        v0 = (v0 + offsetY) * height;\n                        u1 = (u1 + offsetX) * width;\n                        v1 = (v1 + offsetY) * height;\n                        u2 = (u2 + offsetX) * width;\n                        v2 = (v2 + offsetY) * height;\n                        x1 -= x0;\n                        y1 -= y0;\n                        x2 -= x0;\n                        y2 -= y0;\n                        u1 -= u0;\n                        v1 -= v0;\n                        u2 -= u0;\n                        v2 -= v0;\n                        det = u1 * v2 - u2 * v1;\n                        if (det === 0) return;\n                        idet = 1 / det;\n                        a = (v2 * x1 - v1 * x2) * idet;\n                        b = (v2 * y1 - v1 * y2) * idet;\n                        c = (u1 * x2 - u2 * x1) * idet;\n                        d = (u1 * y2 - u2 * y1) * idet;\n                        e = x0 - a * u0 - c * v0;\n                        f = y0 - b * u0 - d * v0;\n                        _context.save();\n                        _context.transform(a, b, c, d, e, f);\n                        _context.fill();\n                        _context.restore();\n                    }\n                    function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n                        var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n                        u0 *= width;\n                        v0 *= height;\n                        u1 *= width;\n                        v1 *= height;\n                        u2 *= width;\n                        v2 *= height;\n                        x1 -= x0;\n                        y1 -= y0;\n                        x2 -= x0;\n                        y2 -= y0;\n                        u1 -= u0;\n                        v1 -= v0;\n                        u2 -= u0;\n                        v2 -= v0;\n                        det = u1 * v2 - u2 * v1;\n                        idet = 1 / det;\n                        a = (v2 * x1 - v1 * x2) * idet;\n                        b = (v2 * y1 - v1 * y2) * idet;\n                        c = (u1 * x2 - u2 * x1) * idet;\n                        d = (u1 * y2 - u2 * y1) * idet;\n                        e = x0 - a * u0 - c * v0;\n                        f = y0 - b * u0 - d * v0;\n                        _context.save();\n                        _context.transform(a, b, c, d, e, f);\n                        _context.clip();\n                        _context.drawImage(image, 0, 0);\n                        _context.restore();\n                    }\n                    function expand(v1, v2, pixels) {\n                        var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n                        if (det === 0) return;\n                        idet = pixels / Math.sqrt(det);\n                        x *= idet;\n                        y *= idet;\n                        v2.x += x;\n                        v2.y += y;\n                        v1.x -= x;\n                        v1.y -= y;\n                    }\n                    function setOpacity(value) {\n                        if (_contextGlobalAlpha !== value) {\n                            _context.globalAlpha = value;\n                            _contextGlobalAlpha = value;\n                        }\n                    }\n                    function setBlending(value) {\n                        if (_contextGlobalCompositeOperation !== value) {\n                            if (value === THREE.NormalBlending) {\n                                _context.globalCompositeOperation = \"source-over\";\n                            } else if (value === THREE.AdditiveBlending) {\n                                _context.globalCompositeOperation = \"lighter\";\n                            } else if (value === THREE.SubtractiveBlending) {\n                                _context.globalCompositeOperation = \"darker\";\n                            }\n                            _contextGlobalCompositeOperation = value;\n                        }\n                    }\n                    function setLineWidth(value) {\n                        if (_contextLineWidth !== value) {\n                            _context.lineWidth = value;\n                            _contextLineWidth = value;\n                        }\n                    }\n                    function setLineCap(value) {\n                        if (_contextLineCap !== value) {\n                            _context.lineCap = value;\n                            _contextLineCap = value;\n                        }\n                    }\n                    function setLineJoin(value) {\n                        if (_contextLineJoin !== value) {\n                            _context.lineJoin = value;\n                            _contextLineJoin = value;\n                        }\n                    }\n                    function setStrokeStyle(value) {\n                        if (_contextStrokeStyle !== value) {\n                            _context.strokeStyle = value;\n                            _contextStrokeStyle = value;\n                        }\n                    }\n                    function setFillStyle(value) {\n                        if (_contextFillStyle !== value) {\n                            _context.fillStyle = value;\n                            _contextFillStyle = value;\n                        }\n                    }\n                    function setLineDash(value) {\n                        if (_contextLineDash.length !== value.length) {\n                            _context.setLineDash(value);\n                            _contextLineDash = value;\n                        }\n                    }\n                };\n            }, function(module, exports) {\n                THREE.RenderableObject = function() {\n                    this.id = 0;\n                    this.object = null;\n                    this.z = 0;\n                    this.renderOrder = 0;\n                };\n                THREE.RenderableFace = function() {\n                    this.id = 0;\n                    this.v1 = new THREE.RenderableVertex();\n                    this.v2 = new THREE.RenderableVertex();\n                    this.v3 = new THREE.RenderableVertex();\n                    this.normalModel = new THREE.Vector3();\n                    this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n                    this.vertexNormalsLength = 0;\n                    this.color = new THREE.Color();\n                    this.material = null;\n                    this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n                    this.z = 0;\n                    this.renderOrder = 0;\n                };\n                THREE.RenderableVertex = function() {\n                    this.position = new THREE.Vector3();\n                    this.positionWorld = new THREE.Vector3();\n                    this.positionScreen = new THREE.Vector4();\n                    this.visible = true;\n                };\n                THREE.RenderableVertex.prototype.copy = function(vertex) {\n                    this.positionWorld.copy(vertex.positionWorld);\n                    this.positionScreen.copy(vertex.positionScreen);\n                };\n                THREE.RenderableLine = function() {\n                    this.id = 0;\n                    this.v1 = new THREE.RenderableVertex();\n                    this.v2 = new THREE.RenderableVertex();\n                    this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n                    this.material = null;\n                    this.z = 0;\n                    this.renderOrder = 0;\n                };\n                THREE.RenderableSprite = function() {\n                    this.id = 0;\n                    this.object = null;\n                    this.x = 0;\n                    this.y = 0;\n                    this.z = 0;\n                    this.rotation = 0;\n                    this.scale = new THREE.Vector2();\n                    this.material = null;\n                    this.renderOrder = 0;\n                };\n                THREE.Projector = function() {\n                    var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n                        objects: [],\n                        lights: [],\n                        elements: []\n                    }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n                    this.projectVector = function(vector, camera) {\n                        console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n                        vector.project(camera);\n                    };\n                    this.unprojectVector = function(vector, camera) {\n                        console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n                        vector.unproject(camera);\n                    };\n                    this.pickingRay = function(vector, camera) {\n                        console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n                    };\n                    var RenderList = function() {\n                        var normals = [];\n                        var uvs = [];\n                        var object = null;\n                        var material = null;\n                        var normalMatrix = new THREE.Matrix3();\n                        function setObject(value) {\n                            object = value;\n                            material = object.material;\n                            normalMatrix.getNormalMatrix(object.matrixWorld);\n                            normals.length = 0;\n                            uvs.length = 0;\n                        }\n                        function projectVertex(vertex) {\n                            var position = vertex.position;\n                            var positionWorld = vertex.positionWorld;\n                            var positionScreen = vertex.positionScreen;\n                            positionWorld.copy(position).applyMatrix4(_modelMatrix);\n                            positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n                            var invW = 1 / positionScreen.w;\n                            positionScreen.x *= invW;\n                            positionScreen.y *= invW;\n                            positionScreen.z *= invW;\n                            vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n                        }\n                        function pushVertex(x, y, z) {\n                            _vertex = getNextVertexInPool();\n                            _vertex.position.set(x, y, z);\n                            projectVertex(_vertex);\n                        }\n                        function pushNormal(x, y, z) {\n                            normals.push(x, y, z);\n                        }\n                        function pushUv(x, y) {\n                            uvs.push(x, y);\n                        }\n                        function checkTriangleVisibility(v1, v2, v3) {\n                            if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n                            _points3[0] = v1.positionScreen;\n                            _points3[1] = v2.positionScreen;\n                            _points3[2] = v3.positionScreen;\n                            return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n                        }\n                        function checkBackfaceCulling(v1, v2, v3) {\n                            return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n                        }\n                        function pushLine(a, b) {\n                            var v1 = _vertexPool[a];\n                            var v2 = _vertexPool[b];\n                            _line = getNextLineInPool();\n                            _line.id = object.id;\n                            _line.v1.copy(v1);\n                            _line.v2.copy(v2);\n                            _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n                            _line.renderOrder = object.renderOrder;\n                            _line.material = object.material;\n                            _renderData.elements.push(_line);\n                        }\n                        function pushTriangle(a, b, c) {\n                            var v1 = _vertexPool[a];\n                            var v2 = _vertexPool[b];\n                            var v3 = _vertexPool[c];\n                            if (checkTriangleVisibility(v1, v2, v3) === false) return;\n                            if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n                                _face = getNextFaceInPool();\n                                _face.id = object.id;\n                                _face.v1.copy(v1);\n                                _face.v2.copy(v2);\n                                _face.v3.copy(v3);\n                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                                _face.renderOrder = object.renderOrder;\n                                _face.normalModel.fromArray(normals, a * 3);\n                                _face.normalModel.applyMatrix3(normalMatrix).normalize();\n                                for (var i = 0; i < 3; i++) {\n                                    var normal = _face.vertexNormalsModel[i];\n                                    normal.fromArray(normals, arguments[i] * 3);\n                                    normal.applyMatrix3(normalMatrix).normalize();\n                                    var uv = _face.uvs[i];\n                                    uv.fromArray(uvs, arguments[i] * 2);\n                                }\n                                _face.vertexNormalsLength = 3;\n                                _face.material = object.material;\n                                _renderData.elements.push(_face);\n                            }\n                        }\n                        return {\n                            setObject: setObject,\n                            projectVertex: projectVertex,\n                            checkTriangleVisibility: checkTriangleVisibility,\n                            checkBackfaceCulling: checkBackfaceCulling,\n                            pushVertex: pushVertex,\n                            pushNormal: pushNormal,\n                            pushUv: pushUv,\n                            pushLine: pushLine,\n                            pushTriangle: pushTriangle\n                        };\n                    };\n                    var renderList = new RenderList();\n                    this.projectScene = function(scene, camera, sortObjects, sortElements) {\n                        _faceCount = 0;\n                        _lineCount = 0;\n                        _spriteCount = 0;\n                        _renderData.elements.length = 0;\n                        if (scene.autoUpdate === true) scene.updateMatrixWorld();\n                        if (camera.parent === null) camera.updateMatrixWorld();\n                        _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n                        _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n                        _frustum.setFromMatrix(_viewProjectionMatrix);\n                        _objectCount = 0;\n                        _renderData.objects.length = 0;\n                        _renderData.lights.length = 0;\n                        scene.traverseVisible(function(object) {\n                            if (object instanceof THREE.Light) {\n                                _renderData.lights.push(object);\n                            } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n                                var material = object.material;\n                                if (material.visible === false) return;\n                                if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n                                    _object = getNextObjectInPool();\n                                    _object.id = object.id;\n                                    _object.object = object;\n                                    _vector3.setFromMatrixPosition(object.matrixWorld);\n                                    _vector3.applyProjection(_viewProjectionMatrix);\n                                    _object.z = _vector3.z;\n                                    _object.renderOrder = object.renderOrder;\n                                    _renderData.objects.push(_object);\n                                }\n                            }\n                        });\n                        if (sortObjects === true) {\n                            _renderData.objects.sort(painterSort);\n                        }\n                        for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n                            var object = _renderData.objects[o].object;\n                            var geometry = object.geometry;\n                            renderList.setObject(object);\n                            _modelMatrix = object.matrixWorld;\n                            _vertexCount = 0;\n                            if (object instanceof THREE.Mesh) {\n                                if (geometry instanceof THREE.BufferGeometry) {\n                                    var attributes = geometry.attributes;\n                                    var groups = geometry.groups;\n                                    if (attributes.position === undefined) continue;\n                                    var positions = attributes.position.array;\n                                    for (var i = 0, l = positions.length; i < l; i += 3) {\n                                        renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                                    }\n                                    if (attributes.normal !== undefined) {\n                                        var normals = attributes.normal.array;\n                                        for (var i = 0, l = normals.length; i < l; i += 3) {\n                                            renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n                                        }\n                                    }\n                                    if (attributes.uv !== undefined) {\n                                        var uvs = attributes.uv.array;\n                                        for (var i = 0, l = uvs.length; i < l; i += 2) {\n                                            renderList.pushUv(uvs[i], uvs[i + 1]);\n                                        }\n                                    }\n                                    if (geometry.index !== null) {\n                                        var indices = geometry.index.array;\n                                        if (groups.length > 0) {\n                                            for (var o = 0; o < groups.length; o++) {\n                                                var group = groups[o];\n                                                for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                                                    renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                                }\n                                            }\n                                        } else {\n                                            for (var i = 0, l = indices.length; i < l; i += 3) {\n                                                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                            }\n                                        }\n                                    } else {\n                                        for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                                            renderList.pushTriangle(i, i + 1, i + 2);\n                                        }\n                                    }\n                                } else if (geometry instanceof THREE.Geometry) {\n                                    var vertices = geometry.vertices;\n                                    var faces = geometry.faces;\n                                    var faceVertexUvs = geometry.faceVertexUvs[0];\n                                    _normalMatrix.getNormalMatrix(_modelMatrix);\n                                    var material = object.material;\n                                    var isFaceMaterial = material instanceof THREE.MultiMaterial;\n                                    var objectMaterials = isFaceMaterial === true ? object.material : null;\n                                    for (var v = 0, vl = vertices.length; v < vl; v++) {\n                                        var vertex = vertices[v];\n                                        _vector3.copy(vertex);\n                                        if (material.morphTargets === true) {\n                                            var morphTargets = geometry.morphTargets;\n                                            var morphInfluences = object.morphTargetInfluences;\n                                            for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                                                var influence = morphInfluences[t];\n                                                if (influence === 0) continue;\n                                                var target = morphTargets[t];\n                                                var targetVertex = target.vertices[v];\n                                                _vector3.x += (targetVertex.x - vertex.x) * influence;\n                                                _vector3.y += (targetVertex.y - vertex.y) * influence;\n                                                _vector3.z += (targetVertex.z - vertex.z) * influence;\n                                            }\n                                        }\n                                        renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n                                    }\n                                    for (var f = 0, fl = faces.length; f < fl; f++) {\n                                        var face = faces[f];\n                                        material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n                                        if (material === undefined) continue;\n                                        var side = material.side;\n                                        var v1 = _vertexPool[face.a];\n                                        var v2 = _vertexPool[face.b];\n                                        var v3 = _vertexPool[face.c];\n                                        if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n                                        var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n                                        if (side !== THREE.DoubleSide) {\n                                            if (side === THREE.FrontSide && visible === false) continue;\n                                            if (side === THREE.BackSide && visible === true) continue;\n                                        }\n                                        _face = getNextFaceInPool();\n                                        _face.id = object.id;\n                                        _face.v1.copy(v1);\n                                        _face.v2.copy(v2);\n                                        _face.v3.copy(v3);\n                                        _face.normalModel.copy(face.normal);\n                                        if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                            _face.normalModel.negate();\n                                        }\n                                        _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n                                        var faceVertexNormals = face.vertexNormals;\n                                        for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n                                            var normalModel = _face.vertexNormalsModel[n];\n                                            normalModel.copy(faceVertexNormals[n]);\n                                            if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                                normalModel.negate();\n                                            }\n                                            normalModel.applyMatrix3(_normalMatrix).normalize();\n                                        }\n                                        _face.vertexNormalsLength = faceVertexNormals.length;\n                                        var vertexUvs = faceVertexUvs[f];\n                                        if (vertexUvs !== undefined) {\n                                            for (var u = 0; u < 3; u++) {\n                                                _face.uvs[u].copy(vertexUvs[u]);\n                                            }\n                                        }\n                                        _face.color = face.color;\n                                        _face.material = material;\n                                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                                        _face.renderOrder = object.renderOrder;\n                                        _renderData.elements.push(_face);\n                                    }\n                                }\n                            } else if (object instanceof THREE.Line) {\n                                if (geometry instanceof THREE.BufferGeometry) {\n                                    var attributes = geometry.attributes;\n                                    if (attributes.position !== undefined) {\n                                        var positions = attributes.position.array;\n                                        for (var i = 0, l = positions.length; i < l; i += 3) {\n                                            renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                                        }\n                                        if (geometry.index !== null) {\n                                            var indices = geometry.index.array;\n                                            for (var i = 0, l = indices.length; i < l; i += 2) {\n                                                renderList.pushLine(indices[i], indices[i + 1]);\n                                            }\n                                        } else {\n                                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n                                            for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                                                renderList.pushLine(i, i + 1);\n                                            }\n                                        }\n                                    }\n                                } else if (geometry instanceof THREE.Geometry) {\n                                    _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n                                    var vertices = object.geometry.vertices;\n                                    if (vertices.length === 0) continue;\n                                    v1 = getNextVertexInPool();\n                                    v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n                                    for (var v = 1, vl = vertices.length; v < vl; v++) {\n                                        v1 = getNextVertexInPool();\n                                        v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n                                        if ((v + 1) % step > 0) continue;\n                                        v2 = _vertexPool[_vertexCount - 2];\n                                        _clippedVertex1PositionScreen.copy(v1.positionScreen);\n                                        _clippedVertex2PositionScreen.copy(v2.positionScreen);\n                                        if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n                                            _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n                                            _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n                                            _line = getNextLineInPool();\n                                            _line.id = object.id;\n                                            _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n                                            _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n                                            _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n                                            _line.renderOrder = object.renderOrder;\n                                            _line.material = object.material;\n                                            if (object.material.vertexColors === THREE.VertexColors) {\n                                                _line.vertexColors[0].copy(object.geometry.colors[v]);\n                                                _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                                            }\n                                            _renderData.elements.push(_line);\n                                        }\n                                    }\n                                }\n                            } else if (object instanceof THREE.Sprite) {\n                                _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n                                _vector4.applyMatrix4(_viewProjectionMatrix);\n                                var invW = 1 / _vector4.w;\n                                _vector4.z *= invW;\n                                if (_vector4.z >= -1 && _vector4.z <= 1) {\n                                    _sprite = getNextSpriteInPool();\n                                    _sprite.id = object.id;\n                                    _sprite.x = _vector4.x * invW;\n                                    _sprite.y = _vector4.y * invW;\n                                    _sprite.z = _vector4.z;\n                                    _sprite.renderOrder = object.renderOrder;\n                                    _sprite.object = object;\n                                    _sprite.rotation = object.rotation;\n                                    _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n                                    _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n                                    _sprite.material = object.material;\n                                    _renderData.elements.push(_sprite);\n                                }\n                            }\n                        }\n                        if (sortElements === true) {\n                            _renderData.elements.sort(painterSort);\n                        }\n                        return _renderData;\n                    };\n                    function getNextObjectInPool() {\n                        if (_objectCount === _objectPoolLength) {\n                            var object = new THREE.RenderableObject();\n                            _objectPool.push(object);\n                            _objectPoolLength++;\n                            _objectCount++;\n                            return object;\n                        }\n                        return _objectPool[_objectCount++];\n                    }\n                    function getNextVertexInPool() {\n                        if (_vertexCount === _vertexPoolLength) {\n                            var vertex = new THREE.RenderableVertex();\n                            _vertexPool.push(vertex);\n                            _vertexPoolLength++;\n                            _vertexCount++;\n                            return vertex;\n                        }\n                        return _vertexPool[_vertexCount++];\n                    }\n                    function getNextFaceInPool() {\n                        if (_faceCount === _facePoolLength) {\n                            var face = new THREE.RenderableFace();\n                            _facePool.push(face);\n                            _facePoolLength++;\n                            _faceCount++;\n                            return face;\n                        }\n                        return _facePool[_faceCount++];\n                    }\n                    function getNextLineInPool() {\n                        if (_lineCount === _linePoolLength) {\n                            var line = new THREE.RenderableLine();\n                            _linePool.push(line);\n                            _linePoolLength++;\n                            _lineCount++;\n                            return line;\n                        }\n                        return _linePool[_lineCount++];\n                    }\n                    function getNextSpriteInPool() {\n                        if (_spriteCount === _spritePoolLength) {\n                            var sprite = new THREE.RenderableSprite();\n                            _spritePool.push(sprite);\n                            _spritePoolLength++;\n                            _spriteCount++;\n                            return sprite;\n                        }\n                        return _spritePool[_spriteCount++];\n                    }\n                    function painterSort(a, b) {\n                        if (a.renderOrder !== b.renderOrder) {\n                            return a.renderOrder - b.renderOrder;\n                        } else if (a.z !== b.z) {\n                            return b.z - a.z;\n                        } else if (a.id !== b.id) {\n                            return a.id - b.id;\n                        } else {\n                            return 0;\n                        }\n                    }\n                    function clipLine(s1, s2) {\n                        var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n                        if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n                            return true;\n                        } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n                            return false;\n                        } else {\n                            if (bc1near < 0) {\n                                alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n                            } else if (bc2near < 0) {\n                                alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n                            }\n                            if (bc1far < 0) {\n                                alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n                            } else if (bc2far < 0) {\n                                alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n                            }\n                            if (alpha2 < alpha1) {\n                                return false;\n                            } else {\n                                s1.lerp(s2, alpha1);\n                                s2.lerp(s1, 1 - alpha2);\n                                return true;\n                            }\n                        }\n                    }\n                };\n            }, function(module, exports, __webpack_require__) {\n                /*!\n\t\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n                \"use strict\";\n                var isObject = __webpack_require__(8);\n                function isObjectObject(o) {\n                    return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n                }\n                module.exports = function isPlainObject(o) {\n                    var ctor, prot;\n                    if (isObjectObject(o) === false) return false;\n                    ctor = o.constructor;\n                    if (typeof ctor !== \"function\") return false;\n                    prot = ctor.prototype;\n                    if (isObjectObject(prot) === false) return false;\n                    if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n                        return false;\n                    }\n                    return true;\n                };\n            }, function(module, exports) {\n                /*!\n\t\t * isobject <https://github.com/jonschlinkert/isobject>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n                \"use strict\";\n                module.exports = function isObject(val) {\n                    return val != null && typeof val === \"object\" && !Array.isArray(val);\n                };\n            }, function(module, exports, __webpack_require__) {\n                var __WEBPACK_AMD_DEFINE_RESULT__;\n                !function(undefined) {\n                    var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n                        return Object.prototype.toString.call(obj) === \"[object Array]\";\n                    };\n                    var defaultMaxListeners = 10;\n                    function init() {\n                        this._events = {};\n                        if (this._conf) {\n                            configure.call(this, this._conf);\n                        }\n                    }\n                    function configure(conf) {\n                        if (conf) {\n                            this._conf = conf;\n                            conf.delimiter && (this.delimiter = conf.delimiter);\n                            conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n                            conf.wildcard && (this.wildcard = conf.wildcard);\n                            conf.newListener && (this.newListener = conf.newListener);\n                            if (this.wildcard) {\n                                this.listenerTree = {};\n                            }\n                        }\n                    }\n                    function EventEmitter(conf) {\n                        this._events = {};\n                        this.newListener = false;\n                        configure.call(this, conf);\n                    }\n                    function searchListenerTree(handlers, type, tree, i) {\n                        if (!tree) {\n                            return [];\n                        }\n                        var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n                        if (i === typeLength && tree._listeners) {\n                            if (typeof tree._listeners === \"function\") {\n                                handlers && handlers.push(tree._listeners);\n                                return [ tree ];\n                            } else {\n                                for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n                                    handlers && handlers.push(tree._listeners[leaf]);\n                                }\n                                return [ tree ];\n                            }\n                        }\n                        if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n                            if (currentType === \"*\") {\n                                for (branch in tree) {\n                                    if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n                                    }\n                                }\n                                return listeners;\n                            } else if (currentType === \"**\") {\n                                endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n                                if (endReached && tree._listeners) {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n                                }\n                                for (branch in tree) {\n                                    if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                        if (branch === \"*\" || branch === \"**\") {\n                                            if (tree[branch]._listeners && !endReached) {\n                                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n                                            }\n                                            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                        } else if (branch === nextType) {\n                                            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n                                        } else {\n                                            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                        }\n                                    }\n                                }\n                                return listeners;\n                            }\n                            listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n                        }\n                        xTree = tree[\"*\"];\n                        if (xTree) {\n                            searchListenerTree(handlers, type, xTree, i + 1);\n                        }\n                        xxTree = tree[\"**\"];\n                        if (xxTree) {\n                            if (i < typeLength) {\n                                if (xxTree._listeners) {\n                                    searchListenerTree(handlers, type, xxTree, typeLength);\n                                }\n                                for (branch in xxTree) {\n                                    if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n                                        if (branch === nextType) {\n                                            searchListenerTree(handlers, type, xxTree[branch], i + 2);\n                                        } else if (branch === currentType) {\n                                            searchListenerTree(handlers, type, xxTree[branch], i + 1);\n                                        } else {\n                                            isolatedBranch = {};\n                                            isolatedBranch[branch] = xxTree[branch];\n                                            searchListenerTree(handlers, type, {\n                                                \"**\": isolatedBranch\n                                            }, i + 1);\n                                        }\n                                    }\n                                }\n                            } else if (xxTree._listeners) {\n                                searchListenerTree(handlers, type, xxTree, typeLength);\n                            } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n                                searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n                            }\n                        }\n                        return listeners;\n                    }\n                    function growListenerTree(type, listener) {\n                        type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                        for (var i = 0, len = type.length; i + 1 < len; i++) {\n                            if (type[i] === \"**\" && type[i + 1] === \"**\") {\n                                return;\n                            }\n                        }\n                        var tree = this.listenerTree;\n                        var name = type.shift();\n                        while (name) {\n                            if (!tree[name]) {\n                                tree[name] = {};\n                            }\n                            tree = tree[name];\n                            if (type.length === 0) {\n                                if (!tree._listeners) {\n                                    tree._listeners = listener;\n                                } else if (typeof tree._listeners === \"function\") {\n                                    tree._listeners = [ tree._listeners, listener ];\n                                } else if (isArray(tree._listeners)) {\n                                    tree._listeners.push(listener);\n                                    if (!tree._listeners.warned) {\n                                        var m = defaultMaxListeners;\n                                        if (typeof this._events.maxListeners !== \"undefined\") {\n                                            m = this._events.maxListeners;\n                                        }\n                                        if (m > 0 && tree._listeners.length > m) {\n                                            tree._listeners.warned = true;\n                                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n                                            console.trace();\n                                        }\n                                    }\n                                }\n                                return true;\n                            }\n                            name = type.shift();\n                        }\n                        return true;\n                    }\n                    EventEmitter.prototype.delimiter = \".\";\n                    EventEmitter.prototype.setMaxListeners = function(n) {\n                        this._events || init.call(this);\n                        this._events.maxListeners = n;\n                        if (!this._conf) this._conf = {};\n                        this._conf.maxListeners = n;\n                    };\n                    EventEmitter.prototype.event = \"\";\n                    EventEmitter.prototype.once = function(event, fn) {\n                        this.many(event, 1, fn);\n                        return this;\n                    };\n                    EventEmitter.prototype.many = function(event, ttl, fn) {\n                        var self = this;\n                        if (typeof fn !== \"function\") {\n                            throw new Error(\"many only accepts instances of Function\");\n                        }\n                        function listener() {\n                            if (--ttl === 0) {\n                                self.off(event, listener);\n                            }\n                            fn.apply(this, arguments);\n                        }\n                        listener._origin = fn;\n                        this.on(event, listener);\n                        return self;\n                    };\n                    EventEmitter.prototype.emit = function() {\n                        this._events || init.call(this);\n                        var type = arguments[0];\n                        if (type === \"newListener\" && !this.newListener) {\n                            if (!this._events.newListener) {\n                                return false;\n                            }\n                        }\n                        if (this._all) {\n                            var l = arguments.length;\n                            var args = new Array(l - 1);\n                            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                            for (i = 0, l = this._all.length; i < l; i++) {\n                                this.event = type;\n                                this._all[i].apply(this, args);\n                            }\n                        }\n                        if (type === \"error\") {\n                            if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n                                if (arguments[1] instanceof Error) {\n                                    throw arguments[1];\n                                } else {\n                                    throw new Error(\"Uncaught, unspecified 'error' event.\");\n                                }\n                                return false;\n                            }\n                        }\n                        var handler;\n                        if (this.wildcard) {\n                            handler = [];\n                            var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                            searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n                        } else {\n                            handler = this._events[type];\n                        }\n                        if (typeof handler === \"function\") {\n                            this.event = type;\n                            if (arguments.length === 1) {\n                                handler.call(this);\n                            } else if (arguments.length > 1) switch (arguments.length) {\n                              case 2:\n                                handler.call(this, arguments[1]);\n                                break;\n\n                              case 3:\n                                handler.call(this, arguments[1], arguments[2]);\n                                break;\n\n                              default:\n                                var l = arguments.length;\n                                var args = new Array(l - 1);\n                                for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                                handler.apply(this, args);\n                            }\n                            return true;\n                        } else if (handler) {\n                            var l = arguments.length;\n                            var args = new Array(l - 1);\n                            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                            var listeners = handler.slice();\n                            for (var i = 0, l = listeners.length; i < l; i++) {\n                                this.event = type;\n                                listeners[i].apply(this, args);\n                            }\n                            return listeners.length > 0 || !!this._all;\n                        } else {\n                            return !!this._all;\n                        }\n                    };\n                    EventEmitter.prototype.on = function(type, listener) {\n                        if (typeof type === \"function\") {\n                            this.onAny(type);\n                            return this;\n                        }\n                        if (typeof listener !== \"function\") {\n                            throw new Error(\"on only accepts instances of Function\");\n                        }\n                        this._events || init.call(this);\n                        this.emit(\"newListener\", type, listener);\n                        if (this.wildcard) {\n                            growListenerTree.call(this, type, listener);\n                            return this;\n                        }\n                        if (!this._events[type]) {\n                            this._events[type] = listener;\n                        } else if (typeof this._events[type] === \"function\") {\n                            this._events[type] = [ this._events[type], listener ];\n                        } else if (isArray(this._events[type])) {\n                            this._events[type].push(listener);\n                            if (!this._events[type].warned) {\n                                var m = defaultMaxListeners;\n                                if (typeof this._events.maxListeners !== \"undefined\") {\n                                    m = this._events.maxListeners;\n                                }\n                                if (m > 0 && this._events[type].length > m) {\n                                    this._events[type].warned = true;\n                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n                                    console.trace();\n                                }\n                            }\n                        }\n                        return this;\n                    };\n                    EventEmitter.prototype.onAny = function(fn) {\n                        if (typeof fn !== \"function\") {\n                            throw new Error(\"onAny only accepts instances of Function\");\n                        }\n                        if (!this._all) {\n                            this._all = [];\n                        }\n                        this._all.push(fn);\n                        return this;\n                    };\n                    EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n                    EventEmitter.prototype.off = function(type, listener) {\n                        if (typeof listener !== \"function\") {\n                            throw new Error(\"removeListener only takes instances of Function\");\n                        }\n                        var handlers, leafs = [];\n                        if (this.wildcard) {\n                            var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                            leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                        } else {\n                            if (!this._events[type]) return this;\n                            handlers = this._events[type];\n                            leafs.push({\n                                _listeners: handlers\n                            });\n                        }\n                        for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                            var leaf = leafs[iLeaf];\n                            handlers = leaf._listeners;\n                            if (isArray(handlers)) {\n                                var position = -1;\n                                for (var i = 0, length = handlers.length; i < length; i++) {\n                                    if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n                                        position = i;\n                                        break;\n                                    }\n                                }\n                                if (position < 0) {\n                                    continue;\n                                }\n                                if (this.wildcard) {\n                                    leaf._listeners.splice(position, 1);\n                                } else {\n                                    this._events[type].splice(position, 1);\n                                }\n                                if (handlers.length === 0) {\n                                    if (this.wildcard) {\n                                        delete leaf._listeners;\n                                    } else {\n                                        delete this._events[type];\n                                    }\n                                }\n                                return this;\n                            } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n                                if (this.wildcard) {\n                                    delete leaf._listeners;\n                                } else {\n                                    delete this._events[type];\n                                }\n                            }\n                        }\n                        return this;\n                    };\n                    EventEmitter.prototype.offAny = function(fn) {\n                        var i = 0, l = 0, fns;\n                        if (fn && this._all && this._all.length > 0) {\n                            fns = this._all;\n                            for (i = 0, l = fns.length; i < l; i++) {\n                                if (fn === fns[i]) {\n                                    fns.splice(i, 1);\n                                    return this;\n                                }\n                            }\n                        } else {\n                            this._all = [];\n                        }\n                        return this;\n                    };\n                    EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n                    EventEmitter.prototype.removeAllListeners = function(type) {\n                        if (arguments.length === 0) {\n                            !this._events || init.call(this);\n                            return this;\n                        }\n                        if (this.wildcard) {\n                            var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                            var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                            for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                                var leaf = leafs[iLeaf];\n                                leaf._listeners = null;\n                            }\n                        } else {\n                            if (!this._events[type]) return this;\n                            this._events[type] = null;\n                        }\n                        return this;\n                    };\n                    EventEmitter.prototype.listeners = function(type) {\n                        if (this.wildcard) {\n                            var handlers = [];\n                            var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                            searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n                            return handlers;\n                        }\n                        this._events || init.call(this);\n                        if (!this._events[type]) this._events[type] = [];\n                        if (!isArray(this._events[type])) {\n                            this._events[type] = [ this._events[type] ];\n                        }\n                        return this._events[type];\n                    };\n                    EventEmitter.prototype.listenersAny = function() {\n                        if (this._all) {\n                            return this._all;\n                        } else {\n                            return [];\n                        }\n                    };\n                    if (true) {\n                        !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n                            return EventEmitter;\n                        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n                    } else if (typeof exports === \"object\") {\n                        exports.EventEmitter2 = EventEmitter;\n                    } else {\n                        window.EventEmitter2 = EventEmitter;\n                    }\n                }();\n            }, function(module, exports) {\n                module.exports = {\n                    Promise: window[\"Promise\"]\n                };\n            }, function(module, exports) {\n                (function() {\n                    var ResizeSensor = function(element, callback) {\n                        function EventQueue() {\n                            this.q = [];\n                            this.add = function(ev) {\n                                this.q.push(ev);\n                            };\n                            var i, j;\n                            this.call = function() {\n                                for (i = 0, j = this.q.length; i < j; i++) {\n                                    this.q[i].call();\n                                }\n                            };\n                        }\n                        function getComputedStyle(element, prop) {\n                            if (element.currentStyle) {\n                                return element.currentStyle[prop];\n                            } else if (window.getComputedStyle) {\n                                return window.getComputedStyle(element, null).getPropertyValue(prop);\n                            } else {\n                                return element.style[prop];\n                            }\n                        }\n                        function attachResizeEvent(element, resized) {\n                            if (!element.resizedAttached) {\n                                element.resizedAttached = new EventQueue();\n                                element.resizedAttached.add(resized);\n                            } else if (element.resizedAttached) {\n                                element.resizedAttached.add(resized);\n                                return;\n                            }\n                            element.resizeSensor = document.createElement(\"div\");\n                            element.resizeSensor.className = \"resize-sensor\";\n                            var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n                            var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n                            element.resizeSensor.style.cssText = style;\n                            element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n                            element.appendChild(element.resizeSensor);\n                            if (!{\n                                fixed: 1,\n                                absolute: 1\n                            }[getComputedStyle(element, \"position\")]) {\n                                element.style.position = \"relative\";\n                            }\n                            var expand = element.resizeSensor.childNodes[0];\n                            var expandChild = expand.childNodes[0];\n                            var shrink = element.resizeSensor.childNodes[1];\n                            var shrinkChild = shrink.childNodes[0];\n                            var lastWidth, lastHeight;\n                            var reset = function() {\n                                expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n                                expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n                                expand.scrollLeft = expand.scrollWidth;\n                                expand.scrollTop = expand.scrollHeight;\n                                shrink.scrollLeft = shrink.scrollWidth;\n                                shrink.scrollTop = shrink.scrollHeight;\n                                lastWidth = element.offsetWidth;\n                                lastHeight = element.offsetHeight;\n                            };\n                            reset();\n                            var changed = function() {\n                                if (element.resizedAttached) {\n                                    element.resizedAttached.call();\n                                }\n                            };\n                            var addEvent = function(el, name, cb) {\n                                if (el.attachEvent) {\n                                    el.attachEvent(\"on\" + name, cb);\n                                } else {\n                                    el.addEventListener(name, cb);\n                                }\n                            };\n                            var onScroll = function() {\n                                if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                                    changed();\n                                }\n                                reset();\n                            };\n                            addEvent(expand, \"scroll\", onScroll);\n                            addEvent(shrink, \"scroll\", onScroll);\n                        }\n                        var elementType = Object.prototype.toString.call(element);\n                        var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n                        if (isCollectionTyped) {\n                            var i = 0, j = element.length;\n                            for (;i < j; i++) {\n                                attachResizeEvent(element[i], callback);\n                            }\n                        } else {\n                            attachResizeEvent(element, callback);\n                        }\n                        this.detach = function() {\n                            if (isCollectionTyped) {\n                                var i = 0, j = element.length;\n                                for (;i < j; i++) {\n                                    ResizeSensor.detach(element[i]);\n                                }\n                            } else {\n                                ResizeSensor.detach(element);\n                            }\n                        };\n                    };\n                    ResizeSensor.detach = function(element) {\n                        if (element.resizeSensor) {\n                            element.removeChild(element.resizeSensor);\n                            delete element.resizeSensor;\n                            delete element.resizedAttached;\n                        }\n                    };\n                    if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n                        module.exports = ResizeSensor;\n                    } else {\n                        window.ResizeSensor = ResizeSensor;\n                    }\n                })();\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var Vector3 = THREE.Vector3;\n                var EventEmmiter_1 = __webpack_require__(13);\n                var Utils_1 = __webpack_require__(14);\n                var Widget_1 = __webpack_require__(15);\n                var TrendsManager_1 = __webpack_require__(16);\n                var Screen_1 = __webpack_require__(19);\n                var AxisMarks_1 = __webpack_require__(20);\n                var interfaces_1 = __webpack_require__(21);\n                var deps_1 = __webpack_require__(3);\n                var CHART_STATE_EVENTS = {\n                    INITIAL_STATE_APPLIED: \"initialStateApplied\",\n                    READY: \"ready\",\n                    DESTROY: \"destroy\",\n                    CHANGE: \"change\",\n                    TREND_CHANGE: \"trendChange\",\n                    TRENDS_CHANGE: \"trendsChange\",\n                    ZOOM: \"zoom\",\n                    RESIZE: \"resize\",\n                    SCROLL: \"scroll\",\n                    SCROLL_STOP: \"scrollStop\",\n                    PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n                };\n                var ChartState = function() {\n                    function ChartState(initialState, widgetsClasses, plugins) {\n                        if (widgetsClasses === void 0) {\n                            widgetsClasses = {};\n                        }\n                        if (plugins === void 0) {\n                            plugins = [];\n                        }\n                        this.data = {\n                            prevState: {},\n                            $el: null,\n                            zoom: 0,\n                            xAxis: {\n                                range: {\n                                    type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n                                    from: 0,\n                                    to: 0,\n                                    scroll: 0,\n                                    zoom: 1,\n                                    padding: {\n                                        start: 0,\n                                        end: 5\n                                    },\n                                    margin: {\n                                        start: 0,\n                                        end: 5\n                                    }\n                                },\n                                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                                gridMinSize: 100,\n                                autoScroll: true,\n                                marks: []\n                            },\n                            yAxis: {\n                                range: {\n                                    type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n                                    from: 0,\n                                    to: 0,\n                                    zoom: 1,\n                                    padding: {\n                                        start: 5,\n                                        end: 5\n                                    },\n                                    margin: {\n                                        start: 5,\n                                        end: 5\n                                    }\n                                },\n                                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                                gridMinSize: 50,\n                                marks: []\n                            },\n                            animations: {\n                                enabled: true,\n                                trendChangeSpeed: .5,\n                                trendChangeEase: void 0,\n                                zoomSpeed: .25,\n                                zoomEase: Linear.easeNone,\n                                scrollSpeed: .5,\n                                scrollEase: Linear.easeNone,\n                                autoScrollSpeed: 1,\n                                autoScrollEase: Linear.easeNone\n                            },\n                            autoRender: {\n                                enabled: true,\n                                fps: 0\n                            },\n                            autoResize: true,\n                            renderer: \"WebGLRenderer\",\n                            autoScroll: true,\n                            controls: {\n                                enabled: true\n                            },\n                            cursor: {\n                                dragMode: false,\n                                x: 0,\n                                y: 0\n                            },\n                            backgroundColor: 0,\n                            backgroundOpacity: 1,\n                            showStats: false,\n                            pluginsState: {},\n                            eventEmitterMaxListeners: 20\n                        };\n                        this.widgetsClasses = {};\n                        this.plugins = {};\n                        this.isReady = false;\n                        this.ee = new EventEmmiter_1.EventEmitter();\n                        this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n                        this.widgetsClasses = widgetsClasses;\n                        this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n                        initialState.trends = this.trendsManager.calculatedOptions;\n                        initialState = this.installPlugins(plugins, initialState);\n                        this.setState(initialState);\n                        this.setState({\n                            computedData: this.getComputedData()\n                        });\n                        this.savePrevState();\n                        this.screen = new Screen_1.Screen(this);\n                        this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n                        this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n                        this.initListeners();\n                        this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n                        this.isReady = true;\n                        this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n                    }\n                    ChartState.prototype.destroy = function() {\n                        this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n                        this.ee.removeAllListeners();\n                        this.data = {};\n                    };\n                    ChartState.prototype.onDestroy = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n                    };\n                    ChartState.prototype.onInitialStateApplied = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n                    };\n                    ChartState.prototype.onReady = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n                    };\n                    ChartState.prototype.onChange = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n                    };\n                    ChartState.prototype.onTrendChange = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n                    };\n                    ChartState.prototype.onTrendsChange = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n                    };\n                    ChartState.prototype.onScrollStop = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n                    };\n                    ChartState.prototype.onScroll = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n                    };\n                    ChartState.prototype.onZoom = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n                    };\n                    ChartState.prototype.onResize = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n                    };\n                    ChartState.prototype.onPluginsStateChange = function(cb) {\n                        return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n                    };\n                    ChartState.prototype.getTrend = function(trendName) {\n                        return this.trendsManager.getTrend(trendName);\n                    };\n                    ChartState.prototype.setState = function(newState, eventData, silent) {\n                        if (silent === void 0) {\n                            silent = false;\n                        }\n                        var stateData = this.data;\n                        var changedProps = {};\n                        for (var key in newState) {\n                            if (stateData[key] !== newState[key]) {\n                                changedProps[key] = newState[key];\n                            }\n                        }\n                        this.savePrevState(changedProps);\n                        var trendsData = {};\n                        if (newState.trends) for (var trendName in newState.trends) {\n                            var trendOptions = newState.trends[trendName];\n                            if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n                            delete trendOptions.data;\n                        }\n                        var newStateContainsData = Object.keys(trendsData).length > 0;\n                        this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n                        if (newStateContainsData) for (var trendName in trendsData) {\n                            this.data.trends[trendName].data = trendsData[trendName];\n                        }\n                        if (silent) return;\n                        var recalculateResult = this.recalculateState(changedProps);\n                        changedProps = recalculateResult.changedProps;\n                        this.emitChangedStateEvents(changedProps, eventData);\n                    };\n                    ChartState.prototype.recalculateState = function(changedProps) {\n                        var data = this.data;\n                        var patch = {};\n                        var actualData = Utils_1.Utils.deepMerge({}, data);\n                        if (changedProps.widgets || !data.widgets) {\n                            patch.widgets = {};\n                            var widgetsOptions = data.widgets || {};\n                            for (var widgetName in this.widgetsClasses) {\n                                var WidgetClass = this.widgetsClasses[widgetName];\n                                var userOptions = widgetsOptions[widgetName] || {};\n                                var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n                                patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n                            }\n                        }\n                        var cursorOptions = changedProps.cursor;\n                        var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n                        if (isMouseDrag) {\n                            var oldX = data.prevState.cursor.x;\n                            var currentX = cursorOptions.x;\n                            var currentScroll = data.xAxis.range.scroll;\n                            var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n                            patch.xAxis = {\n                                range: {\n                                    scroll: currentScroll + deltaXVal\n                                }\n                            };\n                            actualData = Utils_1.Utils.deepMerge(actualData, {\n                                xAxis: patch.xAxis\n                            });\n                        }\n                        var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n                        var scrollXChanged = false;\n                        var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n                        if (needToRecalculateXAxis) {\n                            var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n                            if (xAxisPatch) {\n                                scrollXChanged = true;\n                                patch = Utils_1.Utils.deepMerge(patch, {\n                                    xAxis: xAxisPatch\n                                });\n                                actualData = Utils_1.Utils.deepMerge(actualData, {\n                                    xAxis: xAxisPatch\n                                });\n                            }\n                        }\n                        var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n                        if (needToRecalculateYAxis) {\n                            var yAxisPatch = this.recalculateYAxis(actualData);\n                            if (yAxisPatch) {\n                                patch = Utils_1.Utils.deepMerge(patch, {\n                                    yAxis: yAxisPatch\n                                });\n                                actualData = Utils_1.Utils.deepMerge(actualData, {\n                                    yAxis: yAxisPatch\n                                });\n                            }\n                        }\n                        this.savePrevState(patch);\n                        var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n                        patch.computedData = this.getComputedData(allChangedProps);\n                        this.savePrevState(patch);\n                        this.data = Utils_1.Utils.deepMerge(this.data, patch);\n                        return {\n                            changedProps: allChangedProps,\n                            patch: patch\n                        };\n                    };\n                    ChartState.prototype.getComputedData = function(changedProps) {\n                        var computeAll = !changedProps;\n                        var computedData = {};\n                        if (computeAll || changedProps.trends && this.trendsManager) {\n                            computedData.trends = {\n                                maxXVal: this.trendsManager.getEndXVal(),\n                                minXVal: this.trendsManager.getStartXVal()\n                            };\n                        }\n                        return computedData;\n                    };\n                    ChartState.prototype.savePrevState = function(changedProps) {\n                        if (!changedProps) changedProps = this.data;\n                        var prevState = this.data.prevState;\n                        Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n                    };\n                    ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n                        var prevState = this.data.prevState;\n                        this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n                        for (var key in changedProps) {\n                            this.ee.emit(key + \"Change\", changedProps[key], eventData);\n                        }\n                        if (!this.isReady) return;\n                        var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n                        scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n                        var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n                        scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n                        var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n                        zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n                        var resizeEventNeeded = changedProps.width || changedProps.height;\n                        resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n                        var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n                        pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n                    };\n                    ChartState.prototype.installPlugins = function(plugins, initialState) {\n                        var _this = this;\n                        initialState.pluginsState = {};\n                        plugins.forEach(function(plugin) {\n                            var PluginClass = plugin.constructor;\n                            var pluginName = PluginClass.NAME;\n                            PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n                                return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n                            });\n                            initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n                            _this.plugins[pluginName] = plugin;\n                            plugin.setupChartState(_this);\n                        });\n                        return initialState;\n                    };\n                    ChartState.prototype.getPlugin = function(pluginName) {\n                        return this.plugins[pluginName];\n                    };\n                    ChartState.prototype.initListeners = function() {\n                        var _this = this;\n                        this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n                            _this.handleTrendsChange(changedTrends, newData);\n                        });\n                    };\n                    ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n                        for (var trendName in changedTrends) {\n                            this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n                        }\n                    };\n                    ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n                        var axisRange = actualData.xAxis.range;\n                        var patch = {\n                            range: {}\n                        };\n                        var isInitialize = axisRange.zeroVal == void 0;\n                        var zeroVal, scaleFactor;\n                        var zoom = axisRange.zoom;\n                        if (axisRange.isMirrorMode) {\n                            Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n                        }\n                        if (isInitialize) {\n                            zeroVal = axisRange.from;\n                            scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                            patch = {\n                                range: {\n                                    zeroVal: zeroVal,\n                                    scaleFactor: scaleFactor\n                                }\n                            };\n                        } else {\n                            zeroVal = axisRange.zeroVal;\n                            scaleFactor = axisRange.scaleFactor;\n                            if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n                                if (changedProps.xAxis.range.zoom) {\n                                    Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n                                }\n                                var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                                patch.range.scroll = axisRange.from - zeroVal;\n                                patch.range.zoom = currentScaleFactor / scaleFactor;\n                                return patch;\n                            }\n                        }\n                        do {\n                            var from = zeroVal + axisRange.scroll;\n                            var to = from + actualData.width / (scaleFactor * zoom);\n                            var rangeLength = to - from;\n                            var needToRecalculateZoom = false;\n                            var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n                            var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n                            needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n                            if (needToRecalculateZoom) {\n                                var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n                                var zoom = zoom * fixScale;\n                                patch.range.zoom = zoom;\n                            }\n                        } while (needToRecalculateZoom);\n                        patch.range.from = from;\n                        patch.range.to = to;\n                        return patch;\n                    };\n                    ChartState.prototype.recalculateYAxis = function(actualData) {\n                        var patch = {\n                            range: {}\n                        };\n                        var yAxisRange = actualData.yAxis.range;\n                        var isInitialize = yAxisRange.scaleFactor == void 0;\n                        var trends = this.trendsManager;\n                        var trendsEndXVal = trends.getEndXVal();\n                        var trendsStartXVal = trends.getStartXVal();\n                        var xRange = actualData.xAxis.range;\n                        var xFrom = xRange.from, xTo = xRange.to;\n                        var xRangeLength = xTo - xFrom;\n                        var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n                        if (xTo > trendsEndXVal) {\n                            xTo = trendsEndXVal;\n                            xFrom = xTo - xRangeLength;\n                        } else if (xFrom < trendsStartXVal) {\n                            xFrom = trendsStartXVal;\n                            xTo = xFrom + xRangeLength;\n                        }\n                        var maxY = trends.getMaxYVal(xFrom, xTo);\n                        var minY = trends.getMinYVal(xFrom, xTo);\n                        var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n                        if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n                            if (trendLastY > maxY) maxY = trendLastY;\n                            if (trendLastY < minY) minY = trendLastY;\n                        }\n                        if (yAxisRange.isMirrorMode) {\n                            if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n                            var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n                            var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n                            var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n                            maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n                            minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n                        }\n                        var margin = yAxisRange.margin;\n                        var padding = {\n                            start: yAxisRange.padding.start + margin.start,\n                            end: yAxisRange.padding.end + margin.end\n                        };\n                        if (padding.end + padding.start >= actualData.height) {\n                            Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n                        }\n                        var rangeLength = maxY - minY;\n                        var paddingTopInPercents = padding.end / actualData.height;\n                        var paddingBottomInPercents = padding.start / actualData.height;\n                        var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n                        var visibleRangeLength = rangeLength / rangeLengthInPercents;\n                        var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n                        var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n                        if (isInitialize) {\n                            zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n                            scaleFactor = actualData.height / (toVal - fromVal);\n                            patch = {\n                                range: {\n                                    zeroVal: zeroVal,\n                                    scaleFactor: scaleFactor\n                                }\n                            };\n                            needToZoom = true;\n                        } else {\n                            scaleFactor = yAxisRange.scaleFactor;\n                            zeroVal = yAxisRange.zeroVal;\n                            var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n                            var minScreenY = Math.round(this.getScreenYByValue(minY));\n                            needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n                        }\n                        if (!needToZoom) return null;\n                        scroll = fromVal - zeroVal;\n                        zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n                        var currentAxisRange = this.data.yAxis.range;\n                        if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n                        if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n                        if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n                        if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n                        return patch;\n                    };\n                    ChartState.prototype.zoom = function(zoomValue, origin) {\n                        var _this = this;\n                        if (origin === void 0) {\n                            origin = .5;\n                        }\n                        var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n                        var newZoom = zoom * zoomValue;\n                        var currentRange = this.data.width / (scaleFactor * zoom);\n                        var nextRange = this.data.width / (scaleFactor * newZoom);\n                        var newScroll = scroll + (currentRange - nextRange) * origin;\n                        this.setState({\n                            xAxis: {\n                                range: {\n                                    zoom: newZoom,\n                                    scroll: newScroll\n                                }\n                            }\n                        });\n                        return new deps_1.Promise(function(resolve) {\n                            var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n                            setTimeout(resolve, animationTime * 1e3);\n                        });\n                    };\n                    ChartState.prototype.zoomToRange = function(range, origin) {\n                        var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n                        var currentRange = this.data.width / (scaleFactor * zoom);\n                        return this.zoom(currentRange / range, origin);\n                    };\n                    ChartState.prototype.scrollToEnd = function() {\n                        var _this = this;\n                        var state = this.data;\n                        var endXVal = this.trendsManager.getEndXVal();\n                        var range = state.xAxis.range;\n                        var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n                        this.setState({\n                            xAxis: {\n                                range: {\n                                    scroll: scroll\n                                }\n                            }\n                        });\n                        return new deps_1.Promise(function(resolve) {\n                            var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n                            setTimeout(resolve, animationTime * 1e3);\n                        });\n                    };\n                    ChartState.prototype.getPointOnXAxis = function(xVal) {\n                        var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                        return (xVal - zeroVal) * scaleFactor * zoom;\n                    };\n                    ChartState.prototype.getPointOnYAxis = function(yVal) {\n                        var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                        return (yVal - zeroVal) * scaleFactor * zoom;\n                    };\n                    ChartState.prototype.getValueOnXAxis = function(x) {\n                        return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n                    };\n                    ChartState.prototype.valueToPxByXAxis = function(xVal) {\n                        return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n                    };\n                    ChartState.prototype.valueToPxByYAxis = function(yVal) {\n                        return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n                    };\n                    ChartState.prototype.pxToValueByXAxis = function(xVal) {\n                        return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n                    };\n                    ChartState.prototype.pxToValueByYAxis = function(yVal) {\n                        return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n                    };\n                    ChartState.prototype.getValueByScreenX = function(x) {\n                        var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                        return zeroVal + scroll + this.pxToValueByXAxis(x);\n                    };\n                    ChartState.prototype.getValueByScreenY = function(y) {\n                        var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                        return zeroVal + scroll + this.pxToValueByYAxis(y);\n                    };\n                    ChartState.prototype.getScreenXByValue = function(xVal) {\n                        var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n                    };\n                    ChartState.prototype.getScreenYByValue = function(yVal) {\n                        var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                        return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n                    };\n                    ChartState.prototype.getScreenXByPoint = function(xVal) {\n                        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n                    };\n                    ChartState.prototype.getPointByScreenX = function(screenX) {\n                        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n                    };\n                    ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n                        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n                    };\n                    ChartState.prototype.getScreenLeftVal = function() {\n                        return this.getValueByScreenX(0);\n                    };\n                    ChartState.prototype.getScreenRightVal = function() {\n                        return this.getValueByScreenX(this.data.width);\n                    };\n                    ChartState.prototype.getPaddingRight = function() {\n                        return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n                    };\n                    return ChartState;\n                }();\n                exports.ChartState = ChartState;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var deps_1 = __webpack_require__(3);\n                var EventEmitter = function() {\n                    function EventEmitter() {\n                        this.ee = new deps_1.EE2();\n                    }\n                    EventEmitter.prototype.emit = function(eventName) {\n                        var args = [];\n                        for (var _i = 1; _i < arguments.length; _i++) {\n                            args[_i - 1] = arguments[_i];\n                        }\n                        (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n                        var _a;\n                    };\n                    EventEmitter.prototype.on = function(eventName, callback) {\n                        return this.ee.on(eventName, callback);\n                    };\n                    EventEmitter.prototype.off = function(eventName, callback) {\n                        return this.ee.off(eventName, callback);\n                    };\n                    EventEmitter.prototype.subscribe = function(eventName, callback) {\n                        var _this = this;\n                        this.on(eventName, callback);\n                        return function() {\n                            return _this.off(eventName, callback);\n                        };\n                    };\n                    EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n                        this.ee.setMaxListeners(listenersCount);\n                    };\n                    EventEmitter.prototype.removeAllListeners = function(eventName) {\n                        this.ee.removeAllListeners(eventName);\n                    };\n                    return EventEmitter;\n                }();\n                exports.EventEmitter = EventEmitter;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var deps_1 = __webpack_require__(3);\n                function deepmerge(target, src, mergeArrays) {\n                    if (mergeArrays === void 0) {\n                        mergeArrays = true;\n                    }\n                    var array = Array.isArray(src);\n                    var dst = array && [] || {};\n                    if (array) {\n                        target = target || [];\n                        if (mergeArrays) {\n                            dst = dst.concat(target);\n                        }\n                        src.forEach(function(e, i) {\n                            if (typeof dst[i] === \"undefined\") {\n                                dst[i] = e;\n                            } else if (typeof e === \"object\") {\n                                dst[i] = deepmerge(target[i], e, mergeArrays);\n                            } else {\n                                if (target.indexOf(e) === -1) {\n                                    dst.push(e);\n                                }\n                            }\n                        });\n                    } else {\n                        if (target && typeof target === \"object\") {\n                            Object.keys(target).forEach(function(key) {\n                                dst[key] = target[key];\n                            });\n                        }\n                        Object.keys(src).forEach(function(key) {\n                            if (typeof src[key] !== \"object\" || !src[key]) {\n                                dst[key] = src[key];\n                            } else {\n                                if (!target[key]) {\n                                    dst[key] = src[key];\n                                } else {\n                                    dst[key] = deepmerge(target[key], src[key], mergeArrays);\n                                }\n                            }\n                        });\n                    }\n                    return dst;\n                }\n                var Utils = function() {\n                    function Utils() {}\n                    Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n                        return deepmerge(obj1, obj2, mergeArrays);\n                    };\n                    Utils.deepCopy = function(obj) {\n                        return JSON.parse(JSON.stringify(obj));\n                    };\n                    Utils.toFixed = function(num, digitsCount) {\n                        var maxDigits = 15;\n                        var result = \"\";\n                        var intVal = Math.floor(num);\n                        var intStr = intVal.toString();\n                        var lengthDiff = digitsCount - intStr.length;\n                        if (lengthDiff > 0) {\n                            result = \"0\".repeat(lengthDiff) + intStr;\n                        } else {\n                            result = intStr;\n                        }\n                        var afterPointDigitsCount = maxDigits - intStr.length;\n                        var afterPointStr = num.toString().split(\".\")[1];\n                        if (afterPointStr) {\n                            result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n                        }\n                        return result;\n                    };\n                    Utils.bindEvent = function() {};\n                    Utils.createTexture = function(width, height, fn) {\n                        var canvas = document.createElement(\"canvas\");\n                        canvas.width = width;\n                        canvas.height = height;\n                        var ctx = canvas.getContext(\"2d\");\n                        fn(ctx);\n                        var texture = new THREE.Texture(canvas);\n                        texture.needsUpdate = true;\n                        return texture;\n                    };\n                    Utils.createPixelPerfectTexture = function(width, height, fn) {\n                        var texture = this.createTexture(width, height, fn);\n                        texture.minFilter = THREE.NearestFilter;\n                        return texture;\n                    };\n                    Utils.error = function(msg) {\n                        console.error(\"Chart error: \" + msg);\n                        throw \"Chart: \" + msg;\n                    };\n                    Utils.warn = function(msg) {\n                        console.warn(\"Chart warning: \" + msg);\n                    };\n                    Utils.getUid = function() {\n                        return this.currentId++;\n                    };\n                    Utils.getDistance = function(num1, num2) {\n                        return Math.max(num1, num2) - Math.min(num1, num2);\n                    };\n                    Utils.binarySearchClosestInd = function(arr, num, key) {\n                        var mid;\n                        var lo = 0;\n                        var hi = arr.length - 1;\n                        while (hi - lo > 1) {\n                            mid = Math.floor((lo + hi) / 2);\n                            if (arr[mid][key] < num) {\n                                lo = mid;\n                            } else {\n                                hi = mid;\n                            }\n                        }\n                        if (num - arr[lo][key] <= arr[hi][key] - num) {\n                            return lo;\n                        }\n                        return hi;\n                    };\n                    Utils.binarySearchClosest = function(arr, num, key) {\n                        var ind = this.binarySearchClosestInd(arr, num, key);\n                        return arr[ind];\n                    };\n                    Utils.rectsIntersect = function(r1, r2) {\n                        var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n                        var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n                        var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n                        return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n                    };\n                    /**!\r\n\t\t     * @preserve $.parseColor\r\n\t\t     * Copyright 2011 THEtheChad Elliott\r\n\t\t     * Released under the MIT and GPL licenses.\r\n\t\t     */\n                    Utils.parseColor = function(color) {\n                        var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n                        if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by $.parseColor\");\n                        isNaN(cache[3]) && (cache[3] = 1);\n                        return cache;\n                    };\n                    Utils.getHexColor = function(str) {\n                        var rgb = this.parseColor(str);\n                        return (rgb[0] << 8 * 2) + (rgb[1] << 8) + rgb[2];\n                    };\n                    Utils.throttle = function(func, ms) {\n                        var isThrottled = false, savedArgs, savedThis;\n                        function wrapper() {\n                            if (isThrottled) {\n                                savedArgs = arguments;\n                                savedThis = this;\n                                return;\n                            }\n                            func.apply(this, arguments);\n                            isThrottled = true;\n                            setTimeout(function() {\n                                isThrottled = false;\n                                if (savedArgs) {\n                                    wrapper.apply(savedThis, savedArgs);\n                                    savedArgs = savedThis = null;\n                                }\n                            }, ms);\n                        }\n                        return wrapper;\n                    };\n                    Utils.msToTimeString = function(timestamp) {\n                        var h = Math.floor(timestamp / 36e4);\n                        var m = Math.floor(timestamp / 6e4);\n                        var s = Math.floor(timestamp / 1e3);\n                        return h + \":\" + m + \":\" + s;\n                    };\n                    Utils.getRandomItem = function(arr) {\n                        var ind = Math.floor(Math.random() * arr.length);\n                        return arr[ind];\n                    };\n                    Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n                        if (excludeProps === void 0) {\n                            excludeProps = [];\n                        }\n                        for (var key in props) {\n                            if (excludeProps.indexOf(key) !== -1) continue;\n                            if (srcObject[key] == void 0) continue;\n                            if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n                                this.copyProps(srcObject[key], dstObject[key], props[key]);\n                            } else {\n                                dstObject[key] = this.deepCopy(srcObject[key]);\n                            }\n                        }\n                    };\n                    Utils.currentId = 1;\n                    return Utils;\n                }();\n                exports.Utils = Utils;\n            }, function(module, exports) {\n                \"use strict\";\n                var ChartWidget = function() {\n                    function ChartWidget(chartState) {\n                        this.unsubscribers = [];\n                        this.chartState = chartState;\n                        this.bindEvents();\n                    }\n                    ChartWidget.prototype.bindEvents = function() {};\n                    ChartWidget.prototype.bindEvent = function() {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i - 0] = arguments[_i];\n                        }\n                        var unsubscribers = [];\n                        if (!Array.isArray(args[0])) {\n                            unsubscribers.push(args[0]);\n                        } else {\n                            unsubscribers.push.apply(unsubscribers, args);\n                        }\n                        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                        var _a;\n                    };\n                    ChartWidget.prototype.unbindEvents = function() {\n                        this.unsubscribers.forEach(function(unsubscriber) {\n                            return unsubscriber();\n                        });\n                        this.unsubscribers.length = 0;\n                    };\n                    ChartWidget.getDefaultOptions = function() {\n                        return {\n                            enabled: true\n                        };\n                    };\n                    ChartWidget.widgetName = \"\";\n                    return ChartWidget;\n                }();\n                exports.ChartWidget = ChartWidget;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var Trend_1 = __webpack_require__(17);\n                var EventEmmiter_1 = __webpack_require__(13);\n                var EVENTS = {\n                    SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n                };\n                var TrendsManager = function() {\n                    function TrendsManager(state, initialState) {\n                        this.trends = {};\n                        this.ee = new EventEmmiter_1.EventEmitter();\n                        this.chartState = state;\n                        var trendsCalculatedOptions = {};\n                        for (var trendName in initialState.trends) {\n                            var trend = this.createTrend(state, trendName, initialState);\n                            trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n                        }\n                        this.calculatedOptions = trendsCalculatedOptions;\n                        this.bindEvents();\n                    }\n                    TrendsManager.prototype.getTrend = function(trendName) {\n                        return this.trends[trendName];\n                    };\n                    TrendsManager.prototype.getEnabledTrends = function() {\n                        var enabledTrends = [];\n                        var allTrends = this.trends;\n                        for (var trendName in allTrends) {\n                            var trend = allTrends[trendName];\n                            trend.getOptions().enabled && enabledTrends.push(trend);\n                        }\n                        return enabledTrends;\n                    };\n                    TrendsManager.prototype.getStartXVal = function() {\n                        var trends = this.getEnabledTrends();\n                        return trends[0].getData()[0].xVal;\n                    };\n                    TrendsManager.prototype.getEndXVal = function() {\n                        var trends = this.getEnabledTrends();\n                        var firstTrendData = trends[0].getData();\n                        return firstTrendData[firstTrendData.length - 1].xVal;\n                    };\n                    TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n                        var trends = this.getEnabledTrends();\n                        var compareFn;\n                        var result;\n                        if (extremumIsMax) {\n                            result = -Infinity;\n                            compareFn = Math.max;\n                        } else {\n                            result = Infinity;\n                            compareFn = Math.min;\n                        }\n                        for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n                            var trend = trends_1[_i];\n                            var trendData = trend.getData(fromX, toX);\n                            var trendYValues = trendData.map(function(dataItem) {\n                                return dataItem.yVal;\n                            });\n                            result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n                        }\n                        if (result == Infinity || result == -Infinity) result = NaN;\n                        return result;\n                    };\n                    TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n                        return this.getExtremumYVal(true, fromX, toX);\n                    };\n                    TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n                        return this.getExtremumYVal(false, fromX, toX);\n                    };\n                    TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n                        return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n                    };\n                    TrendsManager.prototype.bindEvents = function() {\n                        var _this = this;\n                        this.chartState.onInitialStateApplied(function() {\n                            return _this.onInitialStateAppliedHandler();\n                        });\n                    };\n                    TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n                        var _this = this;\n                        var _loop_1 = function(trendName) {\n                            this_1.trends[trendName].segments.onRebuild(function() {\n                                return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n                            });\n                        };\n                        var this_1 = this;\n                        for (var trendName in this.trends) {\n                            _loop_1(trendName);\n                        }\n                    };\n                    TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n                        var trend = new Trend_1.Trend(state, trendName, initialState);\n                        this.trends[trendName] = trend;\n                        return trend;\n                    };\n                    return TrendsManager;\n                }();\n                exports.TrendsManager = TrendsManager;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var Utils_1 = __webpack_require__(14);\n                var TrendSegments_1 = __webpack_require__(18);\n                var EventEmmiter_1 = __webpack_require__(13);\n                var deps_1 = __webpack_require__(3);\n                var EVENTS = {\n                    CHANGE: \"Change\",\n                    PREPEND_REQUEST: \"prependRequest\"\n                };\n                (function(TREND_TYPE) {\n                    TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n                    TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n                })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n                var TREND_TYPE = exports.TREND_TYPE;\n                var DEFAULT_OPTIONS = {\n                    enabled: true,\n                    type: TREND_TYPE.LINE,\n                    data: [],\n                    maxSegmentLength: 1e3,\n                    lineWidth: 2,\n                    lineColor: 16777215,\n                    hasGradient: true,\n                    hasBeacon: false,\n                    settingsForTypes: {\n                        CANDLE: {\n                            minSegmentLengthInPx: 20,\n                            maxSegmentLengthInPx: 40\n                        },\n                        LINE: {\n                            minSegmentLengthInPx: 2,\n                            maxSegmentLengthInPx: 10\n                        }\n                    }\n                };\n                var Trend = function() {\n                    function Trend(chartState, trendName, initialState) {\n                        this.minXVal = Infinity;\n                        this.minYVal = Infinity;\n                        this.maxXVal = -Infinity;\n                        this.maxYVal = -Infinity;\n                        var options = initialState.trends[trendName];\n                        this.name = trendName;\n                        this.chartState = chartState;\n                        this.calculatedOptions = Utils_1.Utils.deepMerge(DEFAULT_OPTIONS, options);\n                        this.calculatedOptions.name = trendName;\n                        if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n                        this.calculatedOptions.dataset = [];\n                        this.ee = new EventEmmiter_1.EventEmitter();\n                        this.bindEvents();\n                    }\n                    Trend.prototype.onInitialStateApplied = function() {\n                        this.segments = new TrendSegments_1.TrendSegments(this.chartState, this);\n                    };\n                    Trend.prototype.bindEvents = function() {\n                        var _this = this;\n                        var chartState = this.chartState;\n                        chartState.onInitialStateApplied(function() {\n                            return _this.onInitialStateApplied();\n                        });\n                        chartState.onScrollStop(function() {\n                            return _this.checkForPrependRequest();\n                        });\n                        chartState.onZoom(function() {\n                            return _this.checkForPrependRequest();\n                        });\n                        chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                            return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n                        });\n                        chartState.onDestroy(function() {\n                            return _this.ee.removeAllListeners();\n                        });\n                    };\n                    Trend.prototype.getCalculatedOptions = function() {\n                        return this.calculatedOptions;\n                    };\n                    Trend.prototype.appendData = function(rawData) {\n                        var options = this.getOptions();\n                        var newData = Trend.prepareData(rawData, this.getData());\n                        var updatedTrendData = options.data.concat(newData);\n                        this.changeData(updatedTrendData, newData);\n                    };\n                    Trend.prototype.prependData = function(rawData) {\n                        var options = this.getOptions();\n                        var newData = Trend.prepareData(rawData, this.getData(), true);\n                        var updatedTrendData = newData.concat(options.data);\n                        this.changeData(updatedTrendData, newData);\n                    };\n                    Trend.prototype.changeData = function(allData, newData) {\n                        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n                            var item = newData_1[_i];\n                            if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n                            if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n                            if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n                            if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n                        }\n                        var options = this.getOptions();\n                        var statePatch = {\n                            trends: (_a = {}, _a[options.name] = {\n                                data: allData\n                            }, _a)\n                        };\n                        this.chartState.setState(statePatch, newData);\n                        var _a;\n                    };\n                    Trend.prototype.getData = function(fromX, toX) {\n                        var data = this.getOptions().data;\n                        if (fromX == void 0 && toX == void 0) return data;\n                        fromX = fromX !== void 0 ? fromX : data[0].xVal;\n                        toX = toX !== void 0 ? toX : data[data.length].xVal;\n                        var filteredData = [];\n                        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                            var item = data_1[_i];\n                            if (item.xVal < fromX) continue;\n                            if (item.xVal > toX) break;\n                            filteredData.push(item);\n                        }\n                        return filteredData;\n                    };\n                    Trend.prototype.getFirstItem = function() {\n                        return this.getOptions().data[0];\n                    };\n                    Trend.prototype.getLastItem = function() {\n                        var data = this.getOptions().data;\n                        return data[data.length - 1];\n                    };\n                    Trend.prototype.getOptions = function() {\n                        return this.chartState.data.trends[this.name];\n                    };\n                    Trend.prototype.setOptions = function(options) {\n                        this.chartState.setState({\n                            trends: (_a = {}, _a[this.name] = options, _a)\n                        });\n                        var _a;\n                    };\n                    Trend.prototype.onPrependRequest = function(cb) {\n                        var _this = this;\n                        this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n                        return function() {\n                            _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n                        };\n                    };\n                    Trend.prototype.onChange = function(cb) {\n                        var _this = this;\n                        this.ee.on(EVENTS.CHANGE, cb);\n                        return function() {\n                            _this.ee.off(EVENTS.CHANGE, cb);\n                        };\n                    };\n                    Trend.prototype.onDataChange = function(cb) {\n                        var _this = this;\n                        var onChangeCb = function(changedOptions, newData) {\n                            if (newData) cb(newData);\n                        };\n                        this.ee.on(EVENTS.CHANGE, onChangeCb);\n                        return function() {\n                            _this.ee.off(EVENTS.CHANGE, onChangeCb);\n                        };\n                    };\n                    Trend.prototype.checkForPrependRequest = function() {\n                        var _this = this;\n                        if (this.prependRequest) return;\n                        var chartState = this.chartState;\n                        var minXVal = chartState.data.computedData.trends.minXVal;\n                        var minScreenX = chartState.getScreenXByValue(minXVal);\n                        var needToRequest = minScreenX > 0;\n                        var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                        var requestedDataLength = to - from;\n                        if (!needToRequest) return;\n                        this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n                            _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n                        });\n                        this.prependRequest.then(function(newData) {\n                            _this.prependData(newData);\n                            _this.prependRequest = null;\n                        }, function() {\n                            _this.prependRequest = null;\n                        });\n                    };\n                    Trend.prepareData = function(newData, currentData, isPrepend) {\n                        if (isPrepend === void 0) {\n                            isPrepend = false;\n                        }\n                        var data = [];\n                        if (typeof newData[0] == \"number\") {\n                            currentData = currentData || [];\n                            var initialItem = void 0;\n                            var xVal = void 0;\n                            if (isPrepend) {\n                                initialItem = currentData[0];\n                                xVal = initialItem.xVal - newData.length;\n                            } else {\n                                initialItem = currentData[currentData.length - 1];\n                                xVal = initialItem ? initialItem.xVal + 1 : 0;\n                            }\n                            for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n                                var yVal = _a[_i];\n                                data.push({\n                                    xVal: xVal,\n                                    yVal: yVal,\n                                    id: Utils_1.Utils.getUid()\n                                });\n                                xVal++;\n                            }\n                        } else {\n                            data = newData;\n                        }\n                        return data;\n                    };\n                    return Trend;\n                }();\n                exports.Trend = Trend;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var EventEmmiter_1 = __webpack_require__(13);\n                var Vector3 = THREE.Vector3;\n                var Trend_1 = __webpack_require__(17);\n                var Utils_1 = __webpack_require__(14);\n                var MAX_ANIMATED_SEGMENTS = 100;\n                var EVENTS = {\n                    REBUILD: \"rebuild\",\n                    DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n                    ANIMATION_FRAME: \"animationFrame\"\n                };\n                var TrendSegments = function() {\n                    function TrendSegments(chartState, trend) {\n                        this.segmentsById = {};\n                        this.segments = [];\n                        this.animatedSegmentsIds = [];\n                        this.segmentsLength = 0;\n                        this.animatedSegmentsForAppend = [];\n                        this.animatedSegmentsForPrepend = [];\n                        this.nextEmptyId = 0;\n                        this.startSegmentId = 0;\n                        this.endSegmentId = 0;\n                        this.chartState = chartState;\n                        this.ee = new EventEmmiter_1.EventEmitter();\n                        this.trend = trend;\n                        this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n                        this.tryToRebuildSegments();\n                        this.bindEvents();\n                    }\n                    TrendSegments.prototype.bindEvents = function() {\n                        var _this = this;\n                        this.trend.onChange(function(changedOptions, newData) {\n                            return _this.onTrendChangeHandler(changedOptions, newData);\n                        });\n                        this.chartState.onZoom(function() {\n                            return _this.onZoomHandler();\n                        });\n                        this.chartState.onScroll(function() {\n                            return _this.recalculateDisplayedRange();\n                        });\n                        this.chartState.onDestroy(function() {\n                            return _this.onDestroyHandler();\n                        });\n                    };\n                    TrendSegments.prototype.onDestroyHandler = function() {\n                        this.ee.removeAllListeners();\n                        this.appendAnimation && this.appendAnimation.kill();\n                        this.prependAnimation && this.prependAnimation.kill();\n                    };\n                    TrendSegments.prototype.onZoomHandler = function() {\n                        var segmentsRebuilded = this.tryToRebuildSegments();\n                        if (!segmentsRebuilded) {\n                            this.recalculateDisplayedRange();\n                        }\n                    };\n                    TrendSegments.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n                        var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n                        if (needToRebuildSegments) {\n                            this.tryToRebuildSegments(true);\n                            return;\n                        }\n                        if (!newData) return;\n                        var data = this.trend.getData();\n                        var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                        isAppend ? this.appendData(newData) : this.prependData(newData);\n                        this.recalculateDisplayedRange();\n                    };\n                    TrendSegments.prototype.getEndSegment = function() {\n                        return this.segmentsById[this.endSegmentId];\n                    };\n                    TrendSegments.prototype.getStartSegment = function() {\n                        return this.segmentsById[this.startSegmentId];\n                    };\n                    TrendSegments.prototype.tryToRebuildSegments = function(force) {\n                        if (force === void 0) {\n                            force = false;\n                        }\n                        var options = this.trend.getOptions();\n                        var trendTypeName = Trend_1.TREND_TYPE[options.type];\n                        var trendTypesSettings = options.settingsForTypes;\n                        var trendTypeSettings = trendTypesSettings[trendTypeName];\n                        var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n                        var needToRebuild = this.segments.length === 0 || force;\n                        var segmentLength = this.maxSegmentLength;\n                        var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n                        var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n                        if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n                            needToRebuild = true;\n                            segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n                        } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n                            needToRebuild = true;\n                            segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n                        }\n                        if (!needToRebuild) return false;\n                        this.maxSegmentLength = segmentLength;\n                        this.segmentsById = {};\n                        this.segments = [];\n                        this.nextEmptyId = 0;\n                        this.startSegmentId = 0;\n                        this.endSegmentId = 0;\n                        this.segmentsLength = 0;\n                        this.stopAllAnimations();\n                        this.appendData(null, true);\n                        this.recalculateDisplayedRange(true);\n                        this.ee.emit(EVENTS.REBUILD);\n                    };\n                    TrendSegments.prototype.stopAllAnimations = function() {\n                        this.animatedSegmentsIds = [];\n                        this.animatedSegmentsForAppend = [];\n                        this.animatedSegmentsForAppend = [];\n                        if (this.prependAnimation) this.prependAnimation.kill();\n                        if (this.appendAnimation) this.appendAnimation.kill();\n                    };\n                    TrendSegments.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n                        if (segmentsAreRebuilded === void 0) {\n                            segmentsAreRebuilded = false;\n                        }\n                        var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                        var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n                        var displayedRange = to - from;\n                        this.firstDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, from - displayedRange, \"startXVal\");\n                        this.lastDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, to + displayedRange, \"endXVal\");\n                        if (segmentsAreRebuilded) return;\n                        var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n                        if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n                    };\n                    TrendSegments.prototype.getSegmentsForXValues = function(values) {\n                        var valueInd = 0;\n                        var value = values[valueInd];\n                        var lastValueInd = values.length - 1;\n                        var results = [];\n                        var segment = this.getStartSegment();\n                        if (!segment.hasValue) return [];\n                        while (segment) {\n                            while (value < segment.startXVal) {\n                                results.push(void 0);\n                                value = values[++valueInd];\n                            }\n                            while (value > segment.endXVal) {\n                                segment = segment.getNext();\n                                if (!segment) break;\n                            }\n                            var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n                            if (valueInPoint) {\n                                results.push(segment);\n                                value = values[++valueInd];\n                            }\n                            if (valueInd > lastValueInd) break;\n                        }\n                        return results;\n                    };\n                    TrendSegments.prototype.onAnimationFrame = function(cb) {\n                        return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n                    };\n                    TrendSegments.prototype.onRebuild = function(cb) {\n                        return this.ee.subscribe(EVENTS.REBUILD, cb);\n                    };\n                    TrendSegments.prototype.onDisplayedRangeChanged = function(cb) {\n                        return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n                    };\n                    TrendSegments.prototype.allocateNextSegment = function() {\n                        var id = this.nextEmptyId++;\n                        var segment = new TrendSegment(this, id);\n                        var prevSegment = this.segmentsById[this.endSegmentId];\n                        if (prevSegment && prevSegment.hasValue) {\n                            prevSegment.nextId = id;\n                            segment.prevId = prevSegment.id;\n                        }\n                        this.endSegmentId = id;\n                        this.segmentsLength++;\n                        this.segmentsById[id] = segment;\n                        this.segments.push(segment);\n                        return segment;\n                    };\n                    TrendSegments.prototype.allocatePrevSegment = function() {\n                        var id = this.nextEmptyId++;\n                        var segment = new TrendSegment(this, id);\n                        var nextSegment = this.segmentsById[this.startSegmentId];\n                        if (nextSegment && nextSegment.hasValue) {\n                            nextSegment.prevId = id;\n                            segment.nextId = nextSegment.id;\n                        }\n                        this.startSegmentId = id;\n                        this.segmentsLength++;\n                        this.segmentsById[id] = segment;\n                        this.segments.unshift(segment);\n                        return segment;\n                    };\n                    TrendSegments.prototype.appendData = function(newData, needRebuildSegments) {\n                        if (needRebuildSegments === void 0) {\n                            needRebuildSegments = false;\n                        }\n                        var trendData = this.trend.getData();\n                        if (needRebuildSegments) {\n                            newData = trendData;\n                            this.animatedSegmentsForAppend = [];\n                        }\n                        var startItemInd = trendData.length - newData.length;\n                        var segment = this.getEndSegment() || this.allocateNextSegment();\n                        var initialSegment = segment.hasValue ? segment : null;\n                        var initialAnimationState = segment.createAnimationState();\n                        var itemInd = 0;\n                        while (itemInd < newData.length) {\n                            var item = newData[itemInd];\n                            var itemIsInserted = segment.appendItem(item);\n                            var isLastItem = itemInd == newData.length - 1;\n                            if (itemIsInserted) {\n                                if (!isLastItem) itemInd++;\n                            } else {\n                                if (!segment.isCompleted) segment.complete();\n                            }\n                            if (isLastItem && itemIsInserted) {\n                                segment.recalculateItems();\n                            }\n                            var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                            if (segmentIsReadyForAnimate) {\n                                var id = segment.id;\n                                if (!initialSegment) initialSegment = segment;\n                                if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                                if (this.animatedSegmentsForAppend.length > 0) {\n                                    segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n                                    segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n                                }\n                                segment.targetAnimationState = segment.createAnimationState();\n                                this.animatedSegmentsForAppend.push(id);\n                            }\n                            if (isLastItem && itemIsInserted) break;\n                            if (!segment.isCompleted) continue;\n                            segment = this.allocateNextSegment();\n                            var prevItem = trendData[startItemInd + itemInd - 1];\n                            segment.appendItem(prevItem);\n                        }\n                        var animationsOptions = this.chartState.data.animations;\n                        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                        if (needRebuildSegments) {\n                            for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n                                var segmentId = _a[_i];\n                                var segment_1 = this.segmentsById[segmentId];\n                                segment_1.currentAnimationState = segment_1.createAnimationState();\n                            }\n                            this.animatedSegmentsForAppend = [];\n                            return;\n                        }\n                        if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                        this.animate(time);\n                    };\n                    TrendSegments.prototype.prependData = function(newData) {\n                        var trendData = this.trend.getData();\n                        var segment = this.getStartSegment() || this.segmentsById[0];\n                        var initialSegment = segment.hasValue ? segment : null;\n                        var itemInd = newData.length - 1;\n                        var initialAnimationState = segment.createAnimationState();\n                        while (itemInd >= 0) {\n                            var item = newData[itemInd];\n                            var itemIsInserted = segment.prependItem(item);\n                            var isLastItem = itemInd == 0;\n                            if (itemIsInserted) {\n                                if (!isLastItem) itemInd--;\n                            } else {\n                                if (!segment.isCompleted) segment.complete();\n                            }\n                            if (isLastItem && itemIsInserted) {\n                                segment.recalculateItems();\n                            }\n                            var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                            if (segmentIsReadyForAnimate) {\n                                var id = segment.id;\n                                if (!initialSegment) initialSegment = segment;\n                                if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                                if (this.animatedSegmentsForPrepend.length > 0) {\n                                    segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n                                    segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n                                }\n                                segment.targetAnimationState = segment.createAnimationState();\n                                this.animatedSegmentsForPrepend.push(id);\n                            }\n                            if (isLastItem && itemIsInserted) break;\n                            if (!segment.isCompleted) continue;\n                            segment = this.allocatePrevSegment();\n                            var nextItem = trendData[itemInd + 1];\n                            segment.prependItem(nextItem);\n                        }\n                        var animationsOptions = this.chartState.data.animations;\n                        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                        if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                        this.animate(time, true);\n                    };\n                    TrendSegments.prototype.animate = function(time, isPrepend) {\n                        var _this = this;\n                        if (isPrepend === void 0) {\n                            isPrepend = false;\n                        }\n                        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                        var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n                        if (animation && animation.isActive() || time == 0) {\n                            if (animation) animation.kill();\n                            this.onAnimationFrameHandler(1, isPrepend);\n                            animatedSegmentsIds.length = 0;\n                            return;\n                        }\n                        var animationsOptions = this.chartState.data.animations;\n                        var ease = animationsOptions.trendChangeEase;\n                        var objectToAnimate = {\n                            animationValue: 0\n                        };\n                        animation = TweenLite.to(objectToAnimate, time, {\n                            animationValue: 1,\n                            ease: ease\n                        });\n                        animation.eventCallback(\"onUpdate\", function() {\n                            return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n                        });\n                        animation.eventCallback(\"onComplete\", function() {\n                            animatedSegmentsIds.length = 0;\n                            _this.appendAnimation = null;\n                        });\n                        if (isPrepend) {\n                            this.prependAnimation = animation;\n                        } else {\n                            this.appendAnimation = animation;\n                        }\n                    };\n                    TrendSegments.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n                        if (isPrepend === void 0) {\n                            isPrepend = false;\n                        }\n                        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                        for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n                            var segmentId = animatedSegmentsIds_1[_i];\n                            var segment = this.segmentsById[segmentId];\n                            for (var key in segment.targetAnimationState) {\n                                var targetValue = segment.targetAnimationState[key];\n                                var initialValue = segment.initialAnimationState[key];\n                                var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n                                segment.currentAnimationState[key] = currentValue;\n                            }\n                        }\n                        this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n                        this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n                    };\n                    return TrendSegments;\n                }();\n                exports.TrendSegments = TrendSegments;\n                var TrendSegment = function() {\n                    function TrendSegment(trendPoints, id) {\n                        this.isCompleted = false;\n                        this.items = [];\n                        this.initialAnimationState = {};\n                        this.targetAnimationState = {};\n                        this.currentAnimationState = {};\n                        this.trendSegments = trendPoints;\n                        this.id = id;\n                        this.maxLength = trendPoints.maxSegmentLength;\n                    }\n                    TrendSegment.prototype.createAnimationState = function() {\n                        var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n                        return {\n                            xVal: xVal,\n                            yVal: yVal,\n                            startXVal: startXVal,\n                            startYVal: startYVal,\n                            endXVal: endXVal,\n                            endYVal: endYVal,\n                            maxYVal: maxYVal,\n                            minYVal: minYVal,\n                            maxLength: maxLength\n                        };\n                    };\n                    TrendSegment.prototype.appendItem = function(item) {\n                        if (this.isCompleted) return false;\n                        var items = this.items;\n                        if (items.length < 2) {\n                            this.items.push(item);\n                            this.hasValue = true;\n                            return true;\n                        }\n                        var startXVal = items[0].xVal;\n                        if (item.xVal - startXVal > this.maxLength) return false;\n                        items.push(item);\n                        return true;\n                    };\n                    TrendSegment.prototype.prependItem = function(item) {\n                        if (this.isCompleted) return false;\n                        var items = this.items;\n                        if (items.length < 2) {\n                            this.items.unshift(item);\n                            this.hasValue = true;\n                            return true;\n                        }\n                        var endXVal = items[items.length - 1].xVal;\n                        if (endXVal - item.xVal > this.maxLength) return false;\n                        items.unshift(item);\n                        return true;\n                    };\n                    TrendSegment.prototype.complete = function() {\n                        this.isCompleted = true;\n                        this.recalculateItems();\n                        this.items = [];\n                    };\n                    TrendSegment.prototype.recalculateItems = function() {\n                        var items = this.items;\n                        var itemsLength = items.length;\n                        if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n                        var endItem = items[itemsLength - 1];\n                        var endXVal = endItem.xVal, endYVal = endItem.yVal;\n                        var startXVal, startYVal;\n                        var startItem = items[0];\n                        startXVal = startItem.xVal;\n                        startYVal = startItem.yVal;\n                        var minX = Math.min(startXVal, endXVal);\n                        var maxX = Math.max(startXVal, endXVal);\n                        var middleXVal = minX + (maxX - minX) / 2;\n                        var minY = Math.min(startYVal, endYVal);\n                        var maxY = Math.max(startYVal, endYVal);\n                        var middleYVal = minY + (maxY - minY) / 2;\n                        var yVals = items.map(function(item) {\n                            return item.yVal;\n                        });\n                        this.startXVal = startXVal;\n                        this.startYVal = startYVal;\n                        this.endXVal = endXVal;\n                        this.endYVal = endYVal;\n                        this.xVal = middleXVal;\n                        this.yVal = middleYVal;\n                        this.maxYVal = Math.max.apply(Math, yVals);\n                        this.minYVal = Math.min.apply(Math, yVals);\n                        if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n                    };\n                    TrendSegment.prototype.getNext = function() {\n                        var nextPoint = this.trendSegments.segmentsById[this.nextId];\n                        return nextPoint && nextPoint.hasValue ? nextPoint : null;\n                    };\n                    TrendSegment.prototype.getPrev = function() {\n                        var prevPoint = this.trendSegments.segmentsById[this.prevId];\n                        return prevPoint && prevPoint.hasValue ? prevPoint : null;\n                    };\n                    TrendSegment.prototype.getFrameVal = function() {\n                        var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n                        return new Vector3(xVal, yVal, 0);\n                    };\n                    TrendSegment.prototype.getFramePoint = function() {\n                        var frameVal = this.getFrameVal();\n                        return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n                    };\n                    return TrendSegment;\n                }();\n                exports.TrendSegment = TrendSegment;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var Vector3 = THREE.Vector3;\n                var EventEmmiter_1 = __webpack_require__(13);\n                var Screen = function() {\n                    function Screen(chartState) {\n                        this.options = {\n                            scrollXVal: 0,\n                            scrollX: 0,\n                            scrollYVal: 0,\n                            scrollY: 0,\n                            zoomX: 1,\n                            zoomY: 1\n                        };\n                        this.currentScrollX = {\n                            x: 0\n                        };\n                        this.currentScrollY = {\n                            y: 0\n                        };\n                        this.currentZoomX = {\n                            val: 1\n                        };\n                        this.currentZoomY = {\n                            val: 1\n                        };\n                        this.chartState = chartState;\n                        var _a = chartState.data, w = _a.width, h = _a.height;\n                        this.ee = new EventEmmiter_1.EventEmitter();\n                        this.transform({\n                            scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n                            zoomY: 1\n                        });\n                        this.bindEvents();\n                    }\n                    Screen.prototype.getCameraSettings = function() {\n                        var _a = this.chartState.data, w = _a.width, h = _a.height;\n                        var FOV = 75;\n                        var vFOV = FOV * (Math.PI / 180);\n                        return {\n                            FOV: FOV,\n                            aspect: w / h,\n                            near: .1,\n                            far: 5e3,\n                            z: h / (2 * Math.tan(vFOV / 2)),\n                            x: w / 2,\n                            y: h / 2\n                        };\n                    };\n                    Screen.prototype.onZoomFrame = function(cb) {\n                        var _this = this;\n                        var eventName = \"zoomFrame\";\n                        this.ee.on(eventName, cb);\n                        return function() {\n                            _this.ee.off(eventName, cb);\n                        };\n                    };\n                    Screen.prototype.onScrollFrame = function(cb) {\n                        var _this = this;\n                        var eventName = \"scrollFrame\";\n                        this.ee.on(eventName, cb);\n                        return function() {\n                            _this.ee.off(eventName, cb);\n                        };\n                    };\n                    Screen.prototype.onTransformationFrame = function(cb) {\n                        var _this = this;\n                        var eventName = \"transformationFrame\";\n                        this.ee.on(eventName, cb);\n                        return function() {\n                            _this.ee.off(eventName, cb);\n                        };\n                    };\n                    Screen.prototype.cameraIsMoving = function() {\n                        return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n                    };\n                    Screen.prototype.transform = function(options, silent) {\n                        if (silent === void 0) {\n                            silent = false;\n                        }\n                        var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n                        if (scrollX != void 0) this.options.scrollX = scrollX;\n                        if (scrollY != void 0) this.options.scrollY = scrollY;\n                        if (zoomX != void 0) this.options.zoomX = zoomX;\n                        if (zoomY != void 0) this.options.zoomY = zoomY;\n                        if (scrollX != void 0 || zoomX) {\n                            options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n                            this.options.scrollXVal = options.scrollXVal;\n                        }\n                        if (scrollY != void 0 || zoomY) {\n                            options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n                            this.options.scrollYVal = options.scrollYVal;\n                        }\n                        if (silent) return;\n                        this.ee.emit(\"transformationFrame\", options);\n                        if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n                            this.ee.emit(\"scrollFrame\", options);\n                        }\n                        if (options.zoomX != void 0 || options.zoomY != void 0) {\n                            this.ee.emit(\"zoomFrame\", options);\n                        }\n                    };\n                    Screen.prototype.bindEvents = function() {\n                        var _this = this;\n                        var state = this.chartState;\n                        state.onChange(function(changedProps) {\n                            if (changedProps.xAxis && changedProps.xAxis.range) {\n                                if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n                                if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n                            }\n                            if (changedProps.yAxis && changedProps.yAxis.range) {\n                                if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n                                if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n                            }\n                        });\n                        state.onDestroy(function() {\n                            return _this.onDestroyHandler();\n                        });\n                    };\n                    Screen.prototype.onDestroyHandler = function() {\n                        this.ee.removeAllListeners();\n                        this.scrollXAnimation && this.scrollXAnimation.kill();\n                        this.scrollYAnimation && this.scrollYAnimation.kill();\n                        this.zoomXAnimation && this.zoomXAnimation.kill();\n                        this.zoomYAnimation && this.zoomYAnimation.kill();\n                    };\n                    Screen.prototype.onScrollXHandler = function(changedProps) {\n                        var _this = this;\n                        var state = this.chartState;\n                        var isDragMode = state.data.cursor.dragMode;\n                        var animations = state.data.animations;\n                        var canAnimate = animations.enabled && !isDragMode;\n                        var zoomXChanged = changedProps.xAxis.range.zoom;\n                        var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n                        var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n                        var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n                        if (this.scrollXAnimation) this.scrollXAnimation.pause();\n                        var range = state.data.xAxis.range;\n                        var targetX = range.scroll * range.scaleFactor * range.zoom;\n                        this.currentScrollX.x = this.options.scrollX;\n                        var cb = function() {\n                            _this.transform({\n                                scrollX: _this.currentScrollX.x\n                            });\n                        };\n                        if (canAnimate) {\n                            this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n                                x: targetX,\n                                ease: ease\n                            });\n                            this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n                        } else {\n                            this.currentScrollX.x = targetX;\n                            cb();\n                        }\n                    };\n                    Screen.prototype.onScrollYHandler = function() {\n                        var _this = this;\n                        var state = this.chartState;\n                        var animations = state.data.animations;\n                        var canAnimate = animations.enabled;\n                        var time = animations.zoomSpeed;\n                        if (this.scrollYAnimation) this.scrollYAnimation.pause();\n                        var range = state.data.yAxis.range;\n                        var targetY = range.scroll * range.scaleFactor * range.zoom;\n                        this.currentScrollY.y = this.options.scrollY;\n                        var cb = function() {\n                            _this.transform({\n                                scrollY: _this.currentScrollY.y\n                            });\n                        };\n                        if (canAnimate) {\n                            this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n                                y: targetY,\n                                ease: animations.zoomEase\n                            });\n                            this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n                        } else {\n                            this.currentScrollY.y = targetY;\n                            cb();\n                        }\n                    };\n                    Screen.prototype.onZoomXHandler = function() {\n                        var _this = this;\n                        var state = this.chartState;\n                        var animations = state.data.animations;\n                        var canAnimate = animations.enabled;\n                        var time = animations.zoomSpeed;\n                        var targetZoom = state.data.xAxis.range.zoom;\n                        if (this.zoomXAnimation) this.zoomXAnimation.pause();\n                        var cb = function() {\n                            _this.transform({\n                                zoomX: _this.currentZoomX.val\n                            });\n                        };\n                        if (canAnimate) {\n                            this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n                                val: targetZoom,\n                                ease: animations.zoomEase\n                            });\n                            this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n                        } else {\n                            this.currentZoomX.val = targetZoom;\n                            cb();\n                        }\n                    };\n                    Screen.prototype.onZoomYHandler = function() {\n                        var _this = this;\n                        var state = this.chartState;\n                        var animations = state.data.animations;\n                        var canAnimate = animations.enabled;\n                        var time = animations.zoomSpeed;\n                        var targetZoom = state.data.yAxis.range.zoom;\n                        if (this.zoomYAnimation) this.zoomYAnimation.pause();\n                        var cb = function() {\n                            _this.transform({\n                                zoomY: _this.currentZoomY.val\n                            });\n                        };\n                        if (canAnimate) {\n                            this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n                                val: targetZoom,\n                                ease: animations.zoomEase\n                            });\n                            this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n                        } else {\n                            this.currentZoomY.val = targetZoom;\n                            cb();\n                        }\n                    };\n                    Screen.prototype.getPointOnXAxis = function(xVal) {\n                        var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                        var zoom = this.options.zoomX;\n                        return (xVal - zeroVal) * scaleFactor * zoom;\n                    };\n                    Screen.prototype.getPointOnYAxis = function(yVal) {\n                        var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                        var zoom = this.options.zoomY;\n                        return (yVal - zeroVal) * scaleFactor * zoom;\n                    };\n                    Screen.prototype.getPointOnChart = function(xVal, yVal) {\n                        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n                    };\n                    Screen.prototype.getValueOnXAxis = function(x) {\n                        return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n                    };\n                    Screen.prototype.valueToPxByXAxis = function(xVal) {\n                        return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n                    };\n                    Screen.prototype.valueToPxByYAxis = function(yVal) {\n                        return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n                    };\n                    Screen.prototype.pxToValueByXAxis = function(xVal) {\n                        return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n                    };\n                    Screen.prototype.pxToValueByYAxis = function(yVal) {\n                        return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n                    };\n                    Screen.prototype.getValueByScreenX = function(x) {\n                        return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n                    };\n                    Screen.prototype.getValueByScreenY = function(y) {\n                        return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n                    };\n                    Screen.prototype.getScreenXByValue = function(xVal) {\n                        var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n                    };\n                    Screen.prototype.getScreenXByPoint = function(xVal) {\n                        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n                    };\n                    Screen.prototype.getPointByScreenX = function(screenX) {\n                        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n                    };\n                    Screen.prototype.getPointByScreenY = function(screenY) {\n                        return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n                    };\n                    Screen.prototype.getTop = function() {\n                        return this.getPointByScreenY(this.chartState.data.height);\n                    };\n                    Screen.prototype.getBottom = function() {\n                        return this.getPointByScreenY(0);\n                    };\n                    Screen.prototype.getLeft = function() {\n                        return this.getPointByScreenX(0);\n                    };\n                    Screen.prototype.getScreenRightVal = function() {\n                        return this.getValueByScreenX(this.chartState.data.width);\n                    };\n                    Screen.prototype.getTopVal = function() {\n                        return this.getValueByScreenY(this.chartState.data.height);\n                    };\n                    Screen.prototype.getBottomVal = function() {\n                        return this.getValueByScreenY(0);\n                    };\n                    Screen.prototype.getCenterYVal = function() {\n                        return this.getValueByScreenY(this.chartState.data.height / 2);\n                    };\n                    return Screen;\n                }();\n                exports.Screen = Screen;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Utils_1 = __webpack_require__(14);\n                var interfaces_1 = __webpack_require__(21);\n                var EventEmmiter_1 = __webpack_require__(13);\n                var AXIS_MARK_DEFAULT_OPTIONS = {\n                    type: \"simple\",\n                    lineWidth: 1,\n                    value: 0,\n                    showValue: false,\n                    stickToEdges: false,\n                    lineColor: \"#FFFFFF\",\n                    title: \"\"\n                };\n                var AxisMarks = function() {\n                    function AxisMarks(chartState, axisType) {\n                        this.items = {};\n                        this.chartState = chartState;\n                        this.ee = new EventEmmiter_1.EventEmitter();\n                        this.axisType = axisType;\n                        var marks = this.items;\n                        var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n                        for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n                            var options = axisMarksOptions_1[_i];\n                            var axisMark = void 0;\n                            options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n                            if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n                            if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n                            if (options.type == \"timeleft\") {\n                                axisMark = new AxisTimeleftMark(chartState, axisType, options);\n                            } else {\n                                axisMark = new AxisMark(chartState, axisType, options);\n                            }\n                            marks[options.name] = axisMark;\n                        }\n                        this.bindEvents();\n                    }\n                    AxisMarks.prototype.bindEvents = function() {\n                        var _this = this;\n                        this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                            _this.onTrendChange(trendName, newData);\n                        });\n                        this.chartState.onDestroy(function() {\n                            return _this.ee.removeAllListeners();\n                        });\n                    };\n                    AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n                        if (!newData) return;\n                        var startVal = newData[0].xVal;\n                        var endVal = newData[newData.length - 1].xVal;\n                        var marks = this.items;\n                        for (var markName in marks) {\n                            var mark = marks[markName];\n                            var markVal = mark.options.value;\n                            var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n                            if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n                        }\n                    };\n                    AxisMarks.prototype.getItems = function() {\n                        return this.items;\n                    };\n                    AxisMarks.prototype.getItem = function(markName) {\n                        return this.items[markName];\n                    };\n                    return AxisMarks;\n                }();\n                exports.AxisMarks = AxisMarks;\n                var AxisMark = function() {\n                    function AxisMark(chartState, axisType, options) {\n                        this.renderOnTrendsChange = false;\n                        this.ee = new EventEmmiter_1.EventEmitter();\n                        this.options = options;\n                        this.axisType = axisType;\n                        this.chartState = chartState;\n                        this.bindEvents();\n                    }\n                    AxisMark.prototype.bindEvents = function() {};\n                    AxisMark.prototype.setOptions = function(newOptions) {\n                        var value = this.options.value;\n                        this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n                        if (this.options.value !== value) this.ee.emit(\"valueChange\");\n                        this.ee.emit(\"onDisplayedValueChange\");\n                    };\n                    AxisMark.prototype.getDisplayedVal = function() {\n                        var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n                        return String(displayedValue !== void 0 ? displayedValue : value);\n                    };\n                    AxisMark.prototype.onMarkCrossed = function(cb) {\n                        var _this = this;\n                        this.ee.on(\"markCrossed\", cb);\n                        return function() {\n                            _this.ee.off(\"markCrossed\", cb);\n                        };\n                    };\n                    AxisMark.prototype.onValueChange = function(cb) {\n                        var _this = this;\n                        this.ee.on(\"valueChange\", cb);\n                        return function() {\n                            _this.ee.off(\"valueChange\", cb);\n                        };\n                    };\n                    AxisMark.prototype.onDisplayedValueChange = function(cb) {\n                        var _this = this;\n                        this.ee.on(\"onDisplayedValueChange\", cb);\n                        return function() {\n                            _this.ee.off(\"onDisplayedValueChange\", cb);\n                        };\n                    };\n                    AxisMark.typeName = \"simple\";\n                    return AxisMark;\n                }();\n                exports.AxisMark = AxisMark;\n                var AxisTimeleftMark = function(_super) {\n                    __extends(AxisTimeleftMark, _super);\n                    function AxisTimeleftMark() {\n                        _super.apply(this, arguments);\n                        this.renderOnTrendsChange = true;\n                    }\n                    AxisTimeleftMark.prototype.getDisplayedVal = function() {\n                        var markVal = this.options.value;\n                        var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n                        var time = markVal - maxXVal;\n                        if (time < 0) time = 0;\n                        return Utils_1.Utils.msToTimeString(time);\n                    };\n                    AxisTimeleftMark.prototype.bindEvents = function() {\n                        var _this = this;\n                        this.chartState.onTrendsChange(function() {\n                            return _this.onTrendsChange();\n                        });\n                    };\n                    AxisTimeleftMark.prototype.onTrendsChange = function() {\n                        this.ee.emit(\"onDisplayedValueChange\");\n                    };\n                    AxisTimeleftMark.typeName = \"timeleft\";\n                    return AxisTimeleftMark;\n                }(AxisMark);\n                exports.AxisTimeleftMark = AxisTimeleftMark;\n            }, function(module, exports) {\n                \"use strict\";\n                (function(AXIS_RANGE_TYPE) {\n                    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n                    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n                    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n                    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n                })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n                var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n                (function(AXIS_TYPE) {\n                    AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n                    AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n                })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n                var AXIS_TYPE = exports.AXIS_TYPE;\n                (function(AXIS_DATA_TYPE) {\n                    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n                    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n                })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n                var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Mesh = THREE.Mesh;\n                var Object3D = THREE.Object3D;\n                var Widget_1 = __webpack_require__(15);\n                var GridWidget_1 = __webpack_require__(23);\n                var Utils_1 = __webpack_require__(14);\n                var interfaces_1 = __webpack_require__(21);\n                var AxisWidget = function(_super) {\n                    __extends(AxisWidget, _super);\n                    function AxisWidget(state) {\n                        var _this = this;\n                        _super.call(this, state);\n                        this.isDestroyed = false;\n                        this.object3D = new Object3D();\n                        this.axisXObject = new Object3D();\n                        this.axisYObject = new Object3D();\n                        this.object3D.add(this.axisXObject);\n                        this.object3D.add(this.axisYObject);\n                        this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n                        this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n                            return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                        }, 1e3);\n                        this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n                    }\n                    AxisWidget.prototype.bindEvents = function() {\n                        var _this = this;\n                        var state = this.chartState;\n                        this.bindEvent(state.screen.onTransformationFrame(function(options) {\n                            _this.onScrollChange(options.scrollX, options.scrollY);\n                        }), state.screen.onZoomFrame(function(options) {\n                            _this.onZoomFrame(options);\n                        }), state.onDestroy(function() {\n                            return _this.onDestroy();\n                        }), state.onResize(function() {\n                            return _this.onResize();\n                        }));\n                    };\n                    AxisWidget.prototype.onDestroy = function() {\n                        this.isDestroyed = true;\n                        this.unbindEvents();\n                    };\n                    AxisWidget.prototype.onScrollChange = function(x, y) {\n                        if (y != void 0) {\n                            this.axisYObject.position.y = y;\n                            this.axisXObject.position.y = y;\n                        }\n                        if (x != void 0) {\n                            this.axisYObject.position.x = x;\n                            this.updateAxisXRequest();\n                        }\n                    };\n                    AxisWidget.prototype.onResize = function() {\n                        this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n                    };\n                    AxisWidget.prototype.setupAxis = function(orientation) {\n                        var _this = this;\n                        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                        var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                        var canvasWidth = 0, canvasHeight = 0;\n                        if (isXAxis) {\n                            this.axisXObject.traverse(function(obj) {\n                                return _this.axisXObject.remove(obj);\n                            });\n                            canvasWidth = visibleWidth * 3;\n                            canvasHeight = 50;\n                        } else {\n                            this.axisYObject.traverse(function(obj) {\n                                return _this.axisYObject.remove(obj);\n                            });\n                            canvasWidth = 50;\n                            canvasHeight = visibleHeight * 3;\n                        }\n                        var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n                            ctx.beginPath();\n                            ctx.font = \"10px Arial\";\n                            ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n                            ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n                        });\n                        var material = new THREE.MeshBasicMaterial({\n                            map: texture,\n                            side: THREE.FrontSide\n                        });\n                        material.transparent = true;\n                        var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n                        if (isXAxis) {\n                            axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n                            this.axisXObject.add(axisMesh);\n                        } else {\n                            axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n                            this.axisYObject.add(axisMesh);\n                        }\n                        this.updateAxis(orientation);\n                    };\n                    AxisWidget.prototype.getObject3D = function() {\n                        return this.object3D;\n                    };\n                    AxisWidget.prototype.updateAxis = function(orientation) {\n                        if (this.isDestroyed) return;\n                        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                        var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                        var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n                        var axisOptions;\n                        var axisMesh;\n                        var axisGridParams;\n                        if (isXAxis) {\n                            axisMesh = this.axisXObject.children[0];\n                            axisOptions = this.chartState.data.xAxis;\n                            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n                        } else {\n                            axisMesh = this.axisYObject.children[0];\n                            axisOptions = this.chartState.data.yAxis;\n                            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n                        }\n                        var geometry = axisMesh.geometry;\n                        var canvasWidth = geometry.parameters.width;\n                        var canvasHeight = geometry.parameters.height;\n                        var texture = axisMesh.material.map;\n                        var ctx = texture.image.getContext(\"2d\");\n                        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                        if (isXAxis) {\n                            axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n                        }\n                        var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n                        var startVal = axisGridParams.start - edgeOffset;\n                        var endVal = axisGridParams.end + edgeOffset;\n                        ctx.beginPath();\n                        for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n                            var displayedValue = \"\";\n                            if (isXAxis) {\n                                var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n                                ctx.textAlign = \"center\";\n                                if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n                                    displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n                                } else {\n                                    displayedValue = Number(val.toFixed(14)).toString();\n                                }\n                                ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n                            } else {\n                                var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n                                ctx.textAlign = \"right\";\n                                displayedValue = Number(val.toFixed(14)).toString();\n                                ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n                            }\n                            ctx.stroke();\n                        }\n                        ctx.stroke();\n                        ctx.closePath();\n                        texture.needsUpdate = true;\n                    };\n                    AxisWidget.prototype.onZoomFrame = function(options) {\n                        if (options.zoomX) {\n                            this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                        }\n                        if (options.zoomY) {\n                            this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n                        }\n                    };\n                    AxisWidget.getDateStr = function(timestamp, gridParams) {\n                        var sec = 1e3;\n                        var min = sec * 60;\n                        var hour = min * 60;\n                        var day = hour * 60;\n                        var step = gridParams.step;\n                        var d = new Date(timestamp);\n                        var tf = function(num) {\n                            return Utils_1.Utils.toFixed(num, 2);\n                        };\n                        return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n                    };\n                    AxisWidget.widgetName = \"Axis\";\n                    return AxisWidget;\n                }(Widget_1.ChartWidget);\n                exports.AxisWidget = AxisWidget;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Vector3 = THREE.Vector3;\n                var Widget_1 = __webpack_require__(15);\n                var LineSegments = THREE.LineSegments;\n                var Utils_1 = __webpack_require__(14);\n                var GridWidget = function(_super) {\n                    __extends(GridWidget, _super);\n                    function GridWidget(chartState) {\n                        _super.call(this, chartState);\n                        this.isDestroyed = false;\n                        var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                        this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n                        this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n                        this.initGrid();\n                        this.updateGrid();\n                    }\n                    GridWidget.prototype.bindEvents = function() {\n                        var _this = this;\n                        var updateGridThrottled = Utils_1.Utils.throttle(function() {\n                            return _this.updateGrid();\n                        }, 1e3);\n                        this.bindEvent(this.chartState.onScroll(function() {\n                            return updateGridThrottled();\n                        }), this.chartState.screen.onZoomFrame(function(options) {\n                            updateGridThrottled();\n                            _this.onZoomFrame(options);\n                        }), this.chartState.onDestroy(function() {\n                            _this.isDestroyed = true;\n                            _this.unbindEvents();\n                        }), this.chartState.onResize(function() {\n                            _this.updateGrid();\n                        }));\n                    };\n                    GridWidget.prototype.initGrid = function() {\n                        var geometry = new THREE.Geometry();\n                        var material = new THREE.LineBasicMaterial({\n                            linewidth: 1,\n                            opacity: .1,\n                            transparent: true\n                        });\n                        var xLinesCount = this.gridSizeH;\n                        var yLinesCount = this.gridSizeV;\n                        while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                        while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                        this.lineSegments = new LineSegments(geometry, material);\n                        this.lineSegments.position.setZ(-1);\n                        this.lineSegments.frustumCulled = false;\n                    };\n                    GridWidget.prototype.updateGrid = function() {\n                        if (this.isDestroyed) return;\n                        var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n                        var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n                        var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n                        var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n                        var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n                        var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n                        var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n                        var startXVal = axisXGrid.start + gridScrollXVal;\n                        var startYVal = axisYGrid.start + gridScrollYVal;\n                        var geometry = this.lineSegments.geometry;\n                        var vertices = geometry.vertices;\n                        var lineInd = 0;\n                        for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n                            var value = startXVal + i * axisXGrid.step;\n                            var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                            lineInd++;\n                        }\n                        for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n                            var value = startYVal + i * axisYGrid.step;\n                            var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                            lineInd++;\n                        }\n                        geometry.verticesNeedUpdate = true;\n                        this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n                    };\n                    GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n                        var chartState = this.chartState;\n                        var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n                        var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n                        return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n                    };\n                    GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n                        var chartState = this.chartState;\n                        var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n                        var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n                        return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n                    };\n                    GridWidget.prototype.onZoomFrame = function(options) {\n                        var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                        if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n                        if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n                    };\n                    GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n                        var axisRange = axisOptions.range;\n                        var from = axisRange.from;\n                        var to = axisRange.to;\n                        var axisLength = to - from;\n                        var gridStep = 0;\n                        var gridStepInPixels = 0;\n                        var minGridStepInPixels = axisOptions.gridMinSize;\n                        var axisLengthStr = String(axisLength);\n                        var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n                        var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n                        var gridStepFound = false;\n                        var digitPos = 0;\n                        while (!gridStepFound) {\n                            var power = intPartLength - digitPos - 1;\n                            var multiplier = Math.pow(10, power) || 1;\n                            var dividers = [ 1, 2, 5 ];\n                            for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n                                var nextGridStep = multiplier / dividers[dividerInd];\n                                var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n                                if (nextGridStepInPixels >= minGridStepInPixels) {\n                                    gridStep = nextGridStep;\n                                    gridStepInPixels = nextGridStepInPixels;\n                                } else {\n                                    gridStepFound = true;\n                                    if (gridStep === 0) {\n                                        gridStep = nextGridStep;\n                                        gridStepInPixels = nextGridStepInPixels;\n                                    }\n                                    break;\n                                }\n                            }\n                            if (!gridStepFound) digitPos++;\n                        }\n                        var gridStart = Math.floor(from / gridStep) * gridStep;\n                        var gridEnd = Math.floor(to / gridStep) * gridStep;\n                        return {\n                            start: gridStart,\n                            end: gridEnd,\n                            step: gridStep,\n                            stepInPx: gridStepInPixels,\n                            length: gridEnd - gridStart,\n                            segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n                        };\n                    };\n                    GridWidget.prototype.getObject3D = function() {\n                        return this.lineSegments;\n                    };\n                    GridWidget.widgetName = \"Grid\";\n                    return GridWidget;\n                }(Widget_1.ChartWidget);\n                exports.GridWidget = GridWidget;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Utils_1 = __webpack_require__(14);\n                var Mesh = THREE.Mesh;\n                var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n                var MeshBasicMaterial = THREE.MeshBasicMaterial;\n                var TrendsWidget_1 = __webpack_require__(25);\n                var Trend_1 = __webpack_require__(17);\n                var TrendsLoadingWidget = function(_super) {\n                    __extends(TrendsLoadingWidget, _super);\n                    function TrendsLoadingWidget() {\n                        _super.apply(this, arguments);\n                    }\n                    TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n                        return TrendLoading;\n                    };\n                    TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n                    return TrendsLoadingWidget;\n                }(TrendsWidget_1.TrendsWidget);\n                exports.TrendsLoadingWidget = TrendsLoadingWidget;\n                var TrendLoading = function(_super) {\n                    __extends(TrendLoading, _super);\n                    function TrendLoading(state, trendName) {\n                        _super.call(this, state, trendName);\n                        this.isActive = false;\n                        this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                            map: TrendLoading.createTexture(),\n                            transparent: true\n                        }));\n                        this.deactivate();\n                    }\n                    TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n                        return trendOptions.enabled && chartState.data.animations.enabled;\n                    };\n                    TrendLoading.prototype.getObject3D = function() {\n                        return this.mesh;\n                    };\n                    TrendLoading.prototype.bindEvents = function() {\n                        var _this = this;\n                        _super.prototype.bindEvents.call(this);\n                        this.bindEvent(this.trend.onPrependRequest(function() {\n                            return _this.activate();\n                        }));\n                    };\n                    TrendLoading.prototype.prependData = function() {\n                        this.deactivate();\n                    };\n                    TrendLoading.prototype.activate = function() {\n                        var mesh = this.mesh;\n                        mesh.material.opacity = 1;\n                        mesh.rotation.z = 0;\n                        var animation = TweenLite.to(this.mesh.rotation, .5, {\n                            z: Math.PI * 2\n                        });\n                        animation.eventCallback(\"onComplete\", function() {\n                            animation.restart();\n                        });\n                        this.animation = animation;\n                        this.isActive = true;\n                        this.updatePosition();\n                    };\n                    TrendLoading.prototype.deactivate = function() {\n                        this.animation && this.animation.kill();\n                        this.mesh.material.opacity = 0;\n                        this.isActive = false;\n                    };\n                    TrendLoading.createTexture = function() {\n                        var h = 64, w = 64;\n                        return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                            ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                            ctx.lineWidth = 5;\n                            var center = h / 2;\n                            ctx.beginPath();\n                            ctx.arc(center, center, 22, 0, Math.PI / 2);\n                            ctx.stroke();\n                            ctx.beginPath();\n                            ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n                            ctx.stroke();\n                            ctx.beginPath();\n                            ctx.arc(center, center, 3, 0, Math.PI * 2);\n                            ctx.stroke();\n                        });\n                    };\n                    TrendLoading.prototype.onZoomFrame = function() {\n                        this.updatePosition();\n                    };\n                    TrendLoading.prototype.updatePosition = function() {\n                        if (!this.isActive) return;\n                        var trend = this.trend;\n                        var segment = trend.segments.getStartSegment();\n                        var x, y;\n                        if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                            x = segment.currentAnimationState.startXVal;\n                            y = segment.currentAnimationState.startYVal;\n                        } else {\n                            x = segment.currentAnimationState.xVal - segment.maxLength;\n                            y = segment.currentAnimationState.yVal;\n                        }\n                        var pointVector = this.chartState.screen.getPointOnChart(x, y);\n                        this.mesh.position.set(pointVector.x, pointVector.y, 0);\n                    };\n                    return TrendLoading;\n                }(TrendsWidget_1.TrendWidget);\n                exports.TrendLoading = TrendLoading;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Widget_1 = __webpack_require__(15);\n                var Object3D = THREE.Object3D;\n                var TrendsWidget = function(_super) {\n                    __extends(TrendsWidget, _super);\n                    function TrendsWidget(state) {\n                        _super.call(this, state);\n                        this.widgets = {};\n                        this.object3D = new Object3D();\n                        this.onTrendsChange();\n                    }\n                    TrendsWidget.prototype.bindEvents = function() {\n                        var _this = this;\n                        var state = this.chartState;\n                        state.onTrendsChange(function() {\n                            return _this.onTrendsChange();\n                        });\n                        state.onTrendChange(function(trendName, changedOptions, newData) {\n                            _this.onTrendChange(trendName, changedOptions, newData);\n                        });\n                    };\n                    TrendsWidget.prototype.onTrendsChange = function() {\n                        var trendsOptions = this.chartState.data.trends;\n                        var TrendWidgetClass = this.getTrendWidgetClass();\n                        for (var trendName in trendsOptions) {\n                            var trendOptions = trendsOptions[trendName];\n                            var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n                            if (widgetCanBeEnabled && !this.widgets[trendName]) {\n                                this.createTrendWidget(trendName);\n                            } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n                                this.destroyTrendWidget(trendName);\n                            }\n                        }\n                    };\n                    TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n                        var widget = this.widgets[trendName];\n                        if (!widget) return;\n                        widget.onTrendChange(changedOptions);\n                        if (newData) {\n                            var data = this.chartState.getTrend(trendName).getData();\n                            var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                            isAppend ? widget.appendData(newData) : widget.prependData(newData);\n                        }\n                    };\n                    TrendsWidget.prototype.getObject3D = function() {\n                        return this.object3D;\n                    };\n                    TrendsWidget.prototype.createTrendWidget = function(trendName) {\n                        var WidgetConstructor = this.getTrendWidgetClass();\n                        var widget = new WidgetConstructor(this.chartState, trendName);\n                        this.widgets[trendName] = widget;\n                        var widgetObject = widget.getObject3D();\n                        widgetObject.name = trendName;\n                        this.object3D.add(widget.getObject3D());\n                    };\n                    TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n                        this.widgets[trendName].onDestroy();\n                        delete this.widgets[trendName];\n                        var widgetObject = this.object3D.getObjectByName(trendName);\n                        this.object3D.remove(widgetObject);\n                    };\n                    return TrendsWidget;\n                }(Widget_1.ChartWidget);\n                exports.TrendsWidget = TrendsWidget;\n                var TrendWidget = function() {\n                    function TrendWidget(chartState, trendName) {\n                        this.chartState = chartState;\n                        this.trendName = trendName;\n                        this.unsubscribers = [];\n                        this.trend = chartState.trendsManager.getTrend(trendName);\n                        this.chartState = chartState;\n                        this.bindEvents();\n                    }\n                    TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n                        return trendOptions.enabled;\n                    };\n                    TrendWidget.prototype.appendData = function(newData) {};\n                    TrendWidget.prototype.prependData = function(newData) {};\n                    TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n                    TrendWidget.prototype.onDestroy = function() {\n                        for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n                            var unsubscriber = _a[_i];\n                            unsubscriber();\n                        }\n                    };\n                    TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n                    TrendWidget.prototype.onZoomFrame = function(options) {};\n                    TrendWidget.prototype.onTransformationFrame = function(options) {};\n                    TrendWidget.prototype.onZoom = function() {};\n                    TrendWidget.prototype.bindEvents = function() {\n                        var _this = this;\n                        this.bindEvent(this.trend.segments.onAnimationFrame(function(trendPoints) {\n                            return _this.onSegmentsAnimate(trendPoints);\n                        }));\n                        this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n                            return _this.onTransformationFrame(options);\n                        }));\n                        this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n                            return _this.onZoomFrame(options);\n                        }));\n                        this.bindEvent(this.chartState.onZoom(function() {\n                            return _this.onZoom();\n                        }));\n                    };\n                    TrendWidget.prototype.bindEvent = function(unsubscriber) {\n                        this.unsubscribers.push(unsubscriber);\n                    };\n                    return TrendWidget;\n                }();\n                exports.TrendWidget = TrendWidget;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Widget_1 = __webpack_require__(15);\n                var Object3D = THREE.Object3D;\n                var Geometry = THREE.Geometry;\n                var LineBasicMaterial = THREE.LineBasicMaterial;\n                var Vector3 = THREE.Vector3;\n                var Utils_1 = __webpack_require__(14);\n                var Line = THREE.Line;\n                var Mesh = THREE.Mesh;\n                var interfaces_1 = __webpack_require__(21);\n                var AxisMarksWidget = function(_super) {\n                    __extends(AxisMarksWidget, _super);\n                    function AxisMarksWidget(chartState) {\n                        _super.call(this, chartState);\n                        this.axisMarksWidgets = [];\n                        this.object3D = new Object3D();\n                        var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n                        var items = xAxisMarks.getItems();\n                        for (var markName in items) {\n                            this.createAxisMark(items[markName]);\n                        }\n                        items = yAxisMarks.getItems();\n                        for (var markName in items) {\n                            this.createAxisMark(items[markName]);\n                        }\n                    }\n                    AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n                        var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n                        this.axisMarksWidgets.push(axisMarkWidget);\n                        this.object3D.add(axisMarkWidget.getObject3D());\n                    };\n                    AxisMarksWidget.prototype.bindEvents = function() {\n                        var _this = this;\n                        this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n                            return _this.updateMarksPositions();\n                        }), this.chartState.onResize(function() {\n                            return _this.updateMarksPositions();\n                        }));\n                    };\n                    AxisMarksWidget.prototype.updateMarksPositions = function() {\n                        for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n                            var widget = _a[_i];\n                            widget.updatePosition();\n                        }\n                    };\n                    AxisMarksWidget.prototype.getObject3D = function() {\n                        return this.object3D;\n                    };\n                    AxisMarksWidget.widgetName = \"AxisMarks\";\n                    return AxisMarksWidget;\n                }(Widget_1.ChartWidget);\n                exports.AxisMarksWidget = AxisMarksWidget;\n                var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n                    var axisMark = axisMarkWidget.axisMark;\n                    ctx.fillStyle = axisMark.options.lineColor;\n                    ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n                    var xCoord = 15;\n                    if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n                        ctx.textAlign = \"end\";\n                        xCoord = axisMarkWidget.indicatorWidth;\n                    }\n                    ctx.fillText(axisMark.options.title, xCoord, 20);\n                    if (!axisMark.options.showValue) return;\n                    ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n                    ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n                };\n                var INDICATOR_POS_Z = .1;\n                var AxisMarkWidget = function() {\n                    function AxisMarkWidget(chartState, axisMark) {\n                        this.indicatorWidth = 128;\n                        this.indicatorHeight = 64;\n                        this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n                        this.chartState = chartState;\n                        this.axisMark = axisMark;\n                        this.axisType = axisMark.axisType;\n                        this.frameValue = axisMark.options.value;\n                        this.object3D = new Object3D();\n                        this.object3D.position.setZ(-.1);\n                        this.line = this.createLine();\n                        this.object3D.add(this.line);\n                        this.indicator = this.createIndicator();\n                        this.object3D.add(this.indicator);\n                        this.renderIndicator();\n                        this.updatePosition();\n                        this.bindEvents();\n                    }\n                    AxisMarkWidget.prototype.getObject3D = function() {\n                        return this.object3D;\n                    };\n                    AxisMarkWidget.prototype.createLine = function() {\n                        var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n                        var lineGeometry = new Geometry();\n                        lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n                        return new Line(lineGeometry, new LineBasicMaterial({\n                            color: Utils_1.Utils.getHexColor(lineColor),\n                            linewidth: lineWidth\n                        }));\n                    };\n                    AxisMarkWidget.prototype.createIndicator = function() {\n                        var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n                        var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n                            ctx.beginPath();\n                            ctx.font = \"10px Arial\";\n                        });\n                        var material = new THREE.MeshBasicMaterial({\n                            map: texture,\n                            side: THREE.FrontSide\n                        });\n                        material.transparent = true;\n                        return new Mesh(new THREE.PlaneGeometry(width, height), material);\n                    };\n                    AxisMarkWidget.prototype.renderIndicator = function() {\n                        var texture = this.indicator.material.map;\n                        var ctx = texture.image.getContext(\"2d\");\n                        DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n                        texture.needsUpdate = true;\n                    };\n                    AxisMarkWidget.prototype.bindEvents = function() {\n                        var _this = this;\n                        this.axisMark.onDisplayedValueChange(function() {\n                            return _this.renderIndicator();\n                        });\n                        this.axisMark.onValueChange(function() {\n                            return _this.onValueChangeHandler();\n                        });\n                    };\n                    AxisMarkWidget.prototype.onValueChangeHandler = function() {\n                        var _this = this;\n                        if (this.moveAnimation) this.moveAnimation.kill();\n                        var animations = this.chartState.data.animations;\n                        var targetValue = this.axisMark.options.value;\n                        var cb = function() {\n                            _this.updatePosition();\n                        };\n                        if (animations.enabled) {\n                            this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n                                frameValue: targetValue,\n                                ease: animations.trendChangeEase\n                            });\n                            this.moveAnimation.eventCallback(\"onUpdate\", cb);\n                        } else {\n                            this.frameValue = targetValue;\n                            cb();\n                        }\n                    };\n                    AxisMarkWidget.prototype.updatePosition = function() {\n                        var chartState = this.chartState;\n                        var screen = chartState.screen;\n                        var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n                        var lineGeometry = this.line.geometry;\n                        var hasStickMode = this.axisMark.options.stickToEdges;\n                        var _a = this.chartState.data, width = _a.width, height = _a.height;\n                        if (isXAxis) {\n                            this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n                            this.object3D.position.y = screen.getBottom();\n                            lineGeometry.vertices[1].setY(height);\n                            this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n                        } else {\n                            var val = this.frameValue;\n                            var bottomVal = screen.getBottomVal();\n                            var topVal = screen.getTopVal();\n                            var needToStickOnTop = hasStickMode && val > topVal;\n                            var needToStickOnBottom = hasStickMode && val < bottomVal;\n                            var centerYVal = screen.getCenterYVal();\n                            this.object3D.position.x = screen.getLeft();\n                            if (needToStickOnTop) {\n                                this.object3D.position.y = screen.getTop();\n                            } else if (needToStickOnBottom) {\n                                this.object3D.position.y = screen.getBottom();\n                            } else {\n                                this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n                            }\n                            lineGeometry.vertices[1].setX(width);\n                            var indicatorPosY = val > centerYVal ? -35 : 10;\n                            this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n                        }\n                        lineGeometry.verticesNeedUpdate = true;\n                    };\n                    AxisMarkWidget.typeName = \"simple\";\n                    return AxisMarkWidget;\n                }();\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Widget_1 = __webpack_require__(15);\n                var LineSegments = THREE.LineSegments;\n                var Vector3 = THREE.Vector3;\n                var BorderWidget = function(_super) {\n                    __extends(BorderWidget, _super);\n                    function BorderWidget(chartState) {\n                        _super.call(this, chartState);\n                        var _a = chartState.data, width = _a.width, height = _a.height;\n                        var geometry = new THREE.Geometry();\n                        var material = new THREE.LineBasicMaterial({\n                            linewidth: 1,\n                            opacity: 0,\n                            transparent: true\n                        });\n                        geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n                        this.lineSegments = new LineSegments(geometry, material);\n                    }\n                    BorderWidget.prototype.getObject3D = function() {\n                        return this.lineSegments;\n                    };\n                    BorderWidget.widgetName = \"Border\";\n                    return BorderWidget;\n                }(Widget_1.ChartWidget);\n                exports.BorderWidget = BorderWidget;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Utils_1 = __webpack_require__(14);\n                var Mesh = THREE.Mesh;\n                var TrendsWidget_1 = __webpack_require__(25);\n                var Color = THREE.Color;\n                var CANVAS_WIDTH = 128;\n                var CANVAS_HEIGHT = 64;\n                var OFFSET_X = 15;\n                var TrendsIndicatorWidget = function(_super) {\n                    __extends(TrendsIndicatorWidget, _super);\n                    function TrendsIndicatorWidget() {\n                        _super.apply(this, arguments);\n                    }\n                    TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n                        return TrendIndicator;\n                    };\n                    TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n                    return TrendsIndicatorWidget;\n                }(TrendsWidget_1.TrendsWidget);\n                exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n                var TrendIndicator = function(_super) {\n                    __extends(TrendIndicator, _super);\n                    function TrendIndicator(state, trendName) {\n                        _super.call(this, state, trendName);\n                        this.initObject();\n                        this.onTrendChange();\n                    }\n                    TrendIndicator.widgetIsEnabled = function(trendOptions) {\n                        return trendOptions.enabled && trendOptions.hasIndicator;\n                    };\n                    TrendIndicator.prototype.getObject3D = function() {\n                        return this.mesh;\n                    };\n                    TrendIndicator.prototype.onTrendChange = function() {\n                        var trendData = this.trend.getData();\n                        var lastItem = trendData[trendData.length - 1];\n                        var texture = this.mesh.material.map;\n                        var ctx = texture.image.getContext(\"2d\");\n                        ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                        ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n                        texture.needsUpdate = true;\n                    };\n                    TrendIndicator.prototype.initObject = function() {\n                        var color = new Color(this.trend.getOptions().lineColor);\n                        var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n                            ctx.beginPath();\n                            ctx.font = \"15px Arial\";\n                            ctx.fillStyle = color.getStyle();\n                            ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                        });\n                        var material = new THREE.MeshBasicMaterial({\n                            map: texture,\n                            side: THREE.FrontSide\n                        });\n                        material.transparent = true;\n                        this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n                    };\n                    TrendIndicator.prototype.onTransformationFrame = function() {\n                        this.segment = this.trend.segments.getEndSegment();\n                        this.updatePosition();\n                    };\n                    TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n                        this.segment = segments.getEndSegment();\n                        this.updatePosition();\n                    };\n                    TrendIndicator.prototype.updatePosition = function() {\n                        var state = this.chartState;\n                        var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n                        var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n                        var screenWidth = state.data.width;\n                        var x = endPointVector.x + OFFSET_X;\n                        var y = endPointVector.y;\n                        var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                        var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n                        if (indicatorIsOutOfScreen) {\n                            if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n                            if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n                            y -= 25;\n                        }\n                        this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n                    };\n                    return TrendIndicator;\n                }(TrendsWidget_1.TrendWidget);\n                exports.TrendIndicator = TrendIndicator;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Geometry = THREE.Geometry;\n                var LineBasicMaterial = THREE.LineBasicMaterial;\n                var Vector3 = THREE.Vector3;\n                var TrendsWidget_1 = __webpack_require__(25);\n                var LineSegments = THREE.LineSegments;\n                var Trend_1 = __webpack_require__(17);\n                var Utils_1 = __webpack_require__(14);\n                var MAX_DISPLAYED_SEGMENTS = 2e3;\n                var TrendsLineWidget = function(_super) {\n                    __extends(TrendsLineWidget, _super);\n                    function TrendsLineWidget() {\n                        _super.apply(this, arguments);\n                    }\n                    TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n                        return TrendLine;\n                    };\n                    TrendsLineWidget.widgetName = \"TrendsLine\";\n                    return TrendsLineWidget;\n                }(TrendsWidget_1.TrendsWidget);\n                exports.TrendsLineWidget = TrendsLineWidget;\n                var TrendLine = function(_super) {\n                    __extends(TrendLine, _super);\n                    function TrendLine(chartState, trendName) {\n                        _super.call(this, chartState, trendName);\n                        this.freeSegmentsInds = [];\n                        this.displayedSegments = {};\n                        var options = this.trend.getOptions();\n                        this.material = new LineBasicMaterial({\n                            color: options.lineColor,\n                            linewidth: options.lineWidth\n                        });\n                        this.initLine();\n                    }\n                    TrendLine.widgetIsEnabled = function(trendOptions) {\n                        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n                    };\n                    TrendLine.prototype.getObject3D = function() {\n                        return this.lineSegments;\n                    };\n                    TrendLine.prototype.bindEvents = function() {\n                        var _this = this;\n                        _super.prototype.bindEvents.call(this);\n                        this.bindEvent(this.trend.segments.onRebuild(function() {\n                            _this.destroySegments();\n                            _this.setupSegments();\n                        }));\n                        this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n                            _this.setupSegments();\n                        }));\n                    };\n                    TrendLine.prototype.initLine = function() {\n                        var geometry = new Geometry();\n                        var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                        var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                        this.scaleXFactor = scaleXFactor;\n                        this.scaleYFactor = scaleYFactor;\n                        this.lineSegments = new LineSegments(geometry, this.material);\n                        this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                        this.lineSegments.frustumCulled = false;\n                        for (var i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\n                            geometry.vertices.push(new Vector3(), new Vector3());\n                            this.freeSegmentsInds.push(i);\n                        }\n                        this.vertices = geometry.vertices;\n                        this.setupSegments();\n                    };\n                    TrendLine.prototype.setupSegments = function() {\n                        var geometry = this.lineSegments.geometry;\n                        var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                        for (var segmentId in this.displayedSegments) {\n                            var lineSegment = this.displayedSegments[segmentId];\n                            var segment_1 = this.trend.segments.segments[lineSegment.segmentId];\n                            var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                            if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n                        }\n                        var segment = firstDisplayedSegment;\n                        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                            this.setupSegment(segment.id, segment.currentAnimationState);\n                            segment = segment.getNext();\n                        }\n                        geometry.verticesNeedUpdate = true;\n                    };\n                    TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n                        var lineSegment = this.displayedSegments[segmentId];\n                        if (!lineSegment) {\n                            if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n                            var ind = this.freeSegmentsInds.pop();\n                            lineSegment = this.displayedSegments[segmentId] = {\n                                segmentId: segmentId,\n                                ind: ind\n                            };\n                        }\n                        var segmentInd = lineSegment.ind;\n                        var lineStartVertex = this.vertices[segmentInd * 2];\n                        var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n                        lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n                        lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n                    };\n                    TrendLine.prototype.destroySegments = function() {\n                        for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n                    };\n                    TrendLine.prototype.destroySegment = function(segmentId) {\n                        var lineSegment = this.displayedSegments[segmentId];\n                        var lineStartVertex = this.vertices[lineSegment.ind * 2];\n                        var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n                        lineStartVertex.set(0, 0, 0);\n                        lineEndVertex.set(0, 0, 0);\n                        delete this.displayedSegments[segmentId];\n                        this.freeSegmentsInds.push(lineSegment.ind);\n                    };\n                    TrendLine.prototype.onZoomFrame = function(options) {\n                        var currentScale = this.lineSegments.scale;\n                        if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                        if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n                    };\n                    TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n                        var geometry = this.lineSegments.geometry;\n                        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                            var segmentId = _a[_i];\n                            if (!this.displayedSegments[segmentId]) continue;\n                            this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n                        }\n                        geometry.verticesNeedUpdate = true;\n                    };\n                    TrendLine.prototype.toLocalX = function(xVal) {\n                        return xVal - this.chartState.data.xAxis.range.zeroVal;\n                    };\n                    TrendLine.prototype.toLocalY = function(yVal) {\n                        return yVal - this.chartState.data.yAxis.range.zeroVal;\n                    };\n                    TrendLine.prototype.toLocalVec = function(vec) {\n                        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n                    };\n                    return TrendLine;\n                }(TrendsWidget_1.TrendWidget);\n                exports.TrendLine = TrendLine;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var TrendsWidget_1 = __webpack_require__(25);\n                var Object3D = THREE.Object3D;\n                var Geometry = THREE.Geometry;\n                var Vector3 = THREE.Vector3;\n                var Mesh = THREE.Mesh;\n                var Line = THREE.Line;\n                var MeshBasicMaterial = THREE.MeshBasicMaterial;\n                var PlaneGeometry = THREE.PlaneGeometry;\n                var Trend_1 = __webpack_require__(17);\n                var LineBasicMaterial = THREE.LineBasicMaterial;\n                var Utils_1 = __webpack_require__(14);\n                var RISE_COLOR = 2927680;\n                var FALL_COLOR = 15619379;\n                var MARGIN_PERCENT = .3;\n                var MAX_CANDLES = 100;\n                var TrendsCandlesWidget = function(_super) {\n                    __extends(TrendsCandlesWidget, _super);\n                    function TrendsCandlesWidget() {\n                        _super.apply(this, arguments);\n                    }\n                    TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n                        return TrendCandlesWidget;\n                    };\n                    TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n                    return TrendsCandlesWidget;\n                }(TrendsWidget_1.TrendsWidget);\n                exports.TrendsCandlesWidget = TrendsCandlesWidget;\n                var TrendCandlesWidget = function(_super) {\n                    __extends(TrendCandlesWidget, _super);\n                    function TrendCandlesWidget(chartState, trendName) {\n                        _super.call(this, chartState, trendName);\n                        this.freeCandlesInds = [];\n                        this.candlesPool = [];\n                        this.candles = {};\n                        this.initObject();\n                    }\n                    TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n                        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n                    };\n                    TrendCandlesWidget.prototype.getObject3D = function() {\n                        return this.object3D;\n                    };\n                    TrendCandlesWidget.prototype.bindEvents = function() {\n                        var _this = this;\n                        _super.prototype.bindEvents.call(this);\n                        this.bindEvent(this.trend.segments.onRebuild(function() {\n                            _this.destroyCandles();\n                            _this.setupCandles();\n                        }));\n                        this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n                            _this.setupCandles();\n                        }));\n                    };\n                    TrendCandlesWidget.prototype.initObject = function() {\n                        var stateData = this.chartState.data;\n                        var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                        var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                        this.scaleXFactor = scaleXFactor;\n                        this.scaleYFactor = scaleYFactor;\n                        this.object3D = new Object3D();\n                        this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                        this.object3D.frustumCulled = false;\n                        for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n                        this.setupCandles();\n                    };\n                    TrendCandlesWidget.prototype.setupCandles = function() {\n                        var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                        for (var segmentId in this.candles) {\n                            var segment_1 = this.candles[segmentId].segment;\n                            var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                            if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n                        }\n                        var segment = firstDisplayedSegment;\n                        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                            this.setupCandle(segment.id, segment.currentAnimationState);\n                            segment = segment.getNext();\n                        }\n                    };\n                    TrendCandlesWidget.prototype.destroyCandles = function() {\n                        for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n                    };\n                    TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n                        var candle = this.candles[segmentId];\n                        this.object3D.remove(candle.getObject3D());\n                        delete this.candles[segmentId];\n                    };\n                    TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n                        var currentScale = this.object3D.scale;\n                        if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                        if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n                    };\n                    TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n                        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                            var segmentId = _a[_i];\n                            if (!this.candles[segmentId]) continue;\n                            var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n                            this.setupCandle(segmentId, segmentState);\n                        }\n                    };\n                    TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n                        var candleInd = candleId % MAX_CANDLES;\n                        var candle = this.candlesPool[candleInd];\n                        if (!candle) {\n                            candle = this.candlesPool[candleInd] = new CandleWidget();\n                        }\n                        if (!this.candles[candleId]) {\n                            this.candles[candleId] = candle;\n                            this.object3D.add(candle.getObject3D());\n                        }\n                        candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n                        candle.setSegment(segmentState);\n                    };\n                    TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n                        return xVal - this.chartState.data.xAxis.range.zeroVal;\n                    };\n                    TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n                        return yVal - this.chartState.data.yAxis.range.zeroVal;\n                    };\n                    TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n                        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n                    };\n                    return TrendCandlesWidget;\n                }(TrendsWidget_1.TrendWidget);\n                exports.TrendCandlesWidget = TrendCandlesWidget;\n                var CandleWidget = function() {\n                    function CandleWidget() {\n                        this.initObject();\n                    }\n                    CandleWidget.prototype.getObject3D = function() {\n                        return this.rect;\n                    };\n                    CandleWidget.prototype.setSegment = function(segment) {\n                        this.segment = segment;\n                        var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n                        var geometry = this.rect.geometry;\n                        var material = this.rect.material;\n                        var width = segment.endXVal - segment.startXVal;\n                        width -= width * MARGIN_PERCENT;\n                        var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n                        var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n                        leftTop.set(-width / 2, height / 2, 0);\n                        rightTop.set(width / 2, height / 2, 0);\n                        leftBottom.set(-width / 2, -height / 2, 0);\n                        rightBottom.set(width / 2, -height / 2, 0);\n                        if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n                            leftBottom.setY(leftBottom.y + 1);\n                            rightBottom.setY(rightBottom.y + 1);\n                        }\n                        material.color.set(color);\n                        geometry.verticesNeedUpdate = true;\n                        var vLineGeometry = this.vLine.geometry;\n                        var vLineMaterial = this.vLine.material;\n                        var lineTop = segment.maxYVal - segment.yVal;\n                        var lineBottom = segment.minYVal - segment.yVal;\n                        vLineGeometry.vertices[0].set(0, lineTop, 0);\n                        vLineGeometry.vertices[1].set(0, lineBottom, 0);\n                        vLineMaterial.color.set(color);\n                        vLineGeometry.verticesNeedUpdate = true;\n                        var hLineGeometry = this.hLine.geometry;\n                        var hLineMaterial = this.hLine.material;\n                        var lineLeft = -width / 2;\n                        var lineRight = width / 2;\n                        hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n                        hLineGeometry.vertices[1].set(lineRight, 0, 0);\n                        hLineMaterial.color.set(color);\n                        hLineGeometry.verticesNeedUpdate = true;\n                    };\n                    CandleWidget.prototype.initObject = function() {\n                        this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n                        var vLineGeometry = new Geometry();\n                        var hLineGeometry = new Geometry();\n                        vLineGeometry.vertices.push(new Vector3(), new Vector3());\n                        hLineGeometry.vertices.push(new Vector3(), new Vector3());\n                        this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n                            linewidth: 1\n                        }));\n                        this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n                            linewidth: 1\n                        }));\n                        this.rect.add(this.vLine);\n                        this.rect.add(this.hLine);\n                    };\n                    return CandleWidget;\n                }();\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var __extends = this && this.__extends || function(d, b) {\n                    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n                    function __() {\n                        this.constructor = d;\n                    }\n                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n                };\n                var Utils_1 = __webpack_require__(14);\n                var Mesh = THREE.Mesh;\n                var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n                var MeshBasicMaterial = THREE.MeshBasicMaterial;\n                var TrendsWidget_1 = __webpack_require__(25);\n                var Trend_1 = __webpack_require__(17);\n                var TrendsBeaconWidget = function(_super) {\n                    __extends(TrendsBeaconWidget, _super);\n                    function TrendsBeaconWidget() {\n                        _super.apply(this, arguments);\n                    }\n                    TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n                        return TrendBeacon;\n                    };\n                    TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n                    return TrendsBeaconWidget;\n                }(TrendsWidget_1.TrendsWidget);\n                exports.TrendsBeaconWidget = TrendsBeaconWidget;\n                var TrendBeacon = function(_super) {\n                    __extends(TrendBeacon, _super);\n                    function TrendBeacon(state, trendName) {\n                        _super.call(this, state, trendName);\n                        this.initObject();\n                        if (state.data.animations.enabled) {\n                            this.animate();\n                        }\n                        this.updatePosition();\n                    }\n                    TrendBeacon.widgetIsEnabled = function(trendOptions) {\n                        return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n                    };\n                    TrendBeacon.prototype.getObject3D = function() {\n                        return this.mesh;\n                    };\n                    TrendBeacon.prototype.onTrendChange = function() {\n                        this.updatePosition();\n                    };\n                    TrendBeacon.prototype.bindEvents = function() {\n                        var _this = this;\n                        _super.prototype.bindEvents.call(this);\n                        this.bindEvent(this.chartState.onScroll(function() {\n                            return _this.updatePosition();\n                        }));\n                        this.bindEvent(this.chartState.onChange(function(changedProps) {\n                            return _this.onStateChange(changedProps);\n                        }));\n                        this.bindEvent(this.chartState.onDestroy(function() {\n                            return _this.stopAnimation();\n                        }));\n                    };\n                    TrendBeacon.prototype.initObject = function() {\n                        var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                            map: TrendBeacon.createTexture(),\n                            transparent: true\n                        }));\n                        light.scale.set(.2, .2, 1);\n                        light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n                            map: TrendBeacon.createTexture()\n                        })));\n                        this.segment = this.trend.segments.getEndSegment();\n                    };\n                    TrendBeacon.prototype.animate = function() {\n                        var _this = this;\n                        this.animated = true;\n                        var object = this.mesh;\n                        var animationObject = {\n                            scale: object.scale.x,\n                            opacity: object.material.opacity\n                        };\n                        this.mesh.scale.set(.1, .1, 1);\n                        setTimeout(function() {\n                            var animation = _this.animation = TweenLite.to(animationObject, 1, {\n                                scale: 1,\n                                opacity: 0\n                            });\n                            animation.eventCallback(\"onUpdate\", function() {\n                                object.scale.set(animationObject.scale, animationObject.scale, 1);\n                                object.material.opacity = animationObject.opacity;\n                            }).eventCallback(\"onComplete\", function() {\n                                _this.animation && animation.restart();\n                            });\n                        }, 500);\n                    };\n                    TrendBeacon.prototype.stopAnimation = function() {\n                        this.animated = false;\n                        this.animation && this.animation.kill();\n                        this.animation = null;\n                    };\n                    TrendBeacon.createTexture = function() {\n                        var h = 32, w = 32;\n                        return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                            ctx.beginPath();\n                            ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n                            ctx.fillStyle = \"white\";\n                            ctx.fill();\n                        });\n                    };\n                    TrendBeacon.prototype.onTransformationFrame = function() {\n                        this.segment = this.trend.segments.getEndSegment();\n                        this.updatePosition();\n                    };\n                    TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n                        this.segment = trendsSegments.getEndSegment();\n                        this.updatePosition();\n                    };\n                    TrendBeacon.prototype.onStateChange = function(changedProps) {\n                        if (!changedProps.animations) return;\n                        if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n                        if (changedProps.animations.enabled) {\n                            this.animate();\n                        } else {\n                            this.stopAnimation();\n                        }\n                    };\n                    TrendBeacon.prototype.updatePosition = function() {\n                        var state = this.chartState;\n                        var xVal, yVal;\n                        var currentAnimationState = this.segment.currentAnimationState;\n                        if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                            xVal = currentAnimationState.endXVal;\n                            yVal = currentAnimationState.endYVal;\n                        } else {\n                            xVal = currentAnimationState.xVal;\n                            yVal = currentAnimationState.endYVal;\n                        }\n                        var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n                        var screenWidth = state.data.width;\n                        var x = endPointVector.x;\n                        var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                        if (screenX < 0) x = state.screen.getPointByScreenX(0);\n                        if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n                        this.mesh.position.set(x, endPointVector.y, .1);\n                    };\n                    return TrendBeacon;\n                }(TrendsWidget_1.TrendWidget);\n                exports.TrendBeacon = TrendBeacon;\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                function __export(m) {\n                    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n                }\n                __export(__webpack_require__(3));\n            }, function(module, exports, __webpack_require__) {\n                \"use strict\";\n                var Utils_1 = __webpack_require__(14);\n                var EventEmmiter_1 = __webpack_require__(13);\n                exports.DEFAULT_CONFIG = {\n                    installPluginWidgets: true\n                };\n                var ChartPlugin = function() {\n                    function ChartPlugin(options, config) {\n                        if (config === void 0) {\n                            config = {};\n                        }\n                        this.unsubscribers = [];\n                        this.initialState = options;\n                        this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n                        this.name = this.constructor.NAME;\n                        if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n                    }\n                    ChartPlugin.prototype.setupChartState = function(chartState) {\n                        var _this = this;\n                        this.chartState = chartState;\n                        this.ee = new EventEmmiter_1.EventEmitter();\n                        this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n                            return _this.onInitialStateAppliedHandler(initialState);\n                        }), this.chartState.onReady(function() {\n                            return _this.onChartReadyHandler();\n                        }), this.chartState.onDestroy(function() {\n                            return _this.onDestroyHandler();\n                        }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n                            return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n                        }));\n                    };\n                    ChartPlugin.prototype.getOptions = function() {\n                        return this.chartState.data.pluginsState[this.name];\n                    };\n                    ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n                    ChartPlugin.prototype.onChartReadyHandler = function() {};\n                    ChartPlugin.prototype.onStateChanged = function(changedState) {};\n                    ChartPlugin.prototype.onDestroyHandler = function() {\n                        this.ee.removeAllListeners();\n                    };\n                    ChartPlugin.prototype.bindEvent = function() {\n                        var args = [];\n                        for (var _i = 0; _i < arguments.length; _i++) {\n                            args[_i - 0] = arguments[_i];\n                        }\n                        var unsubscribers = [];\n                        if (!Array.isArray(args[0])) {\n                            unsubscribers.push(args[0]);\n                        } else {\n                            unsubscribers.push.apply(unsubscribers, args);\n                        }\n                        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                        var _a;\n                    };\n                    ChartPlugin.prototype.unbindEvents = function() {\n                        this.unsubscribers.forEach(function(unsubscriber) {\n                            return unsubscriber();\n                        });\n                        this.unsubscribers.length = 0;\n                    };\n                    ChartPlugin.NAME = \"\";\n                    ChartPlugin.pluginWidgets = [];\n                    return ChartPlugin;\n                }();\n                exports.ChartPlugin = ChartPlugin;\n            } ]);\n        });\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var three_chart_1 = __webpack_require__(2);\n        var Geometry = THREE.Geometry;\n        var Mesh = THREE.Mesh;\n        var Object3D = THREE.Object3D;\n        var TrendsMarksPlugin_1 = __webpack_require__(1);\n        var MAX_MARKS_IN_ROW = 3;\n        var TrendsMarksWidget = function(_super) {\n            __extends(TrendsMarksWidget, _super);\n            function TrendsMarksWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsMarksWidget.prototype.getTrendWidgetClass = function() {\n                return TrendMarksWidget;\n            };\n            TrendsMarksWidget.widgetName = \"TrendsMarks\";\n            return TrendsMarksWidget;\n        }(three_chart_1.TrendsWidget);\n        exports.TrendsMarksWidget = TrendsMarksWidget;\n        var TrendMarksWidget = function(_super) {\n            __extends(TrendMarksWidget, _super);\n            function TrendMarksWidget(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.marksWidgets = {};\n                this.object3D = new Object3D();\n                this.onMarksChange();\n            }\n            TrendMarksWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendMarksWidget.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.getTrendsMarksPlugin().onChange(function() {\n                    return _this.onMarksChange();\n                });\n            };\n            TrendMarksWidget.prototype.getTrendsMarksPlugin = function() {\n                return this.chartState.getPlugin(TrendsMarksPlugin_1.TrendsMarksPlugin.NAME);\n            };\n            TrendMarksWidget.prototype.onMarksChange = function() {\n                var marksItems = this.getTrendsMarksPlugin().getItems();\n                var widgets = this.marksWidgets;\n                var actualMarksNames = [];\n                for (var markName in marksItems) {\n                    actualMarksNames.push(markName);\n                    if (!widgets[markName]) this.createMarkWidget(marksItems[markName]);\n                }\n                for (var markName in this.marksWidgets) {\n                    if (actualMarksNames.indexOf(markName) !== -1) continue;\n                    this.destroyMarkWidget(markName);\n                }\n            };\n            TrendMarksWidget.prototype.createMarkWidget = function(mark) {\n                if (!mark.segment) return;\n                var markWidget = new TrendMarkWidget(this.chartState, mark);\n                this.marksWidgets[mark.options.name] = markWidget;\n                this.object3D.add(markWidget.getObject3D());\n            };\n            TrendMarksWidget.prototype.destroyMarkWidget = function(markName) {\n                this.object3D.remove(this.marksWidgets[markName].getObject3D());\n                delete this.marksWidgets[markName];\n            };\n            TrendMarksWidget.prototype.onZoomFrame = function() {\n                var widgets = this.marksWidgets;\n                for (var markName in widgets) {\n                    widgets[markName].onZoomFrameHandler();\n                }\n            };\n            TrendMarksWidget.prototype.onSegmentsAnimate = function() {\n                var widgets = this.marksWidgets;\n                for (var markName in widgets) {\n                    widgets[markName].onSegmentsAnimate();\n                }\n            };\n            return TrendMarksWidget;\n        }(three_chart_1.TrendWidget);\n        exports.TrendMarksWidget = TrendMarksWidget;\n        var TrendMarkWidget = function() {\n            function TrendMarkWidget(chartState, trendMark) {\n                this.markHeight = 74;\n                this.markWidth = 150;\n                this.position = {\n                    lineHeight: 30,\n                    x: 0,\n                    y: 0\n                };\n                this.chartState = chartState;\n                this.mark = trendMark;\n                this.initObject();\n                this.show();\n            }\n            TrendMarkWidget.prototype.initObject = function() {\n                this.object3D = new Object3D();\n                this.markMesh = this.createMarkMesh();\n                this.line = this.createMarkLine();\n                this.object3D.add(this.markMesh);\n                this.object3D.add(this.line);\n            };\n            TrendMarkWidget.prototype.createMarkMesh = function() {\n                var _a = this, markHeight = _a.markHeight, markWidth = _a.markWidth;\n                var mark = this.mark.options;\n                var isTopSide = mark.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP;\n                var texture = three_chart_1.Utils.createPixelPerfectTexture(markWidth, markHeight, function(ctx) {\n                    var circleOffset = isTopSide ? 30 : 0;\n                    var circleR = 22;\n                    var circleX = markWidth / 2;\n                    var circleY = circleOffset + circleR;\n                    var textOffset = isTopSide ? 10 : circleR * 2 + 15;\n                    ctx.beginPath();\n                    ctx.textAlign = \"center\";\n                    ctx.font = \"11px Arial\";\n                    ctx.fillStyle = \"rgba(255,255,255, 0.6)\";\n                    ctx.fillText(mark.title, circleX, textOffset);\n                    ctx.fillStyle = mark.descriptionColor;\n                    ctx.fillText(mark.description, circleX, textOffset + 12);\n                    ctx.beginPath();\n                    ctx.fillStyle = mark.iconColor;\n                    ctx.arc(circleX, circleY, circleR, 0, 2 * Math.PI);\n                    ctx.fill();\n                    ctx.font = \"19px Arial\";\n                    ctx.fillStyle = \"rgb(255, 255, 255)\";\n                    ctx.fillText(mark.icon, circleX, circleY + 7);\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                var mesh = new Mesh(new THREE.PlaneGeometry(markWidth, markHeight), material);\n                var offset = this.mark.options.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP ? this.mark.offset : -this.mark.offset;\n                return mesh;\n            };\n            TrendMarkWidget.prototype.createMarkLine = function() {\n                var lineGeometry = new Geometry();\n                lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, this.mark.offset, 0));\n                lineGeometry.computeLineDistances();\n                var lineMaterial = new THREE.LineDashedMaterial({\n                    dashSize: 1,\n                    gapSize: 4,\n                    transparent: true,\n                    opacity: .6\n                });\n                var line = new THREE.Line(lineGeometry, lineMaterial);\n                line.position.setZ(-.1);\n                return line;\n            };\n            TrendMarkWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendMarkWidget.prototype.onSegmentsAnimate = function() {\n                this.updatePosition();\n            };\n            TrendMarkWidget.prototype.onZoomFrameHandler = function() {\n                this.updatePosition();\n            };\n            TrendMarkWidget.prototype.updatePosition = function() {\n                if (!this.mark.segment) return;\n                var mark = this.mark;\n                var meshMaterial = this.markMesh.material;\n                var lineMaterial = this.line.material;\n                if (mark.row >= MAX_MARKS_IN_ROW - 1) {\n                    meshMaterial.opacity = 0;\n                    lineMaterial.opacity = 0;\n                } else {\n                    meshMaterial.opacity = 1;\n                    lineMaterial.opacity = 1;\n                }\n                var screen = this.chartState.screen;\n                var posX = screen.getPointOnXAxis(mark.xVal);\n                var posY = screen.getPointOnYAxis(mark.yVal);\n                var lineGeometry = this.line.geometry;\n                if (mark.options.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP) {\n                    this.markMesh.position.setY(this.markHeight / 2 + mark.offset);\n                    lineGeometry.vertices[1].setY(mark.offset);\n                } else {\n                    this.markMesh.position.setY(-mark.offset - this.markHeight / 2);\n                    lineGeometry.vertices[1].setY(-mark.offset);\n                }\n                lineGeometry.verticesNeedUpdate = true;\n                lineGeometry.lineDistancesNeedUpdate = true;\n                lineGeometry.computeLineDistances();\n                this.object3D.position.set(posX, posY, 0);\n            };\n            TrendMarkWidget.prototype.show = function() {\n                if (!this.mark.segment) return;\n                this.updatePosition();\n                var animations = this.chartState.data.animations;\n                var time = animations.enabled ? 1 : 0;\n                this.object3D.scale.set(.01, .01, 1);\n                TweenLite.to(this.object3D.scale, time, {\n                    x: 1,\n                    y: 1,\n                    ease: Elastic.easeOut\n                });\n            };\n            return TrendMarkWidget;\n        }();\n    } ]);\n});\n\n\n//# sourceMappingURL=TrendsMarksPlugin.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./plugins/build/TrendsMarksPlugin/TrendsMarksPlugin.js\n ** module id = 37\n ** module chunks = 1\n **/"],"sourceRoot":""}