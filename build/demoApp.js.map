{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///demoApp.js","webpack:///webpack/bootstrap cc8ce7ea982f4896d02f?8418","webpack:///./demo/demoApp.ts","webpack:///./src/index.ts?eac3","webpack:///./src/deps/deps.ts?8fcc","webpack:///./~/three/examples/js/libs/stats.min.js?9b50","webpack:///./~/is-plain-object/index.js?2af1","webpack:///./~/isobject/index.js?cf96","webpack:///./~/eventemitter2/lib/eventemitter2.js?847a","webpack:///./src/polyfills/es6-promise.js?de39","webpack:///./~/css-element-queries/src/ResizeSensor.js?9f87","webpack:///./src/ChartView.ts?958f","webpack:///./src/Plugin.ts?e59a","webpack:///./src/Utils.ts?fbb5","webpack:///./src/EventEmmiter.ts?e60a","webpack:///./src/deps/index.ts?3285","webpack:///./src/Chart.ts?8278","webpack:///./src/Trend.ts?84c2","webpack:///./src/TrendSegmentsManager.ts?2220","webpack:///./src/TrendsManager.ts?c94d","webpack:///./src/Screen.ts?9286","webpack:///./src/AxisMarks.ts?f3fd","webpack:///./src/interfaces.ts?f1fb","webpack:///./src/AnimationManager.ts?0830","webpack:///./src/Easing.ts?492d","webpack:///./src/Widget.ts?d904","webpack:///./src/widgets/AxisWidget.ts?5f76","webpack:///./src/widgets/GridWidget.ts?61b2","webpack:///./src/Color.ts?1948","webpack:///./src/widgets/TrendsGradientWidget.ts?4409","webpack:///./src/widgets/TrendsWidget.ts?6f55","webpack:///./src/widgets/TrendsLineWidget.ts?d378","webpack:///./src/widgets/TrendsCandleWidget.ts?9d04","webpack:///./src/widgets/AxisMarksWidget.ts?4b9b","webpack:///./src/widgets/index.ts?2583"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","src_1","chartView","DataSourse","data","sec","val","startTime","Date","now","push","xVal","yVal","Math","random","endTime","length","prototype","getData","Utils","deepCopy","getNext","lastVal","item","getPrev","firstVal","unshift","window","onload","initListeners","dsMain","dsRed","dsBlue","ChartView","yAxis","marks","value","name","title","lineColor","stickToEdges","range","padding","end","start","margin","zeroVal","xAxis","dataType","AXIS_DATA_TYPE","DATE","type","AXIS_RANGE_TYPE","FIXED","from","to","maxLength","minLength","showValue","trends","main","TREND_TYPE","LINE","dataset","hasBeacon","hasIndicator","hasBackground","showStats","trendDefaultState","settingsForTypes","document","querySelector","setState","animations","enabled","mainTrend","getTrend","deadlineMark","chart","xAxisMarks","getItem","closeMark","onDataChange","closeValue","options","getLastItem","setOptions","i","onPrependRequest","requestedLength","resolve","reject","responseData","ticksCount","round","setTimeout","setInterval","appendData","$checkboxMaintrend","addEventListener","checked","$checkboxRedtrend","red","$checkboxBluetrend","blue","$switchLineBtn","$switchBarsBtn","CANDLE","currentRange","state","timeframeButtons","querySelectorAll","Number","getAttribute","segmentLength","autoScroll","zoomToRange","scrollToEnd","then","__export","hasOwnProperty","TweenLite","TweenMax","Stats","isPlainObject","EE2","es6_promise_1","Promise","ResizeSensor","h","a","appendChild","dom","k","d","children","style","display","l","createElement","cssText","preventDefault","g","performance","e","r","Panel","f","self","memory","t","REVISION","addPanel","showPanel","begin","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","Infinity","devicePixelRatio","u","n","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","min","max","drawImage","isObject","isObjectObject","o","Object","toString","ctor","prot","constructor","Array","isArray","__WEBPACK_AMD_DEFINE_RESULT__","undefined","_isArray","obj","defaultMaxListeners","init","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","concat","**","growListenerTree","listener","split","slice","shift","warned","console","error","trace","setMaxListeners","event","once","fn","many","ttl","Error","off","apply","arguments","_origin","on","emit","_all","args","handler","ns","onAny","addListener","leafs","iLeaf","position","splice","offAny","fns","removeListener","removeAllListeners","listenersAny","EventEmitter2","element","callback","EventQueue","add","ev","j","getComputedStyle","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","resizeSensor","className","styleChild","innerHTML","fixed","absolute","expand","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","el","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","detach","removeChild","__extends","__","create","Plugin_1","PerspectiveCamera","THREE","Chart_1","Widget_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsGradientWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","deps_1","Color_1","AxisMarksWidget_1","ChartBlankView","$container","pluginsAndWidgets","_this","widgets","parseInt","plugins","filter","pluginOrWidget","ChartPlugin","Chart","zoomThrottled","throttle","zoomValue","origin","zoom","_a","w","autoRender","scene","Scene","isStopped","renderer","renderers","antialias","alpha","backgroundColor","ChartColor","setSize","setPixelRatio","setClearColor","$el","stats","setupCamera","initWidgets","bindEvents","renderLoop","preinstalledWidgetsClasses","preinstalledWidgets","customWidgets","forEach","ChartWidget","pluginWidgetClasses","providedWidgets","map","WidgetClass","widget","setupChart","onReadyHandler","getObject3D","isDestroyed","render","fpsLimit","fps","delay_1","requestAnimationFrame","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","trendName","controls","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","onScreenTransformHandler","onResize","onChartResize","remove","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","oldTrendsMaxX","prevState","computedData","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","autoScrollIsEnabled","CanvasRenderer","WebGLRenderer","_super","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsGradientWidget","AxisMarksWidget","EventEmmiter_1","DEFAULT_CONFIG","installPluginWidgets","config","initialState","deepMerge","NAME","ee","bindEvent","onInitialStateApplied","onInitialStateAppliedHandler","onReady","onDestroy","onDestroyHandler","onPluginsStateChange","changedPluginsStates","onStateChanged","getOptions","pluginsState","changedState","_i","unsubscriber","deepmerge","target","src","mergeArrays","array","dst","indexOf","keys","key","obj1","obj2","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","floor","intStr","lengthDiff","repeat","afterPointDigitsCount","afterPointStr","substr","createTexture","canvas","ctx","texture","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","warn","getUid","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","copyProps","srcObject","dstObject","props","excludeProps","eventName","subscribe","listenersCount","Vector3","Trend_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","AnimationManager_1","Easing_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","LIGHT_BLUE","ALL","NUMBER","grid","minSizePx","color","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","scrollSpeed","scrollEase","EASING","Quadratic","Out","zoomEase","autoScrollSpeed","autoScrollEase","Linear","None","maxSegmentLength","lineWidth","minSegmentLengthInPx","maxSegmentLengthInPx","eventEmitterMaxListeners","maxVisibleSegments","animationManager","AnimationManager","isReady","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","onChange","onTrendChange","onZoom","tick","newState","eventData","silent","stateData","newStateObj","changedProps","trendsData","trendOptions","newStateContainsData","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","getPlugin","changedTrends","newData","handleTrendsChange","animationOptions","isAnimationsEnabled","setAimationsEnabled","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","rangeLessThenMinValue","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","abs","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","nextRange","newScroll","animationTime","endXVal","getPointOnXAxis","getPointOnYAxis","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","TrendSegmentsManager_1","EVENTS","PREPEND_REQUEST","Trend","chartState","minYVal","maxYVal","prepareData","segmentsManager","TrendSegmentsManager","checkForPrependRequest","changedOptions","getCalculatedOptions","rawData","updatedTrendData","changeData","prependData","allData","newData_1","statePatch","fromX","toX","filteredData","data_1","getFirstItem","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","trend","segmentsById","segments","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getSegment","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","currentSegmentLengthInPx","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","firstDisplayedSegmentInd","lastDisplayedSegmentInd","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","valueInPoint","onAnimationFrame","onRebuild","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","needRebuildSegments","trendData","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","complete","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","prevPoint","getFrameVal","getFramePoint","frameVal","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getEnabledTrends","enabledTrends","allTrends","firstTrendData","getExtremumYVal","extremumIsMax","compareFn","trends_1","trendYValues","dataItem","NaN","onSegmentsRebuilded","_loop_1","this_1","SCREEN_EVENTS","ZOOM_FRAME","SCROLL_FRAME","TRANSFORMATION_FRAME","scrollXVal","scrollYVal","zoomX","zoomY","transform","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","isFinished","zoomXAnimation","scrollEventNeeded","zoomEventNeeded","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","isDragMode","zoomXChanged","isAutoscroll","targetX","onTick","targetY","scrollYAnimation","targetZoom","zoomYAnimation","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","AXIS_MARK_DEFAULT_OPTIONS","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","timingFunction","Animation","lastTickTime","animateObj","source","isEnabled","i_1","completeAndStop","hasActiveAnimations","easing","progress","setProgress","needToFinish","onFinishHandler","sourceObj","initialObj","sourceIteralable","targetObj","targetObject","initialIteralable","onTickCb","onFinishCb","initialVal","targetVal","sourceVal","In","InOut","Cubic","Quartic","Quintic","Sinusoidal","cos","sin","Exponential","pow","Circular","sqrt","Elastic","Back","Bounce","unbindList","unbindEvent","widgetName","Mesh","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","axisOptions","traverse","beginPath","rgbaStr","strokeStyle","material","MeshBasicMaterial","side","FrontSide","transparent","axisMesh","PlaneGeometry","axisGridParams","getGridParamsForAxis","geometry","parameters","image","clearRect","edgeOffset","segmentsCount","step","pxVal","textAlign","getDateStr","stroke","closePath","gridParams","hour","day","tf","getHours","getMinutes","getSeconds","LineSegments","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","Geometry","LineBasicMaterial","linewidth","opacity","xLinesCount","yLinesCount","vertices","lineSegments","setZ","frustumCulled","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","scale","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","parseColor","cache","replace","exec","isNaN","colorStr","rgba","hexStr","TrendsWidget_1","getTrendWidgetClass","TrendGradient","TrendsWidget","visibleSegmentsCnt","segmentsIds","Uint16Array","initGradient","updateSegments","widgetIsEnabled","gradient","faces","Face3","scaleXFactor","scaleYFactor","currentScale","onSegmentsAnimate","trendSegmentsManager","includes","setupSegmentVertices","segmentInd","prevVisibleSegmentsCnt","segmentsToProcessCnt","segmentState","gradientSegmentInd","topLeft","bottomLeft","bottomRight","topRight","screenHeightVal","startX","toLocalX","startY","toLocalY","endX","endY","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","WidgetConstructor","widgetObject","getObjectByName","unbind","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","segmentIsNotDisplayed","destroySegment","setupSegment","pop","lineStartVertex","lineEndVertex","toLocalVec","vec","Line","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","initObject","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","updatePosition","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","line","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY"],"mappings":"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","file":"demoApp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar src_1 = __webpack_require__(1);\r\n\t// import { ChartView, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from 'three-charts';\r\n\t// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/TrendsMarksPlugin';\r\n\t// import { TrendsBeaconWidget } from '../plugins/build/TrendsBeaconWidget';\r\n\t// import { TrendsLoadingWidget } from '../plugins/build/TrendsLoadingWidget';\r\n\t// import { TrendsIndicatorWidget } from '../plugins/build/TrendsIndicatorWidget';\r\n\t// ChartView.preinstalledWidgets.push(TrendsLoadingWidget, TrendsBeaconWidget, TrendsIndicatorWidget);\r\n\tvar chartView;\r\n\tvar DataSourse = (function () {\r\n\t    function DataSourse() {\r\n\t        this.data = [];\r\n\t        var sec = 0;\r\n\t        var val = 70;\r\n\t        this.startTime = Date.now();\r\n\t        while (sec < 100) {\r\n\t            this.data.push({\r\n\t                xVal: this.startTime + sec * 1000,\r\n\t                yVal: val\r\n\t            });\r\n\t            val += Math.random() * 14 - 7;\r\n\t            sec++;\r\n\t        }\r\n\t        this.endTime = this.data[this.data.length - 1].xVal;\r\n\t    }\r\n\t    DataSourse.prototype.getData = function () {\r\n\t        return src_1.Utils.deepCopy(this.data);\r\n\t    };\r\n\t    DataSourse.prototype.getNext = function () {\r\n\t        var lastVal = this.data[this.data.length - 1];\r\n\t        var yVal = lastVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.endTime + 1000;\r\n\t        this.endTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.push(item);\r\n\t        return item;\r\n\t    };\r\n\t    DataSourse.prototype.getPrev = function () {\r\n\t        var firstVal = this.data[0];\r\n\t        var yVal = firstVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.startTime - 1000;\r\n\t        this.startTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.unshift(item);\r\n\t        return item;\r\n\t    };\r\n\t    return DataSourse;\r\n\t}());\r\n\t//\r\n\t// class MarksSource {\r\n\t// \tstatic getNext(val: number): ITrendMarkOptions {\r\n\t// \t\tif (Math.random() > 0.2) return null;\r\n\t// \t\treturn this.generate(val);\r\n\t// \t}\r\n\t//\r\n\t// \tstatic generate(val: number): ITrendMarkOptions {\r\n\t// \t\tlet descriptionColor = 'rgb(40,136,75)';\r\n\t// \t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\r\n\t// \t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\r\n\t// \t\t\tdescriptionColor = 'rgb(219,73,49)';\r\n\t// \t\t}\r\n\t//\r\n\t// \t\treturn {\r\n\t// \t\t\ttrendName: 'main',\r\n\t// \t\t\tvalue: val,\r\n\t// \t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\r\n\t// \t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\r\n\t// \t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\r\n\t// \t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\r\n\t// \t\t\torientation: orientation,\r\n\t// \t\t\tdescriptionColor: descriptionColor\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\twindow.onload = function () {\r\n\t    initListeners();\r\n\t    var dsMain = new DataSourse();\r\n\t    var dsRed = new DataSourse();\r\n\t    var dsBlue = new DataSourse();\r\n\t    var now = Date.now();\r\n\t    chartView = new src_1.ChartView({\r\n\t        yAxis: {\r\n\t            marks: [\r\n\t                { value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true },\r\n\t            ],\r\n\t            range: {\r\n\t                padding: { end: 100, start: 100 },\r\n\t                margin: { end: 50, start: 50 },\r\n\t                zeroVal: 70\r\n\t            }\r\n\t        },\r\n\t        xAxis: {\r\n\t            //range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\r\n\t            dataType: src_1.AXIS_DATA_TYPE.DATE,\r\n\t            range: {\r\n\t                type: src_1.AXIS_RANGE_TYPE.FIXED,\r\n\t                from: Date.now(),\r\n\t                to: Date.now() + 20000,\r\n\t                padding: { end: 200, start: 0 },\r\n\t                maxLength: 5000000,\r\n\t                minLength: 5000\r\n\t            },\r\n\t            marks: [\r\n\t                { value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true },\r\n\t                { value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true }\r\n\t            ]\r\n\t        },\r\n\t        trends: {\r\n\t            'main': {\r\n\t                type: src_1.TREND_TYPE.LINE,\r\n\t                dataset: dsMain.getData(),\r\n\t                hasBeacon: true,\r\n\t                hasIndicator: true,\r\n\t                hasBackground: true,\r\n\t            },\r\n\t        },\r\n\t        showStats: true,\r\n\t        // autoRender: {fps: 100},\r\n\t        // animations: {enabled: false},\r\n\t        trendDefaultState: {\r\n\t            settingsForTypes: {\r\n\t                LINE: {}\r\n\t            }\r\n\t        }\r\n\t    }, document.querySelector('.chart'), []);\r\n\t    chartView.setState({ animations: { enabled: false } });\r\n\t    chartView.setState({ animations: { enabled: true } });\r\n\t    window['chartView'] = chartView;\r\n\t    var mainTrend = chartView.getTrend('main');\r\n\t    var deadlineMark = chartView.chart.xAxisMarks.getItem('deadline');\r\n\t    var closeMark = chartView.chart.xAxisMarks.getItem('close');\r\n\t    mainTrend.onDataChange(function () {\r\n\t        var closeValue = closeMark.options.value;\r\n\t        if (mainTrend.getLastItem().xVal >= closeValue) {\r\n\t            deadlineMark.setOptions({ value: closeValue + 10000 });\r\n\t            closeMark.setOptions({ value: closeValue + 20000 });\r\n\t        }\r\n\t        // var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\r\n\t        // if (markOptions) setTimeout(() => {\r\n\t        // \tlet trendsMarks = chartView.chart.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\r\n\t        // \ttrendsMarks.createMark(markOptions);\r\n\t        // }, 500);\r\n\t    });\r\n\t    // var previewChart1 = ChartView.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-state')[0],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.state, hasBeacon: true}\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart2 = ChartView.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-state')[1],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.state, hasBeacon: true}\r\n\t    // \t},\r\n\t    //\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart3 = ChartView.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-state')[2],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.state, hasBeacon: true},\r\n\t    // \t\t'red': {dataset: dsRed.state, lineColor: 0xFF2222},\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    var i = 0;\r\n\t    chartView.getTrend('main').onPrependRequest(function (requestedLength, resolve, reject) {\r\n\t        var responseData = [];\r\n\t        var ticksCount = Math.round(requestedLength / 1000);\r\n\t        while (ticksCount--)\r\n\t            responseData.unshift(dsMain.getPrev());\r\n\t        setTimeout(function () {\r\n\t            resolve(responseData);\r\n\t        }, 2000);\r\n\t    });\r\n\t    setInterval(function () {\r\n\t        i++;\r\n\t        var val = dsMain.getNext();\r\n\t        // [i % 2 ? 10 : 20]\r\n\t        chartView.getTrend('main').appendData([val]);\r\n\t        // state.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\r\n\t        // state.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // state.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // state.getTrend('red').appendData([val + 10 + Math.random() * 20]);\r\n\t        // state.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.getTrend('main').appendData([val]);\r\n\t        // previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\r\n\t        // previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.appendData(dataToAppend1);\r\n\t        //\r\n\t        // var chartData2 = previewChart2.state.state.trends[0].state;\r\n\t        // var lastItem2 = chartData2[chartData.length - 1];\r\n\t        // var dataToAppend2 = [\r\n\t        // \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\r\n\t        // ];\r\n\t        // previewChart2.appendData(dataToAppend2);\r\n\t        // previewChart3.appendData(dataToAppend2);\r\n\t    }, 1000);\r\n\t};\r\n\tfunction initListeners() {\r\n\t    var $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]');\r\n\t    $checkboxMaintrend.addEventListener('change', function () {\r\n\t        chartView.setState({ trends: { main: { enabled: $checkboxMaintrend.checked } } });\r\n\t    });\r\n\t    var $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]');\r\n\t    $checkboxRedtrend.addEventListener('change', function () {\r\n\t        chartView.setState({ trends: { red: { enabled: $checkboxRedtrend.checked } } });\r\n\t    });\r\n\t    var $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]');\r\n\t    $checkboxBluetrend.addEventListener('change', function () {\r\n\t        chartView.setState({ trends: { blue: { enabled: $checkboxBluetrend.checked } } });\r\n\t    });\r\n\t    var $switchLineBtn = document.querySelector('[name=\"switch-line\"]');\r\n\t    $switchLineBtn.addEventListener('click', function () {\r\n\t        chartView.getTrend('main').setOptions({ type: src_1.TREND_TYPE.LINE });\r\n\t    });\r\n\t    var $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]');\r\n\t    $switchBarsBtn.addEventListener('click', function () {\r\n\t        chartView.getTrend('main').setOptions({ type: src_1.TREND_TYPE.CANDLE });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-left\"]').addEventListener('click', function () {\r\n\t        var currentRange = chartView.chart.state.xAxis.range;\r\n\t        chartView.setState({ xAxis: { range: { from: currentRange.from - 2000 } } });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-right\"]').addEventListener('click', function () {\r\n\t        var currentRange = chartView.chart.state.xAxis.range;\r\n\t        chartView.setState({ xAxis: { range: { to: currentRange.to + 2000 } } });\r\n\t    });\r\n\t    var timeframeButtons = document.querySelectorAll(\".timeframe\");\r\n\t    for (var i = 0; i < timeframeButtons.length; i++) {\r\n\t        timeframeButtons[i].addEventListener(\"click\", function () {\r\n\t            var range = Number(this.getAttribute('data-range'));\r\n\t            var segmentLength = Number(this.getAttribute('data-segment-length'));\r\n\t            chartView.chart.setState({ autoScroll: false });\r\n\t            chartView.chart.zoomToRange(range);\r\n\t            chartView.chart.scrollToEnd().then(function () {\r\n\t                chartView.chart.setState({ autoScroll: true });\r\n\t            });\r\n\t        });\r\n\t    }\r\n\t}\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__webpack_require__(2);\r\n\t__export(__webpack_require__(9));\r\n\t__export(__webpack_require__(20));\r\n\t__export(__webpack_require__(19));\r\n\t__export(__webpack_require__(18));\r\n\t__export(__webpack_require__(14));\r\n\t__export(__webpack_require__(15));\r\n\t__export(__webpack_require__(16));\r\n\t__export(__webpack_require__(17));\r\n\t__export(__webpack_require__(11));\r\n\t__export(__webpack_require__(23));\r\n\t__export(__webpack_require__(10));\r\n\t__export(__webpack_require__(26));\r\n\t__export(__webpack_require__(21));\r\n\t__export(__webpack_require__(22));\r\n\t__export(__webpack_require__(32));\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/// <reference path=\"./ResizeSensor.ts\" />\r\n\t\"use strict\";\r\n\twindow.TweenLite = TweenMax;\r\n\twindow.Stats = __webpack_require__(3);\r\n\t// require('gsap/src/uncompressed/easing/EasePack.js');\r\n\t// require('three/examples/js/renderers/CanvasRenderer.js');\r\n\t// require('three/examples/js/renderers/Projector.js');\r\n\texports.isPlainObject = __webpack_require__(4);\r\n\texports.EE2 = __webpack_require__(6);\r\n\tvar es6_promise_1 = __webpack_require__(7);\r\n\texports.Promise = es6_promise_1.Promise;\r\n\texports.ResizeSensor = __webpack_require__(8);\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t// stats.js - http://github.com/mrdoob/stats.js\n\tvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\n\tif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\n\tStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\n\tv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tvar isObject = __webpack_require__(5);\n\t\n\tfunction isObjectObject(o) {\n\t  return isObject(o) === true\n\t    && Object.prototype.toString.call(o) === '[object Object]';\n\t}\n\t\n\tmodule.exports = function isPlainObject(o) {\n\t  var ctor,prot;\n\t  \n\t  if (isObjectObject(o) === false) return false;\n\t  \n\t  // If has modified constructor\n\t  ctor = o.constructor;\n\t  if (typeof ctor !== 'function') return false;\n\t  \n\t  // If has modified prototype\n\t  prot = ctor.prototype;\n\t  if (isObjectObject(prot) === false) return false;\n\t  \n\t  // If constructor does not have an Object-specific method\n\t  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n\t    return false;\n\t  }\n\t  \n\t  // Most likely a plain Object\n\t  return true;\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n\t\n\t'use strict';\n\t\n\tmodule.exports = function isObject(val) {\n\t  return val != null && typeof val === 'object'\n\t    && !Array.isArray(val);\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * EventEmitter2\n\t * https://github.com/hij1nx/EventEmitter2\n\t *\n\t * Copyright (c) 2013 hij1nx\n\t * Licensed under the MIT license.\n\t */\n\t;!function(undefined) {\n\t\n\t  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t    return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t  };\n\t  var defaultMaxListeners = 10;\n\t\n\t  function init() {\n\t    this._events = {};\n\t    if (this._conf) {\n\t      configure.call(this, this._conf);\n\t    }\n\t  }\n\t\n\t  function configure(conf) {\n\t    if (conf) {\n\t\n\t      this._conf = conf;\n\t\n\t      conf.delimiter && (this.delimiter = conf.delimiter);\n\t      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t      conf.wildcard && (this.wildcard = conf.wildcard);\n\t      conf.newListener && (this.newListener = conf.newListener);\n\t\n\t      if (this.wildcard) {\n\t        this.listenerTree = {};\n\t      }\n\t    }\n\t  }\n\t\n\t  function EventEmitter(conf) {\n\t    this._events = {};\n\t    this.newListener = false;\n\t    configure.call(this, conf);\n\t  }\n\t\n\t  //\n\t  // Attention, function return type now is array, always !\n\t  // It has zero elements if no any matches found and one or more\n\t  // elements (leafs) if there are matches\n\t  //\n\t  function searchListenerTree(handlers, type, tree, i) {\n\t    if (!tree) {\n\t      return [];\n\t    }\n\t    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n\t        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n\t    if (i === typeLength && tree._listeners) {\n\t      //\n\t      // If at the end of the event(s) list and the tree has listeners\n\t      // invoke those listeners.\n\t      //\n\t      if (typeof tree._listeners === 'function') {\n\t        handlers && handlers.push(tree._listeners);\n\t        return [tree];\n\t      } else {\n\t        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t          handlers && handlers.push(tree._listeners[leaf]);\n\t        }\n\t        return [tree];\n\t      }\n\t    }\n\t\n\t    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n\t      //\n\t      // If the event emitted is '*' at this part\n\t      // or there is a concrete match at this patch\n\t      //\n\t      if (currentType === '*') {\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n\t          }\n\t        }\n\t        return listeners;\n\t      } else if(currentType === '**') {\n\t        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n\t        if(endReached && tree._listeners) {\n\t          // The next element has a _listeners, add it to the handlers.\n\t          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t        }\n\t\n\t        for (branch in tree) {\n\t          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n\t            if(branch === '*' || branch === '**') {\n\t              if(tree[branch]._listeners && !endReached) {\n\t                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t              }\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            } else if(branch === nextType) {\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n\t            } else {\n\t              // No match on this one, shift into the tree but not in the type array.\n\t              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t            }\n\t          }\n\t        }\n\t        return listeners;\n\t      }\n\t\n\t      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n\t    }\n\t\n\t    xTree = tree['*'];\n\t    if (xTree) {\n\t      //\n\t      // If the listener tree will allow any match for this part,\n\t      // then recursively explore all branches of the tree\n\t      //\n\t      searchListenerTree(handlers, type, xTree, i+1);\n\t    }\n\t\n\t    xxTree = tree['**'];\n\t    if(xxTree) {\n\t      if(i < typeLength) {\n\t        if(xxTree._listeners) {\n\t          // If we have a listener on a '**', it will catch all, so add its handler.\n\t          searchListenerTree(handlers, type, xxTree, typeLength);\n\t        }\n\t\n\t        // Build arrays of matching next branches and others.\n\t        for(branch in xxTree) {\n\t          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n\t            if(branch === nextType) {\n\t              // We know the next element will match, so jump twice.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+2);\n\t            } else if(branch === currentType) {\n\t              // Current node matches, move into the tree.\n\t              searchListenerTree(handlers, type, xxTree[branch], i+1);\n\t            } else {\n\t              isolatedBranch = {};\n\t              isolatedBranch[branch] = xxTree[branch];\n\t              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n\t            }\n\t          }\n\t        }\n\t      } else if(xxTree._listeners) {\n\t        // We have reached the end and still on a '**'\n\t        searchListenerTree(handlers, type, xxTree, typeLength);\n\t      } else if(xxTree['*'] && xxTree['*']._listeners) {\n\t        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n\t      }\n\t    }\n\t\n\t    return listeners;\n\t  }\n\t\n\t  function growListenerTree(type, listener) {\n\t\n\t    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t\n\t    //\n\t    // Looks for two consecutive '**', if so, don't add the event at all.\n\t    //\n\t    for(var i = 0, len = type.length; i+1 < len; i++) {\n\t      if(type[i] === '**' && type[i+1] === '**') {\n\t        return;\n\t      }\n\t    }\n\t\n\t    var tree = this.listenerTree;\n\t    var name = type.shift();\n\t\n\t    while (name) {\n\t\n\t      if (!tree[name]) {\n\t        tree[name] = {};\n\t      }\n\t\n\t      tree = tree[name];\n\t\n\t      if (type.length === 0) {\n\t\n\t        if (!tree._listeners) {\n\t          tree._listeners = listener;\n\t        }\n\t        else if(typeof tree._listeners === 'function') {\n\t          tree._listeners = [tree._listeners, listener];\n\t        }\n\t        else if (isArray(tree._listeners)) {\n\t\n\t          tree._listeners.push(listener);\n\t\n\t          if (!tree._listeners.warned) {\n\t\n\t            var m = defaultMaxListeners;\n\t\n\t            if (typeof this._events.maxListeners !== 'undefined') {\n\t              m = this._events.maxListeners;\n\t            }\n\t\n\t            if (m > 0 && tree._listeners.length > m) {\n\t\n\t              tree._listeners.warned = true;\n\t              console.error('(node) warning: possible EventEmitter memory ' +\n\t                            'leak detected. %d listeners added. ' +\n\t                            'Use emitter.setMaxListeners() to increase limit.',\n\t                            tree._listeners.length);\n\t              console.trace();\n\t            }\n\t          }\n\t        }\n\t        return true;\n\t      }\n\t      name = type.shift();\n\t    }\n\t    return true;\n\t  }\n\t\n\t  // By default EventEmitters will print a warning if more than\n\t  // 10 listeners are added to it. This is a useful default which\n\t  // helps finding memory leaks.\n\t  //\n\t  // Obviously not all Emitters should be limited to 10. This function allows\n\t  // that to be increased. Set to zero for unlimited.\n\t\n\t  EventEmitter.prototype.delimiter = '.';\n\t\n\t  EventEmitter.prototype.setMaxListeners = function(n) {\n\t    this._events || init.call(this);\n\t    this._events.maxListeners = n;\n\t    if (!this._conf) this._conf = {};\n\t    this._conf.maxListeners = n;\n\t  };\n\t\n\t  EventEmitter.prototype.event = '';\n\t\n\t  EventEmitter.prototype.once = function(event, fn) {\n\t    this.many(event, 1, fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.many = function(event, ttl, fn) {\n\t    var self = this;\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('many only accepts instances of Function');\n\t    }\n\t\n\t    function listener() {\n\t      if (--ttl === 0) {\n\t        self.off(event, listener);\n\t      }\n\t      fn.apply(this, arguments);\n\t    }\n\t\n\t    listener._origin = fn;\n\t\n\t    this.on(event, listener);\n\t\n\t    return self;\n\t  };\n\t\n\t  EventEmitter.prototype.emit = function() {\n\t\n\t    this._events || init.call(this);\n\t\n\t    var type = arguments[0];\n\t\n\t    if (type === 'newListener' && !this.newListener) {\n\t      if (!this._events.newListener) { return false; }\n\t    }\n\t\n\t    // Loop through the *_all* functions and invoke them.\n\t    if (this._all) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t      for (i = 0, l = this._all.length; i < l; i++) {\n\t        this.event = type;\n\t        this._all[i].apply(this, args);\n\t      }\n\t    }\n\t\n\t    // If there is no 'error' event listener then throw.\n\t    if (type === 'error') {\n\t\n\t      if (!this._all &&\n\t        !this._events.error &&\n\t        !(this.wildcard && this.listenerTree.error)) {\n\t\n\t        if (arguments[1] instanceof Error) {\n\t          throw arguments[1]; // Unhandled 'error' event\n\t        } else {\n\t          throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t        }\n\t        return false;\n\t      }\n\t    }\n\t\n\t    var handler;\n\t\n\t    if(this.wildcard) {\n\t      handler = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      handler = this._events[type];\n\t    }\n\t\n\t    if (typeof handler === 'function') {\n\t      this.event = type;\n\t      if (arguments.length === 1) {\n\t        handler.call(this);\n\t      }\n\t      else if (arguments.length > 1)\n\t        switch (arguments.length) {\n\t          case 2:\n\t            handler.call(this, arguments[1]);\n\t            break;\n\t          case 3:\n\t            handler.call(this, arguments[1], arguments[2]);\n\t            break;\n\t          // slower\n\t          default:\n\t            var l = arguments.length;\n\t            var args = new Array(l - 1);\n\t            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t            handler.apply(this, args);\n\t        }\n\t      return true;\n\t    }\n\t    else if (handler) {\n\t      var l = arguments.length;\n\t      var args = new Array(l - 1);\n\t      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t\n\t      var listeners = handler.slice();\n\t      for (var i = 0, l = listeners.length; i < l; i++) {\n\t        this.event = type;\n\t        listeners[i].apply(this, args);\n\t      }\n\t      return (listeners.length > 0) || !!this._all;\n\t    }\n\t    else {\n\t      return !!this._all;\n\t    }\n\t\n\t  };\n\t\n\t  EventEmitter.prototype.on = function(type, listener) {\n\t\n\t    if (typeof type === 'function') {\n\t      this.onAny(type);\n\t      return this;\n\t    }\n\t\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('on only accepts instances of Function');\n\t    }\n\t    this._events || init.call(this);\n\t\n\t    // To avoid recursion in the case that type == \"newListeners\"! Before\n\t    // adding it to the listeners, first emit \"newListeners\".\n\t    this.emit('newListener', type, listener);\n\t\n\t    if(this.wildcard) {\n\t      growListenerTree.call(this, type, listener);\n\t      return this;\n\t    }\n\t\n\t    if (!this._events[type]) {\n\t      // Optimize the case of one listener. Don't need the extra array object.\n\t      this._events[type] = listener;\n\t    }\n\t    else if(typeof this._events[type] === 'function') {\n\t      // Adding the second element, need to change to array.\n\t      this._events[type] = [this._events[type], listener];\n\t    }\n\t    else if (isArray(this._events[type])) {\n\t      // If we've already got an array, just append.\n\t      this._events[type].push(listener);\n\t\n\t      // Check for listener leak\n\t      if (!this._events[type].warned) {\n\t\n\t        var m = defaultMaxListeners;\n\t\n\t        if (typeof this._events.maxListeners !== 'undefined') {\n\t          m = this._events.maxListeners;\n\t        }\n\t\n\t        if (m > 0 && this._events[type].length > m) {\n\t\n\t          this._events[type].warned = true;\n\t          console.error('(node) warning: possible EventEmitter memory ' +\n\t                        'leak detected. %d listeners added. ' +\n\t                        'Use emitter.setMaxListeners() to increase limit.',\n\t                        this._events[type].length);\n\t          console.trace();\n\t        }\n\t      }\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.onAny = function(fn) {\n\t\n\t    if (typeof fn !== 'function') {\n\t      throw new Error('onAny only accepts instances of Function');\n\t    }\n\t\n\t    if(!this._all) {\n\t      this._all = [];\n\t    }\n\t\n\t    // Add the function to the event listener collection.\n\t    this._all.push(fn);\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t\n\t  EventEmitter.prototype.off = function(type, listener) {\n\t    if (typeof listener !== 'function') {\n\t      throw new Error('removeListener only takes instances of Function');\n\t    }\n\t\n\t    var handlers,leafs=[];\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t    }\n\t    else {\n\t      // does not use listeners(), so no side effect of creating _events[type]\n\t      if (!this._events[type]) return this;\n\t      handlers = this._events[type];\n\t      leafs.push({_listeners:handlers});\n\t    }\n\t\n\t    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t      var leaf = leafs[iLeaf];\n\t      handlers = leaf._listeners;\n\t      if (isArray(handlers)) {\n\t\n\t        var position = -1;\n\t\n\t        for (var i = 0, length = handlers.length; i < length; i++) {\n\t          if (handlers[i] === listener ||\n\t            (handlers[i].listener && handlers[i].listener === listener) ||\n\t            (handlers[i]._origin && handlers[i]._origin === listener)) {\n\t            position = i;\n\t            break;\n\t          }\n\t        }\n\t\n\t        if (position < 0) {\n\t          continue;\n\t        }\n\t\n\t        if(this.wildcard) {\n\t          leaf._listeners.splice(position, 1);\n\t        }\n\t        else {\n\t          this._events[type].splice(position, 1);\n\t        }\n\t\n\t        if (handlers.length === 0) {\n\t          if(this.wildcard) {\n\t            delete leaf._listeners;\n\t          }\n\t          else {\n\t            delete this._events[type];\n\t          }\n\t        }\n\t        return this;\n\t      }\n\t      else if (handlers === listener ||\n\t        (handlers.listener && handlers.listener === listener) ||\n\t        (handlers._origin && handlers._origin === listener)) {\n\t        if(this.wildcard) {\n\t          delete leaf._listeners;\n\t        }\n\t        else {\n\t          delete this._events[type];\n\t        }\n\t      }\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.offAny = function(fn) {\n\t    var i = 0, l = 0, fns;\n\t    if (fn && this._all && this._all.length > 0) {\n\t      fns = this._all;\n\t      for(i = 0, l = fns.length; i < l; i++) {\n\t        if(fn === fns[i]) {\n\t          fns.splice(i, 1);\n\t          return this;\n\t        }\n\t      }\n\t    } else {\n\t      this._all = [];\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t\n\t  EventEmitter.prototype.removeAllListeners = function(type) {\n\t    if (arguments.length === 0) {\n\t      !this._events || init.call(this);\n\t      return this;\n\t    }\n\t\n\t    if(this.wildcard) {\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t\n\t      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n\t        var leaf = leafs[iLeaf];\n\t        leaf._listeners = null;\n\t      }\n\t    }\n\t    else {\n\t      if (!this._events[type]) return this;\n\t      this._events[type] = null;\n\t    }\n\t    return this;\n\t  };\n\t\n\t  EventEmitter.prototype.listeners = function(type) {\n\t    if(this.wildcard) {\n\t      var handlers = [];\n\t      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\t      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t      return handlers;\n\t    }\n\t\n\t    this._events || init.call(this);\n\t\n\t    if (!this._events[type]) this._events[type] = [];\n\t    if (!isArray(this._events[type])) {\n\t      this._events[type] = [this._events[type]];\n\t    }\n\t    return this._events[type];\n\t  };\n\t\n\t  EventEmitter.prototype.listenersAny = function() {\n\t\n\t    if(this._all) {\n\t      return this._all;\n\t    }\n\t    else {\n\t      return [];\n\t    }\n\t\n\t  };\n\t\n\t  if (true) {\n\t     // AMD. Register as an anonymous module.\n\t    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t      return EventEmitter;\n\t    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  } else if (typeof exports === 'object') {\n\t    // CommonJS\n\t    exports.EventEmitter2 = EventEmitter;\n\t  }\n\t  else {\n\t    // Browser global.\n\t    window.EventEmitter2 = EventEmitter;\n\t  }\n\t}();\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {Promise: window['Promise']}\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n\t * directory of this distribution and at\n\t * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n\t */\n\t;\n\t(function() {\n\t\n\t    /**\n\t     * Class for dimension change detection.\n\t     *\n\t     * @param {Element|Element[]|Elements|jQuery} element\n\t     * @param {Function} callback\n\t     *\n\t     * @constructor\n\t     */\n\t    var ResizeSensor = function(element, callback) {\n\t        /**\n\t         *\n\t         * @constructor\n\t         */\n\t        function EventQueue() {\n\t            this.q = [];\n\t            this.add = function(ev) {\n\t                this.q.push(ev);\n\t            };\n\t\n\t            var i, j;\n\t            this.call = function() {\n\t                for (i = 0, j = this.q.length; i < j; i++) {\n\t                    this.q[i].call();\n\t                }\n\t            };\n\t        }\n\t\n\t        /**\n\t         * @param {HTMLElement} element\n\t         * @param {String}      prop\n\t         * @returns {String|Number}\n\t         */\n\t        function getComputedStyle(element, prop) {\n\t            if (element.currentStyle) {\n\t                return element.currentStyle[prop];\n\t            } else if (window.getComputedStyle) {\n\t                return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t            } else {\n\t                return element.style[prop];\n\t            }\n\t        }\n\t\n\t        /**\n\t         *\n\t         * @param {HTMLElement} element\n\t         * @param {Function}    resized\n\t         */\n\t        function attachResizeEvent(element, resized) {\n\t            if (!element.resizedAttached) {\n\t                element.resizedAttached = new EventQueue();\n\t                element.resizedAttached.add(resized);\n\t            } else if (element.resizedAttached) {\n\t                element.resizedAttached.add(resized);\n\t                return;\n\t            }\n\t\n\t            element.resizeSensor = document.createElement('div');\n\t            element.resizeSensor.className = 'resize-sensor';\n\t            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n\t            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\t\n\t            element.resizeSensor.style.cssText = style;\n\t            element.resizeSensor.innerHTML =\n\t                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + '\"></div>' +\n\t                '</div>' +\n\t                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n\t                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n\t                '</div>';\n\t            element.appendChild(element.resizeSensor);\n\t\n\t            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n\t                element.style.position = 'relative';\n\t            }\n\t\n\t            var expand = element.resizeSensor.childNodes[0];\n\t            var expandChild = expand.childNodes[0];\n\t            var shrink = element.resizeSensor.childNodes[1];\n\t            var shrinkChild = shrink.childNodes[0];\n\t\n\t            var lastWidth, lastHeight;\n\t\n\t            var reset = function() {\n\t                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n\t                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n\t                expand.scrollLeft = expand.scrollWidth;\n\t                expand.scrollTop = expand.scrollHeight;\n\t                shrink.scrollLeft = shrink.scrollWidth;\n\t                shrink.scrollTop = shrink.scrollHeight;\n\t                lastWidth = element.offsetWidth;\n\t                lastHeight = element.offsetHeight;\n\t            };\n\t\n\t            reset();\n\t\n\t            var changed = function() {\n\t                if (element.resizedAttached) {\n\t                    element.resizedAttached.call();\n\t                }\n\t            };\n\t\n\t            var addEvent = function(el, name, cb) {\n\t                if (el.attachEvent) {\n\t                    el.attachEvent('on' + name, cb);\n\t                } else {\n\t                    el.addEventListener(name, cb);\n\t                }\n\t            };\n\t\n\t            var onScroll = function() {\n\t              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                  changed();\n\t              }\n\t              reset();\n\t            };\n\t\n\t            addEvent(expand, 'scroll', onScroll);\n\t            addEvent(shrink, 'scroll', onScroll);\n\t        }\n\t\n\t        var elementType = Object.prototype.toString.call(element);\n\t        var isCollectionTyped = ('[object Array]' === elementType\n\t            || ('[object NodeList]' === elementType)\n\t            || ('[object HTMLCollection]' === elementType)\n\t            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n\t            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n\t        );\n\t\n\t        if (isCollectionTyped) {\n\t            var i = 0, j = element.length;\n\t            for (; i < j; i++) {\n\t                attachResizeEvent(element[i], callback);\n\t            }\n\t        } else {\n\t            attachResizeEvent(element, callback);\n\t        }\n\t\n\t        this.detach = function() {\n\t            if (isCollectionTyped) {\n\t                var i = 0, j = element.length;\n\t                for (; i < j; i++) {\n\t                    ResizeSensor.detach(element[i]);\n\t                }\n\t            } else {\n\t                ResizeSensor.detach(element);\n\t            }\n\t        };\n\t    };\n\t\n\t    ResizeSensor.detach = function(element) {\n\t        if (element.resizeSensor) {\n\t            element.removeChild(element.resizeSensor);\n\t            delete element.resizeSensor;\n\t            delete element.resizedAttached;\n\t        }\n\t    };\n\t\n\t    // make available to common module loader\n\t    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t        module.exports = ResizeSensor;\n\t    }\n\t    else {\n\t        window.ResizeSensor = ResizeSensor;\n\t    }\n\t\n\t})();\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Plugin_1 = __webpack_require__(10);\r\n\tvar PerspectiveCamera = THREE.PerspectiveCamera;\r\n\tvar Chart_1 = __webpack_require__(14);\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar AxisWidget_1 = __webpack_require__(24);\r\n\tvar GridWidget_1 = __webpack_require__(25);\r\n\tvar TrendsGradientWidget_1 = __webpack_require__(27);\r\n\tvar TrendsLineWidget_1 = __webpack_require__(29);\r\n\tvar TrendsCandleWidget_1 = __webpack_require__(30);\r\n\tvar deps_1 = __webpack_require__(13);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\tvar AxisMarksWidget_1 = __webpack_require__(31);\r\n\tvar ChartBlankView = (function () {\r\n\t    function ChartBlankView(state, $container, pluginsAndWidgets) {\r\n\t        var _this = this;\r\n\t        if (pluginsAndWidgets === void 0) { pluginsAndWidgets = []; }\r\n\t        this.widgets = [];\r\n\t        if (!THREE || !THREE.REVISION)\r\n\t            Utils_1.Utils.error('three.js not found');\r\n\t        if (!$container) {\r\n\t            Utils_1.Utils.error('$el must be set');\r\n\t        }\r\n\t        // calculate state size\r\n\t        var style = getComputedStyle($container);\r\n\t        state.width = parseInt(style.width);\r\n\t        state.height = parseInt(style.height);\r\n\t        var plugins = pluginsAndWidgets.filter(function (pluginOrWidget) { return pluginOrWidget instanceof Plugin_1.ChartPlugin; });\r\n\t        this.chart = new Chart_1.Chart(state, plugins);\r\n\t        this.pluginsAndWidgets = pluginsAndWidgets;\r\n\t        this.zoomThrottled = Utils_1.Utils.throttle(function (zoomValue, origin) { return _this.zoom(zoomValue, origin); }, 200);\r\n\t        this.$container = $container;\r\n\t        this.init($container);\r\n\t    }\r\n\t    ;\r\n\t    ChartBlankView.prototype.init = function ($container) {\r\n\t        var chart = this.chart;\r\n\t        var _a = chart.state, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\r\n\t        this.scene = new THREE.Scene();\r\n\t        this.isStopped = !autoRender.enabled;\r\n\t        var renderer = this.renderer = new ChartView.renderers[this.chart.state.renderer]({\r\n\t            antialias: true,\r\n\t            alpha: true\r\n\t        });\r\n\t        var backgroundColor = new Color_1.ChartColor(chart.state.backgroundColor);\r\n\t        renderer.setSize(w, h);\r\n\t        renderer.setPixelRatio(ChartView.devicePixelRatio);\r\n\t        renderer.setClearColor(backgroundColor.value, backgroundColor.a);\r\n\t        $container.appendChild(renderer.domElement);\r\n\t        this.$el = renderer.domElement;\r\n\t        this.$el.style.display = 'block';\r\n\t        if (showStats) {\r\n\t            this.stats = new Stats();\r\n\t            $container.appendChild(this.stats.domElement);\r\n\t        }\r\n\t        this.setupCamera();\r\n\t        this.initWidgets();\r\n\t        this.bindEvents();\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\r\n\t     */\r\n\t    ChartBlankView.prototype.initWidgets = function () {\r\n\t        var _this = this;\r\n\t        var preinstalledWidgetsClasses = this.constructor.preinstalledWidgets.slice();\r\n\t        var customWidgets = [];\r\n\t        this.pluginsAndWidgets.forEach(function (pluginOrWidget) {\r\n\t            if (pluginOrWidget instanceof Widget_1.ChartWidget) {\r\n\t                customWidgets.push(pluginOrWidget);\r\n\t                return;\r\n\t            }\r\n\t            if (!(pluginOrWidget instanceof Plugin_1.ChartPlugin))\r\n\t                return;\r\n\t            var pluginWidgetClasses = pluginOrWidget.constructor.providedWidgets;\r\n\t            preinstalledWidgetsClasses.push.apply(preinstalledWidgetsClasses, pluginWidgetClasses);\r\n\t        });\r\n\t        this.widgets = customWidgets.concat(preinstalledWidgetsClasses.map(function (WidgetClass) { return new WidgetClass(); }));\r\n\t        this.widgets.forEach(function (widget) {\r\n\t            widget.setupChart(_this.chart);\r\n\t            widget.onReadyHandler();\r\n\t            _this.scene.add(widget.getObject3D());\r\n\t        });\r\n\t    };\r\n\t    ChartBlankView.prototype.renderLoop = function () {\r\n\t        var _this = this;\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        this.stats && this.stats.begin();\r\n\t        this.render();\r\n\t        if (this.isStopped)\r\n\t            return;\r\n\t        var fpsLimit = this.chart.state.autoRender.fps;\r\n\t        if (fpsLimit) {\r\n\t            var delay_1 = 1000 / fpsLimit;\r\n\t            setTimeout(function () { return requestAnimationFrame(function () { return _this.renderLoop(); }); }, delay_1);\r\n\t        }\r\n\t        else {\r\n\t            requestAnimationFrame(function () { return _this.renderLoop(); });\r\n\t        }\r\n\t        this.stats && this.stats.end();\r\n\t    };\r\n\t    ChartBlankView.prototype.render = function () {\r\n\t        this.chart.render();\r\n\t        this.renderer.render(this.scene, this.camera);\r\n\t    };\r\n\t    ChartBlankView.prototype.stop = function () {\r\n\t        this.isStopped = true;\r\n\t    };\r\n\t    ChartBlankView.prototype.run = function () {\r\n\t        this.isStopped = false;\r\n\t        this.renderLoop();\r\n\t    };\r\n\t    /**\r\n\t     * call to destroy state an init garbage collection\r\n\t     */\r\n\t    ChartBlankView.prototype.destroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.stop();\r\n\t        this.chart.destroy();\r\n\t        this.unbindEvents();\r\n\t        // WARNING! undocumented method for free webgl context\r\n\t        try {\r\n\t            this.renderer.forceContextLoss();\r\n\t        }\r\n\t        catch (wtf) {\r\n\t        }\r\n\t        this.renderer.context = null;\r\n\t        this.renderer.domElement = null;\r\n\t        this.renderer = null;\r\n\t    };\r\n\t    ChartBlankView.prototype.getState = function () {\r\n\t        return this.chart.state;\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.getTrend\r\n\t     */\r\n\t    ChartBlankView.prototype.getTrend = function (trendName) {\r\n\t        return this.chart.getTrend(trendName);\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for ChartView.state.setState\r\n\t     */\r\n\t    ChartBlankView.prototype.setState = function (state) {\r\n\t        return this.chart.setState(state);\r\n\t    };\r\n\t    ChartBlankView.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var $el = this.$el;\r\n\t        if (this.chart.state.controls.enabled) {\r\n\t            $el.addEventListener('mousewheel', function (ev) {\r\n\t                _this.onMouseWheel(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousemove', function (ev) {\r\n\t                _this.onMouseMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('mousedown', function (ev) { return _this.onMouseDown(ev); });\r\n\t            $el.addEventListener('mouseup', function (ev) { return _this.onMouseUp(ev); });\r\n\t            $el.addEventListener('touchmove', function (ev) {\r\n\t                _this.onTouchMove(ev);\r\n\t            });\r\n\t            $el.addEventListener('touchend', function (ev) {\r\n\t                _this.onTouchEnd(ev);\r\n\t            });\r\n\t        }\r\n\t        if (this.chart.state.autoResize) {\r\n\t            this.resizeSensor = new deps_1.ResizeSensor(this.$container, function () {\r\n\t                _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\r\n\t            });\r\n\t        }\r\n\t        this.unsubscribers = [\r\n\t            this.chart.onTrendsChange(function () { return _this.autoscroll(); }),\r\n\t            this.chart.screen.onTransformationFrame(function (options) { return _this.onScreenTransformHandler(options); }),\r\n\t            this.chart.onResize(function (options) { return _this.onChartResize(); })\r\n\t        ];\r\n\t    };\r\n\t    ChartBlankView.prototype.unbindEvents = function () {\r\n\t        // TODO: unbind events correctly\r\n\t        try {\r\n\t            this.resizeSensor && this.resizeSensor.detach();\r\n\t        }\r\n\t        catch (e) {\r\n\t        }\r\n\t        this.$el.remove();\r\n\t        this.unsubscribers.forEach(function (unsubscribe) { return unsubscribe(); });\r\n\t    };\r\n\t    ChartBlankView.prototype.setupCamera = function () {\r\n\t        var camSettings = this.chart.screen.getCameraSettings();\r\n\t        if (!this.camera) {\r\n\t            this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\r\n\t            this.scene.add(this.camera);\r\n\t        }\r\n\t        else {\r\n\t            this.camera.fov = camSettings.FOV;\r\n\t            this.camera.aspect = camSettings.aspect;\r\n\t            this.camera.far = camSettings.far;\r\n\t            this.camera.near = camSettings.near;\r\n\t            this.camera.updateProjectionMatrix();\r\n\t        }\r\n\t        this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\r\n\t        this.cameraInitialPosition = this.camera.position.clone();\r\n\t        this.onScreenTransformHandler(this.chart.screen.options);\r\n\t    };\r\n\t    ChartBlankView.prototype.onScreenTransformHandler = function (options) {\r\n\t        if (options.scrollX != void 0) {\r\n\t            var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\r\n\t            // scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setX(scrollX_1);\r\n\t        }\r\n\t        if (options.scrollY != void 0) {\r\n\t            var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\r\n\t            // scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\r\n\t            this.camera.position.setY(scrollY_1);\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.autoscroll = function () {\r\n\t        var state = this.chart;\r\n\t        if (!state.state.autoScroll)\r\n\t            return;\r\n\t        var oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\r\n\t        var trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\r\n\t        if (trendsMaxXDelta > 0) {\r\n\t            var maxVisibleX = this.chart.screen.getScreenRightVal();\r\n\t            var paddingRightX = this.chart.getPaddingRight();\r\n\t            var currentScroll = state.state.xAxis.range.scroll;\r\n\t            if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\r\n\t                return;\r\n\t            }\r\n\t            var scrollDelta = trendsMaxXDelta;\r\n\t            this.setState({ xAxis: { range: { scroll: currentScroll + scrollDelta } } });\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.onScrollStop = function () {\r\n\t        // var tendsXMax = this.state.state.computedData.trends.maxX;\r\n\t        // var paddingRightX = this.state.getPaddingRight();\r\n\t        // if (tendsXMax < paddingRightX) {\r\n\t        // \tthis.state.scrollToEnd();\r\n\t        // }\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseDown = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseUp = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseMove = function (ev) {\r\n\t        if (this.chart.state.cursor.dragMode) {\r\n\t            this.setState({ cursor: { dragMode: true, x: ev.clientX, y: ev.clientY } });\r\n\t        }\r\n\t    };\r\n\t    ChartBlankView.prototype.onMouseWheel = function (ev) {\r\n\t        ev.stopPropagation();\r\n\t        ev.preventDefault();\r\n\t        var zoomOrigin = ev.layerX / this.chart.state.width;\r\n\t        var zoomValue = 1 + ev.wheelDeltaY * 0.001;\r\n\t        this.zoom(zoomValue, zoomOrigin);\r\n\t    };\r\n\t    ChartBlankView.prototype.onTouchMove = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onTouchEnd = function (ev) {\r\n\t        this.setState({ cursor: { dragMode: false } });\r\n\t    };\r\n\t    ChartBlankView.prototype.onChartContainerResizeHandler = function (width, height) {\r\n\t        this.setState({ width: width, height: height });\r\n\t    };\r\n\t    ChartBlankView.prototype.onChartResize = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height;\r\n\t        this.renderer.setSize(width, height);\r\n\t        this.setupCamera();\r\n\t    };\r\n\t    ChartBlankView.prototype.zoom = function (zoomValue, zoomOrigin) {\r\n\t        var _this = this;\r\n\t        var MAX_ZOOM_VALUE = 1.5;\r\n\t        var MIN_ZOOM_VALUE = 0.7;\r\n\t        zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\r\n\t        zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\r\n\t        var autoScrollIsEnabled = this.chart.state.autoScroll;\r\n\t        if (autoScrollIsEnabled)\r\n\t            this.chart.setState({ autoScroll: false });\r\n\t        this.chart.zoom(zoomValue, zoomOrigin).then(function () {\r\n\t            if (autoScrollIsEnabled)\r\n\t                _this.setState({ autoScroll: true });\r\n\t        });\r\n\t    };\r\n\t    ChartBlankView.devicePixelRatio = window.devicePixelRatio;\r\n\t    ChartBlankView.preinstalledWidgets = [];\r\n\t    ChartBlankView.renderers = {\r\n\t        CanvasRenderer: THREE.CanvasRenderer,\r\n\t        WebGLRenderer: THREE.WebGLRenderer\r\n\t    };\r\n\t    return ChartBlankView;\r\n\t}());\r\n\texports.ChartBlankView = ChartBlankView;\r\n\tvar ChartView = (function (_super) {\r\n\t    __extends(ChartView, _super);\r\n\t    function ChartView() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    ChartView.preinstalledWidgets = [\r\n\t        TrendsLineWidget_1.TrendsLineWidget,\r\n\t        TrendsCandleWidget_1.TrendsCandlesWidget,\r\n\t        AxisWidget_1.AxisWidget,\r\n\t        GridWidget_1.GridWidget,\r\n\t        TrendsGradientWidget_1.TrendsGradientWidget,\r\n\t        // TODO: remove AxisMarksWidget from preinstalled widgets\r\n\t        AxisMarksWidget_1.AxisMarksWidget\r\n\t    ];\r\n\t    return ChartView;\r\n\t}(ChartBlankView));\r\n\texports.ChartView = ChartView;\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\texports.DEFAULT_CONFIG = {\r\n\t    installPluginWidgets: true\r\n\t};\r\n\t/**\r\n\t * base class for all plugins\r\n\t * NAME is mandatory\r\n\t */\r\n\tvar ChartPlugin = (function () {\r\n\t    function ChartPlugin(options, config) {\r\n\t        if (config === void 0) { config = {}; }\r\n\t        this.unsubscribers = [];\r\n\t        this.initialState = options;\r\n\t        this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\r\n\t        this.name = this.constructor.NAME;\r\n\t        if (!this.name)\r\n\t            Utils_1.Utils.error('Unnamed plugin detected');\r\n\t    }\r\n\t    ChartPlugin.prototype.setupChart = function (chart) {\r\n\t        var _this = this;\r\n\t        this.chart = chart;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvent(this.chart.onInitialStateApplied(function (initialState) { return _this.onInitialStateAppliedHandler(initialState); }), this.chart.onReady(function () { return _this.onReadyHandler(); }), this.chart.onDestroy(function () { return _this.onDestroyHandler(); }), this.chart.onPluginsStateChange(function (changedPluginsStates) { return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]); }));\r\n\t    };\r\n\t    ChartPlugin.prototype.getOptions = function () {\r\n\t        return this.chart.state.pluginsState[this.name];\r\n\t    };\r\n\t    ChartPlugin.prototype.onInitialStateAppliedHandler = function (initialState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onReadyHandler = function () {\r\n\t    };\r\n\t    ChartPlugin.prototype.onStateChanged = function (changedState) {\r\n\t    };\r\n\t    ChartPlugin.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t    };\r\n\t    ChartPlugin.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unsubscribers = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unsubscribers.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unsubscribers.push.apply(unsubscribers, (args));\r\n\t        }\r\n\t        (_a = this.unsubscribers).push.apply(_a, unsubscribers);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartPlugin.prototype.unbindEvents = function () {\r\n\t        this.unsubscribers.forEach(function (unsubscriber) { return unsubscriber(); });\r\n\t        this.unsubscribers.length = 0;\r\n\t    };\r\n\t    ChartPlugin.NAME = '';\r\n\t    ChartPlugin.providedWidgets = [];\r\n\t    return ChartPlugin;\r\n\t}());\r\n\texports.ChartPlugin = ChartPlugin;\r\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(2);\r\n\tfunction deepmerge(target, src, mergeArrays) {\r\n\t    if (mergeArrays === void 0) { mergeArrays = true; }\r\n\t    var array = Array.isArray(src);\r\n\t    var dst = array && [] || {};\r\n\t    if (array) {\r\n\t        target = target || [];\r\n\t        if (mergeArrays) {\r\n\t            dst = dst.concat(target);\r\n\t        }\r\n\t        src.forEach(function (e, i) {\r\n\t            if (typeof dst[i] === 'undefined') {\r\n\t                dst[i] = e;\r\n\t            }\r\n\t            else if (typeof e === 'object') {\r\n\t                dst[i] = deepmerge(target[i], e, mergeArrays);\r\n\t            }\r\n\t            else {\r\n\t                if (target.indexOf(e) === -1) {\r\n\t                    dst.push(e);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    else {\r\n\t        if (target && typeof target === 'object') {\r\n\t            Object.keys(target).forEach(function (key) {\r\n\t                dst[key] = target[key];\r\n\t            });\r\n\t        }\r\n\t        Object.keys(src).forEach(function (key) {\r\n\t            if (typeof src[key] !== 'object' || !src[key]) {\r\n\t                dst[key] = src[key];\r\n\t            }\r\n\t            else {\r\n\t                if (!target[key]) {\r\n\t                    dst[key] = src[key];\r\n\t                }\r\n\t                else {\r\n\t                    dst[key] = deepmerge(target[key], src[key], mergeArrays);\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t    }\r\n\t    return dst;\r\n\t}\r\n\t/**\r\n\t * project utils static class\r\n\t */\r\n\tvar Utils = (function () {\r\n\t    function Utils() {\r\n\t    }\r\n\t    /**\r\n\t     * deepMerge based on https://www.npmjs.com/package/deepmerge\r\n\t     */\r\n\t    Utils.deepMerge = function (obj1, obj2, mergeArrays) {\r\n\t        return deepmerge(obj1, obj2, mergeArrays);\r\n\t    };\r\n\t    /**\r\n\t     * deepCopy based on JSON.stringify function\r\n\t     * @deprecated\r\n\t     */\r\n\t    Utils.deepCopy = function (obj) {\r\n\t        // TODO: use deepMerge function to copy\r\n\t        return JSON.parse(JSON.stringify(obj));\r\n\t    };\r\n\t    /**\r\n\t     *\r\n\t     * @example\r\n\t     * // returns \"000015\"\r\n\t     * Utils.toFixed(15, 6);\r\n\t     */\r\n\t    Utils.toFixed = function (num, digitsCount) {\r\n\t        var maxDigits = 15;\r\n\t        var result = '';\r\n\t        var intVal = Math.floor(num);\r\n\t        var intStr = intVal.toString();\r\n\t        var lengthDiff = digitsCount - intStr.length;\r\n\t        if (lengthDiff > 0) {\r\n\t            result = '0'.repeat(lengthDiff) + intStr;\r\n\t        }\r\n\t        else {\r\n\t            result = intStr;\r\n\t        }\r\n\t        var afterPointDigitsCount = maxDigits - intStr.length;\r\n\t        var afterPointStr = num.toString().split('.')[1];\r\n\t        if (afterPointStr) {\r\n\t            result += '.' + afterPointStr.substr(0, afterPointDigitsCount);\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    Utils.bindEvent = function () {\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createTexture = function (width, height, fn) {\r\n\t        var canvas = document.createElement('canvas');\r\n\t        canvas.width = width;\r\n\t        canvas.height = height;\r\n\t        var ctx = canvas.getContext('2d');\r\n\t        fn(ctx);\r\n\t        var texture = new THREE.Texture(canvas);\r\n\t        texture.needsUpdate = true;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * generate texture from canvas context with NearestFilter\r\n\t     * @example\r\n\t     * \t// create texture with rect\r\n\t     *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\r\n\t     */\r\n\t    Utils.createPixelPerfectTexture = function (width, height, fn) {\r\n\t        var texture = this.createTexture(width, height, fn);\r\n\t        // texture.magFilter = THREE.NearestFilter;\r\n\t        texture.minFilter = THREE.NearestFilter;\r\n\t        return texture;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.error = function (msg) {\r\n\t        console.error('Chart error: ' + msg);\r\n\t        throw 'Chart: ' + msg;\r\n\t    };\r\n\t    /**\r\n\t     * throw error\r\n\t     */\r\n\t    Utils.warn = function (msg) {\r\n\t        console.warn('Chart warning: ' + msg);\r\n\t    };\r\n\t    /**\r\n\t     * @returns new unique id\r\n\t     */\r\n\t    Utils.getUid = function () {\r\n\t        return this.currentId++;\r\n\t    };\r\n\t    /**\r\n\t     * @returns distance between numbers\r\n\t     */\r\n\t    Utils.getDistance = function (num1, num2) {\r\n\t        return Math.max(num1, num2) - Math.min(num1, num2);\r\n\t    };\r\n\t    Utils.binarySearchClosestInd = function (arr, num, key) {\r\n\t        var mid;\r\n\t        var lo = 0;\r\n\t        var hi = arr.length - 1;\r\n\t        while (hi - lo > 1) {\r\n\t            mid = Math.floor((lo + hi) / 2);\r\n\t            if (arr[mid][key] < num) {\r\n\t                lo = mid;\r\n\t            }\r\n\t            else {\r\n\t                hi = mid;\r\n\t            }\r\n\t        }\r\n\t        if (num - arr[lo][key] <= arr[hi][key] - num) {\r\n\t            return lo;\r\n\t        }\r\n\t        return hi;\r\n\t    };\r\n\t    Utils.binarySearchClosest = function (arr, num, key) {\r\n\t        var ind = this.binarySearchClosestInd(arr, num, key);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.rectsIntersect = function (r1, r2) {\r\n\t        var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\r\n\t        var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\r\n\t        var _a = [left1 + width1, left2 + width2, top1 + height1, top2 + height2], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\r\n\t        return !(left2 > right1 ||\r\n\t            right2 < left1 ||\r\n\t            top2 > bottom1 ||\r\n\t            bottom2 < top1);\r\n\t    };\r\n\t    Utils.throttle = function (func, ms) {\r\n\t        var isThrottled = false, savedArgs, savedThis;\r\n\t        function wrapper() {\r\n\t            if (isThrottled) {\r\n\t                savedArgs = arguments;\r\n\t                savedThis = this;\r\n\t                return;\r\n\t            }\r\n\t            func.apply(this, arguments); // (1)\r\n\t            isThrottled = true;\r\n\t            setTimeout(function () {\r\n\t                isThrottled = false; // (3)\r\n\t                if (savedArgs) {\r\n\t                    wrapper.apply(savedThis, savedArgs);\r\n\t                    savedArgs = savedThis = null;\r\n\t                }\r\n\t            }, ms);\r\n\t        }\r\n\t        return wrapper;\r\n\t    };\r\n\t    Utils.msToTimeString = function (timestamp) {\r\n\t        var h = Math.floor(timestamp / 360000);\r\n\t        var m = Math.floor(timestamp / 60000);\r\n\t        var s = Math.floor(timestamp / 1000);\r\n\t        return h + ':' + m + ':' + s;\r\n\t    };\r\n\t    Utils.getRandomItem = function (arr) {\r\n\t        var ind = Math.floor(Math.random() * arr.length);\r\n\t        return arr[ind];\r\n\t    };\r\n\t    Utils.copyProps = function (srcObject, dstObject, props, excludeProps) {\r\n\t        if (excludeProps === void 0) { excludeProps = []; }\r\n\t        for (var key in props) {\r\n\t            if (excludeProps.indexOf(key) !== -1)\r\n\t                continue;\r\n\t            if (srcObject[key] == void 0)\r\n\t                continue;\r\n\t            if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\r\n\t                this.copyProps(srcObject[key], dstObject[key], props[key]);\r\n\t            }\r\n\t            else {\r\n\t                dstObject[key] = this.deepCopy(srcObject[key]);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    Utils.currentId = 1;\r\n\t    return Utils;\r\n\t}());\r\n\texports.Utils = Utils;\r\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar deps_1 = __webpack_require__(13);\r\n\t/**\r\n\t * this class uses as proxy for EventEmitter2\r\n\t */\r\n\tvar EventEmitter = (function () {\r\n\t    function EventEmitter() {\r\n\t        this.ee = new deps_1.EE2();\r\n\t    }\r\n\t    EventEmitter.prototype.emit = function (eventName) {\r\n\t        var args = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            args[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        (_a = this.ee).emit.apply(_a, [eventName].concat(args));\r\n\t        var _a;\r\n\t    };\r\n\t    EventEmitter.prototype.on = function (eventName, callback) {\r\n\t        return this.ee.on(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.off = function (eventName, callback) {\r\n\t        return this.ee.off(eventName, callback);\r\n\t    };\r\n\t    EventEmitter.prototype.subscribe = function (eventName, callback) {\r\n\t        var _this = this;\r\n\t        this.on(eventName, callback);\r\n\t        return function () { return _this.off(eventName, callback); };\r\n\t    };\r\n\t    EventEmitter.prototype.setMaxListeners = function (listenersCount) {\r\n\t        this.ee.setMaxListeners(listenersCount);\r\n\t    };\r\n\t    EventEmitter.prototype.removeAllListeners = function (eventName) {\r\n\t        this.ee.removeAllListeners(eventName);\r\n\t    };\r\n\t    return EventEmitter;\r\n\t}());\r\n\texports.EventEmitter = EventEmitter;\r\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(2));\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar TrendsManager_1 = __webpack_require__(17);\r\n\tvar Screen_1 = __webpack_require__(18);\r\n\tvar AxisMarks_1 = __webpack_require__(19);\r\n\tvar interfaces_1 = __webpack_require__(20);\r\n\tvar deps_1 = __webpack_require__(2);\r\n\tvar AnimationManager_1 = __webpack_require__(21);\r\n\tvar Easing_1 = __webpack_require__(22);\r\n\tvar CHART_STATE_EVENTS = {\r\n\t    INITIAL_STATE_APPLIED: 'initialStateApplied',\r\n\t    READY: 'ready',\r\n\t    DESTROY: 'destroy',\r\n\t    CHANGE: 'change',\r\n\t    TREND_CHANGE: 'trendChange',\r\n\t    TRENDS_CHANGE: 'trendsChange',\r\n\t    ZOOM: 'zoom',\r\n\t    RESIZE: 'resize',\r\n\t    SCROLL: 'scroll',\r\n\t    SCROLL_STOP: 'scrollStop',\r\n\t    PLUGINS_STATE_CHANGED: 'pluginsStateChanged'\r\n\t};\r\n\tvar LIGHT_BLUE = '#5273bd';\r\n\t/**\r\n\t *  all state changes caused only by Chart.setState method\r\n\t */\r\n\tvar Chart = (function () {\r\n\t    function Chart(initialState, plugins) {\r\n\t        if (plugins === void 0) { plugins = []; }\r\n\t        this.state = {\r\n\t            prevState: {},\r\n\t            zoom: 0,\r\n\t            xAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.ALL,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    scroll: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 0, end: 5 },\r\n\t                    margin: { start: 0, end: 5 }\r\n\t                },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                grid: { enabled: true, minSizePx: 100, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                autoScroll: true,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            yAxis: {\r\n\t                range: {\r\n\t                    type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\r\n\t                    from: 0,\r\n\t                    to: 0,\r\n\t                    zoom: 1,\r\n\t                    padding: { start: 5, end: 5 },\r\n\t                    margin: { start: 5, end: 5 },\r\n\t                },\r\n\t                grid: { enabled: true, minSizePx: 50, color: \"rgba(\" + LIGHT_BLUE + \", 0.12)\" },\r\n\t                dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\r\n\t                marks: [],\r\n\t                color: LIGHT_BLUE\r\n\t            },\r\n\t            animations: {\r\n\t                enabled: true,\r\n\t                trendChangeSpeed: 0.5,\r\n\t                trendChangeEase: void 0,\r\n\t                zoomSpeed: 250,\r\n\t                scrollSpeed: 1000,\r\n\t                scrollEase: Easing_1.EASING.Quadratic.Out,\r\n\t                zoomEase: Easing_1.EASING.Quadratic.Out,\r\n\t                autoScrollSpeed: 1000,\r\n\t                autoScrollEase: Easing_1.EASING.Linear.None,\r\n\t            },\r\n\t            autoRender: { enabled: true, fps: 0 },\r\n\t            autoResize: true,\r\n\t            renderer: 'WebGLRenderer',\r\n\t            autoScroll: true,\r\n\t            controls: { enabled: true },\r\n\t            trendDefaultState: {\r\n\t                enabled: true,\r\n\t                type: Trend_1.TREND_TYPE.LINE,\r\n\t                data: [],\r\n\t                maxSegmentLength: 1000,\r\n\t                lineWidth: 2,\r\n\t                lineColor: 0xFFFFFF,\r\n\t                hasBackground: true,\r\n\t                backgroundColor: 'rgba(#FFFFFF, 0.07)',\r\n\t                hasBeacon: false,\r\n\t                settingsForTypes: {\r\n\t                    CANDLE: {\r\n\t                        minSegmentLengthInPx: 20,\r\n\t                        maxSegmentLengthInPx: 40,\r\n\t                    },\r\n\t                    LINE: {\r\n\t                        minSegmentLengthInPx: 2,\r\n\t                        maxSegmentLengthInPx: 10,\r\n\t                    }\r\n\t                }\r\n\t            },\r\n\t            cursor: {\r\n\t                dragMode: false,\r\n\t                x: 0,\r\n\t                y: 0\r\n\t            },\r\n\t            font: {\r\n\t                s: '11px Arial',\r\n\t                m: '12px Arial',\r\n\t                l: '13px Arial'\r\n\t            },\r\n\t            backgroundColor: 0x000c2a,\r\n\t            showStats: false,\r\n\t            pluginsState: {},\r\n\t            eventEmitterMaxListeners: 20,\r\n\t            maxVisibleSegments: 1280\r\n\t        };\r\n\t        this.plugins = {};\r\n\t        this.animationManager = new AnimationManager_1.AnimationManager();\r\n\t        /**\r\n\t         * true then state was initialized and ready to use\r\n\t         */\r\n\t        this.isReady = false;\r\n\t        this.isDestroyed = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, initialState);\r\n\t        this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\r\n\t        initialState.trends = this.trendsManager.calculatedOptions;\r\n\t        initialState = this.installPlugins(plugins, initialState);\r\n\t        this.setState(initialState);\r\n\t        this.setState({ computedData: this.getComputedData() });\r\n\t        this.savePrevState();\r\n\t        this.screen = new Screen_1.Screen(this);\r\n\t        this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\r\n\t        this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\r\n\t        this.initListeners();\r\n\t        // message to other modules that Chart.state is ready for use\r\n\t        this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\r\n\t        // message to other modules that Chart is ready for use\r\n\t        this.isReady = true;\r\n\t        this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\r\n\t    }\r\n\t    /**\r\n\t     * destroy chart, use ChartView.destroy to completely destroy Chart\r\n\t     */\r\n\t    Chart.prototype.destroy = function () {\r\n\t        this.ee.emit(CHART_STATE_EVENTS.DESTROY);\r\n\t        this.ee.removeAllListeners();\r\n\t        this.state = {};\r\n\t        this.isDestroyed = true;\r\n\t    };\r\n\t    Chart.prototype.onDestroy = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\r\n\t    };\r\n\t    Chart.prototype.onInitialStateApplied = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\r\n\t    };\r\n\t    Chart.prototype.onReady = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\r\n\t    };\r\n\t    Chart.prototype.onChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onTrendsChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\r\n\t    };\r\n\t    Chart.prototype.onScrollStop = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\r\n\t    };\r\n\t    Chart.prototype.onScroll = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\r\n\t    };\r\n\t    Chart.prototype.onZoom = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\r\n\t    };\r\n\t    Chart.prototype.onResize = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\r\n\t    };\r\n\t    Chart.prototype.onPluginsStateChange = function (cb) {\r\n\t        return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\r\n\t    };\r\n\t    Chart.prototype.getTrend = function (trendName) {\r\n\t        return this.trendsManager.getTrend(trendName);\r\n\t    };\r\n\t    Chart.prototype.render = function () {\r\n\t        this.animationManager.tick();\r\n\t    };\r\n\t    Chart.prototype.setState = function (newState, eventData, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        if (this.isDestroyed) {\r\n\t            Utils_1.Utils.error('You have tried to change state of destroyed Chart instance');\r\n\t        }\r\n\t        var stateData = this.state;\r\n\t        var newStateObj = newState;\r\n\t        var changedProps = {};\r\n\t        for (var key in newStateObj) {\r\n\t            if (stateData[key] !== newStateObj[key]) {\r\n\t                changedProps[key] = newStateObj[key];\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(changedProps);\r\n\t        // temporary remove trends state from newState by performance reasons\r\n\t        var trendsData = {};\r\n\t        if (newState.trends)\r\n\t            for (var trendName in newState.trends) {\r\n\t                var trendOptions = newState.trends[trendName];\r\n\t                if (trendOptions.data)\r\n\t                    trendsData[trendName] = trendOptions.data;\r\n\t                delete trendOptions.data;\r\n\t            }\r\n\t        var newStateContainsData = Object.keys(trendsData).length > 0;\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, newState, false);\r\n\t        // return state to state\r\n\t        if (newStateContainsData)\r\n\t            for (var trendName in trendsData) {\r\n\t                this.state.trends[trendName].data = trendsData[trendName];\r\n\t            }\r\n\t        if (silent)\r\n\t            return;\r\n\t        // recalculate all dynamic state props\r\n\t        var recalculateResult = this.recalculateState(changedProps);\r\n\t        changedProps = recalculateResult.changedProps;\r\n\t        this.emitChangedStateEvents(changedProps, eventData);\r\n\t    };\r\n\t    /**\r\n\t     * recalculate all computed state props\r\n\t     */\r\n\t    Chart.prototype.recalculateState = function (changedProps) {\r\n\t        var data = this.state;\r\n\t        var patch = {};\r\n\t        var actualData = Utils_1.Utils.deepMerge({}, data);\r\n\t        // recalculate scroll position by changed cursor options\r\n\t        var cursorOptions = changedProps.cursor;\r\n\t        var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\r\n\t        if (isMouseDrag) {\r\n\t            var oldX = data.prevState.cursor.x;\r\n\t            var currentX = cursorOptions.x;\r\n\t            var currentScroll = data.xAxis.range.scroll;\r\n\t            var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\r\n\t            patch.xAxis = { range: { scroll: currentScroll + deltaXVal } };\r\n\t            actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: patch.xAxis });\r\n\t        }\r\n\t        var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\r\n\t        var scrollXChanged = false;\r\n\t        var needToRecalculateXAxis = (isMouseDrag ||\r\n\t            chartWasResized ||\r\n\t            (changedProps.xAxis && (changedProps.xAxis.range)) ||\r\n\t            this.state.xAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateXAxis) {\r\n\t            var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\r\n\t            if (xAxisPatch) {\r\n\t                scrollXChanged = true;\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { xAxis: xAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { xAxis: xAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        // recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\r\n\t        var needToRecalculateYAxis = (chartWasResized ||\r\n\t            (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END ||\r\n\t                data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO ||\r\n\t                data.yAxis.range.isMirrorMode) &&\r\n\t                (scrollXChanged || changedProps.trends || changedProps.yAxis) ||\r\n\t            this.state.yAxis.range.zeroVal == void 0);\r\n\t        if (needToRecalculateYAxis) {\r\n\t            var yAxisPatch = this.recalculateYAxis(actualData);\r\n\t            if (yAxisPatch) {\r\n\t                patch = Utils_1.Utils.deepMerge(patch, { yAxis: yAxisPatch });\r\n\t                actualData = Utils_1.Utils.deepMerge(actualData, { yAxis: yAxisPatch });\r\n\t            }\r\n\t        }\r\n\t        this.savePrevState(patch);\r\n\t        var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\r\n\t        patch.computedData = this.getComputedData(allChangedProps);\r\n\t        this.savePrevState(patch);\r\n\t        this.state = Utils_1.Utils.deepMerge(this.state, patch);\r\n\t        return { changedProps: allChangedProps, patch: patch };\r\n\t    };\r\n\t    Chart.prototype.getComputedData = function (changedProps) {\r\n\t        var computeAll = !changedProps;\r\n\t        var computedData = {};\r\n\t        if (computeAll || changedProps.trends && this.trendsManager) {\r\n\t            computedData.trends = {\r\n\t                maxXVal: this.trendsManager.getEndXVal(),\r\n\t                minXVal: this.trendsManager.getStartXVal()\r\n\t            };\r\n\t        }\r\n\t        return computedData;\r\n\t    };\r\n\t    Chart.prototype.savePrevState = function (changedProps) {\r\n\t        if (!changedProps)\r\n\t            changedProps = this.state;\r\n\t        var prevState = this.state.prevState;\r\n\t        // prevent to store prev trend state by performance reasons\r\n\t        Utils_1.Utils.copyProps(this.state, prevState, changedProps, ['trends']);\r\n\t    };\r\n\t    Chart.prototype.emitChangedStateEvents = function (changedProps, eventData) {\r\n\t        var prevState = this.state.prevState;\r\n\t        // emit common change event\r\n\t        this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\r\n\t        // emit event for each changed state property\r\n\t        for (var key in changedProps) {\r\n\t            this.ee.emit(key + 'Change', changedProps[key], eventData);\r\n\t        }\r\n\t        if (!this.isReady)\r\n\t            return;\r\n\t        // emit special events based on changed state\r\n\t        var scrollStopEventNeeded = (changedProps.cursor &&\r\n\t            changedProps.cursor.dragMode === false &&\r\n\t            prevState.cursor.dragMode === true);\r\n\t        scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\r\n\t        var scrollChangeEventsNeeded = (changedProps.xAxis &&\r\n\t            changedProps.xAxis.range &&\r\n\t            changedProps.xAxis.range.scroll !== void 0);\r\n\t        scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\r\n\t        var zoomEventsNeeded = ((changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\r\n\t            (changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom));\r\n\t        zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\r\n\t        var resizeEventNeeded = (changedProps.width || changedProps.height);\r\n\t        resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\r\n\t        var pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\r\n\t        pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\r\n\t    };\r\n\t    /**\r\n\t     * init plugins and save plugins options in initialState\r\n\t     */\r\n\t    Chart.prototype.installPlugins = function (plugins, initialState) {\r\n\t        var _this = this;\r\n\t        initialState.pluginsState = {};\r\n\t        plugins.forEach(function (plugin) {\r\n\t            var PluginClass = plugin.constructor;\r\n\t            var pluginName = PluginClass.NAME;\r\n\t            initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\r\n\t            _this.plugins[pluginName] = plugin;\r\n\t            plugin.setupChart(_this);\r\n\t        });\r\n\t        return initialState;\r\n\t    };\r\n\t    /**\r\n\t     * returns plugin instance by plugin name\r\n\t     * @example\r\n\t     */\r\n\t    Chart.prototype.getPlugin = function (pluginName) {\r\n\t        return this.plugins[pluginName];\r\n\t    };\r\n\t    Chart.prototype.initListeners = function () {\r\n\t        var _this = this;\r\n\t        this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function (changedTrends, newData) {\r\n\t            _this.handleTrendsChange(changedTrends, newData);\r\n\t        });\r\n\t        this.ee.on('animationsChange', function (animationOptions) {\r\n\t            if (animationOptions.enabled !== _this.animationManager.isAnimationsEnabled) {\r\n\t                _this.animationManager.setAimationsEnabled(animationOptions.enabled);\r\n\t            }\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.handleTrendsChange = function (changedTrends, newData) {\r\n\t        for (var trendName in changedTrends) {\r\n\t            this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\r\n\t        }\r\n\t    };\r\n\t    Chart.prototype.recalculateXAxis = function (actualData, changedProps) {\r\n\t        var axisRange = actualData.xAxis.range;\r\n\t        var patch = { range: {} };\r\n\t        var isInitialize = axisRange.zeroVal == void 0;\r\n\t        var zeroVal, scaleFactor;\r\n\t        var zoom = axisRange.zoom;\r\n\t        if (axisRange.isMirrorMode) {\r\n\t            Utils_1.Utils.error('range.isMirrorMode available only for yAxis.range');\r\n\t        }\r\n\t        if (isInitialize) {\r\n\t            zeroVal = axisRange.from;\r\n\t            scaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t        }\r\n\t        else {\r\n\t            zeroVal = axisRange.zeroVal;\r\n\t            scaleFactor = axisRange.scaleFactor;\r\n\t            // recalculate range.zoom and range.scroll then range.from or range.to was changed\r\n\t            if (changedProps.xAxis &&\r\n\t                (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\r\n\t                if (changedProps.xAxis.range.zoom) {\r\n\t                    Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\r\n\t                }\r\n\t                var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\r\n\t                patch.range.scroll = axisRange.from - zeroVal;\r\n\t                patch.range.zoom = currentScaleFactor / scaleFactor;\r\n\t                return patch;\r\n\t            }\r\n\t        }\r\n\t        // recalculate range.from and range.to then range.zoom or range.scroll was changed\r\n\t        do {\r\n\t            var from = zeroVal + axisRange.scroll;\r\n\t            var to = from + actualData.width / (scaleFactor * zoom);\r\n\t            var rangeLength = to - from;\r\n\t            var needToRecalculateZoom = false;\r\n\t            var rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\r\n\t            var rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\r\n\t            needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\r\n\t            if (needToRecalculateZoom) {\r\n\t                var fixScale = rangeLength > axisRange.maxLength ?\r\n\t                    rangeLength / axisRange.maxLength :\r\n\t                    rangeLength / axisRange.minLength;\r\n\t                var zoom = zoom * fixScale;\r\n\t                patch.range.zoom = zoom;\r\n\t            }\r\n\t        } while (needToRecalculateZoom);\r\n\t        patch.range.from = from;\r\n\t        patch.range.to = to;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.recalculateYAxis = function (actualData) {\r\n\t        var patch = { range: {} };\r\n\t        var yAxisRange = actualData.yAxis.range;\r\n\t        var isInitialize = yAxisRange.scaleFactor == void 0;\r\n\t        var trends = this.trendsManager;\r\n\t        var trendsEndXVal = trends.getEndXVal();\r\n\t        var trendsStartXVal = trends.getStartXVal();\r\n\t        var xRange = actualData.xAxis.range;\r\n\t        var xFrom = xRange.from, xTo = xRange.to;\r\n\t        var xRangeLength = xTo - xFrom;\r\n\t        var zeroVal, scaleFactor, scroll, zoom, needToZoom;\r\n\t        // check situation when state was scrolled behind trends end or before trends start\r\n\t        if (xTo > trendsEndXVal) {\r\n\t            xTo = trendsEndXVal;\r\n\t            xFrom = xTo - xRangeLength;\r\n\t        }\r\n\t        else if (xFrom < trendsStartXVal) {\r\n\t            xFrom = trendsStartXVal;\r\n\t            xTo = xFrom + xRangeLength;\r\n\t        }\r\n\t        var maxY = trends.getMaxYVal(xFrom, xTo);\r\n\t        var minY = trends.getMinYVal(xFrom, xTo);\r\n\t        var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\r\n\t        if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\r\n\t            if (trendLastY > maxY)\r\n\t                maxY = trendLastY;\r\n\t            if (trendLastY < minY)\r\n\t                minY = trendLastY;\r\n\t        }\r\n\t        if (yAxisRange.isMirrorMode) {\r\n\t            if (yAxisRange.zeroVal == void 0)\r\n\t                Utils_1.Utils.error('range.zeroVal must be set when range.isMirrorMode');\r\n\t            var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\r\n\t            var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\r\n\t            var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\r\n\t            maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\r\n\t            minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\r\n\t        }\r\n\t        var margin = yAxisRange.margin;\r\n\t        var padding = {\r\n\t            start: yAxisRange.padding.start + margin.start,\r\n\t            end: yAxisRange.padding.end + margin.end\r\n\t        };\r\n\t        if (padding.end + padding.start >= actualData.height) {\r\n\t            Utils_1.Utils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\r\n\t        }\r\n\t        var rangeLength = maxY - minY;\r\n\t        var paddingTopInPercents = padding.end / actualData.height;\r\n\t        var paddingBottomInPercents = padding.start / actualData.height;\r\n\t        var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\r\n\t        var visibleRangeLength = rangeLength / rangeLengthInPercents;\r\n\t        var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\r\n\t        var toVal = maxY + visibleRangeLength * paddingTopInPercents;\r\n\t        if (isInitialize) {\r\n\t            zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\r\n\t            scaleFactor = actualData.height / (toVal - fromVal);\r\n\t            patch = { range: { zeroVal: zeroVal, scaleFactor: scaleFactor } };\r\n\t            needToZoom = true;\r\n\t        }\r\n\t        else {\r\n\t            scaleFactor = yAxisRange.scaleFactor;\r\n\t            zeroVal = yAxisRange.zeroVal;\r\n\t            var maxScreenY = Math.round(this.getScreenYByValue(maxY));\r\n\t            var minScreenY = Math.round(this.getScreenYByValue(minY));\r\n\t            needToZoom = (maxScreenY > actualData.height - margin.end ||\r\n\t                maxScreenY < actualData.height - padding.end ||\r\n\t                minScreenY < margin.start ||\r\n\t                minScreenY > padding.start);\r\n\t        }\r\n\t        if (!needToZoom)\r\n\t            return null;\r\n\t        scroll = fromVal - zeroVal;\r\n\t        zoom = (actualData.height / (toVal - fromVal)) / scaleFactor;\r\n\t        var currentAxisRange = this.state.yAxis.range;\r\n\t        if (currentAxisRange.from !== fromVal)\r\n\t            patch.range.from = fromVal;\r\n\t        if (currentAxisRange.to !== toVal)\r\n\t            patch.range.to = toVal;\r\n\t        if (currentAxisRange.scroll !== scroll)\r\n\t            patch.range.scroll = scroll;\r\n\t        if (currentAxisRange.zoom !== zoom)\r\n\t            patch.range.zoom = zoom;\r\n\t        return patch;\r\n\t    };\r\n\t    Chart.prototype.zoom = function (zoomValue, origin) {\r\n\t        var _this = this;\r\n\t        if (origin === void 0) { origin = 0.5; }\r\n\t        var _a = this.state.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\r\n\t        var newZoom = zoom * zoomValue;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        var nextRange = this.state.width / (scaleFactor * newZoom);\r\n\t        var newScroll = scroll + (currentRange - nextRange) * origin;\r\n\t        this.setState({ xAxis: { range: { zoom: newZoom, scroll: newScroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.zoomSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    Chart.prototype.zoomToRange = function (range, origin) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\r\n\t        var currentRange = this.state.width / (scaleFactor * zoom);\r\n\t        return this.zoom(currentRange / range, origin);\r\n\t    };\r\n\t    Chart.prototype.scrollToEnd = function () {\r\n\t        var _this = this;\r\n\t        var state = this.state;\r\n\t        var endXVal = this.trendsManager.getEndXVal();\r\n\t        var range = state.xAxis.range;\r\n\t        var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\r\n\t        this.setState({ xAxis: { range: { scroll: scroll } } });\r\n\t        return new deps_1.Promise(function (resolve) {\r\n\t            var animationTime = _this.state.animations.enabled ? _this.state.animations.scrollSpeed : 0;\r\n\t            setTimeout(resolve, animationTime * 1000);\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to xVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to yVal\r\n\t     */\r\n\t    Chart.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Chart.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Chart.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns x value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenX = function (x) {\r\n\t        var _a = this.state.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getValueByScreenY = function (y) {\r\n\t        var _a = this.state.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\r\n\t        return zeroVal + scroll + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen x value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     *  returns screen y value by screen y coordinate\r\n\t     */\r\n\t    Chart.prototype.getScreenYByValue = function (yVal) {\r\n\t        var _a = this.state.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByYAxis(yVal - zeroVal - scroll);\r\n\t    };\r\n\t    /**\r\n\t     * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Chart.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\r\n\t     */\r\n\t    Chart.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    Chart.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    Chart.prototype.getScreenLeftVal = function () {\r\n\t        return this.getValueByScreenX(0);\r\n\t    };\r\n\t    Chart.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.state.width);\r\n\t    };\r\n\t    Chart.prototype.getPaddingRight = function () {\r\n\t        return this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\r\n\t    };\r\n\t    return Chart;\r\n\t}());\r\n\texports.Chart = Chart;\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar TrendSegmentsManager_1 = __webpack_require__(16);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar deps_1 = __webpack_require__(2);\r\n\tvar EVENTS = {\r\n\t    CHANGE: 'Change',\r\n\t    PREPEND_REQUEST: 'prependRequest'\r\n\t};\r\n\t(function (TREND_TYPE) {\r\n\t    TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\r\n\t    TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\r\n\t})(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\r\n\tvar TREND_TYPE = exports.TREND_TYPE;\r\n\tvar Trend = (function () {\r\n\t    function Trend(chartState, trendName, initialState) {\r\n\t        this.minXVal = Infinity;\r\n\t        this.minYVal = Infinity;\r\n\t        this.maxXVal = -Infinity;\r\n\t        this.maxYVal = -Infinity;\r\n\t        var options = initialState.trends[trendName];\r\n\t        this.name = trendName;\r\n\t        this.chart = chartState;\r\n\t        this.calculatedOptions = Utils_1.Utils.deepMerge(this.chart.state.trendDefaultState, options);\r\n\t        this.calculatedOptions.name = trendName;\r\n\t        if (options.dataset)\r\n\t            this.calculatedOptions.data = Trend.prepareData(options.dataset);\r\n\t        this.calculatedOptions.dataset = [];\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    Trend.prototype.onInitialStateApplied = function () {\r\n\t        this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chart, this);\r\n\t    };\r\n\t    Trend.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var chartState = this.chart;\r\n\t        chartState.onInitialStateApplied(function () { return _this.onInitialStateApplied(); });\r\n\t        chartState.onScrollStop(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onZoom(function () { return _this.checkForPrependRequest(); });\r\n\t        chartState.onTrendChange(function (trendName, changedOptions, newData) { return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData); });\r\n\t        chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    Trend.prototype.getCalculatedOptions = function () {\r\n\t        return this.calculatedOptions;\r\n\t    };\r\n\t    Trend.prototype.appendData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData());\r\n\t        var updatedTrendData = options.data.concat(newData);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.prependData = function (rawData) {\r\n\t        var options = this.getOptions();\r\n\t        var newData = Trend.prepareData(rawData, this.getData(), true);\r\n\t        var updatedTrendData = newData.concat(options.data);\r\n\t        this.changeData(updatedTrendData, newData);\r\n\t    };\r\n\t    Trend.prototype.changeData = function (allData, newData) {\r\n\t        for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\r\n\t            var item = newData_1[_i];\r\n\t            if (item.xVal < this.minXVal)\r\n\t                this.minXVal = item.xVal;\r\n\t            if (item.xVal > this.maxXVal)\r\n\t                this.maxXVal = item.xVal;\r\n\t            if (item.yVal < this.minYVal)\r\n\t                this.minYVal = item.yVal;\r\n\t            if (item.yVal > this.maxYVal)\r\n\t                this.maxYVal = item.yVal;\r\n\t        }\r\n\t        var options = this.getOptions();\r\n\t        var statePatch = { trends: (_a = {}, _a[options.name] = { data: allData }, _a) };\r\n\t        this.chart.setState(statePatch, newData);\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.getData = function (fromX, toX) {\r\n\t        var data = this.getOptions().data;\r\n\t        if (fromX == void 0 && toX == void 0)\r\n\t            return data;\r\n\t        fromX = fromX !== void 0 ? fromX : data[0].xVal;\r\n\t        toX = toX !== void 0 ? toX : data[data.length].xVal;\r\n\t        var filteredData = [];\r\n\t        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\r\n\t            var item = data_1[_i];\r\n\t            if (item.xVal < fromX)\r\n\t                continue;\r\n\t            if (item.xVal > toX)\r\n\t                break;\r\n\t            filteredData.push(item);\r\n\t        }\r\n\t        return filteredData;\r\n\t    };\r\n\t    Trend.prototype.getFirstItem = function () {\r\n\t        return this.getOptions().data[0];\r\n\t    };\r\n\t    Trend.prototype.getLastItem = function () {\r\n\t        var data = this.getOptions().data;\r\n\t        return data[data.length - 1];\r\n\t    };\r\n\t    Trend.prototype.getOptions = function () {\r\n\t        return this.chart.state.trends[this.name];\r\n\t    };\r\n\t    Trend.prototype.setOptions = function (options) {\r\n\t        this.chart.setState({ trends: (_a = {}, _a[this.name] = options, _a) });\r\n\t        var _a;\r\n\t    };\r\n\t    Trend.prototype.onPrependRequest = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.PREPEND_REQUEST, cb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\r\n\t        };\r\n\t    };\r\n\t    /**\r\n\t     * shortcut for Chart.onTrendChange\r\n\t     */\r\n\t    Trend.prototype.onChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on(EVENTS.CHANGE, cb);\r\n\t        return function () { _this.ee.off(EVENTS.CHANGE, cb); };\r\n\t    };\r\n\t    Trend.prototype.onDataChange = function (cb) {\r\n\t        var _this = this;\r\n\t        var onChangeCb = function (changedOptions, newData) {\r\n\t            if (newData)\r\n\t                cb(newData);\r\n\t        };\r\n\t        this.ee.on(EVENTS.CHANGE, onChangeCb);\r\n\t        return function () {\r\n\t            _this.ee.off(EVENTS.CHANGE, onChangeCb);\r\n\t        };\r\n\t    };\r\n\t    Trend.prototype.checkForPrependRequest = function () {\r\n\t        var _this = this;\r\n\t        if (this.prependRequest)\r\n\t            return;\r\n\t        var chartState = this.chart;\r\n\t        var minXVal = chartState.state.computedData.trends.minXVal;\r\n\t        var minScreenX = chartState.getScreenXByValue(minXVal);\r\n\t        var needToRequest = minScreenX > 0;\r\n\t        var _a = chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var requestedDataLength = to - from;\r\n\t        if (!needToRequest)\r\n\t            return;\r\n\t        this.prependRequest = new deps_1.Promise(function (resolve, reject) {\r\n\t            _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\r\n\t        });\r\n\t        this.prependRequest.then(function (newData) {\r\n\t            _this.prependData(newData);\r\n\t            _this.prependRequest = null;\r\n\t        }, function () {\r\n\t            _this.prependRequest = null;\r\n\t        });\r\n\t    };\r\n\t    Trend.prepareData = function (newData, currentData, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var data = [];\r\n\t        if (typeof newData[0] == 'number') {\r\n\t            currentData = currentData || [];\r\n\t            var initialItem = void 0;\r\n\t            var xVal = void 0;\r\n\t            if (isPrepend) {\r\n\t                initialItem = currentData[0];\r\n\t                xVal = initialItem.xVal - newData.length;\r\n\t            }\r\n\t            else {\r\n\t                initialItem = currentData[currentData.length - 1];\r\n\t                xVal = initialItem ? initialItem.xVal + 1 : 0;\r\n\t            }\r\n\t            for (var _i = 0, _a = newData; _i < _a.length; _i++) {\r\n\t                var yVal = _a[_i];\r\n\t                data.push({ xVal: xVal, yVal: yVal, id: Utils_1.Utils.getUid() });\r\n\t                xVal++;\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            data = newData;\r\n\t        }\r\n\t        return data;\r\n\t    };\r\n\t    return Trend;\r\n\t}());\r\n\texports.Trend = Trend;\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar MAX_ANIMATED_SEGMENTS = 100;\r\n\tvar EVENTS = {\r\n\t    REBUILD: 'rebuild',\r\n\t    DISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\r\n\t    ANIMATION_FRAME: 'animationFrame'\r\n\t};\r\n\t/**\r\n\t *  Class helps to display and animate trends segments\r\n\t */\r\n\tvar TrendSegmentsManager = (function () {\r\n\t    function TrendSegmentsManager(chartState, trend) {\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.segmentsLength = 0;\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForPrepend = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.trend = trend;\r\n\t        this.maxSegmentLength = trend.getOptions().maxSegmentLength;\r\n\t        this.tryToRebuildSegments();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendSegmentsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.trend.onChange(function (changedOptions, newData) { return _this.onTrendChangeHandler(changedOptions, newData); });\r\n\t        this.chartState.onZoom(function () { return _this.onZoomHandler(); });\r\n\t        this.chartState.onScroll(function () { return _this.recalculateDisplayedRange(); });\r\n\t        this.chartState.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t        this.appendAnimation && this.appendAnimation.kill();\r\n\t        this.prependAnimation && this.prependAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onZoomHandler = function () {\r\n\t        var segmentsRebuilded = this.tryToRebuildSegments();\r\n\t        if (!segmentsRebuilded) {\r\n\t            this.recalculateDisplayedRange();\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onTrendChangeHandler = function (changedOptions, newData) {\r\n\t        var needToRebuildSegments = (changedOptions.type != void 0 ||\r\n\t            changedOptions.maxSegmentLength != void 0);\r\n\t        if (needToRebuildSegments) {\r\n\t            this.tryToRebuildSegments(true);\r\n\t            return;\r\n\t        }\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var data = this.trend.getData();\r\n\t        var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t        isAppend ? this.appendData(newData) : this.prependData(newData);\r\n\t        this.recalculateDisplayedRange();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getSegment = function (id) {\r\n\t        return this.segmentsById[id];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getEndSegment = function () {\r\n\t        return this.segmentsById[this.endSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.getStartSegment = function () {\r\n\t        return this.segmentsById[this.startSegmentId];\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.tryToRebuildSegments = function (force) {\r\n\t        if (force === void 0) { force = false; }\r\n\t        var options = this.trend.getOptions();\r\n\t        var trendTypeName = Trend_1.TREND_TYPE[options.type];\r\n\t        var trendTypesSettings = options.settingsForTypes;\r\n\t        var trendTypeSettings = trendTypesSettings[trendTypeName];\r\n\t        var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\r\n\t        var needToRebuild = this.segments.length === 0 || force;\r\n\t        var segmentLength = this.maxSegmentLength;\r\n\t        // call toFixed(2) to prevent floating segment error compare\r\n\t        var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\r\n\t        var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\r\n\t        if (currentSegmentLengthInPx < minSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\r\n\t        }\r\n\t        else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\r\n\t            needToRebuild = true;\r\n\t            segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\r\n\t        }\r\n\t        if (!needToRebuild)\r\n\t            return false;\r\n\t        this.maxSegmentLength = segmentLength;\r\n\t        this.segmentsById = {};\r\n\t        this.segments = [];\r\n\t        this.nextEmptyId = 0;\r\n\t        this.startSegmentId = 0;\r\n\t        this.endSegmentId = 0;\r\n\t        this.segmentsLength = 0;\r\n\t        this.stopAllAnimations();\r\n\t        this.appendData(null, true);\r\n\t        this.recalculateDisplayedRange(true);\r\n\t        this.ee.emit(EVENTS.REBUILD);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.stopAllAnimations = function () {\r\n\t        this.animatedSegmentsIds = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        this.animatedSegmentsForAppend = [];\r\n\t        if (this.prependAnimation)\r\n\t            this.prependAnimation.kill();\r\n\t        if (this.appendAnimation)\r\n\t            this.appendAnimation.kill();\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.recalculateDisplayedRange = function (segmentsAreRebuilded) {\r\n\t        if (segmentsAreRebuilded === void 0) { segmentsAreRebuilded = false; }\r\n\t        var _a = this.chartState.state.xAxis.range, from = _a.from, to = _a.to;\r\n\t        var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\r\n\t        var displayedRange = to - from;\r\n\t        this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\r\n\t        this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\r\n\t        this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\r\n\t        this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\r\n\t        if (segmentsAreRebuilded)\r\n\t            return;\r\n\t        var displayedRangeChanged = (firstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\r\n\t            lastDisplayedSegment.id !== this.lastDisplayedSegment.id);\r\n\t        if (displayedRangeChanged)\r\n\t            this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\r\n\t    };\r\n\t    // getSegments(fromX?: number, toX?: number): TrendSegment[] {\r\n\t    // \tvar segments = this.segments;\r\n\t    // \tif (fromX == void 0 && toX == void 0) return segments;\r\n\t    // \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\r\n\t    // \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\r\n\t    // \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\r\n\t    // \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\r\n\t    // \treturn segments.slice(startSegmentInd, endSegmentInd);\r\n\t    // }\r\n\t    /**\r\n\t     * returns array of segments for values array\r\n\t     * values must be sorted!\r\n\t     */\r\n\t    TrendSegmentsManager.prototype.getSegmentsForXValues = function (values) {\r\n\t        var valueInd = 0;\r\n\t        var value = values[valueInd];\r\n\t        var lastValueInd = values.length - 1;\r\n\t        var results = [];\r\n\t        var segment = this.getStartSegment();\r\n\t        if (!segment.hasValue)\r\n\t            return [];\r\n\t        while (segment) {\r\n\t            while (value < segment.startXVal) {\r\n\t                results.push(void 0);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            while (value > segment.endXVal) {\r\n\t                segment = segment.getNext();\r\n\t                if (!segment)\r\n\t                    break;\r\n\t            }\r\n\t            var valueInPoint = (segment.startXVal == value || segment.endXVal == value ||\r\n\t                (segment.startXVal < value && segment.endXVal > value));\r\n\t            if (valueInPoint) {\r\n\t                results.push(segment);\r\n\t                value = values[++valueInd];\r\n\t            }\r\n\t            if (valueInd > lastValueInd)\r\n\t                break;\r\n\t        }\r\n\t        return results;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrame = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onRebuild = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.REBUILD, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onDisplayedRangeChanged = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocateNextSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var prevSegment = this.segmentsById[this.endSegmentId];\r\n\t        if (prevSegment && prevSegment.hasValue) {\r\n\t            prevSegment.nextId = id;\r\n\t            segment.prevId = prevSegment.id;\r\n\t        }\r\n\t        this.endSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.push(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.allocatePrevSegment = function () {\r\n\t        var id = this.nextEmptyId++;\r\n\t        var segment = new TrendSegment(this, id);\r\n\t        var nextSegment = this.segmentsById[this.startSegmentId];\r\n\t        if (nextSegment && nextSegment.hasValue) {\r\n\t            nextSegment.prevId = id;\r\n\t            segment.nextId = nextSegment.id;\r\n\t        }\r\n\t        this.startSegmentId = id;\r\n\t        this.segmentsLength++;\r\n\t        this.segmentsById[id] = segment;\r\n\t        this.segments.unshift(segment);\r\n\t        return segment;\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.appendData = function (newData, needRebuildSegments) {\r\n\t        // WARNING: bottleneck method!\r\n\t        if (needRebuildSegments === void 0) { needRebuildSegments = false; }\r\n\t        // var t1 = performance.now();\r\n\t        var trendData = this.trend.getData();\r\n\t        if (needRebuildSegments) {\r\n\t            newData = trendData;\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t        }\r\n\t        var startItemInd = trendData.length - newData.length;\r\n\t        var segment = this.getEndSegment() || this.allocateNextSegment();\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        var itemInd = 0;\r\n\t        while (itemInd < newData.length) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.appendItem(item);\r\n\t            var isLastItem = itemInd == newData.length - 1;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd++;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForAppend.length > 0) {\r\n\t                    segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\r\n\t                    segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForAppend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocateNextSegment();\r\n\t            var prevItem = trendData[startItemInd + itemInd - 1];\r\n\t            segment.appendItem(prevItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        // var t2 = performance.now();\r\n\t        // console.log(t2 - t1);\r\n\t        // do not create animation if segments was rebuilded\r\n\t        if (needRebuildSegments) {\r\n\t            for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\r\n\t                var segmentId = _a[_i];\r\n\t                var segment_1 = this.segmentsById[segmentId];\r\n\t                segment_1.currentAnimationState = segment_1.createAnimationState();\r\n\t            }\r\n\t            this.animatedSegmentsForAppend = [];\r\n\t            return;\r\n\t        }\r\n\t        if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time);\r\n\t    };\r\n\t    // TODO: refactor duplicated code from appendData\r\n\t    TrendSegmentsManager.prototype.prependData = function (newData) {\r\n\t        var trendData = this.trend.getData();\r\n\t        var segment = this.getStartSegment() || this.segmentsById[0];\r\n\t        var initialSegment = segment.hasValue ? segment : null;\r\n\t        var itemInd = newData.length - 1;\r\n\t        var initialAnimationState = segment.createAnimationState();\r\n\t        while (itemInd >= 0) {\r\n\t            var item = newData[itemInd];\r\n\t            var itemIsInserted = segment.prependItem(item);\r\n\t            var isLastItem = itemInd == 0;\r\n\t            if (itemIsInserted) {\r\n\t                if (!isLastItem)\r\n\t                    itemInd--;\r\n\t            }\r\n\t            else {\r\n\t                if (!segment.isCompleted)\r\n\t                    segment.complete();\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted) {\r\n\t                segment.recalculateItems();\r\n\t            }\r\n\t            var segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\r\n\t            if (segmentIsReadyForAnimate) {\r\n\t                var id = segment.id;\r\n\t                if (!initialSegment)\r\n\t                    initialSegment = segment;\r\n\t                if (!initialAnimationState)\r\n\t                    initialAnimationState = initialSegment.createAnimationState();\r\n\t                segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\r\n\t                if (this.animatedSegmentsForPrepend.length > 0) {\r\n\t                    segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\r\n\t                    segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\r\n\t                }\r\n\t                segment.targetAnimationState = segment.createAnimationState();\r\n\t                this.animatedSegmentsForPrepend.push(id);\r\n\t            }\r\n\t            if (isLastItem && itemIsInserted)\r\n\t                break;\r\n\t            if (!segment.isCompleted)\r\n\t                continue;\r\n\t            segment = this.allocatePrevSegment();\r\n\t            var nextItem = trendData[itemInd + 1];\r\n\t            segment.prependItem(nextItem);\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\r\n\t        if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS)\r\n\t            time = 0;\r\n\t        this.animate(time, true);\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.animate = function (time, isPrepend) {\r\n\t        var _this = this;\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\r\n\t        if ((animation && animation.isActive()) || time == 0) {\r\n\t            if (animation)\r\n\t                animation.kill();\r\n\t            this.onAnimationFrameHandler(1, isPrepend);\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            return;\r\n\t        }\r\n\t        var animationsOptions = this.chartState.state.animations;\r\n\t        var ease = animationsOptions.trendChangeEase;\r\n\t        var objectToAnimate = { animationValue: 0 };\r\n\t        animation = TweenLite.to(objectToAnimate, time, { animationValue: 1, ease: ease });\r\n\t        animation.eventCallback('onUpdate', function () { return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend); });\r\n\t        animation.eventCallback('onComplete', function () {\r\n\t            animatedSegmentsIds.length = 0;\r\n\t            _this.appendAnimation = null;\r\n\t        });\r\n\t        if (isPrepend) {\r\n\t            this.prependAnimation = animation;\r\n\t        }\r\n\t        else {\r\n\t            this.appendAnimation = animation;\r\n\t        }\r\n\t    };\r\n\t    TrendSegmentsManager.prototype.onAnimationFrameHandler = function (coefficient, isPrepend) {\r\n\t        if (isPrepend === void 0) { isPrepend = false; }\r\n\t        var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\r\n\t        for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\r\n\t            var segmentId = animatedSegmentsIds_1[_i];\r\n\t            var segment = this.segmentsById[segmentId];\r\n\t            for (var key in segment.targetAnimationState) {\r\n\t                var targetValue = segment.targetAnimationState[key];\r\n\t                var initialValue = segment.initialAnimationState[key];\r\n\t                var currentValue = initialValue + (targetValue - initialValue) * coefficient;\r\n\t                segment.currentAnimationState[key] = currentValue;\r\n\t            }\r\n\t        }\r\n\t        this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\r\n\t        this.ee.emit(EVENTS.ANIMATION_FRAME, this);\r\n\t    };\r\n\t    return TrendSegmentsManager;\r\n\t}());\r\n\texports.TrendSegmentsManager = TrendSegmentsManager;\r\n\tvar TrendSegment = (function () {\r\n\t    function TrendSegment(trendPoints, id) {\r\n\t        this.isCompleted = false;\r\n\t        this.items = [];\r\n\t        this.initialAnimationState = {};\r\n\t        this.targetAnimationState = {};\r\n\t        this.currentAnimationState = {};\r\n\t        this.trendSegments = trendPoints;\r\n\t        this.id = id;\r\n\t        this.maxLength = trendPoints.maxSegmentLength;\r\n\t    }\r\n\t    TrendSegment.prototype.createAnimationState = function () {\r\n\t        var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\r\n\t        return {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal,\r\n\t            startXVal: startXVal,\r\n\t            startYVal: startYVal,\r\n\t            endXVal: endXVal,\r\n\t            endYVal: endYVal,\r\n\t            maxYVal: maxYVal,\r\n\t            minYVal: minYVal,\r\n\t            maxLength: maxLength\r\n\t        };\r\n\t    };\r\n\t    ;\r\n\t    TrendSegment.prototype.appendItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.push(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var startXVal = items[0].xVal;\r\n\t        if (item.xVal - startXVal > this.maxLength)\r\n\t            return false;\r\n\t        items.push(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.prependItem = function (item) {\r\n\t        if (this.isCompleted)\r\n\t            return false;\r\n\t        var items = this.items;\r\n\t        if (items.length < 2) {\r\n\t            this.items.unshift(item);\r\n\t            this.hasValue = true;\r\n\t            return true;\r\n\t        }\r\n\t        var endXVal = items[items.length - 1].xVal;\r\n\t        if (endXVal - item.xVal > this.maxLength)\r\n\t            return false;\r\n\t        items.unshift(item);\r\n\t        return true;\r\n\t    };\r\n\t    TrendSegment.prototype.complete = function () {\r\n\t        this.isCompleted = true;\r\n\t        this.recalculateItems();\r\n\t        this.items = []; // free memory for completed ranges\r\n\t    };\r\n\t    TrendSegment.prototype.recalculateItems = function () {\r\n\t        var items = this.items;\r\n\t        var itemsLength = items.length;\r\n\t        if (itemsLength === 0)\r\n\t            Utils_1.Utils.error('Unable to create TrendSegment without TrendItems');\r\n\t        var endItem = items[itemsLength - 1];\r\n\t        var endXVal = endItem.xVal, endYVal = endItem.yVal;\r\n\t        var startXVal, startYVal;\r\n\t        var startItem = items[0];\r\n\t        startXVal = startItem.xVal;\r\n\t        startYVal = startItem.yVal;\r\n\t        var minX = Math.min(startXVal, endXVal);\r\n\t        var maxX = Math.max(startXVal, endXVal);\r\n\t        var middleXVal = minX + (maxX - minX) / 2;\r\n\t        var minY = Math.min(startYVal, endYVal);\r\n\t        var maxY = Math.max(startYVal, endYVal);\r\n\t        var middleYVal = minY + (maxY - minY) / 2;\r\n\t        var yVals = items.map(function (item) { return item.yVal; });\r\n\t        this.startXVal = startXVal;\r\n\t        this.startYVal = startYVal;\r\n\t        this.endXVal = endXVal;\r\n\t        this.endYVal = endYVal;\r\n\t        this.xVal = middleXVal;\r\n\t        this.yVal = middleYVal;\r\n\t        this.maxYVal = Math.max.apply(Math, yVals);\r\n\t        this.minYVal = Math.min.apply(Math, yVals);\r\n\t        if (!this.currentAnimationState)\r\n\t            this.currentAnimationState = this.createAnimationState();\r\n\t    };\r\n\t    TrendSegment.prototype.getNext = function () {\r\n\t        var nextPoint = this.trendSegments.segmentsById[this.nextId];\r\n\t        return nextPoint && nextPoint.hasValue ? nextPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getPrev = function () {\r\n\t        var prevPoint = this.trendSegments.segmentsById[this.prevId];\r\n\t        return prevPoint && prevPoint.hasValue ? prevPoint : null;\r\n\t    };\r\n\t    TrendSegment.prototype.getFrameVal = function () {\r\n\t        var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\r\n\t        return new Vector3(xVal, yVal, 0);\r\n\t    };\r\n\t    TrendSegment.prototype.getFramePoint = function () {\r\n\t        var frameVal = this.getFrameVal();\r\n\t        return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\r\n\t    };\r\n\t    return TrendSegment;\r\n\t}());\r\n\texports.TrendSegment = TrendSegment;\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar EVENTS = {\r\n\t    SEGMENTS_REBUILDED: 'segmentsRebuilded'\r\n\t};\r\n\t/**\r\n\t * Trends manager\r\n\t */\r\n\tvar TrendsManager = (function () {\r\n\t    function TrendsManager(state, initialState) {\r\n\t        this.trends = {};\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.chartState = state;\r\n\t        var trendsCalculatedOptions = {};\r\n\t        for (var trendName in initialState.trends) {\r\n\t            var trend = this.createTrend(state, trendName, initialState);\r\n\t            trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\r\n\t        }\r\n\t        this.calculatedOptions = trendsCalculatedOptions;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendsManager.prototype.getTrend = function (trendName) {\r\n\t        return this.trends[trendName];\r\n\t    };\r\n\t    TrendsManager.prototype.getEnabledTrends = function () {\r\n\t        var enabledTrends = [];\r\n\t        var allTrends = this.trends;\r\n\t        for (var trendName in allTrends) {\r\n\t            var trend = allTrends[trendName];\r\n\t            trend.getOptions().enabled && enabledTrends.push(trend);\r\n\t        }\r\n\t        return enabledTrends;\r\n\t    };\r\n\t    TrendsManager.prototype.getStartXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        return trends[0].getData()[0].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getEndXVal = function () {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var firstTrendData = trends[0].getData();\r\n\t        return firstTrendData[firstTrendData.length - 1].xVal;\r\n\t    };\r\n\t    TrendsManager.prototype.getExtremumYVal = function (extremumIsMax, fromX, toX) {\r\n\t        var trends = this.getEnabledTrends();\r\n\t        var compareFn;\r\n\t        var result;\r\n\t        if (extremumIsMax) {\r\n\t            result = -Infinity;\r\n\t            compareFn = Math.max;\r\n\t        }\r\n\t        else {\r\n\t            result = Infinity;\r\n\t            compareFn = Math.min;\r\n\t        }\r\n\t        for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\r\n\t            var trend = trends_1[_i];\r\n\t            var trendData = trend.getData(fromX, toX);\r\n\t            var trendYValues = trendData.map(function (dataItem) { return dataItem.yVal; });\r\n\t            result = compareFn.apply(void 0, [result].concat(trendYValues));\r\n\t        }\r\n\t        if (result == Infinity || result == -Infinity)\r\n\t            result = NaN;\r\n\t        return result;\r\n\t    };\r\n\t    TrendsManager.prototype.getMaxYVal = function (fromX, toX) { return this.getExtremumYVal(true, fromX, toX); };\r\n\t    TrendsManager.prototype.getMinYVal = function (fromX, toX) { return this.getExtremumYVal(false, fromX, toX); };\r\n\t    TrendsManager.prototype.onSegmentsRebuilded = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\r\n\t    };\r\n\t    TrendsManager.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onInitialStateApplied(function () { return _this.onInitialStateAppliedHandler(); });\r\n\t    };\r\n\t    TrendsManager.prototype.onInitialStateAppliedHandler = function () {\r\n\t        var _this = this;\r\n\t        var _loop_1 = function(trendName) {\r\n\t            this_1.trends[trendName].segmentsManager.onRebuild(function () { return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName); });\r\n\t        };\r\n\t        var this_1 = this;\r\n\t        for (var trendName in this.trends) {\r\n\t            _loop_1(trendName);\r\n\t        }\r\n\t    };\r\n\t    TrendsManager.prototype.createTrend = function (state, trendName, initialState) {\r\n\t        var trend = new Trend_1.Trend(state, trendName, initialState);\r\n\t        this.trends[trendName] = trend;\r\n\t        return trend;\r\n\t    };\r\n\t    return TrendsManager;\r\n\t}());\r\n\texports.TrendsManager = TrendsManager;\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar SCREEN_EVENTS = {\r\n\t    ZOOM_FRAME: 'zoomFrame',\r\n\t    SCROLL_FRAME: 'scrollFrame',\r\n\t    TRANSFORMATION_FRAME: 'transformationFrame'\r\n\t};\r\n\t/**\r\n\t * manage camera, and contains methods for transforming pixels to values\r\n\t */\r\n\tvar Screen = (function () {\r\n\t    function Screen(chartState) {\r\n\t        // TODO: make own interface for Chart and Screen for calculating screen positions\r\n\t        this.options = { scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1 };\r\n\t        this.chart = chartState;\r\n\t        var _a = chartState.state, w = _a.width, h = _a.height;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.transform({\r\n\t            scrollY: this.valueToPxByYAxis(this.chart.state.yAxis.range.scroll),\r\n\t            zoomY: 1\r\n\t        });\r\n\t        this.bindEvents();\r\n\t        //camera.position.z = 1500;\r\n\t    }\r\n\t    Screen.prototype.getCameraSettings = function () {\r\n\t        var _a = this.chart.state, w = _a.width, h = _a.height;\r\n\t        // settings for pixel-perfect camera\r\n\t        var FOV = 75;\r\n\t        var vFOV = FOV * (Math.PI / 180);\r\n\t        return {\r\n\t            FOV: FOV,\r\n\t            aspect: w / h,\r\n\t            near: 0.1,\r\n\t            far: 5000,\r\n\t            z: h / (2 * Math.tan(vFOV / 2)),\r\n\t            // move 0,0 to left-bottom corner\r\n\t            x: w / 2,\r\n\t            y: h / 2\r\n\t        };\r\n\t    };\r\n\t    Screen.prototype.onZoomFrame = function (cb) {\r\n\t        return this.ee.subscribe(SCREEN_EVENTS.ZOOM_FRAME, cb);\r\n\t    };\r\n\t    Screen.prototype.onScrollFrame = function (cb) {\r\n\t        return this.ee.subscribe(SCREEN_EVENTS.SCROLL_FRAME, cb);\r\n\t    };\r\n\t    Screen.prototype.onTransformationFrame = function (cb) {\r\n\t        return this.ee.subscribe(SCREEN_EVENTS.TRANSFORMATION_FRAME, cb);\r\n\t    };\r\n\t    Screen.prototype.cameraIsMoving = function () {\r\n\t        return !!(this.scrollXAnimation && !this.scrollXAnimation.isFinished ||\r\n\t            this.zoomXAnimation && !this.zoomXAnimation.isFinished);\r\n\t    };\r\n\t    /**\r\n\t     * setup zoom and scroll\r\n\t     */\r\n\t    Screen.prototype.transform = function (options, silent) {\r\n\t        if (silent === void 0) { silent = false; }\r\n\t        var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\r\n\t        if (scrollX != void 0)\r\n\t            this.options.scrollX = scrollX;\r\n\t        if (scrollY != void 0)\r\n\t            this.options.scrollY = scrollY;\r\n\t        if (zoomX != void 0)\r\n\t            this.options.zoomX = zoomX;\r\n\t        if (zoomY != void 0)\r\n\t            this.options.zoomY = zoomY;\r\n\t        if (scrollX != void 0 || zoomX) {\r\n\t            options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\r\n\t            this.options.scrollXVal = options.scrollXVal;\r\n\t        }\r\n\t        if (scrollY != void 0 || zoomY) {\r\n\t            options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\r\n\t            this.options.scrollYVal = options.scrollYVal;\r\n\t        }\r\n\t        if (silent)\r\n\t            return;\r\n\t        this.ee.emit(SCREEN_EVENTS.TRANSFORMATION_FRAME, options);\r\n\t        var scrollEventNeeded = options.scrollXVal != void 0 || options.scrollYVal != void 0;\r\n\t        if (scrollEventNeeded)\r\n\t            this.ee.emit(SCREEN_EVENTS.SCROLL_FRAME, options);\r\n\t        var zoomEventNeeded = options.zoomX != void 0 || options.zoomY != void 0;\r\n\t        if (zoomEventNeeded)\r\n\t            this.ee.emit(SCREEN_EVENTS.ZOOM_FRAME, options);\r\n\t    };\r\n\t    Screen.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        // handle scroll and zoom\r\n\t        state.onChange(function (changedProps) {\r\n\t            if (changedProps.xAxis && changedProps.xAxis.range) {\r\n\t                if (changedProps.xAxis.range.scroll != void 0)\r\n\t                    _this.onScrollXHandler(changedProps);\r\n\t                if (changedProps.xAxis.range.zoom)\r\n\t                    _this.onZoomXHandler();\r\n\t            }\r\n\t            if (changedProps.yAxis && changedProps.yAxis.range) {\r\n\t                if (changedProps.yAxis.range.scroll != void 0)\r\n\t                    _this.onScrollYHandler();\r\n\t                if (changedProps.yAxis.range.zoom)\r\n\t                    _this.onZoomYHandler();\r\n\t            }\r\n\t        });\r\n\t        state.onDestroy(function () { return _this.onDestroyHandler(); });\r\n\t    };\r\n\t    Screen.prototype.onDestroyHandler = function () {\r\n\t        this.ee.removeAllListeners();\r\n\t    };\r\n\t    Screen.prototype.onScrollXHandler = function (changedProps) {\r\n\t        var _this = this;\r\n\t        var chart = this.chart;\r\n\t        var isDragMode = chart.state.cursor.dragMode;\r\n\t        var animations = chart.state.animations;\r\n\t        var zoomXChanged = changedProps.xAxis.range.zoom;\r\n\t        var isAutoscroll = chart.state.autoScroll && !isDragMode && !zoomXChanged;\r\n\t        var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\r\n\t        var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\r\n\t        var range = chart.state.xAxis.range;\r\n\t        var targetX = range.scroll * range.scaleFactor * range.zoom;\r\n\t        if (this.scrollXAnimation)\r\n\t            this.scrollXAnimation.stop();\r\n\t        this.scrollXAnimation = chart.animationManager.animate(time, ease)\r\n\t            .from(this.options.scrollX)\r\n\t            .to(targetX)\r\n\t            .onTick(function (value) {\r\n\t            _this.transform({ scrollX: value });\r\n\t        });\r\n\t    };\r\n\t    Screen.prototype.onScrollYHandler = function () {\r\n\t        var _this = this;\r\n\t        var chart = this.chart;\r\n\t        var animations = chart.state.animations;\r\n\t        var range = chart.state.yAxis.range;\r\n\t        var targetY = range.scroll * range.scaleFactor * range.zoom;\r\n\t        if (this.scrollYAnimation)\r\n\t            this.scrollYAnimation.stop();\r\n\t        this.scrollYAnimation = chart.animationManager.animate(animations.zoomSpeed, animations.zoomEase)\r\n\t            .from(this.options.scrollY)\r\n\t            .to(targetY)\r\n\t            .onTick(function (value) {\r\n\t            _this.transform({ scrollY: value });\r\n\t        });\r\n\t    };\r\n\t    Screen.prototype.onZoomXHandler = function () {\r\n\t        var _this = this;\r\n\t        var chart = this.chart;\r\n\t        var animations = chart.state.animations;\r\n\t        var targetZoom = chart.state.xAxis.range.zoom;\r\n\t        if (this.zoomXAnimation)\r\n\t            this.zoomXAnimation.stop();\r\n\t        this.zoomXAnimation = chart.animationManager\r\n\t            .animate(animations.zoomSpeed, animations.zoomEase)\r\n\t            .from(this.options.zoomX)\r\n\t            .to(targetZoom)\r\n\t            .onTick(function (value) {\r\n\t            _this.transform({ zoomX: value });\r\n\t        });\r\n\t    };\r\n\t    Screen.prototype.onZoomYHandler = function () {\r\n\t        var _this = this;\r\n\t        var chart = this.chart;\r\n\t        var targetZoom = chart.state.yAxis.range.zoom;\r\n\t        var animations = chart.state.animations;\r\n\t        if (this.zoomYAnimation)\r\n\t            this.zoomYAnimation.stop();\r\n\t        this.zoomYAnimation = chart.animationManager\r\n\t            .animate(animations.zoomSpeed, animations.zoomEase)\r\n\t            .from(this.options.zoomY)\r\n\t            .to(targetZoom)\r\n\t            .onTick(function (value) {\r\n\t            _this.transform({ zoomY: value });\r\n\t        });\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnXAxis = function (xVal) {\r\n\t        var _a = this.chart.state.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomX;\r\n\t        return (xVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnYAxis = function (yVal) {\r\n\t        var _a = this.chart.state.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\r\n\t        var zoom = this.options.zoomY;\r\n\t        return (yVal - zeroVal) * scaleFactor * zoom;\r\n\t    };\r\n\t    /**\r\n\t     *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\r\n\t     */\r\n\t    Screen.prototype.getPointOnChart = function (xVal, yVal) {\r\n\t        return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\r\n\t    };\r\n\t    /**\r\n\t     * returns value by offset in pixels from xAxis.range.zeroVal\r\n\t     */\r\n\t    Screen.prototype.getValueOnXAxis = function (x) {\r\n\t        return this.chart.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByXAxis = function (xVal) {\r\n\t        return xVal * this.chart.state.xAxis.range.scaleFactor * this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert value to pixels by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.valueToPxByYAxis = function (yVal) {\r\n\t        return yVal * this.chart.state.yAxis.range.scaleFactor * this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from xAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByXAxis = function (xVal) {\r\n\t        return xVal / this.chart.state.xAxis.range.scaleFactor / this.options.zoomX;\r\n\t    };\r\n\t    /**\r\n\t     *  convert pixels to value by using settings from yAxis.range\r\n\t     */\r\n\t    Screen.prototype.pxToValueByYAxis = function (yVal) {\r\n\t        return yVal / this.chart.state.yAxis.range.scaleFactor / this.options.zoomY;\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollX value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenX = function (x) {\r\n\t        return this.chart.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\r\n\t    };\r\n\t    /**\r\n\t     *  returns scrollY value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getValueByScreenY = function (y) {\r\n\t        return this.chart.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\r\n\t    };\r\n\t    //\r\n\t    /**\r\n\t     *  returns screen scrollX value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getScreenXByValue = function (xVal) {\r\n\t        var _a = this.chart.state.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\r\n\t        return this.valueToPxByXAxis(xVal - zeroVal - scroll);\r\n\t    };\r\n\t    // /**\r\n\t    //  *  returns screen scrollY value by screen scrollY coordinate\r\n\t    //  */\r\n\t    // getScreenYByValue(scrollYVal: number): number {\r\n\t    // \tvar {scroll, zeroVal} = this.state.yAxis.range;\r\n\t    // \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\r\n\t    // }\r\n\t    //\r\n\t    //\r\n\t    /**\r\n\t     * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\r\n\t     */\r\n\t    Screen.prototype.getScreenXByPoint = function (xVal) {\r\n\t        return this.getScreenXByValue(this.getValueOnXAxis(xVal));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenX = function (screenX) {\r\n\t        return this.getPointOnXAxis(this.getValueByScreenX(screenX));\r\n\t    };\r\n\t    /**\r\n\t     * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\r\n\t     */\r\n\t    Screen.prototype.getPointByScreenY = function (screenY) {\r\n\t        return this.getPointOnYAxis(this.getValueByScreenY(screenY));\r\n\t    };\r\n\t    Screen.prototype.getTop = function () {\r\n\t        return this.getPointByScreenY(this.chart.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottom = function () {\r\n\t        return this.getPointByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getLeft = function () {\r\n\t        return this.getPointByScreenX(0);\r\n\t    };\r\n\t    Screen.prototype.getScreenRightVal = function () {\r\n\t        return this.getValueByScreenX(this.chart.state.width);\r\n\t    };\r\n\t    Screen.prototype.getTopVal = function () {\r\n\t        return this.getValueByScreenY(this.chart.state.height);\r\n\t    };\r\n\t    Screen.prototype.getBottomVal = function () {\r\n\t        return this.getValueByScreenY(0);\r\n\t    };\r\n\t    Screen.prototype.getCenterYVal = function () {\r\n\t        return this.getValueByScreenY(this.chart.state.height / 2);\r\n\t    };\r\n\t    return Screen;\r\n\t}());\r\n\texports.Screen = Screen;\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar interfaces_1 = __webpack_require__(20);\r\n\tvar EventEmmiter_1 = __webpack_require__(12);\r\n\tvar AXIS_MARK_DEFAULT_OPTIONS = {\r\n\t    type: 'simple',\r\n\t    lineWidth: 1,\r\n\t    value: 0,\r\n\t    showValue: false,\r\n\t    stickToEdges: false,\r\n\t    lineColor: '#FFFFFF',\r\n\t    title: ''\r\n\t};\r\n\tvar AxisMarks = (function () {\r\n\t    function AxisMarks(chartState, axisType) {\r\n\t        this.items = {};\r\n\t        this.chartState = chartState;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.axisType = axisType;\r\n\t        var marks = this.items;\r\n\t        var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\r\n\t        for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\r\n\t            var options = axisMarksOptions_1[_i];\r\n\t            var axisMark = void 0;\r\n\t            options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\r\n\t            // set mark name\r\n\t            if (!options.name)\r\n\t                options.name = Utils_1.Utils.getUid().toString();\r\n\t            if (marks[options.name])\r\n\t                Utils_1.Utils.error('duplicated mark name ' + options.name);\r\n\t            // create mark instance based on type option\r\n\t            if (options.type == 'timeleft') {\r\n\t                axisMark = new AxisTimeleftMark(chartState, axisType, options);\r\n\t            }\r\n\t            else {\r\n\t                axisMark = new AxisMark(chartState, axisType, options);\r\n\t            }\r\n\t            marks[options.name] = axisMark;\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarks.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, newData);\r\n\t        });\r\n\t        this.chartState.onDestroy(function () { return _this.ee.removeAllListeners(); });\r\n\t    };\r\n\t    AxisMarks.prototype.onTrendChange = function (trendName, newData) {\r\n\t        if (!newData)\r\n\t            return;\r\n\t        var startVal = newData[0].xVal;\r\n\t        var endVal = newData[newData.length - 1].xVal;\r\n\t        var marks = this.items;\r\n\t        for (var markName in marks) {\r\n\t            var mark = marks[markName];\r\n\t            var markVal = mark.options.value;\r\n\t            var markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\r\n\t            if (markWasCrossed)\r\n\t                this.ee.emit('markCrossed', trendName, newData);\r\n\t        }\r\n\t    };\r\n\t    AxisMarks.prototype.getItems = function () {\r\n\t        return this.items;\r\n\t    };\r\n\t    AxisMarks.prototype.getItem = function (markName) {\r\n\t        return this.items[markName];\r\n\t    };\r\n\t    return AxisMarks;\r\n\t}());\r\n\texports.AxisMarks = AxisMarks;\r\n\tvar AxisMark = (function () {\r\n\t    function AxisMark(chartState, axisType, options) {\r\n\t        this.renderOnTrendsChange = false;\r\n\t        this.ee = new EventEmmiter_1.EventEmitter();\r\n\t        this.options = options;\r\n\t        this.axisType = axisType;\r\n\t        this.chartState = chartState;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMark.prototype.bindEvents = function () { };\r\n\t    AxisMark.prototype.setOptions = function (newOptions) {\r\n\t        var value = this.options.value;\r\n\t        this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\r\n\t        if (this.options.value !== value)\r\n\t            this.ee.emit('valueChange');\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisMark.prototype.getDisplayedVal = function () {\r\n\t        var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\r\n\t        return String(displayedValue !== void 0 ? displayedValue : value);\r\n\t    };\r\n\t    AxisMark.prototype.onMarkCrossed = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('markCrossed', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('markCrossed', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('valueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('valueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.prototype.onDisplayedValueChange = function (cb) {\r\n\t        var _this = this;\r\n\t        this.ee.on('onDisplayedValueChange', cb);\r\n\t        return function () {\r\n\t            _this.ee.off('onDisplayedValueChange', cb);\r\n\t        };\r\n\t    };\r\n\t    AxisMark.typeName = 'simple';\r\n\t    return AxisMark;\r\n\t}());\r\n\texports.AxisMark = AxisMark;\r\n\tvar AxisTimeleftMark = (function (_super) {\r\n\t    __extends(AxisTimeleftMark, _super);\r\n\t    function AxisTimeleftMark() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.renderOnTrendsChange = true;\r\n\t    }\r\n\t    AxisTimeleftMark.prototype.getDisplayedVal = function () {\r\n\t        var markVal = this.options.value;\r\n\t        var maxXVal = this.chartState.state.computedData.trends.maxXVal;\r\n\t        var time = markVal - maxXVal;\r\n\t        if (time < 0)\r\n\t            time = 0;\r\n\t        return Utils_1.Utils.msToTimeString(time);\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t    };\r\n\t    AxisTimeleftMark.prototype.onTrendsChange = function () {\r\n\t        this.ee.emit('onDisplayedValueChange');\r\n\t    };\r\n\t    AxisTimeleftMark.typeName = 'timeleft';\r\n\t    return AxisTimeleftMark;\r\n\t}(AxisMark));\r\n\texports.AxisTimeleftMark = AxisTimeleftMark;\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t(function (AXIS_RANGE_TYPE) {\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\r\n\t    AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\"; // TODO: AXIS_RANGE_TYPE.ALL\r\n\t})(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\r\n\tvar AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\r\n\t;\r\n\t(function (AXIS_TYPE) {\r\n\t    AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\r\n\t    AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\r\n\t})(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\r\n\tvar AXIS_TYPE = exports.AXIS_TYPE;\r\n\t(function (AXIS_DATA_TYPE) {\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\r\n\t    AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\r\n\t})(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\r\n\tvar AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar Easing_1 = __webpack_require__(22);\r\n\tvar AnimationManager = (function () {\r\n\t    function AnimationManager() {\r\n\t        this.isAnimationsEnabled = true;\r\n\t        this.animations = [];\r\n\t    }\r\n\t    AnimationManager.prototype.animate = function (time, timingFunction) {\r\n\t        var animation = new Animation(this, time, this.lastTickTime, timingFunction);\r\n\t        this.animations.push(animation);\r\n\t        return animation;\r\n\t    };\r\n\t    AnimationManager.prototype.animateObj = function (source, target) {\r\n\t    };\r\n\t    AnimationManager.prototype.setAimationsEnabled = function (isEnabled) {\r\n\t        this.isAnimationsEnabled = isEnabled;\r\n\t    };\r\n\t    AnimationManager.prototype.tick = function () {\r\n\t        var now = Date.now();\r\n\t        var animations = this.animations;\r\n\t        // call tick for each animation\r\n\t        for (var i_1 = 0; i_1 < animations.length; i_1++) {\r\n\t            var animation = animations[i_1];\r\n\t            if (this.isAnimationsEnabled) {\r\n\t                animation.tick(now);\r\n\t            }\r\n\t            else {\r\n\t                animation.completeAndStop();\r\n\t            }\r\n\t        }\r\n\t        // cleanup completed animations\r\n\t        var i = animations.length;\r\n\t        while (i--) {\r\n\t            if (animations[i].isFinished)\r\n\t                animations.splice(i, 1);\r\n\t        }\r\n\t        this.lastTickTime = Date.now();\r\n\t    };\r\n\t    AnimationManager.prototype.hasActiveAnimations = function () {\r\n\t        return this.animations.length > 0;\r\n\t    };\r\n\t    return AnimationManager;\r\n\t}());\r\n\texports.AnimationManager = AnimationManager;\r\n\tvar Animation = (function () {\r\n\t    function Animation(animationManager, time, startTime, easing) {\r\n\t        if (easing === void 0) { easing = Easing_1.EASING.Quadratic.Out; }\r\n\t        this.animationManager = animationManager;\r\n\t        this.time = time;\r\n\t        this.startTime = startTime;\r\n\t        this.easing = easing;\r\n\t        this.progress = 0;\r\n\t        this.isFinished = false;\r\n\t        this.isStopped = false;\r\n\t    }\r\n\t    Animation.prototype.tick = function (now) {\r\n\t        if (!this.isStopped) {\r\n\t            var progress = this.time > 0 ? ((now - this.startTime) / this.time) : 1;\r\n\t            this.setProgress(progress);\r\n\t        }\r\n\t        var needToFinish = (this.progress == 1 || this.isStopped) && !this.isFinished;\r\n\t        if (needToFinish)\r\n\t            this.onFinishHandler();\r\n\t    };\r\n\t    Animation.prototype.from = function (sourceObj) {\r\n\t        if (typeof sourceObj == 'object') {\r\n\t            this.sourceObj = sourceObj;\r\n\t            this.initialObj = {};\r\n\t            var sourceIteralable = sourceObj;\r\n\t            for (var key in sourceIteralable)\r\n\t                if (typeof sourceIteralable[key] == 'number') {\r\n\t                    this.initialObj[key] = sourceIteralable[key];\r\n\t                }\r\n\t        }\r\n\t        else if (typeof sourceObj == 'number') {\r\n\t            this.sourceObj = sourceObj;\r\n\t            this.initialObj = sourceObj;\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    Animation.prototype.to = function (targetObj) {\r\n\t        this.targetObject = targetObj;\r\n\t        if (typeof this.initialObj == 'object') {\r\n\t            var initialIteralable = this.initialObj;\r\n\t            for (var key in this.targetObject) {\r\n\t                if (initialIteralable[key] == void 0)\r\n\t                    delete initialIteralable[key];\r\n\t            }\r\n\t        }\r\n\t        return this;\r\n\t    };\r\n\t    Animation.prototype.onTick = function (onTickCb) {\r\n\t        this.onTickCb = onTickCb;\r\n\t        return this;\r\n\t    };\r\n\t    Animation.prototype.then = function (onFinishCb) {\r\n\t        this.onFinishCb = onFinishCb;\r\n\t        return this;\r\n\t    };\r\n\t    Animation.prototype.stop = function () {\r\n\t        this.isStopped = true;\r\n\t    };\r\n\t    Animation.prototype.completeAndStop = function () {\r\n\t        this.setProgress(1);\r\n\t        this.stop();\r\n\t    };\r\n\t    Animation.prototype.setProgress = function (progress) {\r\n\t        progress = Math.min(progress, 1);\r\n\t        this.progress = progress;\r\n\t        var k = this.easing(progress);\r\n\t        if (typeof this.sourceObj == 'number') {\r\n\t            var initialVal = this.initialObj;\r\n\t            var targetVal = this.targetObject;\r\n\t            var sourceVal = this.sourceObj;\r\n\t            this.sourceObj = (initialVal + (targetVal - initialVal) * k);\r\n\t        }\r\n\t        else if (this.sourceObj && this.targetObject) {\r\n\t            for (var key in this.initialObj) {\r\n\t                var initialVal = this.initialObj[key];\r\n\t                var targetVal = this.targetObject[key];\r\n\t                this.sourceObj[key] = initialVal + (targetVal - initialVal) * k;\r\n\t            }\r\n\t        }\r\n\t        if (this.onTickCb)\r\n\t            this.onTickCb(this.sourceObj, progress, k);\r\n\t    };\r\n\t    Animation.prototype.onFinishHandler = function () {\r\n\t        this.onFinishCb && this.onFinishCb(this.progress);\r\n\t        this.isFinished = true;\r\n\t    };\r\n\t    return Animation;\r\n\t}());\r\n\texports.Animation = Animation;\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * Easing from tween.js lib https://github.com/tweenjs/tween.js\r\n\t **/\r\n\texports.EASING = {\r\n\t    Linear: {\r\n\t        None: function (k) {\r\n\t            return k;\r\n\t        }\r\n\t    },\r\n\t    Quadratic: {\r\n\t        In: function (k) {\r\n\t            return k * k;\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return k * (2 - k);\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k;\r\n\t            }\r\n\t            return -0.5 * (--k * (k - 2) - 1);\r\n\t        }\r\n\t    },\r\n\t    Cubic: {\r\n\t        In: function (k) {\r\n\t            return k * k * k;\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return --k * k * k + 1;\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k * k;\r\n\t            }\r\n\t            return 0.5 * ((k -= 2) * k * k + 2);\r\n\t        }\r\n\t    },\r\n\t    Quartic: {\r\n\t        In: function (k) {\r\n\t            return k * k * k * k;\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return 1 - (--k * k * k * k);\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k * k * k;\r\n\t            }\r\n\t            return -0.5 * ((k -= 2) * k * k * k - 2);\r\n\t        }\r\n\t    },\r\n\t    Quintic: {\r\n\t        In: function (k) {\r\n\t            return k * k * k * k * k;\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return --k * k * k * k * k + 1;\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * k * k * k * k * k;\r\n\t            }\r\n\t            return 0.5 * ((k -= 2) * k * k * k * k + 2);\r\n\t        }\r\n\t    },\r\n\t    Sinusoidal: {\r\n\t        In: function (k) {\r\n\t            return 1 - Math.cos(k * Math.PI / 2);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return Math.sin(k * Math.PI / 2);\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            return 0.5 * (1 - Math.cos(Math.PI * k));\r\n\t        }\r\n\t    },\r\n\t    Exponential: {\r\n\t        In: function (k) {\r\n\t            return k === 0 ? 0 : Math.pow(1024, k - 1);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * Math.pow(1024, k - 1);\r\n\t            }\r\n\t            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);\r\n\t        }\r\n\t    },\r\n\t    Circular: {\r\n\t        In: function (k) {\r\n\t            return 1 - Math.sqrt(1 - k * k);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            return Math.sqrt(1 - (--k * k));\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if ((k *= 2) < 1) {\r\n\t                return -0.5 * (Math.sqrt(1 - k * k) - 1);\r\n\t            }\r\n\t            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\r\n\t        }\r\n\t    },\r\n\t    Elastic: {\r\n\t        In: function (k) {\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            return -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            return Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if (k === 0) {\r\n\t                return 0;\r\n\t            }\r\n\t            if (k === 1) {\r\n\t                return 1;\r\n\t            }\r\n\t            k *= 2;\r\n\t            if (k < 1) {\r\n\t                return -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\r\n\t            }\r\n\t            return 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\r\n\t        }\r\n\t    },\r\n\t    Back: {\r\n\t        In: function (k) {\r\n\t            var s = 1.70158;\r\n\t            return k * k * ((s + 1) * k - s);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            var s = 1.70158;\r\n\t            return --k * k * ((s + 1) * k + s) + 1;\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            var s = 1.70158 * 1.525;\r\n\t            if ((k *= 2) < 1) {\r\n\t                return 0.5 * (k * k * ((s + 1) * k - s));\r\n\t            }\r\n\t            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\r\n\t        }\r\n\t    },\r\n\t    Bounce: {\r\n\t        In: function (k) {\r\n\t            return 1 - exports.EASING.Bounce.Out(1 - k);\r\n\t        },\r\n\t        Out: function (k) {\r\n\t            if (k < (1 / 2.75)) {\r\n\t                return 7.5625 * k * k;\r\n\t            }\r\n\t            else if (k < (2 / 2.75)) {\r\n\t                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\r\n\t            }\r\n\t            else if (k < (2.5 / 2.75)) {\r\n\t                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\r\n\t            }\r\n\t            else {\r\n\t                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\r\n\t            }\r\n\t        },\r\n\t        InOut: function (k) {\r\n\t            if (k < 0.5) {\r\n\t                return exports.EASING.Bounce.In(k * 2) * 0.5;\r\n\t            }\r\n\t            return exports.EASING.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\r\n\t        }\r\n\t    }\r\n\t};\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\t/**\r\n\t * base class for all widgets\r\n\t * each widget must have widgetName static property\r\n\t */\r\n\tvar ChartWidget = (function () {\r\n\t    function ChartWidget() {\r\n\t        this.unbindList = [];\r\n\t    }\r\n\t    ChartWidget.prototype.setupChart = function (chart) {\r\n\t        this.chart = chart;\r\n\t    };\r\n\t    ChartWidget.prototype.bindEvent = function () {\r\n\t        var args = [];\r\n\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t            args[_i - 0] = arguments[_i];\r\n\t        }\r\n\t        var unbindList = [];\r\n\t        if (!Array.isArray(args[0])) {\r\n\t            unbindList.push(args[0]);\r\n\t        }\r\n\t        else {\r\n\t            unbindList.push.apply(unbindList, (args));\r\n\t        }\r\n\t        (_a = this.unbindList).push.apply(_a, unbindList);\r\n\t        var _a;\r\n\t    };\r\n\t    ChartWidget.prototype.unbindEvents = function () {\r\n\t        this.unbindList.forEach(function (unbindEvent) { return unbindEvent(); });\r\n\t        this.unbindList.length = 0;\r\n\t    };\r\n\t    ChartWidget.widgetName = '';\r\n\t    return ChartWidget;\r\n\t}());\r\n\texports.ChartWidget = ChartWidget;\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar GridWidget_1 = __webpack_require__(25);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar interfaces_1 = __webpack_require__(20);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\t/**\r\n\t * widget for drawing axis\r\n\t */\r\n\tvar AxisWidget = (function (_super) {\r\n\t    __extends(AxisWidget, _super);\r\n\t    function AxisWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    AxisWidget.prototype.onReadyHandler = function () {\r\n\t        var _this = this;\r\n\t        this.object3D = new Object3D();\r\n\t        this.axisXObject = new Object3D();\r\n\t        this.axisYObject = new Object3D();\r\n\t        this.object3D.add(this.axisXObject);\r\n\t        this.object3D.add(this.axisYObject);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        // canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\r\n\t        this.updateAxisXRequest = Utils_1.Utils.throttle(function () { return _this.updateAxis(interfaces_1.AXIS_TYPE.X); }, 1000);\r\n\t        this.onScrollChange(this.chart.screen.options.scrollX, this.chart.screen.options.scrollY);\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        this.bindEvent(state.screen.onTransformationFrame(function (options) {\r\n\t            _this.onScrollChange(options.scrollX, options.scrollY);\r\n\t        }), state.screen.onZoomFrame(function (options) { _this.onZoomFrame(options); }), state.onDestroy(function () { return _this.onDestroy(); }), state.onResize(function () { return _this.onResize(); }));\r\n\t    };\r\n\t    AxisWidget.prototype.onDestroy = function () {\r\n\t        this.isDestroyed = true;\r\n\t        this.unbindEvents();\r\n\t    };\r\n\t    AxisWidget.prototype.onScrollChange = function (x, y) {\r\n\t        if (y != void 0) {\r\n\t            this.axisYObject.position.y = y;\r\n\t            this.axisXObject.position.y = y;\r\n\t        }\r\n\t        if (x != void 0) {\r\n\t            this.axisYObject.position.x = x;\r\n\t            this.updateAxisXRequest();\r\n\t        }\r\n\t    };\r\n\t    AxisWidget.prototype.onResize = function () {\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        this.setupAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t    };\r\n\t    AxisWidget.prototype.setupAxis = function (orientation) {\r\n\t        var _this = this;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var canvasWidth = 0, canvasHeight = 0;\r\n\t        var axisOptions;\r\n\t        // clean meshes\r\n\t        if (isXAxis) {\r\n\t            this.axisXObject.traverse(function (obj) { return _this.axisXObject.remove(obj); });\r\n\t            canvasWidth = visibleWidth * 3;\r\n\t            canvasHeight = 50;\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t        }\r\n\t        else {\r\n\t            this.axisYObject.traverse(function (obj) { return _this.axisYObject.remove(obj); });\r\n\t            canvasWidth = 50;\r\n\t            canvasHeight = visibleHeight * 3;\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t        }\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function (ctx) {\r\n\t            var color = new Color_1.ChartColor(axisOptions.color);\r\n\t            ctx.beginPath();\r\n\t            ctx.font = _this.chart.state.font.m;\r\n\t            ctx.fillStyle = color.rgbaStr;\r\n\t            ctx.strokeStyle = color.rgbaStr;\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisXObject.add(axisMesh);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\r\n\t            this.axisYObject.add(axisMesh);\r\n\t        }\r\n\t        this.updateAxis(orientation);\r\n\t    };\r\n\t    AxisWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisWidget.prototype.updateAxis = function (orientation) {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\r\n\t        var _a = this.chart.state, visibleWidth = _a.width, visibleHeight = _a.height;\r\n\t        var _b = this.chart.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\r\n\t        var axisOptions;\r\n\t        var axisMesh;\r\n\t        var axisGridParams;\r\n\t        if (isXAxis) {\r\n\t            axisMesh = this.axisXObject.children[0];\r\n\t            axisOptions = this.chart.state.xAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\r\n\t        }\r\n\t        else {\r\n\t            axisMesh = this.axisYObject.children[0];\r\n\t            axisOptions = this.chart.state.yAxis;\r\n\t            axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\r\n\t        }\r\n\t        var geometry = axisMesh.geometry;\r\n\t        var canvasWidth = geometry.parameters.width;\r\n\t        var canvasHeight = geometry.parameters.height;\r\n\t        var texture = axisMesh.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\t        if (isXAxis) {\r\n\t            axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\r\n\t        }\r\n\t        // TODO: draw text and lines in different loops\r\n\t        var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\r\n\t        var startVal = axisGridParams.start - edgeOffset;\r\n\t        var endVal = axisGridParams.end + edgeOffset;\r\n\t        ctx.beginPath();\r\n\t        for (var val = startVal; val <= endVal; val += axisGridParams.step) {\r\n\t            var displayedValue = '';\r\n\t            if (isXAxis) {\r\n\t                var pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\r\n\t                ctx.textAlign = \"center\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(pxVal + 0.5, canvasHeight);\r\n\t                // ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\r\n\t                if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\r\n\t                    displayedValue = AxisWidget.getDateStr(val, axisGridParams);\r\n\t                }\r\n\t                else {\r\n\t                    displayedValue = Number(val.toFixed(14)).toString();\r\n\t                }\r\n\t                ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\r\n\t            }\r\n\t            else {\r\n\t                var pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\r\n\t                ctx.textAlign = \"right\";\r\n\t                // uncomment for dots\r\n\t                // ctx.moveTo(canvasWidth, pxVal + 0.5);\r\n\t                // ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\r\n\t                displayedValue = Number(val.toFixed(14)).toString();\r\n\t                ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\r\n\t            }\r\n\t            ctx.stroke();\r\n\t        }\r\n\t        // uncomment to preview canvas borders\r\n\t        // ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n\t        ctx.stroke();\r\n\t        ctx.closePath();\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisWidget.prototype.onZoomFrame = function (options) {\r\n\t        if (options.zoomX) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.X);\r\n\t        }\r\n\t        if (options.zoomY) {\r\n\t            this.updateAxis(interfaces_1.AXIS_TYPE.Y);\r\n\t        }\r\n\t    };\r\n\t    // private temporaryHideAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar timeoutId = setTimeout(() => {\r\n\t    // \t\t\tthis.showAxis(orientation);\r\n\t    // \t}, 200);\r\n\t    //\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tclearTimeout(this.showAxisXTimeout);\r\n\t    // \t\tthis.showAxisXTimeout =\ttimeoutId;\r\n\t    // \t} else {\r\n\t    // \t\tclearTimeout(this.showAxisYTimeout);\r\n\t    // \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\r\n\t    // \t\tthis.showAxisYTimeout = timeoutId;\r\n\t    // \t}\r\n\t    // }\r\n\t    // private showAxis(orientation: AXIS_TYPE) {\r\n\t    // \tvar isXAxis = orientation == AXIS_TYPE.X;\r\n\t    // \tvar material: MeshBasicMaterial;\r\n\t    // \tif (isXAxis) {\r\n\t    // \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t} else {\r\n\t    // \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\r\n\t    // \t}\r\n\t    // \tthis.updateAxis(orientation);\r\n\t    // \tTweenLite.to(material, 0.3, {opacity: 1});\r\n\t    // }\r\n\t    AxisWidget.getDateStr = function (timestamp, gridParams) {\r\n\t        var sec = 1000;\r\n\t        var min = sec * 60;\r\n\t        var hour = min * 60;\r\n\t        var day = hour * 60;\r\n\t        var step = gridParams.step;\r\n\t        var d = new Date(timestamp);\r\n\t        var tf = function (num) { return Utils_1.Utils.toFixed(num, 2); };\r\n\t        return tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\r\n\t    };\r\n\t    AxisWidget.widgetName = 'Axis';\r\n\t    return AxisWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisWidget = AxisWidget;\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\t/**\r\n\t * widget for drawing state grid\r\n\t */\r\n\tvar GridWidget = (function (_super) {\r\n\t    __extends(GridWidget, _super);\r\n\t    function GridWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.isDestroyed = false;\r\n\t    }\r\n\t    GridWidget.prototype.onReadyHandler = function () {\r\n\t        var _a = this.chart.state, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        this.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\r\n\t        this.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\r\n\t        this.initGrid();\r\n\t        this.updateGrid();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    GridWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        // grid is bigger then screen, so it's no need to update it on each scroll event\r\n\t        var updateGridThrottled = Utils_1.Utils.throttle(function () { return _this.updateGrid(); }, 1000);\r\n\t        this.bindEvent(this.chart.onScroll(function () { return updateGridThrottled(); }), this.chart.screen.onZoomFrame(function (options) {\r\n\t            updateGridThrottled();\r\n\t            _this.onZoomFrame(options);\r\n\t        }), this.chart.onDestroy(function () {\r\n\t            _this.isDestroyed = true;\r\n\t            _this.unbindEvents();\r\n\t        }), this.chart.onResize(function () {\r\n\t            _this.updateGrid();\r\n\t        }));\r\n\t    };\r\n\t    GridWidget.prototype.initGrid = function () {\r\n\t        var color = new Color_1.ChartColor(this.chart.state.xAxis.grid.color);\r\n\t        var geometry = new THREE.Geometry();\r\n\t        var material = new THREE.LineBasicMaterial({ linewidth: 1, color: color.value, opacity: color.a, transparent: true });\r\n\t        var xLinesCount = this.gridSizeH;\r\n\t        var yLinesCount = this.gridSizeV;\r\n\t        while (xLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        while (yLinesCount--)\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t        this.lineSegments = new LineSegments(geometry, material);\r\n\t        this.lineSegments.position.setZ(-1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t    };\r\n\t    GridWidget.prototype.updateGrid = function () {\r\n\t        if (this.isDestroyed)\r\n\t            return;\r\n\t        var _a = this.chart.state, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\r\n\t        var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\r\n\t        var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\r\n\t        var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\r\n\t        var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\r\n\t        var gridScrollXVal = scrollXInSegments * axisXGrid.step;\r\n\t        var gridScrollYVal = scrollYInSegments * axisYGrid.step;\r\n\t        var startXVal = axisXGrid.start + gridScrollXVal;\r\n\t        var startYVal = axisYGrid.start + gridScrollYVal;\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var vertices = geometry.vertices;\r\n\t        var lineInd = 0;\r\n\t        for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\r\n\t            var value = startXVal + i * axisXGrid.step;\r\n\t            var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\r\n\t            var value = startYVal + i * axisYGrid.step;\r\n\t            var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\r\n\t            vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\r\n\t            vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\r\n\t            lineInd++;\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\r\n\t    };\r\n\t    GridWidget.prototype.getHorizontalLineSegment = function (yVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\r\n\t        var widthVal = chartState.pxToValueByXAxis(chartState.state.width);\r\n\t        return [\r\n\t            new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0),\r\n\t            new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.getVerticalLineSegment = function (xVal, scrollXVal, scrollYVal) {\r\n\t        var chartState = this.chart;\r\n\t        var localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\r\n\t        var heightVal = chartState.pxToValueByYAxis(chartState.state.height);\r\n\t        return [\r\n\t            new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0),\r\n\t            new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0)\r\n\t        ];\r\n\t    };\r\n\t    GridWidget.prototype.onZoomFrame = function (options) {\r\n\t        var _a = this.chart.state, xAxis = _a.xAxis, yAxis = _a.yAxis;\r\n\t        if (options.zoomX)\r\n\t            this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\r\n\t    };\r\n\t    // TODO: move this code to core\r\n\t    GridWidget.getGridParamsForAxis = function (axisOptions, axisWidth, zoom) {\r\n\t        var axisRange = axisOptions.range;\r\n\t        var from = axisRange.from;\r\n\t        var to = axisRange.to;\r\n\t        var axisLength = to - from;\r\n\t        var gridStep = 0;\r\n\t        var gridStepInPixels = 0;\r\n\t        var minGridStepInPixels = axisOptions.grid.minSizePx;\r\n\t        var axisLengthStr = String(axisLength);\r\n\t        var axisLengthPointPosition = axisLengthStr.indexOf('.');\r\n\t        var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\r\n\t        var gridStepFound = false;\r\n\t        var digitPos = 0;\r\n\t        while (!gridStepFound) {\r\n\t            var power = intPartLength - digitPos - 1;\r\n\t            var multiplier = (Math.pow(10, power) || 1);\r\n\t            var dividers = [1, 2, 5];\r\n\t            for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\r\n\t                var nextGridStep = multiplier / dividers[dividerInd];\r\n\t                var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\r\n\t                if (nextGridStepInPixels >= minGridStepInPixels) {\r\n\t                    gridStep = nextGridStep;\r\n\t                    gridStepInPixels = nextGridStepInPixels;\r\n\t                }\r\n\t                else {\r\n\t                    gridStepFound = true;\r\n\t                    if (gridStep === 0) {\r\n\t                        gridStep = nextGridStep;\r\n\t                        gridStepInPixels = nextGridStepInPixels;\r\n\t                    }\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t            if (!gridStepFound)\r\n\t                digitPos++;\r\n\t        }\r\n\t        var gridStart = Math.floor(from / gridStep) * gridStep;\r\n\t        var gridEnd = Math.floor(to / gridStep) * gridStep;\r\n\t        return {\r\n\t            start: gridStart,\r\n\t            end: gridEnd,\r\n\t            step: gridStep,\r\n\t            stepInPx: gridStepInPixels,\r\n\t            length: gridEnd - gridStart,\r\n\t            segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\r\n\t        };\r\n\t    };\r\n\t    GridWidget.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    GridWidget.widgetName = 'Grid';\r\n\t    return GridWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.GridWidget = GridWidget;\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar ChartColor = (function () {\r\n\t    function ChartColor(color) {\r\n\t        this.set(color);\r\n\t    }\r\n\t    /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\r\n\t    /**\r\n\t     * Parse hex/rgb{a} color syntax.\r\n\t     * @input string\r\n\t     * @returns array [r,g,b{,o}]\r\n\t     */\r\n\t    ChartColor.parseColor = function (color) {\r\n\t        var cache, p = parseInt // Use p as a byte saving reference to parseInt\r\n\t        , color = color.replace(/\\s\\s*/g, ''); //var\r\n\t        // Checks for 6 digit hex and converts string to integer\r\n\t        if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\r\n\t        else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\r\n\t            cache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\r\n\t        else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\r\n\t            cache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\r\n\t        else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3], +cache[4]];\r\n\t        else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\r\n\t            cache = [+cache[1], +cache[2], +cache[3]];\r\n\t        else\r\n\t            throw Error(color + ' is not supported by parseColor');\r\n\t        // Performs RGBA conversion by default\r\n\t        isNaN(cache[3]) && (cache[3] = 1);\r\n\t        return cache;\r\n\t        // Adds or removes 4th value based on rgba support\r\n\t        // Support is flipped twice to prevent erros if\r\n\t        // it's not defined\r\n\t        //return cache.slice(0,3 + !!$.support.rgba);\r\n\t    };\r\n\t    ChartColor.prototype.set = function (color) {\r\n\t        if (typeof color == 'number') {\r\n\t            color = color.toString(16);\r\n\t            color = '#' + '0'.repeat(6 - color.length) + color;\r\n\t        }\r\n\t        var colorStr = color;\r\n\t        var rgba = ChartColor.parseColor(colorStr);\r\n\t        this.r = rgba[0];\r\n\t        this.g = rgba[1];\r\n\t        this.b = rgba[2];\r\n\t        this.a = rgba[3];\r\n\t        this.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\r\n\t        this.hexStr = '#' + this.value.toString(16);\r\n\t        this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\r\n\t    };\r\n\t    return ChartColor;\r\n\t}());\r\n\texports.ChartColor = ChartColor;\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar TrendsWidget_1 = __webpack_require__(28);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\tvar TrendsGradientWidget = (function (_super) {\r\n\t    __extends(TrendsGradientWidget, _super);\r\n\t    function TrendsGradientWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsGradientWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendGradient;\r\n\t    };\r\n\t    TrendsGradientWidget.widgetName = \"TrendsGradient\";\r\n\t    return TrendsGradientWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsGradientWidget = TrendsGradientWidget;\r\n\tvar TrendGradient = (function (_super) {\r\n\t    __extends(TrendGradient, _super);\r\n\t    function TrendGradient(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        this.visibleSegmentsCnt = 0;\r\n\t        this.trend = chartState.trendsManager.getTrend(trendName);\r\n\t        this.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments);\r\n\t        this.initGradient();\r\n\t        this.updateSegments();\r\n\t    }\r\n\t    TrendGradient.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.hasBackground;\r\n\t    };\r\n\t    TrendGradient.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            // TODO: optimize updateSegments for onDisplayedRangeChanged\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.chart.onZoom(function () {\r\n\t            _this.updateSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendGradient.prototype.getObject3D = function () {\r\n\t        return this.gradient;\r\n\t    };\r\n\t    TrendGradient.prototype.initGradient = function () {\r\n\t        var geometry = new Geometry();\r\n\t        for (var i = 0; i < this.segmentsIds.length; i++) {\r\n\t            geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\r\n\t            var ind = i * 4;\r\n\t            // gradient segment scheme\r\n\t            //\r\n\t            // vert0 +---+ vert3\r\n\t            //       |\\  |\r\n\t            // face1 | \\ | face2\r\n\t            // \t     |  \\|\r\n\t            // vert1 +---+ vert2\r\n\t            geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\r\n\t        }\r\n\t        var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\r\n\t        this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color: color.value, transparent: true, opacity: color.a }));\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.gradient.frustumCulled = false;\r\n\t    };\r\n\t    TrendGradient.prototype.onZoomFrame = function (options) {\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        var currentScale = this.gradient.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendGradient.prototype.onSegmentsAnimate = function (trendSegmentsManager) {\r\n\t        var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\r\n\t        for (var i = 0; i < this.visibleSegmentsCnt; i++) {\r\n\t            var segmentId = this.segmentsIds[i];\r\n\t            if (!animatedSegmentsIds.includes(segmentId))\r\n\t                continue;\r\n\t            this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\r\n\t        }\r\n\t        this.gradient.geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendGradient.prototype.updateSegments = function () {\r\n\t        var geometry = this.gradient.geometry;\r\n\t        var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\r\n\t        var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\r\n\t        this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\r\n\t        var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\r\n\t        if (segmentsToProcessCnt > this.segmentsIds.length) {\r\n\t            Utils_1.Utils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\r\n\t        }\r\n\t        // setup visible segments and collapse invisible\r\n\t        for (var i = 0; i <= segmentsToProcessCnt; i++) {\r\n\t            if (segmentInd <= lastDisplayedSegmentInd) {\r\n\t                var segment = trendSegments[segmentInd];\r\n\t                this.setupSegmentVertices(i, segment.currentAnimationState);\r\n\t                this.segmentsIds[i] = segment.id;\r\n\t                segmentInd++;\r\n\t            }\r\n\t            else {\r\n\t                this.setupSegmentVertices(i);\r\n\t            }\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    /**\r\n\t     * setup gradient segment by segmentState\r\n\t     * if segmentState is undefined, then collapse vertices to 0,0,0\r\n\t     */\r\n\t    TrendGradient.prototype.setupSegmentVertices = function (segmentInd, segmentState) {\r\n\t        var gradientSegmentInd = segmentInd * 4;\r\n\t        var vertices = this.gradient.geometry.vertices;\r\n\t        var topLeft = vertices[gradientSegmentInd];\r\n\t        var bottomLeft = vertices[gradientSegmentInd + 1];\r\n\t        var bottomRight = vertices[gradientSegmentInd + 2];\r\n\t        var topRight = vertices[gradientSegmentInd + 3];\r\n\t        var screenHeightVal = Math.max(this.chart.pxToValueByYAxis(this.chart.state.height), this.chart.screen.pxToValueByYAxis(this.chart.state.height));\r\n\t        if (segmentState) {\r\n\t            var startX = this.toLocalX(segmentState.startXVal);\r\n\t            var startY = this.toLocalY(segmentState.startYVal);\r\n\t            var endX = this.toLocalX(segmentState.endXVal);\r\n\t            var endY = this.toLocalY(segmentState.endYVal);\r\n\t            topLeft.set(startX, startY, 0);\r\n\t            topRight.set(endX, endY, 0);\r\n\t            bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\r\n\t            bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\r\n\t        }\r\n\t        else {\r\n\t            topLeft.set(0, 0, 0);\r\n\t            topRight.set(0, 0, 0);\r\n\t            bottomLeft.set(0, 0, 0);\r\n\t            bottomRight.set(0, 0, 0);\r\n\t        }\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendGradient.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    return TrendGradient;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendGradient = TrendGradient;\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar Object3D = THREE.Object3D;\r\n\t/**\r\n\t * abstract manager class for all trends widgets\r\n\t */\r\n\tvar TrendsWidget = (function (_super) {\r\n\t    __extends(TrendsWidget, _super);\r\n\t    function TrendsWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.widgets = {};\r\n\t    }\r\n\t    TrendsWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        this.onTrendsChange();\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    TrendsWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        var state = this.chart;\r\n\t        state.onTrendsChange(function () { return _this.onTrendsChange(); });\r\n\t        state.onTrendChange(function (trendName, changedOptions, newData) {\r\n\t            _this.onTrendChange(trendName, changedOptions, newData);\r\n\t        });\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendsChange = function () {\r\n\t        var trendsOptions = this.chart.state.trends;\r\n\t        var TrendWidgetClass = this.getTrendWidgetClass();\r\n\t        for (var trendName in trendsOptions) {\r\n\t            var trendOptions = trendsOptions[trendName];\r\n\t            var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\r\n\t            if (widgetCanBeEnabled && !this.widgets[trendName]) {\r\n\t                this.createTrendWidget(trendName);\r\n\t            }\r\n\t            else if (!widgetCanBeEnabled && this.widgets[trendName]) {\r\n\t                this.destroyTrendWidget(trendName);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.onTrendChange = function (trendName, changedOptions, newData) {\r\n\t        var widget = this.widgets[trendName];\r\n\t        if (!widget)\r\n\t            return;\r\n\t        widget.onTrendChange(changedOptions);\r\n\t        if (newData) {\r\n\t            var data = this.chart.getTrend(trendName).getData();\r\n\t            var isAppend = (!data.length || data[0].xVal < newData[0].xVal);\r\n\t            isAppend ? widget.appendData(newData) : widget.prependData(newData);\r\n\t        }\r\n\t    };\r\n\t    TrendsWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendsWidget.prototype.createTrendWidget = function (trendName) {\r\n\t        var WidgetConstructor = this.getTrendWidgetClass();\r\n\t        var widget = new WidgetConstructor(this.chart, trendName);\r\n\t        this.widgets[trendName] = widget;\r\n\t        var widgetObject = widget.getObject3D();\r\n\t        widgetObject.name = trendName;\r\n\t        this.object3D.add(widget.getObject3D());\r\n\t    };\r\n\t    TrendsWidget.prototype.destroyTrendWidget = function (trendName) {\r\n\t        this.widgets[trendName].onDestroy();\r\n\t        delete this.widgets[trendName];\r\n\t        var widgetObject = this.object3D.getObjectByName(trendName);\r\n\t        this.object3D.remove(widgetObject);\r\n\t    };\r\n\t    return TrendsWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.TrendsWidget = TrendsWidget;\r\n\t/**\r\n\t * based class for all trends widgets\r\n\t */\r\n\tvar TrendWidget = (function () {\r\n\t    function TrendWidget(chart, trendName) {\r\n\t        this.chart = chart;\r\n\t        this.trendName = trendName;\r\n\t        this.unbindList = [];\r\n\t        this.trend = chart.trendsManager.getTrend(trendName);\r\n\t        this.chart = chart;\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    TrendWidget.widgetIsEnabled = function (trendOptions, chart) {\r\n\t        return trendOptions.enabled;\r\n\t    };\r\n\t    TrendWidget.prototype.appendData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.prependData = function (newData) { };\r\n\t    ;\r\n\t    TrendWidget.prototype.onTrendChange = function (changedOptions) { };\r\n\t    TrendWidget.prototype.onDestroy = function () {\r\n\t        for (var _i = 0, _a = this.unbindList; _i < _a.length; _i++) {\r\n\t            var unsubscriber = _a[_i];\r\n\t            unsubscriber();\r\n\t        }\r\n\t    };\r\n\t    TrendWidget.prototype.onSegmentsAnimate = function (segments) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoomFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onTransformationFrame = function (options) {\r\n\t    };\r\n\t    TrendWidget.prototype.onZoom = function () {\r\n\t    };\r\n\t    TrendWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function (trendPoints) { return _this.onSegmentsAnimate(trendPoints); }));\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function (options) { return _this.onTransformationFrame(options); }));\r\n\t        this.bindEvent(this.chart.screen.onZoomFrame(function (options) { return _this.onZoomFrame(options); }));\r\n\t        this.bindEvent(this.chart.onZoom(function () { return _this.onZoom(); }));\r\n\t    };\r\n\t    ;\r\n\t    TrendWidget.prototype.bindEvent = function (unbind) {\r\n\t        this.unbindList.push(unbind);\r\n\t    };\r\n\t    return TrendWidget;\r\n\t}());\r\n\texports.TrendWidget = TrendWidget;\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar TrendsWidget_1 = __webpack_require__(28);\r\n\tvar LineSegments = THREE.LineSegments;\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\t/**\r\n\t * widget for drawing trends lines\r\n\t */\r\n\tvar TrendsLineWidget = (function (_super) {\r\n\t    __extends(TrendsLineWidget, _super);\r\n\t    function TrendsLineWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsLineWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendLine;\r\n\t    };\r\n\t    TrendsLineWidget.widgetName = \"TrendsLine\";\r\n\t    return TrendsLineWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsLineWidget = TrendsLineWidget;\r\n\tvar TrendLine = (function (_super) {\r\n\t    __extends(TrendLine, _super);\r\n\t    function TrendLine(chart, trendName) {\r\n\t        _super.call(this, chart, trendName);\r\n\t        // contains indexes of free segments\r\n\t        this.freeSegmentsInds = [];\r\n\t        // contains segments to display\r\n\t        this.displayedSegments = {};\r\n\t        var options = this.trend.getOptions();\r\n\t        this.material = new LineBasicMaterial({ color: options.lineColor, linewidth: options.lineWidth });\r\n\t        this.initLine();\r\n\t    }\r\n\t    TrendLine.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\r\n\t    };\r\n\t    TrendLine.prototype.getObject3D = function () {\r\n\t        return this.lineSegments;\r\n\t    };\r\n\t    TrendLine.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroySegments();\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupSegments();\r\n\t        }));\r\n\t    };\r\n\t    TrendLine.prototype.initLine = function () {\r\n\t        var geometry = new Geometry();\r\n\t        var _a = this.chart.state.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = this.chart.state.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.lineSegments = new LineSegments(geometry, this.material);\r\n\t        this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.lineSegments.frustumCulled = false;\r\n\t        for (var i = 0; i < this.chart.state.maxVisibleSegments; i++) {\r\n\t            geometry.vertices.push(new Vector3(), new Vector3());\r\n\t            this.freeSegmentsInds.push(i);\r\n\t        }\r\n\t        this.vertices = geometry.vertices;\r\n\t        this.setupSegments();\r\n\t    };\r\n\t    TrendLine.prototype.setupSegments = function () {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.displayedSegments) {\r\n\t            var lineSegment = this.displayedSegments[segmentId];\r\n\t            var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroySegment(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupSegment(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.setupSegment = function (segmentId, segmentState) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        if (!lineSegment) {\r\n\t            if (this.freeSegmentsInds.length == 0)\r\n\t                Utils_1.Utils.error('Max allocated segments reached');\r\n\t            var ind = this.freeSegmentsInds.pop();\r\n\t            lineSegment = this.displayedSegments[segmentId] = { segmentId: segmentId, ind: ind };\r\n\t        }\r\n\t        var segmentInd = lineSegment.ind;\r\n\t        var lineStartVertex = this.vertices[segmentInd * 2];\r\n\t        var lineEndVertex = this.vertices[segmentInd * 2 + 1];\r\n\t        lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\r\n\t        lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\r\n\t    };\r\n\t    TrendLine.prototype.destroySegments = function () {\r\n\t        for (var segmentId in this.displayedSegments)\r\n\t            this.destroySegment(Number(segmentId));\r\n\t    };\r\n\t    TrendLine.prototype.destroySegment = function (segmentId) {\r\n\t        var lineSegment = this.displayedSegments[segmentId];\r\n\t        var lineStartVertex = this.vertices[lineSegment.ind * 2];\r\n\t        var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\r\n\t        lineStartVertex.set(0, 0, 0);\r\n\t        lineEndVertex.set(0, 0, 0);\r\n\t        delete this.displayedSegments[segmentId];\r\n\t        this.freeSegmentsInds.push(lineSegment.ind);\r\n\t    };\r\n\t    TrendLine.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.lineSegments.scale;\r\n\t        var state = this.chart.state;\r\n\t        var scaleXFactor = state.xAxis.range.scaleFactor;\r\n\t        var scaleYFactor = state.yAxis.range.scaleFactor;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendLine.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        var geometry = this.lineSegments.geometry;\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.displayedSegments[segmentId])\r\n\t                continue;\r\n\t            this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\r\n\t        }\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendLine.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendLine;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendLine = TrendLine;\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar TrendsWidget_1 = __webpack_require__(28);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Line = THREE.Line;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar PlaneGeometry = THREE.PlaneGeometry;\r\n\tvar Trend_1 = __webpack_require__(15);\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar RISE_COLOR = 0x2CAC40;\r\n\tvar FALL_COLOR = 0xEE5533;\r\n\tvar MARGIN_PERCENT = 0.3;\r\n\tvar MAX_CANDLES = 100;\r\n\t/**\r\n\t * widget for drawing trends candles\r\n\t */\r\n\tvar TrendsCandlesWidget = (function (_super) {\r\n\t    __extends(TrendsCandlesWidget, _super);\r\n\t    function TrendsCandlesWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsCandlesWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendCandlesWidget;\r\n\t    };\r\n\t    TrendsCandlesWidget.widgetName = \"TrendsCandles\";\r\n\t    return TrendsCandlesWidget;\r\n\t}(TrendsWidget_1.TrendsWidget));\r\n\texports.TrendsCandlesWidget = TrendsCandlesWidget;\r\n\tvar TrendCandlesWidget = (function (_super) {\r\n\t    __extends(TrendCandlesWidget, _super);\r\n\t    function TrendCandlesWidget(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        // contains indexes of free candles\r\n\t        this.freeCandlesInds = [];\r\n\t        this.candlesPool = [];\r\n\t        this.candles = {};\r\n\t        this.initObject();\r\n\t    }\r\n\t    TrendCandlesWidget.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.trend.segmentsManager.onRebuild(function () {\r\n\t            _this.destroyCandles();\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t        this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function () {\r\n\t            _this.setupCandles();\r\n\t        }));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.initObject = function () {\r\n\t        var stateData = this.chart.state;\r\n\t        var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\r\n\t        var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\r\n\t        this.scaleXFactor = scaleXFactor;\r\n\t        this.scaleYFactor = scaleYFactor;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\r\n\t        this.object3D.frustumCulled = false;\r\n\t        for (var i = 0; i < MAX_CANDLES; i++)\r\n\t            this.freeCandlesInds.push(i);\r\n\t        this.setupCandles();\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.setupCandles = function () {\r\n\t        // remove invisible\r\n\t        var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\r\n\t        for (var segmentId in this.candles) {\r\n\t            var segment_1 = this.candles[segmentId].segment;\r\n\t            var segmentIsNotDisplayed = (segment_1.startXVal < firstDisplayedSegment.startXVal ||\r\n\t                segment_1.endXVal > lastDisplayedSegment.endXVal);\r\n\t            if (segmentIsNotDisplayed)\r\n\t                this.destroyCandle(Number(segmentId));\r\n\t        }\r\n\t        var segment = firstDisplayedSegment;\r\n\t        while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\r\n\t            this.setupCandle(segment.id, segment.currentAnimationState);\r\n\t            segment = segment.getNext();\r\n\t        }\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandles = function () {\r\n\t        for (var segmentId in this.candles)\r\n\t            this.destroyCandle(Number(segmentId));\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.destroyCandle = function (segmentId) {\r\n\t        var candle = this.candles[segmentId];\r\n\t        this.object3D.remove(candle.getObject3D());\r\n\t        delete this.candles[segmentId];\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onZoomFrame = function (options) {\r\n\t        var currentScale = this.object3D.scale;\r\n\t        if (options.zoomX)\r\n\t            currentScale.setX(this.scaleXFactor * options.zoomX);\r\n\t        if (options.zoomY)\r\n\t            currentScale.setY(this.scaleYFactor * options.zoomY);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.onSegmentsAnimate = function (trendSegments) {\r\n\t        for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\r\n\t            var segmentId = _a[_i];\r\n\t            if (!this.candles[segmentId])\r\n\t                continue;\r\n\t            var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\r\n\t            this.setupCandle(segmentId, segmentState);\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * create or modify candle\r\n\t     */\r\n\t    TrendCandlesWidget.prototype.setupCandle = function (candleId, segmentState) {\r\n\t        var candleInd = candleId % MAX_CANDLES;\r\n\t        // get candle from candlesPool to avoid creating new Objects by performance reasons\r\n\t        var candle = this.candlesPool[candleInd];\r\n\t        if (!candle) {\r\n\t            candle = this.candlesPool[candleInd] = new CandleWidget();\r\n\t        }\r\n\t        if (!this.candles[candleId]) {\r\n\t            this.candles[candleId] = candle;\r\n\t            this.object3D.add(candle.getObject3D());\r\n\t        }\r\n\t        candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\r\n\t        candle.setSegment(segmentState);\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalX = function (xVal) {\r\n\t        return xVal - this.chart.state.xAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalY = function (yVal) {\r\n\t        return yVal - this.chart.state.yAxis.range.zeroVal;\r\n\t    };\r\n\t    TrendCandlesWidget.prototype.toLocalVec = function (vec) {\r\n\t        return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\r\n\t    };\r\n\t    return TrendCandlesWidget;\r\n\t}(TrendsWidget_1.TrendWidget));\r\n\texports.TrendCandlesWidget = TrendCandlesWidget;\r\n\tvar CandleWidget = (function () {\r\n\t    function CandleWidget() {\r\n\t        this.initObject();\r\n\t    }\r\n\t    CandleWidget.prototype.getObject3D = function () {\r\n\t        return this.rect;\r\n\t    };\r\n\t    CandleWidget.prototype.setSegment = function (segment) {\r\n\t        this.segment = segment;\r\n\t        var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\r\n\t        // update rect\r\n\t        var geometry = this.rect.geometry;\r\n\t        var material = this.rect.material;\r\n\t        var width = segment.endXVal - segment.startXVal;\r\n\t        width -= width * MARGIN_PERCENT;\r\n\t        var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\r\n\t        var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\r\n\t        leftTop.set(-width / 2, height / 2, 0);\r\n\t        rightTop.set(width / 2, height / 2, 0);\r\n\t        leftBottom.set(-width / 2, -height / 2, 0);\r\n\t        rightBottom.set(width / 2, -height / 2, 0);\r\n\t        // prevent to draw bars with height < 1px\r\n\t        if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\r\n\t            leftBottom.setY(leftBottom.y + 1);\r\n\t            rightBottom.setY(rightBottom.y + 1);\r\n\t        }\r\n\t        material.color.set(color);\r\n\t        geometry.verticesNeedUpdate = true;\r\n\t        // update lines\r\n\t        var vLineGeometry = this.vLine.geometry;\r\n\t        var vLineMaterial = this.vLine.material;\r\n\t        var lineTop = segment.maxYVal - segment.yVal;\r\n\t        var lineBottom = segment.minYVal - segment.yVal;\r\n\t        vLineGeometry.vertices[0].set(0, lineTop, 0);\r\n\t        vLineGeometry.vertices[1].set(0, lineBottom, 0);\r\n\t        vLineMaterial.color.set(color);\r\n\t        vLineGeometry.verticesNeedUpdate = true;\r\n\t        var hLineGeometry = this.hLine.geometry;\r\n\t        var hLineMaterial = this.hLine.material;\r\n\t        var lineLeft = (-width) / 2;\r\n\t        var lineRight = width / 2;\r\n\t        hLineGeometry.vertices[0].set(lineLeft, 0, 0);\r\n\t        hLineGeometry.vertices[1].set(lineRight, 0, 0);\r\n\t        hLineMaterial.color.set(color);\r\n\t        hLineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    CandleWidget.prototype.initObject = function () {\r\n\t        this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\r\n\t        var vLineGeometry = new Geometry();\r\n\t        var hLineGeometry = new Geometry();\r\n\t        vLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        hLineGeometry.vertices.push(new Vector3(), new Vector3);\r\n\t        this.vLine = new Line(vLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.hLine = new Line(hLineGeometry, new LineBasicMaterial({ linewidth: 1 }));\r\n\t        this.rect.add(this.vLine);\r\n\t        this.rect.add(this.hLine);\r\n\t    };\r\n\t    return CandleWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Widget_1 = __webpack_require__(23);\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar LineBasicMaterial = THREE.LineBasicMaterial;\r\n\tvar Vector3 = THREE.Vector3;\r\n\tvar Utils_1 = __webpack_require__(11);\r\n\tvar Line = THREE.Line;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar interfaces_1 = __webpack_require__(20);\r\n\tvar Color_1 = __webpack_require__(26);\r\n\t/**\r\n\t * widget for shows marks on axis\r\n\t */\r\n\tvar AxisMarksWidget = (function (_super) {\r\n\t    __extends(AxisMarksWidget, _super);\r\n\t    function AxisMarksWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t        this.axisMarksWidgets = [];\r\n\t    }\r\n\t    AxisMarksWidget.prototype.onReadyHandler = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        var _a = this.chart, xAxisMarks = _a.xAxisMarks, yAxisMarks = _a.yAxisMarks;\r\n\t        var items = xAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t        items = yAxisMarks.getItems();\r\n\t        for (var markName in items) {\r\n\t            this.createAxisMark(items[markName]);\r\n\t        }\r\n\t        this.bindEvents();\r\n\t    };\r\n\t    AxisMarksWidget.prototype.createAxisMark = function (axisMark) {\r\n\t        var axisMarkWidget = new AxisMarkWidget(this.chart, axisMark);\r\n\t        this.axisMarksWidgets.push(axisMarkWidget);\r\n\t        this.object3D.add(axisMarkWidget.getObject3D());\r\n\t    };\r\n\t    AxisMarksWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.bindEvent(this.chart.screen.onTransformationFrame(function () { return _this.updateMarksPositions(); }), this.chart.onResize(function () { return _this.updateMarksPositions(); }));\r\n\t    };\r\n\t    AxisMarksWidget.prototype.updateMarksPositions = function () {\r\n\t        for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\r\n\t            var widget = _a[_i];\r\n\t            widget.updatePosition();\r\n\t        }\r\n\t    };\r\n\t    AxisMarksWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarksWidget.widgetName = 'AxisMarks';\r\n\t    return AxisMarksWidget;\r\n\t}(Widget_1.ChartWidget));\r\n\texports.AxisMarksWidget = AxisMarksWidget;\r\n\tvar DEFAULT_INDICATOR_RENDER_FUNCTION = function (axisMarkWidget, ctx) {\r\n\t    var axisMark = axisMarkWidget.axisMark;\r\n\t    ctx.fillStyle = axisMark.options.lineColor;\r\n\t    ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\r\n\t    var xCoord = 15;\r\n\t    if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\r\n\t        ctx.textAlign = 'end';\r\n\t        xCoord = axisMarkWidget.indicatorWidth;\r\n\t    }\r\n\t    ctx.fillText(axisMark.options.title, xCoord, 20);\r\n\t    if (!axisMark.options.showValue)\r\n\t        return;\r\n\t    ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\r\n\t    ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\r\n\t};\r\n\tvar INDICATOR_POS_Z = 0.1;\r\n\tvar AxisMarkWidget = (function () {\r\n\t    function AxisMarkWidget(chartState, axisMark) {\r\n\t        this.indicatorWidth = 128;\r\n\t        this.indicatorHeight = 64;\r\n\t        this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\r\n\t        this.chartState = chartState;\r\n\t        this.axisMark = axisMark;\r\n\t        this.axisType = axisMark.axisType;\r\n\t        this.frameValue = axisMark.options.value;\r\n\t        this.object3D = new Object3D();\r\n\t        this.object3D.position.setZ(-0.1);\r\n\t        this.line = this.createLine();\r\n\t        this.object3D.add(this.line);\r\n\t        this.indicator = this.createIndicator();\r\n\t        this.object3D.add(this.indicator);\r\n\t        this.renderIndicator();\r\n\t        this.updatePosition();\r\n\t        this.bindEvents();\r\n\t    }\r\n\t    AxisMarkWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createLine = function () {\r\n\t        var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\r\n\t        var lineGeometry = new Geometry();\r\n\t        lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\r\n\t        return new Line(lineGeometry, new LineBasicMaterial({ color: new Color_1.ChartColor(lineColor).value, linewidth: lineWidth }));\r\n\t    };\r\n\t    AxisMarkWidget.prototype.createIndicator = function () {\r\n\t        var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\r\n\t        var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.font = \"10px Arial\";\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        return new Mesh(new THREE.PlaneGeometry(width, height), material);\r\n\t    };\r\n\t    AxisMarkWidget.prototype.renderIndicator = function () {\r\n\t        var texture = this.indicator.material.map;\r\n\t        var ctx = texture.image.getContext('2d');\r\n\t        DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\r\n\t        texture.needsUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.axisMark.onDisplayedValueChange(function () { return _this.renderIndicator(); });\r\n\t        this.axisMark.onValueChange(function () { return _this.onValueChangeHandler(); });\r\n\t    };\r\n\t    AxisMarkWidget.prototype.onValueChangeHandler = function () {\r\n\t        var _this = this;\r\n\t        // move mark to new position with animation\r\n\t        if (this.moveAnimation)\r\n\t            this.moveAnimation.kill();\r\n\t        var animations = this.chartState.state.animations;\r\n\t        var targetValue = this.axisMark.options.value;\r\n\t        var cb = function () {\r\n\t            _this.updatePosition();\r\n\t        };\r\n\t        if (animations.enabled) {\r\n\t            this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, { frameValue: targetValue, ease: animations.trendChangeEase });\r\n\t            this.moveAnimation.eventCallback('onUpdate', cb);\r\n\t        }\r\n\t        else {\r\n\t            this.frameValue = targetValue;\r\n\t            cb();\r\n\t        }\r\n\t    };\r\n\t    AxisMarkWidget.prototype.updatePosition = function () {\r\n\t        var chartState = this.chartState;\r\n\t        var screen = chartState.screen;\r\n\t        var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\r\n\t        var lineGeometry = this.line.geometry;\r\n\t        var hasStickMode = this.axisMark.options.stickToEdges;\r\n\t        var _a = this.chartState.state, width = _a.width, height = _a.height;\r\n\t        if (isXAxis) {\r\n\t            // TODO: make stickToEdges mode for AXIS_TYPE.X \r\n\t            this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\r\n\t            this.object3D.position.y = screen.getBottom();\r\n\t            lineGeometry.vertices[1].setY(height);\r\n\t            this.indicator.position.set(this.indicatorWidth / 2, chartState.state.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\r\n\t        }\r\n\t        else {\r\n\t            var val = this.frameValue;\r\n\t            var bottomVal = screen.getBottomVal();\r\n\t            var topVal = screen.getTopVal();\r\n\t            var needToStickOnTop = hasStickMode && val > topVal;\r\n\t            var needToStickOnBottom = hasStickMode && val < bottomVal;\r\n\t            var centerYVal = screen.getCenterYVal();\r\n\t            this.object3D.position.x = screen.getLeft();\r\n\t            if (needToStickOnTop) {\r\n\t                this.object3D.position.y = screen.getTop();\r\n\t            }\r\n\t            else if (needToStickOnBottom) {\r\n\t                this.object3D.position.y = screen.getBottom();\r\n\t            }\r\n\t            else {\r\n\t                this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\r\n\t            }\r\n\t            lineGeometry.vertices[1].setX(width);\r\n\t            var indicatorPosY = val > centerYVal ? -35 : 10;\r\n\t            this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\r\n\t        }\r\n\t        lineGeometry.verticesNeedUpdate = true;\r\n\t    };\r\n\t    AxisMarkWidget.typeName = 'simple';\r\n\t    return AxisMarkWidget;\r\n\t}());\r\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(24));\r\n\t__export(__webpack_require__(25));\r\n\t__export(__webpack_require__(28));\r\n\t__export(__webpack_require__(29));\r\n\t__export(__webpack_require__(27));\r\n\t// TODO: remove\r\n\t__export(__webpack_require__(31));\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** demoApp.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap cc8ce7ea982f4896d02f\n **/","\nimport { ChartView, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from '../src';\n\n// import { ChartView, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from 'three-charts';\n// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/TrendsMarksPlugin';\n// import { TrendsBeaconWidget } from '../plugins/build/TrendsBeaconWidget';\n// import { TrendsLoadingWidget } from '../plugins/build/TrendsLoadingWidget';\n// import { TrendsIndicatorWidget } from '../plugins/build/TrendsIndicatorWidget';\n// ChartView.preinstalledWidgets.push(TrendsLoadingWidget, TrendsBeaconWidget, TrendsIndicatorWidget);\n\nvar chartView: ChartView;\n\nclass DataSourse {\n\tdata: ITrendItem[] = [];\n\tstartTime: number;\n\tendTime: number;\n\n\tconstructor() {\n\t\tlet sec = 0;\n\t\tlet val = 70;\n\t\tthis.startTime = Date.now();\n\n\t\twhile (sec < 100) { //2592000\n\t\t\tthis.data.push({\n\t\t\t\txVal: this.startTime + sec * 1000,\n\t\t\t\tyVal: val\n\t\t\t});\n\t\t\tval += Math.random() * 14 - 7;\n\t\t\tsec++;\n\t\t}\n\t\tthis.endTime = this.data[this.data.length - 1].xVal;\n\t}\n\n\tgetData() {\n\t\treturn Utils.deepCopy(this.data);\n\t}\n\n\tgetNext() {\n\t\tvar lastVal = this.data[this.data.length - 1];\n\t\tvar yVal = lastVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.endTime + 1000;\n\t\tthis.endTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.push(item);\n\t\treturn item;\n\t}\n\n\tgetPrev() {\n\t\tvar firstVal = this.data[0];\n\t\tvar yVal = firstVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.startTime - 1000;\n\t\tthis.startTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.unshift(item);\n\t\treturn item;\n\t}\n}\n//\n// class MarksSource {\n// \tstatic getNext(val: number): ITrendMarkOptions {\n// \t\tif (Math.random() > 0.2) return null;\n// \t\treturn this.generate(val);\n// \t}\n//\n// \tstatic generate(val: number): ITrendMarkOptions {\n// \t\tlet descriptionColor = 'rgb(40,136,75)';\n// \t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\n// \t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\n// \t\t\tdescriptionColor = 'rgb(219,73,49)';\n// \t\t}\n//\n// \t\treturn {\n// \t\t\ttrendName: 'main',\n// \t\t\tvalue: val,\n// \t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\n// \t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\n// \t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\n// \t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\n// \t\t\torientation: orientation,\n// \t\t\tdescriptionColor: descriptionColor\n// \t\t}\n// \t}\n// }\n\nwindow.onload = function () {\n\n\tinitListeners();\n\n\tvar dsMain = new DataSourse();\n\tvar dsRed = new DataSourse();\n\tvar dsBlue = new DataSourse();\n\tvar now = Date.now();\n\n\n\n\tchartView = new ChartView({\n\t\tyAxis: {\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true},\n\t\t\t],\n\t\t\trange: {\n\n\t\t\t\tpadding: {end: 100, start: 100},\n\t\t\t\tmargin: {end: 50, start: 50},\n\t\t\t\tzeroVal: 70\n\t\t\t}\n\t\t},\n\t\txAxis: {\n\t\t\t//range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\n\t\t\tdataType: AXIS_DATA_TYPE.DATE,\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.FIXED,\n\t\t\t\tfrom: Date.now(),\n\t\t\t\tto: Date.now() + 20000,\n\t\t\t\tpadding: {end: 200, start: 0},\n\t\t\t\tmaxLength: 5000000,\n\t\t\t\tminLength: 5000\n\t\t\t},\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true},\n\t\t\t\t{value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true}\n\t\t\t]\n\t\t\t// range: {\n\t\t\t// \tfrom: 80,\n\t\t\t// \tto: 90\n\t\t\t// }\n\t\t},\n\t\ttrends: {\n\t\t\t'main': {\n\t\t\t\ttype: TREND_TYPE.LINE,\n\t\t\t\tdataset: dsMain.getData(),\n\t\t\t\thasBeacon: true,\n\t\t\t\thasIndicator: true,\n\t\t\t\thasBackground: true,\n\t\t\t},\n\t\t\t// 'red': {dataset: dsRed.state, lineColor: 0xFF2222, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t\t// 'blue': {dataset: dsBlue.state, lineColor: 0x2222FF, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t},\n\t\tshowStats: true,\n\t\t// autoRender: {fps: 100},\n\t\t// animations: {enabled: false},\n\n\t\ttrendDefaultState: {\n\t\t\tsettingsForTypes: {\n\t\t\t\tLINE: {\n\t\t\t\t\t// minSegmentLengthInPx: 10\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tdocument.querySelector('.chart')\n\t\t,\n\t[\n\t\t//new TrendsMarksPlugin({items: [MarksSource.generate(now + 3000), MarksSource.generate(now + 3000), MarksSource.generate(now + 4000)]})\n\t]\n\t);\n\n\tchartView.setState({animations: {enabled: false}});\n\tchartView.setState({animations: {enabled: true}});\n\t\n\t(<any>window)['chartView'] = chartView;\n\n\tvar mainTrend = chartView.getTrend('main');\n\tvar deadlineMark = chartView.chart.xAxisMarks.getItem('deadline');\n\tvar closeMark = chartView.chart.xAxisMarks.getItem('close');\n\n\tmainTrend.onDataChange(() => {\n\t\tvar closeValue = closeMark.options.value;\n\t\tif (mainTrend.getLastItem().xVal >= closeValue) {\n\t\t\tdeadlineMark.setOptions({value: closeValue + 10000});\n\t\t\tcloseMark.setOptions({value: closeValue + 20000})\n\t\t}\n\t\t// var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\n\t\t// if (markOptions) setTimeout(() => {\n\t\t// \tlet trendsMarks = chartView.chart.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\n\t\t// \ttrendsMarks.createMark(markOptions);\n\t\t// }, 500);\n\t});\n\n\n\t// var previewChart1 = ChartView.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-state')[0],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.state, hasBeacon: true}\n\t// \t}\n\t// });\n\t//\n\t// var previewChart2 = ChartView.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-state')[1],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.state, hasBeacon: true}\n\t// \t},\n\t//\n\t// });\n\t//\n\t// var previewChart3 = ChartView.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-state')[2],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.state, hasBeacon: true},\n\t// \t\t'red': {dataset: dsRed.state, lineColor: 0xFF2222},\n\t// \t}\n\t// });\n\t//\n\n\tvar i = 0;\n\n\tchartView.getTrend('main').onPrependRequest((requestedLength, resolve, reject) => {\n\t\tvar responseData: ITrendItem[] = [];\n\t\tvar ticksCount = Math.round(requestedLength / 1000) ;\n\t\twhile (ticksCount--) responseData.unshift(dsMain.getPrev());\n\t\tsetTimeout(() => {\n\t\t\tresolve(responseData);\n\t\t}, 2000)\n\t});\n\n\tsetInterval(() => {\n\t\ti++;\n\t\tvar val = dsMain.getNext();\n\n\t\t// [i % 2 ? 10 : 20]\n\n\t\t chartView.getTrend('main').appendData([val]);\n\t\t// state.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\n\t\t// state.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// state.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// state.getTrend('red').appendData([val + 10 + Math.random() * 20]);\n\t\t// state.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\n\n\n\n\t\t// previewChart1.getTrend('main').appendData([val]);\n\t\t// previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\n\t\t// previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\n\t\t\n\t\t// previewChart1.appendData(dataToAppend1);\n\t\t//\n\t\t// var chartData2 = previewChart2.state.state.trends[0].state;\n\t\t// var lastItem2 = chartData2[chartData.length - 1];\n\t\t// var dataToAppend2 = [\n\t\t// \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\n\t\t// ];\n\t\t// previewChart2.appendData(dataToAppend2);\n\t\t// previewChart3.appendData(dataToAppend2);\n\t}, 1000);\n};\n\n\nfunction initListeners() {\n\tvar $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]') as HTMLInputElement;\n\t$checkboxMaintrend.addEventListener('change', () => {\n\t\tchartView.setState({trends: {main: {enabled: $checkboxMaintrend.checked}}});\n\t});\n\tvar $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]') as HTMLInputElement;\n\t$checkboxRedtrend.addEventListener('change', () => {\n\t\tchartView.setState({trends: {red: {enabled: $checkboxRedtrend.checked}}});\n\t});\n\tvar $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]') as HTMLInputElement;\n\t$checkboxBluetrend.addEventListener('change', () => {\n\t\tchartView.setState({trends: {blue: {enabled: $checkboxBluetrend.checked}}});\n\t});\n\n\tvar $switchLineBtn = document.querySelector('[name=\"switch-line\"]') as HTMLInputElement;\n\t$switchLineBtn.addEventListener('click', () => {\n\t\tchartView.getTrend('main').setOptions({type: TREND_TYPE.LINE});\n\t});\n\n\tvar $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]') as HTMLInputElement;\n\t$switchBarsBtn.addEventListener('click', () => {\n\t\tchartView.getTrend('main').setOptions({type: TREND_TYPE.CANDLE});\n\t});\n\n\tdocument.querySelector('[name=\"move-left\"]').addEventListener('click', () => {\n\t\tlet currentRange = chartView.chart.state.xAxis.range;\n\t\tchartView.setState({xAxis: {range: {from: currentRange.from - 2000}}});\n\t});\n\n\tdocument.querySelector('[name=\"move-right\"]').addEventListener('click', () => {\n\t\tlet currentRange = chartView.chart.state.xAxis.range;\n\t\tchartView.setState({xAxis: {range: {to: currentRange.to + 2000}}});\n\t});\n\t\n\tvar timeframeButtons = document.querySelectorAll(\".timeframe\");\n\tfor (var i = 0; i < timeframeButtons.length; i++) {\n\t\ttimeframeButtons[i].addEventListener(\"click\", function() {\n\t\t\tvar range = Number(this.getAttribute('data-range'));\n\t\t\tvar segmentLength = Number(this.getAttribute('data-segment-length'));\n\n\n\t\t\tchartView.chart.setState({autoScroll: false});\n\t\t\tchartView.chart.zoomToRange(range);\n\t\t\tchartView.chart.scrollToEnd().then(() => {\n\t\t\t\tchartView.chart.setState({autoScroll: true});\n\t\t\t});\n\t\t});\n\t}\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demoApp.ts\n **/","require('./deps/deps');\nexport * from './ChartView';\nexport * from './interfaces';\nexport * from './AxisMarks';\nexport * from './Screen';\nexport * from './Chart';\nexport * from './Trend';\nexport * from './TrendSegmentsManager';\nexport * from './TrendsManager';\nexport * from './Utils';\nexport * from './Widget';\nexport * from './Plugin';\nexport * from './Color';\nexport * from './AnimationManager';\nexport * from './Easing';\nexport * from './widgets';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.ts\n **/","/// <reference path=\"./ResizeSensor.ts\" />\n\n// TODO: think about different bundles\n\nimport { ResizeSensorType } from './ResizeSensor';\n(<any>window).TweenLite = TweenMax;\n(<any>window).Stats = require('three/examples/js/libs/stats.min');\n\n// require('gsap/src/uncompressed/easing/EasePack.js');\n// require('three/examples/js/renderers/CanvasRenderer.js');\n// require('three/examples/js/renderers/Projector.js');\nexport const isPlainObject = require('is-plain-object') as Function;\nexport const EE2 = require('eventemitter2') as typeof EventEmitter2;\n\n\nexport { Promise } from '../polyfills/es6-promise';\n\nexport * from './ResizeSensor';\nexport const ResizeSensor = require('css-element-queries/src/ResizeSensor') as ResizeSensorType;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/deps.ts\n **/","// stats.js - http://github.com/mrdoob/stats.js\nvar Stats=function(){function h(a){c.appendChild(a.dom);return a}function k(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();k(++l%c.children.length)},!1);var g=(performance||Date).now(),e=g,a=0,r=h(new Stats.Panel(\"FPS\",\"#0ff\",\"#002\")),f=h(new Stats.Panel(\"MS\",\"#0f0\",\"#020\"));\nif(self.performance&&self.performance.memory)var t=h(new Stats.Panel(\"MB\",\"#f08\",\"#201\"));k(0);return{REVISION:16,dom:c,addPanel:h,showPanel:k,begin:function(){g=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();f.update(c-g,200);if(c>e+1E3&&(r.update(1E3*a/(c-e),100),e=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){g=this.end()},domElement:c,setMode:k}};\nStats.Panel=function(h,k,l){var c=Infinity,g=0,e=Math.round,a=e(window.devicePixelRatio||1),r=80*a,f=48*a,t=3*a,u=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=f;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,f);b.fillStyle=k;b.fillText(h,t,u);b.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(f,\nv){c=Math.min(c,f);g=Math.max(g,f);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=k;b.fillText(e(f)+\" \"+h+\" (\"+e(c)+\"-\"+e(g)+\")\",t,u);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,e((1-f/v)*p))}}};\"object\"===typeof module&&(module.exports=Stats);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/examples/js/libs/stats.min.js\n ** module id = 3\n ** module chunks = 0 1\n **/","/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar isObject = require('isobject');\n\nfunction isObjectObject(o) {\n  return isObject(o) === true\n    && Object.prototype.toString.call(o) === '[object Object]';\n}\n\nmodule.exports = function isPlainObject(o) {\n  var ctor,prot;\n  \n  if (isObjectObject(o) === false) return false;\n  \n  // If has modified constructor\n  ctor = o.constructor;\n  if (typeof ctor !== 'function') return false;\n  \n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObjectObject(prot) === false) return false;\n  \n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n  \n  // Most likely a plain Object\n  return true;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/is-plain-object/index.js\n ** module id = 4\n ** module chunks = 0 1\n **/","/*!\n * isobject <https://github.com/jonschlinkert/isobject>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nmodule.exports = function isObject(val) {\n  return val != null && typeof val === 'object'\n    && !Array.isArray(val);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/isobject/index.js\n ** module id = 5\n ** module chunks = 0 1\n **/","/*!\n * EventEmitter2\n * https://github.com/hij1nx/EventEmitter2\n *\n * Copyright (c) 2013 hij1nx\n * Licensed under the MIT license.\n */\n;!function(undefined) {\n\n  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\";\n  };\n  var defaultMaxListeners = 10;\n\n  function init() {\n    this._events = {};\n    if (this._conf) {\n      configure.call(this, this._conf);\n    }\n  }\n\n  function configure(conf) {\n    if (conf) {\n\n      this._conf = conf;\n\n      conf.delimiter && (this.delimiter = conf.delimiter);\n      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n      conf.wildcard && (this.wildcard = conf.wildcard);\n      conf.newListener && (this.newListener = conf.newListener);\n\n      if (this.wildcard) {\n        this.listenerTree = {};\n      }\n    }\n  }\n\n  function EventEmitter(conf) {\n    this._events = {};\n    this.newListener = false;\n    configure.call(this, conf);\n  }\n\n  //\n  // Attention, function return type now is array, always !\n  // It has zero elements if no any matches found and one or more\n  // elements (leafs) if there are matches\n  //\n  function searchListenerTree(handlers, type, tree, i) {\n    if (!tree) {\n      return [];\n    }\n    var listeners=[], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached,\n        typeLength = type.length, currentType = type[i], nextType = type[i+1];\n    if (i === typeLength && tree._listeners) {\n      //\n      // If at the end of the event(s) list and the tree has listeners\n      // invoke those listeners.\n      //\n      if (typeof tree._listeners === 'function') {\n        handlers && handlers.push(tree._listeners);\n        return [tree];\n      } else {\n        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n          handlers && handlers.push(tree._listeners[leaf]);\n        }\n        return [tree];\n      }\n    }\n\n    if ((currentType === '*' || currentType === '**') || tree[currentType]) {\n      //\n      // If the event emitted is '*' at this part\n      // or there is a concrete match at this patch\n      //\n      if (currentType === '*') {\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+1));\n          }\n        }\n        return listeners;\n      } else if(currentType === '**') {\n        endReached = (i+1 === typeLength || (i+2 === typeLength && nextType === '*'));\n        if(endReached && tree._listeners) {\n          // The next element has a _listeners, add it to the handlers.\n          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n        }\n\n        for (branch in tree) {\n          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n            if(branch === '*' || branch === '**') {\n              if(tree[branch]._listeners && !endReached) {\n                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n              }\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            } else if(branch === nextType) {\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i+2));\n            } else {\n              // No match on this one, shift into the tree but not in the type array.\n              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n            }\n          }\n        }\n        return listeners;\n      }\n\n      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i+1));\n    }\n\n    xTree = tree['*'];\n    if (xTree) {\n      //\n      // If the listener tree will allow any match for this part,\n      // then recursively explore all branches of the tree\n      //\n      searchListenerTree(handlers, type, xTree, i+1);\n    }\n\n    xxTree = tree['**'];\n    if(xxTree) {\n      if(i < typeLength) {\n        if(xxTree._listeners) {\n          // If we have a listener on a '**', it will catch all, so add its handler.\n          searchListenerTree(handlers, type, xxTree, typeLength);\n        }\n\n        // Build arrays of matching next branches and others.\n        for(branch in xxTree) {\n          if(branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n            if(branch === nextType) {\n              // We know the next element will match, so jump twice.\n              searchListenerTree(handlers, type, xxTree[branch], i+2);\n            } else if(branch === currentType) {\n              // Current node matches, move into the tree.\n              searchListenerTree(handlers, type, xxTree[branch], i+1);\n            } else {\n              isolatedBranch = {};\n              isolatedBranch[branch] = xxTree[branch];\n              searchListenerTree(handlers, type, { '**': isolatedBranch }, i+1);\n            }\n          }\n        }\n      } else if(xxTree._listeners) {\n        // We have reached the end and still on a '**'\n        searchListenerTree(handlers, type, xxTree, typeLength);\n      } else if(xxTree['*'] && xxTree['*']._listeners) {\n        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n      }\n    }\n\n    return listeners;\n  }\n\n  function growListenerTree(type, listener) {\n\n    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n    //\n    // Looks for two consecutive '**', if so, don't add the event at all.\n    //\n    for(var i = 0, len = type.length; i+1 < len; i++) {\n      if(type[i] === '**' && type[i+1] === '**') {\n        return;\n      }\n    }\n\n    var tree = this.listenerTree;\n    var name = type.shift();\n\n    while (name) {\n\n      if (!tree[name]) {\n        tree[name] = {};\n      }\n\n      tree = tree[name];\n\n      if (type.length === 0) {\n\n        if (!tree._listeners) {\n          tree._listeners = listener;\n        }\n        else if(typeof tree._listeners === 'function') {\n          tree._listeners = [tree._listeners, listener];\n        }\n        else if (isArray(tree._listeners)) {\n\n          tree._listeners.push(listener);\n\n          if (!tree._listeners.warned) {\n\n            var m = defaultMaxListeners;\n\n            if (typeof this._events.maxListeners !== 'undefined') {\n              m = this._events.maxListeners;\n            }\n\n            if (m > 0 && tree._listeners.length > m) {\n\n              tree._listeners.warned = true;\n              console.error('(node) warning: possible EventEmitter memory ' +\n                            'leak detected. %d listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit.',\n                            tree._listeners.length);\n              console.trace();\n            }\n          }\n        }\n        return true;\n      }\n      name = type.shift();\n    }\n    return true;\n  }\n\n  // By default EventEmitters will print a warning if more than\n  // 10 listeners are added to it. This is a useful default which\n  // helps finding memory leaks.\n  //\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n\n  EventEmitter.prototype.delimiter = '.';\n\n  EventEmitter.prototype.setMaxListeners = function(n) {\n    this._events || init.call(this);\n    this._events.maxListeners = n;\n    if (!this._conf) this._conf = {};\n    this._conf.maxListeners = n;\n  };\n\n  EventEmitter.prototype.event = '';\n\n  EventEmitter.prototype.once = function(event, fn) {\n    this.many(event, 1, fn);\n    return this;\n  };\n\n  EventEmitter.prototype.many = function(event, ttl, fn) {\n    var self = this;\n\n    if (typeof fn !== 'function') {\n      throw new Error('many only accepts instances of Function');\n    }\n\n    function listener() {\n      if (--ttl === 0) {\n        self.off(event, listener);\n      }\n      fn.apply(this, arguments);\n    }\n\n    listener._origin = fn;\n\n    this.on(event, listener);\n\n    return self;\n  };\n\n  EventEmitter.prototype.emit = function() {\n\n    this._events || init.call(this);\n\n    var type = arguments[0];\n\n    if (type === 'newListener' && !this.newListener) {\n      if (!this._events.newListener) { return false; }\n    }\n\n    // Loop through the *_all* functions and invoke them.\n    if (this._all) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n      for (i = 0, l = this._all.length; i < l; i++) {\n        this.event = type;\n        this._all[i].apply(this, args);\n      }\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (type === 'error') {\n\n      if (!this._all &&\n        !this._events.error &&\n        !(this.wildcard && this.listenerTree.error)) {\n\n        if (arguments[1] instanceof Error) {\n          throw arguments[1]; // Unhandled 'error' event\n        } else {\n          throw new Error(\"Uncaught, unspecified 'error' event.\");\n        }\n        return false;\n      }\n    }\n\n    var handler;\n\n    if(this.wildcard) {\n      handler = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n    }\n    else {\n      handler = this._events[type];\n    }\n\n    if (typeof handler === 'function') {\n      this.event = type;\n      if (arguments.length === 1) {\n        handler.call(this);\n      }\n      else if (arguments.length > 1)\n        switch (arguments.length) {\n          case 2:\n            handler.call(this, arguments[1]);\n            break;\n          case 3:\n            handler.call(this, arguments[1], arguments[2]);\n            break;\n          // slower\n          default:\n            var l = arguments.length;\n            var args = new Array(l - 1);\n            for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n            handler.apply(this, args);\n        }\n      return true;\n    }\n    else if (handler) {\n      var l = arguments.length;\n      var args = new Array(l - 1);\n      for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\n      var listeners = handler.slice();\n      for (var i = 0, l = listeners.length; i < l; i++) {\n        this.event = type;\n        listeners[i].apply(this, args);\n      }\n      return (listeners.length > 0) || !!this._all;\n    }\n    else {\n      return !!this._all;\n    }\n\n  };\n\n  EventEmitter.prototype.on = function(type, listener) {\n\n    if (typeof type === 'function') {\n      this.onAny(type);\n      return this;\n    }\n\n    if (typeof listener !== 'function') {\n      throw new Error('on only accepts instances of Function');\n    }\n    this._events || init.call(this);\n\n    // To avoid recursion in the case that type == \"newListeners\"! Before\n    // adding it to the listeners, first emit \"newListeners\".\n    this.emit('newListener', type, listener);\n\n    if(this.wildcard) {\n      growListenerTree.call(this, type, listener);\n      return this;\n    }\n\n    if (!this._events[type]) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      this._events[type] = listener;\n    }\n    else if(typeof this._events[type] === 'function') {\n      // Adding the second element, need to change to array.\n      this._events[type] = [this._events[type], listener];\n    }\n    else if (isArray(this._events[type])) {\n      // If we've already got an array, just append.\n      this._events[type].push(listener);\n\n      // Check for listener leak\n      if (!this._events[type].warned) {\n\n        var m = defaultMaxListeners;\n\n        if (typeof this._events.maxListeners !== 'undefined') {\n          m = this._events.maxListeners;\n        }\n\n        if (m > 0 && this._events[type].length > m) {\n\n          this._events[type].warned = true;\n          console.error('(node) warning: possible EventEmitter memory ' +\n                        'leak detected. %d listeners added. ' +\n                        'Use emitter.setMaxListeners() to increase limit.',\n                        this._events[type].length);\n          console.trace();\n        }\n      }\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.onAny = function(fn) {\n\n    if (typeof fn !== 'function') {\n      throw new Error('onAny only accepts instances of Function');\n    }\n\n    if(!this._all) {\n      this._all = [];\n    }\n\n    // Add the function to the event listener collection.\n    this._all.push(fn);\n    return this;\n  };\n\n  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n  EventEmitter.prototype.off = function(type, listener) {\n    if (typeof listener !== 'function') {\n      throw new Error('removeListener only takes instances of Function');\n    }\n\n    var handlers,leafs=[];\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n    }\n    else {\n      // does not use listeners(), so no side effect of creating _events[type]\n      if (!this._events[type]) return this;\n      handlers = this._events[type];\n      leafs.push({_listeners:handlers});\n    }\n\n    for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n      var leaf = leafs[iLeaf];\n      handlers = leaf._listeners;\n      if (isArray(handlers)) {\n\n        var position = -1;\n\n        for (var i = 0, length = handlers.length; i < length; i++) {\n          if (handlers[i] === listener ||\n            (handlers[i].listener && handlers[i].listener === listener) ||\n            (handlers[i]._origin && handlers[i]._origin === listener)) {\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0) {\n          continue;\n        }\n\n        if(this.wildcard) {\n          leaf._listeners.splice(position, 1);\n        }\n        else {\n          this._events[type].splice(position, 1);\n        }\n\n        if (handlers.length === 0) {\n          if(this.wildcard) {\n            delete leaf._listeners;\n          }\n          else {\n            delete this._events[type];\n          }\n        }\n        return this;\n      }\n      else if (handlers === listener ||\n        (handlers.listener && handlers.listener === listener) ||\n        (handlers._origin && handlers._origin === listener)) {\n        if(this.wildcard) {\n          delete leaf._listeners;\n        }\n        else {\n          delete this._events[type];\n        }\n      }\n    }\n\n    return this;\n  };\n\n  EventEmitter.prototype.offAny = function(fn) {\n    var i = 0, l = 0, fns;\n    if (fn && this._all && this._all.length > 0) {\n      fns = this._all;\n      for(i = 0, l = fns.length; i < l; i++) {\n        if(fn === fns[i]) {\n          fns.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._all = [];\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n  EventEmitter.prototype.removeAllListeners = function(type) {\n    if (arguments.length === 0) {\n      !this._events || init.call(this);\n      return this;\n    }\n\n    if(this.wildcard) {\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n      for (var iLeaf=0; iLeaf<leafs.length; iLeaf++) {\n        var leaf = leafs[iLeaf];\n        leaf._listeners = null;\n      }\n    }\n    else {\n      if (!this._events[type]) return this;\n      this._events[type] = null;\n    }\n    return this;\n  };\n\n  EventEmitter.prototype.listeners = function(type) {\n    if(this.wildcard) {\n      var handlers = [];\n      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n      return handlers;\n    }\n\n    this._events || init.call(this);\n\n    if (!this._events[type]) this._events[type] = [];\n    if (!isArray(this._events[type])) {\n      this._events[type] = [this._events[type]];\n    }\n    return this._events[type];\n  };\n\n  EventEmitter.prototype.listenersAny = function() {\n\n    if(this._all) {\n      return this._all;\n    }\n    else {\n      return [];\n    }\n\n  };\n\n  if (typeof define === 'function' && define.amd) {\n     // AMD. Register as an anonymous module.\n    define(function() {\n      return EventEmitter;\n    });\n  } else if (typeof exports === 'object') {\n    // CommonJS\n    exports.EventEmitter2 = EventEmitter;\n  }\n  else {\n    // Browser global.\n    window.EventEmitter2 = EventEmitter;\n  }\n}();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/eventemitter2/lib/eventemitter2.js\n ** module id = 6\n ** module chunks = 0 1\n **/","module.exports = {Promise: window['Promise']}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/polyfills/es6-promise.js\n ** module id = 7\n ** module chunks = 0 1\n **/","/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            this.q = [];\n            this.add = function(ev) {\n                this.q.push(ev);\n            };\n\n            var i, j;\n            this.call = function() {\n                for (i = 0, j = this.q.length; i < j; i++) {\n                    this.q[i].call();\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {String}      prop\n         * @returns {String|Number}\n         */\n        function getComputedStyle(element, prop) {\n            if (element.currentStyle) {\n                return element.currentStyle[prop];\n            } else if (window.getComputedStyle) {\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\n            } else {\n                return element.style[prop];\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element.resizedAttached) {\n                element.resizedAttached = new EventQueue();\n                element.resizedAttached.add(resized);\n            } else if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var shrinkChild = shrink.childNodes[0];\n\n            var lastWidth, lastHeight;\n\n            var reset = function() {\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\n                expand.scrollLeft = expand.scrollWidth;\n                expand.scrollTop = expand.scrollHeight;\n                shrink.scrollLeft = shrink.scrollWidth;\n                shrink.scrollTop = shrink.scrollHeight;\n                lastWidth = element.offsetWidth;\n                lastHeight = element.offsetHeight;\n            };\n\n            reset();\n\n            var changed = function() {\n                if (element.resizedAttached) {\n                    element.resizedAttached.call();\n                }\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            var onScroll = function() {\n              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                  changed();\n              }\n              reset();\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n        }\n\n        var elementType = Object.prototype.toString.call(element);\n        var isCollectionTyped = ('[object Array]' === elementType\n            || ('[object NodeList]' === elementType)\n            || ('[object HTMLCollection]' === elementType)\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\n        );\n\n        if (isCollectionTyped) {\n            var i = 0, j = element.length;\n            for (; i < j; i++) {\n                attachResizeEvent(element[i], callback);\n            }\n        } else {\n            attachResizeEvent(element, callback);\n        }\n\n        this.detach = function() {\n            if (isCollectionTyped) {\n                var i = 0, j = element.length;\n                for (; i < j; i++) {\n                    ResizeSensor.detach(element[i]);\n                }\n            } else {\n                ResizeSensor.detach(element);\n            }\n        };\n    };\n\n    ResizeSensor.detach = function(element) {\n        if (element.resizeSensor) {\n            element.removeChild(element.resizeSensor);\n            delete element.resizeSensor;\n            delete element.resizedAttached;\n        }\n    };\n\n    // make available to common module loader\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = ResizeSensor;\n    }\n    else {\n        window.ResizeSensor = ResizeSensor;\n    }\n\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-element-queries/src/ResizeSensor.js\n ** module id = 8\n ** module chunks = 0 1\n **/","\nimport { ChartPlugin } from './Plugin';\nimport { Trend } from \"./Trend\";\nimport Vector3 = THREE.Vector3;\nimport PerspectiveCamera = THREE.PerspectiveCamera;\nimport Scene = THREE.Scene;\nimport Renderer = THREE.Renderer;\nimport WebGLRenderer = THREE.WebGLRenderer;\nimport Object3D = THREE.Object3D;\nimport { Chart, IChartState } from \"./Chart\";\nimport { ChartWidget, IChartWidgetConstructor } from \"./Widget\";\nimport { Utils } from \"./Utils\";\nimport { IScreenTransformOptions } from \"./Screen\";\nimport { AxisWidget } from \"./widgets/AxisWidget\";\nimport { GridWidget } from \"./widgets/GridWidget\";\nimport { TrendsGradientWidget } from \"./widgets/TrendsGradientWidget\";\nimport { TrendsLineWidget } from \"./widgets/TrendsLineWidget\";\nimport { TrendsCandlesWidget } from './widgets/TrendsCandleWidget';\nimport { ResizeSensor, ResizeSensorType } from './deps';\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {ChartColor} from \"./Color\";\nimport { AxisMarksWidget } from \"./widgets/AxisMarksWidget\";\n\n\nexport class ChartBlankView {\n\n\tstatic devicePixelRatio = window.devicePixelRatio;\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [];\n\tstatic renderers: {[rendererName: string]: any} = {\n\t\tCanvasRenderer: (THREE as any).CanvasRenderer,\n\t\tWebGLRenderer: THREE.WebGLRenderer\n\t};\n\n\tchart: Chart;\n\tisStopped: boolean;\n\tisDestroyed: boolean;\n\tprivate $container: Element;\n\tprivate $el: HTMLElement;\n\tprivate renderer: Renderer;\n\tprivate scene: Scene;\n\tprivate camera: PerspectiveCamera;\n\tprivate cameraInitialPosition: Vector3;\n\tprivate widgets: Array<ChartWidget> = [];\n\tprivate stats: Stats;\n\tprivate zoomThrottled: Function;\n\tprivate unsubscribers: Function[];\n\tprivate resizeSensor: ResizeSensorType;\n\tprivate pluginsAndWidgets: Array<ChartPlugin | ChartWidget>;\n\n\tconstructor(state: IChartState, $container: Element, pluginsAndWidgets: Array<ChartPlugin | ChartWidget> = []) {\n\n\t\tif (!THREE || !THREE.REVISION) Utils.error('three.js not found');\n\n\t\tif (!$container) {\n\t\t\tUtils.error('$el must be set');\n\t\t}\n\t\t// calculate state size\n\t\tlet style = getComputedStyle($container);\n\t\tstate.width = parseInt(style.width);\n\t\tstate.height = parseInt(style.height);\n\n\t\tlet plugins = pluginsAndWidgets.filter(pluginOrWidget => pluginOrWidget instanceof ChartPlugin) as ChartPlugin[];\n\n\t\tthis.chart = new Chart(state, plugins);\n\t\tthis.pluginsAndWidgets = pluginsAndWidgets;\n\t\tthis.zoomThrottled = Utils.throttle((zoomValue: number, origin: number) => this.zoom(zoomValue, origin), 200);\n\t\tthis.$container = $container;\n\t\tthis.init($container);\n\t};\n\n\tprivate init($container: Element) {\n\t\tvar chart = this.chart;\n\t\tvar {width: w, height: h, showStats, autoRender} = chart.state;\n\t\tthis.scene = new THREE.Scene();\n\t\tthis.isStopped = !autoRender.enabled;\n\n\t\tvar renderer = this.renderer = new (ChartView.renderers[this.chart.state.renderer] as any)({\n\t\t\tantialias: true,\n\t\t\talpha: true\n\t\t});\n\t\tlet backgroundColor = new ChartColor(chart.state.backgroundColor);\n\t\trenderer.setSize(w, h);\n\t\trenderer.setPixelRatio(ChartView.devicePixelRatio);\n\t\trenderer.setClearColor(backgroundColor.value, backgroundColor.a);\n\t\t$container.appendChild(renderer.domElement);\n\t\tthis.$el = renderer.domElement;\n\t\tthis.$el.style.display = 'block';\n\n\t\tif (showStats) {\n\t\t\tthis.stats = new Stats();\n\t\t\t$container.appendChild(this.stats.domElement);\n\t\t}\n\n\t\tthis.setupCamera();\n\t\tthis.initWidgets();\n\t\tthis.bindEvents();\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * collect and init widgets from preinstalled widgets, plugins widgets and custom widgets\n\t */\n\tprivate initWidgets() {\n\t\tlet preinstalledWidgetsClasses = (this.constructor as typeof ChartView).preinstalledWidgets.slice();\n\t\tlet customWidgets: ChartWidget[] = [];\n\n\t\tthis.pluginsAndWidgets.forEach(pluginOrWidget => {\n\t\t\tif (pluginOrWidget instanceof ChartWidget) {\n\t\t\t\tcustomWidgets.push(pluginOrWidget);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!(pluginOrWidget instanceof ChartPlugin)) return;\n\t\t\tlet pluginWidgetClasses = (pluginOrWidget.constructor as typeof ChartPlugin).providedWidgets;\n\t\t\tpreinstalledWidgetsClasses.push(...pluginWidgetClasses);\n\t\t});\n\n\t\tthis.widgets = customWidgets.concat(\n\t\t\tpreinstalledWidgetsClasses.map((WidgetClass: IChartWidgetConstructor) => new WidgetClass())\n\t\t);\n\n\t\tthis.widgets.forEach(widget => {\n\t\t\twidget.setupChart(this.chart);\n\t\t\twidget.onReadyHandler();\n\t\t\tthis.scene.add(widget.getObject3D());\n\t\t});\n\t}\n\n\tprivate renderLoop() {\n\t\tif (this.isDestroyed) return;\n\t\tthis.stats && this.stats.begin();\n\t\tthis.render();\n\t\tif (this.isStopped) return;\n\t\tvar fpsLimit = this.chart.state.autoRender.fps;\n\n\t\tif (fpsLimit) {\n\t\t\tlet delay = 1000 / fpsLimit;\n\t\t\tsetTimeout(() => requestAnimationFrame(() => this.renderLoop()), delay);\n\t\t} else {\n\t\t\trequestAnimationFrame(() => this.renderLoop());\n\t\t}\n\t\tthis.stats && this.stats.end();\n\t}\n\n\trender() {\n\t\tthis.chart.render();\n\t\tthis.renderer.render(this.scene, this.camera);\n\t}\n\n\tstop() {\n\t\tthis.isStopped = true;\n\t}\n\n\trun() {\n\t\tthis.isStopped = false;\n\t\tthis.renderLoop();\n\t}\n\n\t/**\n\t * call to destroy state an init garbage collection\n\t */\n\tdestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.stop();\n\t\tthis.chart.destroy();\n\t\tthis.unbindEvents();\n\t\t// WARNING! undocumented method for free webgl context\n\t\ttry {\n\t\t\t(this.renderer as any).forceContextLoss();\n\t\t} catch (wtf) {\n\t\t\t// sometimes with many state instances forceContextLoss not working\n\t\t}\n\t\t(this.renderer as any).context = null;\n\t\tthis.renderer.domElement = null;\n\t\tthis.renderer = null;\n\t}\n\n\tgetState(): IChartState {\n\t\treturn this.chart.state\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.getTrend\n\t */\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.chart.getTrend(trendName);\n\t}\n\n\t/**\n\t * shortcut for ChartView.state.setState\n\t */\n\tsetState(state: IChartState) {\n\t\treturn this.chart.setState(state);\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar $el = this.$el;\n\t\tif (this.chart.state.controls.enabled) {\n\t\t\t$el.addEventListener('mousewheel', (ev: MouseWheelEvent) => {\n\t\t\t\tthis.onMouseWheel(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousemove', (ev: MouseEvent) => {\n\t\t\t\tthis.onMouseMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('mousedown', (ev: MouseEvent) => this.onMouseDown(ev));\n\t\t\t$el.addEventListener('mouseup', (ev: MouseEvent) => this.onMouseUp(ev));\n\t\t\t$el.addEventListener('touchmove', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchMove(ev)\n\t\t\t});\n\t\t\t$el.addEventListener('touchend', (ev: TouchEvent) => {\n\t\t\t\tthis.onTouchEnd(ev)\n\t\t\t});\n\t\t}\n\t\tif (this.chart.state.autoResize) {\n\t\t\tthis.resizeSensor = new ResizeSensor(this.$container, () => {\n\t\t\t\tthis.onChartContainerResizeHandler(this.$container.clientWidth, this.$container.clientHeight);\n\t\t\t});\n\t\t}\n\n\t\tthis.unsubscribers = [\n\t\t\tthis.chart.onTrendsChange(() => this.autoscroll()),\n\t\t\tthis.chart.screen.onTransformationFrame((options) => this.onScreenTransformHandler(options)),\n\t\t\tthis.chart.onResize((options) => this.onChartResize())\n\t\t];\n\t}\n\n\tprivate unbindEvents() {\n\t\t// TODO: unbind events correctly\n\t\ttry {\n\t\t\tthis.resizeSensor && this.resizeSensor.detach();\n\t\t} catch (e) {\n\t\t\t// ups.. somebody already removed resizeSensor childNode\n\t\t\t// detected in angular2 apps\n\t\t}\n\t\tthis.$el.remove();\n\t\tthis.unsubscribers.forEach(unsubscribe => unsubscribe());\n\t}\n\n\tprivate setupCamera() {\n\t\tlet camSettings = this.chart.screen.getCameraSettings();\n\t\tif (!this.camera) {\n\t\t\tthis.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t\t\tthis.scene.add(this.camera);\n\t\t} else {\n\t\t\tthis.camera.fov = camSettings.FOV;\n\t\t\tthis.camera.aspect = camSettings.aspect;\n\t\t\tthis.camera.far = camSettings.far;\n\t\t\tthis.camera.near = camSettings.near;\n\t\t\tthis.camera.updateProjectionMatrix();\n\t\t}\n\t\tthis.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t\tthis.cameraInitialPosition = this.camera.position.clone();\n\t\tthis.onScreenTransformHandler(this.chart.screen.options);\n\t}\n\n\tprivate onScreenTransformHandler(options: IScreenTransformOptions) {\n\t\tif (options.scrollX != void 0) {\n\t\t\tlet scrollX = this.cameraInitialPosition.x + options.scrollX;\n\t\t\t// scrollX =  Math.round(scrollX); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setX(scrollX);\n\t\t}\n\t\tif (options.scrollY != void 0) {\n\t\t\tlet scrollY = this.cameraInitialPosition.y + options.scrollY;\n\t\t\t// scrollY = Math.round(scrollY); // prevent to set camera beetween pixels\n\t\t\tthis.camera.position.setY(scrollY);\n\t\t}\n\t}\n\n\tprivate autoscroll() {\n\t\tvar state = this.chart;\n\t\tif (!state.state.autoScroll) return;\n\t\tvar oldTrendsMaxX = state.state.prevState.computedData.trends.maxXVal;\n\t\tvar trendsMaxXDelta = state.state.computedData.trends.maxXVal - oldTrendsMaxX;\n\t\tif (trendsMaxXDelta > 0) {\n\t\t\tvar maxVisibleX = this.chart.screen.getScreenRightVal();\n\t\t\tvar paddingRightX = this.chart.getPaddingRight();\n\t\t\tvar currentScroll = state.state.xAxis.range.scroll;\n\t\t\tif (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar scrollDelta = trendsMaxXDelta;\n\t\t\tthis.setState({xAxis: {range: {scroll: currentScroll + scrollDelta}}});\n\t\t}\n\t}\n\n\tprivate onScrollStop() {\n\t\t// var tendsXMax = this.state.state.computedData.trends.maxX;\n\t\t// var paddingRightX = this.state.getPaddingRight();\n\t\t// if (tendsXMax < paddingRightX) {\n\t\t// \tthis.state.scrollToEnd();\n\t\t// }\n\t}\n\n\tprivate onMouseDown(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t}\n\n\tprivate onMouseUp(ev: MouseEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onMouseMove(ev: MouseEvent) {\n\t\tif (this.chart.state.cursor.dragMode) {\n\t\t\tthis.setState({cursor: {dragMode: true, x: ev.clientX, y: ev.clientY}});\n\t\t}\n\t}\n\n\tprivate onMouseWheel(ev: MouseWheelEvent) {\n\t\tev.stopPropagation();\n\t\tev.preventDefault();\n\t\tlet zoomOrigin = ev.layerX / this.chart.state.width;\n\t\tlet zoomValue = 1 + ev.wheelDeltaY * 0.001;\n\t\tthis.zoom(zoomValue, zoomOrigin);\n\t}\n\n\tprivate onTouchMove(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: true, x: ev.touches[0].clientX, y: ev.touches[0].clientY}});\n\t}\n\n\tprivate onTouchEnd(ev: TouchEvent) {\n\t\tthis.setState({cursor: {dragMode: false}});\n\t}\n\n\tprivate onChartContainerResizeHandler(width: number, height: number) {\n\t\tthis.setState({width, height});\n\t}\n\n\tprivate onChartResize() {\n\t\tlet {width, height} = this.chart.state;\n\t\tthis.renderer.setSize(width, height);\n\t\tthis.setupCamera();\n\t}\n\n\tprivate zoom(zoomValue: number, zoomOrigin: number) {\n\t\tconst MAX_ZOOM_VALUE = 1.5;\n\t\tconst MIN_ZOOM_VALUE = 0.7;\n\t\tzoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t\tzoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t\tlet autoScrollIsEnabled = this.chart.state.autoScroll;\n\t\tif (autoScrollIsEnabled) this.chart.setState({autoScroll: false});\n\t\tthis.chart.zoom(zoomValue, zoomOrigin).then(() => {\n\t\t\tif (autoScrollIsEnabled) this.setState({autoScroll: true});\n\t\t});\n\t}\n\n\n}\n\n\nexport class ChartView extends ChartBlankView {\n\tstatic preinstalledWidgets: typeof ChartWidget[] = [\n\t\tTrendsLineWidget,\n\t\tTrendsCandlesWidget,\n\t\tAxisWidget,\n\t\tGridWidget,\n\t\tTrendsGradientWidget,\n\t\t// TODO: remove AxisMarksWidget from preinstalled widgets\n\t\tAxisMarksWidget\n\t]\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/ChartView.ts\n **/","import { Chart, IChartState } from \"./Chart\";\nimport { Utils } from './Utils';\nimport { EventEmitter } from './EventEmmiter';\nimport { ChartWidget } from './Widget';\n\nexport interface IChartPluginState {\n}\n\nexport interface IChartPluginConfig {\n\tinstallPluginWidgets?: boolean;\n}\n\nexport const DEFAULT_CONFIG: IChartPluginConfig = {\n\tinstallPluginWidgets: true\n};\n\n/**\n * base class for all plugins\n * NAME is mandatory\n */\nexport abstract class ChartPlugin {\n\tstatic NAME: string = '';\n\tstatic providedWidgets: typeof ChartWidget[] = [];\n\n\tinitialState: IChartPluginState;\n\tconfig: IChartPluginConfig;\n\tname: string;\n\tprotected chart: Chart;\n\tprotected unsubscribers: Function[] = [];\n\tprotected ee: EventEmitter;\n\n\tconstructor (options?: IChartPluginState, config: IChartPluginConfig = {}) {\n\t\tthis.initialState = options;\n\t\tthis.config = Utils.deepMerge(DEFAULT_CONFIG, config);\n\t\tthis.name = (this.constructor as typeof ChartPlugin).NAME;\n\t\tif (!this.name) Utils.error('Unnamed plugin detected');\n\t}\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvent(\n\t\t\tthis.chart.onInitialStateApplied(initialState => this.onInitialStateAppliedHandler(initialState)),\n\t\t\tthis.chart.onReady(() => this.onReadyHandler()),\n\t\t\tthis.chart.onDestroy(() => this.onDestroyHandler()),\n\t\t\tthis.chart.onPluginsStateChange(changedPluginsStates => changedPluginsStates[this.name] && this.onStateChanged(changedPluginsStates[this.name]))\n\t\t)\n\t}\n\n\tgetOptions(): IChartPluginState {\n\t\treturn this.chart.state.pluginsState[this.name];\n\t}\n\n\tprotected onInitialStateAppliedHandler(initialState: IChartState) {\n\t}\n\n\tprotected onReadyHandler() {\n\t}\n\n\tprotected onStateChanged(changedState: IChartPluginState) {\n\t}\n\n\tprotected onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t}\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unsubscribers: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunsubscribers.push(args[0] as Function);\n\t\t} else {\n\t\t\tunsubscribers.push(...args as Function[]);\n\t\t}\n\t\tthis.unsubscribers.push(...unsubscribers);\n\t}\n\n\n\tprotected unbindEvents() {\n\t\tthis.unsubscribers.forEach(unsubscriber => unsubscriber());\n\t\tthis.unsubscribers.length = 0;\n\t}\n}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Plugin.ts\n **/","import Texture = THREE.Texture;\nimport Color = THREE.Color;\nimport { TIteralable, IIteralable } from \"./interfaces\";\nimport { isPlainObject } from './deps/deps';\n\nfunction deepmerge(target: any, src: any, mergeArrays = true) {\n\tvar array = Array.isArray(src);\n\tvar dst: any = array && [] || {};\n\n\tif (array) {\n\t\ttarget = target || [];\n\t\tif (mergeArrays) {\n\t\t\tdst = dst.concat(target);\n\t\t}\n\t\tsrc.forEach(function(e: any, i: any) {\n\t\t\tif (typeof dst[i] === 'undefined') {\n\t\t\t\tdst[i] = e;\n\t\t\t} else if (typeof e === 'object') {\n\t\t\t\tdst[i] = deepmerge(target[i], e, mergeArrays);\n\t\t\t} else {\n\t\t\t\tif (target.indexOf(e) === -1) {\n\t\t\t\t\tdst.push(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tif (target && typeof target === 'object') {\n\t\t\tObject.keys(target).forEach(function (key) {\n\t\t\t\tdst[key] = target[key];\n\t\t\t})\n\t\t}\n\t\tObject.keys(src).forEach(function (key) {\n\t\t\tif (typeof src[key] !== 'object' || !src[key]) {\n\t\t\t\tdst[key] = src[key];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!target[key]) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t} else {\n\t\t\t\t\tdst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\treturn dst;\n}\n\n\n\nexport declare type TUid = number;\n\n/**\n * project utils static class\n */\nexport class Utils {\n\n\tprivate static currentId: TUid = 1;\n\n\t/**\n\t * deepMerge based on https://www.npmjs.com/package/deepmerge\n\t */\n\tstatic deepMerge<T> (obj1: T, obj2: T, mergeArrays?: boolean) {\n\t\treturn deepmerge(obj1, obj2, mergeArrays) as T;\n\t}\n\n\t/**\n\t * deepCopy based on JSON.stringify function\n\t * @deprecated\n\t */\n\tstatic deepCopy<T> (obj: T) {\n\t\t// TODO: use deepMerge function to copy\n\t\treturn JSON.parse(JSON.stringify(obj)) as T;\n\t}\n\n\t/**\n\t *\n\t * @example\n\t * // returns \"000015\"\n\t * Utils.toFixed(15, 6);\n\t */\n\tstatic toFixed(num: number, digitsCount: number): string {\n\t\tvar maxDigits = 15;\n\t\tvar result = '';\n\t\tvar intVal = Math.floor(num);\n\t\tvar intStr = intVal.toString();\n\t\tvar lengthDiff = digitsCount - intStr.length;\n\t\tif (lengthDiff > 0 ) {\n\t\t\tresult = (<any>'0').repeat(lengthDiff) + intStr;\n\t\t} else {\n\t\t\tresult = intStr;\n\t\t}\n\t\tvar afterPointDigitsCount = maxDigits - intStr.length;\n\t\tvar afterPointStr = num.toString().split('.')[1];\n\t\tif (afterPointStr) {\n\t\t\tresult += '.' + afterPointStr.substr(0, afterPointDigitsCount);\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic bindEvent() {\n\n\t}\n\n\t/**\n\t * generate texture from canvas context\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture {\n\t\tvar canvas: HTMLCanvasElement = document.createElement('canvas');\n\t\tcanvas.width = width;\n\t\tcanvas.height = height;\n\t\tvar ctx = canvas.getContext('2d');\n\t\tfn(ctx);\n\t\tvar texture = new THREE.Texture(canvas);\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * generate texture from canvas context with NearestFilter\n\t * @example\n\t * \t// create texture with rect\n\t *  var texture = Utils.createTexture(20, 20, (ctx) => {ctx.fillRect(0, 0, 10, 10)});\n\t */\n\tstatic createPixelPerfectTexture(width: number, height: number, fn: (ctx: CanvasRenderingContext2D) => void ): Texture{\n\t\tvar texture = this.createTexture(width, height, fn);\n\t\t// texture.magFilter = THREE.NearestFilter;\n\t\ttexture.minFilter = THREE.NearestFilter;\n\t\treturn texture;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic error(msg: string) {\n\t\tconsole.error('Chart error: ' + msg);\n\t\tthrow 'Chart: ' + msg;\n\t}\n\n\t/**\n\t * throw error\n\t */\n\tstatic warn(msg: string) {\n\t\tconsole.warn('Chart warning: ' + msg);\n\t}\n\n\t/**\n\t * @returns new unique id\n\t */\n\tstatic getUid(): TUid {\n\t\treturn this.currentId++;\n\t}\n\n\t/**\n\t * @returns distance between numbers\n\t */\n\tstatic getDistance(num1: number, num2: number) {\n\t\treturn Math.max(num1, num2) - Math.min(num1, num2);\n\t}\n\n\tstatic binarySearchClosestInd(arr: IIteralable[], num: number, key: string): number {\n\t\tvar mid: number;\n\t\tvar lo = 0;\n\t\tvar hi = arr.length - 1;\n\t\twhile (hi - lo > 1) {\n\t\t\tmid = Math.floor ((lo + hi) / 2);\n\t\t\tif (arr[mid][key] < num) {\n\t\t\t\tlo = mid;\n\t\t\t} else {\n\t\t\t\thi = mid;\n\t\t\t}\n\t\t}\n\t\tif (num - arr[lo][key] <= arr[hi][key] - num) {\n\t\t\treturn lo;\n\t\t}\n\t\treturn hi;\n\t}\n\t\n\tstatic binarySearchClosest<ArrayItem>(arr: ArrayItem[], num: number, key: string): ArrayItem {\n\t\tlet ind = this.binarySearchClosestInd(arr, num, key);\n\t\treturn arr[ind];\n\t}\n\n\n\tstatic rectsIntersect(r1: number[], r2: number[]) {\n\t\tlet [left1, top1, width1, height1] = r1;\n\t\tlet [left2, top2, width2, height2] = r2;\n\t\tlet [right1, right2, bottom1, bottom2] = [left1 + width1, left2 + width2, top1 + height1, top2 + height2];\n\t\treturn !(left2 > right1 ||\n\t\t\tright2 < left1 ||\n\t\t\ttop2 > bottom1 ||\n\t\t\tbottom2 < top1\n\t\t);\n\t}\n\n\n\tstatic throttle(func: Function, ms: number) {\n\n\t\tvar isThrottled = false,\n\t\t\tsavedArgs: any,\n\t\t\tsavedThis: any;\n\n\t\tfunction wrapper() {\n\n\t\t\tif (isThrottled) { // (2)\n\t\t\t\tsavedArgs = arguments;\n\t\t\t\tsavedThis = this;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfunc.apply(this, arguments); // (1)\n\n\t\t\tisThrottled = true;\n\n\t\t\tsetTimeout(function () {\n\t\t\t\tisThrottled = false; // (3)\n\t\t\t\tif (savedArgs) {\n\t\t\t\t\twrapper.apply(savedThis, savedArgs);\n\t\t\t\t\tsavedArgs = savedThis = null;\n\t\t\t\t}\n\t\t\t}, ms);\n\t\t}\n\n\t\treturn wrapper;\n\t}\n\n\tstatic msToTimeString(timestamp: number) {\n\t\tvar h = Math.floor(timestamp / 360000);\n\t\tvar m =  Math.floor(timestamp / 60000);\n\t\tvar s =  Math.floor(timestamp / 1000);\n\t\treturn h + ':' + m + ':' + s;\n\t}\n\t\n\tstatic getRandomItem<T>(arr: Array<T>): T {\n\t\tvar ind = Math.floor(Math.random() * arr.length);\n\t\treturn arr[ind];\n\t}\n\n\tstatic copyProps(srcObject: TIteralable, dstObject: TIteralable, props: TIteralable, excludeProps: string[] = []) {\n\t\tfor (var key in props) {\n\t\t\tif (excludeProps.indexOf(key) !== -1) continue;\n\t\t\tif (srcObject[key] == void 0) continue;\n\t\t\tif (isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t\t\t\tthis.copyProps(srcObject[key], dstObject[key], props[key])\n\t\t\t} else {\n\t\t\t\tdstObject[key] = this.deepCopy(srcObject[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/Utils.ts\n **/","import {EE2} from './deps';\n\n/**\n * this class uses as proxy for EventEmitter2\n */\nexport class EventEmitter {\n\tprivate ee: EventEmitter2;\n\tconstructor() {\n\t\tthis.ee = new EE2();\n\t}\n\temit(eventName: string, ...args: any[]) {\n\t\tthis.ee.emit(eventName, ...args)\n\t}\n\ton(eventName: string, callback: Function) {\n\t\treturn this.ee.on(eventName, callback)\n\t}\n\toff(eventName: string, callback: Function) {\n\t\treturn this.ee.off(eventName, callback);\n\t}\n\tsubscribe(eventName: string, callback: Function): Function {\n\t\tthis.on(eventName, callback);\n\t\treturn () => this.off(eventName, callback);\n\t}\n\tsetMaxListeners(listenersCount: number) {\n\t\tthis.ee.setMaxListeners(listenersCount);\n\t}\n\tremoveAllListeners(eventName?: string) {\n\t\tthis.ee.removeAllListeners(eventName);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EventEmmiter.ts\n **/","export * from './deps'\n\n\n/** WEBPACK FOOTER **\n ** ./src/deps/index.ts\n **/","import Vector3 = THREE.Vector3;\nimport { ITrendOptions, Trend, ITrendData, TREND_TYPE } from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Utils} from './Utils';\nimport {TrendsManager, ITrendsOptions} from \"./TrendsManager\";\nimport {Screen} from \"./Screen\";\nimport {AxisMarks} from \"./AxisMarks\";\nimport {\n\tAXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions, IAnimationsOptions, AXIS_RANGE_TYPE\n} from \"./interfaces\";\nimport { Promise } from './deps/deps';\nimport { ChartPlugin } from './Plugin';\nimport {TChartColor} from \"./Color\";\nimport { AnimationManager } from \"./AnimationManager\";\nimport { EASING } from './Easing';\n\ninterface IRecalculatedStateResult {\n\tchangedProps: IChartState,\n\tpatch: IChartState\n}\n\nconst CHART_STATE_EVENTS = {\n\tINITIAL_STATE_APPLIED: 'initialStateApplied',\n\tREADY: 'ready',\n\tDESTROY: 'destroy',\n\tCHANGE: 'change',\n\tTREND_CHANGE: 'trendChange',\n\tTRENDS_CHANGE: 'trendsChange',\n\tZOOM: 'zoom',\n\tRESIZE: 'resize',\n\tSCROLL: 'scroll',\n\tSCROLL_STOP: 'scrollStop',\n\tPLUGINS_STATE_CHANGED: 'pluginsStateChanged'\n};\n\n/**\n * readonly computed state state\n * calculated after recalculateState() call\n * contains cached values\n */\nexport interface IChartStateComputedData {\n\ttrends?: {\n\t\tmaxXVal: number,\n\t\tminXVal: number\n\t}\n}\n\nexport interface IChartState {\n\tprevState?: IChartState,\n\twidth?: number;\n\theight?: number;\n\tzoom?: number;\n\txAxis?: IAxisOptions,\n\tyAxis?: IAxisOptions,\n\tanimations?: IAnimationsOptions,\n\ttrends?: ITrendsOptions,\n\ttrendDefaultState?: ITrendOptions;\n\tcursor?: {\n\t\tdragMode?: boolean,\n\t\tx?: number,\n\t\ty?: number\n\t},\n\n\t/**\n\t * use fps = 0 for no limits\n\t */\n\tautoRender?: {enabled?: boolean, fps?: number};\n\n\t/**\n\t * by default 'WebGLRenderer'\n\t * also available 'CanvasRenderer'\n\t */\n\trenderer?: 'WebGLRenderer' | 'CanvasRenderer';\n\tfont?: {s?: string, m?: string, l?:string}\n\n\n\t/**\n\t * buffer size for displayed segments\n\t * used by widgets\n\t */\n\tmaxVisibleSegments?: number;\n\tautoResize?: boolean;\n\tcontrols?: {enabled: boolean};\n\tautoScroll?: boolean;\n\n\t//TODO: exclude stats in plugin\n\tshowStats?: boolean;\n\tbackgroundColor?: TChartColor;\n\tcomputedData?: IChartStateComputedData,\n\tpluginsState?: {[pluginName: string]: any};\n\teventEmitterMaxListeners?: number;\n}\n\nconst LIGHT_BLUE = '#5273bd';\n\n/**\n *  all state changes caused only by Chart.setState method\n */\nexport class Chart {\n\n\tstate: IChartState = {\n\t\tprevState: {},\n\t\tzoom: 0,\n\t\txAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.ALL,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tscroll: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 0, end: 5},\n\t\t\t\tmargin: {start: 0, end: 5}\n\t\t\t},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tgrid: {enabled: true, minSizePx:  100, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tautoScroll: true,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tyAxis: {\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.RELATIVE_END,\n\t\t\t\tfrom: 0,\n\t\t\t\tto: 0,\n\t\t\t\tzoom: 1,\n\t\t\t\tpadding: {start: 5, end: 5},\n\t\t\t\tmargin: {start: 5, end: 5},\n\t\t\t},\n\t\t\tgrid: {enabled: true, minSizePx:  50, color: `rgba(${LIGHT_BLUE}, 0.12)`},\n\t\t\tdataType: AXIS_DATA_TYPE.NUMBER,\n\t\t\tmarks: [],\n\t\t\tcolor: LIGHT_BLUE\n\t\t},\n\t\tanimations: {\n\t\t\tenabled: true,\n\t\t\ttrendChangeSpeed: 0.5,\n\t\t\ttrendChangeEase: void 0,\n\t\t\tzoomSpeed: 250,\n\t\t\tscrollSpeed: 1000,\n\t\t\tscrollEase: EASING.Quadratic.Out,\n\t\t\tzoomEase: EASING.Quadratic.Out,\n\t\t\tautoScrollSpeed: 1000,\n\t\t\tautoScrollEase: EASING.Linear.None,\n\t\t},\n\t\tautoRender: {enabled: true, fps: 0},\n\t\tautoResize: true,\n\t\trenderer: 'WebGLRenderer',\n\t\tautoScroll: true,\n\t\tcontrols: {enabled: true},\n\t\ttrendDefaultState: {\n\t\t\tenabled: true,\n\t\t\ttype: TREND_TYPE.LINE,\n\t\t\tdata: [],\n\t\t\tmaxSegmentLength: 1000,\n\t\t\tlineWidth: 2,\n\t\t\tlineColor: 0xFFFFFF,\n\t\t\thasBackground: true,\n\t\t\tbackgroundColor: 'rgba(#FFFFFF, 0.07)',\n\t\t\thasBeacon: false,\n\t\t\tsettingsForTypes: {\n\t\t\t\tCANDLE: {\n\t\t\t\t\tminSegmentLengthInPx: 20,\n\t\t\t\t\tmaxSegmentLengthInPx: 40,\n\t\t\t\t},\n\t\t\t\tLINE: {\n\t\t\t\t\tminSegmentLengthInPx: 2,\n\t\t\t\t\tmaxSegmentLengthInPx: 10,\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcursor: {\n\t\t\tdragMode: false,\n\t\t\tx: 0,\n\t\t\ty: 0\n\t\t},\n\t\tfont: {\n\t\t\ts: '11px Arial',\n\t\t\tm: '12px Arial',\n\t\t\tl: '13px Arial'\n\t\t},\n\t\tbackgroundColor: 0x000c2a,\n\t\tshowStats: false,\n\t\tpluginsState: {},\n\t\teventEmitterMaxListeners: 20,\n\t\tmaxVisibleSegments: 1280\n\t};\n\tplugins: {[pluginName: string]: ChartPlugin} = {};\n\ttrendsManager: TrendsManager;\n\tanimationManager = new AnimationManager();\n\tscreen: Screen;\n\txAxisMarks: AxisMarks;\n\tyAxisMarks: AxisMarks;\n\n\t/**\n\t * true then state was initialized and ready to use\n\t */\n\tisReady = false;\n\tisDestroyed = false;\n\n\n\tprivate ee: EventEmitter;\n\n\tconstructor(\n\t\tinitialState: IChartState,\n\t\tplugins: ChartPlugin[] = []\n\t) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.state.eventEmitterMaxListeners);\n\n\t\tthis.state = Utils.deepMerge(this.state, initialState);\n\t\tthis.trendsManager = new TrendsManager(this, initialState);\n\t\tinitialState.trends = this.trendsManager.calculatedOptions;\n\t\tinitialState = this.installPlugins(plugins, initialState);\n\t\tthis.setState(initialState);\n\t\tthis.setState({computedData: this.getComputedData()});\n\t\tthis.savePrevState();\n\n\t\tthis.screen = new Screen(this);\n\t\tthis.xAxisMarks = new AxisMarks(this, AXIS_TYPE.X);\n\t\tthis.yAxisMarks = new AxisMarks(this, AXIS_TYPE.Y);\n\t\tthis.initListeners();\n\t\t\n\t\t// message to other modules that Chart.state is ready for use\n\t\tthis.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\n\t\t// message to other modules that Chart is ready for use\n\t\tthis.isReady = true;\n\t\tthis.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t}\n\n\t/**\n\t * destroy chart, use ChartView.destroy to completely destroy Chart\n\t */\n\tdestroy() {\n\t\tthis.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t\tthis.ee.removeAllListeners();\n\t\tthis.state = {};\n\t\tthis.isDestroyed = true;\n\t}\n\n\tonDestroy(cb: Function) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t}\n\n\tonInitialStateApplied(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t}\n\n\tonReady(cb: (initialState: IChartState) => void ): Function {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t}\n\n\tonChange(cb: (changedProps: IChartState) => void ) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t}\n\n\tonTrendChange(cb: (trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t}\n\n\tonTrendsChange(cb: (trendsOptions: ITrendsOptions) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t}\n\n\tonScrollStop(cb: () => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t}\n\n\tonScroll(cb: (scrollOptions: {deltaX: number}) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t}\n\n\tonZoom(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t}\n\n\tonResize(cb: (changedProps: IChartState) => void) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t}\n\n\tonPluginsStateChange(cb: (changedPluginsStates: {[pluginName: string]: Plugin}) => any) {\n\t\treturn this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t}\n\t\n\tgetTrend(trendName: string): Trend {\n\t\treturn this.trendsManager.getTrend(trendName);\n\t}\n\n\trender() {\n\t\tthis.animationManager.tick();\n\t}\n\n\tsetState(newState: IChartState, eventData?: any, silent = false) {\n\n\t\tif (this.isDestroyed) {\n\t\t\tUtils.error('You have tried to change state of destroyed Chart instance');\n\t\t}\n\n\t\tlet stateData = this.state as {[key: string]: any};\n\t\tlet newStateObj = newState as {[key: string]: any};\n\n\t\tvar changedProps: {[key: string]: any} = {};\n\t\tfor (let key in newStateObj) {\n\t\t\tif (stateData[key] !== newStateObj[key]) {\n\t\t\t\tchangedProps[key] = newStateObj[key] as any;\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(changedProps as IChartState);\n\n\n\t\t// temporary remove trends state from newState by performance reasons\n\t\tlet trendsData: {[trendName: string]: ITrendData} = {};\n\t\tif (newState.trends) for (let trendName in newState.trends) {\n\t\t\tlet trendOptions = newState.trends[trendName];\n\t\t\tif (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t\t\tdelete trendOptions.data;\n\t\t}\n\t\tlet newStateContainsData = Object.keys(trendsData).length > 0;\n\t\t\n\n\t\tthis.state = Utils.deepMerge(this.state, newState, false);\n\n\t\t// return state to state\n\t\tif (newStateContainsData) for (let trendName in trendsData) {\n\t\t\tthis.state.trends[trendName].data = trendsData[trendName];\n\t\t}\n\n\t\tif (silent) return;\n\n\t\t// recalculate all dynamic state props\n\t\tvar recalculateResult = this.recalculateState(changedProps);\n\t\tchangedProps = recalculateResult.changedProps;\n\t\t\n\t\tthis.emitChangedStateEvents(changedProps, eventData);\n\n\t}\n\n\t/**\n\t * recalculate all computed state props\n\t */\n\tprivate recalculateState(changedProps?: IChartState): IRecalculatedStateResult {\n\t\tvar data = this.state;\n\t\tvar patch: IChartState = {};\n\t\tvar actualData = Utils.deepMerge({}, data);\n\n\t\t// recalculate scroll position by changed cursor options\n\t\tvar cursorOptions = changedProps.cursor;\n\t\tvar isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t\tif (isMouseDrag) {\n\t\t\tvar oldX = data.prevState.cursor.x;\n\t\t\tvar currentX =  cursorOptions.x;\n\t\t\tvar currentScroll = data.xAxis.range.scroll;\n\t\t\tvar deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t\t\tpatch.xAxis = {range: {scroll: currentScroll + deltaXVal}};\n\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: patch.xAxis} as IChartState)\n\t\t}\n\n\t\tlet chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\n\t\tlet scrollXChanged = false;\n\t\tlet needToRecalculateXAxis = (\n\t\t\tisMouseDrag ||\n\t\t\tchartWasResized ||\n\t\t\t(changedProps.xAxis && (changedProps.xAxis.range)) ||\n\t\t\tthis.state.xAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateXAxis) {\n\t\t\tlet xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t\t\tif (xAxisPatch) {\n\t\t\t\tscrollXChanged = true;\n\t\t\t\tpatch = Utils.deepMerge(patch, {xAxis: xAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {xAxis: xAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\n\n\t\t// recalculate axis \"from\" and \"to\" for dynamics AXIS_RANGE_TYPE\n\t\tlet needToRecalculateYAxis = (\n\t\t\tchartWasResized ||\n\t\t\t(\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.RELATIVE_END ||\n\t\t\t\tdata.yAxis.range.type === AXIS_RANGE_TYPE.AUTO ||\n\t\t\t\tdata.yAxis.range.isMirrorMode\n\t\t\t) &&\n\t\t\t(scrollXChanged || changedProps.trends || changedProps.yAxis) ||\n\t\t\tthis.state.yAxis.range.zeroVal == void 0\n\t\t);\n\t\tif (needToRecalculateYAxis){\n\t\t\tlet yAxisPatch = this.recalculateYAxis(actualData);\n\t\t\tif (yAxisPatch) {\n\t\t\t\tpatch = Utils.deepMerge(patch, {yAxis: yAxisPatch});\n\t\t\t\tactualData = Utils.deepMerge(actualData, {yAxis: yAxisPatch} as IChartState);\n\t\t\t}\n\t\t}\n\n\t\tthis.savePrevState(patch);\n\t\tlet allChangedProps = Utils.deepMerge(changedProps, patch);\n\t\tpatch.computedData = this.getComputedData(allChangedProps);\n\t\tthis.savePrevState(patch);\n\t\tthis.state = Utils.deepMerge(this.state, patch);\n\t\treturn {changedProps: allChangedProps, patch: patch}\n\t}\n\n\tprivate getComputedData(changedProps?: IChartState): IChartStateComputedData {\n\t\tvar computeAll = !changedProps;\n\t\tvar computedData: IChartStateComputedData = {};\n\n\t\tif (computeAll || changedProps.trends && this.trendsManager) {\n\t\t\tcomputedData.trends = {\n\t\t\t\tmaxXVal: this.trendsManager.getEndXVal(),\n\t\t\t\tminXVal: this.trendsManager.getStartXVal()\n\t\t\t}\n\t\t}\n\t\treturn computedData;\n\t}\n\n\tprivate savePrevState(changedProps?: IChartState) {\n\t\tif (!changedProps) changedProps = this.state;\n\t\tvar prevState = this.state.prevState;\n\n\t\t// prevent to store prev trend state by performance reasons\n\t\tUtils.copyProps(this.state, prevState, changedProps, ['trends']);\n\n\t}\n\n\tprivate emitChangedStateEvents(changedProps: IChartState, eventData: any) {\n\t\tvar prevState = this.state.prevState;\n\n\t\t// emit common change event\n\t\tthis.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\n\t\t// emit event for each changed state property\n\t\tfor (let key in changedProps) {\n\t\t\tthis.ee.emit(key + 'Change', (changedProps as {[key: string]: any})[key], eventData);\n\t\t}\n\n\t\tif (!this.isReady) return;\n\n\t\t// emit special events based on changed state\n\t\tlet scrollStopEventNeeded = (\n\t\t\tchangedProps.cursor &&\n\t\t\tchangedProps.cursor.dragMode === false &&\n\t\t\tprevState.cursor.dragMode === true\n\t\t);\n\t\tscrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\n\t\tlet scrollChangeEventsNeeded = (\n\t\t\tchangedProps.xAxis &&\n\t\t\tchangedProps.xAxis.range &&\n\t\t\tchangedProps.xAxis.range.scroll !== void 0\n\t\t);\n\t\tscrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\n\t\tlet zoomEventsNeeded = (\n\t\t\t(changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom) ||\n\t\t\t(changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom)\n\t\t);\n\t\tzoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\n\t\tlet resizeEventNeeded = (changedProps.width || changedProps.height);\n\t\tresizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\n\t\tlet pluginStateChangedEventNeeded = !!(changedProps.pluginsState);\n\t\tpluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t}\n\n\n\t/**\n\t * init plugins and save plugins options in initialState\n\t */\n\tprivate installPlugins(plugins: ChartPlugin[], initialState: IChartState): IChartState {\n\t\tinitialState.pluginsState = {};\n\t\tplugins.forEach(plugin => {\n\t\t\tlet PluginClass = plugin.constructor as typeof ChartPlugin;\n\t\t\tlet pluginName = PluginClass.NAME;\n\t\t\tinitialState.pluginsState[pluginName] = Utils.deepMerge({}, plugin.initialState);\n\t\t\tthis.plugins[pluginName] = plugin;\n\t\t\tplugin.setupChart(this);\n\t\t});\n\t\treturn initialState;\n\t}\n\n\n\t/**\n\t * returns plugin instance by plugin name\n\t * @example\n\t */\n\tgetPlugin(pluginName: string): ChartPlugin {\n\t\treturn this.plugins[pluginName];\n\t}\n\n\n\tprivate initListeners() {\n\t\tthis.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, (changedTrends: ITrendsOptions, newData: ITrendData) => {\n\t\t\tthis.handleTrendsChange(changedTrends, newData)\n\t\t});\n\t\tthis.ee.on('animationsChange', (animationOptions: IAnimationsOptions) => {\n\t\t\tif (animationOptions.enabled !== this.animationManager.isAnimationsEnabled) {\n\t\t\t\tthis.animationManager.setAimationsEnabled(animationOptions.enabled);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handleTrendsChange(changedTrends: ITrendsOptions, newData: ITrendData) {\n\t\tfor (let trendName in changedTrends) {\n\t\t\tthis.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t\t}\n\t}\n\n\tprivate recalculateXAxis(actualData: IChartState, changedProps: IChartState): IAxisOptions {\n\t\tvar axisRange = actualData.xAxis.range;\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar isInitialize = axisRange.zeroVal == void 0;\n\t\tvar zeroVal: number, scaleFactor: number;\n\t\tvar zoom = axisRange.zoom;\n\n\t\tif (axisRange.isMirrorMode) {\n\t\t\tUtils.error('range.isMirrorMode available only for yAxis.range');\n\t\t}\n\n\t\tif (isInitialize) {\n\t\t\tzeroVal = axisRange.from;\n\t\t\tscaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t} else {\n\t\t\tzeroVal = axisRange.zeroVal;\n\t\t\tscaleFactor = axisRange.scaleFactor;\n\n\t\t\t// recalculate range.zoom and range.scroll then range.from or range.to was changed\n\t\t\tif (\n\t\t\t\tchangedProps.xAxis &&\n\t\t\t\t(changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)\n\t\t\t) {\n\t\t\t\tif (changedProps.xAxis.range.zoom) {\n\t\t\t\t\tUtils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t\t\t\t}\n\t\t\t\tlet currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t\t\t\tpatch.range.scroll = axisRange.from - zeroVal;\n\t\t\t\tpatch.range.zoom = currentScaleFactor / scaleFactor;\n\t\t\t\treturn patch;\n\t\t\t}\n\t\t}\n\n\n\t\t// recalculate range.from and range.to then range.zoom or range.scroll was changed\n\t\tdo {\n\t\t\tvar from = zeroVal + axisRange.scroll;\n\t\t\tvar to = from + actualData.width / (scaleFactor * zoom);\n\t\t\tvar rangeLength = to - from;\n\t\t\tvar needToRecalculateZoom = false;\n\t\t\tvar rangeMoreThenMaxValue = (axisRange.maxLength && rangeLength > axisRange.maxLength);\n\t\t\tvar rangeLessThenMinValue = (axisRange.minLength && rangeLength < axisRange.minLength);\n\t\t\tneedToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t\t\tif (needToRecalculateZoom) {\n\t\t\t\tvar fixScale = rangeLength > axisRange.maxLength ?\n\t\t\t\t\trangeLength / axisRange.maxLength :\n\t\t\t\t\trangeLength / axisRange.minLength;\n\t\t\t\tvar zoom = zoom * fixScale;\n\t\t\t\tpatch.range.zoom = zoom;\n\t\t\t}\n\t\t} while (needToRecalculateZoom);\n\n\t\tpatch.range.from = from;\n\t\tpatch.range.to = to;\n\t\treturn patch;\n\t}\n\n\n\tprivate recalculateYAxis(actualData: IChartState): IAxisOptions {\n\t\tvar patch: IAxisOptions = {range: {}};\n\t\tvar yAxisRange = actualData.yAxis.range;\n\t\tvar isInitialize = yAxisRange.scaleFactor == void 0;\n\t\tvar trends = this.trendsManager;\n\t\tvar trendsEndXVal = trends.getEndXVal();\n\t\tvar trendsStartXVal = trends.getStartXVal();\n\t\tvar xRange = actualData.xAxis.range;\n\t\tvar {from: xFrom, to: xTo} = xRange;\n\t\tvar xRangeLength = xTo - xFrom;\n\t\tvar zeroVal: number, scaleFactor: number, scroll: number, zoom: number, needToZoom: boolean;\n\n\t\t// check situation when state was scrolled behind trends end or before trends start\n\t\tif (xTo > trendsEndXVal) {\n\t\t\txTo = trendsEndXVal;\n\t\t\txFrom = xTo - xRangeLength;\n\t\t} else if (xFrom < trendsStartXVal) {\n\t\t\txFrom = trendsStartXVal;\n\t\t\txTo = xFrom + xRangeLength;\n\t\t}\n\n\t\tvar maxY = trends.getMaxYVal(xFrom, xTo);\n\t\tvar minY = trends.getMinYVal(xFrom, xTo);\n\n\t\tvar trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t\tif (yAxisRange.type == AXIS_RANGE_TYPE.RELATIVE_END) {\n\t\t\tif (trendLastY > maxY) maxY = trendLastY;\n\t\t\tif (trendLastY < minY) minY = trendLastY;\n\t\t}\n\n\t\tif (yAxisRange.isMirrorMode) {\n\t\t\tif (yAxisRange.zeroVal == void 0) Utils.error('range.zeroVal must be set when range.isMirrorMode');\n\t\t\tlet distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t\t\tlet distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t\t\tlet maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t\t\tmaxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t\t\tminY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t\t}\n\t\tlet margin = yAxisRange.margin;\n\t\tlet padding = {\n\t\t\tstart: yAxisRange.padding.start + margin.start,\n\t\t\tend: yAxisRange.padding.end + margin.end\n\t\t};\n\n\t\tif (padding.end + padding.start >= actualData.height) {\n\t\t\tUtils.warn('Sum of padding and margins of yAxi more then available state height. Trends can be rendered incorrectly');\n\t\t}\n\n\t\tlet rangeLength = maxY - minY;\n\t\tlet paddingTopInPercents = padding.end / actualData.height;\n\t\tlet paddingBottomInPercents = padding.start / actualData.height;\n\t\tlet rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t\tlet visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t\tlet fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t\tlet toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t\t\n\t\tif (isInitialize) {\n\t\t\tzeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t\t\tscaleFactor = actualData.height / (toVal - fromVal);\n\t\t\tpatch = { range: {zeroVal: zeroVal, scaleFactor: scaleFactor}};\n\t\t\tneedToZoom = true;\n\t\t} else {\n\t\t\tscaleFactor = yAxisRange.scaleFactor;\n\t\t\tzeroVal = yAxisRange.zeroVal;\n\n\t\t\tlet maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t\t\tlet minScreenY = Math.round(this.getScreenYByValue(minY));\n\t\t\tneedToZoom = (\n\t\t\t\tmaxScreenY > actualData.height - margin.end ||\n\t\t\t\tmaxScreenY < actualData.height - padding.end ||\n\t\t\t\tminScreenY < margin.start ||\n\t\t\t\tminScreenY > padding.start\n\t\t\t);\n\t\t}\n\n\t\tif (!needToZoom) return null;\n\n\t\tscroll = fromVal - zeroVal;\n\t\tzoom = (actualData.height / (toVal - fromVal)) / scaleFactor ;\n\n\t\tvar currentAxisRange = this.state.yAxis.range;\n\t\tif (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t\tif (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t\tif (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t\tif (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t\t\n\t\treturn patch;\n\t}\n\n\tzoom(zoomValue: number, origin = 0.5): Promise<void> {\n\t\tlet {zoom, scroll, scaleFactor} = this.state.xAxis.range;\n\t\tlet newZoom = zoom * zoomValue;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\tlet nextRange = this.state.width / (scaleFactor * newZoom);\n\t\tlet newScroll = scroll + (currentRange - nextRange) * origin;\n\t\tthis.setState({xAxis: {range: {zoom: newZoom, scroll: newScroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.zoomSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\t\n\tzoomToRange(range: number, origin?: number): Promise<void> {\n\t\tvar {scaleFactor, zoom} = this.state.xAxis.range;\n\t\tlet currentRange = this.state.width / (scaleFactor * zoom);\n\t\treturn this.zoom(currentRange / range, origin);\n\t}\n\n\tscrollToEnd(): Promise<void> {\n\t\tlet state = this.state;\n\t\tlet endXVal = this.trendsManager.getEndXVal();\n\t\tlet range = state.xAxis.range;\n\t\tvar scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t\tthis.setState({xAxis: {range: {scroll: scroll}}});\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tlet animationTime = this.state.animations.enabled ? this.state.animations.scrollSpeed : 0;\n\t\t\tsetTimeout(resolve, animationTime * 1000);\n\t\t});\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to xVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.xAxis.range;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to yVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zoom, zeroVal} = this.state.yAxis.range;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.state.xAxis.range.scaleFactor * this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.state.yAxis.range.scaleFactor * this.state.yAxis.range.zoom;\n\t}\n\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.state.xAxis.range.scaleFactor / this.state.xAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.state.yAxis.range.scaleFactor / this.state.yAxis.range.zoom;\n\t}\n\n\n\t/**\n\t *  returns x value by screen x coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\tvar {zeroVal, scroll} = this.state.xAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  returns y value by screen y coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\tvar {zeroVal, scroll} = this.state.yAxis.range;\n\t\treturn zeroVal + scroll + this.pxToValueByYAxis(y);\n\t}\n\n\n\t/**\n\t *  returns screen x value by screen y coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t/**\n\t *  returns screen y value by screen y coordinate\n\t */\n\tgetScreenYByValue(yVal: number): number {\n\t\tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t\treturn this.valueToPxByYAxis(yVal - zeroVal - scroll)\n\t}\n\n\n\t/**\n\t * returns screen x coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen x coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\n\n\tgetScreenLeftVal() {\n\t\treturn this.getValueByScreenX(0);\n\t}\n\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.state.width);\n\t}\n\n\n\tgetPaddingRight(): number {\n\t\treturn this.getValueByScreenX(this.state.width - this.state.xAxis.range.padding.end);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Chart.ts\n **/","import {Chart, IChartState} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {TrendSegmentsManager} from \"./TrendSegmentsManager\";\nimport {EventEmitter} from './EventEmmiter';\nimport {Promise} from './deps/deps';\nimport { TChartColor } from './Color';\n\nexport interface IPrependPromiseExecutor {\n\t(requestedDataLength: number, resolve: (data: TTrendRawData) => void, reject: () => void): void;\n}\nconst EVENTS = {\n\tCHANGE: 'Change',\n\tPREPEND_REQUEST: 'prependRequest'\n};\nexport enum TREND_TYPE {LINE, CANDLE}\nexport type TTrendRawData = ITrendData | number[];\nexport interface ITrendItem {xVal: number, yVal: number, id?: number}\nexport interface ITrendData extends Array<ITrendItem>{}\nexport interface ITrendTypeSettings {\n\tminSegmentLengthInPx?: number;\n\tmaxSegmentLengthInPx?: number;\n}\nexport interface ITrendOptions {\n\tenabled?: boolean,\n\tdata?: ITrendData\n\tdataset?: ITrendData | number[];\n\tname?: string;\n\ttype?: TREND_TYPE;\n\tlineWidth?: number;\n\tlineColor?: TChartColor;\n\tbackgroundColor?: TChartColor;\n\thasIndicator?: boolean;\n\thasBackground?: boolean;\n\thasBeacon?: boolean;\n\tmaxSegmentLength?: number;\n\tsettingsForTypes?: {\n\t\tCANDLE?: ITrendTypeSettings,\n\t\tLINE?: ITrendTypeSettings\n\t}\n}\n\nexport class Trend {\n\tname: string;\n\tsegmentsManager: TrendSegmentsManager;\n\tminXVal = Infinity;\n\tminYVal = Infinity;\n\tmaxXVal = -Infinity;\n\tmaxYVal = -Infinity;\n\tprivate chart: Chart;\n\tprivate calculatedOptions: ITrendOptions;\n\tprivate prependRequest: Promise<TTrendRawData>;\n\tprivate ee: EventEmitter;\n\t\n\tconstructor(chartState: Chart, trendName: string, initialState: IChartState) {\n\t\tvar options = initialState.trends[trendName];\n\t\tthis.name = trendName;\n\t\tthis.chart = chartState;\n\t\tthis.calculatedOptions = Utils.deepMerge(this.chart.state.trendDefaultState, options);\n\t\tthis.calculatedOptions.name = trendName;\n\t\tif (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t\tthis.calculatedOptions.dataset = [];\n\t\tthis.ee = new EventEmitter();\n\t\tthis.bindEvents();\n\t}\n\n\tprivate onInitialStateApplied() {\n\t\tthis.segmentsManager = new TrendSegmentsManager(this.chart, this);\n\t}\n\n\tprivate bindEvents() {\n\t\tvar chartState = this.chart;\n\t\tchartState.onInitialStateApplied(() => this.onInitialStateApplied());\n\t\tchartState.onScrollStop(() => this.checkForPrependRequest());\n\t\tchartState.onZoom(() => this.checkForPrependRequest());\n\t\tchartState.onTrendChange((trendName, changedOptions, newData) => this.ee.emit(EVENTS.CHANGE, changedOptions, newData));\n\t\tchartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tgetCalculatedOptions() {\n\t\treturn this.calculatedOptions;\n\t}\n\n\tappendData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData());\n\t\tvar updatedTrendData = options.data.concat(newData);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprependData(rawData: TTrendRawData) {\n\t\tvar options = this.getOptions();\n\t\tvar newData = Trend.prepareData(rawData, this.getData(), true);\n\t\tvar updatedTrendData = newData.concat(options.data);\n\t\tthis.changeData(updatedTrendData, newData);\n\t}\n\n\tprivate changeData(allData: ITrendData, newData: ITrendData) {\n\t\tfor (let item of newData) {\n\t\t\tif (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t\t\tif (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t\t\tif (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t\t\tif (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t\t}\n\t\tvar options = this.getOptions();\n\t\tvar statePatch: IChartState = {trends: {[options.name]: {data: allData}}};\n\t\tthis.chart.setState(statePatch, newData);\n\t}\n\t\n\tgetData(fromX?: number, toX?: number): ITrendData {\n\t\tvar data = this.getOptions().data;\n\t\tif (fromX == void 0 && toX == void 0) return data;\n\n\t\tfromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t\ttoX = toX !== void 0 ? toX : data[data.length].xVal;\n\t\tvar filteredData: ITrendData = [];\n\t\tfor (let item of data) {\n\t\t\tif (item.xVal < fromX) continue;\n\t\t\tif (item.xVal > toX) break;\n\t\t\tfilteredData.push(item)\n\t\t}\n\t\treturn filteredData;\n\t}\n\n\tgetFirstItem(): ITrendItem {\n\t\treturn this.getOptions().data[0];\n\t}\n\t\n\tgetLastItem(): ITrendItem {\n\t\tvar data = this.getOptions().data;\n\t\treturn data[data.length - 1];\n\t}\n\n\tgetOptions() {\n\t\treturn this.chart.state.trends[this.name]\n\t}\n\n\tsetOptions(options: ITrendOptions) {\n\t\tthis.chart.setState({trends: {[this.name]: options}});\n\t}\n\n\tonPrependRequest(cb: IPrependPromiseExecutor): Function {\n\t\tthis.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t\t}\n\t}\n\n\t/**\n\t * shortcut for Chart.onTrendChange\n\t */\n\tonChange(cb: (changedOptions: ITrendOptions, newData: ITrendData) => void): Function {\n\t\tthis.ee.on(EVENTS.CHANGE, cb);\n\t\treturn () => { this.ee.off(EVENTS.CHANGE, cb);}\n\t}\n\n\tonDataChange(cb: (newData: ITrendData) => void): Function {\n\t\tvar onChangeCb = (changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tif (newData) cb(newData);\n\t\t};\n\t\tthis.ee.on(EVENTS.CHANGE, onChangeCb);\n\t\treturn () => {\n\t\t\tthis.ee.off(EVENTS.CHANGE, onChangeCb);\n\t\t}\n\t}\n\n\tprivate checkForPrependRequest() {\n\t\tif (this.prependRequest) return;\n\t\tvar chartState = this.chart;\n\t\tvar minXVal = chartState.state.computedData.trends.minXVal;\n\t\tvar minScreenX = chartState.getScreenXByValue(minXVal);\n\t\tvar needToRequest = minScreenX > 0;\n\t\tvar {from, to} = chartState.state.xAxis.range;\n\t\tvar requestedDataLength = to - from;\n\t\tif (!needToRequest) return;\n\t\t\n\t\tthis.prependRequest = new Promise<TTrendRawData>((resolve: Function, reject: Function) => {\n\t\t\tthis.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t\t});\n\n\t\tthis.prependRequest.then((newData: TTrendRawData) => {\n\t\t\tthis.prependData(newData);\n\t\t\tthis.prependRequest = null;\n\t\t}, () => {\n\t\t\tthis.prependRequest = null;\n\t\t})\n\t\n\t}\n\n\tstatic prepareData (newData: TTrendRawData, currentData?: ITrendData, isPrepend = false): ITrendData {\n\t\tvar data: ITrendData = [];\n\t\tif (typeof newData[0] == 'number') {\n\t\t\tcurrentData = currentData || [];\n\t\t\tlet initialItem: ITrendItem;\n\t\t\tlet xVal: number;\n\t\t\tif (isPrepend) {\n\t\t\t\tinitialItem = currentData[0];\n\t\t\t\txVal = initialItem.xVal - newData.length;\n\t\t\t} else {\n\t\t\t\tinitialItem = currentData[currentData.length - 1];\n\t\t\t\txVal = initialItem ? initialItem.xVal + 1 : 0;\n\t\t\t}\n\t\t\tfor (let yVal of newData as number[]) {\n\t\t\t\tdata.push({xVal: xVal, yVal: yVal, id: Utils.getUid()});\n\t\t\t\txVal++;\n\t\t\t}\n\t\t} else {\n\t\t\tdata = newData as ITrendData;\n\t\t}\n\t\treturn data;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Trend.ts\n **/","import { IIteralable } from \"./interfaces\";\nimport { EventEmitter } from './EventEmmiter';\nimport { Chart } from \"./Chart\";\nimport Vector3 = THREE.Vector3;\nimport { ITrendData, ITrendOptions, ITrendItem, Trend, TREND_TYPE, ITrendTypeSettings } from \"./Trend\";\nimport { Utils } from \"./Utils\";\n\nconst MAX_ANIMATED_SEGMENTS = 100;\nconst EVENTS = {\n\tREBUILD: 'rebuild',\n\tDISLPAYED_RANGE_CHANGED: 'displayedRangeChanged',\n\tANIMATION_FRAME: 'animationFrame'\n};\n\n/**\n *  Class helps to display and animate trends segments\n */\nexport class TrendSegmentsManager {\n\tsegmentsById: {[id: string]: TrendSegment} = {};\n\tsegments: TrendSegment[] = [];\n\tchartState: Chart;\n\tanimatedSegmentsIds: number[] = [];\n\tmaxSegmentLength: number;\n\tsegmentsLength = 0;\n\tfirstDisplayedSegmentInd: number;\n\tfirstDisplayedSegment: TrendSegment;\n\tlastDisplayedSegmentInd: number;\n\tlastDisplayedSegment: TrendSegment;\n\tprivate appendAnimation: TweenLite;\n\tprivate prependAnimation: TweenLite;\n\tprivate animatedSegmentsForAppend: number[] = [];\n\tprivate animatedSegmentsForPrepend: number[] = [];\n\tprivate nextEmptyId = 0;\n\tprivate startSegmentId = 0;\n\tprivate endSegmentId = 0;\n\tprivate trend: Trend;\n\tprivate ee: EventEmitter;\n\n\tconstructor (chartState: Chart, trend: Trend) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.trend = trend;\n\t\tthis.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t\tthis.tryToRebuildSegments();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.trend.onChange((changedOptions, newData) => this.onTrendChangeHandler(changedOptions, newData));\n\t\tthis.chartState.onZoom(() => this.onZoomHandler());\n\t\tthis.chartState.onScroll(() => this.recalculateDisplayedRange());\n\t\tthis.chartState.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t\tthis.appendAnimation && this.appendAnimation.kill();\n\t\tthis.prependAnimation && this.prependAnimation.kill();\n\t}\n\n\tprivate onZoomHandler() {\n\t\tlet segmentsRebuilded = this.tryToRebuildSegments();\n\t\tif (!segmentsRebuilded) {\n\t\t\tthis.recalculateDisplayedRange()\n\t\t}\n\t}\n\n\tprivate onTrendChangeHandler(changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar needToRebuildSegments = (\n\t\t\tchangedOptions.type != void 0 ||\n\t\t\tchangedOptions.maxSegmentLength != void 0\n\t\t);\n\n\n\t\tif (needToRebuildSegments) {\n\t\t\tthis.tryToRebuildSegments(true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (!newData) return;\n\n\t\tvar data = this.trend.getData();\n\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\tisAppend ? this.appendData(newData) : this.prependData(newData);\n\t\tthis.recalculateDisplayedRange();\n\t}\n\n\tgetSegment(id: number) {\n\t\treturn this.segmentsById[id];\n\t}\n\n\tgetEndSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.endSegmentId];\n\t}\n\n\tgetStartSegment(): TrendSegment {\n\t\treturn this.segmentsById[this.startSegmentId];\n\t}\n\t\n\tprivate tryToRebuildSegments(force = false): boolean {\n\t\tlet options = this.trend.getOptions();\n\t\tlet trendTypeName = TREND_TYPE[options.type] as string;\n\t\tlet trendTypesSettings =  options.settingsForTypes as IIteralable;\n\t\tlet trendTypeSettings = trendTypesSettings[trendTypeName] as ITrendTypeSettings;\n\t\tlet {\n\t\t\tminSegmentLengthInPx,\n\t\t\tmaxSegmentLengthInPx\n\t\t} = trendTypeSettings;\n\n\t\tlet needToRebuild = this.segments.length === 0 || force;\n\t\tlet segmentLength = this.maxSegmentLength;\n\n\t\t// call toFixed(2) to prevent floating segment error compare\n\t\tlet currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t\tlet currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\n\t\tif (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t\t} else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t\t\tneedToRebuild = true;\n\t\t\tsegmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t\t}\n\n\t\tif (!needToRebuild) return false;\n\n\t\tthis.maxSegmentLength = segmentLength;\n\t\tthis.segmentsById = {};\n\t\tthis.segments = [];\n\t\tthis.nextEmptyId = 0;\n\t\tthis.startSegmentId = 0;\n\t\tthis.endSegmentId = 0;\n\t\tthis.segmentsLength = 0;\n\t\tthis.stopAllAnimations();\n\t\tthis.appendData(null, true);\n\t\tthis.recalculateDisplayedRange(true);\n\t\tthis.ee.emit(EVENTS.REBUILD);\n\t}\n\n\tprivate stopAllAnimations() {\n\t\tthis.animatedSegmentsIds = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tthis.animatedSegmentsForAppend = [];\n\t\tif (this.prependAnimation) this.prependAnimation.kill();\n\t\tif (this.appendAnimation) this.appendAnimation.kill();\n\t}\n\t\n\tprivate recalculateDisplayedRange(segmentsAreRebuilded = false) {\n\t\tvar {from, to} = this.chartState.state.xAxis.range;\n\t\tvar {firstDisplayedSegment, lastDisplayedSegment} = this;\n\t\tvar displayedRange = to - from;\n\n\t\tthis.firstDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, from - displayedRange, 'startXVal');\n\t\tthis.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n\t\tthis.lastDisplayedSegmentInd = Utils.binarySearchClosestInd(this.segments, to + displayedRange, 'endXVal');\n\t\tthis.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n\t\tif (segmentsAreRebuilded) return;\n\n\t\tvar displayedRangeChanged = (\n\t\t\tfirstDisplayedSegment.id !== this.firstDisplayedSegment.id ||\n\t\t\tlastDisplayedSegment.id !== this.lastDisplayedSegment.id\n\t\t);\n\t\tif (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t}\n\n\t// getSegments(fromX?: number, toX?: number): TrendSegment[] {\n\t// \tvar segments = this.segments;\n\t// \tif (fromX == void 0 && toX == void 0) return segments;\n\t// \tfromX = fromX !== void 0 ? fromX : segments[0].startXVal;\n\t// \ttoX = toX !== void 0 ? toX : segments[this.segmentsLength].endXVal;\n\t// \tvar startSegmentInd = Utils.closestBinarySearch(segments, fromX, 'xVal');\n\t// \tvar endSegmentInd = Utils.closestBinarySearch(segments, toX, 'xVal');\n\t// \treturn segments.slice(startSegmentInd, endSegmentInd);\n\t// }\n\n\t/**\n\t * returns array of segments for values array\n\t * values must be sorted!\n\t */\n\tgetSegmentsForXValues(values: number[]): TrendSegment[] {\n\t\tvar valueInd = 0;\n\t\tvar value = values[valueInd];\n\t\tvar lastValueInd = values.length - 1;\n\t\tvar results: TrendSegment[] = [];\n\t\tvar segment = this.getStartSegment();\n\t\tif (!segment.hasValue) return [];\n\t\twhile (segment) {\n\t\t\n\t\t\twhile (value < segment.startXVal) {\n\t\t\t\tresults.push(void 0);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\n\t\t\twhile (value > segment.endXVal) {\n\t\t\t\tsegment = segment.getNext();\n\t\t\t\tif (!segment) break;\n\t\t\t}\n\t\t\n\t\t\tvar valueInPoint = (\n\t\t\t\tsegment.startXVal == value || segment.endXVal == value ||\n\t\t\t\t(segment.startXVal < value && segment.endXVal > value)\n\t\t\t);\n\t\t\tif (valueInPoint) {\n\t\t\t\tresults.push(segment);\n\t\t\t\tvalue = values[++valueInd];\n\t\t\t}\n\t\t\tif (valueInd > lastValueInd) break;\n\t\t}\n\t\treturn results;\n\t}\n\n\tonAnimationFrame(cb: (animationState: TrendSegmentsManager) => void): Function {\n\t\treturn this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t}\n\n\tonRebuild(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.REBUILD, cb);\n\t}\n\n\tonDisplayedRangeChanged(cb: Function) {\n\t\treturn this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t}\n\t\n\tallocateNextSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar prevSegment = this.segmentsById[this.endSegmentId];\n\t\tif (prevSegment && prevSegment.hasValue) {\n\t\t\tprevSegment.nextId = id;\n\t\t\tsegment.prevId = prevSegment.id;\n\t\t}\n\t\tthis.endSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.push(segment);\n\t\treturn segment;\n\t}\n\n\tallocatePrevSegment() {\n\t\tvar id = this.nextEmptyId++;\n\t\tvar segment = new TrendSegment(this, id);\n\t\tvar nextSegment = this.segmentsById[this.startSegmentId];\n\t\tif (nextSegment && nextSegment.hasValue) {\n\t\t\tnextSegment.prevId = id;\n\t\t\tsegment.nextId = nextSegment.id;\n\t\t}\n\t\tthis.startSegmentId = id;\n\t\tthis.segmentsLength++;\n\t\tthis.segmentsById[id] = segment;\n\t\tthis.segments.unshift(segment);\n\t\treturn segment;\n\t}\n\n\tprivate appendData(newData: ITrendData, needRebuildSegments = false) {\n\n\t\t// WARNING: bottleneck method!\n\n\t\t// var t1 = performance.now();\n\t\tvar trendData = this.trend.getData();\n\t\tif (needRebuildSegments) {\n\t\t\tnewData = trendData;\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t}\n\n\t\tvar startItemInd = trendData.length - newData.length;\n\t\tvar segment = this.getEndSegment() || this.allocateNextSegment();\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\tvar itemInd = 0;\n\t\twhile (itemInd < newData.length) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.appendItem(item);\n\t\t\tlet isLastItem = itemInd == newData.length - 1;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd++;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForAppend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t\t\t\t\tsegment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForAppend.push(id);\n\n\t\t\t}\n\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocateNextSegment();\n\t\t\tlet prevItem = trendData[startItemInd + itemInd - 1];\n\t\t\tsegment.appendItem(prevItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\t// var t2 = performance.now();\n\t\t// console.log(t2 - t1);\n\n\t\t// do not create animation if segments was rebuilded\n\t\tif (needRebuildSegments) {\n\t\t\tfor (let segmentId of this.animatedSegmentsForAppend) {\n\t\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\t\tsegment.currentAnimationState = segment.createAnimationState();\n\t\t\t}\n\t\t\tthis.animatedSegmentsForAppend = [];\n\t\t\treturn;\n\t\t}\n\t\tif (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time);\n\t}\n\n\n\t// TODO: refactor duplicated code from appendData\n\tprivate prependData(newData: ITrendData) {\n\t\tvar trendData = this.trend.getData();\n\t\tvar segment = this.getStartSegment() || this.segmentsById[0];\n\t\tvar initialSegment = segment.hasValue ? segment : null;\n\t\tvar itemInd = newData.length - 1;\n\t\tvar initialAnimationState = segment.createAnimationState();\n\t\twhile (itemInd >= 0) {\n\t\t\tlet item = newData[itemInd];\n\t\t\tlet itemIsInserted = segment.prependItem(item);\n\t\t\tlet isLastItem = itemInd == 0;\n\n\t\t\tif (itemIsInserted) {\n\t\t\t\tif (!isLastItem) itemInd--;\n\t\t\t} else {\n\t\t\t\tif (!segment.isCompleted) segment.complete();\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) {\n\t\t\t\tsegment.recalculateItems();\n\t\t\t}\n\n\t\t\tlet segmentIsReadyForAnimate = segment.isCompleted || (isLastItem && itemIsInserted);\n\t\t\tif (segmentIsReadyForAnimate) {\n\t\t\t\tlet id = segment.id;\n\t\t\t\tif (!initialSegment) initialSegment = segment;\n\t\t\t\tif (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\n\t\t\t\tsegment.initialAnimationState = Utils.deepMerge({}, initialAnimationState);\n\t\t\t\tif (this.animatedSegmentsForPrepend.length > 0) {\n\t\t\t\t\tsegment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t\t\t\t\tsegment.initialAnimationState.endYVal =  initialAnimationState.startYVal;\n\t\t\t\t}\n\n\t\t\t\tsegment.targetAnimationState = segment.createAnimationState();\n\t\t\t\tthis.animatedSegmentsForPrepend.push(id);\n\n\t\t\t}\n\n\t\t\tif (isLastItem && itemIsInserted) break;\n\t\t\tif (!segment.isCompleted) continue;\n\n\t\t\tsegment = this.allocatePrevSegment();\n\t\t\tlet nextItem = trendData[itemInd + 1];\n\t\t\tsegment.prependItem(nextItem);\n\n\t\t}\n\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\n\t\tif (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t\tthis.animate(time, true);\n\t}\n\n\tprivate animate(time: number, isPrepend = false) {\n\n\t\tvar animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tvar animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\n\t\tif ((animation && animation.isActive()) || time == 0) {\n\t\t\tif (animation) animation.kill();\n\t\t\tthis.onAnimationFrameHandler(1, isPrepend);\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar animationsOptions = this.chartState.state.animations;\n\t\tvar ease = animationsOptions.trendChangeEase;\n\t\tvar objectToAnimate = {animationValue: 0};\n\t\tanimation = TweenLite.to(objectToAnimate, time, {animationValue: 1, ease});\n\t\tanimation.eventCallback('onUpdate', () => this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend));\n\t\tanimation.eventCallback('onComplete', () => {\n\t\t\tanimatedSegmentsIds.length = 0;\n\t\t\tthis.appendAnimation = null;\n\t\t});\n\n\t\tif (isPrepend) {\n\t\t\tthis.prependAnimation = animation;\n\t\t} else {\n\t\t\tthis.appendAnimation = animation;\n\t\t}\n\t}\n\n\tprivate onAnimationFrameHandler(coefficient: number, isPrepend = false) {\n\t\tlet animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t\tfor (let segmentId of animatedSegmentsIds) {\n\t\t\tlet segment = this.segmentsById[segmentId];\n\t\t\tfor (let key in segment.targetAnimationState) {\n\t\t\t\tlet targetValue = segment.targetAnimationState[key] as number;\n\t\t\t\tlet initialValue = segment.initialAnimationState[key] as number;\n\t\t\t\tlet currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t\t\t\tsegment.currentAnimationState[key] = currentValue;\n\t\t\t}\n\t\t}\n\t\tthis.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t\tthis.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t}\n\n}\n\nexport interface ITrendSegmentState extends IIteralable {\n\txVal?: number;\n\tyVal?: number;\n\tstartXVal?: number;\n\tstartYVal?: number;\n\tendXVal?: number;\n\tendYVal?: number;\n\tmaxYVal?: number;\n\tminYVal?: number;\n\tmaxLength?: number;\n}\n\nexport class TrendSegment implements ITrendSegmentState {\n\tid: number;\n\tprevId: number;\n\tnextId: number;\n\thasValue: boolean;\n\txVal: number;\n\tyVal: number;\n\tstartXVal: number;\n\tstartYVal: number;\n\tendXVal: number;\n\tendYVal: number;\n\tmaxYVal: number;\n\tminYVal: number;\n\tisCompleted = false;\n\tmaxLength: number;\n\titems: ITrendItem[] = [];\n\n\tinitialAnimationState: ITrendSegmentState = {};\n\ttargetAnimationState: ITrendSegmentState = {};\n\tcurrentAnimationState: ITrendSegmentState = {};\n\n\tprivate trendSegments: TrendSegmentsManager;\n\t\n\tconstructor(trendPoints: TrendSegmentsManager, id: number) {\n\t\tthis.trendSegments = trendPoints;\n\t\tthis.id = id;\n\t\tthis.maxLength = trendPoints.maxSegmentLength;\n\t}\n\n\tcreateAnimationState(): ITrendSegmentState {\n\t\tvar {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t} = this;\n\t\treturn {\n\t\t\txVal,\n\t\t\tyVal,\n\t\t\tstartXVal,\n\t\t\tstartYVal,\n\t\t\tendXVal,\n\t\t\tendYVal,\n\t\t\tmaxYVal,\n\t\t\tminYVal,\n\t\t\tmaxLength\n\t\t}\n\t};\n\t\n\tappendItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.push(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar startXVal = items[0].xVal;\n\t\tif (item.xVal - startXVal > this.maxLength) return false;\n\t\titems.push(item);\n\t\treturn true;\n\t}\n\n\tprependItem(item: ITrendItem): boolean {\n\t\tif (this.isCompleted) return false;\n\t\tvar items = this.items;\n\t\tif (items.length < 2) {\n\t\t\tthis.items.unshift(item);\n\t\t\tthis.hasValue = true;\n\t\t\treturn true;\n\t\t}\n\t\tvar endXVal = items[items.length - 1].xVal;\n\t\tif (endXVal - item.xVal > this.maxLength) return false;\n\t\titems.unshift(item);\n\t\treturn true;\n\t}\n\n\tcomplete() {\n\t\tthis.isCompleted = true;\n\t\tthis.recalculateItems();\n\t\tthis.items = []; // free memory for completed ranges\n\t}\n\n\trecalculateItems() {\n\t\tlet items = this.items;\n\t\tlet itemsLength = items.length;\n\t\tif (itemsLength === 0) Utils.error('Unable to create TrendSegment without TrendItems');\n\t\tlet endItem = items[itemsLength - 1];\n\t\tlet {xVal: endXVal, yVal: endYVal} = endItem;\n\t\tlet startXVal: number, startYVal: number;\n\n\n\t\tlet startItem = items[0];\n\t\tstartXVal = startItem.xVal;\n\t\tstartYVal = startItem.yVal;\n\n\t\tlet minX = Math.min(startXVal, endXVal);\n\t\tlet maxX = Math.max(startXVal, endXVal);\n\t\tlet middleXVal = minX + (maxX - minX) / 2;\n\n\t\tlet minY = Math.min(startYVal, endYVal);\n\t\tlet maxY = Math.max(startYVal, endYVal);\n\t\tlet middleYVal = minY + (maxY - minY) / 2;\n\n\t\tlet yVals = items.map(item => item.yVal);\n\n\t\tthis.startXVal = startXVal;\n\t\tthis.startYVal = startYVal;\n\t\tthis.endXVal = endXVal;\n\t\tthis.endYVal = endYVal;\n\t\tthis.xVal = middleXVal;\n\t\tthis.yVal = middleYVal;\n\t\tthis.maxYVal = Math.max(...yVals);\n\t\tthis.minYVal = Math.min(...yVals);\n\t\tif (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t}\n\n\tgetNext() {\n\t\tvar nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t\treturn nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t}\n\n\tgetPrev() {\n\t\tvar prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t\treturn prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t}\n\t\n\tgetFrameVal(): Vector3 {\n\t\tlet {xVal, yVal} = this.createAnimationState();\n\t\treturn new Vector3(xVal, yVal, 0);\n\t}\n\n\tgetFramePoint(): Vector3 {\n\t\tvar frameVal = this.getFrameVal();\n\t\treturn this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendSegmentsManager.ts\n **/","\nimport {Trend, ITrendOptions} from \"./Trend\";\nimport {Chart, IChartState} from \"./Chart\";\nimport { EventEmitter } from './EventEmmiter';\n\nexport interface ITrendsOptions {\n\t[trendName: string]: ITrendOptions;\n}\n\nconst EVENTS = {\n\tSEGMENTS_REBUILDED: 'segmentsRebuilded'\n};\n\n/**\n * Trends manager\n */\nexport class TrendsManager {\n\ttrends: {[name: string]: Trend} = {};\n\tcalculatedOptions: ITrendsOptions;\n\tprivate ee = new EventEmitter();\n\tprivate chartState: Chart;\n\t\n\tconstructor(state: Chart, initialState: IChartState) {\n\t\tthis.chartState = state;\n\t\tvar trendsCalculatedOptions: ITrendsOptions = {};\n\t\tfor (let trendName in initialState.trends) {\n\t\t\tlet trend = this.createTrend(state, trendName, initialState);\n\t\t\ttrendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t\t}\n\t\tthis.calculatedOptions = trendsCalculatedOptions;\n\t\tthis.bindEvents();\n\t}\n\n\tgetTrend(trendName: string) {\n\t\treturn this.trends[trendName];\n\t}\n\t\n\tgetEnabledTrends(): Trend[] {\n\t\tvar enabledTrends: Trend[] = [];\n\t\tvar allTrends = this.trends;\n\t\tfor (let trendName in allTrends) {\n\t\t\tlet trend = allTrends[trendName];\n\t\t\ttrend.getOptions().enabled && enabledTrends.push(trend);\n\t\t}\n\t\treturn enabledTrends;\n\t}\n\n\n\tgetStartXVal() {\n\t\tvar trends = this.getEnabledTrends();\n\t\treturn trends[0].getData()[0].xVal;\n\t}\n\n\n\tgetEndXVal(): number {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar firstTrendData = trends[0].getData();\n\t\treturn firstTrendData[firstTrendData.length - 1].xVal;\n\t}\n\t\n\t\n\tgetExtremumYVal(extremumIsMax: boolean, fromX?: number, toX?: number) {\n\t\tvar trends = this.getEnabledTrends();\n\t\tvar compareFn: Function;\n\t\tvar result: number;\n\t\tif (extremumIsMax) {\n\t\t\tresult = -Infinity;\n\t\t\tcompareFn = Math.max;\n\t\t} else {\n\t\t\tresult = Infinity;\n\t\t\tcompareFn = Math.min;\n\t\t}\n\t\tfor (let trend of trends) {\n\t\t\tvar trendData = trend.getData(fromX, toX);\n\t\t\tvar trendYValues = trendData.map((dataItem) => dataItem.yVal);\n\t\t\tresult = compareFn(result, ...trendYValues);\n\t\t}\n\t\tif (result == Infinity || result == -Infinity) result = NaN;\n\t\treturn result;\n\t}\n\n\tgetMaxYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(true, fromX, toX)}\n\tgetMinYVal(fromX?: number, toX?: number) {return this.getExtremumYVal(false, fromX, toX)}\n\n\tonSegmentsRebuilded(cb: (trendName: string) => any) {\n\t\treturn this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t}\n\n\tprivate bindEvents() {\n\t\tthis.chartState.onInitialStateApplied(() => this.onInitialStateAppliedHandler());\n\t}\n\n\tprivate onInitialStateAppliedHandler() {\n\t\tfor (let trendName in this.trends) {\n\t\t\tthis.trends[trendName].segmentsManager.onRebuild(() => this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName));\n\t\t}\n\t}\n\n\tprivate createTrend(state: Chart, trendName: string, initialState: IChartState): Trend {\n\t\tlet trend = new Trend(state, trendName, initialState);\n\t\tthis.trends[trendName] = trend;\n\t\treturn trend;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/TrendsManager.ts\n **/","import PerspectiveCamera = THREE.PerspectiveCamera;\nimport Vector3 = THREE.Vector3;\nimport {Chart, IChartState} from \"./Chart\";\nimport { EventEmitter } from './EventEmmiter';\nimport { Animation } from './AnimationManager';\n\nexport interface IScreenTransformOptions {\n\tscrollXVal?: number,\n\tscrollYVal?: number,\n\tscrollX?: number,\n\tscrollY?: number,\n\tzoomX?: number,\n\tzoomY?: number\n}\n\nconst SCREEN_EVENTS = {\n\tZOOM_FRAME: 'zoomFrame',\n\tSCROLL_FRAME: 'scrollFrame',\n\tTRANSFORMATION_FRAME: 'transformationFrame'\n};\n\n/**\n * manage camera, and contains methods for transforming pixels to values\n */\nexport class Screen {\n\t// TODO: make own interface for Chart and Screen for calculating screen positions\n\n\toptions: IScreenTransformOptions = {scrollXVal: 0, scrollX: 0, scrollYVal: 0, scrollY: 0, zoomX: 1, zoomY: 1};\n\tprivate chart: Chart;\n\tprivate scrollXAnimation: Animation<number>;\n\tprivate scrollYAnimation: Animation<number>;\n\tprivate zoomXAnimation: Animation<number>;\n\tprivate zoomYAnimation: Animation<number>;\n\tprivate ee: EventEmitter;\n\n\tconstructor(chartState: Chart) {\n\t\tthis.chart = chartState;\n\t\tvar {width: w, height: h} = chartState.state;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.transform({\n\t\t\tscrollY: this.valueToPxByYAxis(this.chart.state.yAxis.range.scroll),\n\t\t\tzoomY: 1\n\t\t});\n\t\tthis.bindEvents();\n\n\t\t//camera.position.z = 1500;\n\t}\n\t\n\tgetCameraSettings() {\n\n\t\tvar {width: w, height: h} = this.chart.state;\n\n\t\t// settings for pixel-perfect camera\n\t\tvar FOV = 75;\n\t\tvar vFOV = FOV * (Math.PI / 180);\n\t\t\n\t\treturn {\n\t\t\tFOV: FOV,\n\t\t\taspect: w / h,\n\t\t\tnear: 0.1,\n\t\t\tfar: 5000,\n\t\t\tz: h / (2 * Math.tan(vFOV / 2) ),\n\n\t\t\t// move 0,0 to left-bottom corner\n\t\t\tx: w / 2,\n\t\t\ty: h / 2\n\t\t}\n\t}\n\n\tonZoomFrame(cb: (zoomX: number, zoomY: number) => void): Function {\n\t\treturn this.ee.subscribe(SCREEN_EVENTS.ZOOM_FRAME, cb);\n\t}\n\n\tonScrollFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\treturn this.ee.subscribe(SCREEN_EVENTS.SCROLL_FRAME, cb);\n\t}\n\n\tonTransformationFrame(cb: (options: IScreenTransformOptions) => void): Function {\n\t\treturn this.ee.subscribe(SCREEN_EVENTS.TRANSFORMATION_FRAME, cb);\n\t}\n\n\tcameraIsMoving(): boolean {\n\t\treturn !!(\n\t\t\tthis.scrollXAnimation && !this.scrollXAnimation.isFinished ||\n\t\t\t\tthis.zoomXAnimation && !this.zoomXAnimation.isFinished\n\t\t);\n\t}\n\n\t/**\n\t * setup zoom and scroll\n\t */\n\tprivate transform (options: IScreenTransformOptions, silent = false) {\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = options;\n\t\t\n\t\tif (scrollX != void 0) this.options.scrollX = scrollX;\n\t\tif (scrollY != void 0) this.options.scrollY = scrollY;\n\t\tif (zoomX != void 0) this.options.zoomX = zoomX;\n\t\tif (zoomY != void 0) this.options.zoomY = zoomY;\n\n\t\tif (scrollX != void 0 || zoomX) {\n\t\t\toptions.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t\t\tthis.options.scrollXVal = options.scrollXVal;\n\t\t}\n\n\t\tif (scrollY != void 0 || zoomY) {\n\t\t\toptions.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t\t\tthis.options.scrollYVal = options.scrollYVal;\n\t\t}\n\n\t\tif (silent) return;\n\n\t\tthis.ee.emit(SCREEN_EVENTS.TRANSFORMATION_FRAME, options);\n\n\t\tlet scrollEventNeeded = options.scrollXVal != void 0 || options.scrollYVal != void 0;\n\t\tif (scrollEventNeeded) this.ee.emit(SCREEN_EVENTS.SCROLL_FRAME, options);\n\n\t\tlet zoomEventNeeded = options.zoomX != void 0 || options.zoomY != void 0;\n\t\tif (zoomEventNeeded) this.ee.emit(SCREEN_EVENTS.ZOOM_FRAME, options);\n\t}\n\n\n\tprivate bindEvents() {\n\t\tvar state = this.chart;\n\n\t\t// handle scroll and zoom\n\t\tstate.onChange((changedProps) => {\n\t\t\tif (changedProps.xAxis && changedProps.xAxis.range) {\n\t\t\t\tif (changedProps.xAxis.range.scroll != void 0) this.onScrollXHandler(changedProps);\n\t\t\t\tif (changedProps.xAxis.range.zoom) this.onZoomXHandler();\n\t\t\t}\n\t\t\tif (changedProps.yAxis && changedProps.yAxis.range){\n\t\t\t\tif (changedProps.yAxis.range.scroll != void 0) this.onScrollYHandler();\n\t\t\t\tif (changedProps.yAxis.range.zoom) this.onZoomYHandler();\n\t\t\t}\n\t\t});\n\t\tstate.onDestroy(() => this.onDestroyHandler());\n\t}\n\n\tprivate onDestroyHandler() {\n\t\tthis.ee.removeAllListeners();\n\t}\n\n\tprivate onScrollXHandler(changedProps: IChartState) {\n\t\tlet chart = this.chart;\n\t\tlet isDragMode = chart.state.cursor.dragMode;\n\t\tlet animations =  chart.state.animations;\n\t\tlet zoomXChanged = changedProps.xAxis.range.zoom;\n\t\tlet isAutoscroll = chart.state.autoScroll && !isDragMode && !zoomXChanged;\n\t\tlet time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t\tlet ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t\tlet range = chart.state.xAxis.range;\n\t\tlet targetX = range.scroll * range.scaleFactor * range.zoom;\n\n\t\tif (this.scrollXAnimation) this.scrollXAnimation.stop();\n\n\t\tthis.scrollXAnimation = chart.animationManager.animate(time, ease)\n\t\t\t.from(this.options.scrollX)\n\t\t\t.to(targetX)\n\t\t\t.onTick((value) => {\n\t\t\t\tthis.transform({scrollX: value});\n\t\t\t});\n\t}\n\n\tprivate onScrollYHandler() {\n\t\tlet chart = this.chart;\n\t\tlet animations =  chart.state.animations;\n\t\tlet range = chart.state.yAxis.range;\n\t\tlet targetY = range.scroll * range.scaleFactor * range.zoom;\n\n\t\tif (this.scrollYAnimation) this.scrollYAnimation.stop();\n\n\t\tthis.scrollYAnimation = chart.animationManager.animate(animations.zoomSpeed, animations.zoomEase)\n\t\t\t.from(this.options.scrollY)\n\t\t\t.to(targetY)\n\t\t\t.onTick((value) => {\n\t\t\t\tthis.transform({scrollY: value});\n\t\t\t});\n\t}\n\n\n\tprivate onZoomXHandler() {\n\t\tlet chart = this.chart;\n\t\tlet animations =  chart.state.animations;\n\t\tlet targetZoom = chart.state.xAxis.range.zoom;\n\t\tif (this.zoomXAnimation) this.zoomXAnimation.stop();\n\n\t\tthis.zoomXAnimation = chart.animationManager\n\t\t\t.animate(animations.zoomSpeed, animations.zoomEase)\n\t\t\t.from(this.options.zoomX)\n\t\t\t.to(targetZoom)\n\t\t\t.onTick((value) => {\n\t\t\t\tthis.transform({zoomX: value});\n\t\t\t});\n\t}\n\n\n\tprivate onZoomYHandler() {\n\t\tlet chart = this.chart;\n\t\tlet targetZoom = chart.state.yAxis.range.zoom;\n\t\tlet animations =  chart.state.animations;\n\t\tif (this.zoomYAnimation) this.zoomYAnimation.stop();\n\n\t\tthis.zoomYAnimation = chart.animationManager\n\t\t\t.animate(animations.zoomSpeed, animations.zoomEase)\n\t\t\t.from(this.options.zoomY)\n\t\t\t.to(targetZoom)\n\t\t\t.onTick((value) => {\n\t\t\t\tthis.transform({zoomY: value});\n\t\t\t});\n\t}\n\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal to scrollXVal\n\t */\n\tgetPointOnXAxis(xVal: number): number {\n\t\tvar {scaleFactor, zeroVal} = this.chart.state.xAxis.range;\n\t\tvar zoom = this.options.zoomX;\n\t\treturn (xVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from yAxis.range.zeroVal to scrollYVal\n\t */\n\tgetPointOnYAxis(yVal: number): number {\n\t\tvar {scaleFactor, zeroVal} =  this.chart.state.yAxis.range;\n\t\tvar zoom = this.options.zoomY;\n\t\treturn (yVal - zeroVal) * scaleFactor * zoom;\n\t}\n\n\t/**\n\t *  returns offset in pixels from xAxis.range.zeroVal and from yAxis.range.zeroVal to scrollXVal and scrollYVal\n\t */\n\tgetPointOnChart(xVal: number, yVal: number): Vector3 {\n\t\treturn new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t}\n\t\n\t/**\n\t * returns value by offset in pixels from xAxis.range.zeroVal\n\t */\n\tgetValueOnXAxis(x: number): number {\n\t\treturn this.chart.state.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from xAxis.range\n\t */\n\tvalueToPxByXAxis(xVal: number) {\n\t\treturn xVal * this.chart.state.xAxis.range.scaleFactor * this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert value to pixels by using settings from yAxis.range\n\t */\n\tvalueToPxByYAxis(yVal: number) {\n\t\treturn yVal * this.chart.state.yAxis.range.scaleFactor * this.options.zoomY;\n\t}\n\t\n\t/**\n\t *  convert pixels to value by using settings from xAxis.range\n\t */\n\tpxToValueByXAxis(xVal: number) {\n\t\treturn xVal / this.chart.state.xAxis.range.scaleFactor / this.options.zoomX;\n\t}\n\n\n\t/**\n\t *  convert pixels to value by using settings from yAxis.range\n\t */\n\tpxToValueByYAxis(yVal: number) {\n\t\treturn yVal / this.chart.state.yAxis.range.scaleFactor / this.options.zoomY;\n\t}\n\n\n\t/**\n\t *  returns scrollX value by screen scrollX coordinate\n\t */\n\tgetValueByScreenX(x: number): number {\n\t\treturn this.chart.state.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t}\n\t\n\t\n\t/**\n\t *  returns scrollY value by screen scrollY coordinate\n\t */\n\tgetValueByScreenY(y: number): number {\n\t\treturn this.chart.state.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t}\n\t\n\t//\n\t/**\n\t *  returns screen scrollX value by screen scrollY coordinate\n\t */\n\tgetScreenXByValue(xVal: number): number {\n\t\tvar {scroll, zeroVal} = this.chart.state.xAxis.range;\n\t\treturn this.valueToPxByXAxis(xVal - zeroVal - scroll)\n\t}\n\n\t// /**\n\t//  *  returns screen scrollY value by screen scrollY coordinate\n\t//  */\n\t// getScreenYByValue(scrollYVal: number): number {\n\t// \tvar {scroll, zeroVal} = this.state.yAxis.range;\n\t// \treturn this.valueToPxByYAxis(scrollYVal - zeroVal - scroll)\n\t// }\n\t//\n\t//\n\t/**\n\t * returns screen scrollX coordinate by offset in pixels from xAxis.range.zeroVal value\n\t */\n\tgetScreenXByPoint(xVal: number): number {\n\t\treturn this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t}\n\n\n\t/**\n\t * returns offset in pixels from xAxis.range.zeroVal value by screen scrollX coordinate\n\t */\n\tgetPointByScreenX(screenX: number): number {\n\t\treturn this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t}\n\n\t/**\n\t * returns offset in pixels from yAxis.range.zeroVal value by screen scrollY coordinate\n\t */\n\tgetPointByScreenY(screenY: number): number {\n\t\treturn this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t}\n\n\tgetTop(): number {\n\t\treturn this.getPointByScreenY(this.chart.state.height);\n\t}\n\t\n\tgetBottom(): number {\n\t\treturn this.getPointByScreenY(0);\n\t}\n\n\tgetLeft(): number {\n\t\treturn this.getPointByScreenX(0);\n\t}\n\n\tgetScreenRightVal() {\n\t\treturn this.getValueByScreenX(this.chart.state.width);\n\t}\n\n\tgetTopVal() {\n\t\treturn this.getValueByScreenY(this.chart.state.height);\n\t}\n\t\n\tgetBottomVal() {\n\t\treturn this.getValueByScreenY(0);\n\t}\n\n\tgetCenterYVal() {\n\t\treturn this.getValueByScreenY(this.chart.state.height / 2);\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Screen.ts\n **/","\nimport {Chart} from \"./Chart\";\nimport {Utils} from \"./Utils\";\nimport {AXIS_TYPE} from \"./interfaces\";\nimport {ITrendData, ITrendOptions} from \"./Trend\";\nimport {EventEmitter} from './EventEmmiter';\n\nexport interface IAxisMarkUpdateOptions {\n\tvalue: number,\n\tdisplayedValue?: string\n}\n\nexport interface IAxisMarkOptions extends IAxisMarkUpdateOptions {\n\tname?: string;\n\ttitle?: string;\n\ttype?: string;\n\tlineColor?: string;\n\tlineWidth?: number;\n\tshowValue?: boolean;\n\tstickToEdges?: boolean;\n}\n\nconst AXIS_MARK_DEFAULT_OPTIONS: IAxisMarkOptions = {\n\ttype: 'simple',\n\tlineWidth: 1,\n\tvalue: 0,\n\tshowValue: false,\n\tstickToEdges: false,\n\tlineColor: '#FFFFFF',\n\ttitle: ''\n};\n\nexport class AxisMarks {\n\tprivate chartState: Chart;\n\tprivate axisType: AXIS_TYPE;\n\tprivate ee: EventEmitter;\n\tprivate items: {[name: string]: AxisMark} = {};\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE) {\n\t\tthis.chartState = chartState;\n\t\tthis.ee = new EventEmitter();\n\t\tthis.axisType = axisType;\n\t\tvar marks = this.items;\n\t\tvar axisMarksOptions = axisType == AXIS_TYPE.X ? chartState.state.xAxis.marks : chartState.state.yAxis.marks;\n\t\t\n\t\tfor (let options of axisMarksOptions) {\n\t\t\tlet axisMark: AxisMark;\n\t\t\toptions = Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t\t\t\n\t\t\t// set mark name\n\t\t\tif (!options.name) options.name = Utils.getUid().toString();\n\t\t\tif (marks[options.name]) Utils.error('duplicated mark name ' + options.name);\n\t\t\t\n\t\t\t// create mark instance based on type option\n\t\t\tif (options.type == 'timeleft') {\n\t\t\t\taxisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t\t\t} else {\n\t\t\t\taxisMark = new AxisMark(chartState, axisType, options);\n\t\t\t}\n\t\t\tmarks[options.name] = axisMark;\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, newData)\n\t\t});\n\t\tthis.chartState.onDestroy(() => this.ee.removeAllListeners());\n\t}\n\n\tprivate onTrendChange(trendName: string, newData: ITrendData) {\n\t\tif (!newData) return;\n\t\tvar startVal = newData[0].xVal;\n\t\tvar endVal = newData[newData.length - 1].xVal;\n\t\tvar marks = this.items;\n\n\t\tfor (let markName in marks) {\n\t\t\tlet mark = marks[markName];\n\t\t\tlet markVal = mark.options.value;\n\t\t\tlet markWasCrossed = (startVal == markVal || endVal == markVal || (startVal < markVal && endVal > markVal));\n\t\t\tif (markWasCrossed) this.ee.emit('markCrossed', trendName, newData);\n\t\t}\n\t}\n\n\n\tgetItems() {\n\t\treturn this.items;\n\t}\n\t\n\tgetItem(markName: string) {\n\t\treturn this.items[markName];\n\t}\n\n}\n\nexport class AxisMark {\n\tstatic typeName = 'simple';\n\toptions: IAxisMarkOptions;\n\taxisType: AXIS_TYPE;\n\tprotected chartState: Chart;\n\tprotected renderOnTrendsChange = false;\n\tprotected ee: EventEmitter;\n\n\tconstructor(chartState: Chart, axisType: AXIS_TYPE, options: IAxisMarkOptions) {\n\t\tthis.ee = new EventEmitter();\n\t\tthis.options = options;\n\t\tthis.axisType = axisType;\n\t\tthis.chartState = chartState;\n\t\tthis.bindEvents();\n\t}\n\t\n\tprotected bindEvents() {}\n\n\tsetOptions(newOptions: IAxisMarkUpdateOptions) {\n\t\tvar value = this.options.value;\n\t\tthis.options = Utils.deepMerge(this.options, newOptions);\n\t\tif (this.options.value !== value) this.ee.emit('valueChange');\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n\n\tgetDisplayedVal(): string {\n\t\tlet {value, displayedValue} = this.options;\n\t\treturn String(displayedValue !== void 0 ? displayedValue : value);\n\t}\n\n\tonMarkCrossed(cb: (trendName: string, newData: ITrendData) => void): Function {\n\t\tthis.ee.on('markCrossed', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('markCrossed', cb);\n\t\t}\n\t}\n\n\tonValueChange(cb: () => void) {\n\t\tthis.ee.on('valueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('valueChange', cb);\n\t\t}\n\t}\n\n\tonDisplayedValueChange(cb: () => void) {\n\t\tthis.ee.on('onDisplayedValueChange', cb);\n\t\treturn () => {\n\t\t\tthis.ee.off('onDisplayedValueChange', cb);\n\t\t}\n\t}\n}\n\nexport class AxisTimeleftMark extends AxisMark {\n\tstatic typeName = 'timeleft';\n\tprotected renderOnTrendsChange = true;\n\t\n\tgetDisplayedVal(): string {\n\t\tvar markVal = this.options.value;\n\t\tvar maxXVal = this.chartState.state.computedData.trends.maxXVal;\n\t\tvar time = markVal - maxXVal;\n\t\tif (time < 0) time = 0;\n\t\treturn Utils.msToTimeString(time);\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.onTrendsChange(() => this.onTrendsChange());\n\t}\n\n\tprotected onTrendsChange() {\n\t\tthis.ee.emit('onDisplayedValueChange');\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AxisMarks.ts\n **/","\n\n/**\n * defines how axis range will be calculated\n * FIXED - directly use range.from and range.to value\n * AUTO - automatically sets range.from and range.to by visible part of opposite axis\n * RELATIVE_END - same as AUTO, but trend end always present in range\n * ALL - automatically sets range.from and range.to by all values of opposite axis\n *\n */\nimport {IAxisMarkOptions} from \"./AxisMarks\";\nimport {TChartColor} from \"./Color\";\nexport enum AXIS_RANGE_TYPE {\n\tFIXED,\n\tRELATIVE_END,\n\tAUTO,\n\tALL // TODO: AXIS_RANGE_TYPE.ALL\n}\n\n/**\n * Animation ease type\n */\nexport declare type TEase = Ease | Linear;\n\nexport declare type TIteralable = {[key: string]: any};\nexport interface IIteralable {[key: string]: any};\n\nexport enum AXIS_TYPE {X, Y}\n\nexport interface IAxisRange {\n\ttype?: AXIS_RANGE_TYPE,\n\tfrom?: number,\n\tto?: number,\n\tzoom?: number,\n\tscroll?: number,\n\n\t/**\n\t * Mode only for Y axis. When true displayed center of Y axis never changed. To use set range.zeroVal as center value.\n\t */\n\tisMirrorMode?: boolean,\n\n\tpadding?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmargin?: {\n\t\tstart?: number,\n\t\tend?: number\n\t},\n\n\tmaxLength?: number;\n\tminLength?: number;\n\n\t/**\n\t * value in world center coordinate\n\t */\n\tzeroVal?: number,\n\n\t/**\n\t * ratio between 1 pixel and 1 value for zoom = 1\n\t */\n\tscaleFactor?: number,\n}\n\nexport enum AXIS_DATA_TYPE {NUMBER, DATE}\n\nexport interface IAxisOptions {\n\trange?: IAxisRange;\n\tdataType?: AXIS_DATA_TYPE;\n\tautoScroll?: boolean;\n\tmarks?: IAxisMarkOptions[];\n\tgrid?: IGridOptions;\n\tcolor?: TChartColor;\n}\n\nexport interface IGridOptions {\n\tenabled: boolean;\n\tminSizePx?: number;\n\tcolor?: TChartColor;\n}\n\nexport interface IAnimationsOptions {\n\tenabled?: boolean,\n\ttrendChangeSpeed?: number,\n\ttrendChangeEase?: TEase,\n\tscrollSpeed?: number,\n\tscrollEase?: (progress: number) => number,\n\tautoScrollSpeed?: number,\n\tautoScrollEase?: (progress: number) => number,\n\tzoomSpeed?: number,\n\tzoomEase?: (progress: number) => number,\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/interfaces.ts\n **/","import { IIteralable } from './interfaces';\nimport { EASING } from  './Easing';\n\nexport class AnimationManager {\n\n\tisAnimationsEnabled = true;\n\tprivate animations: Animation<any>[] = [];\n\tprivate lastTickTime: number;\n\n\tconstructor() {\n\t}\n\n\tanimate(time: number, timingFunction?: (progress: number) => number): Animation<IIteralable|number> {\n\t\tlet animation = new Animation(this, time, this.lastTickTime, timingFunction);\n\t\tthis.animations.push(animation);\n\t\treturn animation;\n\t}\n\n\tanimateObj(source: IIteralable, target: IIteralable, ) {\n\n\t}\n\n\tsetAimationsEnabled(isEnabled: boolean) {\n\t\tthis.isAnimationsEnabled = isEnabled;\n\t}\n\n\ttick() {\n\t\tlet now = Date.now();\n\t\tlet animations = this.animations;\n\n\t\t// call tick for each animation\n\t\tfor (let i = 0; i < animations.length; i++) {\n\t\t\tlet animation = animations[i];\n\t\t\tif (this.isAnimationsEnabled) {\n\t\t\t\tanimation.tick(now);\n\t\t\t} else {\n\t\t\t\tanimation.completeAndStop();\n\t\t\t}\n\t\t}\n\n\t\t// cleanup completed animations\n\t\tlet i = animations.length;\n\t\twhile (i--) {\n\t\t\tif (animations[i].isFinished) animations.splice(i, 1);\n\t\t}\n\n\t\tthis.lastTickTime = Date.now();\n\t}\n\n\thasActiveAnimations(): boolean {\n\t\treturn this.animations.length > 0;\n\t}\n\n}\n\nexport class Animation<AnimatedObjectType> {\n\n\tprogress = 0;\n\tisFinished = false;\n\tinitialObj: AnimatedObjectType;\n\tsourceObj: AnimatedObjectType;\n\ttargetObject: AnimatedObjectType;\n\tprivate onFinishCb: (progress: number) => any;\n\tprivate onTickCb: (source: AnimatedObjectType, progress: number, k: number) => any;\n\tprivate isStopped = false;\n\n\tconstructor(\n\t\tprivate animationManager: AnimationManager,\n\t\tpublic time: number,\n\t\tprivate startTime: number,\n\t\tpublic easing: (k: number) => any = EASING.Quadratic.Out)\n\t{\n\t}\n\n\ttick(now: number) {\n\t\tif (!this.isStopped) {\n\t\t\tlet progress = this.time > 0 ? ((now - this.startTime) / this.time) : 1;\n\t\t\tthis.setProgress(progress);\n\t\t}\n\t\tlet needToFinish = (this.progress == 1 || this.isStopped) && !this.isFinished;\n\t\tif (needToFinish) this.onFinishHandler();\n\t}\n\n\tfrom<T>(sourceObj: T): Animation<T> {\n\t\tif (typeof sourceObj == 'object') {\n\t\t\tthis.sourceObj = sourceObj as any;\n\t\t\tthis.initialObj = {} as any;\n\t\t\tlet sourceIteralable = sourceObj as IIteralable;\n\t\t\tfor (let key in sourceIteralable) if (typeof sourceIteralable[key] == 'number') {\n\t\t\t\t(this.initialObj as IIteralable)[key] = sourceIteralable[key];\n\t\t\t}\n\n\t\t} else if (typeof sourceObj == 'number') {\n\t\t\tthis.sourceObj = sourceObj;\n\t\t\tthis.initialObj = sourceObj;\n\t\t}\n\t\treturn (this as any) as Animation<T>;\n\t}\n\n\tto(targetObj: AnimatedObjectType): this {\n\t\tthis.targetObject = targetObj;\n\t\tif (typeof this.initialObj == 'object') {\n\t\t\tlet initialIteralable = this.initialObj as IIteralable;\n\t\t\tfor (let key in this.targetObject) {\n\t\t\t\tif (initialIteralable[key] == void 0) delete initialIteralable[key];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tonTick(onTickCb: (source: AnimatedObjectType, progress: number, k: number) => any): this {\n\t\tthis.onTickCb = onTickCb;\n\t\treturn this;\n\t}\n\n\tthen(onFinishCb: (progress: number) => any): this {\n\t\tthis.onFinishCb = onFinishCb;\n\t\treturn this;\n\t}\n\n\tstop() {\n\t\tthis.isStopped = true;\n\t}\n\n\tcompleteAndStop() {\n\t\tthis.setProgress(1);\n\t\tthis.stop();\n\t}\n\n\tprivate setProgress(progress: number) {\n\t\tprogress = Math.min(progress, 1);\n\t\tthis.progress = progress;\n\t\tlet k = this.easing(progress);\n\n\t\tif (typeof this.sourceObj == 'number') {\n\t\t\tlet initialVal = this.initialObj as any as number;\n\t\t\tlet targetVal = this.targetObject as any as number;\n\t\t\tlet sourceVal = this.sourceObj as any as number;\n\t\t\tthis.sourceObj = (initialVal + (targetVal - initialVal) * k) as any as AnimatedObjectType;\n\t\t} else if (this.sourceObj && this.targetObject) {\n\t\t\tfor (let key in this.initialObj) {\n\t\t\t\tlet initialVal = (this.initialObj as IIteralable)[key] as number;\n\t\t\t\tlet targetVal = (this.targetObject as IIteralable)[key] as number;\n\t\t\t\t(this.sourceObj as IIteralable)[key] = initialVal + (targetVal - initialVal) * k;\n\t\t\t}\n\t\t}\n\t\tif (this.onTickCb) this.onTickCb(this.sourceObj, progress, k);\n\t}\n\n\tprivate onFinishHandler() {\n\t\tthis.onFinishCb && this.onFinishCb(this.progress);\n\t\tthis.isFinished = true;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AnimationManager.ts\n **/","/**\n * Easing from tween.js lib https://github.com/tweenjs/tween.js\n **/\nexport const EASING = {\n\n\tLinear: {\n\n\t\tNone: function (k: number) {\n\n\t\t\treturn k;\n\n\t\t}\n\n\t},\n\n\tQuadratic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k * k;\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn k * (2 - k);\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * (--k * (k - 2) - 1);\n\n\t\t}\n\n\t},\n\n\tCubic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k * k * k;\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn --k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tQuartic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn 1 - (--k * k * k * k);\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn - 0.5 * ((k -= 2) * k * k * k - 2);\n\n\t\t}\n\n\t},\n\n\tQuintic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k * k * k * k * k;\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn --k * k * k * k * k + 1;\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * k * k * k * k * k;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * k * k * k + 2);\n\n\t\t}\n\n\t},\n\n\tSinusoidal: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn 1 - Math.cos(k * Math.PI / 2);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn Math.sin(k * Math.PI / 2);\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * k));\n\n\t\t}\n\n\t},\n\n\tExponential: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn k === 0 ? 0 : Math.pow(1024, k - 1);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn k === 1 ? 1 : 1 - Math.pow(2, - 10 * k);\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, k - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (- Math.pow(2, - 10 * (k - 1)) + 2);\n\n\t\t}\n\n\t},\n\n\tCircular: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn 1 - Math.sqrt(1 - k * k);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\treturn Math.sqrt(1 - (--k * k));\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn - 0.5 * (Math.sqrt(1 - k * k) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);\n\n\t\t}\n\n\t},\n\n\tElastic: {\n\n\t\tIn: function (k: number) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn -Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Math.pow(2, -10 * k) * Math.sin((k - 0.1) * 5 * Math.PI) + 1;\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif (k === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (k === 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tk *= 2;\n\n\t\t\tif (k < 1) {\n\t\t\t\treturn -0.5 * Math.pow(2, 10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI);\n\t\t\t}\n\n\t\t\treturn 0.5 * Math.pow(2, -10 * (k - 1)) * Math.sin((k - 1.1) * 5 * Math.PI) + 1;\n\n\t\t}\n\n\t},\n\n\tBack: {\n\n\t\tIn: function (k: number) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn k * k * ((s + 1) * k - s);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\tvar s = 1.70158;\n\n\t\t\treturn --k * k * ((s + 1) * k + s) + 1;\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tvar s = 1.70158 * 1.525;\n\n\t\t\tif ((k *= 2) < 1) {\n\t\t\t\treturn 0.5 * (k * k * ((s + 1) * k - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);\n\n\t\t}\n\n\t},\n\n\tBounce: {\n\n\t\tIn: function (k: number) {\n\n\t\t\treturn 1 - EASING.Bounce.Out(1 - k);\n\n\t\t},\n\n\t\tOut: function (k: number) {\n\n\t\t\tif (k < (1 / 2.75)) {\n\t\t\t\treturn 7.5625 * k * k;\n\t\t\t} else if (k < (2 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;\n\t\t\t} else if (k < (2.5 / 2.75)) {\n\t\t\t\treturn 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;\n\t\t\t} else {\n\t\t\t\treturn 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;\n\t\t\t}\n\n\t\t},\n\n\t\tInOut: function (k: number) {\n\n\t\t\tif (k < 0.5) {\n\t\t\t\treturn EASING.Bounce.In(k * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn EASING.Bounce.Out(k * 2 - 1) * 0.5 + 0.5;\n\n\t\t}\n\n\t}\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Easing.ts\n **/","import {Chart} from \"./Chart\";\nimport Object3D = THREE.Object3D;\n\nexport interface IChartWidgetConstructor {\n\tnew (): ChartWidget;\n\twidgetName: string;\n}\n\n/**\n * base class for all widgets\n * each widget must have widgetName static property\n */\nexport abstract class ChartWidget {\n\tstatic widgetName = '';\n\tprotected chart: Chart;\n\tprivate unbindList: Function[] = [];\n\n\n\tsetupChart(chart: Chart) {\n\t\tthis.chart = chart;\n\t}\n\n\tabstract onReadyHandler(): any;\n\tabstract getObject3D(): Object3D;\n\n\n\tprotected bindEvent(...args: Array<Function | Function[]>): void {\n\t\tlet unbindList: Function[] = [];\n\t\tif (!Array.isArray(args[0])) {\n\t\t\tunbindList.push(args[0] as Function);\n\t\t} else {\n\t\t\tunbindList.push(...args as Function[]);\n\t\t}\n\t\tthis.unbindList.push(...unbindList);\n\t}\n\tprotected unbindEvents() {\n\t\tthis.unbindList.forEach(unbindEvent => unbindEvent());\n\t\tthis.unbindList.length = 0;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Widget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport UVMapping = THREE.UVMapping;\nimport GridHelper = THREE.GridHelper;\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport {GridWidget, IGridParamsForAxis} from \"./GridWidget\";\nimport {Utils} from \"../Utils\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport OrthographicCamera = THREE.OrthographicCamera;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {AXIS_TYPE, AXIS_DATA_TYPE, IAxisOptions} from \"../interfaces\";\nimport { ChartColor } from \"../Color\";\n\n/**\n * widget for drawing axis\n */\nexport class AxisWidget extends ChartWidget {\n\tstatic widgetName = 'Axis';\n\tprivate isDestroyed = false;\n\tprivate object3D: Object3D;\n\tprivate axisXObject: Object3D;\n\tprivate axisYObject: Object3D;\n\tprivate updateAxisXRequest: () => void;\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.axisXObject = new Object3D();\n\t\tthis.axisYObject = new Object3D();\n\t\tthis.object3D.add(this.axisXObject);\n\t\tthis.object3D.add(this.axisYObject);\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\n\t\t// canvas drawing is expensive operation, so when we scroll, redraw must be called only once per second\n\t\tthis.updateAxisXRequest = Utils.throttle(() => this.updateAxis(AXIS_TYPE.X), 1000);\n\n\t\tthis.onScrollChange(\n\t\t\tthis.chart.screen.options.scrollX,\n\t\t\tthis.chart.screen.options.scrollY\n\t\t);\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\tvar state = this.chart;\n\n\t\tthis.bindEvent(\n\t\t\tstate.screen.onTransformationFrame((options) => {\n\t\t\t\tthis.onScrollChange(options.scrollX, options.scrollY);\n\t\t\t}),\n\t\t\tstate.screen.onZoomFrame((options) => {this.onZoomFrame(options)}),\n\t\t\tstate.onDestroy(() => this.onDestroy()),\n\t\t\tstate.onResize(() => this.onResize())\n\t\t);\n\t}\n\n\tprivate onDestroy() {\n\t\tthis.isDestroyed = true;\n\t\tthis.unbindEvents();\n\t}\n\n\tprivate onScrollChange(x: number, y: number) {\n\n\t\tif (y != void 0) {\n\t\t\tthis.axisYObject.position.y = y;\n\t\t\tthis.axisXObject.position.y = y;\n\t\t}\n\n\t\tif (x != void 0) {\n\t\t\tthis.axisYObject.position.x = x;\n\t\t\tthis.updateAxisXRequest();\n\t\t}\n\n\t}\n\n\tprivate onResize() {\n\t\tthis.setupAxis(AXIS_TYPE.X);\n\t\tthis.setupAxis(AXIS_TYPE.Y);\n\t}\n\n\tprivate setupAxis(orientation: AXIS_TYPE) {\n\n\t\tlet isXAxis = orientation == AXIS_TYPE.X;\n\t\tlet {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tlet canvasWidth = 0, canvasHeight = 0;\n\t\tlet axisOptions: IAxisOptions;\n\n\t\t// clean meshes\n\t\tif (isXAxis) {\n\t\t\tthis.axisXObject.traverse(obj => this.axisXObject.remove(obj));\n\t\t\tcanvasWidth = visibleWidth * 3;\n\t\t\tcanvasHeight = 50;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t} else {\n\t\t\tthis.axisYObject.traverse(obj => this.axisYObject.remove(obj));\n\t\t\tcanvasWidth = 50;\n\t\t\tcanvasHeight = visibleHeight * 3;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t}\n\n\t\tvar texture = Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, (ctx) => {\n\t\t\tlet color = new ChartColor(axisOptions.color);\n\t\t\tctx.beginPath();\n\t\t\tctx.font = this.chart.state.font.m;\n\t\t\tctx.fillStyle = color.rgbaStr;\n\t\t\tctx.strokeStyle = color.rgbaStr;\n\t\t});\n\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tvar axisMesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(canvasWidth, canvasHeight),\n\t\t\tmaterial\n\t\t);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisXObject.add(axisMesh);\n\t\t} else {\n\t\t\taxisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t\t\tthis.axisYObject.add(axisMesh);\n\t\t}\n\n\t\tthis.updateAxis(orientation);\n\n\t}\n\t\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate updateAxis(orientation: AXIS_TYPE) {\n\t\tif (this.isDestroyed) return;\n\t\tvar isXAxis = orientation == AXIS_TYPE.X;\n\t\tvar {width: visibleWidth, height: visibleHeight} = this.chart.state;\n\t\tvar {scrollX, scrollY, zoomX, zoomY} = this.chart.screen.options;\n\t\tvar axisOptions: IAxisOptions;\n\t\tvar axisMesh: Mesh;\n\t\tvar axisGridParams: IGridParamsForAxis;\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh = this.axisXObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.xAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t\t} else {\n\t\t\taxisMesh = this.axisYObject.children[0] as Mesh;\n\t\t\taxisOptions = this.chart.state.yAxis;\n\t\t\taxisGridParams = GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t\t}\n\n\t\tvar geometry = axisMesh.geometry as PlaneGeometry;\n\t\tvar canvasWidth = geometry.parameters.width;\n\t\tvar canvasHeight = geometry.parameters.height;\n\t\tvar texture = (axisMesh.material as MeshBasicMaterial).map;\n\t\tvar ctx = texture.image.getContext('2d');\n\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n\t\tif (isXAxis) {\n\t\t\taxisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t\t}\n\n\n\t\t// TODO: draw text and lines in different loops\n\t\tvar edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t\tvar startVal = axisGridParams.start  - edgeOffset;\n\t\tvar endVal = axisGridParams.end + edgeOffset;\n\n\t\tctx.beginPath();\n\t\tfor (let val = startVal; val <= endVal; val += axisGridParams.step) {\n\t\t\tlet displayedValue = '';\n\t\t\tif (isXAxis) {\n\t\t\t\tlet pxVal = this.chart.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(pxVal + 0.5, canvasHeight);\n\t\t\t\t// ctx.lineTo(pxVal + 0.5, canvasHeight - 5);\n\t\t\t\tif (axisOptions.dataType == AXIS_DATA_TYPE.DATE) {\n\t\t\t\t\tdisplayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t\t\t\t} else {\n\t\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\t}\n\n\t\t\t\tctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t\t\t} else {\n\t\t\t\tlet pxVal = canvasHeight - this.chart.screen.getPointOnYAxis(val) + scrollY;\n\t\t\t\tctx.textAlign = \"right\";\n\t\t\t\t// uncomment for dots\n\t\t\t\t// ctx.moveTo(canvasWidth, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(canvasWidth - 5, pxVal + 0.5);\n\n\t\t\t\tdisplayedValue = Number(val.toFixed(14)).toString();\n\t\t\t\tctx.fillText(displayedValue, canvasWidth - 15 , pxVal + 3);\n\n\t\t\t\t// uncomment for left-side axis\n\t\t\t\t// ctx.moveTo(0, pxVal + 0.5);\n\t\t\t\t// ctx.lineTo(5, pxVal + 0.5);\n\t\t\t\t// ctx.fillText(Number(val.toFixed(14)).toString(), 15 , pxVal + 3);\n\t\t\t}\n\t\t\tctx.stroke();\n\t\t}\n\t\t// uncomment to preview canvas borders\n\t\t// ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\t\tctx.stroke();\n\t\tctx.closePath();\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tif (options.zoomX) {\n\t\t\tthis.updateAxis(AXIS_TYPE.X);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.H)\n\t\t}\n\t\tif (options.zoomY) {\n\t\t\tthis.updateAxis(AXIS_TYPE.Y);\n\t\t\t//this.temporaryHideAxis(AXIS_ORIENTATION.V)\n\t\t}\n\t}\n\n\t// private temporaryHideAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar timeoutId = setTimeout(() => {\n\t// \t\t\tthis.showAxis(orientation);\n\t// \t}, 200);\n\t//\n\t// \tif (isXAxis) {\n\t// \t\t(this.axisXObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tclearTimeout(this.showAxisXTimeout);\n\t// \t\tthis.showAxisXTimeout =\ttimeoutId;\n\t// \t} else {\n\t// \t\tclearTimeout(this.showAxisYTimeout);\n\t// \t\t(this.axisYObject.children[0] as Mesh).material.opacity = 0;\n\t// \t\tthis.showAxisYTimeout = timeoutId;\n\t// \t}\n\t// }\n\n\t// private showAxis(orientation: AXIS_TYPE) {\n\t// \tvar isXAxis = orientation == AXIS_TYPE.X;\n\t// \tvar material: MeshBasicMaterial;\n\t// \tif (isXAxis) {\n\t// \t\tmaterial = (this.axisXObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t} else {\n\t// \t\tmaterial = (this.axisYObject.children[0] as Mesh).material as MeshBasicMaterial;\n\t// \t}\n\t// \tthis.updateAxis(orientation);\n\t// \tTweenLite.to(material, 0.3, {opacity: 1});\n\t// }\n\n\tstatic getDateStr(timestamp: number, gridParams: IGridParamsForAxis): string {\n\t\tvar sec = 1000;\n\t\tvar min = sec * 60;\n\t\tvar hour = min * 60;\n\t\tvar day = hour * 60;\n\t\tvar step = gridParams.step;\n\t\tvar d = new Date(timestamp);\n\t\tvar tf = (num: number) => Utils.toFixed(num, 2);\n\t\treturn tf(d.getHours()) + ':' + tf(d.getMinutes()) + ':' + tf(d.getSeconds());\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport {ChartWidget} from \"../Widget\";\nimport LineSegments = THREE.LineSegments;\nimport {Utils} from \"../Utils\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport {IAxisOptions} from \"../interfaces\";\nimport Color = THREE.Color;\nimport {ChartColor} from \"../Color\";\n\nexport interface IGridParamsForAxis {\n\tstart: number,\n\tend: number,\n\tstep: number,\n\tstepInPx: number,\n\tlength: number,\n\tsegmentsCount: number\n}\n\n/**\n * widget for drawing state grid\n */\nexport class GridWidget extends ChartWidget{\n\tstatic widgetName = 'Grid';\n\tprivate lineSegments: LineSegments;\n\tprivate gridSizeH: number;\n\tprivate gridSizeV: number;\n\tprivate isDestroyed = false;\n\n\tonReadyHandler() {\n\t\tvar {width, height, xAxis, yAxis} = this.chart.state;\n\t\tthis.gridSizeH = Math.floor(width / xAxis.grid.minSizePx) * 3;\n\t\tthis.gridSizeV = Math.floor(height / yAxis.grid.minSizePx) * 3;\n\t\tthis.initGrid();\n\t\tthis.updateGrid();\n\t\tthis.bindEvents();\n\t}\n\n\tbindEvents() {\n\t\t// grid is bigger then screen, so it's no need to update it on each scroll event\n\t\tlet updateGridThrottled = Utils.throttle(() => this.updateGrid(), 1000);\n\t\tthis.bindEvent(this.chart.onScroll(() => updateGridThrottled()),\n\t\t\tthis.chart.screen.onZoomFrame((options) => {\n\t\t\t\tupdateGridThrottled();\n\t\t\t\tthis.onZoomFrame(options);\n\t\t\t}),\n\t\t\tthis.chart.onDestroy(() => {\n\t\t\t\tthis.isDestroyed = true;\n\t\t\t\tthis.unbindEvents();\n\t\t\t}),\n\t\t\tthis.chart.onResize(() => {\n\t\t\t\tthis.updateGrid();\n\t\t\t})\n\t\t);\n\n\t}\n\n\tprivate initGrid() {\n\t\tlet color = new ChartColor(this.chart.state.xAxis.grid.color);\n\t\tlet geometry = new THREE.Geometry();\n\t\tlet material = new THREE.LineBasicMaterial({linewidth: 1, color: color.value, opacity: color.a, transparent: true});\n\t\tlet xLinesCount = this.gridSizeH;\n\t\tlet yLinesCount = this.gridSizeV;\n\t\twhile (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\twhile (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t\tthis.lineSegments = new LineSegments(geometry, material);\n\t\tthis.lineSegments.position.setZ(-1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t}\n\n\tprivate updateGrid() {\n\t\tif (this.isDestroyed) return;\n\t\tvar {yAxis, xAxis, width, height} = this.chart.state;\n\t\tvar axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t\tvar axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t\tvar scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t\tvar scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t\tvar gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t\tvar gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t\tvar startXVal = axisXGrid.start + gridScrollXVal;\n\t\tvar startYVal = axisYGrid.start + gridScrollYVal;\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tvar vertices = geometry.vertices;\n\t\tvar lineInd = 0;\n\n\t\tfor (let i =  -this.gridSizeH / 3; i < this.gridSizeH * 2/3; i++) {\n\t\t\tlet value = startXVal + i * axisXGrid.step;\n\t\t\tlet lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tfor (let i =  -this.gridSizeV / 3; i < this.gridSizeV * 2/3; i++) {\n\t\t\tlet value = startYVal + i * axisYGrid.step;\n\t\t\tlet lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t\t\tvertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t\t\tvertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t\t\tlineInd++;\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\tthis.lineSegments.scale.set(\n\t\t\txAxis.range.scaleFactor * xAxis.range.zoom,\n\t\t\tyAxis.range.scaleFactor * yAxis.range.zoom,\n\t\t\t1\n\t\t)\n\t}\n\n\tprivate getHorizontalLineSegment(yVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localYVal = yVal - chartState.state.yAxis.range.zeroVal - scrollYVal;\n\t\tvar widthVal = chartState.pxToValueByXAxis(chartState.state.width);\n\t\treturn [\n\t\t\tnew THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0 ),\n\t\t\tnew THREE.Vector3( -widthVal + scrollXVal, localYVal, 0 )\n\t\t];\n\t}\n\n\tprivate getVerticalLineSegment(xVal: number, scrollXVal: number, scrollYVal: number): Vector3[] {\n\t\tvar chartState = this.chart;\n\t\tvar localXVal = xVal - chartState.state.xAxis.range.zeroVal - scrollXVal;\n\t\tvar heightVal = chartState.pxToValueByYAxis(chartState.state.height);\n\t\treturn [\n\t\t\tnew THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0 ),\n\t\t\tnew THREE.Vector3(localXVal, -heightVal + scrollYVal, 0 )\n\t\t];\n\t}\n\n\tprivate onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar {xAxis, yAxis} = this.chart.state;\n\t\tif (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t\tif (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t}\n\n\n\t// TODO: move this code to core\n\tstatic getGridParamsForAxis(axisOptions: IAxisOptions, axisWidth: number, zoom: number): IGridParamsForAxis {\n\t\tlet axisRange = axisOptions.range;\n\t\tlet from = axisRange.from;\n\t\tlet to = axisRange.to;\n\t\tlet axisLength = to - from;\n\t\tlet gridStep = 0;\n\t\tlet gridStepInPixels = 0;\n\t\tlet minGridStepInPixels = axisOptions.grid.minSizePx;\n\t\tlet axisLengthStr = String(axisLength);\n\t\tlet axisLengthPointPosition = axisLengthStr.indexOf('.');\n\t\tlet intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\n\t\tlet gridStepFound = false;\n\t\tlet digitPos = 0;\n\t\twhile (!gridStepFound) {\n\n\t\t\tlet power = intPartLength - digitPos - 1;\n\t\t\tlet multiplier = (Math.pow(10, power) || 1);\n\t\t\tlet dividers = [1, 2, 5];\n\t\t\tfor (let dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t\t\t\tlet nextGridStep = multiplier / dividers[dividerInd];\n\t\t\t\tlet nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t\t\t\tif (nextGridStepInPixels >= minGridStepInPixels) {\n\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t} else {\n\t\t\t\t\tgridStepFound = true;\n\t\t\t\t\tif (gridStep === 0) {\n\t\t\t\t\t\tgridStep = nextGridStep;\n\t\t\t\t\t\tgridStepInPixels = nextGridStepInPixels;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!gridStepFound) digitPos++\n\n\t\t}\n\n\t\tvar gridStart = Math.floor(from / gridStep) * gridStep;\n\t\tvar gridEnd = Math.floor(to / gridStep) * gridStep;\n\n\t\treturn {\n\t\t\tstart: gridStart,\n\t\t\tend: gridEnd,\n\t\t\tstep: gridStep,\n\t\t\tstepInPx: gridStepInPixels,\n\t\t\tlength: gridEnd - gridStart,\n\t\t\tsegmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t\t}\n\t}\n\t\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/GridWidget.ts\n **/","export declare type TChartColor = string | number;\n\n\nexport class ChartColor {\n\n\t/**!\n\t * @preserve $.parseColor\n\t * Copyright 2011 THEtheChad Elliott\n\t * Released under the MIT and GPL licenses.\n\t */\n\t/**\n\t * Parse hex/rgb{a} color syntax.\n\t * @input string\n\t * @returns array [r,g,b{,o}]\n\t */\n\tstatic parseColor(color: string): number[] {\n\n\t\tvar cache: any\n\t\t\t, p = parseInt // Use p as a byte saving reference to parseInt\n\t\t\t, color = color.replace(/\\s\\s*/g, '') // Remove all spaces\n\t\t\t;//var\n\n\t\t// Checks for 6 digit hex and converts string to integer\n\t\tif (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16)];\n\n\t\t// Checks for 3 digit hex and converts string to integer\n\t\telse if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color))\n\t\t\tcache = [p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17];\n\n\n\t\t// Checks for 6 digit hex with alpha and converts string to integer\n\t\telse if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color))\n\t\t\tcache = [p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4]];\n\n\t\t// Checks for rgba and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3], +cache[4]];\n\n\t\t// Checks for rgb and converts string to\n\t\t// integer/float using unary + operator to save bytes\n\t\telse if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color))\n\t\t\tcache = [+cache[1], +cache[2], +cache[3]];\n\n\t\t// Otherwise throw an exception to make debugging easier\n\t\telse throw Error(color + ' is not supported by parseColor');\n\n\t\t// Performs RGBA conversion by default\n\t\tisNaN(cache[3]) && (cache[3] = 1);\n\t\treturn cache;\n\t\t// Adds or removes 4th value based on rgba support\n\t\t// Support is flipped twice to prevent erros if\n\t\t// it's not defined\n\t\t//return cache.slice(0,3 + !!$.support.rgba);\n\t}\n\n\tr: number;\n\tg: number;\n\tb: number;\n\ta: number;\n\tvalue: number;\n\thexStr: string;\n\trgbaStr: string;\n\n\tconstructor (color: TChartColor) {\n\t\tthis.set(color);\n\t}\n\n\tset(color: TChartColor) {\n\t\tif (typeof color == 'number') {\n\t\t\tcolor = (color as number).toString(16);\n\t\t\tcolor = '#' + '0'.repeat(6 - color.length) + color;\n\t\t}\n\t\tlet colorStr = color as string;\n\t\tlet rgba = ChartColor.parseColor(colorStr);\n\t\tthis.r = rgba[0];\n\t\tthis.g = rgba[1];\n\t\tthis.b = rgba[2];\n\t\tthis.a = rgba[3];\n\t\tthis.value = (rgba[0] << (8 * 2)) + (rgba[1] << 8) + rgba[2];\n\t\tthis.hexStr = '#' + this.value.toString(16);\n\t\tthis.rgbaStr = `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`;\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Color.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {ITrendOptions} from \"../Trend\";\nimport {Utils} from \"../Utils\";\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport { ChartColor } from '../Color';\n\nexport class TrendsGradientWidget extends TrendsWidget<TrendGradient> {\n\tstatic widgetName = \"TrendsGradient\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendGradient;\n\t}\n}\n\n\nexport class TrendGradient extends TrendWidget {\n\tprivate gradient: Mesh;\n\tprivate visibleSegmentsCnt = 0;\n\tprivate segmentsIds: Uint16Array;\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.hasBackground;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.trend = chartState.trendsManager.getTrend(trendName);\n\t\tthis.segmentsIds = new Uint16Array(chartState.state.maxVisibleSegments)\n\t\tthis.initGradient();\n\t\tthis.updateSegments();\n\t}\n\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\t// TODO: optimize updateSegments for onDisplayedRangeChanged\n\t\t\tthis.updateSegments();\n\t\t}));\n\t\tthis.bindEvent(this.chart.onZoom(() => {\n\t\t\tthis.updateSegments();\n\t\t}));\n\t}\n\n\n\tgetObject3D(): Object3D {\n\t\treturn this.gradient;\n\t}\n\n\n\tinitGradient() {\n\t\tlet geometry = new Geometry();\n\n\n\t\tfor (let i = 0; i < this.segmentsIds.length; i++) {\n\t\t\tgeometry.vertices.push(\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3(),\n\t\t\t\tnew THREE.Vector3()\n\t\t\t);\n\t\t\tlet ind = i * 4;\n\n\t\t\t// gradient segment scheme\n\t\t\t//\n\t\t\t// vert0 +---+ vert3\n\t\t\t//       |\\  |\n\t\t\t// face1 | \\ | face2\n\t\t\t// \t     |  \\|\n\t\t\t// vert1 +---+ vert2\n\n\t\t\tgeometry.faces.push(\n\t\t\t\tnew THREE.Face3( ind, ind + 1, ind + 2 ),\n\t\t\t\tnew THREE.Face3( ind + 3, ind, ind + 2 )\n\t\t\t);\n\t\t}\n\n\t\tlet color = new ChartColor(this.trend.getOptions().backgroundColor);\n\t\tthis.gradient = new THREE.Mesh(\n\t\t\tgeometry,\n\t\t\tnew THREE.MeshBasicMaterial( {color: color.value, transparent: true, opacity: color.a} )\n\t\t);\n\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.gradient.frustumCulled = false;\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tvar currentScale = this.gradient.scale;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegmentsManager: TrendSegmentsManager) {\n\t\tlet animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n\t\tfor (let i = 0; i < this.visibleSegmentsCnt; i++) {\n\t\t\tlet segmentId = this.segmentsIds[i];\n\t\t\tif (!animatedSegmentsIds.includes(segmentId)) continue;\n\t\t\tthis.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n\t\t}\n\t\t(this.gradient.geometry as PlaneGeometry).verticesNeedUpdate = true;\n\t}\n\n\n\tprivate updateSegments() {\n\t\tlet geometry = this.gradient.geometry as PlaneGeometry;\n\t\tlet {\n\t\t\tsegments: trendSegments,\n\t\t\tfirstDisplayedSegmentInd: segmentInd,\n\t\t\tlastDisplayedSegmentInd\n\t\t} = this.trend.segmentsManager;\n\t\tlet prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n\t\tthis.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n\t\tlet segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n\n\t\tif (segmentsToProcessCnt > this.segmentsIds.length) {\n\t\t\tUtils.error(TrendsGradientWidget.widgetName + ': MAX_SEGMENTS reached');\n\t\t}\n\n\t\t// setup visible segments and collapse invisible\n\t\tfor (let i = 0; i <= segmentsToProcessCnt; i++) {\n\t\t\tif (segmentInd <= lastDisplayedSegmentInd) {\n\t\t\t\tlet segment = trendSegments[segmentInd];\n\t\t\t\tthis.setupSegmentVertices(i, segment.currentAnimationState);\n\t\t\t\tthis.segmentsIds[i] = segment.id;\n\t\t\t\tsegmentInd++;\n\t\t\t} else {\n\t\t\t\tthis.setupSegmentVertices(i);\n\t\t\t}\n\t\t}\n\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\t/**\n\t * setup gradient segment by segmentState\n\t * if segmentState is undefined, then collapse vertices to 0,0,0\n\t */\n\tprivate setupSegmentVertices(segmentInd: number, segmentState?: ITrendSegmentState) {\n\t\tlet gradientSegmentInd = segmentInd * 4;\n\t\tlet vertices = (this.gradient.geometry as PlaneGeometry).vertices;\n\t\tlet\ttopLeft = vertices[gradientSegmentInd];\n\t\tlet\tbottomLeft = vertices[gradientSegmentInd + 1];\n\t\tlet\tbottomRight = vertices[gradientSegmentInd + 2];\n\t\tlet\ttopRight = vertices[gradientSegmentInd + 3];\n\t\tlet screenHeightVal = Math.max(\n\t\t\tthis.chart.pxToValueByYAxis(this.chart.state.height),\n\t\t\tthis.chart.screen.pxToValueByYAxis(this.chart.state.height)\n\t\t);\n\n\t\tif (segmentState) {\n\t\t\tlet startX = this.toLocalX(segmentState.startXVal);\n\t\t\tlet startY = this.toLocalY(segmentState.startYVal);\n\t\t\tlet endX = this.toLocalX(segmentState.endXVal);\n\t\t\tlet endY = this.toLocalY(segmentState.endYVal);\n\t\t\ttopLeft.set(startX, startY, 0);\n\t\t\ttopRight.set(endX, endY, 0);\n\t\t\tbottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n\t\t\tbottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n\t\t} else {\n\t\t\ttopLeft.set(0, 0, 0);\n\t\t\ttopRight.set(0, 0, 0);\n\t\t\tbottomLeft.set(0, 0, 0);\n\t\t\tbottomRight.set(0, 0, 0);\n\t\t}\n\n\t}\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsGradientWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport {ITrendOptions, ITrendData, Trend} from \"../Trend\";\nimport Vector2 = THREE.Vector2;\nimport Vector3 = THREE.Vector3;\nimport {TrendSegmentsManager} from \"../TrendSegmentsManager\";\nimport {IScreenTransformOptions} from \"../Screen\";\n\n\nexport interface ITrendWidgetClass<TrendWidgetType> {\n\tnew (chart: Chart, trendName: string): TrendWidgetType;\n\twidgetIsEnabled(trendOptions: ITrendOptions, chart: Chart): boolean;\n}\n\n/**\n * abstract manager class for all trends widgets\n */\nexport abstract class TrendsWidget<TrendWidgetType extends TrendWidget> extends ChartWidget {\n\tprotected abstract getTrendWidgetClass(): ITrendWidgetClass<TrendWidgetType>;\n\tprotected object3D: Object3D;\n\tprotected widgets: {[trendName: string]: TrendWidgetType} = {};\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.onTrendsChange();\n\t\tthis.bindEvents();\n\t}\n\n\tprotected bindEvents() {\n\t\tvar state = this.chart;\n\t\tstate.onTrendsChange(() => this.onTrendsChange());\n\t\tstate.onTrendChange((trendName: string, changedOptions: ITrendOptions, newData: ITrendData) => {\n\t\t\tthis.onTrendChange(trendName, changedOptions, newData)\n\t\t});\n\t}\n\n\tprotected onTrendsChange() {\n\t\tvar trendsOptions = this.chart.state.trends;\n\t\tvar TrendWidgetClass = this.getTrendWidgetClass();\n\t\tfor (let trendName in trendsOptions) {\n\t\t\tlet trendOptions = trendsOptions[trendName];\n\t\t\tlet widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chart);\n\t\t\tif (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t\t\t\tthis.createTrendWidget(trendName);\n\t\t\t} else if (!widgetCanBeEnabled && this.widgets[trendName]){\n\t\t\t\tthis.destroyTrendWidget(trendName);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onTrendChange(trendName: string, changedOptions: ITrendOptions, newData: ITrendData) {\n\t\tvar widget = this.widgets[trendName];\n\t\tif (!widget) return;\n\t\twidget.onTrendChange(changedOptions);\n\t\tif (newData) {\n\t\t\tvar data = this.chart.getTrend(trendName).getData();\n\t\t\tvar isAppend = (!data.length || data[0].xVal < newData[0].xVal);\n\t\t\tisAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t\t}\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.object3D;\n\t}\n\n\tprivate createTrendWidget(trendName: string) {\n\t\tvar WidgetConstructor = this.getTrendWidgetClass();\n\t\tvar widget = new WidgetConstructor(this.chart, trendName);\n\t\tthis.widgets[trendName] = widget;\n\t\tvar widgetObject = widget.getObject3D();\n\t\twidgetObject.name = trendName;\n\t\tthis.object3D.add(widget.getObject3D());\n\t}\n\n\tprivate destroyTrendWidget(trendName: string) {\n\t\tthis.widgets[trendName].onDestroy();\n\t\tdelete this.widgets[trendName];\n\t\tvar widgetObject = this.object3D.getObjectByName(trendName);\n\t\tthis.object3D.remove(widgetObject);\n\t}\n}\n\n/**\n * based class for all trends widgets\n */\nexport abstract class TrendWidget {\n\tprotected trend: Trend;\n\tprotected unbindList: Function[] = [];\n\n\tconstructor (protected chart: Chart, protected trendName: string) {\n\t\tthis.trend = chart.trendsManager.getTrend(trendName);\n\t\tthis.chart = chart;\n\t\tthis.bindEvents();\n\t}\n\tabstract getObject3D(): Object3D;\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions, chart: Chart) {\n\t\treturn trendOptions.enabled;\n\t}\n\tappendData(newData: ITrendData) {};\n\tprependData(newData: ITrendData) {};\n\tonTrendChange(changedOptions?: ITrendOptions) {}\n\tonDestroy() {\n\t\tfor (let unsubscriber of this.unbindList) {\n\t\t\tunsubscriber();\n\t\t}\n\t}\n\tprotected onSegmentsAnimate(segments: TrendSegmentsManager) {\n\t}\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onTransformationFrame(options: IScreenTransformOptions) {\n\t}\n\tprotected onZoom() {\n\t}\n\n\n\tprotected bindEvents() {\n\n\t\tthis.bindEvent(this.trend.segmentsManager.onAnimationFrame(\n\t\t\t(trendPoints: TrendSegmentsManager) => this.onSegmentsAnimate(trendPoints)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.screen.onTransformationFrame(\n\t\t\t(options) => this.onTransformationFrame(options)\n\t\t));\n\t\t\n\t\tthis.bindEvent(this.chart.screen.onZoomFrame(\n\t\t\t(options) => this.onZoomFrame(options)\n\t\t));\n\n\t\tthis.bindEvent(this.chart.onZoom(() => this.onZoom()));\n\t};\n\n\tprotected bindEvent(unbind: Function) {\n\t\tthis.unbindList.push(unbind);\n\t}\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsWidget.ts\n **/","import Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport {Chart} from \"../Chart\";\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport {TrendsWidget, TrendWidget} from \"./TrendsWidget\";\nimport { TrendSegmentsManager, ITrendSegmentState } from \"../TrendSegmentsManager\";\nimport LineSegments = THREE.LineSegments;\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ITrendOptions, TREND_TYPE } from '../Trend';\nimport { Utils } from '../Utils';\n\n\n/**\n * widget for drawing trends lines\n */\nexport class TrendsLineWidget extends TrendsWidget<TrendLine> {\n\tstatic widgetName = \"TrendsLine\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendLine;\n\t}\n}\n\ninterface ILineSegment {\n\tind: number,\n\tsegmentId: number\n}\n\nexport class TrendLine extends TrendWidget {\n\tprivate material: LineBasicMaterial;\n\tprivate lineSegments: LineSegments;\n\tprivate vertices: Vector3[];\n\n\t// contains indexes of free segments\n\tprivate freeSegmentsInds: number[] = [];\n\n\t// contains segments to display\n\tprivate displayedSegments: {[segmentId: number]: ILineSegment} = {};\n\t\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.LINE;\n\t}\n\t\n\tconstructor (chart: Chart, trendName: string) {\n\t\tsuper(chart, trendName);\n\t\tvar options = this.trend.getOptions();\n\t\tthis.material = new LineBasicMaterial( { color: options.lineColor, linewidth: options.lineWidth } );\n\t\tthis.initLine();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.lineSegments;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroySegments();\n\t\t\tthis.setupSegments();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupSegments();\n\t\t}));\n\t}\n\t\n\tprivate initLine() {\n\t\tlet geometry = new Geometry();\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = this.chart.state.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = this.chart.state.yAxis.range;\n\t\tthis.lineSegments = new LineSegments(geometry, this.material);\n\t\tthis.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.lineSegments.frustumCulled = false;\n\t\tfor (let i = 0; i < this.chart.state.maxVisibleSegments; i++) {\n\t\t\tgeometry.vertices.push(new  Vector3(), new Vector3());\n\t\t\tthis.freeSegmentsInds.push(i);\n\t\t}\n\t\tthis.vertices = geometry.vertices;\n\t\tthis.setupSegments();\n\t}\n\n\tprivate setupSegments() {\n\t\tlet geometry = this.lineSegments.geometry as Geometry;\n\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.displayedSegments) {\n\t\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\t\tlet segment = this.trend.segmentsManager.segments[lineSegment.segmentId];\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupSegment(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate setupSegment(segmentId: number, segmentState: ITrendSegmentState) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tif (!lineSegment) {\n\t\t\tif (this.freeSegmentsInds.length == 0) Utils.error('Max allocated segments reached');\n\t\t\tlet ind = this.freeSegmentsInds.pop();\n\t\t\tlineSegment = this.displayedSegments[segmentId] = {segmentId, ind};\n\t\t}\n\t\tlet segmentInd = lineSegment.ind;\n\t\tlet lineStartVertex = this.vertices[segmentInd * 2];\n\t\tlet lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t\tlineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t\tlineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t}\n\n\tprivate destroySegments() {\n\t\tfor (let segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t}\n\n\tprivate destroySegment(segmentId: number) {\n\t\tlet lineSegment = this.displayedSegments[segmentId];\n\t\tlet lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t\tlet lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t\tlineStartVertex.set(0, 0, 0);\n\t\tlineEndVertex.set(0, 0, 0);\n\t\tdelete this.displayedSegments[segmentId];\n\t\tthis.freeSegmentsInds.push(lineSegment.ind);\n\t}\n\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.lineSegments.scale;\n\t\tlet state = this.chart.state;\n\t\tlet scaleXFactor = state.xAxis.range.scaleFactor;\n\t\tlet scaleYFactor = state.yAxis.range.scaleFactor;\n\t\tif (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t}\n\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tvar geometry = this.lineSegments.geometry as Geometry;\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.displayedSegments[segmentId]) continue;\n\t\t\tthis.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t\t}\n\t\tgeometry.verticesNeedUpdate = true;\n\t}\n\n\n\tprivate toLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\tprivate toLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsLineWidget.ts\n **/","\n\nimport { TrendsWidget, TrendWidget } from './TrendsWidget';\nimport { Chart } from '../Chart';\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport { IScreenTransformOptions } from '../Screen';\nimport { TrendSegmentsManager, ITrendSegmentState } from '../TrendSegmentsManager';\nimport Vector3 = THREE.Vector3;\nimport Mesh = THREE.Mesh;\nimport Line = THREE.Line;\nimport BoxGeometry = THREE.BoxGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport { TREND_TYPE, ITrendOptions } from '../Trend';\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport remove = THREE.Cache.remove;\nimport { Utils } from '../Utils';\n\n\nconst RISE_COLOR = 0x2CAC40;\nconst FALL_COLOR = 0xEE5533;\nconst MARGIN_PERCENT = 0.3;\nconst MAX_CANDLES = 100;\n\n/**\n * widget for drawing trends candles\n */\nexport class TrendsCandlesWidget extends TrendsWidget<TrendCandlesWidget> {\n\tstatic widgetName = \"TrendsCandles\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendCandlesWidget;\n\t}\n}\n\n\nexport class TrendCandlesWidget extends TrendWidget {\n\tprivate scaleXFactor: number;\n\tprivate scaleYFactor: number;\n\tprivate object3D: Object3D;\n\t\n\t// contains indexes of free candles\n\tprivate freeCandlesInds: number[] = [];\n\tprivate candlesPool: CandleWidget[] = [];\n\tprivate candles: {[segmentId: number]: CandleWidget} = {};\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.type == TREND_TYPE.CANDLE;\n\t}\n\n\tconstructor (chartState: Chart, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.initObject();\n\t}\n\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.trend.segmentsManager.onRebuild(() => {\n\t\t\tthis.destroyCandles();\n\t\t\tthis.setupCandles();\n\t\t}));\n\t\tthis.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(() => {\n\t\t\tthis.setupCandles();\n\t\t}));\n\t}\n\t\n\tprivate initObject() {\n\t\tlet stateData = this.chart.state;\n\t\tlet {scaleFactor: scaleXFactor, zoom: zoomX} = stateData.xAxis.range;\n\t\tlet {scaleFactor: scaleYFactor, zoom: zoomY} = stateData.yAxis.range;\n\t\tthis.scaleXFactor = scaleXFactor;\n\t\tthis.scaleYFactor = scaleYFactor;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t\tthis.object3D.frustumCulled = false;\n\t\tfor (let i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t\tthis.setupCandles();\n\t}\n\n\tprivate setupCandles() {\n\n\t\t// remove invisible\n\t\tlet {firstDisplayedSegment, lastDisplayedSegment} = this.trend.segmentsManager;\n\n\t\tfor (let segmentId in this.candles) {\n\t\t\tlet segment = this.candles[segmentId].segment;\n\t\t\tlet segmentIsNotDisplayed = (\n\t\t\t\tsegment.startXVal < firstDisplayedSegment.startXVal ||\n\t\t\t\tsegment.endXVal > lastDisplayedSegment.endXVal\n\t\t\t);\n\t\t\tif (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t\t}\n\n\t\tlet segment = firstDisplayedSegment;\n\t\twhile (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t\t\tthis.setupCandle(segment.id, segment.currentAnimationState);\n\t\t\tsegment = segment.getNext();\n\t\t}\n\t}\n\n\tprivate destroyCandles() {\n\t\tfor (let segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t}\n\n\tprivate destroyCandle(segmentId: number) {\n\t\tlet candle = this.candles[segmentId];\n\t\tthis.object3D.remove(candle.getObject3D());\n\t\tdelete this.candles[segmentId];\n\t}\n\n\tprotected onZoomFrame(options: IScreenTransformOptions) {\n\t\tvar currentScale = this.object3D.scale;\n\t\tif (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t\tif (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t}\n\n\tprotected onSegmentsAnimate(trendSegments: TrendSegmentsManager) {\n\t\tfor (let segmentId of trendSegments.animatedSegmentsIds) {\n\t\t\tif (!this.candles[segmentId]) continue;\n\t\t\tlet segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t\t\tthis.setupCandle(segmentId, segmentState);\n\t\t}\n\t}\n\n\t/**\n\t * create or modify candle\n\t */\n\tprivate setupCandle(candleId: number, segmentState: ITrendSegmentState) {\n\t\tlet candleInd = candleId % MAX_CANDLES;\n\n\t\t// get candle from candlesPool to avoid creating new Objects by performance reasons\n\t\tlet candle = this.candlesPool[candleInd];\n\t\tif (!candle) {\n\t\t\tcandle = this.candlesPool[candleInd] = new CandleWidget();\n\t\t}\n\n\t\tif (!this.candles[candleId]) {\n\t\t\tthis.candles[candleId] = candle;\n\t\t\tthis.object3D.add(candle.getObject3D());\n\t\t}\n\t\tcandle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t\tcandle.setSegment(segmentState);\n\t}\n\n\ttoLocalX(xVal: number): number {\n\t\treturn xVal - this.chart.state.xAxis.range.zeroVal;\n\t}\n\n\ttoLocalY(yVal: number): number {\n\t\treturn yVal - this.chart.state.yAxis.range.zeroVal;\n\t}\n\n\ttoLocalVec(vec: Vector3): Vector3 {\n\t\treturn new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t}\n}\n\nclass CandleWidget {\n\tsegment: ITrendSegmentState;\n\tprivate rect: Mesh;\n\tprivate vLine: Line;\n\tprivate hLine: Line;\n\tconstructor () {\n\t\tthis.initObject();\n\t}\n\n\tgetObject3D(): Object3D {\n\t\treturn this.rect;\n\t}\n\n\tsetSegment(segment: ITrendSegmentState) {\n\t\tthis.segment = segment;\n\t\tlet color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\n\t\t// update rect\n\t\tlet geometry = this.rect.geometry as PlaneGeometry;\n\t\tlet material = this.rect.material as MeshBasicMaterial;\n\t\tlet width = segment.endXVal - segment.startXVal;\n\t\twidth -= width * MARGIN_PERCENT;\n\t\tlet height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t\tlet [leftTop, rightTop, leftBottom, rightBottom] = geometry.vertices;\n\t\tleftTop.set(-width / 2, height / 2, 0);\n\t\trightTop.set(width / 2, height / 2, 0);\n\t\tleftBottom.set(-width / 2, -height / 2, 0);\n\t\trightBottom.set(width / 2, -height / 2, 0);\n\n\t\t// prevent to draw bars with height < 1px\n\t\tif (Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t\t\tleftBottom.setY(leftBottom.y + 1);\n\t\t\trightBottom.setY(rightBottom.y + 1);\n\t\t}\n\n\t\tmaterial.color.set(color);\n\t\tgeometry.verticesNeedUpdate = true;\n\n\t\t// update lines\n\t\tlet vLineGeometry = this.vLine.geometry as Geometry;\n\t\tlet vLineMaterial = this.vLine.material as LineBasicMaterial;\n\t\tlet lineTop = segment.maxYVal - segment.yVal;\n\t\tlet lineBottom = segment.minYVal - segment.yVal;\n\t\tvLineGeometry.vertices[0].set(0, lineTop, 0);\n\t\tvLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t\tvLineMaterial.color.set(color);\n\t\tvLineGeometry.verticesNeedUpdate = true;\n\n\t\tlet hLineGeometry = this.hLine.geometry as Geometry;\n\t\tlet hLineMaterial = this.hLine.material as LineBasicMaterial;\n\t\tlet lineLeft = (-width) / 2;\n\t\tlet lineRight = width / 2;\n\t\thLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t\thLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t\thLineMaterial.color.set(color);\n\t\thLineGeometry.verticesNeedUpdate = true;\n\n\t}\n\n\tprivate initObject() {\n\t\tthis.rect = new Mesh(\n\t\t\tnew PlaneGeometry(1, 1),\n\t\t\tnew MeshBasicMaterial()\n\t\t);\n\t\tlet vLineGeometry = new Geometry();\n\t\tlet hLineGeometry = new Geometry();\n\t\tvLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\thLineGeometry.vertices.push(new Vector3(), new Vector3);\n\t\tthis.vLine = new Line(vLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.hLine = new Line(hLineGeometry, new LineBasicMaterial({linewidth: 1}));\n\t\tthis.rect.add(this.vLine);\n\t\tthis.rect.add(this.hLine);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/TrendsCandleWidget.ts\n **/","\nimport {ChartWidget} from \"../Widget\";\nimport {Chart} from \"../Chart\";\nimport Object3D = THREE.Object3D;\nimport Geometry = THREE.Geometry;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Vector3 = THREE.Vector3;\nimport {Utils} from \"../Utils\";\nimport Line = THREE.Line;\nimport Mesh = THREE.Mesh;\nimport Color = THREE.Color;\nimport Texture = THREE.Texture;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport {AxisMark, AxisMarks} from \"../AxisMarks\";\nimport {AXIS_TYPE} from \"../interfaces\";\nimport {IScreenTransformOptions} from \"../Screen\";\nimport { ChartColor } from '../Color';\n\n\n/**\n * widget for shows marks on axis\n */\nexport class AxisMarksWidget extends ChartWidget {\n\tstatic widgetName = 'AxisMarks';\n\n\tprivate object3D: Object3D;\n\tprivate axisMarksWidgets: AxisMarkWidget[] = [];\n\n\tonReadyHandler() {\n\t\tthis.object3D = new Object3D();\n\t\tlet {xAxisMarks, yAxisMarks} = this.chart;\n\n\t\tlet items = xAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t\titems = yAxisMarks.getItems();\n\t\tfor (var markName in items) {\n\t\t\tthis.createAxisMark(items[markName]);\n\t\t}\n\t\tthis.bindEvents();\n\t}\n\n\tprivate createAxisMark(axisMark: AxisMark) {\n\t\tvar axisMarkWidget = new AxisMarkWidget(this.chart, axisMark);\n\t\tthis.axisMarksWidgets.push(axisMarkWidget);\n\t\tthis.object3D.add(axisMarkWidget.getObject3D());\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.bindEvent(\n\t\t\tthis.chart.screen.onTransformationFrame(() => this.updateMarksPositions()),\n\t\t\tthis.chart.onResize(() => this.updateMarksPositions())\n\t\t);\n\t}\n\n\tprivate updateMarksPositions() {\n\t\tfor (let widget of this.axisMarksWidgets) widget.updatePosition();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n}\n\n\n\nconst DEFAULT_INDICATOR_RENDER_FUNCTION = (axisMarkWidget: AxisMarkWidget, ctx: CanvasRenderingContext2D) => {\n\tvar axisMark = axisMarkWidget.axisMark;\n\tctx.fillStyle = axisMark.options.lineColor;\n\tctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\tlet xCoord = 15;\n\n\tif (axisMark.axisType == AXIS_TYPE.Y) {\n\t\tctx.textAlign = 'end';\n\t\txCoord = axisMarkWidget.indicatorWidth;\n\t}\n\n\tctx.fillText(axisMark.options.title, xCoord, 20);\n\tif (!axisMark.options.showValue) return;\n\n\tctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n\tctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n};\n\nlet INDICATOR_POS_Z = 0.1;\n\nclass AxisMarkWidget {\n\tstatic typeName = 'simple';\n\taxisMark: AxisMark;\n\tindicatorWidth = 128;\n\tindicatorHeight = 64;\n\tprotected indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\tprotected chartState: Chart;\n\tprotected axisType: AXIS_TYPE;\n\tprotected object3D: Object3D;\n\tprotected line: Line;\n\tprotected indicator: Mesh;\n\tprotected moveAnimation: TweenLite;\n\tprotected frameValue: number;\n\t\n\n\tconstructor(chartState: Chart, axisMark: AxisMark) {\n\t\tthis.chartState = chartState;\n\t\tthis.axisMark = axisMark;\n\t\tthis.axisType = axisMark.axisType;\n\t\tthis.frameValue = axisMark.options.value;\n\t\tthis.object3D = new Object3D();\n\t\tthis.object3D.position.setZ(-0.1);\n\n\t\tthis.line = this.createLine();\n\t\tthis.object3D.add(this.line);\n\t\tthis.indicator = this.createIndicator();\n\t\tthis.object3D.add(this.indicator);\n\t\tthis.renderIndicator();\n\t\tthis.updatePosition();\n\t\tthis.bindEvents();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tprotected createLine(): Line {\n\t\tvar {lineWidth, lineColor} = this.axisMark.options;\n\t\tvar lineGeometry = new Geometry();\n\n\t\tlineGeometry.vertices.push(new Vector3(0,0,0), new Vector3(0,0,0));\n\t\treturn new Line(\n\t\t\tlineGeometry,\n\t\t\tnew LineBasicMaterial( { color: new ChartColor(lineColor).value, linewidth: lineWidth})\n\t\t);\n\t}\n\n\tprotected createIndicator(): Mesh {\n\t\tvar {indicatorWidth: width, indicatorHeight: height} = this;\n\t\tvar texture = Utils.createPixelPerfectTexture(width, height, (ctx) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.font = \"10px Arial\";\n\t\t});\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\treturn new Mesh(\n\t\t\tnew THREE.PlaneGeometry(width, height),\n\t\t\tmaterial\n\t\t);\n\t}\n\n\tprotected renderIndicator() {\n\t\tvar texture = (this.indicator.material as MeshBasicMaterial).map as Texture;\n\t\tvar ctx = (texture.image as HTMLCanvasElement).getContext('2d');\n\t\tDEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t\ttexture.needsUpdate = true;\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.axisMark.onDisplayedValueChange(() => this.renderIndicator());\n\t\tthis.axisMark.onValueChange(() => this.onValueChangeHandler());\n\t}\n\n\tprivate onValueChangeHandler() {\n\t\t// move mark to new position with animation\n\t\tif (this.moveAnimation) this.moveAnimation.kill();\n\t\tvar animations = this.chartState.state.animations;\n\t\tvar targetValue = this.axisMark.options.value;\n\t\tvar cb = () => {\n\t\t\tthis.updatePosition();\n\t\t};\n\t\tif (animations.enabled) {\n\t\t\tthis.moveAnimation = TweenLite.to(\n\t\t\t\tthis, animations.trendChangeSpeed,\n\t\t\t\t{frameValue: targetValue, ease: animations.trendChangeEase}\n\t\t\t);\n\t\t\tthis.moveAnimation.eventCallback('onUpdate', cb);\n\t\t} else {\n\t\t\tthis.frameValue = targetValue;\n\t\t\tcb();\n\t\t}\n\t}\n\n\tupdatePosition()  {\n\t\tlet chartState = this.chartState;\n\t\tlet screen = chartState.screen;\n\t\tlet isXAxis = this.axisType == AXIS_TYPE.X;\n\t\tlet lineGeometry = (this.line.geometry as Geometry);\n\t\tlet hasStickMode = this.axisMark.options.stickToEdges;\n\t\tlet {width, height} = this.chartState.state;\n\n\t\tif (isXAxis) {\n\t\t\t// TODO: make stickToEdges mode for AXIS_TYPE.X \n\t\t\tthis.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\tlineGeometry.vertices[1].setY(height);\n\t\t\tthis.indicator.position.set(\n\t\t\t\tthis.indicatorWidth / 2,\n\t\t\t\tchartState.state.height - this.indicatorHeight / 2,\n\t\t\t\tINDICATOR_POS_Z\n\t\t\t);\n\t\t} else {\n\t\t\tlet val = this.frameValue;\n\t\t\tlet bottomVal = screen.getBottomVal();\n\t\t\tlet topVal = screen.getTopVal();\n\t\t\tlet needToStickOnTop = hasStickMode && val > topVal;\n\t\t\tlet needToStickOnBottom = hasStickMode && val < bottomVal;\n\t\t\tlet centerYVal = screen.getCenterYVal();\n\t\t\tthis.object3D.position.x = screen.getLeft();\n\t\t\tif (needToStickOnTop) {\n\t\t\t\tthis.object3D.position.y = screen.getTop();\n\t\t\t} else if (needToStickOnBottom) {\n\t\t\t\tthis.object3D.position.y = screen.getBottom();\n\t\t\t} else {\n\t\t\t\tthis.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t\t\t}\n\t\t\tlineGeometry.vertices[1].setX(width);\n\n\t\t\tlet indicatorPosY = val > centerYVal ? -35 : 10;\n\t\t\tthis.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t\t}\n\t\tlineGeometry.verticesNeedUpdate = true;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/AxisMarksWidget.ts\n **/","export * from './AxisWidget';\nexport * from './GridWidget';\nexport * from './TrendsWidget';\nexport * from './TrendsLineWidget';\nexport * from './TrendsGradientWidget';\n\n// TODO: remove\nexport * from './AxisMarksWidget';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/widgets/index.ts\n **/"],"sourceRoot":""}