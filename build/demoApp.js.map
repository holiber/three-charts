{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///demoApp.js","webpack:///webpack/bootstrap 861ee5af665d6be18f2a?599c","webpack:///./demo/demoApp.ts","webpack:///./~/three-chart/build/index.js","webpack:///./~/three-chart/build/ThreeChart.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","0","three_chart_1","chart","DataSourse","data","sec","val","startTime","Date","now","push","xVal","yVal","Math","random","endTime","length","prototype","getData","Utils","deepCopy","getNext","lastVal","item","getPrev","firstVal","unshift","MarksSource","generate","descriptionColor","orientation","getRandomItem","TREND_MARK_SIDE","TOP","BOTTOM","trendName","value","title","description","icon","iconColor","window","onload","initListeners","dsMain","dsRed","dsBlue","Chart","yAxis","marks","name","lineColor","stickToEdges","range","padding","end","start","margin","zeroVal","xAxis","dataType","AXIS_DATA_TYPE","DATE","type","AXIS_RANGE_TYPE","FIXED","from","to","maxLength","minLength","showValue","trends","main","TREND_TYPE","LINE","dataset","hasBeacon","hasIndicator","hasGradient","showStats","widgets","TrendsGradient","enabled","document","querySelector","setState","animations","mainTrend","getTrend","deadlineMark","state","xAxisMarks","getItem","closeMark","onDataChange","closeValue","options","getLastItem","setOptions","i","onPrependRequest","requestedLength","resolve","reject","responseData","ticksCount","round","setTimeout","setInterval","appendData","$checkboxMaintrend","addEventListener","checked","$checkboxRedtrend","red","$checkboxBluetrend","blue","$switchLineBtn","$switchBarsBtn","CANDLE","currentRange","timeframeButtons","querySelectorAll","Number","getAttribute","segmentLength","autoScroll","zoomToRange","scrollToEnd","then","34","35","__export","hasOwnProperty","PerspectiveCamera","THREE","State_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsLoadingWidget_1","AxisMarksWidget_1","BorderWidget_1","TrendsIndicatorWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","TrendsBeaconWidget_1","deps_1","MAX_DATA_LENGTH","$container","plugins","_this","REVISION","error","style","getComputedStyle","width","parseInt","height","ChartState","installedWidgets","zoomThrottled","throttle","zoomValue","origin","zoom","init","installWidget","Widget","widgetName","_a","w","h","autoRender","scene","Scene","isStopped","renderer","renderers","antialias","alpha","setPixelRatio","devicePixelRatio","setClearColor","backgroundColor","backgroundOpacity","setSize","appendChild","domElement","$el","display","stats","Stats","setupCamera","widgetsClasses","widgetOptions","WidgetConstructor","widget","add","getObject3D","bindEvents","renderLoop","isDestroyed","begin","render","fpsLimit","fps","delay","requestAnimationFrame","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","controls","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","forEach","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","oldTrendsMaxX","prevState","computedData","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","min","max","autoScrollIsEnabled","createPreviewChart","userOptions","previewChartOptions","Grid","Axis","deepMerge","CanvasRenderer","WebGLRenderer","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsBeaconWidget","TrendsIndicatorWidget","TrendsLoadingWidget","AxisMarksWidget","BorderWidget","isPlainObject","EE2","es6_promise_1","Promise","a","dom","k","d","children","l","createElement","cssText","g","performance","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","u","n","q","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","SpriteCanvasMaterial","parameters","Material","color","Color","program","setValues","Object","create","constructor","material","copy","console","log","_renderData","_elements","_lights","_projector","Projector","_canvas","canvas","undefined","_canvasWidth","_canvasHeight","_canvasWidthHalf","floor","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_context","_clearColor","_clearAlpha","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_camera","_v1","_v2","_v3","_v4","_v5","RenderableVertex","_v6","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_clipBox","Box2","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_vector3","Vector3","_centroid","_normal","_normalViewMatrix","Matrix3","setLineDash","autoClear","sortObjects","sortElements","info","vertices","faces","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","updateStyle","setViewport","setScissor","setScissorTest","setClearColorHex","hex","warn","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","intersect","expandByScalar","clearRect","setBlending","NormalBlending","setOpacity","setFillStyle","makeEmpty","clearColor","clearDepth","clearStencil","Camera","setTransform","translate","projectScene","elements","lights","getNormalMatrix","matrixWorldInverse","calculateLights","el","element","opacity","RenderableSprite","renderSprite","RenderableLine","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","RenderableFace","v3","overdraw","expand","renderFace3","union","setRGB","ll","light","lightColor","AmbientLight","DirectionalLight","PointLight","calculateLight","normal","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","multiplyScalar","subVectors","distance","distanceTo","blending","scaleX","scale","scaleY","dist","sqrt","SpriteMaterial","texture","map","pattern","version","textureToPattern","bitmap","image","ox","offset","oy","sx","repeat","sy","cx","cy","save","rotation","rotate","restore","getStyle","setStrokeStyle","beginPath","moveTo","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","LineDashedMaterial","dashSize","gapSize","uv1","uv2","uv3","drawTriangle","MeshLambertMaterial","MeshPhongMaterial","emissive","FaceColors","multiply","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","MeshBasicMaterial","mapping","UVMapping","uvs","patternPath","envMap","SphericalReflectionMapping","vertexNormalsModel","applyMatrix3","MeshNormalMaterial","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","repeatX","wrapS","RepeatWrapping","repeatY","wrapT","createPattern","onUpdate","u0","v0","u1","u2","det","idet","offsetX","offsetY","transform","clipImage","clip","pixels","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","lineWidth","lineCap","lineJoin","strokeStyle","RenderableObject","object","renderOrder","vertexNormalsLength","Vector2","Vector4","visible","vertex","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","objects","_vector4","Box3","_boundingBox","_points3","Array","_points4","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","unproject","pickingRay","RenderList","normals","normalMatrix","setObject","projectVertex","applyMatrix4","invW","pushVertex","getNextVertexInPool","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","getNextLineInPool","pushTriangle","side","DoubleSide","getNextFaceInPool","fromArray","arguments","uv","renderList","autoUpdate","updateMatrixWorld","parent","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","traverseVisible","Light","Mesh","Line","Sprite","frustumCulled","intersectsObject","getNextObjectInPool","applyProjection","sort","painterSort","o","ol","geometry","BufferGeometry","attributes","groups","positions","array","index","indices","group","count","Geometry","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","target","targetVertex","fl","face","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","step","LineSegments","clipLine","colors","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","isObject","isObjectObject","toString","ctor","prot","isArray","__WEBPACK_AMD_DEFINE_RESULT__","_isArray","obj","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","concat","**","growListenerTree","listener","split","slice","shift","warned","trace","setMaxListeners","event","once","fn","many","ttl","Error","off","apply","_origin","on","emit","_all","args","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","removeAllListeners","listenersAny","EventEmitter2","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","EventEmmiter_1","Widget_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","initialState","ALL","NUMBER","gridMinSize","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","Linear","easeNone","scrollSpeed","scrollEase","autoScrollSpeed","autoScrollEase","pluginsState","eventEmitterMaxListeners","isReady","ee","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","onDestroy","subscribe","onInitialStateApplied","onReady","onChange","onTrendChange","onZoom","onPluginsStateChange","newState","eventData","silent","stateData","changedProps","key","trendsData","trendOptions","newStateContainsData","keys","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","widgetsOptions","WidgetClass","defaultOptions","getDefaultOptions","ChartWidget","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","copyProps","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","NAME","pluginWidgets","PluginWidget","setupChartState","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","rangeLessThenMinValue","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","nextRange","newScroll","animationTime","endXVal","getPointOnXAxis","getPointOnYAxis","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","eventName","_i","listenersCount","deepmerge","src","mergeArrays","dst","indexOf","obj1","obj2","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","intStr","lengthDiff","afterPointDigitsCount","afterPointStr","substr","bindEvent","createTexture","ctx","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","getUid","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","parseColor","cache","replace","exec","isNaN","getHexColor","str","rgb","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","srcObject","dstObject","props","excludeProps","chartState","unsubscriber","Trend_1","EVENTS","SEGMENTS_REBUILDED","trendsCalculatedOptions","trend","createTrend","getCalculatedOptions","getEnabledTrends","enabledTrends","allTrends","getOptions","firstTrendData","getExtremumYVal","extremumIsMax","fromX","toX","compareFn","trends_1","trendData","trendYValues","dataItem","NaN","onSegmentsRebuilded","onInitialStateAppliedHandler","_loop_1","this_1","segments","onRebuild","Trend","TrendSegments_1","PREPEND_REQUEST","DEFAULT_OPTIONS","maxSegmentLength","settingsForTypes","minSegmentLengthInPx","maxSegmentLengthInPx","minYVal","maxYVal","prepareData","TrendSegments","checkForPrependRequest","changedOptions","rawData","updatedTrendData","changeData","prependData","allData","newData_1","statePatch","filteredData","data_1","getFirstItem","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","segmentsById","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","onDestroyHandler","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","currentSegmentLengthInPx","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","valueInPoint","onAnimationFrame","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","needRebuildSegments","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","TweenLite","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","prevPoint","getFrameVal","getFramePoint","frameVal","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","__extends","__","AXIS_MARK_DEFAULT_OPTIONS","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","_super","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","traverse","transparent","axisMesh","PlaneGeometry","axisOptions","axisGridParams","getGridParamsForAxis","edgeOffset","segmentsCount","pxVal","textAlign","getDateStr","gridParams","hour","day","tf","getHours","getMinutes","getSeconds","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","xLinesCount","yLinesCount","lineSegments","setZ","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","PlaneBufferGeometry","TrendsWidget_1","getTrendWidgetClass","TrendLoading","TrendsWidget","mesh","deactivate","widgetIsEnabled","activate","restart","updatePosition","center","arc","pointVector","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","widgetObject","getObjectByName","onSegmentsAnimate","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY","CANVAS_WIDTH","CANVAS_HEIGHT","OFFSET_X","TrendIndicator","initObject","lastItem","segmentEndXVal","segmentEndYVal","endPointVector","screenWidth","indicatorIsOutOfScreen","MAX_DISPLAYED_SEGMENTS","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","scaleXFactor","scaleYFactor","segmentIsNotDisplayed","destroySegment","setupSegment","segmentState","pop","segmentInd","lineStartVertex","lineEndVertex","toLocalX","toLocalY","currentScale","toLocalVec","vec","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","TrendBeacon","onStateChange","stopAnimation","animated","animationObject","trendsSegments","DEFAULT_CONFIG","installPluginWidgets","ChartPlugin","config","onChartReadyHandler","changedPluginsStates","onStateChanged","changedState"],"mappings":"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","file":"demoApp.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"demoApp\"] = factory();\n\telse\n\t\troot[\"demoApp\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"demoApp\"] = factory();\n\telse\n\t\troot[\"demoApp\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar three_chart_1 = __webpack_require__(34);\r\n\t// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/plugins/src/TrendsMarksPlugin/TrendsMarksPlugin';\r\n\tvar chart;\r\n\tvar DataSourse = (function () {\r\n\t    function DataSourse() {\r\n\t        this.data = [];\r\n\t        var sec = 0;\r\n\t        var val = 70;\r\n\t        this.startTime = Date.now();\r\n\t        while (sec < 100) {\r\n\t            this.data.push({\r\n\t                xVal: this.startTime + sec * 1000,\r\n\t                yVal: val\r\n\t            });\r\n\t            val += Math.random() * 14 - 7;\r\n\t            sec++;\r\n\t        }\r\n\t        this.endTime = this.data[this.data.length - 1].xVal;\r\n\t    }\r\n\t    DataSourse.prototype.getData = function () {\r\n\t        return three_chart_1.Utils.deepCopy(this.data);\r\n\t    };\r\n\t    DataSourse.prototype.getNext = function () {\r\n\t        var lastVal = this.data[this.data.length - 1];\r\n\t        var yVal = lastVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.endTime + 1000;\r\n\t        this.endTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.push(item);\r\n\t        return item;\r\n\t    };\r\n\t    DataSourse.prototype.getPrev = function () {\r\n\t        var firstVal = this.data[0];\r\n\t        var yVal = firstVal.yVal + Math.random() * 14 - 7;\r\n\t        var xVal = this.startTime - 1000;\r\n\t        this.startTime = xVal;\r\n\t        var item = {\r\n\t            xVal: xVal,\r\n\t            yVal: yVal\r\n\t        };\r\n\t        this.data.unshift(item);\r\n\t        return item;\r\n\t    };\r\n\t    return DataSourse;\r\n\t}());\r\n\tvar MarksSource = (function () {\r\n\t    function MarksSource() {\r\n\t    }\r\n\t    MarksSource.getNext = function (val) {\r\n\t        if (Math.random() > 0.2)\r\n\t            return null;\r\n\t        return this.generate(val);\r\n\t    };\r\n\t    MarksSource.generate = function (val) {\r\n\t        var descriptionColor = 'rgb(40,136,75)';\r\n\t        var orientation = three_chart_1.Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\r\n\t        if (orientation == TREND_MARK_SIDE.BOTTOM) {\r\n\t            descriptionColor = 'rgb(219,73,49)';\r\n\t        }\r\n\t        return {\r\n\t            trendName: 'main',\r\n\t            value: val,\r\n\t            title: three_chart_1.Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\r\n\t            description: three_chart_1.Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\r\n\t            icon: three_chart_1.Utils.getRandomItem(['AM', 'SM', 'HP']),\r\n\t            iconColor: three_chart_1.Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\r\n\t            orientation: orientation,\r\n\t            descriptionColor: descriptionColor\r\n\t        };\r\n\t    };\r\n\t    return MarksSource;\r\n\t}());\r\n\twindow.onload = function () {\r\n\t    initListeners();\r\n\t    var dsMain = new DataSourse();\r\n\t    var dsRed = new DataSourse();\r\n\t    var dsBlue = new DataSourse();\r\n\t    var now = Date.now();\r\n\t    chart = new three_chart_1.Chart({\r\n\t        yAxis: {\r\n\t            marks: [\r\n\t                { value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true },\r\n\t            ],\r\n\t            range: {\r\n\t                padding: { end: 100, start: 100 },\r\n\t                margin: { end: 50, start: 50 },\r\n\t                zeroVal: 70\r\n\t            }\r\n\t        },\r\n\t        xAxis: {\r\n\t            //range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\r\n\t            dataType: three_chart_1.AXIS_DATA_TYPE.DATE,\r\n\t            range: {\r\n\t                type: three_chart_1.AXIS_RANGE_TYPE.FIXED,\r\n\t                from: Date.now(),\r\n\t                to: Date.now() + 20000,\r\n\t                padding: { end: 200, start: 0 },\r\n\t                maxLength: 5000000,\r\n\t                minLength: 5000\r\n\t            },\r\n\t            marks: [\r\n\t                { value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true },\r\n\t                { value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true }\r\n\t            ]\r\n\t        },\r\n\t        trends: {\r\n\t            'main': {\r\n\t                type: three_chart_1.TREND_TYPE.LINE,\r\n\t                dataset: dsMain.getData(),\r\n\t                hasBeacon: true,\r\n\t                hasIndicator: true,\r\n\t                hasGradient: false,\r\n\t            },\r\n\t        },\r\n\t        showStats: true,\r\n\t        // autoRender: {fps: 100},\r\n\t        // animations: {enabled: false},\r\n\t        widgets: {\r\n\t            //Grid: {enabled: false},\r\n\t            //Axis: {enabled: false},\r\n\t            TrendsGradient: { enabled: false },\r\n\t        }\r\n\t    }, document.querySelector('.chart'));\r\n\t    chart.setState({ animations: { enabled: false } });\r\n\t    chart.setState({ animations: { enabled: true } });\r\n\t    window['chart'] = chart;\r\n\t    var mainTrend = chart.getTrend('main');\r\n\t    var deadlineMark = chart.state.xAxisMarks.getItem('deadline');\r\n\t    var closeMark = chart.state.xAxisMarks.getItem('close');\r\n\t    mainTrend.onDataChange(function () {\r\n\t        var closeValue = closeMark.options.value;\r\n\t        if (mainTrend.getLastItem().xVal >= closeValue) {\r\n\t            deadlineMark.setOptions({ value: closeValue + 10000 });\r\n\t            closeMark.setOptions({ value: closeValue + 20000 });\r\n\t        }\r\n\t        // var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\r\n\t        // if (markOptions) setTimeout(() => {\r\n\t        // \tlet trendsMarks = chart.state.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\r\n\t        // \ttrendsMarks.createMark(markOptions);\r\n\t        // }, 500);\r\n\t    });\r\n\t    // var previewChart1 = Chart.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-chart')[0],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.data, hasBeacon: true}\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart2 = Chart.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-chart')[1],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.data, hasBeacon: true}\r\n\t    // \t},\r\n\t    //\r\n\t    // });\r\n\t    //\r\n\t    // var previewChart3 = Chart.createPreviewChart({\r\n\t    // \t$el: document.querySelectorAll('.preview-chart')[2],\r\n\t    // \tyAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\r\n\t    // \t},\r\n\t    // \txAxis: {\r\n\t    // \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\r\n\t    // \t},\r\n\t    // \ttrends: {\r\n\t    // \t\t'main': {dataset: dsMain.data, hasBeacon: true},\r\n\t    // \t\t'red': {dataset: dsRed.data, lineColor: 0xFF2222},\r\n\t    // \t}\r\n\t    // });\r\n\t    //\r\n\t    var i = 0;\r\n\t    chart.getTrend('main').onPrependRequest(function (requestedLength, resolve, reject) {\r\n\t        var responseData = [];\r\n\t        var ticksCount = Math.round(requestedLength / 1000);\r\n\t        while (ticksCount--)\r\n\t            responseData.unshift(dsMain.getPrev());\r\n\t        setTimeout(function () {\r\n\t            resolve(responseData);\r\n\t        }, 2000);\r\n\t    });\r\n\t    setInterval(function () {\r\n\t        i++;\r\n\t        var val = dsMain.getNext();\r\n\t        // [i % 2 ? 10 : 20]\r\n\t        chart.getTrend('main').appendData([val]);\r\n\t        // chart.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\r\n\t        // chart.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // chart.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\r\n\t        // chart.getTrend('red').appendData([val + 10 + Math.random() * 20]);\r\n\t        // chart.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.getTrend('main').appendData([val]);\r\n\t        // previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\r\n\t        // previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\r\n\t        // previewChart1.appendData(dataToAppend1);\r\n\t        //\r\n\t        // var chartData2 = previewChart2.state.data.trends[0].data;\r\n\t        // var lastItem2 = chartData2[chartData.length - 1];\r\n\t        // var dataToAppend2 = [\r\n\t        // \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\r\n\t        // ];\r\n\t        // previewChart2.appendData(dataToAppend2);\r\n\t        // previewChart3.appendData(dataToAppend2);\r\n\t    }, 1000);\r\n\t};\r\n\tfunction initListeners() {\r\n\t    var $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]');\r\n\t    $checkboxMaintrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { main: { enabled: $checkboxMaintrend.checked } } });\r\n\t    });\r\n\t    var $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]');\r\n\t    $checkboxRedtrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { red: { enabled: $checkboxRedtrend.checked } } });\r\n\t    });\r\n\t    var $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]');\r\n\t    $checkboxBluetrend.addEventListener('change', function () {\r\n\t        chart.setState({ trends: { blue: { enabled: $checkboxBluetrend.checked } } });\r\n\t    });\r\n\t    var $switchLineBtn = document.querySelector('[name=\"switch-line\"]');\r\n\t    $switchLineBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: three_chart_1.TREND_TYPE.LINE });\r\n\t    });\r\n\t    var $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]');\r\n\t    $switchBarsBtn.addEventListener('click', function () {\r\n\t        chart.getTrend('main').setOptions({ type: three_chart_1.TREND_TYPE.CANDLE });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-left\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.state.data.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { from: currentRange.from - 2000 } } });\r\n\t    });\r\n\t    document.querySelector('[name=\"move-right\"]').addEventListener('click', function () {\r\n\t        var currentRange = chart.state.data.xAxis.range;\r\n\t        chart.setState({ xAxis: { range: { to: currentRange.to + 2000 } } });\r\n\t    });\r\n\t    var timeframeButtons = document.querySelectorAll(\".timeframe\");\r\n\t    for (var i = 0; i < timeframeButtons.length; i++) {\r\n\t        timeframeButtons[i].addEventListener(\"click\", function () {\r\n\t            var range = Number(this.getAttribute('data-range'));\r\n\t            var segmentLength = Number(this.getAttribute('data-segment-length'));\r\n\t            chart.state.setState({ autoScroll: false });\r\n\t            chart.state.zoomToRange(range);\r\n\t            chart.state.scrollToEnd().then(function () {\r\n\t                chart.state.setState({ autoScroll: true });\r\n\t            });\r\n\t        });\r\n\t    }\r\n\t}\r\n\n\n/***/ },\n\n/***/ 34:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(35)\n\n/***/ },\n\n/***/ 35:\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t    if (true) module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"ThreeChart\"] = factory(); else root[\"ThreeChart\"] = factory();\n\t})(this, function() {\n\t    return function(modules) {\n\t        var installedModules = {};\n\t        function __webpack_require__(moduleId) {\n\t            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n\t            var module = installedModules[moduleId] = {\n\t                exports: {},\n\t                id: moduleId,\n\t                loaded: false\n\t            };\n\t            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t            module.loaded = true;\n\t            return module.exports;\n\t        }\n\t        __webpack_require__.m = modules;\n\t        __webpack_require__.c = installedModules;\n\t        __webpack_require__.p = \"\";\n\t        return __webpack_require__(0);\n\t    }([ function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(1));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(2));\n\t        __export(__webpack_require__(21));\n\t        __export(__webpack_require__(20));\n\t        __export(__webpack_require__(19));\n\t        __export(__webpack_require__(12));\n\t        __export(__webpack_require__(17));\n\t        __export(__webpack_require__(18));\n\t        __export(__webpack_require__(16));\n\t        __export(__webpack_require__(14));\n\t        __export(__webpack_require__(15));\n\t        __export(__webpack_require__(33));\n\t        __export(__webpack_require__(25));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        __webpack_require__(3);\n\t        var PerspectiveCamera = THREE.PerspectiveCamera;\n\t        var State_1 = __webpack_require__(12);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var AxisWidget_1 = __webpack_require__(22);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var TrendsLoadingWidget_1 = __webpack_require__(24);\n\t        var AxisMarksWidget_1 = __webpack_require__(26);\n\t        var BorderWidget_1 = __webpack_require__(27);\n\t        var TrendsIndicatorWidget_1 = __webpack_require__(28);\n\t        var TrendsLineWidget_1 = __webpack_require__(29);\n\t        var TrendsCandleWidget_1 = __webpack_require__(30);\n\t        var TrendsBeaconWidget_1 = __webpack_require__(31);\n\t        var deps_1 = __webpack_require__(32);\n\t        exports.MAX_DATA_LENGTH = 2692e3;\n\t        var Chart = function() {\n\t            function Chart(state, $container, plugins) {\n\t                var _this = this;\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.widgets = [];\n\t                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n\t                if (!$container) {\n\t                    Utils_1.Utils.error(\"$el must be set\");\n\t                }\n\t                var style = getComputedStyle($container);\n\t                state.width = parseInt(style.width);\n\t                state.height = parseInt(style.height);\n\t                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n\t                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n\t                    return _this.zoom(zoomValue, origin);\n\t                }, 200);\n\t                this.$container = $container;\n\t                this.init($container);\n\t            }\n\t            Chart.installWidget = function(Widget) {\n\t                if (!Widget.widgetName) {\n\t                    Utils_1.Utils.error(\"unnamed widget\");\n\t                }\n\t                this.installedWidgets[Widget.widgetName] = Widget;\n\t            };\n\t            Chart.prototype.init = function($container) {\n\t                var state = this.state;\n\t                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n\t                this.scene = new THREE.Scene();\n\t                this.isStopped = !autoRender.enabled;\n\t                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n\t                    antialias: true,\n\t                    alpha: true\n\t                });\n\t                renderer.setPixelRatio(Chart.devicePixelRatio);\n\t                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n\t                renderer.setSize(w, h);\n\t                $container.appendChild(renderer.domElement);\n\t                this.$el = renderer.domElement;\n\t                this.$el.style.display = \"block\";\n\t                if (showStats) {\n\t                    this.stats = new Stats();\n\t                    $container.appendChild(this.stats.domElement);\n\t                }\n\t                this.setupCamera();\n\t                var widgetsClasses = this.state.widgetsClasses;\n\t                for (var widgetName in widgetsClasses) {\n\t                    var widgetOptions = this.state.data.widgets[widgetName];\n\t                    if (!widgetOptions.enabled) continue;\n\t                    var WidgetConstructor = widgetsClasses[widgetName];\n\t                    var widget = new WidgetConstructor(this.state);\n\t                    this.scene.add(widget.getObject3D());\n\t                    this.widgets.push(widget);\n\t                }\n\t                this.bindEvents();\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.renderLoop = function() {\n\t                var _this = this;\n\t                if (this.isDestroyed) return;\n\t                this.stats && this.stats.begin();\n\t                this.render();\n\t                if (this.isStopped) return;\n\t                var fpsLimit = this.state.data.autoRender.fps;\n\t                if (fpsLimit) {\n\t                    var delay = 1e3 / fpsLimit;\n\t                    setTimeout(function() {\n\t                        return requestAnimationFrame(function() {\n\t                            return _this.renderLoop();\n\t                        });\n\t                    }, delay);\n\t                } else {\n\t                    requestAnimationFrame(function() {\n\t                        return _this.renderLoop();\n\t                    });\n\t                }\n\t                this.stats && this.stats.end();\n\t            };\n\t            Chart.prototype.render = function() {\n\t                this.renderer.render(this.scene, this.camera);\n\t            };\n\t            Chart.prototype.stop = function() {\n\t                this.isStopped = true;\n\t            };\n\t            Chart.prototype.run = function() {\n\t                this.isStopped = false;\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.destroy = function() {\n\t                this.isDestroyed = true;\n\t                this.stop();\n\t                this.state.destroy();\n\t                this.unbindEvents();\n\t                try {\n\t                    this.renderer.forceContextLoss();\n\t                } catch (wtf) {}\n\t                this.renderer.context = null;\n\t                this.renderer.domElement = null;\n\t                this.renderer = null;\n\t            };\n\t            Chart.prototype.getState = function() {\n\t                return this.state.data;\n\t            };\n\t            Chart.prototype.getTrend = function(trendName) {\n\t                return this.state.getTrend(trendName);\n\t            };\n\t            Chart.prototype.setState = function(state) {\n\t                return this.state.setState(state);\n\t            };\n\t            Chart.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var $el = this.$el;\n\t                if (this.state.data.controls.enabled) {\n\t                    $el.addEventListener(\"mousewheel\", function(ev) {\n\t                        _this.onMouseWheel(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousemove\", function(ev) {\n\t                        _this.onMouseMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousedown\", function(ev) {\n\t                        return _this.onMouseDown(ev);\n\t                    });\n\t                    $el.addEventListener(\"mouseup\", function(ev) {\n\t                        return _this.onMouseUp(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchmove\", function(ev) {\n\t                        _this.onTouchMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchend\", function(ev) {\n\t                        _this.onTouchEnd(ev);\n\t                    });\n\t                }\n\t                if (this.state.data.autoResize) {\n\t                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n\t                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n\t                    });\n\t                }\n\t                this.unsubscribers = [ this.state.onTrendsChange(function() {\n\t                    return _this.autoscroll();\n\t                }), this.state.screen.onTransformationFrame(function(options) {\n\t                    return _this.onScreenTransformHandler(options);\n\t                }), this.state.onResize(function(options) {\n\t                    return _this.onChartResize();\n\t                }) ];\n\t            };\n\t            Chart.prototype.unbindEvents = function() {\n\t                try {\n\t                    this.resizeSensor && this.resizeSensor.detach();\n\t                } catch (e) {}\n\t                this.$el.remove();\n\t                this.unsubscribers.forEach(function(unsubscribe) {\n\t                    return unsubscribe();\n\t                });\n\t            };\n\t            Chart.prototype.setupCamera = function() {\n\t                var camSettings = this.state.screen.getCameraSettings();\n\t                if (!this.camera) {\n\t                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t                    this.scene.add(this.camera);\n\t                } else {\n\t                    this.camera.fov = camSettings.FOV;\n\t                    this.camera.aspect = camSettings.aspect;\n\t                    this.camera.far = camSettings.far;\n\t                    this.camera.near = camSettings.near;\n\t                    this.camera.updateProjectionMatrix();\n\t                }\n\t                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t                this.cameraInitialPosition = this.camera.position.clone();\n\t                this.onScreenTransformHandler(this.state.screen.options);\n\t            };\n\t            Chart.prototype.onScreenTransformHandler = function(options) {\n\t                if (options.scrollX != void 0) {\n\t                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n\t                    this.camera.position.setX(scrollX_1);\n\t                }\n\t                if (options.scrollY != void 0) {\n\t                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n\t                    this.camera.position.setY(scrollY_1);\n\t                }\n\t            };\n\t            Chart.prototype.autoscroll = function() {\n\t                var state = this.state;\n\t                if (!state.data.autoScroll) return;\n\t                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n\t                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n\t                if (trendsMaxXDelta > 0) {\n\t                    var maxVisibleX = this.state.screen.getScreenRightVal();\n\t                    var paddingRightX = this.state.getPaddingRight();\n\t                    var currentScroll = state.data.xAxis.range.scroll;\n\t                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t                        return;\n\t                    }\n\t                    var scrollDelta = trendsMaxXDelta;\n\t                    this.setState({\n\t                        xAxis: {\n\t                            range: {\n\t                                scroll: currentScroll + scrollDelta\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onScrollStop = function() {};\n\t            Chart.prototype.onMouseDown = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.clientX,\n\t                        y: ev.clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseUp = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseMove = function(ev) {\n\t                if (this.state.data.cursor.dragMode) {\n\t                    this.setState({\n\t                        cursor: {\n\t                            dragMode: true,\n\t                            x: ev.clientX,\n\t                            y: ev.clientY\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onMouseWheel = function(ev) {\n\t                ev.stopPropagation();\n\t                ev.preventDefault();\n\t                var zoomOrigin = ev.layerX / this.state.data.width;\n\t                var zoomValue = 1 + ev.wheelDeltaY * .001;\n\t                this.zoom(zoomValue, zoomOrigin);\n\t            };\n\t            Chart.prototype.onTouchMove = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.touches[0].clientX,\n\t                        y: ev.touches[0].clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onTouchEnd = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n\t                this.setState({\n\t                    width: width,\n\t                    height: height\n\t                });\n\t            };\n\t            Chart.prototype.onChartResize = function() {\n\t                var _a = this.state.data, width = _a.width, height = _a.height;\n\t                this.renderer.setSize(width, height);\n\t                this.setupCamera();\n\t            };\n\t            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n\t                var _this = this;\n\t                var MAX_ZOOM_VALUE = 1.5;\n\t                var MIN_ZOOM_VALUE = .7;\n\t                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t                var autoScrollIsEnabled = this.state.data.autoScroll;\n\t                if (autoScrollIsEnabled) this.state.setState({\n\t                    autoScroll: false\n\t                });\n\t                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n\t                    if (autoScrollIsEnabled) _this.setState({\n\t                        autoScroll: true\n\t                    });\n\t                });\n\t            };\n\t            Chart.createPreviewChart = function(userOptions, $el) {\n\t                var previewChartOptions = {\n\t                    animations: {\n\t                        enabled: false\n\t                    },\n\t                    widgets: {\n\t                        Grid: {\n\t                            enabled: false\n\t                        },\n\t                        Axis: {\n\t                            enabled: false\n\t                        },\n\t                        TrendsGradient: {\n\t                            enabled: false\n\t                        }\n\t                    }\n\t                };\n\t                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n\t                return new Chart(options, $el);\n\t            };\n\t            Chart.devicePixelRatio = window.devicePixelRatio;\n\t            Chart.installedWidgets = {};\n\t            Chart.renderers = {\n\t                CanvasRenderer: THREE.CanvasRenderer,\n\t                WebGLRenderer: THREE.WebGLRenderer\n\t            };\n\t            return Chart;\n\t        }();\n\t        exports.Chart = Chart;\n\t        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n\t        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n\t        Chart.installWidget(AxisWidget_1.AxisWidget);\n\t        Chart.installWidget(GridWidget_1.GridWidget);\n\t        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n\t        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n\t        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n\t        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n\t        Chart.installWidget(BorderWidget_1.BorderWidget);\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        window.Stats = __webpack_require__(4);\n\t        __webpack_require__(5);\n\t        __webpack_require__(6);\n\t        exports.isPlainObject = __webpack_require__(7);\n\t        exports.EE2 = __webpack_require__(9);\n\t        var es6_promise_1 = __webpack_require__(10);\n\t        exports.Promise = es6_promise_1.Promise;\n\t        exports.ResizeSensor = __webpack_require__(11);\n\t    }, function(module, exports) {\n\t        var Stats = function() {\n\t            function h(a) {\n\t                c.appendChild(a.dom);\n\t                return a;\n\t            }\n\t            function k(a) {\n\t                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n\t                l = a;\n\t            }\n\t            var l = 0, c = document.createElement(\"div\");\n\t            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n\t            c.addEventListener(\"click\", function(a) {\n\t                a.preventDefault();\n\t                k(++l % c.children.length);\n\t            }, !1);\n\t            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n\t            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n\t            k(0);\n\t            return {\n\t                REVISION: 16,\n\t                dom: c,\n\t                addPanel: h,\n\t                showPanel: k,\n\t                begin: function() {\n\t                    g = (performance || Date).now();\n\t                },\n\t                end: function() {\n\t                    a++;\n\t                    var c = (performance || Date).now();\n\t                    f.update(c - g, 200);\n\t                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n\t                        var d = performance.memory;\n\t                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n\t                    }\n\t                    return c;\n\t                },\n\t                update: function() {\n\t                    g = this.end();\n\t                },\n\t                domElement: c,\n\t                setMode: k\n\t            };\n\t        };\n\t        Stats.Panel = function(h, k, l) {\n\t            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n\t            q.width = r;\n\t            q.height = f;\n\t            q.style.cssText = \"width:80px;height:48px\";\n\t            var b = q.getContext(\"2d\");\n\t            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n\t            b.textBaseline = \"top\";\n\t            b.fillStyle = l;\n\t            b.fillRect(0, 0, r, f);\n\t            b.fillStyle = k;\n\t            b.fillText(h, t, u);\n\t            b.fillRect(d, m, n, p);\n\t            b.fillStyle = l;\n\t            b.globalAlpha = .9;\n\t            b.fillRect(d, m, n, p);\n\t            return {\n\t                dom: q,\n\t                update: function(f, v) {\n\t                    c = Math.min(c, f);\n\t                    g = Math.max(g, f);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = 1;\n\t                    b.fillRect(0, 0, r, m);\n\t                    b.fillStyle = k;\n\t                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n\t                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n\t                    b.fillRect(d + n - a, m, a, p);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = .9;\n\t                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n\t                }\n\t            };\n\t        };\n\t        \"object\" === typeof module && (module.exports = Stats);\n\t    }, function(module, exports) {\n\t        THREE.SpriteCanvasMaterial = function(parameters) {\n\t            THREE.Material.call(this);\n\t            this.type = \"SpriteCanvasMaterial\";\n\t            this.color = new THREE.Color(16777215);\n\t            this.program = function(context, color) {};\n\t            this.setValues(parameters);\n\t        };\n\t        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n\t        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n\t            var material = new THREE.SpriteCanvasMaterial();\n\t            material.copy(this);\n\t            material.color.copy(this.color);\n\t            material.program = this.program;\n\t            return material;\n\t        };\n\t        THREE.CanvasRenderer = function(parameters) {\n\t            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n\t            parameters = parameters || {};\n\t            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n\t                alpha: parameters.alpha === true\n\t            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n\t            if (_context.setLineDash === undefined) {\n\t                _context.setLineDash = function() {};\n\t            }\n\t            this.domElement = _canvas;\n\t            this.autoClear = true;\n\t            this.sortObjects = true;\n\t            this.sortElements = true;\n\t            this.info = {\n\t                render: {\n\t                    vertices: 0,\n\t                    faces: 0\n\t                }\n\t            };\n\t            this.supportsVertexTextures = function() {};\n\t            this.setFaceCulling = function() {};\n\t            this.getContext = function() {\n\t                return _context;\n\t            };\n\t            this.getContextAttributes = function() {\n\t                return _context.getContextAttributes();\n\t            };\n\t            this.getPixelRatio = function() {\n\t                return _pixelRatio;\n\t            };\n\t            this.setPixelRatio = function(value) {\n\t                if (value !== undefined) _pixelRatio = value;\n\t            };\n\t            this.setSize = function(width, height, updateStyle) {\n\t                _canvasWidth = width * _pixelRatio;\n\t                _canvasHeight = height * _pixelRatio;\n\t                _canvas.width = _canvasWidth;\n\t                _canvas.height = _canvasHeight;\n\t                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n\t                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n\t                if (updateStyle !== false) {\n\t                    _canvas.style.width = width + \"px\";\n\t                    _canvas.style.height = height + \"px\";\n\t                }\n\t                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _contextGlobalAlpha = 1;\n\t                _contextGlobalCompositeOperation = 0;\n\t                _contextStrokeStyle = null;\n\t                _contextFillStyle = null;\n\t                _contextLineWidth = null;\n\t                _contextLineCap = null;\n\t                _contextLineJoin = null;\n\t                this.setViewport(0, 0, width, height);\n\t            };\n\t            this.setViewport = function(x, y, width, height) {\n\t                _viewportX = x * _pixelRatio;\n\t                _viewportY = y * _pixelRatio;\n\t                _viewportWidth = width * _pixelRatio;\n\t                _viewportHeight = height * _pixelRatio;\n\t            };\n\t            this.setScissor = function() {};\n\t            this.setScissorTest = function() {};\n\t            this.setClearColor = function(color, alpha) {\n\t                _clearColor.set(color);\n\t                _clearAlpha = alpha !== undefined ? alpha : 1;\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t            };\n\t            this.setClearColorHex = function(hex, alpha) {\n\t                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n\t                this.setClearColor(hex, alpha);\n\t            };\n\t            this.getClearColor = function() {\n\t                return _clearColor;\n\t            };\n\t            this.getClearAlpha = function() {\n\t                return _clearAlpha;\n\t            };\n\t            this.getMaxAnisotropy = function() {\n\t                return 0;\n\t            };\n\t            this.clear = function() {\n\t                if (_clearBox.isEmpty() === false) {\n\t                    _clearBox.intersect(_clipBox);\n\t                    _clearBox.expandByScalar(2);\n\t                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n\t                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n\t                    if (_clearAlpha < 1) {\n\t                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    if (_clearAlpha > 0) {\n\t                        setBlending(THREE.NormalBlending);\n\t                        setOpacity(1);\n\t                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n\t                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    _clearBox.makeEmpty();\n\t                }\n\t            };\n\t            this.clearColor = function() {};\n\t            this.clearDepth = function() {};\n\t            this.clearStencil = function() {};\n\t            this.render = function(scene, camera) {\n\t                if (camera instanceof THREE.Camera === false) {\n\t                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n\t                    return;\n\t                }\n\t                if (this.autoClear === true) this.clear();\n\t                _this.info.render.vertices = 0;\n\t                _this.info.render.faces = 0;\n\t                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n\t                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n\t                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n\t                _elements = _renderData.elements;\n\t                _lights = _renderData.lights;\n\t                _camera = camera;\n\t                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\t                calculateLights();\n\t                for (var e = 0, el = _elements.length; e < el; e++) {\n\t                    var element = _elements[e];\n\t                    var material = element.material;\n\t                    if (material === undefined || material.opacity === 0) continue;\n\t                    _elemBox.makeEmpty();\n\t                    if (element instanceof THREE.RenderableSprite) {\n\t                        _v1 = element;\n\t                        _v1.x *= _canvasWidthHalf;\n\t                        _v1.y *= _canvasHeightHalf;\n\t                        renderSprite(_v1, element, material);\n\t                    } else if (element instanceof THREE.RenderableLine) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderLine(_v1, _v2, element, material);\n\t                        }\n\t                    } else if (element instanceof THREE.RenderableFace) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v3 = element.v3;\n\t                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n\t                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n\t                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _v3.positionScreen.x *= _canvasWidthHalf;\n\t                        _v3.positionScreen.y *= _canvasHeightHalf;\n\t                        if (material.overdraw > 0) {\n\t                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n\t                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n\t                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n\t                        }\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n\t                        }\n\t                    }\n\t                    _clearBox.union(_elemBox);\n\t                }\n\t                _context.setTransform(1, 0, 0, 1, 0, 0);\n\t            };\n\t            function calculateLights() {\n\t                _ambientLight.setRGB(0, 0, 0);\n\t                _directionalLights.setRGB(0, 0, 0);\n\t                _pointLights.setRGB(0, 0, 0);\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    var lightColor = light.color;\n\t                    if (light instanceof THREE.AmbientLight) {\n\t                        _ambientLight.add(lightColor);\n\t                    } else if (light instanceof THREE.DirectionalLight) {\n\t                        _directionalLights.add(lightColor);\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        _pointLights.add(lightColor);\n\t                    }\n\t                }\n\t            }\n\t            function calculateLight(position, normal, color) {\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    _lightColor.copy(light.color);\n\t                    if (light instanceof THREE.DirectionalLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\t                        var amount = normal.dot(lightPosition);\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\t                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n\t                        if (amount == 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    }\n\t                }\n\t            }\n\t            function renderSprite(v1, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                var scaleX = element.scale.x * _canvasWidthHalf;\n\t                var scaleY = element.scale.y * _canvasHeightHalf;\n\t                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n\t                _elemBox.min.set(v1.x - dist, v1.y - dist);\n\t                _elemBox.max.set(v1.x + dist, v1.y + dist);\n\t                if (material instanceof THREE.SpriteMaterial) {\n\t                    var texture = material.map;\n\t                    if (texture !== null) {\n\t                        var pattern = _patterns[texture.id];\n\t                        if (pattern === undefined || pattern.version !== texture.version) {\n\t                            pattern = textureToPattern(texture);\n\t                            _patterns[texture.id] = pattern;\n\t                        }\n\t                        if (pattern.canvas !== undefined) {\n\t                            setFillStyle(pattern.canvas);\n\t                            var bitmap = texture.image;\n\t                            var ox = bitmap.width * texture.offset.x;\n\t                            var oy = bitmap.height * texture.offset.y;\n\t                            var sx = bitmap.width * texture.repeat.x;\n\t                            var sy = bitmap.height * texture.repeat.y;\n\t                            var cx = scaleX / sx;\n\t                            var cy = scaleY / sy;\n\t                            _context.save();\n\t                            _context.translate(v1.x, v1.y);\n\t                            if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                            _context.translate(-scaleX / 2, -scaleY / 2);\n\t                            _context.scale(cx, cy);\n\t                            _context.translate(-ox, -oy);\n\t                            _context.fillRect(ox, oy, sx, sy);\n\t                            _context.restore();\n\t                        }\n\t                    } else {\n\t                        setFillStyle(material.color.getStyle());\n\t                        _context.save();\n\t                        _context.translate(v1.x, v1.y);\n\t                        if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                        _context.scale(scaleX, -scaleY);\n\t                        _context.fillRect(-.5, -.5, 1, 1);\n\t                        _context.restore();\n\t                    }\n\t                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setFillStyle(material.color.getStyle());\n\t                    _context.save();\n\t                    _context.translate(v1.x, v1.y);\n\t                    if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                    _context.scale(scaleX, scaleY);\n\t                    material.program(_context);\n\t                    _context.restore();\n\t                }\n\t            }\n\t            function renderLine(v1, v2, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _context.beginPath();\n\t                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n\t                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n\t                if (material instanceof THREE.LineBasicMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    if (material.vertexColors !== THREE.VertexColors) {\n\t                        setStrokeStyle(material.color.getStyle());\n\t                    } else {\n\t                        var colorStyle1 = element.vertexColors[0].getStyle();\n\t                        var colorStyle2 = element.vertexColors[1].getStyle();\n\t                        if (colorStyle1 === colorStyle2) {\n\t                            setStrokeStyle(colorStyle1);\n\t                        } else {\n\t                            try {\n\t                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n\t                                grad.addColorStop(0, colorStyle1);\n\t                                grad.addColorStop(1, colorStyle2);\n\t                            } catch (exception) {\n\t                                grad = colorStyle1;\n\t                            }\n\t                            setStrokeStyle(grad);\n\t                        }\n\t                    }\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                } else if (material instanceof THREE.LineDashedMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setLineDash([ material.dashSize, material.gapSize ]);\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                    setLineDash([]);\n\t                }\n\t            }\n\t            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n\t                _this.info.render.vertices += 3;\n\t                _this.info.render.faces++;\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _v1x = v1.positionScreen.x;\n\t                _v1y = v1.positionScreen.y;\n\t                _v2x = v2.positionScreen.x;\n\t                _v2y = v2.positionScreen.y;\n\t                _v3x = v3.positionScreen.x;\n\t                _v3y = v3.positionScreen.y;\n\t                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n\t                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n\t                    _diffuseColor.copy(material.color);\n\t                    _emissiveColor.copy(material.emissive);\n\t                    if (material.vertexColors === THREE.FaceColors) {\n\t                        _diffuseColor.multiply(element.color);\n\t                    }\n\t                    _color.copy(_ambientLight);\n\t                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\t                    calculateLight(_centroid, element.normalModel, _color);\n\t                    _color.multiply(_diffuseColor).add(_emissiveColor);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n\t                    if (material.map !== null) {\n\t                        var mapping = material.map.mapping;\n\t                        if (mapping === THREE.UVMapping) {\n\t                            _uvs = element.uvs;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n\t                        }\n\t                    } else if (material.envMap !== null) {\n\t                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n\t                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n\t                            _uv1x = .5 * _normal.x + .5;\n\t                            _uv1y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n\t                            _uv2x = .5 * _normal.x + .5;\n\t                            _uv2y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n\t                            _uv3x = .5 * _normal.x + .5;\n\t                            _uv3y = .5 * _normal.y + .5;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n\t                        }\n\t                    } else {\n\t                        _color.copy(material.color);\n\t                        if (material.vertexColors === THREE.FaceColors) {\n\t                            _color.multiply(element.color);\n\t                        }\n\t                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                    }\n\t                } else if (material instanceof THREE.MeshNormalMaterial) {\n\t                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n\t                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else {\n\t                    _color.setRGB(1, 1, 1);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                }\n\t            }\n\t            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n\t                _context.beginPath();\n\t                _context.moveTo(x0, y0);\n\t                _context.lineTo(x1, y1);\n\t                _context.lineTo(x2, y2);\n\t                _context.closePath();\n\t            }\n\t            function strokePath(color, linewidth, linecap, linejoin) {\n\t                setLineWidth(linewidth);\n\t                setLineCap(linecap);\n\t                setLineJoin(linejoin);\n\t                setStrokeStyle(color.getStyle());\n\t                _context.stroke();\n\t                _elemBox.expandByScalar(linewidth * 2);\n\t            }\n\t            function fillPath(color) {\n\t                setFillStyle(color.getStyle());\n\t                _context.fill();\n\t            }\n\t            function textureToPattern(texture) {\n\t                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: texture.version\n\t                    };\n\t                }\n\t                var image = texture.image;\n\t                if (image.complete === false) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: 0\n\t                    };\n\t                }\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = image.width;\n\t                canvas.height = image.height;\n\t                var context = canvas.getContext(\"2d\");\n\t                context.setTransform(1, 0, 0, -1, 0, image.height);\n\t                context.drawImage(image, 0, 0);\n\t                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t                var repeat = \"no-repeat\";\n\t                if (repeatX === true && repeatY === true) {\n\t                    repeat = \"repeat\";\n\t                } else if (repeatX === true) {\n\t                    repeat = \"repeat-x\";\n\t                } else if (repeatY === true) {\n\t                    repeat = \"repeat-y\";\n\t                }\n\t                var pattern = _context.createPattern(canvas, repeat);\n\t                if (texture.onUpdate) texture.onUpdate(texture);\n\t                return {\n\t                    canvas: pattern,\n\t                    version: texture.version\n\t                };\n\t            }\n\t            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n\t                var pattern = _patterns[texture.id];\n\t                if (pattern === undefined || pattern.version !== texture.version) {\n\t                    pattern = textureToPattern(texture);\n\t                    _patterns[texture.id] = pattern;\n\t                }\n\t                if (pattern.canvas !== undefined) {\n\t                    setFillStyle(pattern.canvas);\n\t                } else {\n\t                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n\t                    _context.fill();\n\t                    return;\n\t                }\n\t                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n\t                u0 = (u0 + offsetX) * width;\n\t                v0 = (v0 + offsetY) * height;\n\t                u1 = (u1 + offsetX) * width;\n\t                v1 = (v1 + offsetY) * height;\n\t                u2 = (u2 + offsetX) * width;\n\t                v2 = (v2 + offsetY) * height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                if (det === 0) return;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.fill();\n\t                _context.restore();\n\t            }\n\t            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n\t                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n\t                u0 *= width;\n\t                v0 *= height;\n\t                u1 *= width;\n\t                v1 *= height;\n\t                u2 *= width;\n\t                v2 *= height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.clip();\n\t                _context.drawImage(image, 0, 0);\n\t                _context.restore();\n\t            }\n\t            function expand(v1, v2, pixels) {\n\t                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n\t                if (det === 0) return;\n\t                idet = pixels / Math.sqrt(det);\n\t                x *= idet;\n\t                y *= idet;\n\t                v2.x += x;\n\t                v2.y += y;\n\t                v1.x -= x;\n\t                v1.y -= y;\n\t            }\n\t            function setOpacity(value) {\n\t                if (_contextGlobalAlpha !== value) {\n\t                    _context.globalAlpha = value;\n\t                    _contextGlobalAlpha = value;\n\t                }\n\t            }\n\t            function setBlending(value) {\n\t                if (_contextGlobalCompositeOperation !== value) {\n\t                    if (value === THREE.NormalBlending) {\n\t                        _context.globalCompositeOperation = \"source-over\";\n\t                    } else if (value === THREE.AdditiveBlending) {\n\t                        _context.globalCompositeOperation = \"lighter\";\n\t                    } else if (value === THREE.SubtractiveBlending) {\n\t                        _context.globalCompositeOperation = \"darker\";\n\t                    }\n\t                    _contextGlobalCompositeOperation = value;\n\t                }\n\t            }\n\t            function setLineWidth(value) {\n\t                if (_contextLineWidth !== value) {\n\t                    _context.lineWidth = value;\n\t                    _contextLineWidth = value;\n\t                }\n\t            }\n\t            function setLineCap(value) {\n\t                if (_contextLineCap !== value) {\n\t                    _context.lineCap = value;\n\t                    _contextLineCap = value;\n\t                }\n\t            }\n\t            function setLineJoin(value) {\n\t                if (_contextLineJoin !== value) {\n\t                    _context.lineJoin = value;\n\t                    _contextLineJoin = value;\n\t                }\n\t            }\n\t            function setStrokeStyle(value) {\n\t                if (_contextStrokeStyle !== value) {\n\t                    _context.strokeStyle = value;\n\t                    _contextStrokeStyle = value;\n\t                }\n\t            }\n\t            function setFillStyle(value) {\n\t                if (_contextFillStyle !== value) {\n\t                    _context.fillStyle = value;\n\t                    _contextFillStyle = value;\n\t                }\n\t            }\n\t            function setLineDash(value) {\n\t                if (_contextLineDash.length !== value.length) {\n\t                    _context.setLineDash(value);\n\t                    _contextLineDash = value;\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports) {\n\t        THREE.RenderableObject = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableFace = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.v3 = new THREE.RenderableVertex();\n\t            this.normalModel = new THREE.Vector3();\n\t            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t            this.vertexNormalsLength = 0;\n\t            this.color = new THREE.Color();\n\t            this.material = null;\n\t            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableVertex = function() {\n\t            this.position = new THREE.Vector3();\n\t            this.positionWorld = new THREE.Vector3();\n\t            this.positionScreen = new THREE.Vector4();\n\t            this.visible = true;\n\t        };\n\t        THREE.RenderableVertex.prototype.copy = function(vertex) {\n\t            this.positionWorld.copy(vertex.positionWorld);\n\t            this.positionScreen.copy(vertex.positionScreen);\n\t        };\n\t        THREE.RenderableLine = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t            this.material = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableSprite = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.x = 0;\n\t            this.y = 0;\n\t            this.z = 0;\n\t            this.rotation = 0;\n\t            this.scale = new THREE.Vector2();\n\t            this.material = null;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.Projector = function() {\n\t            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n\t                objects: [],\n\t                lights: [],\n\t                elements: []\n\t            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n\t            this.projectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n\t                vector.project(camera);\n\t            };\n\t            this.unprojectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n\t                vector.unproject(camera);\n\t            };\n\t            this.pickingRay = function(vector, camera) {\n\t                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n\t            };\n\t            var RenderList = function() {\n\t                var normals = [];\n\t                var uvs = [];\n\t                var object = null;\n\t                var material = null;\n\t                var normalMatrix = new THREE.Matrix3();\n\t                function setObject(value) {\n\t                    object = value;\n\t                    material = object.material;\n\t                    normalMatrix.getNormalMatrix(object.matrixWorld);\n\t                    normals.length = 0;\n\t                    uvs.length = 0;\n\t                }\n\t                function projectVertex(vertex) {\n\t                    var position = vertex.position;\n\t                    var positionWorld = vertex.positionWorld;\n\t                    var positionScreen = vertex.positionScreen;\n\t                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n\t                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n\t                    var invW = 1 / positionScreen.w;\n\t                    positionScreen.x *= invW;\n\t                    positionScreen.y *= invW;\n\t                    positionScreen.z *= invW;\n\t                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n\t                }\n\t                function pushVertex(x, y, z) {\n\t                    _vertex = getNextVertexInPool();\n\t                    _vertex.position.set(x, y, z);\n\t                    projectVertex(_vertex);\n\t                }\n\t                function pushNormal(x, y, z) {\n\t                    normals.push(x, y, z);\n\t                }\n\t                function pushUv(x, y) {\n\t                    uvs.push(x, y);\n\t                }\n\t                function checkTriangleVisibility(v1, v2, v3) {\n\t                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n\t                    _points3[0] = v1.positionScreen;\n\t                    _points3[1] = v2.positionScreen;\n\t                    _points3[2] = v3.positionScreen;\n\t                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n\t                }\n\t                function checkBackfaceCulling(v1, v2, v3) {\n\t                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n\t                }\n\t                function pushLine(a, b) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    _line = getNextLineInPool();\n\t                    _line.id = object.id;\n\t                    _line.v1.copy(v1);\n\t                    _line.v2.copy(v2);\n\t                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n\t                    _line.renderOrder = object.renderOrder;\n\t                    _line.material = object.material;\n\t                    _renderData.elements.push(_line);\n\t                }\n\t                function pushTriangle(a, b, c) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    var v3 = _vertexPool[c];\n\t                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\t                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n\t                        _face = getNextFaceInPool();\n\t                        _face.id = object.id;\n\t                        _face.v1.copy(v1);\n\t                        _face.v2.copy(v2);\n\t                        _face.v3.copy(v3);\n\t                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                        _face.renderOrder = object.renderOrder;\n\t                        _face.normalModel.fromArray(normals, a * 3);\n\t                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\t                        for (var i = 0; i < 3; i++) {\n\t                            var normal = _face.vertexNormalsModel[i];\n\t                            normal.fromArray(normals, arguments[i] * 3);\n\t                            normal.applyMatrix3(normalMatrix).normalize();\n\t                            var uv = _face.uvs[i];\n\t                            uv.fromArray(uvs, arguments[i] * 2);\n\t                        }\n\t                        _face.vertexNormalsLength = 3;\n\t                        _face.material = object.material;\n\t                        _renderData.elements.push(_face);\n\t                    }\n\t                }\n\t                return {\n\t                    setObject: setObject,\n\t                    projectVertex: projectVertex,\n\t                    checkTriangleVisibility: checkTriangleVisibility,\n\t                    checkBackfaceCulling: checkBackfaceCulling,\n\t                    pushVertex: pushVertex,\n\t                    pushNormal: pushNormal,\n\t                    pushUv: pushUv,\n\t                    pushLine: pushLine,\n\t                    pushTriangle: pushTriangle\n\t                };\n\t            };\n\t            var renderList = new RenderList();\n\t            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n\t                _faceCount = 0;\n\t                _lineCount = 0;\n\t                _spriteCount = 0;\n\t                _renderData.elements.length = 0;\n\t                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n\t                if (camera.parent === null) camera.updateMatrixWorld();\n\t                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\t                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\t                _frustum.setFromMatrix(_viewProjectionMatrix);\n\t                _objectCount = 0;\n\t                _renderData.objects.length = 0;\n\t                _renderData.lights.length = 0;\n\t                scene.traverseVisible(function(object) {\n\t                    if (object instanceof THREE.Light) {\n\t                        _renderData.lights.push(object);\n\t                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n\t                        var material = object.material;\n\t                        if (material.visible === false) return;\n\t                        if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n\t                            _object = getNextObjectInPool();\n\t                            _object.id = object.id;\n\t                            _object.object = object;\n\t                            _vector3.setFromMatrixPosition(object.matrixWorld);\n\t                            _vector3.applyProjection(_viewProjectionMatrix);\n\t                            _object.z = _vector3.z;\n\t                            _object.renderOrder = object.renderOrder;\n\t                            _renderData.objects.push(_object);\n\t                        }\n\t                    }\n\t                });\n\t                if (sortObjects === true) {\n\t                    _renderData.objects.sort(painterSort);\n\t                }\n\t                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n\t                    var object = _renderData.objects[o].object;\n\t                    var geometry = object.geometry;\n\t                    renderList.setObject(object);\n\t                    _modelMatrix = object.matrixWorld;\n\t                    _vertexCount = 0;\n\t                    if (object instanceof THREE.Mesh) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            var groups = geometry.groups;\n\t                            if (attributes.position === undefined) continue;\n\t                            var positions = attributes.position.array;\n\t                            for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                            }\n\t                            if (attributes.normal !== undefined) {\n\t                                var normals = attributes.normal.array;\n\t                                for (var i = 0, l = normals.length; i < l; i += 3) {\n\t                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n\t                                }\n\t                            }\n\t                            if (attributes.uv !== undefined) {\n\t                                var uvs = attributes.uv.array;\n\t                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n\t                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n\t                                }\n\t                            }\n\t                            if (geometry.index !== null) {\n\t                                var indices = geometry.index.array;\n\t                                if (groups.length > 0) {\n\t                                    for (var o = 0; o < groups.length; o++) {\n\t                                        var group = groups[o];\n\t                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n\t                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n\t                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n\t                                    renderList.pushTriangle(i, i + 1, i + 2);\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            var vertices = geometry.vertices;\n\t                            var faces = geometry.faces;\n\t                            var faceVertexUvs = geometry.faceVertexUvs[0];\n\t                            _normalMatrix.getNormalMatrix(_modelMatrix);\n\t                            var material = object.material;\n\t                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n\t                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n\t                                var vertex = vertices[v];\n\t                                _vector3.copy(vertex);\n\t                                if (material.morphTargets === true) {\n\t                                    var morphTargets = geometry.morphTargets;\n\t                                    var morphInfluences = object.morphTargetInfluences;\n\t                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n\t                                        var influence = morphInfluences[t];\n\t                                        if (influence === 0) continue;\n\t                                        var target = morphTargets[t];\n\t                                        var targetVertex = target.vertices[v];\n\t                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n\t                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n\t                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n\t                                    }\n\t                                }\n\t                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n\t                            }\n\t                            for (var f = 0, fl = faces.length; f < fl; f++) {\n\t                                var face = faces[f];\n\t                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n\t                                if (material === undefined) continue;\n\t                                var side = material.side;\n\t                                var v1 = _vertexPool[face.a];\n\t                                var v2 = _vertexPool[face.b];\n\t                                var v3 = _vertexPool[face.c];\n\t                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n\t                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\t                                if (side !== THREE.DoubleSide) {\n\t                                    if (side === THREE.FrontSide && visible === false) continue;\n\t                                    if (side === THREE.BackSide && visible === true) continue;\n\t                                }\n\t                                _face = getNextFaceInPool();\n\t                                _face.id = object.id;\n\t                                _face.v1.copy(v1);\n\t                                _face.v2.copy(v2);\n\t                                _face.v3.copy(v3);\n\t                                _face.normalModel.copy(face.normal);\n\t                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                    _face.normalModel.negate();\n\t                                }\n\t                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                var faceVertexNormals = face.vertexNormals;\n\t                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n\t                                    var normalModel = _face.vertexNormalsModel[n];\n\t                                    normalModel.copy(faceVertexNormals[n]);\n\t                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                        normalModel.negate();\n\t                                    }\n\t                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                }\n\t                                _face.vertexNormalsLength = faceVertexNormals.length;\n\t                                var vertexUvs = faceVertexUvs[f];\n\t                                if (vertexUvs !== undefined) {\n\t                                    for (var u = 0; u < 3; u++) {\n\t                                        _face.uvs[u].copy(vertexUvs[u]);\n\t                                    }\n\t                                }\n\t                                _face.color = face.color;\n\t                                _face.material = material;\n\t                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                                _face.renderOrder = object.renderOrder;\n\t                                _renderData.elements.push(_face);\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Line) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            if (attributes.position !== undefined) {\n\t                                var positions = attributes.position.array;\n\t                                for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                                }\n\t                                if (geometry.index !== null) {\n\t                                    var indices = geometry.index.array;\n\t                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n\t                                        renderList.pushLine(indices[i], indices[i + 1]);\n\t                                    }\n\t                                } else {\n\t                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n\t                                        renderList.pushLine(i, i + 1);\n\t                                    }\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\t                            var vertices = object.geometry.vertices;\n\t                            if (vertices.length === 0) continue;\n\t                            v1 = getNextVertexInPool();\n\t                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n\t                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n\t                                v1 = getNextVertexInPool();\n\t                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n\t                                if ((v + 1) % step > 0) continue;\n\t                                v2 = _vertexPool[_vertexCount - 2];\n\t                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\t                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\t                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n\t                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\t                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\t                                    _line = getNextLineInPool();\n\t                                    _line.id = object.id;\n\t                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\t                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\t                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n\t                                    _line.renderOrder = object.renderOrder;\n\t                                    _line.material = object.material;\n\t                                    if (object.material.vertexColors === THREE.VertexColors) {\n\t                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n\t                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n\t                                    }\n\t                                    _renderData.elements.push(_line);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Sprite) {\n\t                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\t                        _vector4.applyMatrix4(_viewProjectionMatrix);\n\t                        var invW = 1 / _vector4.w;\n\t                        _vector4.z *= invW;\n\t                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n\t                            _sprite = getNextSpriteInPool();\n\t                            _sprite.id = object.id;\n\t                            _sprite.x = _vector4.x * invW;\n\t                            _sprite.y = _vector4.y * invW;\n\t                            _sprite.z = _vector4.z;\n\t                            _sprite.renderOrder = object.renderOrder;\n\t                            _sprite.object = object;\n\t                            _sprite.rotation = object.rotation;\n\t                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n\t                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n\t                            _sprite.material = object.material;\n\t                            _renderData.elements.push(_sprite);\n\t                        }\n\t                    }\n\t                }\n\t                if (sortElements === true) {\n\t                    _renderData.elements.sort(painterSort);\n\t                }\n\t                return _renderData;\n\t            };\n\t            function getNextObjectInPool() {\n\t                if (_objectCount === _objectPoolLength) {\n\t                    var object = new THREE.RenderableObject();\n\t                    _objectPool.push(object);\n\t                    _objectPoolLength++;\n\t                    _objectCount++;\n\t                    return object;\n\t                }\n\t                return _objectPool[_objectCount++];\n\t            }\n\t            function getNextVertexInPool() {\n\t                if (_vertexCount === _vertexPoolLength) {\n\t                    var vertex = new THREE.RenderableVertex();\n\t                    _vertexPool.push(vertex);\n\t                    _vertexPoolLength++;\n\t                    _vertexCount++;\n\t                    return vertex;\n\t                }\n\t                return _vertexPool[_vertexCount++];\n\t            }\n\t            function getNextFaceInPool() {\n\t                if (_faceCount === _facePoolLength) {\n\t                    var face = new THREE.RenderableFace();\n\t                    _facePool.push(face);\n\t                    _facePoolLength++;\n\t                    _faceCount++;\n\t                    return face;\n\t                }\n\t                return _facePool[_faceCount++];\n\t            }\n\t            function getNextLineInPool() {\n\t                if (_lineCount === _linePoolLength) {\n\t                    var line = new THREE.RenderableLine();\n\t                    _linePool.push(line);\n\t                    _linePoolLength++;\n\t                    _lineCount++;\n\t                    return line;\n\t                }\n\t                return _linePool[_lineCount++];\n\t            }\n\t            function getNextSpriteInPool() {\n\t                if (_spriteCount === _spritePoolLength) {\n\t                    var sprite = new THREE.RenderableSprite();\n\t                    _spritePool.push(sprite);\n\t                    _spritePoolLength++;\n\t                    _spriteCount++;\n\t                    return sprite;\n\t                }\n\t                return _spritePool[_spriteCount++];\n\t            }\n\t            function painterSort(a, b) {\n\t                if (a.renderOrder !== b.renderOrder) {\n\t                    return a.renderOrder - b.renderOrder;\n\t                } else if (a.z !== b.z) {\n\t                    return b.z - a.z;\n\t                } else if (a.id !== b.id) {\n\t                    return a.id - b.id;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            }\n\t            function clipLine(s1, s2) {\n\t                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n\t                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n\t                    return true;\n\t                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n\t                    return false;\n\t                } else {\n\t                    if (bc1near < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n\t                    } else if (bc2near < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n\t                    }\n\t                    if (bc1far < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n\t                    } else if (bc2far < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n\t                    }\n\t                    if (alpha2 < alpha1) {\n\t                        return false;\n\t                    } else {\n\t                        s1.lerp(s2, alpha1);\n\t                        s2.lerp(s1, 1 - alpha2);\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        /*!\n\t\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        var isObject = __webpack_require__(8);\n\t        function isObjectObject(o) {\n\t            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n\t        }\n\t        module.exports = function isPlainObject(o) {\n\t            var ctor, prot;\n\t            if (isObjectObject(o) === false) return false;\n\t            ctor = o.constructor;\n\t            if (typeof ctor !== \"function\") return false;\n\t            prot = ctor.prototype;\n\t            if (isObjectObject(prot) === false) return false;\n\t            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n\t                return false;\n\t            }\n\t            return true;\n\t        };\n\t    }, function(module, exports) {\n\t        /*!\n\t\t * isobject <https://github.com/jonschlinkert/isobject>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        module.exports = function isObject(val) {\n\t            return val != null && typeof val === \"object\" && !Array.isArray(val);\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        var __WEBPACK_AMD_DEFINE_RESULT__;\n\t        !function(undefined) {\n\t            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t                return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t            };\n\t            var defaultMaxListeners = 10;\n\t            function init() {\n\t                this._events = {};\n\t                if (this._conf) {\n\t                    configure.call(this, this._conf);\n\t                }\n\t            }\n\t            function configure(conf) {\n\t                if (conf) {\n\t                    this._conf = conf;\n\t                    conf.delimiter && (this.delimiter = conf.delimiter);\n\t                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t                    conf.wildcard && (this.wildcard = conf.wildcard);\n\t                    conf.newListener && (this.newListener = conf.newListener);\n\t                    if (this.wildcard) {\n\t                        this.listenerTree = {};\n\t                    }\n\t                }\n\t            }\n\t            function EventEmitter(conf) {\n\t                this._events = {};\n\t                this.newListener = false;\n\t                configure.call(this, conf);\n\t            }\n\t            function searchListenerTree(handlers, type, tree, i) {\n\t                if (!tree) {\n\t                    return [];\n\t                }\n\t                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n\t                if (i === typeLength && tree._listeners) {\n\t                    if (typeof tree._listeners === \"function\") {\n\t                        handlers && handlers.push(tree._listeners);\n\t                        return [ tree ];\n\t                    } else {\n\t                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t                            handlers && handlers.push(tree._listeners[leaf]);\n\t                        }\n\t                        return [ tree ];\n\t                    }\n\t                }\n\t                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n\t                    if (currentType === \"*\") {\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    } else if (currentType === \"**\") {\n\t                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n\t                        if (endReached && tree._listeners) {\n\t                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t                        }\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                if (branch === \"*\" || branch === \"**\") {\n\t                                    if (tree[branch]._listeners && !endReached) {\n\t                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t                                    }\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                } else if (branch === nextType) {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n\t                                } else {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                }\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    }\n\t                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n\t                }\n\t                xTree = tree[\"*\"];\n\t                if (xTree) {\n\t                    searchListenerTree(handlers, type, xTree, i + 1);\n\t                }\n\t                xxTree = tree[\"**\"];\n\t                if (xxTree) {\n\t                    if (i < typeLength) {\n\t                        if (xxTree._listeners) {\n\t                            searchListenerTree(handlers, type, xxTree, typeLength);\n\t                        }\n\t                        for (branch in xxTree) {\n\t                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n\t                                if (branch === nextType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n\t                                } else if (branch === currentType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n\t                                } else {\n\t                                    isolatedBranch = {};\n\t                                    isolatedBranch[branch] = xxTree[branch];\n\t                                    searchListenerTree(handlers, type, {\n\t                                        \"**\": isolatedBranch\n\t                                    }, i + 1);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (xxTree._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree, typeLength);\n\t                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n\t                    }\n\t                }\n\t                return listeners;\n\t            }\n\t            function growListenerTree(type, listener) {\n\t                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                for (var i = 0, len = type.length; i + 1 < len; i++) {\n\t                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n\t                        return;\n\t                    }\n\t                }\n\t                var tree = this.listenerTree;\n\t                var name = type.shift();\n\t                while (name) {\n\t                    if (!tree[name]) {\n\t                        tree[name] = {};\n\t                    }\n\t                    tree = tree[name];\n\t                    if (type.length === 0) {\n\t                        if (!tree._listeners) {\n\t                            tree._listeners = listener;\n\t                        } else if (typeof tree._listeners === \"function\") {\n\t                            tree._listeners = [ tree._listeners, listener ];\n\t                        } else if (isArray(tree._listeners)) {\n\t                            tree._listeners.push(listener);\n\t                            if (!tree._listeners.warned) {\n\t                                var m = defaultMaxListeners;\n\t                                if (typeof this._events.maxListeners !== \"undefined\") {\n\t                                    m = this._events.maxListeners;\n\t                                }\n\t                                if (m > 0 && tree._listeners.length > m) {\n\t                                    tree._listeners.warned = true;\n\t                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n\t                                    console.trace();\n\t                                }\n\t                            }\n\t                        }\n\t                        return true;\n\t                    }\n\t                    name = type.shift();\n\t                }\n\t                return true;\n\t            }\n\t            EventEmitter.prototype.delimiter = \".\";\n\t            EventEmitter.prototype.setMaxListeners = function(n) {\n\t                this._events || init.call(this);\n\t                this._events.maxListeners = n;\n\t                if (!this._conf) this._conf = {};\n\t                this._conf.maxListeners = n;\n\t            };\n\t            EventEmitter.prototype.event = \"\";\n\t            EventEmitter.prototype.once = function(event, fn) {\n\t                this.many(event, 1, fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.many = function(event, ttl, fn) {\n\t                var self = this;\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"many only accepts instances of Function\");\n\t                }\n\t                function listener() {\n\t                    if (--ttl === 0) {\n\t                        self.off(event, listener);\n\t                    }\n\t                    fn.apply(this, arguments);\n\t                }\n\t                listener._origin = fn;\n\t                this.on(event, listener);\n\t                return self;\n\t            };\n\t            EventEmitter.prototype.emit = function() {\n\t                this._events || init.call(this);\n\t                var type = arguments[0];\n\t                if (type === \"newListener\" && !this.newListener) {\n\t                    if (!this._events.newListener) {\n\t                        return false;\n\t                    }\n\t                }\n\t                if (this._all) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    for (i = 0, l = this._all.length; i < l; i++) {\n\t                        this.event = type;\n\t                        this._all[i].apply(this, args);\n\t                    }\n\t                }\n\t                if (type === \"error\") {\n\t                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n\t                        if (arguments[1] instanceof Error) {\n\t                            throw arguments[1];\n\t                        } else {\n\t                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t                        }\n\t                        return false;\n\t                    }\n\t                }\n\t                var handler;\n\t                if (this.wildcard) {\n\t                    handler = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t                } else {\n\t                    handler = this._events[type];\n\t                }\n\t                if (typeof handler === \"function\") {\n\t                    this.event = type;\n\t                    if (arguments.length === 1) {\n\t                        handler.call(this);\n\t                    } else if (arguments.length > 1) switch (arguments.length) {\n\t                      case 2:\n\t                        handler.call(this, arguments[1]);\n\t                        break;\n\t\n\t                      case 3:\n\t                        handler.call(this, arguments[1], arguments[2]);\n\t                        break;\n\t\n\t                      default:\n\t                        var l = arguments.length;\n\t                        var args = new Array(l - 1);\n\t                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                        handler.apply(this, args);\n\t                    }\n\t                    return true;\n\t                } else if (handler) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    var listeners = handler.slice();\n\t                    for (var i = 0, l = listeners.length; i < l; i++) {\n\t                        this.event = type;\n\t                        listeners[i].apply(this, args);\n\t                    }\n\t                    return listeners.length > 0 || !!this._all;\n\t                } else {\n\t                    return !!this._all;\n\t                }\n\t            };\n\t            EventEmitter.prototype.on = function(type, listener) {\n\t                if (typeof type === \"function\") {\n\t                    this.onAny(type);\n\t                    return this;\n\t                }\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"on only accepts instances of Function\");\n\t                }\n\t                this._events || init.call(this);\n\t                this.emit(\"newListener\", type, listener);\n\t                if (this.wildcard) {\n\t                    growListenerTree.call(this, type, listener);\n\t                    return this;\n\t                }\n\t                if (!this._events[type]) {\n\t                    this._events[type] = listener;\n\t                } else if (typeof this._events[type] === \"function\") {\n\t                    this._events[type] = [ this._events[type], listener ];\n\t                } else if (isArray(this._events[type])) {\n\t                    this._events[type].push(listener);\n\t                    if (!this._events[type].warned) {\n\t                        var m = defaultMaxListeners;\n\t                        if (typeof this._events.maxListeners !== \"undefined\") {\n\t                            m = this._events.maxListeners;\n\t                        }\n\t                        if (m > 0 && this._events[type].length > m) {\n\t                            this._events[type].warned = true;\n\t                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n\t                            console.trace();\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.onAny = function(fn) {\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"onAny only accepts instances of Function\");\n\t                }\n\t                if (!this._all) {\n\t                    this._all = [];\n\t                }\n\t                this._all.push(fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t            EventEmitter.prototype.off = function(type, listener) {\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"removeListener only takes instances of Function\");\n\t                }\n\t                var handlers, leafs = [];\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    handlers = this._events[type];\n\t                    leafs.push({\n\t                        _listeners: handlers\n\t                    });\n\t                }\n\t                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                    var leaf = leafs[iLeaf];\n\t                    handlers = leaf._listeners;\n\t                    if (isArray(handlers)) {\n\t                        var position = -1;\n\t                        for (var i = 0, length = handlers.length; i < length; i++) {\n\t                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n\t                                position = i;\n\t                                break;\n\t                            }\n\t                        }\n\t                        if (position < 0) {\n\t                            continue;\n\t                        }\n\t                        if (this.wildcard) {\n\t                            leaf._listeners.splice(position, 1);\n\t                        } else {\n\t                            this._events[type].splice(position, 1);\n\t                        }\n\t                        if (handlers.length === 0) {\n\t                            if (this.wildcard) {\n\t                                delete leaf._listeners;\n\t                            } else {\n\t                                delete this._events[type];\n\t                            }\n\t                        }\n\t                        return this;\n\t                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n\t                        if (this.wildcard) {\n\t                            delete leaf._listeners;\n\t                        } else {\n\t                            delete this._events[type];\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.offAny = function(fn) {\n\t                var i = 0, l = 0, fns;\n\t                if (fn && this._all && this._all.length > 0) {\n\t                    fns = this._all;\n\t                    for (i = 0, l = fns.length; i < l; i++) {\n\t                        if (fn === fns[i]) {\n\t                            fns.splice(i, 1);\n\t                            return this;\n\t                        }\n\t                    }\n\t                } else {\n\t                    this._all = [];\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t            EventEmitter.prototype.removeAllListeners = function(type) {\n\t                if (arguments.length === 0) {\n\t                    !this._events || init.call(this);\n\t                    return this;\n\t                }\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                        var leaf = leafs[iLeaf];\n\t                        leaf._listeners = null;\n\t                    }\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    this._events[type] = null;\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.listeners = function(type) {\n\t                if (this.wildcard) {\n\t                    var handlers = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t                    return handlers;\n\t                }\n\t                this._events || init.call(this);\n\t                if (!this._events[type]) this._events[type] = [];\n\t                if (!isArray(this._events[type])) {\n\t                    this._events[type] = [ this._events[type] ];\n\t                }\n\t                return this._events[type];\n\t            };\n\t            EventEmitter.prototype.listenersAny = function() {\n\t                if (this._all) {\n\t                    return this._all;\n\t                } else {\n\t                    return [];\n\t                }\n\t            };\n\t            if (true) {\n\t                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t                    return EventEmitter;\n\t                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t            } else if (typeof exports === \"object\") {\n\t                exports.EventEmitter2 = EventEmitter;\n\t            } else {\n\t                window.EventEmitter2 = EventEmitter;\n\t            }\n\t        }();\n\t    }, function(module, exports) {\n\t        module.exports = {\n\t            Promise: window[\"Promise\"]\n\t        };\n\t    }, function(module, exports) {\n\t        (function() {\n\t            var ResizeSensor = function(element, callback) {\n\t                function EventQueue() {\n\t                    this.q = [];\n\t                    this.add = function(ev) {\n\t                        this.q.push(ev);\n\t                    };\n\t                    var i, j;\n\t                    this.call = function() {\n\t                        for (i = 0, j = this.q.length; i < j; i++) {\n\t                            this.q[i].call();\n\t                        }\n\t                    };\n\t                }\n\t                function getComputedStyle(element, prop) {\n\t                    if (element.currentStyle) {\n\t                        return element.currentStyle[prop];\n\t                    } else if (window.getComputedStyle) {\n\t                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t                    } else {\n\t                        return element.style[prop];\n\t                    }\n\t                }\n\t                function attachResizeEvent(element, resized) {\n\t                    if (!element.resizedAttached) {\n\t                        element.resizedAttached = new EventQueue();\n\t                        element.resizedAttached.add(resized);\n\t                    } else if (element.resizedAttached) {\n\t                        element.resizedAttached.add(resized);\n\t                        return;\n\t                    }\n\t                    element.resizeSensor = document.createElement(\"div\");\n\t                    element.resizeSensor.className = \"resize-sensor\";\n\t                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n\t                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n\t                    element.resizeSensor.style.cssText = style;\n\t                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n\t                    element.appendChild(element.resizeSensor);\n\t                    if (!{\n\t                        fixed: 1,\n\t                        absolute: 1\n\t                    }[getComputedStyle(element, \"position\")]) {\n\t                        element.style.position = \"relative\";\n\t                    }\n\t                    var expand = element.resizeSensor.childNodes[0];\n\t                    var expandChild = expand.childNodes[0];\n\t                    var shrink = element.resizeSensor.childNodes[1];\n\t                    var shrinkChild = shrink.childNodes[0];\n\t                    var lastWidth, lastHeight;\n\t                    var reset = function() {\n\t                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n\t                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n\t                        expand.scrollLeft = expand.scrollWidth;\n\t                        expand.scrollTop = expand.scrollHeight;\n\t                        shrink.scrollLeft = shrink.scrollWidth;\n\t                        shrink.scrollTop = shrink.scrollHeight;\n\t                        lastWidth = element.offsetWidth;\n\t                        lastHeight = element.offsetHeight;\n\t                    };\n\t                    reset();\n\t                    var changed = function() {\n\t                        if (element.resizedAttached) {\n\t                            element.resizedAttached.call();\n\t                        }\n\t                    };\n\t                    var addEvent = function(el, name, cb) {\n\t                        if (el.attachEvent) {\n\t                            el.attachEvent(\"on\" + name, cb);\n\t                        } else {\n\t                            el.addEventListener(name, cb);\n\t                        }\n\t                    };\n\t                    var onScroll = function() {\n\t                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                            changed();\n\t                        }\n\t                        reset();\n\t                    };\n\t                    addEvent(expand, \"scroll\", onScroll);\n\t                    addEvent(shrink, \"scroll\", onScroll);\n\t                }\n\t                var elementType = Object.prototype.toString.call(element);\n\t                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n\t                if (isCollectionTyped) {\n\t                    var i = 0, j = element.length;\n\t                    for (;i < j; i++) {\n\t                        attachResizeEvent(element[i], callback);\n\t                    }\n\t                } else {\n\t                    attachResizeEvent(element, callback);\n\t                }\n\t                this.detach = function() {\n\t                    if (isCollectionTyped) {\n\t                        var i = 0, j = element.length;\n\t                        for (;i < j; i++) {\n\t                            ResizeSensor.detach(element[i]);\n\t                        }\n\t                    } else {\n\t                        ResizeSensor.detach(element);\n\t                    }\n\t                };\n\t            };\n\t            ResizeSensor.detach = function(element) {\n\t                if (element.resizeSensor) {\n\t                    element.removeChild(element.resizeSensor);\n\t                    delete element.resizeSensor;\n\t                    delete element.resizedAttached;\n\t                }\n\t            };\n\t            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n\t                module.exports = ResizeSensor;\n\t            } else {\n\t                window.ResizeSensor = ResizeSensor;\n\t            }\n\t        })();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Widget_1 = __webpack_require__(15);\n\t        var TrendsManager_1 = __webpack_require__(16);\n\t        var Screen_1 = __webpack_require__(19);\n\t        var AxisMarks_1 = __webpack_require__(20);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var deps_1 = __webpack_require__(3);\n\t        var CHART_STATE_EVENTS = {\n\t            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n\t            READY: \"ready\",\n\t            DESTROY: \"destroy\",\n\t            CHANGE: \"change\",\n\t            TREND_CHANGE: \"trendChange\",\n\t            TRENDS_CHANGE: \"trendsChange\",\n\t            ZOOM: \"zoom\",\n\t            RESIZE: \"resize\",\n\t            SCROLL: \"scroll\",\n\t            SCROLL_STOP: \"scrollStop\",\n\t            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n\t        };\n\t        var ChartState = function() {\n\t            function ChartState(initialState, widgetsClasses, plugins) {\n\t                if (widgetsClasses === void 0) {\n\t                    widgetsClasses = {};\n\t                }\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.data = {\n\t                    prevState: {},\n\t                    $el: null,\n\t                    zoom: 0,\n\t                    xAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n\t                            from: 0,\n\t                            to: 0,\n\t                            scroll: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 0,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 0,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 100,\n\t                        autoScroll: true,\n\t                        marks: []\n\t                    },\n\t                    yAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n\t                            from: 0,\n\t                            to: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 5,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 5,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 50,\n\t                        marks: []\n\t                    },\n\t                    animations: {\n\t                        enabled: true,\n\t                        trendChangeSpeed: .5,\n\t                        trendChangeEase: void 0,\n\t                        zoomSpeed: .25,\n\t                        zoomEase: Linear.easeNone,\n\t                        scrollSpeed: .5,\n\t                        scrollEase: Linear.easeNone,\n\t                        autoScrollSpeed: 1,\n\t                        autoScrollEase: Linear.easeNone\n\t                    },\n\t                    autoRender: {\n\t                        enabled: true,\n\t                        fps: 0\n\t                    },\n\t                    autoResize: true,\n\t                    renderer: \"WebGLRenderer\",\n\t                    autoScroll: true,\n\t                    controls: {\n\t                        enabled: true\n\t                    },\n\t                    cursor: {\n\t                        dragMode: false,\n\t                        x: 0,\n\t                        y: 0\n\t                    },\n\t                    backgroundColor: 0,\n\t                    backgroundOpacity: 1,\n\t                    showStats: false,\n\t                    pluginsState: {},\n\t                    eventEmitterMaxListeners: 20\n\t                };\n\t                this.widgetsClasses = {};\n\t                this.plugins = {};\n\t                this.isReady = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n\t                this.widgetsClasses = widgetsClasses;\n\t                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n\t                initialState.trends = this.trendsManager.calculatedOptions;\n\t                initialState = this.installPlugins(plugins, initialState);\n\t                this.setState(initialState);\n\t                this.setState({\n\t                    computedData: this.getComputedData()\n\t                });\n\t                this.savePrevState();\n\t                this.screen = new Screen_1.Screen(this);\n\t                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n\t                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n\t                this.initListeners();\n\t                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\t                this.isReady = true;\n\t                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t            }\n\t            ChartState.prototype.destroy = function() {\n\t                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t                this.ee.removeAllListeners();\n\t                this.data = {};\n\t            };\n\t            ChartState.prototype.onDestroy = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t            };\n\t            ChartState.prototype.onInitialStateApplied = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t            };\n\t            ChartState.prototype.onReady = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t            };\n\t            ChartState.prototype.onChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendsChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onScrollStop = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t            };\n\t            ChartState.prototype.onScroll = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t            };\n\t            ChartState.prototype.onZoom = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t            };\n\t            ChartState.prototype.onResize = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t            };\n\t            ChartState.prototype.onPluginsStateChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t            };\n\t            ChartState.prototype.getTrend = function(trendName) {\n\t                return this.trendsManager.getTrend(trendName);\n\t            };\n\t            ChartState.prototype.setState = function(newState, eventData, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var stateData = this.data;\n\t                var changedProps = {};\n\t                for (var key in newState) {\n\t                    if (stateData[key] !== newState[key]) {\n\t                        changedProps[key] = newState[key];\n\t                    }\n\t                }\n\t                this.savePrevState(changedProps);\n\t                var trendsData = {};\n\t                if (newState.trends) for (var trendName in newState.trends) {\n\t                    var trendOptions = newState.trends[trendName];\n\t                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t                    delete trendOptions.data;\n\t                }\n\t                var newStateContainsData = Object.keys(trendsData).length > 0;\n\t                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n\t                if (newStateContainsData) for (var trendName in trendsData) {\n\t                    this.data.trends[trendName].data = trendsData[trendName];\n\t                }\n\t                if (silent) return;\n\t                var recalculateResult = this.recalculateState(changedProps);\n\t                changedProps = recalculateResult.changedProps;\n\t                this.emitChangedStateEvents(changedProps, eventData);\n\t            };\n\t            ChartState.prototype.recalculateState = function(changedProps) {\n\t                var data = this.data;\n\t                var patch = {};\n\t                var actualData = Utils_1.Utils.deepMerge({}, data);\n\t                if (changedProps.widgets || !data.widgets) {\n\t                    patch.widgets = {};\n\t                    var widgetsOptions = data.widgets || {};\n\t                    for (var widgetName in this.widgetsClasses) {\n\t                        var WidgetClass = this.widgetsClasses[widgetName];\n\t                        var userOptions = widgetsOptions[widgetName] || {};\n\t                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n\t                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n\t                    }\n\t                }\n\t                var cursorOptions = changedProps.cursor;\n\t                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t                if (isMouseDrag) {\n\t                    var oldX = data.prevState.cursor.x;\n\t                    var currentX = cursorOptions.x;\n\t                    var currentScroll = data.xAxis.range.scroll;\n\t                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t                    patch.xAxis = {\n\t                        range: {\n\t                            scroll: currentScroll + deltaXVal\n\t                        }\n\t                    };\n\t                    actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                        xAxis: patch.xAxis\n\t                    });\n\t                }\n\t                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\t                var scrollXChanged = false;\n\t                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateXAxis) {\n\t                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t                    if (xAxisPatch) {\n\t                        scrollXChanged = true;\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateYAxis) {\n\t                    var yAxisPatch = this.recalculateYAxis(actualData);\n\t                    if (yAxisPatch) {\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                this.savePrevState(patch);\n\t                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n\t                patch.computedData = this.getComputedData(allChangedProps);\n\t                this.savePrevState(patch);\n\t                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n\t                return {\n\t                    changedProps: allChangedProps,\n\t                    patch: patch\n\t                };\n\t            };\n\t            ChartState.prototype.getComputedData = function(changedProps) {\n\t                var computeAll = !changedProps;\n\t                var computedData = {};\n\t                if (computeAll || changedProps.trends && this.trendsManager) {\n\t                    computedData.trends = {\n\t                        maxXVal: this.trendsManager.getEndXVal(),\n\t                        minXVal: this.trendsManager.getStartXVal()\n\t                    };\n\t                }\n\t                return computedData;\n\t            };\n\t            ChartState.prototype.savePrevState = function(changedProps) {\n\t                if (!changedProps) changedProps = this.data;\n\t                var prevState = this.data.prevState;\n\t                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n\t            };\n\t            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n\t                var prevState = this.data.prevState;\n\t                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\t                for (var key in changedProps) {\n\t                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n\t                }\n\t                if (!this.isReady) return;\n\t                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n\t                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\t                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n\t                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\t                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n\t                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\t                var resizeEventNeeded = changedProps.width || changedProps.height;\n\t                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\t                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n\t                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t            };\n\t            ChartState.prototype.installPlugins = function(plugins, initialState) {\n\t                var _this = this;\n\t                initialState.pluginsState = {};\n\t                plugins.forEach(function(plugin) {\n\t                    var PluginClass = plugin.constructor;\n\t                    var pluginName = PluginClass.NAME;\n\t                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n\t                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n\t                    });\n\t                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n\t                    _this.plugins[pluginName] = plugin;\n\t                    plugin.setupChartState(_this);\n\t                });\n\t                return initialState;\n\t            };\n\t            ChartState.prototype.getPlugin = function(pluginName) {\n\t                return this.plugins[pluginName];\n\t            };\n\t            ChartState.prototype.initListeners = function() {\n\t                var _this = this;\n\t                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n\t                    _this.handleTrendsChange(changedTrends, newData);\n\t                });\n\t            };\n\t            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n\t                for (var trendName in changedTrends) {\n\t                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t                }\n\t            };\n\t            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n\t                var axisRange = actualData.xAxis.range;\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var isInitialize = axisRange.zeroVal == void 0;\n\t                var zeroVal, scaleFactor;\n\t                var zoom = axisRange.zoom;\n\t                if (axisRange.isMirrorMode) {\n\t                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n\t                }\n\t                if (isInitialize) {\n\t                    zeroVal = axisRange.from;\n\t                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                } else {\n\t                    zeroVal = axisRange.zeroVal;\n\t                    scaleFactor = axisRange.scaleFactor;\n\t                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n\t                        if (changedProps.xAxis.range.zoom) {\n\t                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t                        }\n\t                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                        patch.range.scroll = axisRange.from - zeroVal;\n\t                        patch.range.zoom = currentScaleFactor / scaleFactor;\n\t                        return patch;\n\t                    }\n\t                }\n\t                do {\n\t                    var from = zeroVal + axisRange.scroll;\n\t                    var to = from + actualData.width / (scaleFactor * zoom);\n\t                    var rangeLength = to - from;\n\t                    var needToRecalculateZoom = false;\n\t                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n\t                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n\t                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t                    if (needToRecalculateZoom) {\n\t                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n\t                        var zoom = zoom * fixScale;\n\t                        patch.range.zoom = zoom;\n\t                    }\n\t                } while (needToRecalculateZoom);\n\t                patch.range.from = from;\n\t                patch.range.to = to;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.recalculateYAxis = function(actualData) {\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var yAxisRange = actualData.yAxis.range;\n\t                var isInitialize = yAxisRange.scaleFactor == void 0;\n\t                var trends = this.trendsManager;\n\t                var trendsEndXVal = trends.getEndXVal();\n\t                var trendsStartXVal = trends.getStartXVal();\n\t                var xRange = actualData.xAxis.range;\n\t                var xFrom = xRange.from, xTo = xRange.to;\n\t                var xRangeLength = xTo - xFrom;\n\t                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n\t                if (xTo > trendsEndXVal) {\n\t                    xTo = trendsEndXVal;\n\t                    xFrom = xTo - xRangeLength;\n\t                } else if (xFrom < trendsStartXVal) {\n\t                    xFrom = trendsStartXVal;\n\t                    xTo = xFrom + xRangeLength;\n\t                }\n\t                var maxY = trends.getMaxYVal(xFrom, xTo);\n\t                var minY = trends.getMinYVal(xFrom, xTo);\n\t                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n\t                    if (trendLastY > maxY) maxY = trendLastY;\n\t                    if (trendLastY < minY) minY = trendLastY;\n\t                }\n\t                if (yAxisRange.isMirrorMode) {\n\t                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n\t                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t                }\n\t                var margin = yAxisRange.margin;\n\t                var padding = {\n\t                    start: yAxisRange.padding.start + margin.start,\n\t                    end: yAxisRange.padding.end + margin.end\n\t                };\n\t                if (padding.end + padding.start >= actualData.height) {\n\t                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n\t                }\n\t                var rangeLength = maxY - minY;\n\t                var paddingTopInPercents = padding.end / actualData.height;\n\t                var paddingBottomInPercents = padding.start / actualData.height;\n\t                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t                if (isInitialize) {\n\t                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t                    scaleFactor = actualData.height / (toVal - fromVal);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                    needToZoom = true;\n\t                } else {\n\t                    scaleFactor = yAxisRange.scaleFactor;\n\t                    zeroVal = yAxisRange.zeroVal;\n\t                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n\t                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n\t                }\n\t                if (!needToZoom) return null;\n\t                scroll = fromVal - zeroVal;\n\t                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n\t                var currentAxisRange = this.data.yAxis.range;\n\t                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.zoom = function(zoomValue, origin) {\n\t                var _this = this;\n\t                if (origin === void 0) {\n\t                    origin = .5;\n\t                }\n\t                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n\t                var newZoom = zoom * zoomValue;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                var nextRange = this.data.width / (scaleFactor * newZoom);\n\t                var newScroll = scroll + (currentRange - nextRange) * origin;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            zoom: newZoom,\n\t                            scroll: newScroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.zoomToRange = function(range, origin) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                return this.zoom(currentRange / range, origin);\n\t            };\n\t            ChartState.prototype.scrollToEnd = function() {\n\t                var _this = this;\n\t                var state = this.data;\n\t                var endXVal = this.trendsManager.getEndXVal();\n\t                var range = state.xAxis.range;\n\t                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            scroll: scroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getValueOnXAxis = function(x) {\n\t                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.getValueByScreenX = function(x) {\n\t                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.getValueByScreenY = function(y) {\n\t                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByYAxis(y);\n\t            };\n\t            ChartState.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenYByValue = function(yVal) {\n\t                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            ChartState.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            ChartState.prototype.getScreenLeftVal = function() {\n\t                return this.getValueByScreenX(0);\n\t            };\n\t            ChartState.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.data.width);\n\t            };\n\t            ChartState.prototype.getPaddingRight = function() {\n\t                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n\t            };\n\t            return ChartState;\n\t        }();\n\t        exports.ChartState = ChartState;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        var EventEmitter = function() {\n\t            function EventEmitter() {\n\t                this.ee = new deps_1.EE2();\n\t            }\n\t            EventEmitter.prototype.emit = function(eventName) {\n\t                var args = [];\n\t                for (var _i = 1; _i < arguments.length; _i++) {\n\t                    args[_i - 1] = arguments[_i];\n\t                }\n\t                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n\t                var _a;\n\t            };\n\t            EventEmitter.prototype.on = function(eventName, callback) {\n\t                return this.ee.on(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.off = function(eventName, callback) {\n\t                return this.ee.off(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.subscribe = function(eventName, callback) {\n\t                var _this = this;\n\t                this.on(eventName, callback);\n\t                return function() {\n\t                    return _this.off(eventName, callback);\n\t                };\n\t            };\n\t            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n\t                this.ee.setMaxListeners(listenersCount);\n\t            };\n\t            EventEmitter.prototype.removeAllListeners = function(eventName) {\n\t                this.ee.removeAllListeners(eventName);\n\t            };\n\t            return EventEmitter;\n\t        }();\n\t        exports.EventEmitter = EventEmitter;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        function deepmerge(target, src, mergeArrays) {\n\t            if (mergeArrays === void 0) {\n\t                mergeArrays = true;\n\t            }\n\t            var array = Array.isArray(src);\n\t            var dst = array && [] || {};\n\t            if (array) {\n\t                target = target || [];\n\t                if (mergeArrays) {\n\t                    dst = dst.concat(target);\n\t                }\n\t                src.forEach(function(e, i) {\n\t                    if (typeof dst[i] === \"undefined\") {\n\t                        dst[i] = e;\n\t                    } else if (typeof e === \"object\") {\n\t                        dst[i] = deepmerge(target[i], e, mergeArrays);\n\t                    } else {\n\t                        if (target.indexOf(e) === -1) {\n\t                            dst.push(e);\n\t                        }\n\t                    }\n\t                });\n\t            } else {\n\t                if (target && typeof target === \"object\") {\n\t                    Object.keys(target).forEach(function(key) {\n\t                        dst[key] = target[key];\n\t                    });\n\t                }\n\t                Object.keys(src).forEach(function(key) {\n\t                    if (typeof src[key] !== \"object\" || !src[key]) {\n\t                        dst[key] = src[key];\n\t                    } else {\n\t                        if (!target[key]) {\n\t                            dst[key] = src[key];\n\t                        } else {\n\t                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t            return dst;\n\t        }\n\t        var Utils = function() {\n\t            function Utils() {}\n\t            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n\t                return deepmerge(obj1, obj2, mergeArrays);\n\t            };\n\t            Utils.deepCopy = function(obj) {\n\t                return JSON.parse(JSON.stringify(obj));\n\t            };\n\t            Utils.toFixed = function(num, digitsCount) {\n\t                var maxDigits = 15;\n\t                var result = \"\";\n\t                var intVal = Math.floor(num);\n\t                var intStr = intVal.toString();\n\t                var lengthDiff = digitsCount - intStr.length;\n\t                if (lengthDiff > 0) {\n\t                    result = \"0\".repeat(lengthDiff) + intStr;\n\t                } else {\n\t                    result = intStr;\n\t                }\n\t                var afterPointDigitsCount = maxDigits - intStr.length;\n\t                var afterPointStr = num.toString().split(\".\")[1];\n\t                if (afterPointStr) {\n\t                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n\t                }\n\t                return result;\n\t            };\n\t            Utils.bindEvent = function() {};\n\t            Utils.createTexture = function(width, height, fn) {\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = width;\n\t                canvas.height = height;\n\t                var ctx = canvas.getContext(\"2d\");\n\t                fn(ctx);\n\t                var texture = new THREE.Texture(canvas);\n\t                texture.needsUpdate = true;\n\t                return texture;\n\t            };\n\t            Utils.createPixelPerfectTexture = function(width, height, fn) {\n\t                var texture = this.createTexture(width, height, fn);\n\t                texture.minFilter = THREE.NearestFilter;\n\t                return texture;\n\t            };\n\t            Utils.error = function(msg) {\n\t                console.error(\"Chart error: \" + msg);\n\t                throw \"Chart: \" + msg;\n\t            };\n\t            Utils.warn = function(msg) {\n\t                console.warn(\"Chart warning: \" + msg);\n\t            };\n\t            Utils.getUid = function() {\n\t                return this.currentId++;\n\t            };\n\t            Utils.getDistance = function(num1, num2) {\n\t                return Math.max(num1, num2) - Math.min(num1, num2);\n\t            };\n\t            Utils.binarySearchClosestInd = function(arr, num, key) {\n\t                var mid;\n\t                var lo = 0;\n\t                var hi = arr.length - 1;\n\t                while (hi - lo > 1) {\n\t                    mid = Math.floor((lo + hi) / 2);\n\t                    if (arr[mid][key] < num) {\n\t                        lo = mid;\n\t                    } else {\n\t                        hi = mid;\n\t                    }\n\t                }\n\t                if (num - arr[lo][key] <= arr[hi][key] - num) {\n\t                    return lo;\n\t                }\n\t                return hi;\n\t            };\n\t            Utils.binarySearchClosest = function(arr, num, key) {\n\t                var ind = this.binarySearchClosestInd(arr, num, key);\n\t                return arr[ind];\n\t            };\n\t            Utils.rectsIntersect = function(r1, r2) {\n\t                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n\t                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n\t                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n\t                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n\t            };\n\t            /**!\r\n\t\t     * @preserve $.parseColor\r\n\t\t     * Copyright 2011 THEtheChad Elliott\r\n\t\t     * Released under the MIT and GPL licenses.\r\n\t\t     */\n\t            Utils.parseColor = function(color) {\n\t                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n\t                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by $.parseColor\");\n\t                isNaN(cache[3]) && (cache[3] = 1);\n\t                return cache;\n\t            };\n\t            Utils.getHexColor = function(str) {\n\t                var rgb = this.parseColor(str);\n\t                return (rgb[0] << 8 * 2) + (rgb[1] << 8) + rgb[2];\n\t            };\n\t            Utils.throttle = function(func, ms) {\n\t                var isThrottled = false, savedArgs, savedThis;\n\t                function wrapper() {\n\t                    if (isThrottled) {\n\t                        savedArgs = arguments;\n\t                        savedThis = this;\n\t                        return;\n\t                    }\n\t                    func.apply(this, arguments);\n\t                    isThrottled = true;\n\t                    setTimeout(function() {\n\t                        isThrottled = false;\n\t                        if (savedArgs) {\n\t                            wrapper.apply(savedThis, savedArgs);\n\t                            savedArgs = savedThis = null;\n\t                        }\n\t                    }, ms);\n\t                }\n\t                return wrapper;\n\t            };\n\t            Utils.msToTimeString = function(timestamp) {\n\t                var h = Math.floor(timestamp / 36e4);\n\t                var m = Math.floor(timestamp / 6e4);\n\t                var s = Math.floor(timestamp / 1e3);\n\t                return h + \":\" + m + \":\" + s;\n\t            };\n\t            Utils.getRandomItem = function(arr) {\n\t                var ind = Math.floor(Math.random() * arr.length);\n\t                return arr[ind];\n\t            };\n\t            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n\t                if (excludeProps === void 0) {\n\t                    excludeProps = [];\n\t                }\n\t                for (var key in props) {\n\t                    if (excludeProps.indexOf(key) !== -1) continue;\n\t                    if (srcObject[key] == void 0) continue;\n\t                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n\t                    } else {\n\t                        dstObject[key] = this.deepCopy(srcObject[key]);\n\t                    }\n\t                }\n\t            };\n\t            Utils.currentId = 1;\n\t            return Utils;\n\t        }();\n\t        exports.Utils = Utils;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        var ChartWidget = function() {\n\t            function ChartWidget(chartState) {\n\t                this.unsubscribers = [];\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            ChartWidget.prototype.bindEvents = function() {};\n\t            ChartWidget.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartWidget.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartWidget.getDefaultOptions = function() {\n\t                return {\n\t                    enabled: true\n\t                };\n\t            };\n\t            ChartWidget.widgetName = \"\";\n\t            return ChartWidget;\n\t        }();\n\t        exports.ChartWidget = ChartWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Trend_1 = __webpack_require__(17);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var EVENTS = {\n\t            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n\t        };\n\t        var TrendsManager = function() {\n\t            function TrendsManager(state, initialState) {\n\t                this.trends = {};\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.chartState = state;\n\t                var trendsCalculatedOptions = {};\n\t                for (var trendName in initialState.trends) {\n\t                    var trend = this.createTrend(state, trendName, initialState);\n\t                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t                }\n\t                this.calculatedOptions = trendsCalculatedOptions;\n\t                this.bindEvents();\n\t            }\n\t            TrendsManager.prototype.getTrend = function(trendName) {\n\t                return this.trends[trendName];\n\t            };\n\t            TrendsManager.prototype.getEnabledTrends = function() {\n\t                var enabledTrends = [];\n\t                var allTrends = this.trends;\n\t                for (var trendName in allTrends) {\n\t                    var trend = allTrends[trendName];\n\t                    trend.getOptions().enabled && enabledTrends.push(trend);\n\t                }\n\t                return enabledTrends;\n\t            };\n\t            TrendsManager.prototype.getStartXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                return trends[0].getData()[0].xVal;\n\t            };\n\t            TrendsManager.prototype.getEndXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                var firstTrendData = trends[0].getData();\n\t                return firstTrendData[firstTrendData.length - 1].xVal;\n\t            };\n\t            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n\t                var trends = this.getEnabledTrends();\n\t                var compareFn;\n\t                var result;\n\t                if (extremumIsMax) {\n\t                    result = -Infinity;\n\t                    compareFn = Math.max;\n\t                } else {\n\t                    result = Infinity;\n\t                    compareFn = Math.min;\n\t                }\n\t                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n\t                    var trend = trends_1[_i];\n\t                    var trendData = trend.getData(fromX, toX);\n\t                    var trendYValues = trendData.map(function(dataItem) {\n\t                        return dataItem.yVal;\n\t                    });\n\t                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n\t                }\n\t                if (result == Infinity || result == -Infinity) result = NaN;\n\t                return result;\n\t            };\n\t            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(true, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(false, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n\t                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t            };\n\t            TrendsManager.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateAppliedHandler();\n\t                });\n\t            };\n\t            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n\t                var _this = this;\n\t                var _loop_1 = function(trendName) {\n\t                    this_1.trends[trendName].segments.onRebuild(function() {\n\t                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n\t                    });\n\t                };\n\t                var this_1 = this;\n\t                for (var trendName in this.trends) {\n\t                    _loop_1(trendName);\n\t                }\n\t            };\n\t            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n\t                var trend = new Trend_1.Trend(state, trendName, initialState);\n\t                this.trends[trendName] = trend;\n\t                return trend;\n\t            };\n\t            return TrendsManager;\n\t        }();\n\t        exports.TrendsManager = TrendsManager;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendSegments_1 = __webpack_require__(18);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var deps_1 = __webpack_require__(3);\n\t        var EVENTS = {\n\t            CHANGE: \"Change\",\n\t            PREPEND_REQUEST: \"prependRequest\"\n\t        };\n\t        (function(TREND_TYPE) {\n\t            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n\t            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n\t        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n\t        var TREND_TYPE = exports.TREND_TYPE;\n\t        var DEFAULT_OPTIONS = {\n\t            enabled: true,\n\t            type: TREND_TYPE.LINE,\n\t            data: [],\n\t            maxSegmentLength: 1e3,\n\t            lineWidth: 2,\n\t            lineColor: 16777215,\n\t            hasGradient: true,\n\t            hasBeacon: false,\n\t            settingsForTypes: {\n\t                CANDLE: {\n\t                    minSegmentLengthInPx: 20,\n\t                    maxSegmentLengthInPx: 40\n\t                },\n\t                LINE: {\n\t                    minSegmentLengthInPx: 2,\n\t                    maxSegmentLengthInPx: 10\n\t                }\n\t            }\n\t        };\n\t        var Trend = function() {\n\t            function Trend(chartState, trendName, initialState) {\n\t                this.minXVal = Infinity;\n\t                this.minYVal = Infinity;\n\t                this.maxXVal = -Infinity;\n\t                this.maxYVal = -Infinity;\n\t                var options = initialState.trends[trendName];\n\t                this.name = trendName;\n\t                this.chartState = chartState;\n\t                this.calculatedOptions = Utils_1.Utils.deepMerge(DEFAULT_OPTIONS, options);\n\t                this.calculatedOptions.name = trendName;\n\t                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t                this.calculatedOptions.dataset = [];\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvents();\n\t            }\n\t            Trend.prototype.onInitialStateApplied = function() {\n\t                this.segments = new TrendSegments_1.TrendSegments(this.chartState, this);\n\t            };\n\t            Trend.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var chartState = this.chartState;\n\t                chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateApplied();\n\t                });\n\t                chartState.onScrollStop(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onZoom(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n\t                });\n\t                chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            Trend.prototype.getCalculatedOptions = function() {\n\t                return this.calculatedOptions;\n\t            };\n\t            Trend.prototype.appendData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData());\n\t                var updatedTrendData = options.data.concat(newData);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.prependData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData(), true);\n\t                var updatedTrendData = newData.concat(options.data);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.changeData = function(allData, newData) {\n\t                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n\t                    var item = newData_1[_i];\n\t                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t                }\n\t                var options = this.getOptions();\n\t                var statePatch = {\n\t                    trends: (_a = {}, _a[options.name] = {\n\t                        data: allData\n\t                    }, _a)\n\t                };\n\t                this.chartState.setState(statePatch, newData);\n\t                var _a;\n\t            };\n\t            Trend.prototype.getData = function(fromX, toX) {\n\t                var data = this.getOptions().data;\n\t                if (fromX == void 0 && toX == void 0) return data;\n\t                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t                toX = toX !== void 0 ? toX : data[data.length].xVal;\n\t                var filteredData = [];\n\t                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n\t                    var item = data_1[_i];\n\t                    if (item.xVal < fromX) continue;\n\t                    if (item.xVal > toX) break;\n\t                    filteredData.push(item);\n\t                }\n\t                return filteredData;\n\t            };\n\t            Trend.prototype.getFirstItem = function() {\n\t                return this.getOptions().data[0];\n\t            };\n\t            Trend.prototype.getLastItem = function() {\n\t                var data = this.getOptions().data;\n\t                return data[data.length - 1];\n\t            };\n\t            Trend.prototype.getOptions = function() {\n\t                return this.chartState.data.trends[this.name];\n\t            };\n\t            Trend.prototype.setOptions = function(options) {\n\t                this.chartState.setState({\n\t                    trends: (_a = {}, _a[this.name] = options, _a)\n\t                });\n\t                var _a;\n\t            };\n\t            Trend.prototype.onPrependRequest = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.CHANGE, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onDataChange = function(cb) {\n\t                var _this = this;\n\t                var onChangeCb = function(changedOptions, newData) {\n\t                    if (newData) cb(newData);\n\t                };\n\t                this.ee.on(EVENTS.CHANGE, onChangeCb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n\t                };\n\t            };\n\t            Trend.prototype.checkForPrependRequest = function() {\n\t                var _this = this;\n\t                if (this.prependRequest) return;\n\t                var chartState = this.chartState;\n\t                var minXVal = chartState.data.computedData.trends.minXVal;\n\t                var minScreenX = chartState.getScreenXByValue(minXVal);\n\t                var needToRequest = minScreenX > 0;\n\t                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var requestedDataLength = to - from;\n\t                if (!needToRequest) return;\n\t                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n\t                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t                });\n\t                this.prependRequest.then(function(newData) {\n\t                    _this.prependData(newData);\n\t                    _this.prependRequest = null;\n\t                }, function() {\n\t                    _this.prependRequest = null;\n\t                });\n\t            };\n\t            Trend.prepareData = function(newData, currentData, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var data = [];\n\t                if (typeof newData[0] == \"number\") {\n\t                    currentData = currentData || [];\n\t                    var initialItem = void 0;\n\t                    var xVal = void 0;\n\t                    if (isPrepend) {\n\t                        initialItem = currentData[0];\n\t                        xVal = initialItem.xVal - newData.length;\n\t                    } else {\n\t                        initialItem = currentData[currentData.length - 1];\n\t                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n\t                    }\n\t                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n\t                        var yVal = _a[_i];\n\t                        data.push({\n\t                            xVal: xVal,\n\t                            yVal: yVal,\n\t                            id: Utils_1.Utils.getUid()\n\t                        });\n\t                        xVal++;\n\t                    }\n\t                } else {\n\t                    data = newData;\n\t                }\n\t                return data;\n\t            };\n\t            return Trend;\n\t        }();\n\t        exports.Trend = Trend;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var Vector3 = THREE.Vector3;\n\t        var Trend_1 = __webpack_require__(17);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var MAX_ANIMATED_SEGMENTS = 100;\n\t        var EVENTS = {\n\t            REBUILD: \"rebuild\",\n\t            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n\t            ANIMATION_FRAME: \"animationFrame\"\n\t        };\n\t        var TrendSegments = function() {\n\t            function TrendSegments(chartState, trend) {\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.animatedSegmentsIds = [];\n\t                this.segmentsLength = 0;\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForPrepend = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.trend = trend;\n\t                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t                this.tryToRebuildSegments();\n\t                this.bindEvents();\n\t            }\n\t            TrendSegments.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.trend.onChange(function(changedOptions, newData) {\n\t                    return _this.onTrendChangeHandler(changedOptions, newData);\n\t                });\n\t                this.chartState.onZoom(function() {\n\t                    return _this.onZoomHandler();\n\t                });\n\t                this.chartState.onScroll(function() {\n\t                    return _this.recalculateDisplayedRange();\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            TrendSegments.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.appendAnimation && this.appendAnimation.kill();\n\t                this.prependAnimation && this.prependAnimation.kill();\n\t            };\n\t            TrendSegments.prototype.onZoomHandler = function() {\n\t                var segmentsRebuilded = this.tryToRebuildSegments();\n\t                if (!segmentsRebuilded) {\n\t                    this.recalculateDisplayedRange();\n\t                }\n\t            };\n\t            TrendSegments.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n\t                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n\t                if (needToRebuildSegments) {\n\t                    this.tryToRebuildSegments(true);\n\t                    return;\n\t                }\n\t                if (!newData) return;\n\t                var data = this.trend.getData();\n\t                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                isAppend ? this.appendData(newData) : this.prependData(newData);\n\t                this.recalculateDisplayedRange();\n\t            };\n\t            TrendSegments.prototype.getEndSegment = function() {\n\t                return this.segmentsById[this.endSegmentId];\n\t            };\n\t            TrendSegments.prototype.getStartSegment = function() {\n\t                return this.segmentsById[this.startSegmentId];\n\t            };\n\t            TrendSegments.prototype.tryToRebuildSegments = function(force) {\n\t                if (force === void 0) {\n\t                    force = false;\n\t                }\n\t                var options = this.trend.getOptions();\n\t                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n\t                var trendTypesSettings = options.settingsForTypes;\n\t                var trendTypeSettings = trendTypesSettings[trendTypeName];\n\t                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n\t                var needToRebuild = this.segments.length === 0 || force;\n\t                var segmentLength = this.maxSegmentLength;\n\t                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\t                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t                }\n\t                if (!needToRebuild) return false;\n\t                this.maxSegmentLength = segmentLength;\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.segmentsLength = 0;\n\t                this.stopAllAnimations();\n\t                this.appendData(null, true);\n\t                this.recalculateDisplayedRange(true);\n\t                this.ee.emit(EVENTS.REBUILD);\n\t            };\n\t            TrendSegments.prototype.stopAllAnimations = function() {\n\t                this.animatedSegmentsIds = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                if (this.prependAnimation) this.prependAnimation.kill();\n\t                if (this.appendAnimation) this.appendAnimation.kill();\n\t            };\n\t            TrendSegments.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n\t                if (segmentsAreRebuilded === void 0) {\n\t                    segmentsAreRebuilded = false;\n\t                }\n\t                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n\t                var displayedRange = to - from;\n\t                this.firstDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, from - displayedRange, \"startXVal\");\n\t                this.lastDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, to + displayedRange, \"endXVal\");\n\t                if (segmentsAreRebuilded) return;\n\t                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n\t                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t            };\n\t            TrendSegments.prototype.getSegmentsForXValues = function(values) {\n\t                var valueInd = 0;\n\t                var value = values[valueInd];\n\t                var lastValueInd = values.length - 1;\n\t                var results = [];\n\t                var segment = this.getStartSegment();\n\t                if (!segment.hasValue) return [];\n\t                while (segment) {\n\t                    while (value < segment.startXVal) {\n\t                        results.push(void 0);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    while (value > segment.endXVal) {\n\t                        segment = segment.getNext();\n\t                        if (!segment) break;\n\t                    }\n\t                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n\t                    if (valueInPoint) {\n\t                        results.push(segment);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    if (valueInd > lastValueInd) break;\n\t                }\n\t                return results;\n\t            };\n\t            TrendSegments.prototype.onAnimationFrame = function(cb) {\n\t                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t            };\n\t            TrendSegments.prototype.onRebuild = function(cb) {\n\t                return this.ee.subscribe(EVENTS.REBUILD, cb);\n\t            };\n\t            TrendSegments.prototype.onDisplayedRangeChanged = function(cb) {\n\t                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t            };\n\t            TrendSegments.prototype.allocateNextSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var prevSegment = this.segmentsById[this.endSegmentId];\n\t                if (prevSegment && prevSegment.hasValue) {\n\t                    prevSegment.nextId = id;\n\t                    segment.prevId = prevSegment.id;\n\t                }\n\t                this.endSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.push(segment);\n\t                return segment;\n\t            };\n\t            TrendSegments.prototype.allocatePrevSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var nextSegment = this.segmentsById[this.startSegmentId];\n\t                if (nextSegment && nextSegment.hasValue) {\n\t                    nextSegment.prevId = id;\n\t                    segment.nextId = nextSegment.id;\n\t                }\n\t                this.startSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.unshift(segment);\n\t                return segment;\n\t            };\n\t            TrendSegments.prototype.appendData = function(newData, needRebuildSegments) {\n\t                if (needRebuildSegments === void 0) {\n\t                    needRebuildSegments = false;\n\t                }\n\t                var trendData = this.trend.getData();\n\t                if (needRebuildSegments) {\n\t                    newData = trendData;\n\t                    this.animatedSegmentsForAppend = [];\n\t                }\n\t                var startItemInd = trendData.length - newData.length;\n\t                var segment = this.getEndSegment() || this.allocateNextSegment();\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                var itemInd = 0;\n\t                while (itemInd < newData.length) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.appendItem(item);\n\t                    var isLastItem = itemInd == newData.length - 1;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd++;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForAppend.length > 0) {\n\t                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForAppend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocateNextSegment();\n\t                    var prevItem = trendData[startItemInd + itemInd - 1];\n\t                    segment.appendItem(prevItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (needRebuildSegments) {\n\t                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n\t                        var segmentId = _a[_i];\n\t                        var segment_1 = this.segmentsById[segmentId];\n\t                        segment_1.currentAnimationState = segment_1.createAnimationState();\n\t                    }\n\t                    this.animatedSegmentsForAppend = [];\n\t                    return;\n\t                }\n\t                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time);\n\t            };\n\t            TrendSegments.prototype.prependData = function(newData) {\n\t                var trendData = this.trend.getData();\n\t                var segment = this.getStartSegment() || this.segmentsById[0];\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var itemInd = newData.length - 1;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                while (itemInd >= 0) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.prependItem(item);\n\t                    var isLastItem = itemInd == 0;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd--;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForPrepend.length > 0) {\n\t                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForPrepend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocatePrevSegment();\n\t                    var nextItem = trendData[itemInd + 1];\n\t                    segment.prependItem(nextItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time, true);\n\t            };\n\t            TrendSegments.prototype.animate = function(time, isPrepend) {\n\t                var _this = this;\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\t                if (animation && animation.isActive() || time == 0) {\n\t                    if (animation) animation.kill();\n\t                    this.onAnimationFrameHandler(1, isPrepend);\n\t                    animatedSegmentsIds.length = 0;\n\t                    return;\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var ease = animationsOptions.trendChangeEase;\n\t                var objectToAnimate = {\n\t                    animationValue: 0\n\t                };\n\t                animation = TweenLite.to(objectToAnimate, time, {\n\t                    animationValue: 1,\n\t                    ease: ease\n\t                });\n\t                animation.eventCallback(\"onUpdate\", function() {\n\t                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animatedSegmentsIds.length = 0;\n\t                    _this.appendAnimation = null;\n\t                });\n\t                if (isPrepend) {\n\t                    this.prependAnimation = animation;\n\t                } else {\n\t                    this.appendAnimation = animation;\n\t                }\n\t            };\n\t            TrendSegments.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n\t                    var segmentId = animatedSegmentsIds_1[_i];\n\t                    var segment = this.segmentsById[segmentId];\n\t                    for (var key in segment.targetAnimationState) {\n\t                        var targetValue = segment.targetAnimationState[key];\n\t                        var initialValue = segment.initialAnimationState[key];\n\t                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t                        segment.currentAnimationState[key] = currentValue;\n\t                    }\n\t                }\n\t                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t            };\n\t            return TrendSegments;\n\t        }();\n\t        exports.TrendSegments = TrendSegments;\n\t        var TrendSegment = function() {\n\t            function TrendSegment(trendPoints, id) {\n\t                this.isCompleted = false;\n\t                this.items = [];\n\t                this.initialAnimationState = {};\n\t                this.targetAnimationState = {};\n\t                this.currentAnimationState = {};\n\t                this.trendSegments = trendPoints;\n\t                this.id = id;\n\t                this.maxLength = trendPoints.maxSegmentLength;\n\t            }\n\t            TrendSegment.prototype.createAnimationState = function() {\n\t                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n\t                return {\n\t                    xVal: xVal,\n\t                    yVal: yVal,\n\t                    startXVal: startXVal,\n\t                    startYVal: startYVal,\n\t                    endXVal: endXVal,\n\t                    endYVal: endYVal,\n\t                    maxYVal: maxYVal,\n\t                    minYVal: minYVal,\n\t                    maxLength: maxLength\n\t                };\n\t            };\n\t            TrendSegment.prototype.appendItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.push(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var startXVal = items[0].xVal;\n\t                if (item.xVal - startXVal > this.maxLength) return false;\n\t                items.push(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.prependItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.unshift(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var endXVal = items[items.length - 1].xVal;\n\t                if (endXVal - item.xVal > this.maxLength) return false;\n\t                items.unshift(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.complete = function() {\n\t                this.isCompleted = true;\n\t                this.recalculateItems();\n\t                this.items = [];\n\t            };\n\t            TrendSegment.prototype.recalculateItems = function() {\n\t                var items = this.items;\n\t                var itemsLength = items.length;\n\t                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n\t                var endItem = items[itemsLength - 1];\n\t                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n\t                var startXVal, startYVal;\n\t                var startItem = items[0];\n\t                startXVal = startItem.xVal;\n\t                startYVal = startItem.yVal;\n\t                var minX = Math.min(startXVal, endXVal);\n\t                var maxX = Math.max(startXVal, endXVal);\n\t                var middleXVal = minX + (maxX - minX) / 2;\n\t                var minY = Math.min(startYVal, endYVal);\n\t                var maxY = Math.max(startYVal, endYVal);\n\t                var middleYVal = minY + (maxY - minY) / 2;\n\t                var yVals = items.map(function(item) {\n\t                    return item.yVal;\n\t                });\n\t                this.startXVal = startXVal;\n\t                this.startYVal = startYVal;\n\t                this.endXVal = endXVal;\n\t                this.endYVal = endYVal;\n\t                this.xVal = middleXVal;\n\t                this.yVal = middleYVal;\n\t                this.maxYVal = Math.max.apply(Math, yVals);\n\t                this.minYVal = Math.min.apply(Math, yVals);\n\t                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t            };\n\t            TrendSegment.prototype.getNext = function() {\n\t                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t            };\n\t            TrendSegment.prototype.getPrev = function() {\n\t                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t            };\n\t            TrendSegment.prototype.getFrameVal = function() {\n\t                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n\t                return new Vector3(xVal, yVal, 0);\n\t            };\n\t            TrendSegment.prototype.getFramePoint = function() {\n\t                var frameVal = this.getFrameVal();\n\t                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t            };\n\t            return TrendSegment;\n\t        }();\n\t        exports.TrendSegment = TrendSegment;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var Screen = function() {\n\t            function Screen(chartState) {\n\t                this.options = {\n\t                    scrollXVal: 0,\n\t                    scrollX: 0,\n\t                    scrollYVal: 0,\n\t                    scrollY: 0,\n\t                    zoomX: 1,\n\t                    zoomY: 1\n\t                };\n\t                this.currentScrollX = {\n\t                    x: 0\n\t                };\n\t                this.currentScrollY = {\n\t                    y: 0\n\t                };\n\t                this.currentZoomX = {\n\t                    val: 1\n\t                };\n\t                this.currentZoomY = {\n\t                    val: 1\n\t                };\n\t                this.chartState = chartState;\n\t                var _a = chartState.data, w = _a.width, h = _a.height;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.transform({\n\t                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n\t                    zoomY: 1\n\t                });\n\t                this.bindEvents();\n\t            }\n\t            Screen.prototype.getCameraSettings = function() {\n\t                var _a = this.chartState.data, w = _a.width, h = _a.height;\n\t                var FOV = 75;\n\t                var vFOV = FOV * (Math.PI / 180);\n\t                return {\n\t                    FOV: FOV,\n\t                    aspect: w / h,\n\t                    near: .1,\n\t                    far: 5e3,\n\t                    z: h / (2 * Math.tan(vFOV / 2)),\n\t                    x: w / 2,\n\t                    y: h / 2\n\t                };\n\t            };\n\t            Screen.prototype.onZoomFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"zoomFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onScrollFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"scrollFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onTransformationFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"transformationFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.cameraIsMoving = function() {\n\t                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n\t            };\n\t            Screen.prototype.transform = function(options, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n\t                if (scrollX != void 0) this.options.scrollX = scrollX;\n\t                if (scrollY != void 0) this.options.scrollY = scrollY;\n\t                if (zoomX != void 0) this.options.zoomX = zoomX;\n\t                if (zoomY != void 0) this.options.zoomY = zoomY;\n\t                if (scrollX != void 0 || zoomX) {\n\t                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t                    this.options.scrollXVal = options.scrollXVal;\n\t                }\n\t                if (scrollY != void 0 || zoomY) {\n\t                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t                    this.options.scrollYVal = options.scrollYVal;\n\t                }\n\t                if (silent) return;\n\t                this.ee.emit(\"transformationFrame\", options);\n\t                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t                    this.ee.emit(\"scrollFrame\", options);\n\t                }\n\t                if (options.zoomX != void 0 || options.zoomY != void 0) {\n\t                    this.ee.emit(\"zoomFrame\", options);\n\t                }\n\t            };\n\t            Screen.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onChange(function(changedProps) {\n\t                    if (changedProps.xAxis && changedProps.xAxis.range) {\n\t                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n\t                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n\t                    }\n\t                    if (changedProps.yAxis && changedProps.yAxis.range) {\n\t                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n\t                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n\t                    }\n\t                });\n\t                state.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            Screen.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.scrollXAnimation && this.scrollXAnimation.kill();\n\t                this.scrollYAnimation && this.scrollYAnimation.kill();\n\t                this.zoomXAnimation && this.zoomXAnimation.kill();\n\t                this.zoomYAnimation && this.zoomYAnimation.kill();\n\t            };\n\t            Screen.prototype.onScrollXHandler = function(changedProps) {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var isDragMode = state.data.cursor.dragMode;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled && !isDragMode;\n\t                var zoomXChanged = changedProps.xAxis.range.zoom;\n\t                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n\t                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n\t                var range = state.data.xAxis.range;\n\t                var targetX = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollX.x = this.options.scrollX;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollX: _this.currentScrollX.x\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t                        x: targetX,\n\t                        ease: ease\n\t                    });\n\t                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollX.x = targetX;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onScrollYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t                var range = state.data.yAxis.range;\n\t                var targetY = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollY.y = this.options.scrollY;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollY: _this.currentScrollY.y\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t                        y: targetY,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollY.y = targetY;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomXHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.xAxis.range.zoom;\n\t                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomX: _this.currentZoomX.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomX.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.yAxis.range.zoom;\n\t                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomY: _this.currentZoomY.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomY.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomX;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomY;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            Screen.prototype.getValueOnXAxis = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n\t            };\n\t            Screen.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n\t            };\n\t            Screen.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n\t            };\n\t            Screen.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n\t            };\n\t            Screen.prototype.getValueByScreenX = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.getValueByScreenY = function(y) {\n\t                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t            };\n\t            Screen.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            Screen.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            Screen.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            Screen.prototype.getPointByScreenY = function(screenY) {\n\t                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t            };\n\t            Screen.prototype.getTop = function() {\n\t                return this.getPointByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottom = function() {\n\t                return this.getPointByScreenY(0);\n\t            };\n\t            Screen.prototype.getLeft = function() {\n\t                return this.getPointByScreenX(0);\n\t            };\n\t            Screen.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.chartState.data.width);\n\t            };\n\t            Screen.prototype.getTopVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottomVal = function() {\n\t                return this.getValueByScreenY(0);\n\t            };\n\t            Screen.prototype.getCenterYVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height / 2);\n\t            };\n\t            return Screen;\n\t        }();\n\t        exports.Screen = Screen;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var AXIS_MARK_DEFAULT_OPTIONS = {\n\t            type: \"simple\",\n\t            lineWidth: 1,\n\t            value: 0,\n\t            showValue: false,\n\t            stickToEdges: false,\n\t            lineColor: \"#FFFFFF\",\n\t            title: \"\"\n\t        };\n\t        var AxisMarks = function() {\n\t            function AxisMarks(chartState, axisType) {\n\t                this.items = {};\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.axisType = axisType;\n\t                var marks = this.items;\n\t                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n\t                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n\t                    var options = axisMarksOptions_1[_i];\n\t                    var axisMark = void 0;\n\t                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n\t                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n\t                    if (options.type == \"timeleft\") {\n\t                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t                    } else {\n\t                        axisMark = new AxisMark(chartState, axisType, options);\n\t                    }\n\t                    marks[options.name] = axisMark;\n\t                }\n\t                this.bindEvents();\n\t            }\n\t            AxisMarks.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, newData);\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n\t                if (!newData) return;\n\t                var startVal = newData[0].xVal;\n\t                var endVal = newData[newData.length - 1].xVal;\n\t                var marks = this.items;\n\t                for (var markName in marks) {\n\t                    var mark = marks[markName];\n\t                    var markVal = mark.options.value;\n\t                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n\t                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n\t                }\n\t            };\n\t            AxisMarks.prototype.getItems = function() {\n\t                return this.items;\n\t            };\n\t            AxisMarks.prototype.getItem = function(markName) {\n\t                return this.items[markName];\n\t            };\n\t            return AxisMarks;\n\t        }();\n\t        exports.AxisMarks = AxisMarks;\n\t        var AxisMark = function() {\n\t            function AxisMark(chartState, axisType, options) {\n\t                this.renderOnTrendsChange = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.options = options;\n\t                this.axisType = axisType;\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            AxisMark.prototype.bindEvents = function() {};\n\t            AxisMark.prototype.setOptions = function(newOptions) {\n\t                var value = this.options.value;\n\t                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n\t                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisMark.prototype.getDisplayedVal = function() {\n\t                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n\t                return String(displayedValue !== void 0 ? displayedValue : value);\n\t            };\n\t            AxisMark.prototype.onMarkCrossed = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"markCrossed\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"markCrossed\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"valueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"valueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"onDisplayedValueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"onDisplayedValueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.typeName = \"simple\";\n\t            return AxisMark;\n\t        }();\n\t        exports.AxisMark = AxisMark;\n\t        var AxisTimeleftMark = function(_super) {\n\t            __extends(AxisTimeleftMark, _super);\n\t            function AxisTimeleftMark() {\n\t                _super.apply(this, arguments);\n\t                this.renderOnTrendsChange = true;\n\t            }\n\t            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n\t                var markVal = this.options.value;\n\t                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n\t                var time = markVal - maxXVal;\n\t                if (time < 0) time = 0;\n\t                return Utils_1.Utils.msToTimeString(time);\n\t            };\n\t            AxisTimeleftMark.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t            };\n\t            AxisTimeleftMark.prototype.onTrendsChange = function() {\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisTimeleftMark.typeName = \"timeleft\";\n\t            return AxisTimeleftMark;\n\t        }(AxisMark);\n\t        exports.AxisTimeleftMark = AxisTimeleftMark;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        (function(AXIS_RANGE_TYPE) {\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n\t        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n\t        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n\t        (function(AXIS_TYPE) {\n\t            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n\t            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n\t        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n\t        var AXIS_TYPE = exports.AXIS_TYPE;\n\t        (function(AXIS_DATA_TYPE) {\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n\t        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n\t        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Mesh = THREE.Mesh;\n\t        var Object3D = THREE.Object3D;\n\t        var Widget_1 = __webpack_require__(15);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var AxisWidget = function(_super) {\n\t            __extends(AxisWidget, _super);\n\t            function AxisWidget(state) {\n\t                var _this = this;\n\t                _super.call(this, state);\n\t                this.isDestroyed = false;\n\t                this.object3D = new Object3D();\n\t                this.axisXObject = new Object3D();\n\t                this.axisYObject = new Object3D();\n\t                this.object3D.add(this.axisXObject);\n\t                this.object3D.add(this.axisYObject);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }, 1e3);\n\t                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n\t            }\n\t            AxisWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n\t                    _this.onScrollChange(options.scrollX, options.scrollY);\n\t                }), state.screen.onZoomFrame(function(options) {\n\t                    _this.onZoomFrame(options);\n\t                }), state.onDestroy(function() {\n\t                    return _this.onDestroy();\n\t                }), state.onResize(function() {\n\t                    return _this.onResize();\n\t                }));\n\t            };\n\t            AxisWidget.prototype.onDestroy = function() {\n\t                this.isDestroyed = true;\n\t                this.unbindEvents();\n\t            };\n\t            AxisWidget.prototype.onScrollChange = function(x, y) {\n\t                if (y != void 0) {\n\t                    this.axisYObject.position.y = y;\n\t                    this.axisXObject.position.y = y;\n\t                }\n\t                if (x != void 0) {\n\t                    this.axisYObject.position.x = x;\n\t                    this.updateAxisXRequest();\n\t                }\n\t            };\n\t            AxisWidget.prototype.onResize = function() {\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t            };\n\t            AxisWidget.prototype.setupAxis = function(orientation) {\n\t                var _this = this;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var canvasWidth = 0, canvasHeight = 0;\n\t                if (isXAxis) {\n\t                    this.axisXObject.traverse(function(obj) {\n\t                        return _this.axisXObject.remove(obj);\n\t                    });\n\t                    canvasWidth = visibleWidth * 3;\n\t                    canvasHeight = 50;\n\t                } else {\n\t                    this.axisYObject.traverse(function(obj) {\n\t                        return _this.axisYObject.remove(obj);\n\t                    });\n\t                    canvasWidth = 50;\n\t                    canvasHeight = visibleHeight * 3;\n\t                }\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n\t                if (isXAxis) {\n\t                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisXObject.add(axisMesh);\n\t                } else {\n\t                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisYObject.add(axisMesh);\n\t                }\n\t                this.updateAxis(orientation);\n\t            };\n\t            AxisWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisWidget.prototype.updateAxis = function(orientation) {\n\t                if (this.isDestroyed) return;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n\t                var axisOptions;\n\t                var axisMesh;\n\t                var axisGridParams;\n\t                if (isXAxis) {\n\t                    axisMesh = this.axisXObject.children[0];\n\t                    axisOptions = this.chartState.data.xAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t                } else {\n\t                    axisMesh = this.axisYObject.children[0];\n\t                    axisOptions = this.chartState.data.yAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t                }\n\t                var geometry = axisMesh.geometry;\n\t                var canvasWidth = geometry.parameters.width;\n\t                var canvasHeight = geometry.parameters.height;\n\t                var texture = axisMesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t                if (isXAxis) {\n\t                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t                }\n\t                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t                var startVal = axisGridParams.start - edgeOffset;\n\t                var endVal = axisGridParams.end + edgeOffset;\n\t                ctx.beginPath();\n\t                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n\t                    var displayedValue = \"\";\n\t                    if (isXAxis) {\n\t                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t                        ctx.textAlign = \"center\";\n\t                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n\t                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t                        } else {\n\t                            displayedValue = Number(val.toFixed(14)).toString();\n\t                        }\n\t                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t                    } else {\n\t                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n\t                        ctx.textAlign = \"right\";\n\t                        displayedValue = Number(val.toFixed(14)).toString();\n\t                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n\t                    }\n\t                    ctx.stroke();\n\t                }\n\t                ctx.stroke();\n\t                ctx.closePath();\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisWidget.prototype.onZoomFrame = function(options) {\n\t                if (options.zoomX) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }\n\t                if (options.zoomY) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n\t                }\n\t            };\n\t            AxisWidget.getDateStr = function(timestamp, gridParams) {\n\t                var sec = 1e3;\n\t                var min = sec * 60;\n\t                var hour = min * 60;\n\t                var day = hour * 60;\n\t                var step = gridParams.step;\n\t                var d = new Date(timestamp);\n\t                var tf = function(num) {\n\t                    return Utils_1.Utils.toFixed(num, 2);\n\t                };\n\t                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n\t            };\n\t            AxisWidget.widgetName = \"Axis\";\n\t            return AxisWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisWidget = AxisWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Vector3 = THREE.Vector3;\n\t        var Widget_1 = __webpack_require__(15);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var GridWidget = function(_super) {\n\t            __extends(GridWidget, _super);\n\t            function GridWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.isDestroyed = false;\n\t                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n\t                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n\t                this.initGrid();\n\t                this.updateGrid();\n\t            }\n\t            GridWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateGrid();\n\t                }, 1e3);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return updateGridThrottled();\n\t                }), this.chartState.screen.onZoomFrame(function(options) {\n\t                    updateGridThrottled();\n\t                    _this.onZoomFrame(options);\n\t                }), this.chartState.onDestroy(function() {\n\t                    _this.isDestroyed = true;\n\t                    _this.unbindEvents();\n\t                }), this.chartState.onResize(function() {\n\t                    _this.updateGrid();\n\t                }));\n\t            };\n\t            GridWidget.prototype.initGrid = function() {\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: .1,\n\t                    transparent: true\n\t                });\n\t                var xLinesCount = this.gridSizeH;\n\t                var yLinesCount = this.gridSizeV;\n\t                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t                this.lineSegments.position.setZ(-1);\n\t                this.lineSegments.frustumCulled = false;\n\t            };\n\t            GridWidget.prototype.updateGrid = function() {\n\t                if (this.isDestroyed) return;\n\t                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n\t                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t                var startXVal = axisXGrid.start + gridScrollXVal;\n\t                var startYVal = axisYGrid.start + gridScrollYVal;\n\t                var geometry = this.lineSegments.geometry;\n\t                var vertices = geometry.vertices;\n\t                var lineInd = 0;\n\t                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n\t                    var value = startXVal + i * axisXGrid.step;\n\t                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n\t                    var value = startYVal + i * axisYGrid.step;\n\t                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n\t            };\n\t            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n\t                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n\t                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n\t                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n\t                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.onZoomFrame = function(options) {\n\t                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t            };\n\t            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n\t                var axisRange = axisOptions.range;\n\t                var from = axisRange.from;\n\t                var to = axisRange.to;\n\t                var axisLength = to - from;\n\t                var gridStep = 0;\n\t                var gridStepInPixels = 0;\n\t                var minGridStepInPixels = axisOptions.gridMinSize;\n\t                var axisLengthStr = String(axisLength);\n\t                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n\t                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\t                var gridStepFound = false;\n\t                var digitPos = 0;\n\t                while (!gridStepFound) {\n\t                    var power = intPartLength - digitPos - 1;\n\t                    var multiplier = Math.pow(10, power) || 1;\n\t                    var dividers = [ 1, 2, 5 ];\n\t                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t                        var nextGridStep = multiplier / dividers[dividerInd];\n\t                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t                        if (nextGridStepInPixels >= minGridStepInPixels) {\n\t                            gridStep = nextGridStep;\n\t                            gridStepInPixels = nextGridStepInPixels;\n\t                        } else {\n\t                            gridStepFound = true;\n\t                            if (gridStep === 0) {\n\t                                gridStep = nextGridStep;\n\t                                gridStepInPixels = nextGridStepInPixels;\n\t                            }\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!gridStepFound) digitPos++;\n\t                }\n\t                var gridStart = Math.floor(from / gridStep) * gridStep;\n\t                var gridEnd = Math.floor(to / gridStep) * gridStep;\n\t                return {\n\t                    start: gridStart,\n\t                    end: gridEnd,\n\t                    step: gridStep,\n\t                    stepInPx: gridStepInPixels,\n\t                    length: gridEnd - gridStart,\n\t                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t                };\n\t            };\n\t            GridWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            GridWidget.widgetName = \"Grid\";\n\t            return GridWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.GridWidget = GridWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(17);\n\t        var TrendsLoadingWidget = function(_super) {\n\t            __extends(TrendsLoadingWidget, _super);\n\t            function TrendsLoadingWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLoading;\n\t            };\n\t            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n\t            return TrendsLoadingWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n\t        var TrendLoading = function(_super) {\n\t            __extends(TrendLoading, _super);\n\t            function TrendLoading(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.isActive = false;\n\t                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendLoading.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                this.deactivate();\n\t            }\n\t            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled && chartState.data.animations.enabled;\n\t            };\n\t            TrendLoading.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendLoading.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.onPrependRequest(function() {\n\t                    return _this.activate();\n\t                }));\n\t            };\n\t            TrendLoading.prototype.prependData = function() {\n\t                this.deactivate();\n\t            };\n\t            TrendLoading.prototype.activate = function() {\n\t                var mesh = this.mesh;\n\t                mesh.material.opacity = 1;\n\t                mesh.rotation.z = 0;\n\t                var animation = TweenLite.to(this.mesh.rotation, .5, {\n\t                    z: Math.PI * 2\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animation.restart();\n\t                });\n\t                this.animation = animation;\n\t                this.isActive = true;\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.deactivate = function() {\n\t                this.animation && this.animation.kill();\n\t                this.mesh.material.opacity = 0;\n\t                this.isActive = false;\n\t            };\n\t            TrendLoading.createTexture = function() {\n\t                var h = 64, w = 64;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                    ctx.lineWidth = 5;\n\t                    var center = h / 2;\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n\t                    ctx.stroke();\n\t                });\n\t            };\n\t            TrendLoading.prototype.onZoomFrame = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.updatePosition = function() {\n\t                if (!this.isActive) return;\n\t                var trend = this.trend;\n\t                var segment = trend.segments.getStartSegment();\n\t                var x, y;\n\t                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    x = segment.currentAnimationState.startXVal;\n\t                    y = segment.currentAnimationState.startYVal;\n\t                } else {\n\t                    x = segment.currentAnimationState.xVal - segment.maxLength;\n\t                    y = segment.currentAnimationState.yVal;\n\t                }\n\t                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n\t                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n\t            };\n\t            return TrendLoading;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLoading = TrendLoading;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(15);\n\t        var Object3D = THREE.Object3D;\n\t        var TrendsWidget = function(_super) {\n\t            __extends(TrendsWidget, _super);\n\t            function TrendsWidget(state) {\n\t                _super.call(this, state);\n\t                this.widgets = {};\n\t                this.object3D = new Object3D();\n\t                this.onTrendsChange();\n\t            }\n\t            TrendsWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t                state.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, changedOptions, newData);\n\t                });\n\t            };\n\t            TrendsWidget.prototype.onTrendsChange = function() {\n\t                var trendsOptions = this.chartState.data.trends;\n\t                var TrendWidgetClass = this.getTrendWidgetClass();\n\t                for (var trendName in trendsOptions) {\n\t                    var trendOptions = trendsOptions[trendName];\n\t                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n\t                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t                        this.createTrendWidget(trendName);\n\t                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n\t                        this.destroyTrendWidget(trendName);\n\t                    }\n\t                }\n\t            };\n\t            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n\t                var widget = this.widgets[trendName];\n\t                if (!widget) return;\n\t                widget.onTrendChange(changedOptions);\n\t                if (newData) {\n\t                    var data = this.chartState.getTrend(trendName).getData();\n\t                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t                }\n\t            };\n\t            TrendsWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n\t                var WidgetConstructor = this.getTrendWidgetClass();\n\t                var widget = new WidgetConstructor(this.chartState, trendName);\n\t                this.widgets[trendName] = widget;\n\t                var widgetObject = widget.getObject3D();\n\t                widgetObject.name = trendName;\n\t                this.object3D.add(widget.getObject3D());\n\t            };\n\t            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n\t                this.widgets[trendName].onDestroy();\n\t                delete this.widgets[trendName];\n\t                var widgetObject = this.object3D.getObjectByName(trendName);\n\t                this.object3D.remove(widgetObject);\n\t            };\n\t            return TrendsWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.TrendsWidget = TrendsWidget;\n\t        var TrendWidget = function() {\n\t            function TrendWidget(chartState, trendName) {\n\t                this.chartState = chartState;\n\t                this.trendName = trendName;\n\t                this.unsubscribers = [];\n\t                this.trend = chartState.trendsManager.getTrend(trendName);\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled;\n\t            };\n\t            TrendWidget.prototype.appendData = function(newData) {};\n\t            TrendWidget.prototype.prependData = function(newData) {};\n\t            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n\t            TrendWidget.prototype.onDestroy = function() {\n\t                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n\t                    var unsubscriber = _a[_i];\n\t                    unsubscriber();\n\t                }\n\t            };\n\t            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n\t            TrendWidget.prototype.onZoomFrame = function(options) {};\n\t            TrendWidget.prototype.onTransformationFrame = function(options) {};\n\t            TrendWidget.prototype.onZoom = function() {};\n\t            TrendWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.trend.segments.onAnimationFrame(function(trendPoints) {\n\t                    return _this.onSegmentsAnimate(trendPoints);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n\t                    return _this.onTransformationFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n\t                    return _this.onZoomFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.onZoom(function() {\n\t                    return _this.onZoom();\n\t                }));\n\t            };\n\t            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n\t                this.unsubscribers.push(unsubscriber);\n\t            };\n\t            return TrendWidget;\n\t        }();\n\t        exports.TrendWidget = TrendWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(15);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Line = THREE.Line;\n\t        var Mesh = THREE.Mesh;\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var AxisMarksWidget = function(_super) {\n\t            __extends(AxisMarksWidget, _super);\n\t            function AxisMarksWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.axisMarksWidgets = [];\n\t                this.object3D = new Object3D();\n\t                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n\t                var items = xAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t                items = yAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t            }\n\t            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n\t                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n\t                this.axisMarksWidgets.push(axisMarkWidget);\n\t                this.object3D.add(axisMarkWidget.getObject3D());\n\t            };\n\t            AxisMarksWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n\t                    return _this.updateMarksPositions();\n\t                }), this.chartState.onResize(function() {\n\t                    return _this.updateMarksPositions();\n\t                }));\n\t            };\n\t            AxisMarksWidget.prototype.updateMarksPositions = function() {\n\t                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n\t                    var widget = _a[_i];\n\t                    widget.updatePosition();\n\t                }\n\t            };\n\t            AxisMarksWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarksWidget.widgetName = \"AxisMarks\";\n\t            return AxisMarksWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisMarksWidget = AxisMarksWidget;\n\t        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n\t            var axisMark = axisMarkWidget.axisMark;\n\t            ctx.fillStyle = axisMark.options.lineColor;\n\t            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\t            var xCoord = 15;\n\t            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n\t                ctx.textAlign = \"end\";\n\t                xCoord = axisMarkWidget.indicatorWidth;\n\t            }\n\t            ctx.fillText(axisMark.options.title, xCoord, 20);\n\t            if (!axisMark.options.showValue) return;\n\t            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n\t            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n\t        };\n\t        var INDICATOR_POS_Z = .1;\n\t        var AxisMarkWidget = function() {\n\t            function AxisMarkWidget(chartState, axisMark) {\n\t                this.indicatorWidth = 128;\n\t                this.indicatorHeight = 64;\n\t                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\t                this.chartState = chartState;\n\t                this.axisMark = axisMark;\n\t                this.axisType = axisMark.axisType;\n\t                this.frameValue = axisMark.options.value;\n\t                this.object3D = new Object3D();\n\t                this.object3D.position.setZ(-.1);\n\t                this.line = this.createLine();\n\t                this.object3D.add(this.line);\n\t                this.indicator = this.createIndicator();\n\t                this.object3D.add(this.indicator);\n\t                this.renderIndicator();\n\t                this.updatePosition();\n\t                this.bindEvents();\n\t            }\n\t            AxisMarkWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarkWidget.prototype.createLine = function() {\n\t                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n\t                var lineGeometry = new Geometry();\n\t                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n\t                return new Line(lineGeometry, new LineBasicMaterial({\n\t                    color: Utils_1.Utils.getHexColor(lineColor),\n\t                    linewidth: lineWidth\n\t                }));\n\t            };\n\t            AxisMarkWidget.prototype.createIndicator = function() {\n\t                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n\t            };\n\t            AxisMarkWidget.prototype.renderIndicator = function() {\n\t                var texture = this.indicator.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisMarkWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.axisMark.onDisplayedValueChange(function() {\n\t                    return _this.renderIndicator();\n\t                });\n\t                this.axisMark.onValueChange(function() {\n\t                    return _this.onValueChangeHandler();\n\t                });\n\t            };\n\t            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n\t                var _this = this;\n\t                if (this.moveAnimation) this.moveAnimation.kill();\n\t                var animations = this.chartState.data.animations;\n\t                var targetValue = this.axisMark.options.value;\n\t                var cb = function() {\n\t                    _this.updatePosition();\n\t                };\n\t                if (animations.enabled) {\n\t                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n\t                        frameValue: targetValue,\n\t                        ease: animations.trendChangeEase\n\t                    });\n\t                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.frameValue = targetValue;\n\t                    cb();\n\t                }\n\t            };\n\t            AxisMarkWidget.prototype.updatePosition = function() {\n\t                var chartState = this.chartState;\n\t                var screen = chartState.screen;\n\t                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n\t                var lineGeometry = this.line.geometry;\n\t                var hasStickMode = this.axisMark.options.stickToEdges;\n\t                var _a = this.chartState.data, width = _a.width, height = _a.height;\n\t                if (isXAxis) {\n\t                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t                    this.object3D.position.y = screen.getBottom();\n\t                    lineGeometry.vertices[1].setY(height);\n\t                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n\t                } else {\n\t                    var val = this.frameValue;\n\t                    var bottomVal = screen.getBottomVal();\n\t                    var topVal = screen.getTopVal();\n\t                    var needToStickOnTop = hasStickMode && val > topVal;\n\t                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n\t                    var centerYVal = screen.getCenterYVal();\n\t                    this.object3D.position.x = screen.getLeft();\n\t                    if (needToStickOnTop) {\n\t                        this.object3D.position.y = screen.getTop();\n\t                    } else if (needToStickOnBottom) {\n\t                        this.object3D.position.y = screen.getBottom();\n\t                    } else {\n\t                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t                    }\n\t                    lineGeometry.vertices[1].setX(width);\n\t                    var indicatorPosY = val > centerYVal ? -35 : 10;\n\t                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t                }\n\t                lineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            AxisMarkWidget.typeName = \"simple\";\n\t            return AxisMarkWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(15);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Vector3 = THREE.Vector3;\n\t        var BorderWidget = function(_super) {\n\t            __extends(BorderWidget, _super);\n\t            function BorderWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                var _a = chartState.data, width = _a.width, height = _a.height;\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: 0,\n\t                    transparent: true\n\t                });\n\t                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t            }\n\t            BorderWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            BorderWidget.widgetName = \"Border\";\n\t            return BorderWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.BorderWidget = BorderWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Color = THREE.Color;\n\t        var CANVAS_WIDTH = 128;\n\t        var CANVAS_HEIGHT = 64;\n\t        var OFFSET_X = 15;\n\t        var TrendsIndicatorWidget = function(_super) {\n\t            __extends(TrendsIndicatorWidget, _super);\n\t            function TrendsIndicatorWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendIndicator;\n\t            };\n\t            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n\t            return TrendsIndicatorWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n\t        var TrendIndicator = function(_super) {\n\t            __extends(TrendIndicator, _super);\n\t            function TrendIndicator(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                this.onTrendChange();\n\t            }\n\t            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasIndicator;\n\t            };\n\t            TrendIndicator.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendIndicator.prototype.onTrendChange = function() {\n\t                var trendData = this.trend.getData();\n\t                var lastItem = trendData[trendData.length - 1];\n\t                var texture = this.mesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\t                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n\t                texture.needsUpdate = true;\n\t            };\n\t            TrendIndicator.prototype.initObject = function() {\n\t                var color = new Color(this.trend.getOptions().lineColor);\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"15px Arial\";\n\t                    ctx.fillStyle = color.getStyle();\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n\t            };\n\t            TrendIndicator.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n\t                this.segment = segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n\t                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x + OFFSET_X;\n\t                var y = endPointVector.y;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n\t                if (indicatorIsOutOfScreen) {\n\t                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n\t                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n\t                    y -= 25;\n\t                }\n\t                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n\t            };\n\t            return TrendIndicator;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendIndicator = TrendIndicator;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Trend_1 = __webpack_require__(17);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var MAX_DISPLAYED_SEGMENTS = 2e3;\n\t        var TrendsLineWidget = function(_super) {\n\t            __extends(TrendsLineWidget, _super);\n\t            function TrendsLineWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLine;\n\t            };\n\t            TrendsLineWidget.widgetName = \"TrendsLine\";\n\t            return TrendsLineWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLineWidget = TrendsLineWidget;\n\t        var TrendLine = function(_super) {\n\t            __extends(TrendLine, _super);\n\t            function TrendLine(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeSegmentsInds = [];\n\t                this.displayedSegments = {};\n\t                var options = this.trend.getOptions();\n\t                this.material = new LineBasicMaterial({\n\t                    color: options.lineColor,\n\t                    linewidth: options.lineWidth\n\t                });\n\t                this.initLine();\n\t            }\n\t            TrendLine.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendLine.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            TrendLine.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segments.onRebuild(function() {\n\t                    _this.destroySegments();\n\t                    _this.setupSegments();\n\t                }));\n\t                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n\t                    _this.setupSegments();\n\t                }));\n\t            };\n\t            TrendLine.prototype.initLine = function() {\n\t                var geometry = new Geometry();\n\t                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.scaleXFactor = scaleXFactor;\n\t                this.scaleYFactor = scaleYFactor;\n\t                this.lineSegments = new LineSegments(geometry, this.material);\n\t                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.lineSegments.frustumCulled = false;\n\t                for (var i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\n\t                    geometry.vertices.push(new Vector3(), new Vector3());\n\t                    this.freeSegmentsInds.push(i);\n\t                }\n\t                this.vertices = geometry.vertices;\n\t                this.setupSegments();\n\t            };\n\t            TrendLine.prototype.setupSegments = function() {\n\t                var geometry = this.lineSegments.geometry;\n\t                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.displayedSegments) {\n\t                    var lineSegment = this.displayedSegments[segmentId];\n\t                    var segment_1 = this.trend.segments.segments[lineSegment.segmentId];\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupSegment(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                if (!lineSegment) {\n\t                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n\t                    var ind = this.freeSegmentsInds.pop();\n\t                    lineSegment = this.displayedSegments[segmentId] = {\n\t                        segmentId: segmentId,\n\t                        ind: ind\n\t                    };\n\t                }\n\t                var segmentInd = lineSegment.ind;\n\t                var lineStartVertex = this.vertices[segmentInd * 2];\n\t                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t            };\n\t            TrendLine.prototype.destroySegments = function() {\n\t                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t            };\n\t            TrendLine.prototype.destroySegment = function(segmentId) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t                lineStartVertex.set(0, 0, 0);\n\t                lineEndVertex.set(0, 0, 0);\n\t                delete this.displayedSegments[segmentId];\n\t                this.freeSegmentsInds.push(lineSegment.ind);\n\t            };\n\t            TrendLine.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.lineSegments.scale;\n\t                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t            };\n\t            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                var geometry = this.lineSegments.geometry;\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.displayedSegments[segmentId]) continue;\n\t                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendLine;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLine = TrendLine;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var Vector3 = THREE.Vector3;\n\t        var Mesh = THREE.Mesh;\n\t        var Line = THREE.Line;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var PlaneGeometry = THREE.PlaneGeometry;\n\t        var Trend_1 = __webpack_require__(17);\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var RISE_COLOR = 2927680;\n\t        var FALL_COLOR = 15619379;\n\t        var MARGIN_PERCENT = .3;\n\t        var MAX_CANDLES = 100;\n\t        var TrendsCandlesWidget = function(_super) {\n\t            __extends(TrendsCandlesWidget, _super);\n\t            function TrendsCandlesWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendCandlesWidget;\n\t            };\n\t            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n\t            return TrendsCandlesWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n\t        var TrendCandlesWidget = function(_super) {\n\t            __extends(TrendCandlesWidget, _super);\n\t            function TrendCandlesWidget(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeCandlesInds = [];\n\t                this.candlesPool = [];\n\t                this.candles = {};\n\t                this.initObject();\n\t            }\n\t            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n\t            };\n\t            TrendCandlesWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendCandlesWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segments.onRebuild(function() {\n\t                    _this.destroyCandles();\n\t                    _this.setupCandles();\n\t                }));\n\t                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n\t                    _this.setupCandles();\n\t                }));\n\t            };\n\t            TrendCandlesWidget.prototype.initObject = function() {\n\t                var stateData = this.chartState.data;\n\t                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.scaleXFactor = scaleXFactor;\n\t                this.scaleYFactor = scaleYFactor;\n\t                this.object3D = new Object3D();\n\t                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.object3D.frustumCulled = false;\n\t                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t                this.setupCandles();\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandles = function() {\n\t                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.candles) {\n\t                    var segment_1 = this.candles[segmentId].segment;\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupCandle(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandles = function() {\n\t                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n\t                var candle = this.candles[segmentId];\n\t                this.object3D.remove(candle.getObject3D());\n\t                delete this.candles[segmentId];\n\t            };\n\t            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.object3D.scale;\n\t                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t            };\n\t            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.candles[segmentId]) continue;\n\t                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t                    this.setupCandle(segmentId, segmentState);\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n\t                var candleInd = candleId % MAX_CANDLES;\n\t                var candle = this.candlesPool[candleInd];\n\t                if (!candle) {\n\t                    candle = this.candlesPool[candleInd] = new CandleWidget();\n\t                }\n\t                if (!this.candles[candleId]) {\n\t                    this.candles[candleId] = candle;\n\t                    this.object3D.add(candle.getObject3D());\n\t                }\n\t                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t                candle.setSegment(segmentState);\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendCandlesWidget;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendCandlesWidget = TrendCandlesWidget;\n\t        var CandleWidget = function() {\n\t            function CandleWidget() {\n\t                this.initObject();\n\t            }\n\t            CandleWidget.prototype.getObject3D = function() {\n\t                return this.rect;\n\t            };\n\t            CandleWidget.prototype.setSegment = function(segment) {\n\t                this.segment = segment;\n\t                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\t                var geometry = this.rect.geometry;\n\t                var material = this.rect.material;\n\t                var width = segment.endXVal - segment.startXVal;\n\t                width -= width * MARGIN_PERCENT;\n\t                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n\t                leftTop.set(-width / 2, height / 2, 0);\n\t                rightTop.set(width / 2, height / 2, 0);\n\t                leftBottom.set(-width / 2, -height / 2, 0);\n\t                rightBottom.set(width / 2, -height / 2, 0);\n\t                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t                    leftBottom.setY(leftBottom.y + 1);\n\t                    rightBottom.setY(rightBottom.y + 1);\n\t                }\n\t                material.color.set(color);\n\t                geometry.verticesNeedUpdate = true;\n\t                var vLineGeometry = this.vLine.geometry;\n\t                var vLineMaterial = this.vLine.material;\n\t                var lineTop = segment.maxYVal - segment.yVal;\n\t                var lineBottom = segment.minYVal - segment.yVal;\n\t                vLineGeometry.vertices[0].set(0, lineTop, 0);\n\t                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t                vLineMaterial.color.set(color);\n\t                vLineGeometry.verticesNeedUpdate = true;\n\t                var hLineGeometry = this.hLine.geometry;\n\t                var hLineMaterial = this.hLine.material;\n\t                var lineLeft = -width / 2;\n\t                var lineRight = width / 2;\n\t                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t                hLineMaterial.color.set(color);\n\t                hLineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            CandleWidget.prototype.initObject = function() {\n\t                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n\t                var vLineGeometry = new Geometry();\n\t                var hLineGeometry = new Geometry();\n\t                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.rect.add(this.vLine);\n\t                this.rect.add(this.hLine);\n\t            };\n\t            return CandleWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(17);\n\t        var TrendsBeaconWidget = function(_super) {\n\t            __extends(TrendsBeaconWidget, _super);\n\t            function TrendsBeaconWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendBeacon;\n\t            };\n\t            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n\t            return TrendsBeaconWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n\t        var TrendBeacon = function(_super) {\n\t            __extends(TrendBeacon, _super);\n\t            function TrendBeacon(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                if (state.data.animations.enabled) {\n\t                    this.animate();\n\t                }\n\t                this.updatePosition();\n\t            }\n\t            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendBeacon.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendBeacon.prototype.onTrendChange = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return _this.updatePosition();\n\t                }));\n\t                this.bindEvent(this.chartState.onChange(function(changedProps) {\n\t                    return _this.onStateChange(changedProps);\n\t                }));\n\t                this.bindEvent(this.chartState.onDestroy(function() {\n\t                    return _this.stopAnimation();\n\t                }));\n\t            };\n\t            TrendBeacon.prototype.initObject = function() {\n\t                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                light.scale.set(.2, .2, 1);\n\t                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture()\n\t                })));\n\t                this.segment = this.trend.segments.getEndSegment();\n\t            };\n\t            TrendBeacon.prototype.animate = function() {\n\t                var _this = this;\n\t                this.animated = true;\n\t                var object = this.mesh;\n\t                var animationObject = {\n\t                    scale: object.scale.x,\n\t                    opacity: object.material.opacity\n\t                };\n\t                this.mesh.scale.set(.1, .1, 1);\n\t                setTimeout(function() {\n\t                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n\t                        scale: 1,\n\t                        opacity: 0\n\t                    });\n\t                    animation.eventCallback(\"onUpdate\", function() {\n\t                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n\t                        object.material.opacity = animationObject.opacity;\n\t                    }).eventCallback(\"onComplete\", function() {\n\t                        _this.animation && animation.restart();\n\t                    });\n\t                }, 500);\n\t            };\n\t            TrendBeacon.prototype.stopAnimation = function() {\n\t                this.animated = false;\n\t                this.animation && this.animation.kill();\n\t                this.animation = null;\n\t            };\n\t            TrendBeacon.createTexture = function() {\n\t                var h = 32, w = 32;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n\t                    ctx.fillStyle = \"white\";\n\t                    ctx.fill();\n\t                });\n\t            };\n\t            TrendBeacon.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n\t                this.segment = trendsSegments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onStateChange = function(changedProps) {\n\t                if (!changedProps.animations) return;\n\t                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n\t                if (changedProps.animations.enabled) {\n\t                    this.animate();\n\t                } else {\n\t                    this.stopAnimation();\n\t                }\n\t            };\n\t            TrendBeacon.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var xVal, yVal;\n\t                var currentAnimationState = this.segment.currentAnimationState;\n\t                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    xVal = currentAnimationState.endXVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                } else {\n\t                    xVal = currentAnimationState.xVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                }\n\t                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n\t                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n\t                this.mesh.position.set(x, endPointVector.y, .1);\n\t            };\n\t            return TrendBeacon;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendBeacon = TrendBeacon;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(3));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        exports.DEFAULT_CONFIG = {\n\t            installPluginWidgets: true\n\t        };\n\t        var ChartPlugin = function() {\n\t            function ChartPlugin(options, config) {\n\t                if (config === void 0) {\n\t                    config = {};\n\t                }\n\t                this.unsubscribers = [];\n\t                this.initialState = options;\n\t                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n\t                this.name = this.constructor.NAME;\n\t                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n\t            }\n\t            ChartPlugin.prototype.setupChartState = function(chartState) {\n\t                var _this = this;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n\t                    return _this.onInitialStateAppliedHandler(initialState);\n\t                }), this.chartState.onReady(function() {\n\t                    return _this.onChartReadyHandler();\n\t                }), this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n\t                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n\t                }));\n\t            };\n\t            ChartPlugin.prototype.getOptions = function() {\n\t                return this.chartState.data.pluginsState[this.name];\n\t            };\n\t            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n\t            ChartPlugin.prototype.onChartReadyHandler = function() {};\n\t            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n\t            ChartPlugin.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t            };\n\t            ChartPlugin.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartPlugin.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartPlugin.NAME = \"\";\n\t            ChartPlugin.pluginWidgets = [];\n\t            return ChartPlugin;\n\t        }();\n\t        exports.ChartPlugin = ChartPlugin;\n\t    } ]);\n\t});\n\t\n\t\n\t//# sourceMappingURL=ThreeChart.js.map\n\n/***/ }\n\n/******/ })\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** demoApp.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 861ee5af665d6be18f2a\n **/","import { Chart, AXIS_RANGE_TYPE, ITrendItem, Utils, AXIS_DATA_TYPE, TREND_TYPE } from 'three-chart';\nimport enabled = THREE.Cache.enabled;\n// import { TREND_MARK_SIDE, ITrendMarkOptions, TrendsMarksPlugin } from '../plugins/build/plugins/src/TrendsMarksPlugin/TrendsMarksPlugin';\n\n\nvar chart: Chart;\n\nclass DataSourse {\n\tdata: ITrendItem[] = [];\n\tstartTime: number;\n\tendTime: number;\n\n\tconstructor() {\n\t\tlet sec = 0;\n\t\tlet val = 70;\n\t\tthis.startTime = Date.now();\n\n\t\twhile (sec < 100) { //2592000\n\t\t\tthis.data.push({\n\t\t\t\txVal: this.startTime + sec * 1000,\n\t\t\t\tyVal: val\n\t\t\t});\n\t\t\tval += Math.random() * 14 - 7;\n\t\t\tsec++;\n\t\t}\n\t\tthis.endTime = this.data[this.data.length - 1].xVal;\n\t}\n\n\tgetData() {\n\t\treturn Utils.deepCopy(this.data);\n\t}\n\n\tgetNext() {\n\t\tvar lastVal = this.data[this.data.length - 1];\n\t\tvar yVal = lastVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.endTime + 1000;\n\t\tthis.endTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.push(item);\n\t\treturn item;\n\t}\n\n\tgetPrev() {\n\t\tvar firstVal = this.data[0];\n\t\tvar yVal = firstVal.yVal + Math.random() * 14 - 7;\n\t\tvar xVal = this.startTime - 1000;\n\t\tthis.startTime = xVal;\n\t\tvar item = {\n\t\t\txVal: xVal,\n\t\t\tyVal: yVal\n\t\t};\n\t\tthis.data.unshift(item);\n\t\treturn item;\n\t}\n}\n\nclass MarksSource {\n\tstatic getNext(val: number): ITrendMarkOptions {\n\t\tif (Math.random() > 0.2) return null;\n\t\treturn this.generate(val);\n\t}\n\n\tstatic generate(val: number): ITrendMarkOptions {\n\t\tlet descriptionColor = 'rgb(40,136,75)';\n\t\tlet orientation =  Utils.getRandomItem([TREND_MARK_SIDE.TOP, TREND_MARK_SIDE.BOTTOM]);\n\t\tif (orientation == TREND_MARK_SIDE.BOTTOM) {\n\t\t\tdescriptionColor = 'rgb(219,73,49)';\n\t\t}\n\n\t\treturn {\n\t\t\ttrendName: 'main',\n\t\t\tvalue: val,\n\t\t\ttitle: Utils.getRandomItem(['Alex Malcon', 'Serg Morrs', 'Harry Potter']),\n\t\t\tdescription: Utils.getRandomItem(['$10 -> 20$', '$15 -> 30$', '40$ -> 80$']),\n\t\t\ticon: Utils.getRandomItem(['AM', 'SM', 'HP']),\n\t\t\ticonColor: Utils.getRandomItem(['rgb(69,67,130)', 'rgb(124,39,122)']),\n\t\t\torientation: orientation,\n\t\t\tdescriptionColor: descriptionColor\n\t\t}\n\t}\n}\n\nwindow.onload = function () {\n\n\tinitListeners();\n\n\tvar dsMain = new DataSourse();\n\tvar dsRed = new DataSourse();\n\tvar dsBlue = new DataSourse();\n\tvar now = Date.now();\n\n\tchart = new Chart({\n\t\tyAxis: {\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.data[0].yVal, name: 'openprice', title: 'OPEN PRICE', lineColor: '#29874b', stickToEdges: true},\n\t\t\t],\n\t\t\trange: {\n\n\t\t\t\tpadding: {end: 100, start: 100},\n\t\t\t\tmargin: {end: 50, start: 50},\n\t\t\t\tzeroVal: 70\n\t\t\t}\n\t\t},\n\t\txAxis: {\n\t\t\t//range: {type: AXIS_RANGE_TYPE.FIXED, from: 10, to: 30},\n\t\t\tdataType: AXIS_DATA_TYPE.DATE,\n\t\t\trange: {\n\t\t\t\ttype: AXIS_RANGE_TYPE.FIXED,\n\t\t\t\tfrom: Date.now(),\n\t\t\t\tto: Date.now() + 20000,\n\t\t\t\tpadding: {end: 200, start: 0},\n\t\t\t\tmaxLength: 5000000,\n\t\t\t\tminLength: 5000\n\t\t\t},\n\t\t\tmarks: [\n\t\t\t\t{value: dsMain.endTime + 30000, name: 'deadline', title: 'DEADLINE', lineColor: '#ff6600', type: 'timeleft', showValue: true},\n\t\t\t\t{value: dsMain.endTime + 40000, name: 'close', title: 'CLOSE', lineColor: '#005187', type: 'timeleft', showValue: true}\n\t\t\t]\n\t\t\t// range: {\n\t\t\t// \tfrom: 80,\n\t\t\t// \tto: 90\n\t\t\t// }\n\t\t},\n\t\ttrends: {\n\t\t\t'main': {\n\t\t\t\ttype: TREND_TYPE.LINE,\n\t\t\t\tdataset: dsMain.getData(),\n\t\t\t\thasBeacon: true,\n\t\t\t\thasIndicator: true,\n\t\t\t\thasGradient: false,\n\t\t\t},\n\t\t\t// 'red': {dataset: dsRed.data, lineColor: 0xFF2222, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t\t// 'blue': {dataset: dsBlue.data, lineColor: 0x2222FF, lineWidth: 2, hasGradient: false, hasIndicator: true, enabled: false},\n\t\t},\n\t\tshowStats: true,\n\t\t// autoRender: {fps: 100},\n\t\t// animations: {enabled: false},\n\t\twidgets: {\n\t\t\t//Grid: {enabled: false},\n\t\t\t//Axis: {enabled: false},\n\t\t\tTrendsGradient: {enabled: false},\n\t\t\t//TrendsBeacon: {enabled: false},\n\t\t\t//TrendsIndicator: {enabled: false},\n\t\t\t// TrendsMarks: {enabled: false},\n\t\t\t// TrendsLoading: {enabled: false},\n\t\t\t// AxisMarks: {enabled: false}\n\t\t}\n\t},\n\tdocument.querySelector('.chart')\n\t// \t,\n\t// [\n\t// \tnew TrendsMarksPlugin({items: [MarksSource.generate(now + 3000), MarksSource.generate(now + 3000), MarksSource.generate(now + 4000)]})\n\t// ]\n\t);\n\n\tchart.setState({animations: {enabled: false}});\n\tchart.setState({animations: {enabled: true}});\n\t\n\t(<any>window)['chart'] = chart;\n\n\tvar mainTrend = chart.getTrend('main');\n\tvar deadlineMark = chart.state.xAxisMarks.getItem('deadline');\n\tvar closeMark = chart.state.xAxisMarks.getItem('close');\n\n\tmainTrend.onDataChange(() => {\n\t\tvar closeValue = closeMark.options.value;\n\t\tif (mainTrend.getLastItem().xVal >= closeValue) {\n\t\t\tdeadlineMark.setOptions({value: closeValue + 10000});\n\t\t\tcloseMark.setOptions({value: closeValue + 20000})\n\t\t}\n\t\t// var markOptions = MarksSource.getNext(mainTrend.getLastItem().xVal);\n\t\t// if (markOptions) setTimeout(() => {\n\t\t// \tlet trendsMarks = chart.state.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\n\t\t// \ttrendsMarks.createMark(markOptions);\n\t\t// }, 500);\n\t});\n\n\n\t// var previewChart1 = Chart.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-chart')[0],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 20, to: 150}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.data, hasBeacon: true}\n\t// \t}\n\t// });\n\t//\n\t// var previewChart2 = Chart.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-chart')[1],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 200}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.data, hasBeacon: true}\n\t// \t},\n\t//\n\t// });\n\t//\n\t// var previewChart3 = Chart.createPreviewChart({\n\t// \t$el: document.querySelectorAll('.preview-chart')[2],\n\t// \tyAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 100}\n\t// \t},\n\t// \txAxis: {\n\t// \t\trange: {type: AXIS_RANGE_TYPE.FIXED, from: 0, to: 80}\n\t// \t},\n\t// \ttrends: {\n\t// \t\t'main': {dataset: dsMain.data, hasBeacon: true},\n\t// \t\t'red': {dataset: dsRed.data, lineColor: 0xFF2222},\n\t// \t}\n\t// });\n\t//\n\n\tvar i = 0;\n\n\tchart.getTrend('main').onPrependRequest((requestedLength, resolve, reject) => {\n\t\tvar responseData: ITrendItem[] = [];\n\t\tvar ticksCount = Math.round(requestedLength / 1000) ;\n\t\twhile (ticksCount--) responseData.unshift(dsMain.getPrev());\n\t\tsetTimeout(() => {\n\t\t\tresolve(responseData);\n\t\t}, 2000)\n\t});\n\n\tsetInterval(() => {\n\t\ti++;\n\t\tvar val = dsMain.getNext();\n\n\t\t// [i % 2 ? 10 : 20]\n\n\t\t chart.getTrend('main').appendData([val]);\n\t\t// chart.getTrend('main').prependData([dsMain.getPrev(), dsMain.getPrev()].reverse());\n\t\t// chart.getTrend('main').appendData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// chart.getTrend('main').prependData([val, dsMain.getNext(), dsMain.getNext(), dsMain.getNext()]);\n\t\t// chart.getTrend('red').appendData([val + 10 + Math.random() * 20]);\n\t\t// chart.getTrend('blue').appendData([val + 20 + Math.random() * 20]);\n\n\n\n\t\t// previewChart1.getTrend('main').appendData([val]);\n\t\t// previewChart2.getTrend('main').appendData([val + 10 + Math.random() * 20]);\n\t\t// previewChart3.getTrend('red').appendData([val + 20 + Math.random() * 20]);\n\t\t\n\t\t// previewChart1.appendData(dataToAppend1);\n\t\t//\n\t\t// var chartData2 = previewChart2.state.data.trends[0].data;\n\t\t// var lastItem2 = chartData2[chartData.length - 1];\n\t\t// var dataToAppend2 = [\n\t\t// \t{xVal: lastItem2.xVal + 1, yVal: lastItem2.yVal + Math.random() * 14 - 7 },\n\t\t// ];\n\t\t// previewChart2.appendData(dataToAppend2);\n\t\t// previewChart3.appendData(dataToAppend2);\n\t}, 1000);\n};\n\n\nfunction initListeners() {\n\tvar $checkboxMaintrend = document.querySelector('input[name=\"maintrend\"]') as HTMLInputElement;\n\t$checkboxMaintrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {main: {enabled: $checkboxMaintrend.checked}}});\n\t});\n\tvar $checkboxRedtrend = document.querySelector('input[name=\"redtrend\"]') as HTMLInputElement;\n\t$checkboxRedtrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {red: {enabled: $checkboxRedtrend.checked}}});\n\t});\n\tvar $checkboxBluetrend = document.querySelector('input[name=\"bluetrend\"]') as HTMLInputElement;\n\t$checkboxBluetrend.addEventListener('change', () => {\n\t\tchart.setState({trends: {blue: {enabled: $checkboxBluetrend.checked}}});\n\t});\n\n\tvar $switchLineBtn = document.querySelector('[name=\"switch-line\"]') as HTMLInputElement;\n\t$switchLineBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.LINE});\n\t});\n\n\tvar $switchBarsBtn = document.querySelector('[name=\"switch-bars\"]') as HTMLInputElement;\n\t$switchBarsBtn.addEventListener('click', () => {\n\t\tchart.getTrend('main').setOptions({type: TREND_TYPE.CANDLE});\n\t});\n\n\tdocument.querySelector('[name=\"move-left\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.state.data.xAxis.range;\n\t\tchart.setState({xAxis: {range: {from: currentRange.from - 2000}}});\n\t});\n\n\tdocument.querySelector('[name=\"move-right\"]').addEventListener('click', () => {\n\t\tlet currentRange = chart.state.data.xAxis.range;\n\t\tchart.setState({xAxis: {range: {to: currentRange.to + 2000}}});\n\t});\n\t\n\tvar timeframeButtons = document.querySelectorAll(\".timeframe\");\n\tfor (var i = 0; i < timeframeButtons.length; i++) {\n\t\ttimeframeButtons[i].addEventListener(\"click\", function() {\n\t\t\tvar range = Number(this.getAttribute('data-range'));\n\t\t\tvar segmentLength = Number(this.getAttribute('data-segment-length'));\n\n\n\t\t\tchart.state.setState({autoScroll: false});\n\t\t\tchart.state.zoomToRange(range);\n\t\t\tchart.state.scrollToEnd().then(() => {\n\t\t\t\tchart.state.setState({autoScroll: true});\n\t\t\t});\n\t\t});\n\t}\n}\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./demo/demoApp.ts\n **/","module.exports = require(\"./ThreeChart\")\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-chart/build/index.js\n ** module id = 34\n ** module chunks = 1\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n    if (typeof exports === \"object\" && typeof module === \"object\") module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"ThreeChart\"] = factory(); else root[\"ThreeChart\"] = factory();\n})(this, function() {\n    return function(modules) {\n        var installedModules = {};\n        function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n            var module = installedModules[moduleId] = {\n                exports: {},\n                id: moduleId,\n                loaded: false\n            };\n            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n            module.loaded = true;\n            return module.exports;\n        }\n        __webpack_require__.m = modules;\n        __webpack_require__.c = installedModules;\n        __webpack_require__.p = \"\";\n        return __webpack_require__(0);\n    }([ function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(1));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(2));\n        __export(__webpack_require__(21));\n        __export(__webpack_require__(20));\n        __export(__webpack_require__(19));\n        __export(__webpack_require__(12));\n        __export(__webpack_require__(17));\n        __export(__webpack_require__(18));\n        __export(__webpack_require__(16));\n        __export(__webpack_require__(14));\n        __export(__webpack_require__(15));\n        __export(__webpack_require__(33));\n        __export(__webpack_require__(25));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        __webpack_require__(3);\n        var PerspectiveCamera = THREE.PerspectiveCamera;\n        var State_1 = __webpack_require__(12);\n        var Utils_1 = __webpack_require__(14);\n        var AxisWidget_1 = __webpack_require__(22);\n        var GridWidget_1 = __webpack_require__(23);\n        var TrendsLoadingWidget_1 = __webpack_require__(24);\n        var AxisMarksWidget_1 = __webpack_require__(26);\n        var BorderWidget_1 = __webpack_require__(27);\n        var TrendsIndicatorWidget_1 = __webpack_require__(28);\n        var TrendsLineWidget_1 = __webpack_require__(29);\n        var TrendsCandleWidget_1 = __webpack_require__(30);\n        var TrendsBeaconWidget_1 = __webpack_require__(31);\n        var deps_1 = __webpack_require__(32);\n        exports.MAX_DATA_LENGTH = 2692e3;\n        var Chart = function() {\n            function Chart(state, $container, plugins) {\n                var _this = this;\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.widgets = [];\n                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n                if (!$container) {\n                    Utils_1.Utils.error(\"$el must be set\");\n                }\n                var style = getComputedStyle($container);\n                state.width = parseInt(style.width);\n                state.height = parseInt(style.height);\n                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n                    return _this.zoom(zoomValue, origin);\n                }, 200);\n                this.$container = $container;\n                this.init($container);\n            }\n            Chart.installWidget = function(Widget) {\n                if (!Widget.widgetName) {\n                    Utils_1.Utils.error(\"unnamed widget\");\n                }\n                this.installedWidgets[Widget.widgetName] = Widget;\n            };\n            Chart.prototype.init = function($container) {\n                var state = this.state;\n                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n                this.scene = new THREE.Scene();\n                this.isStopped = !autoRender.enabled;\n                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n                    antialias: true,\n                    alpha: true\n                });\n                renderer.setPixelRatio(Chart.devicePixelRatio);\n                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n                renderer.setSize(w, h);\n                $container.appendChild(renderer.domElement);\n                this.$el = renderer.domElement;\n                this.$el.style.display = \"block\";\n                if (showStats) {\n                    this.stats = new Stats();\n                    $container.appendChild(this.stats.domElement);\n                }\n                this.setupCamera();\n                var widgetsClasses = this.state.widgetsClasses;\n                for (var widgetName in widgetsClasses) {\n                    var widgetOptions = this.state.data.widgets[widgetName];\n                    if (!widgetOptions.enabled) continue;\n                    var WidgetConstructor = widgetsClasses[widgetName];\n                    var widget = new WidgetConstructor(this.state);\n                    this.scene.add(widget.getObject3D());\n                    this.widgets.push(widget);\n                }\n                this.bindEvents();\n                this.renderLoop();\n            };\n            Chart.prototype.renderLoop = function() {\n                var _this = this;\n                if (this.isDestroyed) return;\n                this.stats && this.stats.begin();\n                this.render();\n                if (this.isStopped) return;\n                var fpsLimit = this.state.data.autoRender.fps;\n                if (fpsLimit) {\n                    var delay = 1e3 / fpsLimit;\n                    setTimeout(function() {\n                        return requestAnimationFrame(function() {\n                            return _this.renderLoop();\n                        });\n                    }, delay);\n                } else {\n                    requestAnimationFrame(function() {\n                        return _this.renderLoop();\n                    });\n                }\n                this.stats && this.stats.end();\n            };\n            Chart.prototype.render = function() {\n                this.renderer.render(this.scene, this.camera);\n            };\n            Chart.prototype.stop = function() {\n                this.isStopped = true;\n            };\n            Chart.prototype.run = function() {\n                this.isStopped = false;\n                this.renderLoop();\n            };\n            Chart.prototype.destroy = function() {\n                this.isDestroyed = true;\n                this.stop();\n                this.state.destroy();\n                this.unbindEvents();\n                try {\n                    this.renderer.forceContextLoss();\n                } catch (wtf) {}\n                this.renderer.context = null;\n                this.renderer.domElement = null;\n                this.renderer = null;\n            };\n            Chart.prototype.getState = function() {\n                return this.state.data;\n            };\n            Chart.prototype.getTrend = function(trendName) {\n                return this.state.getTrend(trendName);\n            };\n            Chart.prototype.setState = function(state) {\n                return this.state.setState(state);\n            };\n            Chart.prototype.bindEvents = function() {\n                var _this = this;\n                var $el = this.$el;\n                if (this.state.data.controls.enabled) {\n                    $el.addEventListener(\"mousewheel\", function(ev) {\n                        _this.onMouseWheel(ev);\n                    });\n                    $el.addEventListener(\"mousemove\", function(ev) {\n                        _this.onMouseMove(ev);\n                    });\n                    $el.addEventListener(\"mousedown\", function(ev) {\n                        return _this.onMouseDown(ev);\n                    });\n                    $el.addEventListener(\"mouseup\", function(ev) {\n                        return _this.onMouseUp(ev);\n                    });\n                    $el.addEventListener(\"touchmove\", function(ev) {\n                        _this.onTouchMove(ev);\n                    });\n                    $el.addEventListener(\"touchend\", function(ev) {\n                        _this.onTouchEnd(ev);\n                    });\n                }\n                if (this.state.data.autoResize) {\n                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n                    });\n                }\n                this.unsubscribers = [ this.state.onTrendsChange(function() {\n                    return _this.autoscroll();\n                }), this.state.screen.onTransformationFrame(function(options) {\n                    return _this.onScreenTransformHandler(options);\n                }), this.state.onResize(function(options) {\n                    return _this.onChartResize();\n                }) ];\n            };\n            Chart.prototype.unbindEvents = function() {\n                try {\n                    this.resizeSensor && this.resizeSensor.detach();\n                } catch (e) {}\n                this.$el.remove();\n                this.unsubscribers.forEach(function(unsubscribe) {\n                    return unsubscribe();\n                });\n            };\n            Chart.prototype.setupCamera = function() {\n                var camSettings = this.state.screen.getCameraSettings();\n                if (!this.camera) {\n                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n                    this.scene.add(this.camera);\n                } else {\n                    this.camera.fov = camSettings.FOV;\n                    this.camera.aspect = camSettings.aspect;\n                    this.camera.far = camSettings.far;\n                    this.camera.near = camSettings.near;\n                    this.camera.updateProjectionMatrix();\n                }\n                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n                this.cameraInitialPosition = this.camera.position.clone();\n                this.onScreenTransformHandler(this.state.screen.options);\n            };\n            Chart.prototype.onScreenTransformHandler = function(options) {\n                if (options.scrollX != void 0) {\n                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n                    this.camera.position.setX(scrollX_1);\n                }\n                if (options.scrollY != void 0) {\n                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n                    this.camera.position.setY(scrollY_1);\n                }\n            };\n            Chart.prototype.autoscroll = function() {\n                var state = this.state;\n                if (!state.data.autoScroll) return;\n                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n                if (trendsMaxXDelta > 0) {\n                    var maxVisibleX = this.state.screen.getScreenRightVal();\n                    var paddingRightX = this.state.getPaddingRight();\n                    var currentScroll = state.data.xAxis.range.scroll;\n                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n                        return;\n                    }\n                    var scrollDelta = trendsMaxXDelta;\n                    this.setState({\n                        xAxis: {\n                            range: {\n                                scroll: currentScroll + scrollDelta\n                            }\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onScrollStop = function() {};\n            Chart.prototype.onMouseDown = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.clientX,\n                        y: ev.clientY\n                    }\n                });\n            };\n            Chart.prototype.onMouseUp = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onMouseMove = function(ev) {\n                if (this.state.data.cursor.dragMode) {\n                    this.setState({\n                        cursor: {\n                            dragMode: true,\n                            x: ev.clientX,\n                            y: ev.clientY\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onMouseWheel = function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n                var zoomOrigin = ev.layerX / this.state.data.width;\n                var zoomValue = 1 + ev.wheelDeltaY * .001;\n                this.zoom(zoomValue, zoomOrigin);\n            };\n            Chart.prototype.onTouchMove = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.touches[0].clientX,\n                        y: ev.touches[0].clientY\n                    }\n                });\n            };\n            Chart.prototype.onTouchEnd = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n                this.setState({\n                    width: width,\n                    height: height\n                });\n            };\n            Chart.prototype.onChartResize = function() {\n                var _a = this.state.data, width = _a.width, height = _a.height;\n                this.renderer.setSize(width, height);\n                this.setupCamera();\n            };\n            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n                var _this = this;\n                var MAX_ZOOM_VALUE = 1.5;\n                var MIN_ZOOM_VALUE = .7;\n                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n                var autoScrollIsEnabled = this.state.data.autoScroll;\n                if (autoScrollIsEnabled) this.state.setState({\n                    autoScroll: false\n                });\n                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n                    if (autoScrollIsEnabled) _this.setState({\n                        autoScroll: true\n                    });\n                });\n            };\n            Chart.createPreviewChart = function(userOptions, $el) {\n                var previewChartOptions = {\n                    animations: {\n                        enabled: false\n                    },\n                    widgets: {\n                        Grid: {\n                            enabled: false\n                        },\n                        Axis: {\n                            enabled: false\n                        },\n                        TrendsGradient: {\n                            enabled: false\n                        }\n                    }\n                };\n                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n                return new Chart(options, $el);\n            };\n            Chart.devicePixelRatio = window.devicePixelRatio;\n            Chart.installedWidgets = {};\n            Chart.renderers = {\n                CanvasRenderer: THREE.CanvasRenderer,\n                WebGLRenderer: THREE.WebGLRenderer\n            };\n            return Chart;\n        }();\n        exports.Chart = Chart;\n        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n        Chart.installWidget(AxisWidget_1.AxisWidget);\n        Chart.installWidget(GridWidget_1.GridWidget);\n        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n        Chart.installWidget(BorderWidget_1.BorderWidget);\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        window.Stats = __webpack_require__(4);\n        __webpack_require__(5);\n        __webpack_require__(6);\n        exports.isPlainObject = __webpack_require__(7);\n        exports.EE2 = __webpack_require__(9);\n        var es6_promise_1 = __webpack_require__(10);\n        exports.Promise = es6_promise_1.Promise;\n        exports.ResizeSensor = __webpack_require__(11);\n    }, function(module, exports) {\n        var Stats = function() {\n            function h(a) {\n                c.appendChild(a.dom);\n                return a;\n            }\n            function k(a) {\n                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n                l = a;\n            }\n            var l = 0, c = document.createElement(\"div\");\n            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n            c.addEventListener(\"click\", function(a) {\n                a.preventDefault();\n                k(++l % c.children.length);\n            }, !1);\n            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n            k(0);\n            return {\n                REVISION: 16,\n                dom: c,\n                addPanel: h,\n                showPanel: k,\n                begin: function() {\n                    g = (performance || Date).now();\n                },\n                end: function() {\n                    a++;\n                    var c = (performance || Date).now();\n                    f.update(c - g, 200);\n                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n                        var d = performance.memory;\n                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                    }\n                    return c;\n                },\n                update: function() {\n                    g = this.end();\n                },\n                domElement: c,\n                setMode: k\n            };\n        };\n        Stats.Panel = function(h, k, l) {\n            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n            q.width = r;\n            q.height = f;\n            q.style.cssText = \"width:80px;height:48px\";\n            var b = q.getContext(\"2d\");\n            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n            b.textBaseline = \"top\";\n            b.fillStyle = l;\n            b.fillRect(0, 0, r, f);\n            b.fillStyle = k;\n            b.fillText(h, t, u);\n            b.fillRect(d, m, n, p);\n            b.fillStyle = l;\n            b.globalAlpha = .9;\n            b.fillRect(d, m, n, p);\n            return {\n                dom: q,\n                update: function(f, v) {\n                    c = Math.min(c, f);\n                    g = Math.max(g, f);\n                    b.fillStyle = l;\n                    b.globalAlpha = 1;\n                    b.fillRect(0, 0, r, m);\n                    b.fillStyle = k;\n                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                    b.fillRect(d + n - a, m, a, p);\n                    b.fillStyle = l;\n                    b.globalAlpha = .9;\n                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n                }\n            };\n        };\n        \"object\" === typeof module && (module.exports = Stats);\n    }, function(module, exports) {\n        THREE.SpriteCanvasMaterial = function(parameters) {\n            THREE.Material.call(this);\n            this.type = \"SpriteCanvasMaterial\";\n            this.color = new THREE.Color(16777215);\n            this.program = function(context, color) {};\n            this.setValues(parameters);\n        };\n        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n            var material = new THREE.SpriteCanvasMaterial();\n            material.copy(this);\n            material.color.copy(this.color);\n            material.program = this.program;\n            return material;\n        };\n        THREE.CanvasRenderer = function(parameters) {\n            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n            parameters = parameters || {};\n            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n                alpha: parameters.alpha === true\n            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n            if (_context.setLineDash === undefined) {\n                _context.setLineDash = function() {};\n            }\n            this.domElement = _canvas;\n            this.autoClear = true;\n            this.sortObjects = true;\n            this.sortElements = true;\n            this.info = {\n                render: {\n                    vertices: 0,\n                    faces: 0\n                }\n            };\n            this.supportsVertexTextures = function() {};\n            this.setFaceCulling = function() {};\n            this.getContext = function() {\n                return _context;\n            };\n            this.getContextAttributes = function() {\n                return _context.getContextAttributes();\n            };\n            this.getPixelRatio = function() {\n                return _pixelRatio;\n            };\n            this.setPixelRatio = function(value) {\n                if (value !== undefined) _pixelRatio = value;\n            };\n            this.setSize = function(width, height, updateStyle) {\n                _canvasWidth = width * _pixelRatio;\n                _canvasHeight = height * _pixelRatio;\n                _canvas.width = _canvasWidth;\n                _canvas.height = _canvasHeight;\n                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n                if (updateStyle !== false) {\n                    _canvas.style.width = width + \"px\";\n                    _canvas.style.height = height + \"px\";\n                }\n                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _contextGlobalAlpha = 1;\n                _contextGlobalCompositeOperation = 0;\n                _contextStrokeStyle = null;\n                _contextFillStyle = null;\n                _contextLineWidth = null;\n                _contextLineCap = null;\n                _contextLineJoin = null;\n                this.setViewport(0, 0, width, height);\n            };\n            this.setViewport = function(x, y, width, height) {\n                _viewportX = x * _pixelRatio;\n                _viewportY = y * _pixelRatio;\n                _viewportWidth = width * _pixelRatio;\n                _viewportHeight = height * _pixelRatio;\n            };\n            this.setScissor = function() {};\n            this.setScissorTest = function() {};\n            this.setClearColor = function(color, alpha) {\n                _clearColor.set(color);\n                _clearAlpha = alpha !== undefined ? alpha : 1;\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n            };\n            this.setClearColorHex = function(hex, alpha) {\n                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n                this.setClearColor(hex, alpha);\n            };\n            this.getClearColor = function() {\n                return _clearColor;\n            };\n            this.getClearAlpha = function() {\n                return _clearAlpha;\n            };\n            this.getMaxAnisotropy = function() {\n                return 0;\n            };\n            this.clear = function() {\n                if (_clearBox.isEmpty() === false) {\n                    _clearBox.intersect(_clipBox);\n                    _clearBox.expandByScalar(2);\n                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n                    if (_clearAlpha < 1) {\n                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    if (_clearAlpha > 0) {\n                        setBlending(THREE.NormalBlending);\n                        setOpacity(1);\n                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    _clearBox.makeEmpty();\n                }\n            };\n            this.clearColor = function() {};\n            this.clearDepth = function() {};\n            this.clearStencil = function() {};\n            this.render = function(scene, camera) {\n                if (camera instanceof THREE.Camera === false) {\n                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n                    return;\n                }\n                if (this.autoClear === true) this.clear();\n                _this.info.render.vertices = 0;\n                _this.info.render.faces = 0;\n                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n                _elements = _renderData.elements;\n                _lights = _renderData.lights;\n                _camera = camera;\n                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n                calculateLights();\n                for (var e = 0, el = _elements.length; e < el; e++) {\n                    var element = _elements[e];\n                    var material = element.material;\n                    if (material === undefined || material.opacity === 0) continue;\n                    _elemBox.makeEmpty();\n                    if (element instanceof THREE.RenderableSprite) {\n                        _v1 = element;\n                        _v1.x *= _canvasWidthHalf;\n                        _v1.y *= _canvasHeightHalf;\n                        renderSprite(_v1, element, material);\n                    } else if (element instanceof THREE.RenderableLine) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderLine(_v1, _v2, element, material);\n                        }\n                    } else if (element instanceof THREE.RenderableFace) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v3 = element.v3;\n                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _v3.positionScreen.x *= _canvasWidthHalf;\n                        _v3.positionScreen.y *= _canvasHeightHalf;\n                        if (material.overdraw > 0) {\n                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n                        }\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n                        }\n                    }\n                    _clearBox.union(_elemBox);\n                }\n                _context.setTransform(1, 0, 0, 1, 0, 0);\n            };\n            function calculateLights() {\n                _ambientLight.setRGB(0, 0, 0);\n                _directionalLights.setRGB(0, 0, 0);\n                _pointLights.setRGB(0, 0, 0);\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    var lightColor = light.color;\n                    if (light instanceof THREE.AmbientLight) {\n                        _ambientLight.add(lightColor);\n                    } else if (light instanceof THREE.DirectionalLight) {\n                        _directionalLights.add(lightColor);\n                    } else if (light instanceof THREE.PointLight) {\n                        _pointLights.add(lightColor);\n                    }\n                }\n            }\n            function calculateLight(position, normal, color) {\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    _lightColor.copy(light.color);\n                    if (light instanceof THREE.DirectionalLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n                        var amount = normal.dot(lightPosition);\n                        if (amount <= 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    } else if (light instanceof THREE.PointLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n                        if (amount <= 0) continue;\n                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n                        if (amount == 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    }\n                }\n            }\n            function renderSprite(v1, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                var scaleX = element.scale.x * _canvasWidthHalf;\n                var scaleY = element.scale.y * _canvasHeightHalf;\n                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n                _elemBox.min.set(v1.x - dist, v1.y - dist);\n                _elemBox.max.set(v1.x + dist, v1.y + dist);\n                if (material instanceof THREE.SpriteMaterial) {\n                    var texture = material.map;\n                    if (texture !== null) {\n                        var pattern = _patterns[texture.id];\n                        if (pattern === undefined || pattern.version !== texture.version) {\n                            pattern = textureToPattern(texture);\n                            _patterns[texture.id] = pattern;\n                        }\n                        if (pattern.canvas !== undefined) {\n                            setFillStyle(pattern.canvas);\n                            var bitmap = texture.image;\n                            var ox = bitmap.width * texture.offset.x;\n                            var oy = bitmap.height * texture.offset.y;\n                            var sx = bitmap.width * texture.repeat.x;\n                            var sy = bitmap.height * texture.repeat.y;\n                            var cx = scaleX / sx;\n                            var cy = scaleY / sy;\n                            _context.save();\n                            _context.translate(v1.x, v1.y);\n                            if (material.rotation !== 0) _context.rotate(material.rotation);\n                            _context.translate(-scaleX / 2, -scaleY / 2);\n                            _context.scale(cx, cy);\n                            _context.translate(-ox, -oy);\n                            _context.fillRect(ox, oy, sx, sy);\n                            _context.restore();\n                        }\n                    } else {\n                        setFillStyle(material.color.getStyle());\n                        _context.save();\n                        _context.translate(v1.x, v1.y);\n                        if (material.rotation !== 0) _context.rotate(material.rotation);\n                        _context.scale(scaleX, -scaleY);\n                        _context.fillRect(-.5, -.5, 1, 1);\n                        _context.restore();\n                    }\n                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n                    setStrokeStyle(material.color.getStyle());\n                    setFillStyle(material.color.getStyle());\n                    _context.save();\n                    _context.translate(v1.x, v1.y);\n                    if (material.rotation !== 0) _context.rotate(material.rotation);\n                    _context.scale(scaleX, scaleY);\n                    material.program(_context);\n                    _context.restore();\n                }\n            }\n            function renderLine(v1, v2, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _context.beginPath();\n                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n                if (material instanceof THREE.LineBasicMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    if (material.vertexColors !== THREE.VertexColors) {\n                        setStrokeStyle(material.color.getStyle());\n                    } else {\n                        var colorStyle1 = element.vertexColors[0].getStyle();\n                        var colorStyle2 = element.vertexColors[1].getStyle();\n                        if (colorStyle1 === colorStyle2) {\n                            setStrokeStyle(colorStyle1);\n                        } else {\n                            try {\n                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n                                grad.addColorStop(0, colorStyle1);\n                                grad.addColorStop(1, colorStyle2);\n                            } catch (exception) {\n                                grad = colorStyle1;\n                            }\n                            setStrokeStyle(grad);\n                        }\n                    }\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                } else if (material instanceof THREE.LineDashedMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    setStrokeStyle(material.color.getStyle());\n                    setLineDash([ material.dashSize, material.gapSize ]);\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                    setLineDash([]);\n                }\n            }\n            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n                _this.info.render.vertices += 3;\n                _this.info.render.faces++;\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _v1x = v1.positionScreen.x;\n                _v1y = v1.positionScreen.y;\n                _v2x = v2.positionScreen.x;\n                _v2y = v2.positionScreen.y;\n                _v3x = v3.positionScreen.x;\n                _v3y = v3.positionScreen.y;\n                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n                    _diffuseColor.copy(material.color);\n                    _emissiveColor.copy(material.emissive);\n                    if (material.vertexColors === THREE.FaceColors) {\n                        _diffuseColor.multiply(element.color);\n                    }\n                    _color.copy(_ambientLight);\n                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n                    calculateLight(_centroid, element.normalModel, _color);\n                    _color.multiply(_diffuseColor).add(_emissiveColor);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n                    if (material.map !== null) {\n                        var mapping = material.map.mapping;\n                        if (mapping === THREE.UVMapping) {\n                            _uvs = element.uvs;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n                        }\n                    } else if (material.envMap !== null) {\n                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n                            _uv1x = .5 * _normal.x + .5;\n                            _uv1y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n                            _uv2x = .5 * _normal.x + .5;\n                            _uv2y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n                            _uv3x = .5 * _normal.x + .5;\n                            _uv3y = .5 * _normal.y + .5;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n                        }\n                    } else {\n                        _color.copy(material.color);\n                        if (material.vertexColors === THREE.FaceColors) {\n                            _color.multiply(element.color);\n                        }\n                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                    }\n                } else if (material instanceof THREE.MeshNormalMaterial) {\n                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else {\n                    _color.setRGB(1, 1, 1);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                }\n            }\n            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n                _context.beginPath();\n                _context.moveTo(x0, y0);\n                _context.lineTo(x1, y1);\n                _context.lineTo(x2, y2);\n                _context.closePath();\n            }\n            function strokePath(color, linewidth, linecap, linejoin) {\n                setLineWidth(linewidth);\n                setLineCap(linecap);\n                setLineJoin(linejoin);\n                setStrokeStyle(color.getStyle());\n                _context.stroke();\n                _elemBox.expandByScalar(linewidth * 2);\n            }\n            function fillPath(color) {\n                setFillStyle(color.getStyle());\n                _context.fill();\n            }\n            function textureToPattern(texture) {\n                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n                    return {\n                        canvas: undefined,\n                        version: texture.version\n                    };\n                }\n                var image = texture.image;\n                if (image.complete === false) {\n                    return {\n                        canvas: undefined,\n                        version: 0\n                    };\n                }\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                var context = canvas.getContext(\"2d\");\n                context.setTransform(1, 0, 0, -1, 0, image.height);\n                context.drawImage(image, 0, 0);\n                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n                var repeat = \"no-repeat\";\n                if (repeatX === true && repeatY === true) {\n                    repeat = \"repeat\";\n                } else if (repeatX === true) {\n                    repeat = \"repeat-x\";\n                } else if (repeatY === true) {\n                    repeat = \"repeat-y\";\n                }\n                var pattern = _context.createPattern(canvas, repeat);\n                if (texture.onUpdate) texture.onUpdate(texture);\n                return {\n                    canvas: pattern,\n                    version: texture.version\n                };\n            }\n            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n                var pattern = _patterns[texture.id];\n                if (pattern === undefined || pattern.version !== texture.version) {\n                    pattern = textureToPattern(texture);\n                    _patterns[texture.id] = pattern;\n                }\n                if (pattern.canvas !== undefined) {\n                    setFillStyle(pattern.canvas);\n                } else {\n                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n                    _context.fill();\n                    return;\n                }\n                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n                u0 = (u0 + offsetX) * width;\n                v0 = (v0 + offsetY) * height;\n                u1 = (u1 + offsetX) * width;\n                v1 = (v1 + offsetY) * height;\n                u2 = (u2 + offsetX) * width;\n                v2 = (v2 + offsetY) * height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                if (det === 0) return;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.fill();\n                _context.restore();\n            }\n            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n                u0 *= width;\n                v0 *= height;\n                u1 *= width;\n                v1 *= height;\n                u2 *= width;\n                v2 *= height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.clip();\n                _context.drawImage(image, 0, 0);\n                _context.restore();\n            }\n            function expand(v1, v2, pixels) {\n                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n                if (det === 0) return;\n                idet = pixels / Math.sqrt(det);\n                x *= idet;\n                y *= idet;\n                v2.x += x;\n                v2.y += y;\n                v1.x -= x;\n                v1.y -= y;\n            }\n            function setOpacity(value) {\n                if (_contextGlobalAlpha !== value) {\n                    _context.globalAlpha = value;\n                    _contextGlobalAlpha = value;\n                }\n            }\n            function setBlending(value) {\n                if (_contextGlobalCompositeOperation !== value) {\n                    if (value === THREE.NormalBlending) {\n                        _context.globalCompositeOperation = \"source-over\";\n                    } else if (value === THREE.AdditiveBlending) {\n                        _context.globalCompositeOperation = \"lighter\";\n                    } else if (value === THREE.SubtractiveBlending) {\n                        _context.globalCompositeOperation = \"darker\";\n                    }\n                    _contextGlobalCompositeOperation = value;\n                }\n            }\n            function setLineWidth(value) {\n                if (_contextLineWidth !== value) {\n                    _context.lineWidth = value;\n                    _contextLineWidth = value;\n                }\n            }\n            function setLineCap(value) {\n                if (_contextLineCap !== value) {\n                    _context.lineCap = value;\n                    _contextLineCap = value;\n                }\n            }\n            function setLineJoin(value) {\n                if (_contextLineJoin !== value) {\n                    _context.lineJoin = value;\n                    _contextLineJoin = value;\n                }\n            }\n            function setStrokeStyle(value) {\n                if (_contextStrokeStyle !== value) {\n                    _context.strokeStyle = value;\n                    _contextStrokeStyle = value;\n                }\n            }\n            function setFillStyle(value) {\n                if (_contextFillStyle !== value) {\n                    _context.fillStyle = value;\n                    _contextFillStyle = value;\n                }\n            }\n            function setLineDash(value) {\n                if (_contextLineDash.length !== value.length) {\n                    _context.setLineDash(value);\n                    _contextLineDash = value;\n                }\n            }\n        };\n    }, function(module, exports) {\n        THREE.RenderableObject = function() {\n            this.id = 0;\n            this.object = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableFace = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.v3 = new THREE.RenderableVertex();\n            this.normalModel = new THREE.Vector3();\n            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n            this.vertexNormalsLength = 0;\n            this.color = new THREE.Color();\n            this.material = null;\n            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableVertex = function() {\n            this.position = new THREE.Vector3();\n            this.positionWorld = new THREE.Vector3();\n            this.positionScreen = new THREE.Vector4();\n            this.visible = true;\n        };\n        THREE.RenderableVertex.prototype.copy = function(vertex) {\n            this.positionWorld.copy(vertex.positionWorld);\n            this.positionScreen.copy(vertex.positionScreen);\n        };\n        THREE.RenderableLine = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n            this.material = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableSprite = function() {\n            this.id = 0;\n            this.object = null;\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.rotation = 0;\n            this.scale = new THREE.Vector2();\n            this.material = null;\n            this.renderOrder = 0;\n        };\n        THREE.Projector = function() {\n            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n                objects: [],\n                lights: [],\n                elements: []\n            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n            this.projectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n                vector.project(camera);\n            };\n            this.unprojectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n                vector.unproject(camera);\n            };\n            this.pickingRay = function(vector, camera) {\n                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n            };\n            var RenderList = function() {\n                var normals = [];\n                var uvs = [];\n                var object = null;\n                var material = null;\n                var normalMatrix = new THREE.Matrix3();\n                function setObject(value) {\n                    object = value;\n                    material = object.material;\n                    normalMatrix.getNormalMatrix(object.matrixWorld);\n                    normals.length = 0;\n                    uvs.length = 0;\n                }\n                function projectVertex(vertex) {\n                    var position = vertex.position;\n                    var positionWorld = vertex.positionWorld;\n                    var positionScreen = vertex.positionScreen;\n                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n                    var invW = 1 / positionScreen.w;\n                    positionScreen.x *= invW;\n                    positionScreen.y *= invW;\n                    positionScreen.z *= invW;\n                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n                }\n                function pushVertex(x, y, z) {\n                    _vertex = getNextVertexInPool();\n                    _vertex.position.set(x, y, z);\n                    projectVertex(_vertex);\n                }\n                function pushNormal(x, y, z) {\n                    normals.push(x, y, z);\n                }\n                function pushUv(x, y) {\n                    uvs.push(x, y);\n                }\n                function checkTriangleVisibility(v1, v2, v3) {\n                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n                    _points3[0] = v1.positionScreen;\n                    _points3[1] = v2.positionScreen;\n                    _points3[2] = v3.positionScreen;\n                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n                }\n                function checkBackfaceCulling(v1, v2, v3) {\n                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n                }\n                function pushLine(a, b) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    _line = getNextLineInPool();\n                    _line.id = object.id;\n                    _line.v1.copy(v1);\n                    _line.v2.copy(v2);\n                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n                    _line.renderOrder = object.renderOrder;\n                    _line.material = object.material;\n                    _renderData.elements.push(_line);\n                }\n                function pushTriangle(a, b, c) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    var v3 = _vertexPool[c];\n                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n                        _face = getNextFaceInPool();\n                        _face.id = object.id;\n                        _face.v1.copy(v1);\n                        _face.v2.copy(v2);\n                        _face.v3.copy(v3);\n                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                        _face.renderOrder = object.renderOrder;\n                        _face.normalModel.fromArray(normals, a * 3);\n                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n                        for (var i = 0; i < 3; i++) {\n                            var normal = _face.vertexNormalsModel[i];\n                            normal.fromArray(normals, arguments[i] * 3);\n                            normal.applyMatrix3(normalMatrix).normalize();\n                            var uv = _face.uvs[i];\n                            uv.fromArray(uvs, arguments[i] * 2);\n                        }\n                        _face.vertexNormalsLength = 3;\n                        _face.material = object.material;\n                        _renderData.elements.push(_face);\n                    }\n                }\n                return {\n                    setObject: setObject,\n                    projectVertex: projectVertex,\n                    checkTriangleVisibility: checkTriangleVisibility,\n                    checkBackfaceCulling: checkBackfaceCulling,\n                    pushVertex: pushVertex,\n                    pushNormal: pushNormal,\n                    pushUv: pushUv,\n                    pushLine: pushLine,\n                    pushTriangle: pushTriangle\n                };\n            };\n            var renderList = new RenderList();\n            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n                _faceCount = 0;\n                _lineCount = 0;\n                _spriteCount = 0;\n                _renderData.elements.length = 0;\n                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n                if (camera.parent === null) camera.updateMatrixWorld();\n                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n                _frustum.setFromMatrix(_viewProjectionMatrix);\n                _objectCount = 0;\n                _renderData.objects.length = 0;\n                _renderData.lights.length = 0;\n                scene.traverseVisible(function(object) {\n                    if (object instanceof THREE.Light) {\n                        _renderData.lights.push(object);\n                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n                        var material = object.material;\n                        if (material.visible === false) return;\n                        if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n                            _object = getNextObjectInPool();\n                            _object.id = object.id;\n                            _object.object = object;\n                            _vector3.setFromMatrixPosition(object.matrixWorld);\n                            _vector3.applyProjection(_viewProjectionMatrix);\n                            _object.z = _vector3.z;\n                            _object.renderOrder = object.renderOrder;\n                            _renderData.objects.push(_object);\n                        }\n                    }\n                });\n                if (sortObjects === true) {\n                    _renderData.objects.sort(painterSort);\n                }\n                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n                    var object = _renderData.objects[o].object;\n                    var geometry = object.geometry;\n                    renderList.setObject(object);\n                    _modelMatrix = object.matrixWorld;\n                    _vertexCount = 0;\n                    if (object instanceof THREE.Mesh) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            var groups = geometry.groups;\n                            if (attributes.position === undefined) continue;\n                            var positions = attributes.position.array;\n                            for (var i = 0, l = positions.length; i < l; i += 3) {\n                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                            }\n                            if (attributes.normal !== undefined) {\n                                var normals = attributes.normal.array;\n                                for (var i = 0, l = normals.length; i < l; i += 3) {\n                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n                                }\n                            }\n                            if (attributes.uv !== undefined) {\n                                var uvs = attributes.uv.array;\n                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n                                }\n                            }\n                            if (geometry.index !== null) {\n                                var indices = geometry.index.array;\n                                if (groups.length > 0) {\n                                    for (var o = 0; o < groups.length; o++) {\n                                        var group = groups[o];\n                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                        }\n                                    }\n                                } else {\n                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                    }\n                                }\n                            } else {\n                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                                    renderList.pushTriangle(i, i + 1, i + 2);\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            var vertices = geometry.vertices;\n                            var faces = geometry.faces;\n                            var faceVertexUvs = geometry.faceVertexUvs[0];\n                            _normalMatrix.getNormalMatrix(_modelMatrix);\n                            var material = object.material;\n                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n                                var vertex = vertices[v];\n                                _vector3.copy(vertex);\n                                if (material.morphTargets === true) {\n                                    var morphTargets = geometry.morphTargets;\n                                    var morphInfluences = object.morphTargetInfluences;\n                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                                        var influence = morphInfluences[t];\n                                        if (influence === 0) continue;\n                                        var target = morphTargets[t];\n                                        var targetVertex = target.vertices[v];\n                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n                                    }\n                                }\n                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n                            }\n                            for (var f = 0, fl = faces.length; f < fl; f++) {\n                                var face = faces[f];\n                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n                                if (material === undefined) continue;\n                                var side = material.side;\n                                var v1 = _vertexPool[face.a];\n                                var v2 = _vertexPool[face.b];\n                                var v3 = _vertexPool[face.c];\n                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n                                if (side !== THREE.DoubleSide) {\n                                    if (side === THREE.FrontSide && visible === false) continue;\n                                    if (side === THREE.BackSide && visible === true) continue;\n                                }\n                                _face = getNextFaceInPool();\n                                _face.id = object.id;\n                                _face.v1.copy(v1);\n                                _face.v2.copy(v2);\n                                _face.v3.copy(v3);\n                                _face.normalModel.copy(face.normal);\n                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                    _face.normalModel.negate();\n                                }\n                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n                                var faceVertexNormals = face.vertexNormals;\n                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n                                    var normalModel = _face.vertexNormalsModel[n];\n                                    normalModel.copy(faceVertexNormals[n]);\n                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                        normalModel.negate();\n                                    }\n                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n                                }\n                                _face.vertexNormalsLength = faceVertexNormals.length;\n                                var vertexUvs = faceVertexUvs[f];\n                                if (vertexUvs !== undefined) {\n                                    for (var u = 0; u < 3; u++) {\n                                        _face.uvs[u].copy(vertexUvs[u]);\n                                    }\n                                }\n                                _face.color = face.color;\n                                _face.material = material;\n                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                                _face.renderOrder = object.renderOrder;\n                                _renderData.elements.push(_face);\n                            }\n                        }\n                    } else if (object instanceof THREE.Line) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            if (attributes.position !== undefined) {\n                                var positions = attributes.position.array;\n                                for (var i = 0, l = positions.length; i < l; i += 3) {\n                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                                }\n                                if (geometry.index !== null) {\n                                    var indices = geometry.index.array;\n                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n                                        renderList.pushLine(indices[i], indices[i + 1]);\n                                    }\n                                } else {\n                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                                        renderList.pushLine(i, i + 1);\n                                    }\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n                            var vertices = object.geometry.vertices;\n                            if (vertices.length === 0) continue;\n                            v1 = getNextVertexInPool();\n                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n                                v1 = getNextVertexInPool();\n                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n                                if ((v + 1) % step > 0) continue;\n                                v2 = _vertexPool[_vertexCount - 2];\n                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n                                    _line = getNextLineInPool();\n                                    _line.id = object.id;\n                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n                                    _line.renderOrder = object.renderOrder;\n                                    _line.material = object.material;\n                                    if (object.material.vertexColors === THREE.VertexColors) {\n                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                                    }\n                                    _renderData.elements.push(_line);\n                                }\n                            }\n                        }\n                    } else if (object instanceof THREE.Sprite) {\n                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n                        _vector4.applyMatrix4(_viewProjectionMatrix);\n                        var invW = 1 / _vector4.w;\n                        _vector4.z *= invW;\n                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n                            _sprite = getNextSpriteInPool();\n                            _sprite.id = object.id;\n                            _sprite.x = _vector4.x * invW;\n                            _sprite.y = _vector4.y * invW;\n                            _sprite.z = _vector4.z;\n                            _sprite.renderOrder = object.renderOrder;\n                            _sprite.object = object;\n                            _sprite.rotation = object.rotation;\n                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n                            _sprite.material = object.material;\n                            _renderData.elements.push(_sprite);\n                        }\n                    }\n                }\n                if (sortElements === true) {\n                    _renderData.elements.sort(painterSort);\n                }\n                return _renderData;\n            };\n            function getNextObjectInPool() {\n                if (_objectCount === _objectPoolLength) {\n                    var object = new THREE.RenderableObject();\n                    _objectPool.push(object);\n                    _objectPoolLength++;\n                    _objectCount++;\n                    return object;\n                }\n                return _objectPool[_objectCount++];\n            }\n            function getNextVertexInPool() {\n                if (_vertexCount === _vertexPoolLength) {\n                    var vertex = new THREE.RenderableVertex();\n                    _vertexPool.push(vertex);\n                    _vertexPoolLength++;\n                    _vertexCount++;\n                    return vertex;\n                }\n                return _vertexPool[_vertexCount++];\n            }\n            function getNextFaceInPool() {\n                if (_faceCount === _facePoolLength) {\n                    var face = new THREE.RenderableFace();\n                    _facePool.push(face);\n                    _facePoolLength++;\n                    _faceCount++;\n                    return face;\n                }\n                return _facePool[_faceCount++];\n            }\n            function getNextLineInPool() {\n                if (_lineCount === _linePoolLength) {\n                    var line = new THREE.RenderableLine();\n                    _linePool.push(line);\n                    _linePoolLength++;\n                    _lineCount++;\n                    return line;\n                }\n                return _linePool[_lineCount++];\n            }\n            function getNextSpriteInPool() {\n                if (_spriteCount === _spritePoolLength) {\n                    var sprite = new THREE.RenderableSprite();\n                    _spritePool.push(sprite);\n                    _spritePoolLength++;\n                    _spriteCount++;\n                    return sprite;\n                }\n                return _spritePool[_spriteCount++];\n            }\n            function painterSort(a, b) {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                } else if (a.z !== b.z) {\n                    return b.z - a.z;\n                } else if (a.id !== b.id) {\n                    return a.id - b.id;\n                } else {\n                    return 0;\n                }\n            }\n            function clipLine(s1, s2) {\n                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n                    return true;\n                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n                    return false;\n                } else {\n                    if (bc1near < 0) {\n                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n                    } else if (bc2near < 0) {\n                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n                    }\n                    if (bc1far < 0) {\n                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n                    } else if (bc2far < 0) {\n                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n                    }\n                    if (alpha2 < alpha1) {\n                        return false;\n                    } else {\n                        s1.lerp(s2, alpha1);\n                        s2.lerp(s1, 1 - alpha2);\n                        return true;\n                    }\n                }\n            }\n        };\n    }, function(module, exports, __webpack_require__) {\n        /*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        var isObject = __webpack_require__(8);\n        function isObjectObject(o) {\n            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n        }\n        module.exports = function isPlainObject(o) {\n            var ctor, prot;\n            if (isObjectObject(o) === false) return false;\n            ctor = o.constructor;\n            if (typeof ctor !== \"function\") return false;\n            prot = ctor.prototype;\n            if (isObjectObject(prot) === false) return false;\n            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n                return false;\n            }\n            return true;\n        };\n    }, function(module, exports) {\n        /*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        module.exports = function isObject(val) {\n            return val != null && typeof val === \"object\" && !Array.isArray(val);\n        };\n    }, function(module, exports, __webpack_require__) {\n        var __WEBPACK_AMD_DEFINE_RESULT__;\n        !function(undefined) {\n            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n                return Object.prototype.toString.call(obj) === \"[object Array]\";\n            };\n            var defaultMaxListeners = 10;\n            function init() {\n                this._events = {};\n                if (this._conf) {\n                    configure.call(this, this._conf);\n                }\n            }\n            function configure(conf) {\n                if (conf) {\n                    this._conf = conf;\n                    conf.delimiter && (this.delimiter = conf.delimiter);\n                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n                    conf.wildcard && (this.wildcard = conf.wildcard);\n                    conf.newListener && (this.newListener = conf.newListener);\n                    if (this.wildcard) {\n                        this.listenerTree = {};\n                    }\n                }\n            }\n            function EventEmitter(conf) {\n                this._events = {};\n                this.newListener = false;\n                configure.call(this, conf);\n            }\n            function searchListenerTree(handlers, type, tree, i) {\n                if (!tree) {\n                    return [];\n                }\n                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n                if (i === typeLength && tree._listeners) {\n                    if (typeof tree._listeners === \"function\") {\n                        handlers && handlers.push(tree._listeners);\n                        return [ tree ];\n                    } else {\n                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n                            handlers && handlers.push(tree._listeners[leaf]);\n                        }\n                        return [ tree ];\n                    }\n                }\n                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n                    if (currentType === \"*\") {\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n                            }\n                        }\n                        return listeners;\n                    } else if (currentType === \"**\") {\n                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n                        if (endReached && tree._listeners) {\n                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n                        }\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                if (branch === \"*\" || branch === \"**\") {\n                                    if (tree[branch]._listeners && !endReached) {\n                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n                                    }\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                } else if (branch === nextType) {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n                                } else {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                }\n                            }\n                        }\n                        return listeners;\n                    }\n                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n                }\n                xTree = tree[\"*\"];\n                if (xTree) {\n                    searchListenerTree(handlers, type, xTree, i + 1);\n                }\n                xxTree = tree[\"**\"];\n                if (xxTree) {\n                    if (i < typeLength) {\n                        if (xxTree._listeners) {\n                            searchListenerTree(handlers, type, xxTree, typeLength);\n                        }\n                        for (branch in xxTree) {\n                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n                                if (branch === nextType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n                                } else if (branch === currentType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n                                } else {\n                                    isolatedBranch = {};\n                                    isolatedBranch[branch] = xxTree[branch];\n                                    searchListenerTree(handlers, type, {\n                                        \"**\": isolatedBranch\n                                    }, i + 1);\n                                }\n                            }\n                        }\n                    } else if (xxTree._listeners) {\n                        searchListenerTree(handlers, type, xxTree, typeLength);\n                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n                    }\n                }\n                return listeners;\n            }\n            function growListenerTree(type, listener) {\n                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                for (var i = 0, len = type.length; i + 1 < len; i++) {\n                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n                        return;\n                    }\n                }\n                var tree = this.listenerTree;\n                var name = type.shift();\n                while (name) {\n                    if (!tree[name]) {\n                        tree[name] = {};\n                    }\n                    tree = tree[name];\n                    if (type.length === 0) {\n                        if (!tree._listeners) {\n                            tree._listeners = listener;\n                        } else if (typeof tree._listeners === \"function\") {\n                            tree._listeners = [ tree._listeners, listener ];\n                        } else if (isArray(tree._listeners)) {\n                            tree._listeners.push(listener);\n                            if (!tree._listeners.warned) {\n                                var m = defaultMaxListeners;\n                                if (typeof this._events.maxListeners !== \"undefined\") {\n                                    m = this._events.maxListeners;\n                                }\n                                if (m > 0 && tree._listeners.length > m) {\n                                    tree._listeners.warned = true;\n                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n                                    console.trace();\n                                }\n                            }\n                        }\n                        return true;\n                    }\n                    name = type.shift();\n                }\n                return true;\n            }\n            EventEmitter.prototype.delimiter = \".\";\n            EventEmitter.prototype.setMaxListeners = function(n) {\n                this._events || init.call(this);\n                this._events.maxListeners = n;\n                if (!this._conf) this._conf = {};\n                this._conf.maxListeners = n;\n            };\n            EventEmitter.prototype.event = \"\";\n            EventEmitter.prototype.once = function(event, fn) {\n                this.many(event, 1, fn);\n                return this;\n            };\n            EventEmitter.prototype.many = function(event, ttl, fn) {\n                var self = this;\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"many only accepts instances of Function\");\n                }\n                function listener() {\n                    if (--ttl === 0) {\n                        self.off(event, listener);\n                    }\n                    fn.apply(this, arguments);\n                }\n                listener._origin = fn;\n                this.on(event, listener);\n                return self;\n            };\n            EventEmitter.prototype.emit = function() {\n                this._events || init.call(this);\n                var type = arguments[0];\n                if (type === \"newListener\" && !this.newListener) {\n                    if (!this._events.newListener) {\n                        return false;\n                    }\n                }\n                if (this._all) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    for (i = 0, l = this._all.length; i < l; i++) {\n                        this.event = type;\n                        this._all[i].apply(this, args);\n                    }\n                }\n                if (type === \"error\") {\n                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n                        if (arguments[1] instanceof Error) {\n                            throw arguments[1];\n                        } else {\n                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n                        }\n                        return false;\n                    }\n                }\n                var handler;\n                if (this.wildcard) {\n                    handler = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n                } else {\n                    handler = this._events[type];\n                }\n                if (typeof handler === \"function\") {\n                    this.event = type;\n                    if (arguments.length === 1) {\n                        handler.call(this);\n                    } else if (arguments.length > 1) switch (arguments.length) {\n                      case 2:\n                        handler.call(this, arguments[1]);\n                        break;\n\n                      case 3:\n                        handler.call(this, arguments[1], arguments[2]);\n                        break;\n\n                      default:\n                        var l = arguments.length;\n                        var args = new Array(l - 1);\n                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                        handler.apply(this, args);\n                    }\n                    return true;\n                } else if (handler) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    var listeners = handler.slice();\n                    for (var i = 0, l = listeners.length; i < l; i++) {\n                        this.event = type;\n                        listeners[i].apply(this, args);\n                    }\n                    return listeners.length > 0 || !!this._all;\n                } else {\n                    return !!this._all;\n                }\n            };\n            EventEmitter.prototype.on = function(type, listener) {\n                if (typeof type === \"function\") {\n                    this.onAny(type);\n                    return this;\n                }\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"on only accepts instances of Function\");\n                }\n                this._events || init.call(this);\n                this.emit(\"newListener\", type, listener);\n                if (this.wildcard) {\n                    growListenerTree.call(this, type, listener);\n                    return this;\n                }\n                if (!this._events[type]) {\n                    this._events[type] = listener;\n                } else if (typeof this._events[type] === \"function\") {\n                    this._events[type] = [ this._events[type], listener ];\n                } else if (isArray(this._events[type])) {\n                    this._events[type].push(listener);\n                    if (!this._events[type].warned) {\n                        var m = defaultMaxListeners;\n                        if (typeof this._events.maxListeners !== \"undefined\") {\n                            m = this._events.maxListeners;\n                        }\n                        if (m > 0 && this._events[type].length > m) {\n                            this._events[type].warned = true;\n                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n                            console.trace();\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.onAny = function(fn) {\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"onAny only accepts instances of Function\");\n                }\n                if (!this._all) {\n                    this._all = [];\n                }\n                this._all.push(fn);\n                return this;\n            };\n            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n            EventEmitter.prototype.off = function(type, listener) {\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"removeListener only takes instances of Function\");\n                }\n                var handlers, leafs = [];\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                } else {\n                    if (!this._events[type]) return this;\n                    handlers = this._events[type];\n                    leafs.push({\n                        _listeners: handlers\n                    });\n                }\n                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                    var leaf = leafs[iLeaf];\n                    handlers = leaf._listeners;\n                    if (isArray(handlers)) {\n                        var position = -1;\n                        for (var i = 0, length = handlers.length; i < length; i++) {\n                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n                                position = i;\n                                break;\n                            }\n                        }\n                        if (position < 0) {\n                            continue;\n                        }\n                        if (this.wildcard) {\n                            leaf._listeners.splice(position, 1);\n                        } else {\n                            this._events[type].splice(position, 1);\n                        }\n                        if (handlers.length === 0) {\n                            if (this.wildcard) {\n                                delete leaf._listeners;\n                            } else {\n                                delete this._events[type];\n                            }\n                        }\n                        return this;\n                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n                        if (this.wildcard) {\n                            delete leaf._listeners;\n                        } else {\n                            delete this._events[type];\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.offAny = function(fn) {\n                var i = 0, l = 0, fns;\n                if (fn && this._all && this._all.length > 0) {\n                    fns = this._all;\n                    for (i = 0, l = fns.length; i < l; i++) {\n                        if (fn === fns[i]) {\n                            fns.splice(i, 1);\n                            return this;\n                        }\n                    }\n                } else {\n                    this._all = [];\n                }\n                return this;\n            };\n            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n            EventEmitter.prototype.removeAllListeners = function(type) {\n                if (arguments.length === 0) {\n                    !this._events || init.call(this);\n                    return this;\n                }\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                        var leaf = leafs[iLeaf];\n                        leaf._listeners = null;\n                    }\n                } else {\n                    if (!this._events[type]) return this;\n                    this._events[type] = null;\n                }\n                return this;\n            };\n            EventEmitter.prototype.listeners = function(type) {\n                if (this.wildcard) {\n                    var handlers = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n                    return handlers;\n                }\n                this._events || init.call(this);\n                if (!this._events[type]) this._events[type] = [];\n                if (!isArray(this._events[type])) {\n                    this._events[type] = [ this._events[type] ];\n                }\n                return this._events[type];\n            };\n            EventEmitter.prototype.listenersAny = function() {\n                if (this._all) {\n                    return this._all;\n                } else {\n                    return [];\n                }\n            };\n            if (true) {\n                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n                    return EventEmitter;\n                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n            } else if (typeof exports === \"object\") {\n                exports.EventEmitter2 = EventEmitter;\n            } else {\n                window.EventEmitter2 = EventEmitter;\n            }\n        }();\n    }, function(module, exports) {\n        module.exports = {\n            Promise: window[\"Promise\"]\n        };\n    }, function(module, exports) {\n        (function() {\n            var ResizeSensor = function(element, callback) {\n                function EventQueue() {\n                    this.q = [];\n                    this.add = function(ev) {\n                        this.q.push(ev);\n                    };\n                    var i, j;\n                    this.call = function() {\n                        for (i = 0, j = this.q.length; i < j; i++) {\n                            this.q[i].call();\n                        }\n                    };\n                }\n                function getComputedStyle(element, prop) {\n                    if (element.currentStyle) {\n                        return element.currentStyle[prop];\n                    } else if (window.getComputedStyle) {\n                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n                    } else {\n                        return element.style[prop];\n                    }\n                }\n                function attachResizeEvent(element, resized) {\n                    if (!element.resizedAttached) {\n                        element.resizedAttached = new EventQueue();\n                        element.resizedAttached.add(resized);\n                    } else if (element.resizedAttached) {\n                        element.resizedAttached.add(resized);\n                        return;\n                    }\n                    element.resizeSensor = document.createElement(\"div\");\n                    element.resizeSensor.className = \"resize-sensor\";\n                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n                    element.resizeSensor.style.cssText = style;\n                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n                    element.appendChild(element.resizeSensor);\n                    if (!{\n                        fixed: 1,\n                        absolute: 1\n                    }[getComputedStyle(element, \"position\")]) {\n                        element.style.position = \"relative\";\n                    }\n                    var expand = element.resizeSensor.childNodes[0];\n                    var expandChild = expand.childNodes[0];\n                    var shrink = element.resizeSensor.childNodes[1];\n                    var shrinkChild = shrink.childNodes[0];\n                    var lastWidth, lastHeight;\n                    var reset = function() {\n                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n                        expand.scrollLeft = expand.scrollWidth;\n                        expand.scrollTop = expand.scrollHeight;\n                        shrink.scrollLeft = shrink.scrollWidth;\n                        shrink.scrollTop = shrink.scrollHeight;\n                        lastWidth = element.offsetWidth;\n                        lastHeight = element.offsetHeight;\n                    };\n                    reset();\n                    var changed = function() {\n                        if (element.resizedAttached) {\n                            element.resizedAttached.call();\n                        }\n                    };\n                    var addEvent = function(el, name, cb) {\n                        if (el.attachEvent) {\n                            el.attachEvent(\"on\" + name, cb);\n                        } else {\n                            el.addEventListener(name, cb);\n                        }\n                    };\n                    var onScroll = function() {\n                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                            changed();\n                        }\n                        reset();\n                    };\n                    addEvent(expand, \"scroll\", onScroll);\n                    addEvent(shrink, \"scroll\", onScroll);\n                }\n                var elementType = Object.prototype.toString.call(element);\n                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n                if (isCollectionTyped) {\n                    var i = 0, j = element.length;\n                    for (;i < j; i++) {\n                        attachResizeEvent(element[i], callback);\n                    }\n                } else {\n                    attachResizeEvent(element, callback);\n                }\n                this.detach = function() {\n                    if (isCollectionTyped) {\n                        var i = 0, j = element.length;\n                        for (;i < j; i++) {\n                            ResizeSensor.detach(element[i]);\n                        }\n                    } else {\n                        ResizeSensor.detach(element);\n                    }\n                };\n            };\n            ResizeSensor.detach = function(element) {\n                if (element.resizeSensor) {\n                    element.removeChild(element.resizeSensor);\n                    delete element.resizeSensor;\n                    delete element.resizedAttached;\n                }\n            };\n            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n                module.exports = ResizeSensor;\n            } else {\n                window.ResizeSensor = ResizeSensor;\n            }\n        })();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var EventEmmiter_1 = __webpack_require__(13);\n        var Utils_1 = __webpack_require__(14);\n        var Widget_1 = __webpack_require__(15);\n        var TrendsManager_1 = __webpack_require__(16);\n        var Screen_1 = __webpack_require__(19);\n        var AxisMarks_1 = __webpack_require__(20);\n        var interfaces_1 = __webpack_require__(21);\n        var deps_1 = __webpack_require__(3);\n        var CHART_STATE_EVENTS = {\n            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n            READY: \"ready\",\n            DESTROY: \"destroy\",\n            CHANGE: \"change\",\n            TREND_CHANGE: \"trendChange\",\n            TRENDS_CHANGE: \"trendsChange\",\n            ZOOM: \"zoom\",\n            RESIZE: \"resize\",\n            SCROLL: \"scroll\",\n            SCROLL_STOP: \"scrollStop\",\n            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n        };\n        var ChartState = function() {\n            function ChartState(initialState, widgetsClasses, plugins) {\n                if (widgetsClasses === void 0) {\n                    widgetsClasses = {};\n                }\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.data = {\n                    prevState: {},\n                    $el: null,\n                    zoom: 0,\n                    xAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n                            from: 0,\n                            to: 0,\n                            scroll: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 0,\n                                end: 5\n                            },\n                            margin: {\n                                start: 0,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 100,\n                        autoScroll: true,\n                        marks: []\n                    },\n                    yAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n                            from: 0,\n                            to: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 5,\n                                end: 5\n                            },\n                            margin: {\n                                start: 5,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 50,\n                        marks: []\n                    },\n                    animations: {\n                        enabled: true,\n                        trendChangeSpeed: .5,\n                        trendChangeEase: void 0,\n                        zoomSpeed: .25,\n                        zoomEase: Linear.easeNone,\n                        scrollSpeed: .5,\n                        scrollEase: Linear.easeNone,\n                        autoScrollSpeed: 1,\n                        autoScrollEase: Linear.easeNone\n                    },\n                    autoRender: {\n                        enabled: true,\n                        fps: 0\n                    },\n                    autoResize: true,\n                    renderer: \"WebGLRenderer\",\n                    autoScroll: true,\n                    controls: {\n                        enabled: true\n                    },\n                    cursor: {\n                        dragMode: false,\n                        x: 0,\n                        y: 0\n                    },\n                    backgroundColor: 0,\n                    backgroundOpacity: 1,\n                    showStats: false,\n                    pluginsState: {},\n                    eventEmitterMaxListeners: 20\n                };\n                this.widgetsClasses = {};\n                this.plugins = {};\n                this.isReady = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n                this.widgetsClasses = widgetsClasses;\n                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n                initialState.trends = this.trendsManager.calculatedOptions;\n                initialState = this.installPlugins(plugins, initialState);\n                this.setState(initialState);\n                this.setState({\n                    computedData: this.getComputedData()\n                });\n                this.savePrevState();\n                this.screen = new Screen_1.Screen(this);\n                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n                this.initListeners();\n                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n                this.isReady = true;\n                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n            }\n            ChartState.prototype.destroy = function() {\n                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n                this.ee.removeAllListeners();\n                this.data = {};\n            };\n            ChartState.prototype.onDestroy = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n            };\n            ChartState.prototype.onInitialStateApplied = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n            };\n            ChartState.prototype.onReady = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n            };\n            ChartState.prototype.onChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n            };\n            ChartState.prototype.onTrendChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n            };\n            ChartState.prototype.onTrendsChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n            };\n            ChartState.prototype.onScrollStop = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n            };\n            ChartState.prototype.onScroll = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n            };\n            ChartState.prototype.onZoom = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n            };\n            ChartState.prototype.onResize = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n            };\n            ChartState.prototype.onPluginsStateChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n            };\n            ChartState.prototype.getTrend = function(trendName) {\n                return this.trendsManager.getTrend(trendName);\n            };\n            ChartState.prototype.setState = function(newState, eventData, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var stateData = this.data;\n                var changedProps = {};\n                for (var key in newState) {\n                    if (stateData[key] !== newState[key]) {\n                        changedProps[key] = newState[key];\n                    }\n                }\n                this.savePrevState(changedProps);\n                var trendsData = {};\n                if (newState.trends) for (var trendName in newState.trends) {\n                    var trendOptions = newState.trends[trendName];\n                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n                    delete trendOptions.data;\n                }\n                var newStateContainsData = Object.keys(trendsData).length > 0;\n                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n                if (newStateContainsData) for (var trendName in trendsData) {\n                    this.data.trends[trendName].data = trendsData[trendName];\n                }\n                if (silent) return;\n                var recalculateResult = this.recalculateState(changedProps);\n                changedProps = recalculateResult.changedProps;\n                this.emitChangedStateEvents(changedProps, eventData);\n            };\n            ChartState.prototype.recalculateState = function(changedProps) {\n                var data = this.data;\n                var patch = {};\n                var actualData = Utils_1.Utils.deepMerge({}, data);\n                if (changedProps.widgets || !data.widgets) {\n                    patch.widgets = {};\n                    var widgetsOptions = data.widgets || {};\n                    for (var widgetName in this.widgetsClasses) {\n                        var WidgetClass = this.widgetsClasses[widgetName];\n                        var userOptions = widgetsOptions[widgetName] || {};\n                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n                    }\n                }\n                var cursorOptions = changedProps.cursor;\n                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n                if (isMouseDrag) {\n                    var oldX = data.prevState.cursor.x;\n                    var currentX = cursorOptions.x;\n                    var currentScroll = data.xAxis.range.scroll;\n                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n                    patch.xAxis = {\n                        range: {\n                            scroll: currentScroll + deltaXVal\n                        }\n                    };\n                    actualData = Utils_1.Utils.deepMerge(actualData, {\n                        xAxis: patch.xAxis\n                    });\n                }\n                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n                var scrollXChanged = false;\n                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n                if (needToRecalculateXAxis) {\n                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n                    if (xAxisPatch) {\n                        scrollXChanged = true;\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            xAxis: xAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            xAxis: xAxisPatch\n                        });\n                    }\n                }\n                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n                if (needToRecalculateYAxis) {\n                    var yAxisPatch = this.recalculateYAxis(actualData);\n                    if (yAxisPatch) {\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            yAxis: yAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            yAxis: yAxisPatch\n                        });\n                    }\n                }\n                this.savePrevState(patch);\n                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n                patch.computedData = this.getComputedData(allChangedProps);\n                this.savePrevState(patch);\n                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n                return {\n                    changedProps: allChangedProps,\n                    patch: patch\n                };\n            };\n            ChartState.prototype.getComputedData = function(changedProps) {\n                var computeAll = !changedProps;\n                var computedData = {};\n                if (computeAll || changedProps.trends && this.trendsManager) {\n                    computedData.trends = {\n                        maxXVal: this.trendsManager.getEndXVal(),\n                        minXVal: this.trendsManager.getStartXVal()\n                    };\n                }\n                return computedData;\n            };\n            ChartState.prototype.savePrevState = function(changedProps) {\n                if (!changedProps) changedProps = this.data;\n                var prevState = this.data.prevState;\n                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n            };\n            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n                var prevState = this.data.prevState;\n                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n                for (var key in changedProps) {\n                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n                }\n                if (!this.isReady) return;\n                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n                var resizeEventNeeded = changedProps.width || changedProps.height;\n                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n            };\n            ChartState.prototype.installPlugins = function(plugins, initialState) {\n                var _this = this;\n                initialState.pluginsState = {};\n                plugins.forEach(function(plugin) {\n                    var PluginClass = plugin.constructor;\n                    var pluginName = PluginClass.NAME;\n                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n                    });\n                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n                    _this.plugins[pluginName] = plugin;\n                    plugin.setupChartState(_this);\n                });\n                return initialState;\n            };\n            ChartState.prototype.getPlugin = function(pluginName) {\n                return this.plugins[pluginName];\n            };\n            ChartState.prototype.initListeners = function() {\n                var _this = this;\n                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n                    _this.handleTrendsChange(changedTrends, newData);\n                });\n            };\n            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n                for (var trendName in changedTrends) {\n                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n                }\n            };\n            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n                var axisRange = actualData.xAxis.range;\n                var patch = {\n                    range: {}\n                };\n                var isInitialize = axisRange.zeroVal == void 0;\n                var zeroVal, scaleFactor;\n                var zoom = axisRange.zoom;\n                if (axisRange.isMirrorMode) {\n                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n                }\n                if (isInitialize) {\n                    zeroVal = axisRange.from;\n                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                } else {\n                    zeroVal = axisRange.zeroVal;\n                    scaleFactor = axisRange.scaleFactor;\n                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n                        if (changedProps.xAxis.range.zoom) {\n                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n                        }\n                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                        patch.range.scroll = axisRange.from - zeroVal;\n                        patch.range.zoom = currentScaleFactor / scaleFactor;\n                        return patch;\n                    }\n                }\n                do {\n                    var from = zeroVal + axisRange.scroll;\n                    var to = from + actualData.width / (scaleFactor * zoom);\n                    var rangeLength = to - from;\n                    var needToRecalculateZoom = false;\n                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n                    if (needToRecalculateZoom) {\n                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n                        var zoom = zoom * fixScale;\n                        patch.range.zoom = zoom;\n                    }\n                } while (needToRecalculateZoom);\n                patch.range.from = from;\n                patch.range.to = to;\n                return patch;\n            };\n            ChartState.prototype.recalculateYAxis = function(actualData) {\n                var patch = {\n                    range: {}\n                };\n                var yAxisRange = actualData.yAxis.range;\n                var isInitialize = yAxisRange.scaleFactor == void 0;\n                var trends = this.trendsManager;\n                var trendsEndXVal = trends.getEndXVal();\n                var trendsStartXVal = trends.getStartXVal();\n                var xRange = actualData.xAxis.range;\n                var xFrom = xRange.from, xTo = xRange.to;\n                var xRangeLength = xTo - xFrom;\n                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n                if (xTo > trendsEndXVal) {\n                    xTo = trendsEndXVal;\n                    xFrom = xTo - xRangeLength;\n                } else if (xFrom < trendsStartXVal) {\n                    xFrom = trendsStartXVal;\n                    xTo = xFrom + xRangeLength;\n                }\n                var maxY = trends.getMaxYVal(xFrom, xTo);\n                var minY = trends.getMinYVal(xFrom, xTo);\n                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n                    if (trendLastY > maxY) maxY = trendLastY;\n                    if (trendLastY < minY) minY = trendLastY;\n                }\n                if (yAxisRange.isMirrorMode) {\n                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n                }\n                var margin = yAxisRange.margin;\n                var padding = {\n                    start: yAxisRange.padding.start + margin.start,\n                    end: yAxisRange.padding.end + margin.end\n                };\n                if (padding.end + padding.start >= actualData.height) {\n                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n                }\n                var rangeLength = maxY - minY;\n                var paddingTopInPercents = padding.end / actualData.height;\n                var paddingBottomInPercents = padding.start / actualData.height;\n                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n                if (isInitialize) {\n                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n                    scaleFactor = actualData.height / (toVal - fromVal);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                    needToZoom = true;\n                } else {\n                    scaleFactor = yAxisRange.scaleFactor;\n                    zeroVal = yAxisRange.zeroVal;\n                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n                }\n                if (!needToZoom) return null;\n                scroll = fromVal - zeroVal;\n                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n                var currentAxisRange = this.data.yAxis.range;\n                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n                return patch;\n            };\n            ChartState.prototype.zoom = function(zoomValue, origin) {\n                var _this = this;\n                if (origin === void 0) {\n                    origin = .5;\n                }\n                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n                var newZoom = zoom * zoomValue;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                var nextRange = this.data.width / (scaleFactor * newZoom);\n                var newScroll = scroll + (currentRange - nextRange) * origin;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            zoom: newZoom,\n                            scroll: newScroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.zoomToRange = function(range, origin) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                return this.zoom(currentRange / range, origin);\n            };\n            ChartState.prototype.scrollToEnd = function() {\n                var _this = this;\n                var state = this.data;\n                var endXVal = this.trendsManager.getEndXVal();\n                var range = state.xAxis.range;\n                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            scroll: scroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getValueOnXAxis = function(x) {\n                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.getValueByScreenX = function(x) {\n                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.getValueByScreenY = function(y) {\n                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByYAxis(y);\n            };\n            ChartState.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenYByValue = function(yVal) {\n                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            ChartState.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            ChartState.prototype.getScreenLeftVal = function() {\n                return this.getValueByScreenX(0);\n            };\n            ChartState.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.data.width);\n            };\n            ChartState.prototype.getPaddingRight = function() {\n                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n            };\n            return ChartState;\n        }();\n        exports.ChartState = ChartState;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        var EventEmitter = function() {\n            function EventEmitter() {\n                this.ee = new deps_1.EE2();\n            }\n            EventEmitter.prototype.emit = function(eventName) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n                var _a;\n            };\n            EventEmitter.prototype.on = function(eventName, callback) {\n                return this.ee.on(eventName, callback);\n            };\n            EventEmitter.prototype.off = function(eventName, callback) {\n                return this.ee.off(eventName, callback);\n            };\n            EventEmitter.prototype.subscribe = function(eventName, callback) {\n                var _this = this;\n                this.on(eventName, callback);\n                return function() {\n                    return _this.off(eventName, callback);\n                };\n            };\n            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n                this.ee.setMaxListeners(listenersCount);\n            };\n            EventEmitter.prototype.removeAllListeners = function(eventName) {\n                this.ee.removeAllListeners(eventName);\n            };\n            return EventEmitter;\n        }();\n        exports.EventEmitter = EventEmitter;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        function deepmerge(target, src, mergeArrays) {\n            if (mergeArrays === void 0) {\n                mergeArrays = true;\n            }\n            var array = Array.isArray(src);\n            var dst = array && [] || {};\n            if (array) {\n                target = target || [];\n                if (mergeArrays) {\n                    dst = dst.concat(target);\n                }\n                src.forEach(function(e, i) {\n                    if (typeof dst[i] === \"undefined\") {\n                        dst[i] = e;\n                    } else if (typeof e === \"object\") {\n                        dst[i] = deepmerge(target[i], e, mergeArrays);\n                    } else {\n                        if (target.indexOf(e) === -1) {\n                            dst.push(e);\n                        }\n                    }\n                });\n            } else {\n                if (target && typeof target === \"object\") {\n                    Object.keys(target).forEach(function(key) {\n                        dst[key] = target[key];\n                    });\n                }\n                Object.keys(src).forEach(function(key) {\n                    if (typeof src[key] !== \"object\" || !src[key]) {\n                        dst[key] = src[key];\n                    } else {\n                        if (!target[key]) {\n                            dst[key] = src[key];\n                        } else {\n                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n                        }\n                    }\n                });\n            }\n            return dst;\n        }\n        var Utils = function() {\n            function Utils() {}\n            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n                return deepmerge(obj1, obj2, mergeArrays);\n            };\n            Utils.deepCopy = function(obj) {\n                return JSON.parse(JSON.stringify(obj));\n            };\n            Utils.toFixed = function(num, digitsCount) {\n                var maxDigits = 15;\n                var result = \"\";\n                var intVal = Math.floor(num);\n                var intStr = intVal.toString();\n                var lengthDiff = digitsCount - intStr.length;\n                if (lengthDiff > 0) {\n                    result = \"0\".repeat(lengthDiff) + intStr;\n                } else {\n                    result = intStr;\n                }\n                var afterPointDigitsCount = maxDigits - intStr.length;\n                var afterPointStr = num.toString().split(\".\")[1];\n                if (afterPointStr) {\n                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n                }\n                return result;\n            };\n            Utils.bindEvent = function() {};\n            Utils.createTexture = function(width, height, fn) {\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = width;\n                canvas.height = height;\n                var ctx = canvas.getContext(\"2d\");\n                fn(ctx);\n                var texture = new THREE.Texture(canvas);\n                texture.needsUpdate = true;\n                return texture;\n            };\n            Utils.createPixelPerfectTexture = function(width, height, fn) {\n                var texture = this.createTexture(width, height, fn);\n                texture.minFilter = THREE.NearestFilter;\n                return texture;\n            };\n            Utils.error = function(msg) {\n                console.error(\"Chart error: \" + msg);\n                throw \"Chart: \" + msg;\n            };\n            Utils.warn = function(msg) {\n                console.warn(\"Chart warning: \" + msg);\n            };\n            Utils.getUid = function() {\n                return this.currentId++;\n            };\n            Utils.getDistance = function(num1, num2) {\n                return Math.max(num1, num2) - Math.min(num1, num2);\n            };\n            Utils.binarySearchClosestInd = function(arr, num, key) {\n                var mid;\n                var lo = 0;\n                var hi = arr.length - 1;\n                while (hi - lo > 1) {\n                    mid = Math.floor((lo + hi) / 2);\n                    if (arr[mid][key] < num) {\n                        lo = mid;\n                    } else {\n                        hi = mid;\n                    }\n                }\n                if (num - arr[lo][key] <= arr[hi][key] - num) {\n                    return lo;\n                }\n                return hi;\n            };\n            Utils.binarySearchClosest = function(arr, num, key) {\n                var ind = this.binarySearchClosestInd(arr, num, key);\n                return arr[ind];\n            };\n            Utils.rectsIntersect = function(r1, r2) {\n                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n            };\n            /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\n            Utils.parseColor = function(color) {\n                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by $.parseColor\");\n                isNaN(cache[3]) && (cache[3] = 1);\n                return cache;\n            };\n            Utils.getHexColor = function(str) {\n                var rgb = this.parseColor(str);\n                return (rgb[0] << 8 * 2) + (rgb[1] << 8) + rgb[2];\n            };\n            Utils.throttle = function(func, ms) {\n                var isThrottled = false, savedArgs, savedThis;\n                function wrapper() {\n                    if (isThrottled) {\n                        savedArgs = arguments;\n                        savedThis = this;\n                        return;\n                    }\n                    func.apply(this, arguments);\n                    isThrottled = true;\n                    setTimeout(function() {\n                        isThrottled = false;\n                        if (savedArgs) {\n                            wrapper.apply(savedThis, savedArgs);\n                            savedArgs = savedThis = null;\n                        }\n                    }, ms);\n                }\n                return wrapper;\n            };\n            Utils.msToTimeString = function(timestamp) {\n                var h = Math.floor(timestamp / 36e4);\n                var m = Math.floor(timestamp / 6e4);\n                var s = Math.floor(timestamp / 1e3);\n                return h + \":\" + m + \":\" + s;\n            };\n            Utils.getRandomItem = function(arr) {\n                var ind = Math.floor(Math.random() * arr.length);\n                return arr[ind];\n            };\n            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n                if (excludeProps === void 0) {\n                    excludeProps = [];\n                }\n                for (var key in props) {\n                    if (excludeProps.indexOf(key) !== -1) continue;\n                    if (srcObject[key] == void 0) continue;\n                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n                    } else {\n                        dstObject[key] = this.deepCopy(srcObject[key]);\n                    }\n                }\n            };\n            Utils.currentId = 1;\n            return Utils;\n        }();\n        exports.Utils = Utils;\n    }, function(module, exports) {\n        \"use strict\";\n        var ChartWidget = function() {\n            function ChartWidget(chartState) {\n                this.unsubscribers = [];\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            ChartWidget.prototype.bindEvents = function() {};\n            ChartWidget.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartWidget.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartWidget.getDefaultOptions = function() {\n                return {\n                    enabled: true\n                };\n            };\n            ChartWidget.widgetName = \"\";\n            return ChartWidget;\n        }();\n        exports.ChartWidget = ChartWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Trend_1 = __webpack_require__(17);\n        var EventEmmiter_1 = __webpack_require__(13);\n        var EVENTS = {\n            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n        };\n        var TrendsManager = function() {\n            function TrendsManager(state, initialState) {\n                this.trends = {};\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.chartState = state;\n                var trendsCalculatedOptions = {};\n                for (var trendName in initialState.trends) {\n                    var trend = this.createTrend(state, trendName, initialState);\n                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n                }\n                this.calculatedOptions = trendsCalculatedOptions;\n                this.bindEvents();\n            }\n            TrendsManager.prototype.getTrend = function(trendName) {\n                return this.trends[trendName];\n            };\n            TrendsManager.prototype.getEnabledTrends = function() {\n                var enabledTrends = [];\n                var allTrends = this.trends;\n                for (var trendName in allTrends) {\n                    var trend = allTrends[trendName];\n                    trend.getOptions().enabled && enabledTrends.push(trend);\n                }\n                return enabledTrends;\n            };\n            TrendsManager.prototype.getStartXVal = function() {\n                var trends = this.getEnabledTrends();\n                return trends[0].getData()[0].xVal;\n            };\n            TrendsManager.prototype.getEndXVal = function() {\n                var trends = this.getEnabledTrends();\n                var firstTrendData = trends[0].getData();\n                return firstTrendData[firstTrendData.length - 1].xVal;\n            };\n            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n                var trends = this.getEnabledTrends();\n                var compareFn;\n                var result;\n                if (extremumIsMax) {\n                    result = -Infinity;\n                    compareFn = Math.max;\n                } else {\n                    result = Infinity;\n                    compareFn = Math.min;\n                }\n                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n                    var trend = trends_1[_i];\n                    var trendData = trend.getData(fromX, toX);\n                    var trendYValues = trendData.map(function(dataItem) {\n                        return dataItem.yVal;\n                    });\n                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n                }\n                if (result == Infinity || result == -Infinity) result = NaN;\n                return result;\n            };\n            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n                return this.getExtremumYVal(true, fromX, toX);\n            };\n            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n                return this.getExtremumYVal(false, fromX, toX);\n            };\n            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n            };\n            TrendsManager.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateAppliedHandler();\n                });\n            };\n            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n                var _this = this;\n                var _loop_1 = function(trendName) {\n                    this_1.trends[trendName].segments.onRebuild(function() {\n                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n                    });\n                };\n                var this_1 = this;\n                for (var trendName in this.trends) {\n                    _loop_1(trendName);\n                }\n            };\n            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n                var trend = new Trend_1.Trend(state, trendName, initialState);\n                this.trends[trendName] = trend;\n                return trend;\n            };\n            return TrendsManager;\n        }();\n        exports.TrendsManager = TrendsManager;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var TrendSegments_1 = __webpack_require__(18);\n        var EventEmmiter_1 = __webpack_require__(13);\n        var deps_1 = __webpack_require__(3);\n        var EVENTS = {\n            CHANGE: \"Change\",\n            PREPEND_REQUEST: \"prependRequest\"\n        };\n        (function(TREND_TYPE) {\n            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n        var TREND_TYPE = exports.TREND_TYPE;\n        var DEFAULT_OPTIONS = {\n            enabled: true,\n            type: TREND_TYPE.LINE,\n            data: [],\n            maxSegmentLength: 1e3,\n            lineWidth: 2,\n            lineColor: 16777215,\n            hasGradient: true,\n            hasBeacon: false,\n            settingsForTypes: {\n                CANDLE: {\n                    minSegmentLengthInPx: 20,\n                    maxSegmentLengthInPx: 40\n                },\n                LINE: {\n                    minSegmentLengthInPx: 2,\n                    maxSegmentLengthInPx: 10\n                }\n            }\n        };\n        var Trend = function() {\n            function Trend(chartState, trendName, initialState) {\n                this.minXVal = Infinity;\n                this.minYVal = Infinity;\n                this.maxXVal = -Infinity;\n                this.maxYVal = -Infinity;\n                var options = initialState.trends[trendName];\n                this.name = trendName;\n                this.chartState = chartState;\n                this.calculatedOptions = Utils_1.Utils.deepMerge(DEFAULT_OPTIONS, options);\n                this.calculatedOptions.name = trendName;\n                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n                this.calculatedOptions.dataset = [];\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvents();\n            }\n            Trend.prototype.onInitialStateApplied = function() {\n                this.segments = new TrendSegments_1.TrendSegments(this.chartState, this);\n            };\n            Trend.prototype.bindEvents = function() {\n                var _this = this;\n                var chartState = this.chartState;\n                chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateApplied();\n                });\n                chartState.onScrollStop(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onZoom(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n                });\n                chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            Trend.prototype.getCalculatedOptions = function() {\n                return this.calculatedOptions;\n            };\n            Trend.prototype.appendData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData());\n                var updatedTrendData = options.data.concat(newData);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.prependData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData(), true);\n                var updatedTrendData = newData.concat(options.data);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.changeData = function(allData, newData) {\n                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n                    var item = newData_1[_i];\n                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n                }\n                var options = this.getOptions();\n                var statePatch = {\n                    trends: (_a = {}, _a[options.name] = {\n                        data: allData\n                    }, _a)\n                };\n                this.chartState.setState(statePatch, newData);\n                var _a;\n            };\n            Trend.prototype.getData = function(fromX, toX) {\n                var data = this.getOptions().data;\n                if (fromX == void 0 && toX == void 0) return data;\n                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n                toX = toX !== void 0 ? toX : data[data.length].xVal;\n                var filteredData = [];\n                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                    var item = data_1[_i];\n                    if (item.xVal < fromX) continue;\n                    if (item.xVal > toX) break;\n                    filteredData.push(item);\n                }\n                return filteredData;\n            };\n            Trend.prototype.getFirstItem = function() {\n                return this.getOptions().data[0];\n            };\n            Trend.prototype.getLastItem = function() {\n                var data = this.getOptions().data;\n                return data[data.length - 1];\n            };\n            Trend.prototype.getOptions = function() {\n                return this.chartState.data.trends[this.name];\n            };\n            Trend.prototype.setOptions = function(options) {\n                this.chartState.setState({\n                    trends: (_a = {}, _a[this.name] = options, _a)\n                });\n                var _a;\n            };\n            Trend.prototype.onPrependRequest = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n                return function() {\n                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n                };\n            };\n            Trend.prototype.onChange = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.CHANGE, cb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, cb);\n                };\n            };\n            Trend.prototype.onDataChange = function(cb) {\n                var _this = this;\n                var onChangeCb = function(changedOptions, newData) {\n                    if (newData) cb(newData);\n                };\n                this.ee.on(EVENTS.CHANGE, onChangeCb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n                };\n            };\n            Trend.prototype.checkForPrependRequest = function() {\n                var _this = this;\n                if (this.prependRequest) return;\n                var chartState = this.chartState;\n                var minXVal = chartState.data.computedData.trends.minXVal;\n                var minScreenX = chartState.getScreenXByValue(minXVal);\n                var needToRequest = minScreenX > 0;\n                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var requestedDataLength = to - from;\n                if (!needToRequest) return;\n                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n                });\n                this.prependRequest.then(function(newData) {\n                    _this.prependData(newData);\n                    _this.prependRequest = null;\n                }, function() {\n                    _this.prependRequest = null;\n                });\n            };\n            Trend.prepareData = function(newData, currentData, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var data = [];\n                if (typeof newData[0] == \"number\") {\n                    currentData = currentData || [];\n                    var initialItem = void 0;\n                    var xVal = void 0;\n                    if (isPrepend) {\n                        initialItem = currentData[0];\n                        xVal = initialItem.xVal - newData.length;\n                    } else {\n                        initialItem = currentData[currentData.length - 1];\n                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n                    }\n                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n                        var yVal = _a[_i];\n                        data.push({\n                            xVal: xVal,\n                            yVal: yVal,\n                            id: Utils_1.Utils.getUid()\n                        });\n                        xVal++;\n                    }\n                } else {\n                    data = newData;\n                }\n                return data;\n            };\n            return Trend;\n        }();\n        exports.Trend = Trend;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var EventEmmiter_1 = __webpack_require__(13);\n        var Vector3 = THREE.Vector3;\n        var Trend_1 = __webpack_require__(17);\n        var Utils_1 = __webpack_require__(14);\n        var MAX_ANIMATED_SEGMENTS = 100;\n        var EVENTS = {\n            REBUILD: \"rebuild\",\n            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n            ANIMATION_FRAME: \"animationFrame\"\n        };\n        var TrendSegments = function() {\n            function TrendSegments(chartState, trend) {\n                this.segmentsById = {};\n                this.segments = [];\n                this.animatedSegmentsIds = [];\n                this.segmentsLength = 0;\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForPrepend = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.trend = trend;\n                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n                this.tryToRebuildSegments();\n                this.bindEvents();\n            }\n            TrendSegments.prototype.bindEvents = function() {\n                var _this = this;\n                this.trend.onChange(function(changedOptions, newData) {\n                    return _this.onTrendChangeHandler(changedOptions, newData);\n                });\n                this.chartState.onZoom(function() {\n                    return _this.onZoomHandler();\n                });\n                this.chartState.onScroll(function() {\n                    return _this.recalculateDisplayedRange();\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            TrendSegments.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.appendAnimation && this.appendAnimation.kill();\n                this.prependAnimation && this.prependAnimation.kill();\n            };\n            TrendSegments.prototype.onZoomHandler = function() {\n                var segmentsRebuilded = this.tryToRebuildSegments();\n                if (!segmentsRebuilded) {\n                    this.recalculateDisplayedRange();\n                }\n            };\n            TrendSegments.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n                if (needToRebuildSegments) {\n                    this.tryToRebuildSegments(true);\n                    return;\n                }\n                if (!newData) return;\n                var data = this.trend.getData();\n                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                isAppend ? this.appendData(newData) : this.prependData(newData);\n                this.recalculateDisplayedRange();\n            };\n            TrendSegments.prototype.getEndSegment = function() {\n                return this.segmentsById[this.endSegmentId];\n            };\n            TrendSegments.prototype.getStartSegment = function() {\n                return this.segmentsById[this.startSegmentId];\n            };\n            TrendSegments.prototype.tryToRebuildSegments = function(force) {\n                if (force === void 0) {\n                    force = false;\n                }\n                var options = this.trend.getOptions();\n                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n                var trendTypesSettings = options.settingsForTypes;\n                var trendTypeSettings = trendTypesSettings[trendTypeName];\n                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n                var needToRebuild = this.segments.length === 0 || force;\n                var segmentLength = this.maxSegmentLength;\n                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n                }\n                if (!needToRebuild) return false;\n                this.maxSegmentLength = segmentLength;\n                this.segmentsById = {};\n                this.segments = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.segmentsLength = 0;\n                this.stopAllAnimations();\n                this.appendData(null, true);\n                this.recalculateDisplayedRange(true);\n                this.ee.emit(EVENTS.REBUILD);\n            };\n            TrendSegments.prototype.stopAllAnimations = function() {\n                this.animatedSegmentsIds = [];\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForAppend = [];\n                if (this.prependAnimation) this.prependAnimation.kill();\n                if (this.appendAnimation) this.appendAnimation.kill();\n            };\n            TrendSegments.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n                if (segmentsAreRebuilded === void 0) {\n                    segmentsAreRebuilded = false;\n                }\n                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n                var displayedRange = to - from;\n                this.firstDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, from - displayedRange, \"startXVal\");\n                this.lastDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, to + displayedRange, \"endXVal\");\n                if (segmentsAreRebuilded) return;\n                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n            };\n            TrendSegments.prototype.getSegmentsForXValues = function(values) {\n                var valueInd = 0;\n                var value = values[valueInd];\n                var lastValueInd = values.length - 1;\n                var results = [];\n                var segment = this.getStartSegment();\n                if (!segment.hasValue) return [];\n                while (segment) {\n                    while (value < segment.startXVal) {\n                        results.push(void 0);\n                        value = values[++valueInd];\n                    }\n                    while (value > segment.endXVal) {\n                        segment = segment.getNext();\n                        if (!segment) break;\n                    }\n                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n                    if (valueInPoint) {\n                        results.push(segment);\n                        value = values[++valueInd];\n                    }\n                    if (valueInd > lastValueInd) break;\n                }\n                return results;\n            };\n            TrendSegments.prototype.onAnimationFrame = function(cb) {\n                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n            };\n            TrendSegments.prototype.onRebuild = function(cb) {\n                return this.ee.subscribe(EVENTS.REBUILD, cb);\n            };\n            TrendSegments.prototype.onDisplayedRangeChanged = function(cb) {\n                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n            };\n            TrendSegments.prototype.allocateNextSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var prevSegment = this.segmentsById[this.endSegmentId];\n                if (prevSegment && prevSegment.hasValue) {\n                    prevSegment.nextId = id;\n                    segment.prevId = prevSegment.id;\n                }\n                this.endSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.push(segment);\n                return segment;\n            };\n            TrendSegments.prototype.allocatePrevSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var nextSegment = this.segmentsById[this.startSegmentId];\n                if (nextSegment && nextSegment.hasValue) {\n                    nextSegment.prevId = id;\n                    segment.nextId = nextSegment.id;\n                }\n                this.startSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.unshift(segment);\n                return segment;\n            };\n            TrendSegments.prototype.appendData = function(newData, needRebuildSegments) {\n                if (needRebuildSegments === void 0) {\n                    needRebuildSegments = false;\n                }\n                var trendData = this.trend.getData();\n                if (needRebuildSegments) {\n                    newData = trendData;\n                    this.animatedSegmentsForAppend = [];\n                }\n                var startItemInd = trendData.length - newData.length;\n                var segment = this.getEndSegment() || this.allocateNextSegment();\n                var initialSegment = segment.hasValue ? segment : null;\n                var initialAnimationState = segment.createAnimationState();\n                var itemInd = 0;\n                while (itemInd < newData.length) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.appendItem(item);\n                    var isLastItem = itemInd == newData.length - 1;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd++;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForAppend.length > 0) {\n                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForAppend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocateNextSegment();\n                    var prevItem = trendData[startItemInd + itemInd - 1];\n                    segment.appendItem(prevItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (needRebuildSegments) {\n                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n                        var segmentId = _a[_i];\n                        var segment_1 = this.segmentsById[segmentId];\n                        segment_1.currentAnimationState = segment_1.createAnimationState();\n                    }\n                    this.animatedSegmentsForAppend = [];\n                    return;\n                }\n                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time);\n            };\n            TrendSegments.prototype.prependData = function(newData) {\n                var trendData = this.trend.getData();\n                var segment = this.getStartSegment() || this.segmentsById[0];\n                var initialSegment = segment.hasValue ? segment : null;\n                var itemInd = newData.length - 1;\n                var initialAnimationState = segment.createAnimationState();\n                while (itemInd >= 0) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.prependItem(item);\n                    var isLastItem = itemInd == 0;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd--;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForPrepend.length > 0) {\n                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForPrepend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocatePrevSegment();\n                    var nextItem = trendData[itemInd + 1];\n                    segment.prependItem(nextItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time, true);\n            };\n            TrendSegments.prototype.animate = function(time, isPrepend) {\n                var _this = this;\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n                if (animation && animation.isActive() || time == 0) {\n                    if (animation) animation.kill();\n                    this.onAnimationFrameHandler(1, isPrepend);\n                    animatedSegmentsIds.length = 0;\n                    return;\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var ease = animationsOptions.trendChangeEase;\n                var objectToAnimate = {\n                    animationValue: 0\n                };\n                animation = TweenLite.to(objectToAnimate, time, {\n                    animationValue: 1,\n                    ease: ease\n                });\n                animation.eventCallback(\"onUpdate\", function() {\n                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animatedSegmentsIds.length = 0;\n                    _this.appendAnimation = null;\n                });\n                if (isPrepend) {\n                    this.prependAnimation = animation;\n                } else {\n                    this.appendAnimation = animation;\n                }\n            };\n            TrendSegments.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n                    var segmentId = animatedSegmentsIds_1[_i];\n                    var segment = this.segmentsById[segmentId];\n                    for (var key in segment.targetAnimationState) {\n                        var targetValue = segment.targetAnimationState[key];\n                        var initialValue = segment.initialAnimationState[key];\n                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n                        segment.currentAnimationState[key] = currentValue;\n                    }\n                }\n                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n            };\n            return TrendSegments;\n        }();\n        exports.TrendSegments = TrendSegments;\n        var TrendSegment = function() {\n            function TrendSegment(trendPoints, id) {\n                this.isCompleted = false;\n                this.items = [];\n                this.initialAnimationState = {};\n                this.targetAnimationState = {};\n                this.currentAnimationState = {};\n                this.trendSegments = trendPoints;\n                this.id = id;\n                this.maxLength = trendPoints.maxSegmentLength;\n            }\n            TrendSegment.prototype.createAnimationState = function() {\n                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n                return {\n                    xVal: xVal,\n                    yVal: yVal,\n                    startXVal: startXVal,\n                    startYVal: startYVal,\n                    endXVal: endXVal,\n                    endYVal: endYVal,\n                    maxYVal: maxYVal,\n                    minYVal: minYVal,\n                    maxLength: maxLength\n                };\n            };\n            TrendSegment.prototype.appendItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.push(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var startXVal = items[0].xVal;\n                if (item.xVal - startXVal > this.maxLength) return false;\n                items.push(item);\n                return true;\n            };\n            TrendSegment.prototype.prependItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.unshift(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var endXVal = items[items.length - 1].xVal;\n                if (endXVal - item.xVal > this.maxLength) return false;\n                items.unshift(item);\n                return true;\n            };\n            TrendSegment.prototype.complete = function() {\n                this.isCompleted = true;\n                this.recalculateItems();\n                this.items = [];\n            };\n            TrendSegment.prototype.recalculateItems = function() {\n                var items = this.items;\n                var itemsLength = items.length;\n                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n                var endItem = items[itemsLength - 1];\n                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n                var startXVal, startYVal;\n                var startItem = items[0];\n                startXVal = startItem.xVal;\n                startYVal = startItem.yVal;\n                var minX = Math.min(startXVal, endXVal);\n                var maxX = Math.max(startXVal, endXVal);\n                var middleXVal = minX + (maxX - minX) / 2;\n                var minY = Math.min(startYVal, endYVal);\n                var maxY = Math.max(startYVal, endYVal);\n                var middleYVal = minY + (maxY - minY) / 2;\n                var yVals = items.map(function(item) {\n                    return item.yVal;\n                });\n                this.startXVal = startXVal;\n                this.startYVal = startYVal;\n                this.endXVal = endXVal;\n                this.endYVal = endYVal;\n                this.xVal = middleXVal;\n                this.yVal = middleYVal;\n                this.maxYVal = Math.max.apply(Math, yVals);\n                this.minYVal = Math.min.apply(Math, yVals);\n                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n            };\n            TrendSegment.prototype.getNext = function() {\n                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n            };\n            TrendSegment.prototype.getPrev = function() {\n                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n            };\n            TrendSegment.prototype.getFrameVal = function() {\n                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n                return new Vector3(xVal, yVal, 0);\n            };\n            TrendSegment.prototype.getFramePoint = function() {\n                var frameVal = this.getFrameVal();\n                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n            };\n            return TrendSegment;\n        }();\n        exports.TrendSegment = TrendSegment;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var EventEmmiter_1 = __webpack_require__(13);\n        var Screen = function() {\n            function Screen(chartState) {\n                this.options = {\n                    scrollXVal: 0,\n                    scrollX: 0,\n                    scrollYVal: 0,\n                    scrollY: 0,\n                    zoomX: 1,\n                    zoomY: 1\n                };\n                this.currentScrollX = {\n                    x: 0\n                };\n                this.currentScrollY = {\n                    y: 0\n                };\n                this.currentZoomX = {\n                    val: 1\n                };\n                this.currentZoomY = {\n                    val: 1\n                };\n                this.chartState = chartState;\n                var _a = chartState.data, w = _a.width, h = _a.height;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.transform({\n                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n                    zoomY: 1\n                });\n                this.bindEvents();\n            }\n            Screen.prototype.getCameraSettings = function() {\n                var _a = this.chartState.data, w = _a.width, h = _a.height;\n                var FOV = 75;\n                var vFOV = FOV * (Math.PI / 180);\n                return {\n                    FOV: FOV,\n                    aspect: w / h,\n                    near: .1,\n                    far: 5e3,\n                    z: h / (2 * Math.tan(vFOV / 2)),\n                    x: w / 2,\n                    y: h / 2\n                };\n            };\n            Screen.prototype.onZoomFrame = function(cb) {\n                var _this = this;\n                var eventName = \"zoomFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onScrollFrame = function(cb) {\n                var _this = this;\n                var eventName = \"scrollFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onTransformationFrame = function(cb) {\n                var _this = this;\n                var eventName = \"transformationFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.cameraIsMoving = function() {\n                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n            };\n            Screen.prototype.transform = function(options, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n                if (scrollX != void 0) this.options.scrollX = scrollX;\n                if (scrollY != void 0) this.options.scrollY = scrollY;\n                if (zoomX != void 0) this.options.zoomX = zoomX;\n                if (zoomY != void 0) this.options.zoomY = zoomY;\n                if (scrollX != void 0 || zoomX) {\n                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n                    this.options.scrollXVal = options.scrollXVal;\n                }\n                if (scrollY != void 0 || zoomY) {\n                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n                    this.options.scrollYVal = options.scrollYVal;\n                }\n                if (silent) return;\n                this.ee.emit(\"transformationFrame\", options);\n                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n                    this.ee.emit(\"scrollFrame\", options);\n                }\n                if (options.zoomX != void 0 || options.zoomY != void 0) {\n                    this.ee.emit(\"zoomFrame\", options);\n                }\n            };\n            Screen.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onChange(function(changedProps) {\n                    if (changedProps.xAxis && changedProps.xAxis.range) {\n                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n                    }\n                    if (changedProps.yAxis && changedProps.yAxis.range) {\n                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n                    }\n                });\n                state.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            Screen.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.scrollXAnimation && this.scrollXAnimation.kill();\n                this.scrollYAnimation && this.scrollYAnimation.kill();\n                this.zoomXAnimation && this.zoomXAnimation.kill();\n                this.zoomYAnimation && this.zoomYAnimation.kill();\n            };\n            Screen.prototype.onScrollXHandler = function(changedProps) {\n                var _this = this;\n                var state = this.chartState;\n                var isDragMode = state.data.cursor.dragMode;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled && !isDragMode;\n                var zoomXChanged = changedProps.xAxis.range.zoom;\n                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n                var range = state.data.xAxis.range;\n                var targetX = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollX.x = this.options.scrollX;\n                var cb = function() {\n                    _this.transform({\n                        scrollX: _this.currentScrollX.x\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n                        x: targetX,\n                        ease: ease\n                    });\n                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollX.x = targetX;\n                    cb();\n                }\n            };\n            Screen.prototype.onScrollYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n                var range = state.data.yAxis.range;\n                var targetY = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollY.y = this.options.scrollY;\n                var cb = function() {\n                    _this.transform({\n                        scrollY: _this.currentScrollY.y\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n                        y: targetY,\n                        ease: animations.zoomEase\n                    });\n                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollY.y = targetY;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomXHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.xAxis.range.zoom;\n                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomX: _this.currentZoomX.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomX.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.yAxis.range.zoom;\n                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomY: _this.currentZoomY.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomY.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomX;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomY;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            Screen.prototype.getValueOnXAxis = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n            };\n            Screen.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n            };\n            Screen.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n            };\n            Screen.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n            };\n            Screen.prototype.getValueByScreenX = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.getValueByScreenY = function(y) {\n                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n            };\n            Screen.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            Screen.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            Screen.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            Screen.prototype.getPointByScreenY = function(screenY) {\n                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n            };\n            Screen.prototype.getTop = function() {\n                return this.getPointByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottom = function() {\n                return this.getPointByScreenY(0);\n            };\n            Screen.prototype.getLeft = function() {\n                return this.getPointByScreenX(0);\n            };\n            Screen.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.chartState.data.width);\n            };\n            Screen.prototype.getTopVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottomVal = function() {\n                return this.getValueByScreenY(0);\n            };\n            Screen.prototype.getCenterYVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height / 2);\n            };\n            return Screen;\n        }();\n        exports.Screen = Screen;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var EventEmmiter_1 = __webpack_require__(13);\n        var AXIS_MARK_DEFAULT_OPTIONS = {\n            type: \"simple\",\n            lineWidth: 1,\n            value: 0,\n            showValue: false,\n            stickToEdges: false,\n            lineColor: \"#FFFFFF\",\n            title: \"\"\n        };\n        var AxisMarks = function() {\n            function AxisMarks(chartState, axisType) {\n                this.items = {};\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.axisType = axisType;\n                var marks = this.items;\n                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n                    var options = axisMarksOptions_1[_i];\n                    var axisMark = void 0;\n                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n                    if (options.type == \"timeleft\") {\n                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n                    } else {\n                        axisMark = new AxisMark(chartState, axisType, options);\n                    }\n                    marks[options.name] = axisMark;\n                }\n                this.bindEvents();\n            }\n            AxisMarks.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, newData);\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n                if (!newData) return;\n                var startVal = newData[0].xVal;\n                var endVal = newData[newData.length - 1].xVal;\n                var marks = this.items;\n                for (var markName in marks) {\n                    var mark = marks[markName];\n                    var markVal = mark.options.value;\n                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n                }\n            };\n            AxisMarks.prototype.getItems = function() {\n                return this.items;\n            };\n            AxisMarks.prototype.getItem = function(markName) {\n                return this.items[markName];\n            };\n            return AxisMarks;\n        }();\n        exports.AxisMarks = AxisMarks;\n        var AxisMark = function() {\n            function AxisMark(chartState, axisType, options) {\n                this.renderOnTrendsChange = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.options = options;\n                this.axisType = axisType;\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            AxisMark.prototype.bindEvents = function() {};\n            AxisMark.prototype.setOptions = function(newOptions) {\n                var value = this.options.value;\n                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisMark.prototype.getDisplayedVal = function() {\n                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n                return String(displayedValue !== void 0 ? displayedValue : value);\n            };\n            AxisMark.prototype.onMarkCrossed = function(cb) {\n                var _this = this;\n                this.ee.on(\"markCrossed\", cb);\n                return function() {\n                    _this.ee.off(\"markCrossed\", cb);\n                };\n            };\n            AxisMark.prototype.onValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"valueChange\", cb);\n                return function() {\n                    _this.ee.off(\"valueChange\", cb);\n                };\n            };\n            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"onDisplayedValueChange\", cb);\n                return function() {\n                    _this.ee.off(\"onDisplayedValueChange\", cb);\n                };\n            };\n            AxisMark.typeName = \"simple\";\n            return AxisMark;\n        }();\n        exports.AxisMark = AxisMark;\n        var AxisTimeleftMark = function(_super) {\n            __extends(AxisTimeleftMark, _super);\n            function AxisTimeleftMark() {\n                _super.apply(this, arguments);\n                this.renderOnTrendsChange = true;\n            }\n            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n                var markVal = this.options.value;\n                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n                var time = markVal - maxXVal;\n                if (time < 0) time = 0;\n                return Utils_1.Utils.msToTimeString(time);\n            };\n            AxisTimeleftMark.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n            };\n            AxisTimeleftMark.prototype.onTrendsChange = function() {\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisTimeleftMark.typeName = \"timeleft\";\n            return AxisTimeleftMark;\n        }(AxisMark);\n        exports.AxisTimeleftMark = AxisTimeleftMark;\n    }, function(module, exports) {\n        \"use strict\";\n        (function(AXIS_RANGE_TYPE) {\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n        (function(AXIS_TYPE) {\n            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n        var AXIS_TYPE = exports.AXIS_TYPE;\n        (function(AXIS_DATA_TYPE) {\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Mesh = THREE.Mesh;\n        var Object3D = THREE.Object3D;\n        var Widget_1 = __webpack_require__(15);\n        var GridWidget_1 = __webpack_require__(23);\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var AxisWidget = function(_super) {\n            __extends(AxisWidget, _super);\n            function AxisWidget(state) {\n                var _this = this;\n                _super.call(this, state);\n                this.isDestroyed = false;\n                this.object3D = new Object3D();\n                this.axisXObject = new Object3D();\n                this.axisYObject = new Object3D();\n                this.object3D.add(this.axisXObject);\n                this.object3D.add(this.axisYObject);\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }, 1e3);\n                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n            }\n            AxisWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n                    _this.onScrollChange(options.scrollX, options.scrollY);\n                }), state.screen.onZoomFrame(function(options) {\n                    _this.onZoomFrame(options);\n                }), state.onDestroy(function() {\n                    return _this.onDestroy();\n                }), state.onResize(function() {\n                    return _this.onResize();\n                }));\n            };\n            AxisWidget.prototype.onDestroy = function() {\n                this.isDestroyed = true;\n                this.unbindEvents();\n            };\n            AxisWidget.prototype.onScrollChange = function(x, y) {\n                if (y != void 0) {\n                    this.axisYObject.position.y = y;\n                    this.axisXObject.position.y = y;\n                }\n                if (x != void 0) {\n                    this.axisYObject.position.x = x;\n                    this.updateAxisXRequest();\n                }\n            };\n            AxisWidget.prototype.onResize = function() {\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n            };\n            AxisWidget.prototype.setupAxis = function(orientation) {\n                var _this = this;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var canvasWidth = 0, canvasHeight = 0;\n                if (isXAxis) {\n                    this.axisXObject.traverse(function(obj) {\n                        return _this.axisXObject.remove(obj);\n                    });\n                    canvasWidth = visibleWidth * 3;\n                    canvasHeight = 50;\n                } else {\n                    this.axisYObject.traverse(function(obj) {\n                        return _this.axisYObject.remove(obj);\n                    });\n                    canvasWidth = 50;\n                    canvasHeight = visibleHeight * 3;\n                }\n                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n                if (isXAxis) {\n                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisXObject.add(axisMesh);\n                } else {\n                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisYObject.add(axisMesh);\n                }\n                this.updateAxis(orientation);\n            };\n            AxisWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisWidget.prototype.updateAxis = function(orientation) {\n                if (this.isDestroyed) return;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n                var axisOptions;\n                var axisMesh;\n                var axisGridParams;\n                if (isXAxis) {\n                    axisMesh = this.axisXObject.children[0];\n                    axisOptions = this.chartState.data.xAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n                } else {\n                    axisMesh = this.axisYObject.children[0];\n                    axisOptions = this.chartState.data.yAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n                }\n                var geometry = axisMesh.geometry;\n                var canvasWidth = geometry.parameters.width;\n                var canvasHeight = geometry.parameters.height;\n                var texture = axisMesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                if (isXAxis) {\n                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n                }\n                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n                var startVal = axisGridParams.start - edgeOffset;\n                var endVal = axisGridParams.end + edgeOffset;\n                ctx.beginPath();\n                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n                    var displayedValue = \"\";\n                    if (isXAxis) {\n                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n                        ctx.textAlign = \"center\";\n                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n                        } else {\n                            displayedValue = Number(val.toFixed(14)).toString();\n                        }\n                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n                    } else {\n                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n                        ctx.textAlign = \"right\";\n                        displayedValue = Number(val.toFixed(14)).toString();\n                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n                    }\n                    ctx.stroke();\n                }\n                ctx.stroke();\n                ctx.closePath();\n                texture.needsUpdate = true;\n            };\n            AxisWidget.prototype.onZoomFrame = function(options) {\n                if (options.zoomX) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }\n                if (options.zoomY) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n                }\n            };\n            AxisWidget.getDateStr = function(timestamp, gridParams) {\n                var sec = 1e3;\n                var min = sec * 60;\n                var hour = min * 60;\n                var day = hour * 60;\n                var step = gridParams.step;\n                var d = new Date(timestamp);\n                var tf = function(num) {\n                    return Utils_1.Utils.toFixed(num, 2);\n                };\n                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n            };\n            AxisWidget.widgetName = \"Axis\";\n            return AxisWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisWidget = AxisWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Vector3 = THREE.Vector3;\n        var Widget_1 = __webpack_require__(15);\n        var LineSegments = THREE.LineSegments;\n        var Utils_1 = __webpack_require__(14);\n        var GridWidget = function(_super) {\n            __extends(GridWidget, _super);\n            function GridWidget(chartState) {\n                _super.call(this, chartState);\n                this.isDestroyed = false;\n                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n                this.initGrid();\n                this.updateGrid();\n            }\n            GridWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n                    return _this.updateGrid();\n                }, 1e3);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return updateGridThrottled();\n                }), this.chartState.screen.onZoomFrame(function(options) {\n                    updateGridThrottled();\n                    _this.onZoomFrame(options);\n                }), this.chartState.onDestroy(function() {\n                    _this.isDestroyed = true;\n                    _this.unbindEvents();\n                }), this.chartState.onResize(function() {\n                    _this.updateGrid();\n                }));\n            };\n            GridWidget.prototype.initGrid = function() {\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: .1,\n                    transparent: true\n                });\n                var xLinesCount = this.gridSizeH;\n                var yLinesCount = this.gridSizeV;\n                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                this.lineSegments = new LineSegments(geometry, material);\n                this.lineSegments.position.setZ(-1);\n                this.lineSegments.frustumCulled = false;\n            };\n            GridWidget.prototype.updateGrid = function() {\n                if (this.isDestroyed) return;\n                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n                var startXVal = axisXGrid.start + gridScrollXVal;\n                var startYVal = axisYGrid.start + gridScrollYVal;\n                var geometry = this.lineSegments.geometry;\n                var vertices = geometry.vertices;\n                var lineInd = 0;\n                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n                    var value = startXVal + i * axisXGrid.step;\n                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n                    var value = startYVal + i * axisYGrid.step;\n                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                geometry.verticesNeedUpdate = true;\n                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n            };\n            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n            };\n            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n            };\n            GridWidget.prototype.onZoomFrame = function(options) {\n                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n            };\n            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n                var axisRange = axisOptions.range;\n                var from = axisRange.from;\n                var to = axisRange.to;\n                var axisLength = to - from;\n                var gridStep = 0;\n                var gridStepInPixels = 0;\n                var minGridStepInPixels = axisOptions.gridMinSize;\n                var axisLengthStr = String(axisLength);\n                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n                var gridStepFound = false;\n                var digitPos = 0;\n                while (!gridStepFound) {\n                    var power = intPartLength - digitPos - 1;\n                    var multiplier = Math.pow(10, power) || 1;\n                    var dividers = [ 1, 2, 5 ];\n                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n                        var nextGridStep = multiplier / dividers[dividerInd];\n                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n                        if (nextGridStepInPixels >= minGridStepInPixels) {\n                            gridStep = nextGridStep;\n                            gridStepInPixels = nextGridStepInPixels;\n                        } else {\n                            gridStepFound = true;\n                            if (gridStep === 0) {\n                                gridStep = nextGridStep;\n                                gridStepInPixels = nextGridStepInPixels;\n                            }\n                            break;\n                        }\n                    }\n                    if (!gridStepFound) digitPos++;\n                }\n                var gridStart = Math.floor(from / gridStep) * gridStep;\n                var gridEnd = Math.floor(to / gridStep) * gridStep;\n                return {\n                    start: gridStart,\n                    end: gridEnd,\n                    step: gridStep,\n                    stepInPx: gridStepInPixels,\n                    length: gridEnd - gridStart,\n                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n                };\n            };\n            GridWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            GridWidget.widgetName = \"Grid\";\n            return GridWidget;\n        }(Widget_1.ChartWidget);\n        exports.GridWidget = GridWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(17);\n        var TrendsLoadingWidget = function(_super) {\n            __extends(TrendsLoadingWidget, _super);\n            function TrendsLoadingWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLoading;\n            };\n            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n            return TrendsLoadingWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n        var TrendLoading = function(_super) {\n            __extends(TrendLoading, _super);\n            function TrendLoading(state, trendName) {\n                _super.call(this, state, trendName);\n                this.isActive = false;\n                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendLoading.createTexture(),\n                    transparent: true\n                }));\n                this.deactivate();\n            }\n            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled && chartState.data.animations.enabled;\n            };\n            TrendLoading.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendLoading.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.onPrependRequest(function() {\n                    return _this.activate();\n                }));\n            };\n            TrendLoading.prototype.prependData = function() {\n                this.deactivate();\n            };\n            TrendLoading.prototype.activate = function() {\n                var mesh = this.mesh;\n                mesh.material.opacity = 1;\n                mesh.rotation.z = 0;\n                var animation = TweenLite.to(this.mesh.rotation, .5, {\n                    z: Math.PI * 2\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animation.restart();\n                });\n                this.animation = animation;\n                this.isActive = true;\n                this.updatePosition();\n            };\n            TrendLoading.prototype.deactivate = function() {\n                this.animation && this.animation.kill();\n                this.mesh.material.opacity = 0;\n                this.isActive = false;\n            };\n            TrendLoading.createTexture = function() {\n                var h = 64, w = 64;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                    ctx.lineWidth = 5;\n                    var center = h / 2;\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n                    ctx.stroke();\n                });\n            };\n            TrendLoading.prototype.onZoomFrame = function() {\n                this.updatePosition();\n            };\n            TrendLoading.prototype.updatePosition = function() {\n                if (!this.isActive) return;\n                var trend = this.trend;\n                var segment = trend.segments.getStartSegment();\n                var x, y;\n                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    x = segment.currentAnimationState.startXVal;\n                    y = segment.currentAnimationState.startYVal;\n                } else {\n                    x = segment.currentAnimationState.xVal - segment.maxLength;\n                    y = segment.currentAnimationState.yVal;\n                }\n                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n            };\n            return TrendLoading;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLoading = TrendLoading;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(15);\n        var Object3D = THREE.Object3D;\n        var TrendsWidget = function(_super) {\n            __extends(TrendsWidget, _super);\n            function TrendsWidget(state) {\n                _super.call(this, state);\n                this.widgets = {};\n                this.object3D = new Object3D();\n                this.onTrendsChange();\n            }\n            TrendsWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n                state.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, changedOptions, newData);\n                });\n            };\n            TrendsWidget.prototype.onTrendsChange = function() {\n                var trendsOptions = this.chartState.data.trends;\n                var TrendWidgetClass = this.getTrendWidgetClass();\n                for (var trendName in trendsOptions) {\n                    var trendOptions = trendsOptions[trendName];\n                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n                        this.createTrendWidget(trendName);\n                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n                        this.destroyTrendWidget(trendName);\n                    }\n                }\n            };\n            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n                var widget = this.widgets[trendName];\n                if (!widget) return;\n                widget.onTrendChange(changedOptions);\n                if (newData) {\n                    var data = this.chartState.getTrend(trendName).getData();\n                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n                }\n            };\n            TrendsWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n                var WidgetConstructor = this.getTrendWidgetClass();\n                var widget = new WidgetConstructor(this.chartState, trendName);\n                this.widgets[trendName] = widget;\n                var widgetObject = widget.getObject3D();\n                widgetObject.name = trendName;\n                this.object3D.add(widget.getObject3D());\n            };\n            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n                this.widgets[trendName].onDestroy();\n                delete this.widgets[trendName];\n                var widgetObject = this.object3D.getObjectByName(trendName);\n                this.object3D.remove(widgetObject);\n            };\n            return TrendsWidget;\n        }(Widget_1.ChartWidget);\n        exports.TrendsWidget = TrendsWidget;\n        var TrendWidget = function() {\n            function TrendWidget(chartState, trendName) {\n                this.chartState = chartState;\n                this.trendName = trendName;\n                this.unsubscribers = [];\n                this.trend = chartState.trendsManager.getTrend(trendName);\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled;\n            };\n            TrendWidget.prototype.appendData = function(newData) {};\n            TrendWidget.prototype.prependData = function(newData) {};\n            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n            TrendWidget.prototype.onDestroy = function() {\n                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n                    var unsubscriber = _a[_i];\n                    unsubscriber();\n                }\n            };\n            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n            TrendWidget.prototype.onZoomFrame = function(options) {};\n            TrendWidget.prototype.onTransformationFrame = function(options) {};\n            TrendWidget.prototype.onZoom = function() {};\n            TrendWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.trend.segments.onAnimationFrame(function(trendPoints) {\n                    return _this.onSegmentsAnimate(trendPoints);\n                }));\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n                    return _this.onTransformationFrame(options);\n                }));\n                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n                    return _this.onZoomFrame(options);\n                }));\n                this.bindEvent(this.chartState.onZoom(function() {\n                    return _this.onZoom();\n                }));\n            };\n            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n                this.unsubscribers.push(unsubscriber);\n            };\n            return TrendWidget;\n        }();\n        exports.TrendWidget = TrendWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(15);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var Utils_1 = __webpack_require__(14);\n        var Line = THREE.Line;\n        var Mesh = THREE.Mesh;\n        var interfaces_1 = __webpack_require__(21);\n        var AxisMarksWidget = function(_super) {\n            __extends(AxisMarksWidget, _super);\n            function AxisMarksWidget(chartState) {\n                _super.call(this, chartState);\n                this.axisMarksWidgets = [];\n                this.object3D = new Object3D();\n                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n                var items = xAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n                items = yAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n            }\n            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n                this.axisMarksWidgets.push(axisMarkWidget);\n                this.object3D.add(axisMarkWidget.getObject3D());\n            };\n            AxisMarksWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n                    return _this.updateMarksPositions();\n                }), this.chartState.onResize(function() {\n                    return _this.updateMarksPositions();\n                }));\n            };\n            AxisMarksWidget.prototype.updateMarksPositions = function() {\n                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n                    var widget = _a[_i];\n                    widget.updatePosition();\n                }\n            };\n            AxisMarksWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarksWidget.widgetName = \"AxisMarks\";\n            return AxisMarksWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisMarksWidget = AxisMarksWidget;\n        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n            var axisMark = axisMarkWidget.axisMark;\n            ctx.fillStyle = axisMark.options.lineColor;\n            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n            var xCoord = 15;\n            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n                ctx.textAlign = \"end\";\n                xCoord = axisMarkWidget.indicatorWidth;\n            }\n            ctx.fillText(axisMark.options.title, xCoord, 20);\n            if (!axisMark.options.showValue) return;\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n        };\n        var INDICATOR_POS_Z = .1;\n        var AxisMarkWidget = function() {\n            function AxisMarkWidget(chartState, axisMark) {\n                this.indicatorWidth = 128;\n                this.indicatorHeight = 64;\n                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n                this.chartState = chartState;\n                this.axisMark = axisMark;\n                this.axisType = axisMark.axisType;\n                this.frameValue = axisMark.options.value;\n                this.object3D = new Object3D();\n                this.object3D.position.setZ(-.1);\n                this.line = this.createLine();\n                this.object3D.add(this.line);\n                this.indicator = this.createIndicator();\n                this.object3D.add(this.indicator);\n                this.renderIndicator();\n                this.updatePosition();\n                this.bindEvents();\n            }\n            AxisMarkWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarkWidget.prototype.createLine = function() {\n                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n                var lineGeometry = new Geometry();\n                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n                return new Line(lineGeometry, new LineBasicMaterial({\n                    color: Utils_1.Utils.getHexColor(lineColor),\n                    linewidth: lineWidth\n                }));\n            };\n            AxisMarkWidget.prototype.createIndicator = function() {\n                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n            };\n            AxisMarkWidget.prototype.renderIndicator = function() {\n                var texture = this.indicator.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n                texture.needsUpdate = true;\n            };\n            AxisMarkWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.axisMark.onDisplayedValueChange(function() {\n                    return _this.renderIndicator();\n                });\n                this.axisMark.onValueChange(function() {\n                    return _this.onValueChangeHandler();\n                });\n            };\n            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n                var _this = this;\n                if (this.moveAnimation) this.moveAnimation.kill();\n                var animations = this.chartState.data.animations;\n                var targetValue = this.axisMark.options.value;\n                var cb = function() {\n                    _this.updatePosition();\n                };\n                if (animations.enabled) {\n                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n                        frameValue: targetValue,\n                        ease: animations.trendChangeEase\n                    });\n                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.frameValue = targetValue;\n                    cb();\n                }\n            };\n            AxisMarkWidget.prototype.updatePosition = function() {\n                var chartState = this.chartState;\n                var screen = chartState.screen;\n                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n                var lineGeometry = this.line.geometry;\n                var hasStickMode = this.axisMark.options.stickToEdges;\n                var _a = this.chartState.data, width = _a.width, height = _a.height;\n                if (isXAxis) {\n                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n                    this.object3D.position.y = screen.getBottom();\n                    lineGeometry.vertices[1].setY(height);\n                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n                } else {\n                    var val = this.frameValue;\n                    var bottomVal = screen.getBottomVal();\n                    var topVal = screen.getTopVal();\n                    var needToStickOnTop = hasStickMode && val > topVal;\n                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n                    var centerYVal = screen.getCenterYVal();\n                    this.object3D.position.x = screen.getLeft();\n                    if (needToStickOnTop) {\n                        this.object3D.position.y = screen.getTop();\n                    } else if (needToStickOnBottom) {\n                        this.object3D.position.y = screen.getBottom();\n                    } else {\n                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n                    }\n                    lineGeometry.vertices[1].setX(width);\n                    var indicatorPosY = val > centerYVal ? -35 : 10;\n                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n                }\n                lineGeometry.verticesNeedUpdate = true;\n            };\n            AxisMarkWidget.typeName = \"simple\";\n            return AxisMarkWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(15);\n        var LineSegments = THREE.LineSegments;\n        var Vector3 = THREE.Vector3;\n        var BorderWidget = function(_super) {\n            __extends(BorderWidget, _super);\n            function BorderWidget(chartState) {\n                _super.call(this, chartState);\n                var _a = chartState.data, width = _a.width, height = _a.height;\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: 0,\n                    transparent: true\n                });\n                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n                this.lineSegments = new LineSegments(geometry, material);\n            }\n            BorderWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            BorderWidget.widgetName = \"Border\";\n            return BorderWidget;\n        }(Widget_1.ChartWidget);\n        exports.BorderWidget = BorderWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Color = THREE.Color;\n        var CANVAS_WIDTH = 128;\n        var CANVAS_HEIGHT = 64;\n        var OFFSET_X = 15;\n        var TrendsIndicatorWidget = function(_super) {\n            __extends(TrendsIndicatorWidget, _super);\n            function TrendsIndicatorWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n                return TrendIndicator;\n            };\n            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n            return TrendsIndicatorWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n        var TrendIndicator = function(_super) {\n            __extends(TrendIndicator, _super);\n            function TrendIndicator(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                this.onTrendChange();\n            }\n            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasIndicator;\n            };\n            TrendIndicator.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendIndicator.prototype.onTrendChange = function() {\n                var trendData = this.trend.getData();\n                var lastItem = trendData[trendData.length - 1];\n                var texture = this.mesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n                texture.needsUpdate = true;\n            };\n            TrendIndicator.prototype.initObject = function() {\n                var color = new Color(this.trend.getOptions().lineColor);\n                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"15px Arial\";\n                    ctx.fillStyle = color.getStyle();\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n            };\n            TrendIndicator.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n                this.segment = segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x + OFFSET_X;\n                var y = endPointVector.y;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n                if (indicatorIsOutOfScreen) {\n                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n                    y -= 25;\n                }\n                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n            };\n            return TrendIndicator;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendIndicator = TrendIndicator;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var LineSegments = THREE.LineSegments;\n        var Trend_1 = __webpack_require__(17);\n        var Utils_1 = __webpack_require__(14);\n        var MAX_DISPLAYED_SEGMENTS = 2e3;\n        var TrendsLineWidget = function(_super) {\n            __extends(TrendsLineWidget, _super);\n            function TrendsLineWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLine;\n            };\n            TrendsLineWidget.widgetName = \"TrendsLine\";\n            return TrendsLineWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLineWidget = TrendsLineWidget;\n        var TrendLine = function(_super) {\n            __extends(TrendLine, _super);\n            function TrendLine(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeSegmentsInds = [];\n                this.displayedSegments = {};\n                var options = this.trend.getOptions();\n                this.material = new LineBasicMaterial({\n                    color: options.lineColor,\n                    linewidth: options.lineWidth\n                });\n                this.initLine();\n            }\n            TrendLine.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendLine.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            TrendLine.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segments.onRebuild(function() {\n                    _this.destroySegments();\n                    _this.setupSegments();\n                }));\n                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n                    _this.setupSegments();\n                }));\n            };\n            TrendLine.prototype.initLine = function() {\n                var geometry = new Geometry();\n                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.scaleXFactor = scaleXFactor;\n                this.scaleYFactor = scaleYFactor;\n                this.lineSegments = new LineSegments(geometry, this.material);\n                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.lineSegments.frustumCulled = false;\n                for (var i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\n                    geometry.vertices.push(new Vector3(), new Vector3());\n                    this.freeSegmentsInds.push(i);\n                }\n                this.vertices = geometry.vertices;\n                this.setupSegments();\n            };\n            TrendLine.prototype.setupSegments = function() {\n                var geometry = this.lineSegments.geometry;\n                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.displayedSegments) {\n                    var lineSegment = this.displayedSegments[segmentId];\n                    var segment_1 = this.trend.segments.segments[lineSegment.segmentId];\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupSegment(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n                var lineSegment = this.displayedSegments[segmentId];\n                if (!lineSegment) {\n                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n                    var ind = this.freeSegmentsInds.pop();\n                    lineSegment = this.displayedSegments[segmentId] = {\n                        segmentId: segmentId,\n                        ind: ind\n                    };\n                }\n                var segmentInd = lineSegment.ind;\n                var lineStartVertex = this.vertices[segmentInd * 2];\n                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n            };\n            TrendLine.prototype.destroySegments = function() {\n                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n            };\n            TrendLine.prototype.destroySegment = function(segmentId) {\n                var lineSegment = this.displayedSegments[segmentId];\n                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n                lineStartVertex.set(0, 0, 0);\n                lineEndVertex.set(0, 0, 0);\n                delete this.displayedSegments[segmentId];\n                this.freeSegmentsInds.push(lineSegment.ind);\n            };\n            TrendLine.prototype.onZoomFrame = function(options) {\n                var currentScale = this.lineSegments.scale;\n                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n            };\n            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n                var geometry = this.lineSegments.geometry;\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.displayedSegments[segmentId]) continue;\n                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendLine;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLine = TrendLine;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var Vector3 = THREE.Vector3;\n        var Mesh = THREE.Mesh;\n        var Line = THREE.Line;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var PlaneGeometry = THREE.PlaneGeometry;\n        var Trend_1 = __webpack_require__(17);\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Utils_1 = __webpack_require__(14);\n        var RISE_COLOR = 2927680;\n        var FALL_COLOR = 15619379;\n        var MARGIN_PERCENT = .3;\n        var MAX_CANDLES = 100;\n        var TrendsCandlesWidget = function(_super) {\n            __extends(TrendsCandlesWidget, _super);\n            function TrendsCandlesWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n                return TrendCandlesWidget;\n            };\n            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n            return TrendsCandlesWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n        var TrendCandlesWidget = function(_super) {\n            __extends(TrendCandlesWidget, _super);\n            function TrendCandlesWidget(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeCandlesInds = [];\n                this.candlesPool = [];\n                this.candles = {};\n                this.initObject();\n            }\n            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n            };\n            TrendCandlesWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendCandlesWidget.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segments.onRebuild(function() {\n                    _this.destroyCandles();\n                    _this.setupCandles();\n                }));\n                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n                    _this.setupCandles();\n                }));\n            };\n            TrendCandlesWidget.prototype.initObject = function() {\n                var stateData = this.chartState.data;\n                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.scaleXFactor = scaleXFactor;\n                this.scaleYFactor = scaleYFactor;\n                this.object3D = new Object3D();\n                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.object3D.frustumCulled = false;\n                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n                this.setupCandles();\n            };\n            TrendCandlesWidget.prototype.setupCandles = function() {\n                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.candles) {\n                    var segment_1 = this.candles[segmentId].segment;\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupCandle(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n            };\n            TrendCandlesWidget.prototype.destroyCandles = function() {\n                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n            };\n            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n                var candle = this.candles[segmentId];\n                this.object3D.remove(candle.getObject3D());\n                delete this.candles[segmentId];\n            };\n            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n                var currentScale = this.object3D.scale;\n                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n            };\n            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.candles[segmentId]) continue;\n                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n                    this.setupCandle(segmentId, segmentState);\n                }\n            };\n            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n                var candleInd = candleId % MAX_CANDLES;\n                var candle = this.candlesPool[candleInd];\n                if (!candle) {\n                    candle = this.candlesPool[candleInd] = new CandleWidget();\n                }\n                if (!this.candles[candleId]) {\n                    this.candles[candleId] = candle;\n                    this.object3D.add(candle.getObject3D());\n                }\n                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n                candle.setSegment(segmentState);\n            };\n            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendCandlesWidget;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendCandlesWidget = TrendCandlesWidget;\n        var CandleWidget = function() {\n            function CandleWidget() {\n                this.initObject();\n            }\n            CandleWidget.prototype.getObject3D = function() {\n                return this.rect;\n            };\n            CandleWidget.prototype.setSegment = function(segment) {\n                this.segment = segment;\n                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n                var geometry = this.rect.geometry;\n                var material = this.rect.material;\n                var width = segment.endXVal - segment.startXVal;\n                width -= width * MARGIN_PERCENT;\n                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n                leftTop.set(-width / 2, height / 2, 0);\n                rightTop.set(width / 2, height / 2, 0);\n                leftBottom.set(-width / 2, -height / 2, 0);\n                rightBottom.set(width / 2, -height / 2, 0);\n                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n                    leftBottom.setY(leftBottom.y + 1);\n                    rightBottom.setY(rightBottom.y + 1);\n                }\n                material.color.set(color);\n                geometry.verticesNeedUpdate = true;\n                var vLineGeometry = this.vLine.geometry;\n                var vLineMaterial = this.vLine.material;\n                var lineTop = segment.maxYVal - segment.yVal;\n                var lineBottom = segment.minYVal - segment.yVal;\n                vLineGeometry.vertices[0].set(0, lineTop, 0);\n                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n                vLineMaterial.color.set(color);\n                vLineGeometry.verticesNeedUpdate = true;\n                var hLineGeometry = this.hLine.geometry;\n                var hLineMaterial = this.hLine.material;\n                var lineLeft = -width / 2;\n                var lineRight = width / 2;\n                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n                hLineMaterial.color.set(color);\n                hLineGeometry.verticesNeedUpdate = true;\n            };\n            CandleWidget.prototype.initObject = function() {\n                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n                var vLineGeometry = new Geometry();\n                var hLineGeometry = new Geometry();\n                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.rect.add(this.vLine);\n                this.rect.add(this.hLine);\n            };\n            return CandleWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(17);\n        var TrendsBeaconWidget = function(_super) {\n            __extends(TrendsBeaconWidget, _super);\n            function TrendsBeaconWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n                return TrendBeacon;\n            };\n            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n            return TrendsBeaconWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n        var TrendBeacon = function(_super) {\n            __extends(TrendBeacon, _super);\n            function TrendBeacon(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                if (state.data.animations.enabled) {\n                    this.animate();\n                }\n                this.updatePosition();\n            }\n            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendBeacon.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendBeacon.prototype.onTrendChange = function() {\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return _this.updatePosition();\n                }));\n                this.bindEvent(this.chartState.onChange(function(changedProps) {\n                    return _this.onStateChange(changedProps);\n                }));\n                this.bindEvent(this.chartState.onDestroy(function() {\n                    return _this.stopAnimation();\n                }));\n            };\n            TrendBeacon.prototype.initObject = function() {\n                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture(),\n                    transparent: true\n                }));\n                light.scale.set(.2, .2, 1);\n                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture()\n                })));\n                this.segment = this.trend.segments.getEndSegment();\n            };\n            TrendBeacon.prototype.animate = function() {\n                var _this = this;\n                this.animated = true;\n                var object = this.mesh;\n                var animationObject = {\n                    scale: object.scale.x,\n                    opacity: object.material.opacity\n                };\n                this.mesh.scale.set(.1, .1, 1);\n                setTimeout(function() {\n                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n                        scale: 1,\n                        opacity: 0\n                    });\n                    animation.eventCallback(\"onUpdate\", function() {\n                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n                        object.material.opacity = animationObject.opacity;\n                    }).eventCallback(\"onComplete\", function() {\n                        _this.animation && animation.restart();\n                    });\n                }, 500);\n            };\n            TrendBeacon.prototype.stopAnimation = function() {\n                this.animated = false;\n                this.animation && this.animation.kill();\n                this.animation = null;\n            };\n            TrendBeacon.createTexture = function() {\n                var h = 32, w = 32;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.beginPath();\n                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = \"white\";\n                    ctx.fill();\n                });\n            };\n            TrendBeacon.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n                this.segment = trendsSegments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onStateChange = function(changedProps) {\n                if (!changedProps.animations) return;\n                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n                if (changedProps.animations.enabled) {\n                    this.animate();\n                } else {\n                    this.stopAnimation();\n                }\n            };\n            TrendBeacon.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var xVal, yVal;\n                var currentAnimationState = this.segment.currentAnimationState;\n                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    xVal = currentAnimationState.endXVal;\n                    yVal = currentAnimationState.endYVal;\n                } else {\n                    xVal = currentAnimationState.xVal;\n                    yVal = currentAnimationState.endYVal;\n                }\n                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n                this.mesh.position.set(x, endPointVector.y, .1);\n            };\n            return TrendBeacon;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendBeacon = TrendBeacon;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(3));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var EventEmmiter_1 = __webpack_require__(13);\n        exports.DEFAULT_CONFIG = {\n            installPluginWidgets: true\n        };\n        var ChartPlugin = function() {\n            function ChartPlugin(options, config) {\n                if (config === void 0) {\n                    config = {};\n                }\n                this.unsubscribers = [];\n                this.initialState = options;\n                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n                this.name = this.constructor.NAME;\n                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n            }\n            ChartPlugin.prototype.setupChartState = function(chartState) {\n                var _this = this;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n                    return _this.onInitialStateAppliedHandler(initialState);\n                }), this.chartState.onReady(function() {\n                    return _this.onChartReadyHandler();\n                }), this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n                }));\n            };\n            ChartPlugin.prototype.getOptions = function() {\n                return this.chartState.data.pluginsState[this.name];\n            };\n            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n            ChartPlugin.prototype.onChartReadyHandler = function() {};\n            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n            ChartPlugin.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n            };\n            ChartPlugin.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartPlugin.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartPlugin.NAME = \"\";\n            ChartPlugin.pluginWidgets = [];\n            return ChartPlugin;\n        }();\n        exports.ChartPlugin = ChartPlugin;\n    } ]);\n});\n\n\n//# sourceMappingURL=ThreeChart.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-chart/build/ThreeChart.js\n ** module id = 35\n ** module chunks = 1\n **/"],"sourceRoot":""}