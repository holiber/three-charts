{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.js","webpack:///webpack/bootstrap eb0767f1c63b3799d773","webpack:///./plugins/src/TrendsMarksPlugin/index.ts","webpack:///./plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.ts","webpack:///./~/three-chart/build/index.js","webpack:///./~/three-chart/build/ThreeChart.js","webpack:///./plugins/src/TrendsMarksPlugin/TrendsMarksWidget.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","__export","hasOwnProperty","__extends","d","b","__","constructor","prototype","Object","create","three_chart_1","TrendsMarksWidget_1","TREND_MARK_SIDE","EVENTS","AXIS_MARK_DEFAULT_OPTIONS","trendName","title","description","descriptionColor","value","iconColor","orientation","TOP","width","height","offset","margin","TrendsMarksPlugin","_super","trendsMarksPluginOptions","items","rects","onInitialStateApplied","bindEvents","onMarksChangeHandler","onStateChanged","getOptions","getItems","getItem","markName","createMark","options","marksOptions","newMarkOptions","concat","chartState","setState","pluginsState","_a","name","onChange","cb","ee","subscribe","CHANGE","_this","trendsManager","onSegmentsRebuilded","updateMarksSegments","screen","onZoomFrame","calclulateMarksPositions","onInitialStateAppliedHandler","trendsMarksOptions","actualMarksNames","_i","trendsMarksOptions_1","length","marks","Utils","getUid","toString","push","error","deepMerge","mark","TrendMark","indexOf","emit","createMarkRect","segment","state","left","getPointOnXAxis","xVal","top","getPointOnYAxis","yVal","isTopSideMark","newOffset","row","markRect","hasIntersection","rect","rectsIntersect","_setOffset","_setRow","trends","getTrendMarks","marksArr","xVals","_setSegment","sort","a","trend","getTrend","points","segments","getSegmentsForXValues","markInd","trendMarks","NAME","pluginWidgets","TrendsMarksWidget","ChartPlugin","type","TREND_TYPE","LINE","endXVal","endYVal","maxYVal","minYVal","PerspectiveCamera","THREE","State_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsLoadingWidget_1","AxisMarksWidget_1","BorderWidget_1","TrendsIndicatorWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","TrendsBeaconWidget_1","deps_1","MAX_DATA_LENGTH","Chart","$container","plugins","widgets","REVISION","style","getComputedStyle","parseInt","ChartState","installedWidgets","zoomThrottled","throttle","zoomValue","origin","zoom","init","installWidget","Widget","widgetName","data","w","h","showStats","autoRender","scene","Scene","isStopped","enabled","renderer","renderers","antialias","alpha","setPixelRatio","devicePixelRatio","setClearColor","backgroundColor","backgroundOpacity","setSize","appendChild","domElement","$el","display","stats","Stats","setupCamera","widgetsClasses","widgetOptions","WidgetConstructor","widget","add","getObject3D","renderLoop","isDestroyed","begin","render","fpsLimit","fps","delay","setTimeout","requestAnimationFrame","end","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","controls","addEventListener","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","onTransformationFrame","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","forEach","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","autoScroll","oldTrendsMaxX","prevState","computedData","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","xAxis","range","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","Math","min","max","autoScrollIsEnabled","then","createPreviewChart","userOptions","previewChartOptions","animations","Grid","Axis","TrendsGradient","window","CanvasRenderer","WebGLRenderer","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsBeaconWidget","TrendsIndicatorWidget","TrendsLoadingWidget","AxisMarksWidget","BorderWidget","TweenLite","TweenMax","isPlainObject","EE2","es6_promise_1","Promise","dom","k","children","l","document","createElement","cssText","g","performance","Date","now","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","round","u","n","q","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","SpriteCanvasMaterial","parameters","Material","color","Color","program","setValues","material","copy","console","log","_renderData","_elements","_lights","_projector","Projector","_canvas","canvas","undefined","_canvasWidth","_canvasHeight","_canvasWidthHalf","floor","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_context","_clearColor","_clearAlpha","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_camera","_v1","_v2","_v3","_v4","_v5","RenderableVertex","_v6","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_clipBox","Box2","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_vector3","Vector3","_centroid","_normal","_normalViewMatrix","Matrix3","setLineDash","autoClear","sortObjects","sortElements","info","vertices","faces","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","updateStyle","setViewport","setScissor","setScissorTest","setClearColorHex","hex","warn","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","intersect","expandByScalar","clearRect","setBlending","NormalBlending","setOpacity","setFillStyle","makeEmpty","clearColor","clearDepth","clearStencil","Camera","setTransform","translate","projectScene","elements","lights","getNormalMatrix","matrixWorldInverse","calculateLights","el","element","opacity","RenderableSprite","renderSprite","RenderableLine","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","RenderableFace","v3","overdraw","expand","renderFace3","union","setRGB","ll","light","lightColor","AmbientLight","DirectionalLight","PointLight","calculateLight","normal","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","multiplyScalar","subVectors","distance","distanceTo","blending","scaleX","scale","scaleY","dist","sqrt","SpriteMaterial","texture","map","pattern","version","textureToPattern","bitmap","image","ox","oy","sx","repeat","sy","cx","cy","save","rotation","rotate","restore","getStyle","setStrokeStyle","beginPath","moveTo","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","LineDashedMaterial","dashSize","gapSize","uv1","uv2","uv3","drawTriangle","MeshLambertMaterial","MeshPhongMaterial","emissive","FaceColors","multiply","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","MeshBasicMaterial","mapping","UVMapping","uvs","patternPath","envMap","SphericalReflectionMapping","vertexNormalsModel","applyMatrix3","MeshNormalMaterial","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","repeatX","wrapS","RepeatWrapping","repeatY","wrapT","createPattern","onUpdate","u0","v0","u1","u2","det","idet","offsetX","offsetY","transform","clipImage","clip","pixels","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","lineWidth","lineCap","lineJoin","strokeStyle","RenderableObject","object","renderOrder","vertexNormalsLength","Vector2","Vector4","visible","vertex","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","objects","_vector4","Box3","_boundingBox","_points3","Array","_points4","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","unproject","pickingRay","RenderList","normals","normalMatrix","setObject","projectVertex","applyMatrix4","invW","pushVertex","getNextVertexInPool","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","getNextLineInPool","pushTriangle","side","DoubleSide","getNextFaceInPool","fromArray","i","arguments","uv","renderList","autoUpdate","updateMatrixWorld","parent","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","traverseVisible","Light","Mesh","Line","Sprite","frustumCulled","intersectsObject","getNextObjectInPool","applyProjection","painterSort","o","ol","geometry","BufferGeometry","attributes","groups","positions","array","index","indices","group","start","count","Geometry","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","target","targetVertex","fl","face","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","step","LineSegments","clipLine","colors","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","isObject","isObjectObject","ctor","prot","val","isArray","__WEBPACK_AMD_DEFINE_RESULT__","_isArray","obj","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","**","growListenerTree","listener","split","slice","shift","warned","trace","setMaxListeners","event","once","fn","many","ttl","Error","off","apply","_origin","on","_all","args","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","removeAllListeners","listenersAny","EventEmitter2","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","EventEmmiter_1","Widget_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","initialState","AXIS_RANGE_TYPE","ALL","from","to","padding","dataType","AXIS_DATA_TYPE","NUMBER","gridMinSize","yAxis","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","Linear","easeNone","scrollSpeed","scrollEase","autoScrollSpeed","autoScrollEase","eventEmitterMaxListeners","isReady","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","xAxisMarks","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","initListeners","onDestroy","onReady","onTrendChange","onZoom","onPluginsStateChange","newState","eventData","silent","stateData","changedProps","key","trendsData","trendOptions","newStateContainsData","keys","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","widgetsOptions","WidgetClass","defaultOptions","getDefaultOptions","ChartWidget","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","zeroVal","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","copyProps","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","PluginWidget","setupChartState","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","maxLength","rangeLessThenMinValue","minLength","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","currentRange","nextRange","newScroll","resolve","animationTime","zoomToRange","scrollToEnd","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","eventName","listenersCount","deepmerge","src","mergeArrays","dst","obj1","obj2","deepCopy","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","intStr","lengthDiff","afterPointDigitsCount","afterPointStr","substr","bindEvent","createTexture","ctx","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","parseColor","cache","replace","exec","isNaN","getHexColor","str","rgb","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","random","srcObject","dstObject","props","excludeProps","unsubscriber","Trend_1","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getCalculatedOptions","getEnabledTrends","enabledTrends","allTrends","getData","firstTrendData","getExtremumYVal","extremumIsMax","fromX","toX","compareFn","trends_1","trendData","trendYValues","dataItem","NaN","_loop_1","this_1","onRebuild","Trend","TrendSegments_1","PREPEND_REQUEST","DEFAULT_OPTIONS","maxSegmentLength","lineColor","hasGradient","hasBeacon","settingsForTypes","CANDLE","minSegmentLengthInPx","maxSegmentLengthInPx","dataset","prepareData","TrendSegments","checkForPrependRequest","changedOptions","appendData","rawData","updatedTrendData","changeData","prependData","allData","newData_1","item","statePatch","filteredData","data_1","getFirstItem","getLastItem","setOptions","onPrependRequest","onDataChange","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","reject","currentData","isPrepend","initialItem","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","segmentsById","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","onDestroyHandler","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","segmentLength","currentSegmentLengthInPx","Number","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","displayedRangeChanged","values","valueInd","lastValueInd","results","hasValue","startXVal","getNext","valueInPoint","onAnimationFrame","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","unshift","needRebuildSegments","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","recalculateItems","segmentIsReadyForAnimate","startYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","getPrev","prevPoint","getFrameVal","getFramePoint","frameVal","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","vFOV","PI","tan","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","showValue","stickToEdges","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markVal","markWasCrossed","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","traverse","transparent","axisMesh","PlaneGeometry","axisOptions","axisGridParams","getGridParamsForAxis","edgeOffset","segmentsCount","pxVal","textAlign","DATE","getDateStr","gridParams","sec","hour","day","tf","getHours","getMinutes","getSeconds","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","xLinesCount","yLinesCount","lineSegments","setZ","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","PlaneBufferGeometry","TrendsWidget_1","getTrendWidgetClass","TrendLoading","TrendsWidget","mesh","deactivate","widgetIsEnabled","activate","restart","updatePosition","center","arc","pointVector","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","widgetObject","getObjectByName","onSegmentsAnimate","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY","CANVAS_WIDTH","CANVAS_HEIGHT","OFFSET_X","TrendIndicator","initObject","hasIndicator","lastItem","segmentEndXVal","segmentEndYVal","endPointVector","screenWidth","indicatorIsOutOfScreen","MAX_DISPLAYED_SEGMENTS","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","scaleXFactor","scaleYFactor","segmentIsNotDisplayed","destroySegment","setupSegment","segmentState","pop","segmentInd","lineStartVertex","lineEndVertex","toLocalX","toLocalY","currentScale","toLocalVec","vec","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","TrendBeacon","onStateChange","stopAnimation","animated","animationObject","trendsSegments","DEFAULT_CONFIG","installPluginWidgets","config","onChartReadyHandler","changedPluginsStates","changedState","TrendsMarksPlugin_1","MAX_MARKS_IN_ROW","TrendMarksWidget","marksWidgets","onMarksChange","getTrendsMarksPlugin","marksItems","createMarkWidget","destroyMarkWidget","markWidget","TrendMarkWidget","onZoomFrameHandler","trendMark","markHeight","markWidth","lineHeight","show","markMesh","createMarkMesh","createMarkLine","isTopSide","circleOffset","circleR","circleX","circleY","textOffset","icon","computeLineDistances","lineMaterial","meshMaterial","posX","posY","lineDistancesNeedUpdate","Elastic","easeOut"],"mappings":"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","file":"plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(1));\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar three_chart_1 = __webpack_require__(2);\r\n\tvar TrendsMarksWidget_1 = __webpack_require__(4);\r\n\t(function (TREND_MARK_SIDE) {\r\n\t    TREND_MARK_SIDE[TREND_MARK_SIDE[\"TOP\"] = 0] = \"TOP\";\r\n\t    TREND_MARK_SIDE[TREND_MARK_SIDE[\"BOTTOM\"] = 1] = \"BOTTOM\";\r\n\t})(exports.TREND_MARK_SIDE || (exports.TREND_MARK_SIDE = {}));\r\n\tvar TREND_MARK_SIDE = exports.TREND_MARK_SIDE;\r\n\t(function (EVENTS) {\r\n\t    EVENTS[EVENTS[\"CHANGE\"] = 0] = \"CHANGE\";\r\n\t})(exports.EVENTS || (exports.EVENTS = {}));\r\n\tvar EVENTS = exports.EVENTS;\r\n\tvar AXIS_MARK_DEFAULT_OPTIONS = {\r\n\t    trendName: '',\r\n\t    title: '',\r\n\t    description: '',\r\n\t    descriptionColor: 'rgb(40,136,75)',\r\n\t    value: 0,\r\n\t    iconColor: 'rgb(255, 102, 217)',\r\n\t    orientation: TREND_MARK_SIDE.TOP,\r\n\t    width: 65,\r\n\t    height: 80,\r\n\t    offset: 40,\r\n\t    margin: 20\r\n\t};\r\n\tvar TrendsMarksPlugin = (function (_super) {\r\n\t    __extends(TrendsMarksPlugin, _super);\r\n\t    function TrendsMarksPlugin(trendsMarksPluginOptions) {\r\n\t        _super.call(this, trendsMarksPluginOptions);\r\n\t        this.items = {};\r\n\t        this.rects = {};\r\n\t    }\r\n\t    TrendsMarksPlugin.prototype.onInitialStateApplied = function () {\r\n\t        this.bindEvents();\r\n\t        this.onMarksChangeHandler();\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.onStateChanged = function () {\r\n\t        this.onMarksChangeHandler();\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.getOptions = function () {\r\n\t        return _super.prototype.getOptions.call(this);\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.getItems = function () {\r\n\t        return this.items;\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.getItem = function (markName) {\r\n\t        return this.items[markName];\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.createMark = function (options) {\r\n\t        var marksOptions = this.getOptions().items;\r\n\t        var newMarkOptions = marksOptions.concat([options]);\r\n\t        this.chartState.setState({ pluginsState: (_a = {}, _a[this.name] = { items: newMarkOptions }, _a) });\r\n\t        var _a;\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.onChange = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS[EVENTS.CHANGE], cb);\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.trendsManager.onSegmentsRebuilded(function () { return _this.updateMarksSegments(); });\r\n\t        this.chartState.screen.onZoomFrame(function () { return _this.calclulateMarksPositions(); });\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.onInitialStateAppliedHandler = function () {\r\n\t        this.onMarksChangeHandler();\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.onMarksChangeHandler = function () {\r\n\t        var trendsMarksOptions = this.getOptions().items;\r\n\t        var actualMarksNames = [];\r\n\t        for (var _i = 0, trendsMarksOptions_1 = trendsMarksOptions; _i < trendsMarksOptions_1.length; _i++) {\r\n\t            var options = trendsMarksOptions_1[_i];\r\n\t            var marks = this.items;\r\n\t            // set mark name\r\n\t            if (!options.name) {\r\n\t                options.name = three_chart_1.Utils.getUid().toString();\r\n\t                actualMarksNames.push(options.name);\r\n\t                if (marks[options.name])\r\n\t                    three_chart_1.Utils.error('duplicated mark name ' + options.name);\r\n\t            }\r\n\t            else if (marks[options.name]) {\r\n\t                actualMarksNames.push(options.name);\r\n\t                continue;\r\n\t            }\r\n\t            options = three_chart_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\r\n\t            var mark = new TrendMark(this.chartState, options);\r\n\t            marks[options.name] = mark;\r\n\t        }\r\n\t        // delete not relevant marks\r\n\t        for (var markName in this.items) {\r\n\t            if (actualMarksNames.indexOf(markName) != -1)\r\n\t                continue;\r\n\t            delete this.items[markName];\r\n\t        }\r\n\t        this.updateMarksSegments();\r\n\t        this.ee.emit(EVENTS[EVENTS.CHANGE]);\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.calclulateMarksPositions = function () {\r\n\t        this.rects = {};\r\n\t        for (var markName in this.items) {\r\n\t            this.createMarkRect(this.items[markName]);\r\n\t        }\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.createMarkRect = function (mark) {\r\n\t        if (!mark.segment)\r\n\t            return;\r\n\t        var state = this.chartState;\r\n\t        var options = mark.options;\r\n\t        var width = options.width, height = options.height, offset = options.offset, name = options.name;\r\n\t        var left = state.getPointOnXAxis(mark.xVal) - width / 2;\r\n\t        var top = state.getPointOnYAxis(mark.yVal);\r\n\t        var isTopSideMark = options.orientation == TREND_MARK_SIDE.TOP;\r\n\t        var newOffset;\r\n\t        var row = 0;\r\n\t        if (isTopSideMark) {\r\n\t            top += offset + height;\r\n\t        }\r\n\t        else {\r\n\t            top -= offset;\r\n\t        }\r\n\t        var markRect = [left, top, width, height];\r\n\t        var hasIntersection = false;\r\n\t        do {\r\n\t            for (var markName in this.rects) {\r\n\t                var rect = this.rects[markName];\r\n\t                hasIntersection = three_chart_1.Utils.rectsIntersect(rect, markRect);\r\n\t                if (!hasIntersection)\r\n\t                    continue;\r\n\t                if (isTopSideMark) {\r\n\t                    markRect[1] = rect[1] + markRect[3] + options.margin;\r\n\t                }\r\n\t                else {\r\n\t                    markRect[1] = rect[1] - rect[3] - options.margin;\r\n\t                }\r\n\t                row++;\r\n\t                break;\r\n\t            }\r\n\t        } while (hasIntersection);\r\n\t        if (isTopSideMark) {\r\n\t            newOffset = markRect[1] - markRect[3] - state.getPointOnYAxis(mark.yVal);\r\n\t        }\r\n\t        else {\r\n\t            newOffset = state.getPointOnYAxis(mark.yVal) - markRect[1];\r\n\t        }\r\n\t        mark._setOffset(newOffset);\r\n\t        mark._setRow(row);\r\n\t        this.rects[name] = markRect;\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.updateMarksSegments = function () {\r\n\t        var chartState = this.chartState;\r\n\t        var trends = chartState.trendsManager.trends;\r\n\t        for (var trendName in trends) {\r\n\t            var marks = this.getTrendMarks(trendName);\r\n\t            var marksArr = [];\r\n\t            var xVals = [];\r\n\t            for (var markName in marks) {\r\n\t                var mark = marks[markName];\r\n\t                xVals.push(mark.options.value);\r\n\t                marksArr.push(mark);\r\n\t                mark._setSegment(null);\r\n\t            }\r\n\t            marksArr.sort(function (a, b) { return a.options.value - b.options.value; });\r\n\t            var trend = chartState.getTrend(trendName);\r\n\t            var points = trend.segments.getSegmentsForXValues(xVals.sort(function (a, b) { return a - b; }));\r\n\t            for (var markInd = 0; markInd < marksArr.length; markInd++) {\r\n\t                marksArr[markInd]._setSegment(points[markInd]);\r\n\t            }\r\n\t        }\r\n\t        this.calclulateMarksPositions();\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.getTrendMarks = function (trendName) {\r\n\t        var trendMarks = [];\r\n\t        for (var markName in this.items) {\r\n\t            if (this.items[markName].options.trendName != trendName)\r\n\t                continue;\r\n\t            trendMarks.push(this.items[markName]);\r\n\t        }\r\n\t        return trendMarks;\r\n\t    };\r\n\t    TrendsMarksPlugin.NAME = 'TrendsMarks';\r\n\t    TrendsMarksPlugin.pluginWidgets = [TrendsMarksWidget_1.TrendsMarksWidget];\r\n\t    return TrendsMarksPlugin;\r\n\t}(three_chart_1.ChartPlugin));\r\n\texports.TrendsMarksPlugin = TrendsMarksPlugin;\r\n\tvar TrendMark = (function () {\r\n\t    function TrendMark(chartState, options) {\r\n\t        this.row = 0;\r\n\t        this.options = options;\r\n\t        this.chartState = chartState;\r\n\t    }\r\n\t    /**\r\n\t     * only for internal usage\r\n\t     */\r\n\t    TrendMark.prototype._setSegment = function (segment) {\r\n\t        this.segment = segment;\r\n\t        if (!segment)\r\n\t            return;\r\n\t        var trend = this.chartState.getTrend(this.options.trendName);\r\n\t        if (trend.getOptions().type == three_chart_1.TREND_TYPE.LINE) {\r\n\t            this.xVal = segment.endXVal;\r\n\t            this.yVal = segment.endYVal;\r\n\t        }\r\n\t        else if (this.options.orientation == TREND_MARK_SIDE.TOP) {\r\n\t            this.xVal = segment.xVal;\r\n\t            this.yVal = segment.maxYVal;\r\n\t        }\r\n\t        else {\r\n\t            this.xVal = segment.xVal;\r\n\t            this.yVal = segment.minYVal;\r\n\t        }\r\n\t    };\r\n\t    TrendMark.prototype._setOffset = function (offset) {\r\n\t        this.offset = offset;\r\n\t    };\r\n\t    TrendMark.prototype._setRow = function (row) {\r\n\t        this.row = row;\r\n\t    };\r\n\t    return TrendMark;\r\n\t}());\r\n\texports.TrendMark = TrendMark;\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(3)\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t    if (true) module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"ThreeChart\"] = factory(); else root[\"ThreeChart\"] = factory();\n\t})(this, function() {\n\t    return function(modules) {\n\t        var installedModules = {};\n\t        function __webpack_require__(moduleId) {\n\t            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n\t            var module = installedModules[moduleId] = {\n\t                exports: {},\n\t                id: moduleId,\n\t                loaded: false\n\t            };\n\t            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t            module.loaded = true;\n\t            return module.exports;\n\t        }\n\t        __webpack_require__.m = modules;\n\t        __webpack_require__.c = installedModules;\n\t        __webpack_require__.p = \"\";\n\t        return __webpack_require__(0);\n\t    }([ function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(1));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(2));\n\t        __export(__webpack_require__(21));\n\t        __export(__webpack_require__(20));\n\t        __export(__webpack_require__(19));\n\t        __export(__webpack_require__(12));\n\t        __export(__webpack_require__(17));\n\t        __export(__webpack_require__(18));\n\t        __export(__webpack_require__(16));\n\t        __export(__webpack_require__(14));\n\t        __export(__webpack_require__(15));\n\t        __export(__webpack_require__(33));\n\t        __export(__webpack_require__(25));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        __webpack_require__(3);\n\t        var PerspectiveCamera = THREE.PerspectiveCamera;\n\t        var State_1 = __webpack_require__(12);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var AxisWidget_1 = __webpack_require__(22);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var TrendsLoadingWidget_1 = __webpack_require__(24);\n\t        var AxisMarksWidget_1 = __webpack_require__(26);\n\t        var BorderWidget_1 = __webpack_require__(27);\n\t        var TrendsIndicatorWidget_1 = __webpack_require__(28);\n\t        var TrendsLineWidget_1 = __webpack_require__(29);\n\t        var TrendsCandleWidget_1 = __webpack_require__(30);\n\t        var TrendsBeaconWidget_1 = __webpack_require__(31);\n\t        var deps_1 = __webpack_require__(32);\n\t        exports.MAX_DATA_LENGTH = 2692e3;\n\t        var Chart = function() {\n\t            function Chart(state, $container, plugins) {\n\t                var _this = this;\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.widgets = [];\n\t                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n\t                if (!$container) {\n\t                    Utils_1.Utils.error(\"$el must be set\");\n\t                }\n\t                var style = getComputedStyle($container);\n\t                state.width = parseInt(style.width);\n\t                state.height = parseInt(style.height);\n\t                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n\t                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n\t                    return _this.zoom(zoomValue, origin);\n\t                }, 200);\n\t                this.$container = $container;\n\t                this.init($container);\n\t            }\n\t            Chart.installWidget = function(Widget) {\n\t                if (!Widget.widgetName) {\n\t                    Utils_1.Utils.error(\"unnamed widget\");\n\t                }\n\t                this.installedWidgets[Widget.widgetName] = Widget;\n\t            };\n\t            Chart.prototype.init = function($container) {\n\t                var state = this.state;\n\t                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n\t                this.scene = new THREE.Scene();\n\t                this.isStopped = !autoRender.enabled;\n\t                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n\t                    antialias: true,\n\t                    alpha: true\n\t                });\n\t                renderer.setPixelRatio(Chart.devicePixelRatio);\n\t                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n\t                renderer.setSize(w, h);\n\t                $container.appendChild(renderer.domElement);\n\t                this.$el = renderer.domElement;\n\t                this.$el.style.display = \"block\";\n\t                if (showStats) {\n\t                    this.stats = new Stats();\n\t                    $container.appendChild(this.stats.domElement);\n\t                }\n\t                this.setupCamera();\n\t                var widgetsClasses = this.state.widgetsClasses;\n\t                for (var widgetName in widgetsClasses) {\n\t                    var widgetOptions = this.state.data.widgets[widgetName];\n\t                    if (!widgetOptions.enabled) continue;\n\t                    var WidgetConstructor = widgetsClasses[widgetName];\n\t                    var widget = new WidgetConstructor(this.state);\n\t                    this.scene.add(widget.getObject3D());\n\t                    this.widgets.push(widget);\n\t                }\n\t                this.bindEvents();\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.renderLoop = function() {\n\t                var _this = this;\n\t                if (this.isDestroyed) return;\n\t                this.stats && this.stats.begin();\n\t                this.render();\n\t                if (this.isStopped) return;\n\t                var fpsLimit = this.state.data.autoRender.fps;\n\t                if (fpsLimit) {\n\t                    var delay = 1e3 / fpsLimit;\n\t                    setTimeout(function() {\n\t                        return requestAnimationFrame(function() {\n\t                            return _this.renderLoop();\n\t                        });\n\t                    }, delay);\n\t                } else {\n\t                    requestAnimationFrame(function() {\n\t                        return _this.renderLoop();\n\t                    });\n\t                }\n\t                this.stats && this.stats.end();\n\t            };\n\t            Chart.prototype.render = function() {\n\t                this.renderer.render(this.scene, this.camera);\n\t            };\n\t            Chart.prototype.stop = function() {\n\t                this.isStopped = true;\n\t            };\n\t            Chart.prototype.run = function() {\n\t                this.isStopped = false;\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.destroy = function() {\n\t                this.isDestroyed = true;\n\t                this.stop();\n\t                this.state.destroy();\n\t                this.unbindEvents();\n\t                try {\n\t                    this.renderer.forceContextLoss();\n\t                } catch (wtf) {}\n\t                this.renderer.context = null;\n\t                this.renderer.domElement = null;\n\t                this.renderer = null;\n\t            };\n\t            Chart.prototype.getState = function() {\n\t                return this.state.data;\n\t            };\n\t            Chart.prototype.getTrend = function(trendName) {\n\t                return this.state.getTrend(trendName);\n\t            };\n\t            Chart.prototype.setState = function(state) {\n\t                return this.state.setState(state);\n\t            };\n\t            Chart.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var $el = this.$el;\n\t                if (this.state.data.controls.enabled) {\n\t                    $el.addEventListener(\"mousewheel\", function(ev) {\n\t                        _this.onMouseWheel(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousemove\", function(ev) {\n\t                        _this.onMouseMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousedown\", function(ev) {\n\t                        return _this.onMouseDown(ev);\n\t                    });\n\t                    $el.addEventListener(\"mouseup\", function(ev) {\n\t                        return _this.onMouseUp(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchmove\", function(ev) {\n\t                        _this.onTouchMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchend\", function(ev) {\n\t                        _this.onTouchEnd(ev);\n\t                    });\n\t                }\n\t                if (this.state.data.autoResize) {\n\t                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n\t                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n\t                    });\n\t                }\n\t                this.unsubscribers = [ this.state.onTrendsChange(function() {\n\t                    return _this.autoscroll();\n\t                }), this.state.screen.onTransformationFrame(function(options) {\n\t                    return _this.onScreenTransformHandler(options);\n\t                }), this.state.onResize(function(options) {\n\t                    return _this.onChartResize();\n\t                }) ];\n\t            };\n\t            Chart.prototype.unbindEvents = function() {\n\t                try {\n\t                    this.resizeSensor && this.resizeSensor.detach();\n\t                } catch (e) {}\n\t                this.$el.remove();\n\t                this.unsubscribers.forEach(function(unsubscribe) {\n\t                    return unsubscribe();\n\t                });\n\t            };\n\t            Chart.prototype.setupCamera = function() {\n\t                var camSettings = this.state.screen.getCameraSettings();\n\t                if (!this.camera) {\n\t                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t                    this.scene.add(this.camera);\n\t                } else {\n\t                    this.camera.fov = camSettings.FOV;\n\t                    this.camera.aspect = camSettings.aspect;\n\t                    this.camera.far = camSettings.far;\n\t                    this.camera.near = camSettings.near;\n\t                    this.camera.updateProjectionMatrix();\n\t                }\n\t                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t                this.cameraInitialPosition = this.camera.position.clone();\n\t                this.onScreenTransformHandler(this.state.screen.options);\n\t            };\n\t            Chart.prototype.onScreenTransformHandler = function(options) {\n\t                if (options.scrollX != void 0) {\n\t                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n\t                    this.camera.position.setX(scrollX_1);\n\t                }\n\t                if (options.scrollY != void 0) {\n\t                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n\t                    this.camera.position.setY(scrollY_1);\n\t                }\n\t            };\n\t            Chart.prototype.autoscroll = function() {\n\t                var state = this.state;\n\t                if (!state.data.autoScroll) return;\n\t                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n\t                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n\t                if (trendsMaxXDelta > 0) {\n\t                    var maxVisibleX = this.state.screen.getScreenRightVal();\n\t                    var paddingRightX = this.state.getPaddingRight();\n\t                    var currentScroll = state.data.xAxis.range.scroll;\n\t                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t                        return;\n\t                    }\n\t                    var scrollDelta = trendsMaxXDelta;\n\t                    this.setState({\n\t                        xAxis: {\n\t                            range: {\n\t                                scroll: currentScroll + scrollDelta\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onScrollStop = function() {};\n\t            Chart.prototype.onMouseDown = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.clientX,\n\t                        y: ev.clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseUp = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseMove = function(ev) {\n\t                if (this.state.data.cursor.dragMode) {\n\t                    this.setState({\n\t                        cursor: {\n\t                            dragMode: true,\n\t                            x: ev.clientX,\n\t                            y: ev.clientY\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onMouseWheel = function(ev) {\n\t                ev.stopPropagation();\n\t                ev.preventDefault();\n\t                var zoomOrigin = ev.layerX / this.state.data.width;\n\t                var zoomValue = 1 + ev.wheelDeltaY * .001;\n\t                this.zoom(zoomValue, zoomOrigin);\n\t            };\n\t            Chart.prototype.onTouchMove = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.touches[0].clientX,\n\t                        y: ev.touches[0].clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onTouchEnd = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n\t                this.setState({\n\t                    width: width,\n\t                    height: height\n\t                });\n\t            };\n\t            Chart.prototype.onChartResize = function() {\n\t                var _a = this.state.data, width = _a.width, height = _a.height;\n\t                this.renderer.setSize(width, height);\n\t                this.setupCamera();\n\t            };\n\t            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n\t                var _this = this;\n\t                var MAX_ZOOM_VALUE = 1.5;\n\t                var MIN_ZOOM_VALUE = .7;\n\t                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t                var autoScrollIsEnabled = this.state.data.autoScroll;\n\t                if (autoScrollIsEnabled) this.state.setState({\n\t                    autoScroll: false\n\t                });\n\t                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n\t                    if (autoScrollIsEnabled) _this.setState({\n\t                        autoScroll: true\n\t                    });\n\t                });\n\t            };\n\t            Chart.createPreviewChart = function(userOptions, $el) {\n\t                var previewChartOptions = {\n\t                    animations: {\n\t                        enabled: false\n\t                    },\n\t                    widgets: {\n\t                        Grid: {\n\t                            enabled: false\n\t                        },\n\t                        Axis: {\n\t                            enabled: false\n\t                        },\n\t                        TrendsGradient: {\n\t                            enabled: false\n\t                        }\n\t                    }\n\t                };\n\t                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n\t                return new Chart(options, $el);\n\t            };\n\t            Chart.devicePixelRatio = window.devicePixelRatio;\n\t            Chart.installedWidgets = {};\n\t            Chart.renderers = {\n\t                CanvasRenderer: THREE.CanvasRenderer,\n\t                WebGLRenderer: THREE.WebGLRenderer\n\t            };\n\t            return Chart;\n\t        }();\n\t        exports.Chart = Chart;\n\t        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n\t        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n\t        Chart.installWidget(AxisWidget_1.AxisWidget);\n\t        Chart.installWidget(GridWidget_1.GridWidget);\n\t        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n\t        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n\t        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n\t        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n\t        Chart.installWidget(BorderWidget_1.BorderWidget);\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        window.TweenLite = TweenMax;\n\t        window.Stats = __webpack_require__(4);\n\t        __webpack_require__(5);\n\t        __webpack_require__(6);\n\t        exports.isPlainObject = __webpack_require__(7);\n\t        exports.EE2 = __webpack_require__(9);\n\t        var es6_promise_1 = __webpack_require__(10);\n\t        exports.Promise = es6_promise_1.Promise;\n\t        exports.ResizeSensor = __webpack_require__(11);\n\t    }, function(module, exports) {\n\t        var Stats = function() {\n\t            function h(a) {\n\t                c.appendChild(a.dom);\n\t                return a;\n\t            }\n\t            function k(a) {\n\t                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n\t                l = a;\n\t            }\n\t            var l = 0, c = document.createElement(\"div\");\n\t            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n\t            c.addEventListener(\"click\", function(a) {\n\t                a.preventDefault();\n\t                k(++l % c.children.length);\n\t            }, !1);\n\t            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n\t            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n\t            k(0);\n\t            return {\n\t                REVISION: 16,\n\t                dom: c,\n\t                addPanel: h,\n\t                showPanel: k,\n\t                begin: function() {\n\t                    g = (performance || Date).now();\n\t                },\n\t                end: function() {\n\t                    a++;\n\t                    var c = (performance || Date).now();\n\t                    f.update(c - g, 200);\n\t                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n\t                        var d = performance.memory;\n\t                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n\t                    }\n\t                    return c;\n\t                },\n\t                update: function() {\n\t                    g = this.end();\n\t                },\n\t                domElement: c,\n\t                setMode: k\n\t            };\n\t        };\n\t        Stats.Panel = function(h, k, l) {\n\t            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n\t            q.width = r;\n\t            q.height = f;\n\t            q.style.cssText = \"width:80px;height:48px\";\n\t            var b = q.getContext(\"2d\");\n\t            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n\t            b.textBaseline = \"top\";\n\t            b.fillStyle = l;\n\t            b.fillRect(0, 0, r, f);\n\t            b.fillStyle = k;\n\t            b.fillText(h, t, u);\n\t            b.fillRect(d, m, n, p);\n\t            b.fillStyle = l;\n\t            b.globalAlpha = .9;\n\t            b.fillRect(d, m, n, p);\n\t            return {\n\t                dom: q,\n\t                update: function(f, v) {\n\t                    c = Math.min(c, f);\n\t                    g = Math.max(g, f);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = 1;\n\t                    b.fillRect(0, 0, r, m);\n\t                    b.fillStyle = k;\n\t                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n\t                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n\t                    b.fillRect(d + n - a, m, a, p);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = .9;\n\t                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n\t                }\n\t            };\n\t        };\n\t        \"object\" === typeof module && (module.exports = Stats);\n\t    }, function(module, exports) {\n\t        THREE.SpriteCanvasMaterial = function(parameters) {\n\t            THREE.Material.call(this);\n\t            this.type = \"SpriteCanvasMaterial\";\n\t            this.color = new THREE.Color(16777215);\n\t            this.program = function(context, color) {};\n\t            this.setValues(parameters);\n\t        };\n\t        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n\t        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n\t            var material = new THREE.SpriteCanvasMaterial();\n\t            material.copy(this);\n\t            material.color.copy(this.color);\n\t            material.program = this.program;\n\t            return material;\n\t        };\n\t        THREE.CanvasRenderer = function(parameters) {\n\t            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n\t            parameters = parameters || {};\n\t            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n\t                alpha: parameters.alpha === true\n\t            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n\t            if (_context.setLineDash === undefined) {\n\t                _context.setLineDash = function() {};\n\t            }\n\t            this.domElement = _canvas;\n\t            this.autoClear = true;\n\t            this.sortObjects = true;\n\t            this.sortElements = true;\n\t            this.info = {\n\t                render: {\n\t                    vertices: 0,\n\t                    faces: 0\n\t                }\n\t            };\n\t            this.supportsVertexTextures = function() {};\n\t            this.setFaceCulling = function() {};\n\t            this.getContext = function() {\n\t                return _context;\n\t            };\n\t            this.getContextAttributes = function() {\n\t                return _context.getContextAttributes();\n\t            };\n\t            this.getPixelRatio = function() {\n\t                return _pixelRatio;\n\t            };\n\t            this.setPixelRatio = function(value) {\n\t                if (value !== undefined) _pixelRatio = value;\n\t            };\n\t            this.setSize = function(width, height, updateStyle) {\n\t                _canvasWidth = width * _pixelRatio;\n\t                _canvasHeight = height * _pixelRatio;\n\t                _canvas.width = _canvasWidth;\n\t                _canvas.height = _canvasHeight;\n\t                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n\t                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n\t                if (updateStyle !== false) {\n\t                    _canvas.style.width = width + \"px\";\n\t                    _canvas.style.height = height + \"px\";\n\t                }\n\t                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _contextGlobalAlpha = 1;\n\t                _contextGlobalCompositeOperation = 0;\n\t                _contextStrokeStyle = null;\n\t                _contextFillStyle = null;\n\t                _contextLineWidth = null;\n\t                _contextLineCap = null;\n\t                _contextLineJoin = null;\n\t                this.setViewport(0, 0, width, height);\n\t            };\n\t            this.setViewport = function(x, y, width, height) {\n\t                _viewportX = x * _pixelRatio;\n\t                _viewportY = y * _pixelRatio;\n\t                _viewportWidth = width * _pixelRatio;\n\t                _viewportHeight = height * _pixelRatio;\n\t            };\n\t            this.setScissor = function() {};\n\t            this.setScissorTest = function() {};\n\t            this.setClearColor = function(color, alpha) {\n\t                _clearColor.set(color);\n\t                _clearAlpha = alpha !== undefined ? alpha : 1;\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t            };\n\t            this.setClearColorHex = function(hex, alpha) {\n\t                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n\t                this.setClearColor(hex, alpha);\n\t            };\n\t            this.getClearColor = function() {\n\t                return _clearColor;\n\t            };\n\t            this.getClearAlpha = function() {\n\t                return _clearAlpha;\n\t            };\n\t            this.getMaxAnisotropy = function() {\n\t                return 0;\n\t            };\n\t            this.clear = function() {\n\t                if (_clearBox.isEmpty() === false) {\n\t                    _clearBox.intersect(_clipBox);\n\t                    _clearBox.expandByScalar(2);\n\t                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n\t                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n\t                    if (_clearAlpha < 1) {\n\t                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    if (_clearAlpha > 0) {\n\t                        setBlending(THREE.NormalBlending);\n\t                        setOpacity(1);\n\t                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n\t                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    _clearBox.makeEmpty();\n\t                }\n\t            };\n\t            this.clearColor = function() {};\n\t            this.clearDepth = function() {};\n\t            this.clearStencil = function() {};\n\t            this.render = function(scene, camera) {\n\t                if (camera instanceof THREE.Camera === false) {\n\t                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n\t                    return;\n\t                }\n\t                if (this.autoClear === true) this.clear();\n\t                _this.info.render.vertices = 0;\n\t                _this.info.render.faces = 0;\n\t                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n\t                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n\t                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n\t                _elements = _renderData.elements;\n\t                _lights = _renderData.lights;\n\t                _camera = camera;\n\t                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\t                calculateLights();\n\t                for (var e = 0, el = _elements.length; e < el; e++) {\n\t                    var element = _elements[e];\n\t                    var material = element.material;\n\t                    if (material === undefined || material.opacity === 0) continue;\n\t                    _elemBox.makeEmpty();\n\t                    if (element instanceof THREE.RenderableSprite) {\n\t                        _v1 = element;\n\t                        _v1.x *= _canvasWidthHalf;\n\t                        _v1.y *= _canvasHeightHalf;\n\t                        renderSprite(_v1, element, material);\n\t                    } else if (element instanceof THREE.RenderableLine) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderLine(_v1, _v2, element, material);\n\t                        }\n\t                    } else if (element instanceof THREE.RenderableFace) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v3 = element.v3;\n\t                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n\t                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n\t                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _v3.positionScreen.x *= _canvasWidthHalf;\n\t                        _v3.positionScreen.y *= _canvasHeightHalf;\n\t                        if (material.overdraw > 0) {\n\t                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n\t                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n\t                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n\t                        }\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n\t                        }\n\t                    }\n\t                    _clearBox.union(_elemBox);\n\t                }\n\t                _context.setTransform(1, 0, 0, 1, 0, 0);\n\t            };\n\t            function calculateLights() {\n\t                _ambientLight.setRGB(0, 0, 0);\n\t                _directionalLights.setRGB(0, 0, 0);\n\t                _pointLights.setRGB(0, 0, 0);\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    var lightColor = light.color;\n\t                    if (light instanceof THREE.AmbientLight) {\n\t                        _ambientLight.add(lightColor);\n\t                    } else if (light instanceof THREE.DirectionalLight) {\n\t                        _directionalLights.add(lightColor);\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        _pointLights.add(lightColor);\n\t                    }\n\t                }\n\t            }\n\t            function calculateLight(position, normal, color) {\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    _lightColor.copy(light.color);\n\t                    if (light instanceof THREE.DirectionalLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\t                        var amount = normal.dot(lightPosition);\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\t                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n\t                        if (amount == 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    }\n\t                }\n\t            }\n\t            function renderSprite(v1, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                var scaleX = element.scale.x * _canvasWidthHalf;\n\t                var scaleY = element.scale.y * _canvasHeightHalf;\n\t                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n\t                _elemBox.min.set(v1.x - dist, v1.y - dist);\n\t                _elemBox.max.set(v1.x + dist, v1.y + dist);\n\t                if (material instanceof THREE.SpriteMaterial) {\n\t                    var texture = material.map;\n\t                    if (texture !== null) {\n\t                        var pattern = _patterns[texture.id];\n\t                        if (pattern === undefined || pattern.version !== texture.version) {\n\t                            pattern = textureToPattern(texture);\n\t                            _patterns[texture.id] = pattern;\n\t                        }\n\t                        if (pattern.canvas !== undefined) {\n\t                            setFillStyle(pattern.canvas);\n\t                            var bitmap = texture.image;\n\t                            var ox = bitmap.width * texture.offset.x;\n\t                            var oy = bitmap.height * texture.offset.y;\n\t                            var sx = bitmap.width * texture.repeat.x;\n\t                            var sy = bitmap.height * texture.repeat.y;\n\t                            var cx = scaleX / sx;\n\t                            var cy = scaleY / sy;\n\t                            _context.save();\n\t                            _context.translate(v1.x, v1.y);\n\t                            if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                            _context.translate(-scaleX / 2, -scaleY / 2);\n\t                            _context.scale(cx, cy);\n\t                            _context.translate(-ox, -oy);\n\t                            _context.fillRect(ox, oy, sx, sy);\n\t                            _context.restore();\n\t                        }\n\t                    } else {\n\t                        setFillStyle(material.color.getStyle());\n\t                        _context.save();\n\t                        _context.translate(v1.x, v1.y);\n\t                        if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                        _context.scale(scaleX, -scaleY);\n\t                        _context.fillRect(-.5, -.5, 1, 1);\n\t                        _context.restore();\n\t                    }\n\t                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setFillStyle(material.color.getStyle());\n\t                    _context.save();\n\t                    _context.translate(v1.x, v1.y);\n\t                    if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                    _context.scale(scaleX, scaleY);\n\t                    material.program(_context);\n\t                    _context.restore();\n\t                }\n\t            }\n\t            function renderLine(v1, v2, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _context.beginPath();\n\t                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n\t                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n\t                if (material instanceof THREE.LineBasicMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    if (material.vertexColors !== THREE.VertexColors) {\n\t                        setStrokeStyle(material.color.getStyle());\n\t                    } else {\n\t                        var colorStyle1 = element.vertexColors[0].getStyle();\n\t                        var colorStyle2 = element.vertexColors[1].getStyle();\n\t                        if (colorStyle1 === colorStyle2) {\n\t                            setStrokeStyle(colorStyle1);\n\t                        } else {\n\t                            try {\n\t                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n\t                                grad.addColorStop(0, colorStyle1);\n\t                                grad.addColorStop(1, colorStyle2);\n\t                            } catch (exception) {\n\t                                grad = colorStyle1;\n\t                            }\n\t                            setStrokeStyle(grad);\n\t                        }\n\t                    }\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                } else if (material instanceof THREE.LineDashedMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setLineDash([ material.dashSize, material.gapSize ]);\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                    setLineDash([]);\n\t                }\n\t            }\n\t            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n\t                _this.info.render.vertices += 3;\n\t                _this.info.render.faces++;\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _v1x = v1.positionScreen.x;\n\t                _v1y = v1.positionScreen.y;\n\t                _v2x = v2.positionScreen.x;\n\t                _v2y = v2.positionScreen.y;\n\t                _v3x = v3.positionScreen.x;\n\t                _v3y = v3.positionScreen.y;\n\t                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n\t                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n\t                    _diffuseColor.copy(material.color);\n\t                    _emissiveColor.copy(material.emissive);\n\t                    if (material.vertexColors === THREE.FaceColors) {\n\t                        _diffuseColor.multiply(element.color);\n\t                    }\n\t                    _color.copy(_ambientLight);\n\t                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\t                    calculateLight(_centroid, element.normalModel, _color);\n\t                    _color.multiply(_diffuseColor).add(_emissiveColor);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n\t                    if (material.map !== null) {\n\t                        var mapping = material.map.mapping;\n\t                        if (mapping === THREE.UVMapping) {\n\t                            _uvs = element.uvs;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n\t                        }\n\t                    } else if (material.envMap !== null) {\n\t                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n\t                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n\t                            _uv1x = .5 * _normal.x + .5;\n\t                            _uv1y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n\t                            _uv2x = .5 * _normal.x + .5;\n\t                            _uv2y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n\t                            _uv3x = .5 * _normal.x + .5;\n\t                            _uv3y = .5 * _normal.y + .5;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n\t                        }\n\t                    } else {\n\t                        _color.copy(material.color);\n\t                        if (material.vertexColors === THREE.FaceColors) {\n\t                            _color.multiply(element.color);\n\t                        }\n\t                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                    }\n\t                } else if (material instanceof THREE.MeshNormalMaterial) {\n\t                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n\t                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else {\n\t                    _color.setRGB(1, 1, 1);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                }\n\t            }\n\t            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n\t                _context.beginPath();\n\t                _context.moveTo(x0, y0);\n\t                _context.lineTo(x1, y1);\n\t                _context.lineTo(x2, y2);\n\t                _context.closePath();\n\t            }\n\t            function strokePath(color, linewidth, linecap, linejoin) {\n\t                setLineWidth(linewidth);\n\t                setLineCap(linecap);\n\t                setLineJoin(linejoin);\n\t                setStrokeStyle(color.getStyle());\n\t                _context.stroke();\n\t                _elemBox.expandByScalar(linewidth * 2);\n\t            }\n\t            function fillPath(color) {\n\t                setFillStyle(color.getStyle());\n\t                _context.fill();\n\t            }\n\t            function textureToPattern(texture) {\n\t                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: texture.version\n\t                    };\n\t                }\n\t                var image = texture.image;\n\t                if (image.complete === false) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: 0\n\t                    };\n\t                }\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = image.width;\n\t                canvas.height = image.height;\n\t                var context = canvas.getContext(\"2d\");\n\t                context.setTransform(1, 0, 0, -1, 0, image.height);\n\t                context.drawImage(image, 0, 0);\n\t                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t                var repeat = \"no-repeat\";\n\t                if (repeatX === true && repeatY === true) {\n\t                    repeat = \"repeat\";\n\t                } else if (repeatX === true) {\n\t                    repeat = \"repeat-x\";\n\t                } else if (repeatY === true) {\n\t                    repeat = \"repeat-y\";\n\t                }\n\t                var pattern = _context.createPattern(canvas, repeat);\n\t                if (texture.onUpdate) texture.onUpdate(texture);\n\t                return {\n\t                    canvas: pattern,\n\t                    version: texture.version\n\t                };\n\t            }\n\t            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n\t                var pattern = _patterns[texture.id];\n\t                if (pattern === undefined || pattern.version !== texture.version) {\n\t                    pattern = textureToPattern(texture);\n\t                    _patterns[texture.id] = pattern;\n\t                }\n\t                if (pattern.canvas !== undefined) {\n\t                    setFillStyle(pattern.canvas);\n\t                } else {\n\t                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n\t                    _context.fill();\n\t                    return;\n\t                }\n\t                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n\t                u0 = (u0 + offsetX) * width;\n\t                v0 = (v0 + offsetY) * height;\n\t                u1 = (u1 + offsetX) * width;\n\t                v1 = (v1 + offsetY) * height;\n\t                u2 = (u2 + offsetX) * width;\n\t                v2 = (v2 + offsetY) * height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                if (det === 0) return;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.fill();\n\t                _context.restore();\n\t            }\n\t            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n\t                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n\t                u0 *= width;\n\t                v0 *= height;\n\t                u1 *= width;\n\t                v1 *= height;\n\t                u2 *= width;\n\t                v2 *= height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.clip();\n\t                _context.drawImage(image, 0, 0);\n\t                _context.restore();\n\t            }\n\t            function expand(v1, v2, pixels) {\n\t                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n\t                if (det === 0) return;\n\t                idet = pixels / Math.sqrt(det);\n\t                x *= idet;\n\t                y *= idet;\n\t                v2.x += x;\n\t                v2.y += y;\n\t                v1.x -= x;\n\t                v1.y -= y;\n\t            }\n\t            function setOpacity(value) {\n\t                if (_contextGlobalAlpha !== value) {\n\t                    _context.globalAlpha = value;\n\t                    _contextGlobalAlpha = value;\n\t                }\n\t            }\n\t            function setBlending(value) {\n\t                if (_contextGlobalCompositeOperation !== value) {\n\t                    if (value === THREE.NormalBlending) {\n\t                        _context.globalCompositeOperation = \"source-over\";\n\t                    } else if (value === THREE.AdditiveBlending) {\n\t                        _context.globalCompositeOperation = \"lighter\";\n\t                    } else if (value === THREE.SubtractiveBlending) {\n\t                        _context.globalCompositeOperation = \"darker\";\n\t                    }\n\t                    _contextGlobalCompositeOperation = value;\n\t                }\n\t            }\n\t            function setLineWidth(value) {\n\t                if (_contextLineWidth !== value) {\n\t                    _context.lineWidth = value;\n\t                    _contextLineWidth = value;\n\t                }\n\t            }\n\t            function setLineCap(value) {\n\t                if (_contextLineCap !== value) {\n\t                    _context.lineCap = value;\n\t                    _contextLineCap = value;\n\t                }\n\t            }\n\t            function setLineJoin(value) {\n\t                if (_contextLineJoin !== value) {\n\t                    _context.lineJoin = value;\n\t                    _contextLineJoin = value;\n\t                }\n\t            }\n\t            function setStrokeStyle(value) {\n\t                if (_contextStrokeStyle !== value) {\n\t                    _context.strokeStyle = value;\n\t                    _contextStrokeStyle = value;\n\t                }\n\t            }\n\t            function setFillStyle(value) {\n\t                if (_contextFillStyle !== value) {\n\t                    _context.fillStyle = value;\n\t                    _contextFillStyle = value;\n\t                }\n\t            }\n\t            function setLineDash(value) {\n\t                if (_contextLineDash.length !== value.length) {\n\t                    _context.setLineDash(value);\n\t                    _contextLineDash = value;\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports) {\n\t        THREE.RenderableObject = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableFace = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.v3 = new THREE.RenderableVertex();\n\t            this.normalModel = new THREE.Vector3();\n\t            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t            this.vertexNormalsLength = 0;\n\t            this.color = new THREE.Color();\n\t            this.material = null;\n\t            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableVertex = function() {\n\t            this.position = new THREE.Vector3();\n\t            this.positionWorld = new THREE.Vector3();\n\t            this.positionScreen = new THREE.Vector4();\n\t            this.visible = true;\n\t        };\n\t        THREE.RenderableVertex.prototype.copy = function(vertex) {\n\t            this.positionWorld.copy(vertex.positionWorld);\n\t            this.positionScreen.copy(vertex.positionScreen);\n\t        };\n\t        THREE.RenderableLine = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t            this.material = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableSprite = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.x = 0;\n\t            this.y = 0;\n\t            this.z = 0;\n\t            this.rotation = 0;\n\t            this.scale = new THREE.Vector2();\n\t            this.material = null;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.Projector = function() {\n\t            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n\t                objects: [],\n\t                lights: [],\n\t                elements: []\n\t            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n\t            this.projectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n\t                vector.project(camera);\n\t            };\n\t            this.unprojectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n\t                vector.unproject(camera);\n\t            };\n\t            this.pickingRay = function(vector, camera) {\n\t                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n\t            };\n\t            var RenderList = function() {\n\t                var normals = [];\n\t                var uvs = [];\n\t                var object = null;\n\t                var material = null;\n\t                var normalMatrix = new THREE.Matrix3();\n\t                function setObject(value) {\n\t                    object = value;\n\t                    material = object.material;\n\t                    normalMatrix.getNormalMatrix(object.matrixWorld);\n\t                    normals.length = 0;\n\t                    uvs.length = 0;\n\t                }\n\t                function projectVertex(vertex) {\n\t                    var position = vertex.position;\n\t                    var positionWorld = vertex.positionWorld;\n\t                    var positionScreen = vertex.positionScreen;\n\t                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n\t                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n\t                    var invW = 1 / positionScreen.w;\n\t                    positionScreen.x *= invW;\n\t                    positionScreen.y *= invW;\n\t                    positionScreen.z *= invW;\n\t                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n\t                }\n\t                function pushVertex(x, y, z) {\n\t                    _vertex = getNextVertexInPool();\n\t                    _vertex.position.set(x, y, z);\n\t                    projectVertex(_vertex);\n\t                }\n\t                function pushNormal(x, y, z) {\n\t                    normals.push(x, y, z);\n\t                }\n\t                function pushUv(x, y) {\n\t                    uvs.push(x, y);\n\t                }\n\t                function checkTriangleVisibility(v1, v2, v3) {\n\t                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n\t                    _points3[0] = v1.positionScreen;\n\t                    _points3[1] = v2.positionScreen;\n\t                    _points3[2] = v3.positionScreen;\n\t                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n\t                }\n\t                function checkBackfaceCulling(v1, v2, v3) {\n\t                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n\t                }\n\t                function pushLine(a, b) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    _line = getNextLineInPool();\n\t                    _line.id = object.id;\n\t                    _line.v1.copy(v1);\n\t                    _line.v2.copy(v2);\n\t                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n\t                    _line.renderOrder = object.renderOrder;\n\t                    _line.material = object.material;\n\t                    _renderData.elements.push(_line);\n\t                }\n\t                function pushTriangle(a, b, c) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    var v3 = _vertexPool[c];\n\t                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\t                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n\t                        _face = getNextFaceInPool();\n\t                        _face.id = object.id;\n\t                        _face.v1.copy(v1);\n\t                        _face.v2.copy(v2);\n\t                        _face.v3.copy(v3);\n\t                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                        _face.renderOrder = object.renderOrder;\n\t                        _face.normalModel.fromArray(normals, a * 3);\n\t                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\t                        for (var i = 0; i < 3; i++) {\n\t                            var normal = _face.vertexNormalsModel[i];\n\t                            normal.fromArray(normals, arguments[i] * 3);\n\t                            normal.applyMatrix3(normalMatrix).normalize();\n\t                            var uv = _face.uvs[i];\n\t                            uv.fromArray(uvs, arguments[i] * 2);\n\t                        }\n\t                        _face.vertexNormalsLength = 3;\n\t                        _face.material = object.material;\n\t                        _renderData.elements.push(_face);\n\t                    }\n\t                }\n\t                return {\n\t                    setObject: setObject,\n\t                    projectVertex: projectVertex,\n\t                    checkTriangleVisibility: checkTriangleVisibility,\n\t                    checkBackfaceCulling: checkBackfaceCulling,\n\t                    pushVertex: pushVertex,\n\t                    pushNormal: pushNormal,\n\t                    pushUv: pushUv,\n\t                    pushLine: pushLine,\n\t                    pushTriangle: pushTriangle\n\t                };\n\t            };\n\t            var renderList = new RenderList();\n\t            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n\t                _faceCount = 0;\n\t                _lineCount = 0;\n\t                _spriteCount = 0;\n\t                _renderData.elements.length = 0;\n\t                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n\t                if (camera.parent === null) camera.updateMatrixWorld();\n\t                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\t                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\t                _frustum.setFromMatrix(_viewProjectionMatrix);\n\t                _objectCount = 0;\n\t                _renderData.objects.length = 0;\n\t                _renderData.lights.length = 0;\n\t                scene.traverseVisible(function(object) {\n\t                    if (object instanceof THREE.Light) {\n\t                        _renderData.lights.push(object);\n\t                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n\t                        var material = object.material;\n\t                        if (material.visible === false) return;\n\t                        if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n\t                            _object = getNextObjectInPool();\n\t                            _object.id = object.id;\n\t                            _object.object = object;\n\t                            _vector3.setFromMatrixPosition(object.matrixWorld);\n\t                            _vector3.applyProjection(_viewProjectionMatrix);\n\t                            _object.z = _vector3.z;\n\t                            _object.renderOrder = object.renderOrder;\n\t                            _renderData.objects.push(_object);\n\t                        }\n\t                    }\n\t                });\n\t                if (sortObjects === true) {\n\t                    _renderData.objects.sort(painterSort);\n\t                }\n\t                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n\t                    var object = _renderData.objects[o].object;\n\t                    var geometry = object.geometry;\n\t                    renderList.setObject(object);\n\t                    _modelMatrix = object.matrixWorld;\n\t                    _vertexCount = 0;\n\t                    if (object instanceof THREE.Mesh) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            var groups = geometry.groups;\n\t                            if (attributes.position === undefined) continue;\n\t                            var positions = attributes.position.array;\n\t                            for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                            }\n\t                            if (attributes.normal !== undefined) {\n\t                                var normals = attributes.normal.array;\n\t                                for (var i = 0, l = normals.length; i < l; i += 3) {\n\t                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n\t                                }\n\t                            }\n\t                            if (attributes.uv !== undefined) {\n\t                                var uvs = attributes.uv.array;\n\t                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n\t                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n\t                                }\n\t                            }\n\t                            if (geometry.index !== null) {\n\t                                var indices = geometry.index.array;\n\t                                if (groups.length > 0) {\n\t                                    for (var o = 0; o < groups.length; o++) {\n\t                                        var group = groups[o];\n\t                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n\t                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n\t                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n\t                                    renderList.pushTriangle(i, i + 1, i + 2);\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            var vertices = geometry.vertices;\n\t                            var faces = geometry.faces;\n\t                            var faceVertexUvs = geometry.faceVertexUvs[0];\n\t                            _normalMatrix.getNormalMatrix(_modelMatrix);\n\t                            var material = object.material;\n\t                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n\t                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n\t                                var vertex = vertices[v];\n\t                                _vector3.copy(vertex);\n\t                                if (material.morphTargets === true) {\n\t                                    var morphTargets = geometry.morphTargets;\n\t                                    var morphInfluences = object.morphTargetInfluences;\n\t                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n\t                                        var influence = morphInfluences[t];\n\t                                        if (influence === 0) continue;\n\t                                        var target = morphTargets[t];\n\t                                        var targetVertex = target.vertices[v];\n\t                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n\t                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n\t                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n\t                                    }\n\t                                }\n\t                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n\t                            }\n\t                            for (var f = 0, fl = faces.length; f < fl; f++) {\n\t                                var face = faces[f];\n\t                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n\t                                if (material === undefined) continue;\n\t                                var side = material.side;\n\t                                var v1 = _vertexPool[face.a];\n\t                                var v2 = _vertexPool[face.b];\n\t                                var v3 = _vertexPool[face.c];\n\t                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n\t                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\t                                if (side !== THREE.DoubleSide) {\n\t                                    if (side === THREE.FrontSide && visible === false) continue;\n\t                                    if (side === THREE.BackSide && visible === true) continue;\n\t                                }\n\t                                _face = getNextFaceInPool();\n\t                                _face.id = object.id;\n\t                                _face.v1.copy(v1);\n\t                                _face.v2.copy(v2);\n\t                                _face.v3.copy(v3);\n\t                                _face.normalModel.copy(face.normal);\n\t                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                    _face.normalModel.negate();\n\t                                }\n\t                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                var faceVertexNormals = face.vertexNormals;\n\t                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n\t                                    var normalModel = _face.vertexNormalsModel[n];\n\t                                    normalModel.copy(faceVertexNormals[n]);\n\t                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                        normalModel.negate();\n\t                                    }\n\t                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                }\n\t                                _face.vertexNormalsLength = faceVertexNormals.length;\n\t                                var vertexUvs = faceVertexUvs[f];\n\t                                if (vertexUvs !== undefined) {\n\t                                    for (var u = 0; u < 3; u++) {\n\t                                        _face.uvs[u].copy(vertexUvs[u]);\n\t                                    }\n\t                                }\n\t                                _face.color = face.color;\n\t                                _face.material = material;\n\t                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                                _face.renderOrder = object.renderOrder;\n\t                                _renderData.elements.push(_face);\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Line) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            if (attributes.position !== undefined) {\n\t                                var positions = attributes.position.array;\n\t                                for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                                }\n\t                                if (geometry.index !== null) {\n\t                                    var indices = geometry.index.array;\n\t                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n\t                                        renderList.pushLine(indices[i], indices[i + 1]);\n\t                                    }\n\t                                } else {\n\t                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n\t                                        renderList.pushLine(i, i + 1);\n\t                                    }\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\t                            var vertices = object.geometry.vertices;\n\t                            if (vertices.length === 0) continue;\n\t                            v1 = getNextVertexInPool();\n\t                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n\t                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n\t                                v1 = getNextVertexInPool();\n\t                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n\t                                if ((v + 1) % step > 0) continue;\n\t                                v2 = _vertexPool[_vertexCount - 2];\n\t                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\t                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\t                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n\t                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\t                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\t                                    _line = getNextLineInPool();\n\t                                    _line.id = object.id;\n\t                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\t                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\t                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n\t                                    _line.renderOrder = object.renderOrder;\n\t                                    _line.material = object.material;\n\t                                    if (object.material.vertexColors === THREE.VertexColors) {\n\t                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n\t                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n\t                                    }\n\t                                    _renderData.elements.push(_line);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Sprite) {\n\t                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\t                        _vector4.applyMatrix4(_viewProjectionMatrix);\n\t                        var invW = 1 / _vector4.w;\n\t                        _vector4.z *= invW;\n\t                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n\t                            _sprite = getNextSpriteInPool();\n\t                            _sprite.id = object.id;\n\t                            _sprite.x = _vector4.x * invW;\n\t                            _sprite.y = _vector4.y * invW;\n\t                            _sprite.z = _vector4.z;\n\t                            _sprite.renderOrder = object.renderOrder;\n\t                            _sprite.object = object;\n\t                            _sprite.rotation = object.rotation;\n\t                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n\t                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n\t                            _sprite.material = object.material;\n\t                            _renderData.elements.push(_sprite);\n\t                        }\n\t                    }\n\t                }\n\t                if (sortElements === true) {\n\t                    _renderData.elements.sort(painterSort);\n\t                }\n\t                return _renderData;\n\t            };\n\t            function getNextObjectInPool() {\n\t                if (_objectCount === _objectPoolLength) {\n\t                    var object = new THREE.RenderableObject();\n\t                    _objectPool.push(object);\n\t                    _objectPoolLength++;\n\t                    _objectCount++;\n\t                    return object;\n\t                }\n\t                return _objectPool[_objectCount++];\n\t            }\n\t            function getNextVertexInPool() {\n\t                if (_vertexCount === _vertexPoolLength) {\n\t                    var vertex = new THREE.RenderableVertex();\n\t                    _vertexPool.push(vertex);\n\t                    _vertexPoolLength++;\n\t                    _vertexCount++;\n\t                    return vertex;\n\t                }\n\t                return _vertexPool[_vertexCount++];\n\t            }\n\t            function getNextFaceInPool() {\n\t                if (_faceCount === _facePoolLength) {\n\t                    var face = new THREE.RenderableFace();\n\t                    _facePool.push(face);\n\t                    _facePoolLength++;\n\t                    _faceCount++;\n\t                    return face;\n\t                }\n\t                return _facePool[_faceCount++];\n\t            }\n\t            function getNextLineInPool() {\n\t                if (_lineCount === _linePoolLength) {\n\t                    var line = new THREE.RenderableLine();\n\t                    _linePool.push(line);\n\t                    _linePoolLength++;\n\t                    _lineCount++;\n\t                    return line;\n\t                }\n\t                return _linePool[_lineCount++];\n\t            }\n\t            function getNextSpriteInPool() {\n\t                if (_spriteCount === _spritePoolLength) {\n\t                    var sprite = new THREE.RenderableSprite();\n\t                    _spritePool.push(sprite);\n\t                    _spritePoolLength++;\n\t                    _spriteCount++;\n\t                    return sprite;\n\t                }\n\t                return _spritePool[_spriteCount++];\n\t            }\n\t            function painterSort(a, b) {\n\t                if (a.renderOrder !== b.renderOrder) {\n\t                    return a.renderOrder - b.renderOrder;\n\t                } else if (a.z !== b.z) {\n\t                    return b.z - a.z;\n\t                } else if (a.id !== b.id) {\n\t                    return a.id - b.id;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            }\n\t            function clipLine(s1, s2) {\n\t                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n\t                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n\t                    return true;\n\t                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n\t                    return false;\n\t                } else {\n\t                    if (bc1near < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n\t                    } else if (bc2near < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n\t                    }\n\t                    if (bc1far < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n\t                    } else if (bc2far < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n\t                    }\n\t                    if (alpha2 < alpha1) {\n\t                        return false;\n\t                    } else {\n\t                        s1.lerp(s2, alpha1);\n\t                        s2.lerp(s1, 1 - alpha2);\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        /*!\n\t\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        var isObject = __webpack_require__(8);\n\t        function isObjectObject(o) {\n\t            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n\t        }\n\t        module.exports = function isPlainObject(o) {\n\t            var ctor, prot;\n\t            if (isObjectObject(o) === false) return false;\n\t            ctor = o.constructor;\n\t            if (typeof ctor !== \"function\") return false;\n\t            prot = ctor.prototype;\n\t            if (isObjectObject(prot) === false) return false;\n\t            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n\t                return false;\n\t            }\n\t            return true;\n\t        };\n\t    }, function(module, exports) {\n\t        /*!\n\t\t * isobject <https://github.com/jonschlinkert/isobject>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        module.exports = function isObject(val) {\n\t            return val != null && typeof val === \"object\" && !Array.isArray(val);\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        var __WEBPACK_AMD_DEFINE_RESULT__;\n\t        !function(undefined) {\n\t            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t                return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t            };\n\t            var defaultMaxListeners = 10;\n\t            function init() {\n\t                this._events = {};\n\t                if (this._conf) {\n\t                    configure.call(this, this._conf);\n\t                }\n\t            }\n\t            function configure(conf) {\n\t                if (conf) {\n\t                    this._conf = conf;\n\t                    conf.delimiter && (this.delimiter = conf.delimiter);\n\t                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t                    conf.wildcard && (this.wildcard = conf.wildcard);\n\t                    conf.newListener && (this.newListener = conf.newListener);\n\t                    if (this.wildcard) {\n\t                        this.listenerTree = {};\n\t                    }\n\t                }\n\t            }\n\t            function EventEmitter(conf) {\n\t                this._events = {};\n\t                this.newListener = false;\n\t                configure.call(this, conf);\n\t            }\n\t            function searchListenerTree(handlers, type, tree, i) {\n\t                if (!tree) {\n\t                    return [];\n\t                }\n\t                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n\t                if (i === typeLength && tree._listeners) {\n\t                    if (typeof tree._listeners === \"function\") {\n\t                        handlers && handlers.push(tree._listeners);\n\t                        return [ tree ];\n\t                    } else {\n\t                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t                            handlers && handlers.push(tree._listeners[leaf]);\n\t                        }\n\t                        return [ tree ];\n\t                    }\n\t                }\n\t                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n\t                    if (currentType === \"*\") {\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    } else if (currentType === \"**\") {\n\t                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n\t                        if (endReached && tree._listeners) {\n\t                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t                        }\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                if (branch === \"*\" || branch === \"**\") {\n\t                                    if (tree[branch]._listeners && !endReached) {\n\t                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t                                    }\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                } else if (branch === nextType) {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n\t                                } else {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                }\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    }\n\t                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n\t                }\n\t                xTree = tree[\"*\"];\n\t                if (xTree) {\n\t                    searchListenerTree(handlers, type, xTree, i + 1);\n\t                }\n\t                xxTree = tree[\"**\"];\n\t                if (xxTree) {\n\t                    if (i < typeLength) {\n\t                        if (xxTree._listeners) {\n\t                            searchListenerTree(handlers, type, xxTree, typeLength);\n\t                        }\n\t                        for (branch in xxTree) {\n\t                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n\t                                if (branch === nextType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n\t                                } else if (branch === currentType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n\t                                } else {\n\t                                    isolatedBranch = {};\n\t                                    isolatedBranch[branch] = xxTree[branch];\n\t                                    searchListenerTree(handlers, type, {\n\t                                        \"**\": isolatedBranch\n\t                                    }, i + 1);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (xxTree._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree, typeLength);\n\t                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n\t                    }\n\t                }\n\t                return listeners;\n\t            }\n\t            function growListenerTree(type, listener) {\n\t                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                for (var i = 0, len = type.length; i + 1 < len; i++) {\n\t                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n\t                        return;\n\t                    }\n\t                }\n\t                var tree = this.listenerTree;\n\t                var name = type.shift();\n\t                while (name) {\n\t                    if (!tree[name]) {\n\t                        tree[name] = {};\n\t                    }\n\t                    tree = tree[name];\n\t                    if (type.length === 0) {\n\t                        if (!tree._listeners) {\n\t                            tree._listeners = listener;\n\t                        } else if (typeof tree._listeners === \"function\") {\n\t                            tree._listeners = [ tree._listeners, listener ];\n\t                        } else if (isArray(tree._listeners)) {\n\t                            tree._listeners.push(listener);\n\t                            if (!tree._listeners.warned) {\n\t                                var m = defaultMaxListeners;\n\t                                if (typeof this._events.maxListeners !== \"undefined\") {\n\t                                    m = this._events.maxListeners;\n\t                                }\n\t                                if (m > 0 && tree._listeners.length > m) {\n\t                                    tree._listeners.warned = true;\n\t                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n\t                                    console.trace();\n\t                                }\n\t                            }\n\t                        }\n\t                        return true;\n\t                    }\n\t                    name = type.shift();\n\t                }\n\t                return true;\n\t            }\n\t            EventEmitter.prototype.delimiter = \".\";\n\t            EventEmitter.prototype.setMaxListeners = function(n) {\n\t                this._events || init.call(this);\n\t                this._events.maxListeners = n;\n\t                if (!this._conf) this._conf = {};\n\t                this._conf.maxListeners = n;\n\t            };\n\t            EventEmitter.prototype.event = \"\";\n\t            EventEmitter.prototype.once = function(event, fn) {\n\t                this.many(event, 1, fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.many = function(event, ttl, fn) {\n\t                var self = this;\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"many only accepts instances of Function\");\n\t                }\n\t                function listener() {\n\t                    if (--ttl === 0) {\n\t                        self.off(event, listener);\n\t                    }\n\t                    fn.apply(this, arguments);\n\t                }\n\t                listener._origin = fn;\n\t                this.on(event, listener);\n\t                return self;\n\t            };\n\t            EventEmitter.prototype.emit = function() {\n\t                this._events || init.call(this);\n\t                var type = arguments[0];\n\t                if (type === \"newListener\" && !this.newListener) {\n\t                    if (!this._events.newListener) {\n\t                        return false;\n\t                    }\n\t                }\n\t                if (this._all) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    for (i = 0, l = this._all.length; i < l; i++) {\n\t                        this.event = type;\n\t                        this._all[i].apply(this, args);\n\t                    }\n\t                }\n\t                if (type === \"error\") {\n\t                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n\t                        if (arguments[1] instanceof Error) {\n\t                            throw arguments[1];\n\t                        } else {\n\t                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t                        }\n\t                        return false;\n\t                    }\n\t                }\n\t                var handler;\n\t                if (this.wildcard) {\n\t                    handler = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t                } else {\n\t                    handler = this._events[type];\n\t                }\n\t                if (typeof handler === \"function\") {\n\t                    this.event = type;\n\t                    if (arguments.length === 1) {\n\t                        handler.call(this);\n\t                    } else if (arguments.length > 1) switch (arguments.length) {\n\t                      case 2:\n\t                        handler.call(this, arguments[1]);\n\t                        break;\n\t\n\t                      case 3:\n\t                        handler.call(this, arguments[1], arguments[2]);\n\t                        break;\n\t\n\t                      default:\n\t                        var l = arguments.length;\n\t                        var args = new Array(l - 1);\n\t                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                        handler.apply(this, args);\n\t                    }\n\t                    return true;\n\t                } else if (handler) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    var listeners = handler.slice();\n\t                    for (var i = 0, l = listeners.length; i < l; i++) {\n\t                        this.event = type;\n\t                        listeners[i].apply(this, args);\n\t                    }\n\t                    return listeners.length > 0 || !!this._all;\n\t                } else {\n\t                    return !!this._all;\n\t                }\n\t            };\n\t            EventEmitter.prototype.on = function(type, listener) {\n\t                if (typeof type === \"function\") {\n\t                    this.onAny(type);\n\t                    return this;\n\t                }\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"on only accepts instances of Function\");\n\t                }\n\t                this._events || init.call(this);\n\t                this.emit(\"newListener\", type, listener);\n\t                if (this.wildcard) {\n\t                    growListenerTree.call(this, type, listener);\n\t                    return this;\n\t                }\n\t                if (!this._events[type]) {\n\t                    this._events[type] = listener;\n\t                } else if (typeof this._events[type] === \"function\") {\n\t                    this._events[type] = [ this._events[type], listener ];\n\t                } else if (isArray(this._events[type])) {\n\t                    this._events[type].push(listener);\n\t                    if (!this._events[type].warned) {\n\t                        var m = defaultMaxListeners;\n\t                        if (typeof this._events.maxListeners !== \"undefined\") {\n\t                            m = this._events.maxListeners;\n\t                        }\n\t                        if (m > 0 && this._events[type].length > m) {\n\t                            this._events[type].warned = true;\n\t                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n\t                            console.trace();\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.onAny = function(fn) {\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"onAny only accepts instances of Function\");\n\t                }\n\t                if (!this._all) {\n\t                    this._all = [];\n\t                }\n\t                this._all.push(fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t            EventEmitter.prototype.off = function(type, listener) {\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"removeListener only takes instances of Function\");\n\t                }\n\t                var handlers, leafs = [];\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    handlers = this._events[type];\n\t                    leafs.push({\n\t                        _listeners: handlers\n\t                    });\n\t                }\n\t                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                    var leaf = leafs[iLeaf];\n\t                    handlers = leaf._listeners;\n\t                    if (isArray(handlers)) {\n\t                        var position = -1;\n\t                        for (var i = 0, length = handlers.length; i < length; i++) {\n\t                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n\t                                position = i;\n\t                                break;\n\t                            }\n\t                        }\n\t                        if (position < 0) {\n\t                            continue;\n\t                        }\n\t                        if (this.wildcard) {\n\t                            leaf._listeners.splice(position, 1);\n\t                        } else {\n\t                            this._events[type].splice(position, 1);\n\t                        }\n\t                        if (handlers.length === 0) {\n\t                            if (this.wildcard) {\n\t                                delete leaf._listeners;\n\t                            } else {\n\t                                delete this._events[type];\n\t                            }\n\t                        }\n\t                        return this;\n\t                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n\t                        if (this.wildcard) {\n\t                            delete leaf._listeners;\n\t                        } else {\n\t                            delete this._events[type];\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.offAny = function(fn) {\n\t                var i = 0, l = 0, fns;\n\t                if (fn && this._all && this._all.length > 0) {\n\t                    fns = this._all;\n\t                    for (i = 0, l = fns.length; i < l; i++) {\n\t                        if (fn === fns[i]) {\n\t                            fns.splice(i, 1);\n\t                            return this;\n\t                        }\n\t                    }\n\t                } else {\n\t                    this._all = [];\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t            EventEmitter.prototype.removeAllListeners = function(type) {\n\t                if (arguments.length === 0) {\n\t                    !this._events || init.call(this);\n\t                    return this;\n\t                }\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                        var leaf = leafs[iLeaf];\n\t                        leaf._listeners = null;\n\t                    }\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    this._events[type] = null;\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.listeners = function(type) {\n\t                if (this.wildcard) {\n\t                    var handlers = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t                    return handlers;\n\t                }\n\t                this._events || init.call(this);\n\t                if (!this._events[type]) this._events[type] = [];\n\t                if (!isArray(this._events[type])) {\n\t                    this._events[type] = [ this._events[type] ];\n\t                }\n\t                return this._events[type];\n\t            };\n\t            EventEmitter.prototype.listenersAny = function() {\n\t                if (this._all) {\n\t                    return this._all;\n\t                } else {\n\t                    return [];\n\t                }\n\t            };\n\t            if (true) {\n\t                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t                    return EventEmitter;\n\t                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t            } else if (typeof exports === \"object\") {\n\t                exports.EventEmitter2 = EventEmitter;\n\t            } else {\n\t                window.EventEmitter2 = EventEmitter;\n\t            }\n\t        }();\n\t    }, function(module, exports) {\n\t        module.exports = {\n\t            Promise: window[\"Promise\"]\n\t        };\n\t    }, function(module, exports) {\n\t        (function() {\n\t            var ResizeSensor = function(element, callback) {\n\t                function EventQueue() {\n\t                    this.q = [];\n\t                    this.add = function(ev) {\n\t                        this.q.push(ev);\n\t                    };\n\t                    var i, j;\n\t                    this.call = function() {\n\t                        for (i = 0, j = this.q.length; i < j; i++) {\n\t                            this.q[i].call();\n\t                        }\n\t                    };\n\t                }\n\t                function getComputedStyle(element, prop) {\n\t                    if (element.currentStyle) {\n\t                        return element.currentStyle[prop];\n\t                    } else if (window.getComputedStyle) {\n\t                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t                    } else {\n\t                        return element.style[prop];\n\t                    }\n\t                }\n\t                function attachResizeEvent(element, resized) {\n\t                    if (!element.resizedAttached) {\n\t                        element.resizedAttached = new EventQueue();\n\t                        element.resizedAttached.add(resized);\n\t                    } else if (element.resizedAttached) {\n\t                        element.resizedAttached.add(resized);\n\t                        return;\n\t                    }\n\t                    element.resizeSensor = document.createElement(\"div\");\n\t                    element.resizeSensor.className = \"resize-sensor\";\n\t                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n\t                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n\t                    element.resizeSensor.style.cssText = style;\n\t                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n\t                    element.appendChild(element.resizeSensor);\n\t                    if (!{\n\t                        fixed: 1,\n\t                        absolute: 1\n\t                    }[getComputedStyle(element, \"position\")]) {\n\t                        element.style.position = \"relative\";\n\t                    }\n\t                    var expand = element.resizeSensor.childNodes[0];\n\t                    var expandChild = expand.childNodes[0];\n\t                    var shrink = element.resizeSensor.childNodes[1];\n\t                    var shrinkChild = shrink.childNodes[0];\n\t                    var lastWidth, lastHeight;\n\t                    var reset = function() {\n\t                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n\t                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n\t                        expand.scrollLeft = expand.scrollWidth;\n\t                        expand.scrollTop = expand.scrollHeight;\n\t                        shrink.scrollLeft = shrink.scrollWidth;\n\t                        shrink.scrollTop = shrink.scrollHeight;\n\t                        lastWidth = element.offsetWidth;\n\t                        lastHeight = element.offsetHeight;\n\t                    };\n\t                    reset();\n\t                    var changed = function() {\n\t                        if (element.resizedAttached) {\n\t                            element.resizedAttached.call();\n\t                        }\n\t                    };\n\t                    var addEvent = function(el, name, cb) {\n\t                        if (el.attachEvent) {\n\t                            el.attachEvent(\"on\" + name, cb);\n\t                        } else {\n\t                            el.addEventListener(name, cb);\n\t                        }\n\t                    };\n\t                    var onScroll = function() {\n\t                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                            changed();\n\t                        }\n\t                        reset();\n\t                    };\n\t                    addEvent(expand, \"scroll\", onScroll);\n\t                    addEvent(shrink, \"scroll\", onScroll);\n\t                }\n\t                var elementType = Object.prototype.toString.call(element);\n\t                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n\t                if (isCollectionTyped) {\n\t                    var i = 0, j = element.length;\n\t                    for (;i < j; i++) {\n\t                        attachResizeEvent(element[i], callback);\n\t                    }\n\t                } else {\n\t                    attachResizeEvent(element, callback);\n\t                }\n\t                this.detach = function() {\n\t                    if (isCollectionTyped) {\n\t                        var i = 0, j = element.length;\n\t                        for (;i < j; i++) {\n\t                            ResizeSensor.detach(element[i]);\n\t                        }\n\t                    } else {\n\t                        ResizeSensor.detach(element);\n\t                    }\n\t                };\n\t            };\n\t            ResizeSensor.detach = function(element) {\n\t                if (element.resizeSensor) {\n\t                    element.removeChild(element.resizeSensor);\n\t                    delete element.resizeSensor;\n\t                    delete element.resizedAttached;\n\t                }\n\t            };\n\t            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n\t                module.exports = ResizeSensor;\n\t            } else {\n\t                window.ResizeSensor = ResizeSensor;\n\t            }\n\t        })();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Widget_1 = __webpack_require__(15);\n\t        var TrendsManager_1 = __webpack_require__(16);\n\t        var Screen_1 = __webpack_require__(19);\n\t        var AxisMarks_1 = __webpack_require__(20);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var deps_1 = __webpack_require__(3);\n\t        var CHART_STATE_EVENTS = {\n\t            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n\t            READY: \"ready\",\n\t            DESTROY: \"destroy\",\n\t            CHANGE: \"change\",\n\t            TREND_CHANGE: \"trendChange\",\n\t            TRENDS_CHANGE: \"trendsChange\",\n\t            ZOOM: \"zoom\",\n\t            RESIZE: \"resize\",\n\t            SCROLL: \"scroll\",\n\t            SCROLL_STOP: \"scrollStop\",\n\t            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n\t        };\n\t        var ChartState = function() {\n\t            function ChartState(initialState, widgetsClasses, plugins) {\n\t                if (widgetsClasses === void 0) {\n\t                    widgetsClasses = {};\n\t                }\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.data = {\n\t                    prevState: {},\n\t                    $el: null,\n\t                    zoom: 0,\n\t                    xAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n\t                            from: 0,\n\t                            to: 0,\n\t                            scroll: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 0,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 0,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 100,\n\t                        autoScroll: true,\n\t                        marks: []\n\t                    },\n\t                    yAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n\t                            from: 0,\n\t                            to: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 5,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 5,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 50,\n\t                        marks: []\n\t                    },\n\t                    animations: {\n\t                        enabled: true,\n\t                        trendChangeSpeed: .5,\n\t                        trendChangeEase: void 0,\n\t                        zoomSpeed: .25,\n\t                        zoomEase: Linear.easeNone,\n\t                        scrollSpeed: .5,\n\t                        scrollEase: Linear.easeNone,\n\t                        autoScrollSpeed: 1,\n\t                        autoScrollEase: Linear.easeNone\n\t                    },\n\t                    autoRender: {\n\t                        enabled: true,\n\t                        fps: 0\n\t                    },\n\t                    autoResize: true,\n\t                    renderer: \"WebGLRenderer\",\n\t                    autoScroll: true,\n\t                    controls: {\n\t                        enabled: true\n\t                    },\n\t                    cursor: {\n\t                        dragMode: false,\n\t                        x: 0,\n\t                        y: 0\n\t                    },\n\t                    backgroundColor: 0,\n\t                    backgroundOpacity: 1,\n\t                    showStats: false,\n\t                    pluginsState: {},\n\t                    eventEmitterMaxListeners: 20\n\t                };\n\t                this.widgetsClasses = {};\n\t                this.plugins = {};\n\t                this.isReady = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n\t                this.widgetsClasses = widgetsClasses;\n\t                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n\t                initialState.trends = this.trendsManager.calculatedOptions;\n\t                initialState = this.installPlugins(plugins, initialState);\n\t                this.setState(initialState);\n\t                this.setState({\n\t                    computedData: this.getComputedData()\n\t                });\n\t                this.savePrevState();\n\t                this.screen = new Screen_1.Screen(this);\n\t                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n\t                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n\t                this.initListeners();\n\t                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\t                this.isReady = true;\n\t                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t            }\n\t            ChartState.prototype.destroy = function() {\n\t                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t                this.ee.removeAllListeners();\n\t                this.data = {};\n\t            };\n\t            ChartState.prototype.onDestroy = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t            };\n\t            ChartState.prototype.onInitialStateApplied = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t            };\n\t            ChartState.prototype.onReady = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t            };\n\t            ChartState.prototype.onChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendsChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onScrollStop = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t            };\n\t            ChartState.prototype.onScroll = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t            };\n\t            ChartState.prototype.onZoom = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t            };\n\t            ChartState.prototype.onResize = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t            };\n\t            ChartState.prototype.onPluginsStateChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t            };\n\t            ChartState.prototype.getTrend = function(trendName) {\n\t                return this.trendsManager.getTrend(trendName);\n\t            };\n\t            ChartState.prototype.setState = function(newState, eventData, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var stateData = this.data;\n\t                var changedProps = {};\n\t                for (var key in newState) {\n\t                    if (stateData[key] !== newState[key]) {\n\t                        changedProps[key] = newState[key];\n\t                    }\n\t                }\n\t                this.savePrevState(changedProps);\n\t                var trendsData = {};\n\t                if (newState.trends) for (var trendName in newState.trends) {\n\t                    var trendOptions = newState.trends[trendName];\n\t                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t                    delete trendOptions.data;\n\t                }\n\t                var newStateContainsData = Object.keys(trendsData).length > 0;\n\t                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n\t                if (newStateContainsData) for (var trendName in trendsData) {\n\t                    this.data.trends[trendName].data = trendsData[trendName];\n\t                }\n\t                if (silent) return;\n\t                var recalculateResult = this.recalculateState(changedProps);\n\t                changedProps = recalculateResult.changedProps;\n\t                this.emitChangedStateEvents(changedProps, eventData);\n\t            };\n\t            ChartState.prototype.recalculateState = function(changedProps) {\n\t                var data = this.data;\n\t                var patch = {};\n\t                var actualData = Utils_1.Utils.deepMerge({}, data);\n\t                if (changedProps.widgets || !data.widgets) {\n\t                    patch.widgets = {};\n\t                    var widgetsOptions = data.widgets || {};\n\t                    for (var widgetName in this.widgetsClasses) {\n\t                        var WidgetClass = this.widgetsClasses[widgetName];\n\t                        var userOptions = widgetsOptions[widgetName] || {};\n\t                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n\t                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n\t                    }\n\t                }\n\t                var cursorOptions = changedProps.cursor;\n\t                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t                if (isMouseDrag) {\n\t                    var oldX = data.prevState.cursor.x;\n\t                    var currentX = cursorOptions.x;\n\t                    var currentScroll = data.xAxis.range.scroll;\n\t                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t                    patch.xAxis = {\n\t                        range: {\n\t                            scroll: currentScroll + deltaXVal\n\t                        }\n\t                    };\n\t                    actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                        xAxis: patch.xAxis\n\t                    });\n\t                }\n\t                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\t                var scrollXChanged = false;\n\t                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateXAxis) {\n\t                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t                    if (xAxisPatch) {\n\t                        scrollXChanged = true;\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateYAxis) {\n\t                    var yAxisPatch = this.recalculateYAxis(actualData);\n\t                    if (yAxisPatch) {\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                this.savePrevState(patch);\n\t                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n\t                patch.computedData = this.getComputedData(allChangedProps);\n\t                this.savePrevState(patch);\n\t                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n\t                return {\n\t                    changedProps: allChangedProps,\n\t                    patch: patch\n\t                };\n\t            };\n\t            ChartState.prototype.getComputedData = function(changedProps) {\n\t                var computeAll = !changedProps;\n\t                var computedData = {};\n\t                if (computeAll || changedProps.trends && this.trendsManager) {\n\t                    computedData.trends = {\n\t                        maxXVal: this.trendsManager.getEndXVal(),\n\t                        minXVal: this.trendsManager.getStartXVal()\n\t                    };\n\t                }\n\t                return computedData;\n\t            };\n\t            ChartState.prototype.savePrevState = function(changedProps) {\n\t                if (!changedProps) changedProps = this.data;\n\t                var prevState = this.data.prevState;\n\t                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n\t            };\n\t            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n\t                var prevState = this.data.prevState;\n\t                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\t                for (var key in changedProps) {\n\t                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n\t                }\n\t                if (!this.isReady) return;\n\t                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n\t                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\t                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n\t                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\t                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n\t                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\t                var resizeEventNeeded = changedProps.width || changedProps.height;\n\t                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\t                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n\t                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t            };\n\t            ChartState.prototype.installPlugins = function(plugins, initialState) {\n\t                var _this = this;\n\t                initialState.pluginsState = {};\n\t                plugins.forEach(function(plugin) {\n\t                    var PluginClass = plugin.constructor;\n\t                    var pluginName = PluginClass.NAME;\n\t                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n\t                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n\t                    });\n\t                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n\t                    _this.plugins[pluginName] = plugin;\n\t                    plugin.setupChartState(_this);\n\t                });\n\t                return initialState;\n\t            };\n\t            ChartState.prototype.getPlugin = function(pluginName) {\n\t                return this.plugins[pluginName];\n\t            };\n\t            ChartState.prototype.initListeners = function() {\n\t                var _this = this;\n\t                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n\t                    _this.handleTrendsChange(changedTrends, newData);\n\t                });\n\t            };\n\t            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n\t                for (var trendName in changedTrends) {\n\t                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t                }\n\t            };\n\t            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n\t                var axisRange = actualData.xAxis.range;\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var isInitialize = axisRange.zeroVal == void 0;\n\t                var zeroVal, scaleFactor;\n\t                var zoom = axisRange.zoom;\n\t                if (axisRange.isMirrorMode) {\n\t                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n\t                }\n\t                if (isInitialize) {\n\t                    zeroVal = axisRange.from;\n\t                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                } else {\n\t                    zeroVal = axisRange.zeroVal;\n\t                    scaleFactor = axisRange.scaleFactor;\n\t                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n\t                        if (changedProps.xAxis.range.zoom) {\n\t                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t                        }\n\t                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                        patch.range.scroll = axisRange.from - zeroVal;\n\t                        patch.range.zoom = currentScaleFactor / scaleFactor;\n\t                        return patch;\n\t                    }\n\t                }\n\t                do {\n\t                    var from = zeroVal + axisRange.scroll;\n\t                    var to = from + actualData.width / (scaleFactor * zoom);\n\t                    var rangeLength = to - from;\n\t                    var needToRecalculateZoom = false;\n\t                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n\t                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n\t                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t                    if (needToRecalculateZoom) {\n\t                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n\t                        var zoom = zoom * fixScale;\n\t                        patch.range.zoom = zoom;\n\t                    }\n\t                } while (needToRecalculateZoom);\n\t                patch.range.from = from;\n\t                patch.range.to = to;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.recalculateYAxis = function(actualData) {\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var yAxisRange = actualData.yAxis.range;\n\t                var isInitialize = yAxisRange.scaleFactor == void 0;\n\t                var trends = this.trendsManager;\n\t                var trendsEndXVal = trends.getEndXVal();\n\t                var trendsStartXVal = trends.getStartXVal();\n\t                var xRange = actualData.xAxis.range;\n\t                var xFrom = xRange.from, xTo = xRange.to;\n\t                var xRangeLength = xTo - xFrom;\n\t                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n\t                if (xTo > trendsEndXVal) {\n\t                    xTo = trendsEndXVal;\n\t                    xFrom = xTo - xRangeLength;\n\t                } else if (xFrom < trendsStartXVal) {\n\t                    xFrom = trendsStartXVal;\n\t                    xTo = xFrom + xRangeLength;\n\t                }\n\t                var maxY = trends.getMaxYVal(xFrom, xTo);\n\t                var minY = trends.getMinYVal(xFrom, xTo);\n\t                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n\t                    if (trendLastY > maxY) maxY = trendLastY;\n\t                    if (trendLastY < minY) minY = trendLastY;\n\t                }\n\t                if (yAxisRange.isMirrorMode) {\n\t                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n\t                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t                }\n\t                var margin = yAxisRange.margin;\n\t                var padding = {\n\t                    start: yAxisRange.padding.start + margin.start,\n\t                    end: yAxisRange.padding.end + margin.end\n\t                };\n\t                if (padding.end + padding.start >= actualData.height) {\n\t                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n\t                }\n\t                var rangeLength = maxY - minY;\n\t                var paddingTopInPercents = padding.end / actualData.height;\n\t                var paddingBottomInPercents = padding.start / actualData.height;\n\t                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t                if (isInitialize) {\n\t                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t                    scaleFactor = actualData.height / (toVal - fromVal);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                    needToZoom = true;\n\t                } else {\n\t                    scaleFactor = yAxisRange.scaleFactor;\n\t                    zeroVal = yAxisRange.zeroVal;\n\t                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n\t                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n\t                }\n\t                if (!needToZoom) return null;\n\t                scroll = fromVal - zeroVal;\n\t                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n\t                var currentAxisRange = this.data.yAxis.range;\n\t                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.zoom = function(zoomValue, origin) {\n\t                var _this = this;\n\t                if (origin === void 0) {\n\t                    origin = .5;\n\t                }\n\t                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n\t                var newZoom = zoom * zoomValue;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                var nextRange = this.data.width / (scaleFactor * newZoom);\n\t                var newScroll = scroll + (currentRange - nextRange) * origin;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            zoom: newZoom,\n\t                            scroll: newScroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.zoomToRange = function(range, origin) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                return this.zoom(currentRange / range, origin);\n\t            };\n\t            ChartState.prototype.scrollToEnd = function() {\n\t                var _this = this;\n\t                var state = this.data;\n\t                var endXVal = this.trendsManager.getEndXVal();\n\t                var range = state.xAxis.range;\n\t                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            scroll: scroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getValueOnXAxis = function(x) {\n\t                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.getValueByScreenX = function(x) {\n\t                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.getValueByScreenY = function(y) {\n\t                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByYAxis(y);\n\t            };\n\t            ChartState.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenYByValue = function(yVal) {\n\t                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            ChartState.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            ChartState.prototype.getScreenLeftVal = function() {\n\t                return this.getValueByScreenX(0);\n\t            };\n\t            ChartState.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.data.width);\n\t            };\n\t            ChartState.prototype.getPaddingRight = function() {\n\t                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n\t            };\n\t            return ChartState;\n\t        }();\n\t        exports.ChartState = ChartState;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        var EventEmitter = function() {\n\t            function EventEmitter() {\n\t                this.ee = new deps_1.EE2();\n\t            }\n\t            EventEmitter.prototype.emit = function(eventName) {\n\t                var args = [];\n\t                for (var _i = 1; _i < arguments.length; _i++) {\n\t                    args[_i - 1] = arguments[_i];\n\t                }\n\t                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n\t                var _a;\n\t            };\n\t            EventEmitter.prototype.on = function(eventName, callback) {\n\t                return this.ee.on(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.off = function(eventName, callback) {\n\t                return this.ee.off(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.subscribe = function(eventName, callback) {\n\t                var _this = this;\n\t                this.on(eventName, callback);\n\t                return function() {\n\t                    return _this.off(eventName, callback);\n\t                };\n\t            };\n\t            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n\t                this.ee.setMaxListeners(listenersCount);\n\t            };\n\t            EventEmitter.prototype.removeAllListeners = function(eventName) {\n\t                this.ee.removeAllListeners(eventName);\n\t            };\n\t            return EventEmitter;\n\t        }();\n\t        exports.EventEmitter = EventEmitter;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        function deepmerge(target, src, mergeArrays) {\n\t            if (mergeArrays === void 0) {\n\t                mergeArrays = true;\n\t            }\n\t            var array = Array.isArray(src);\n\t            var dst = array && [] || {};\n\t            if (array) {\n\t                target = target || [];\n\t                if (mergeArrays) {\n\t                    dst = dst.concat(target);\n\t                }\n\t                src.forEach(function(e, i) {\n\t                    if (typeof dst[i] === \"undefined\") {\n\t                        dst[i] = e;\n\t                    } else if (typeof e === \"object\") {\n\t                        dst[i] = deepmerge(target[i], e, mergeArrays);\n\t                    } else {\n\t                        if (target.indexOf(e) === -1) {\n\t                            dst.push(e);\n\t                        }\n\t                    }\n\t                });\n\t            } else {\n\t                if (target && typeof target === \"object\") {\n\t                    Object.keys(target).forEach(function(key) {\n\t                        dst[key] = target[key];\n\t                    });\n\t                }\n\t                Object.keys(src).forEach(function(key) {\n\t                    if (typeof src[key] !== \"object\" || !src[key]) {\n\t                        dst[key] = src[key];\n\t                    } else {\n\t                        if (!target[key]) {\n\t                            dst[key] = src[key];\n\t                        } else {\n\t                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t            return dst;\n\t        }\n\t        var Utils = function() {\n\t            function Utils() {}\n\t            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n\t                return deepmerge(obj1, obj2, mergeArrays);\n\t            };\n\t            Utils.deepCopy = function(obj) {\n\t                return JSON.parse(JSON.stringify(obj));\n\t            };\n\t            Utils.toFixed = function(num, digitsCount) {\n\t                var maxDigits = 15;\n\t                var result = \"\";\n\t                var intVal = Math.floor(num);\n\t                var intStr = intVal.toString();\n\t                var lengthDiff = digitsCount - intStr.length;\n\t                if (lengthDiff > 0) {\n\t                    result = \"0\".repeat(lengthDiff) + intStr;\n\t                } else {\n\t                    result = intStr;\n\t                }\n\t                var afterPointDigitsCount = maxDigits - intStr.length;\n\t                var afterPointStr = num.toString().split(\".\")[1];\n\t                if (afterPointStr) {\n\t                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n\t                }\n\t                return result;\n\t            };\n\t            Utils.bindEvent = function() {};\n\t            Utils.createTexture = function(width, height, fn) {\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = width;\n\t                canvas.height = height;\n\t                var ctx = canvas.getContext(\"2d\");\n\t                fn(ctx);\n\t                var texture = new THREE.Texture(canvas);\n\t                texture.needsUpdate = true;\n\t                return texture;\n\t            };\n\t            Utils.createPixelPerfectTexture = function(width, height, fn) {\n\t                var texture = this.createTexture(width, height, fn);\n\t                texture.minFilter = THREE.NearestFilter;\n\t                return texture;\n\t            };\n\t            Utils.error = function(msg) {\n\t                console.error(\"Chart error: \" + msg);\n\t                throw \"Chart: \" + msg;\n\t            };\n\t            Utils.warn = function(msg) {\n\t                console.warn(\"Chart warning: \" + msg);\n\t            };\n\t            Utils.getUid = function() {\n\t                return this.currentId++;\n\t            };\n\t            Utils.getDistance = function(num1, num2) {\n\t                return Math.max(num1, num2) - Math.min(num1, num2);\n\t            };\n\t            Utils.binarySearchClosestInd = function(arr, num, key) {\n\t                var mid;\n\t                var lo = 0;\n\t                var hi = arr.length - 1;\n\t                while (hi - lo > 1) {\n\t                    mid = Math.floor((lo + hi) / 2);\n\t                    if (arr[mid][key] < num) {\n\t                        lo = mid;\n\t                    } else {\n\t                        hi = mid;\n\t                    }\n\t                }\n\t                if (num - arr[lo][key] <= arr[hi][key] - num) {\n\t                    return lo;\n\t                }\n\t                return hi;\n\t            };\n\t            Utils.binarySearchClosest = function(arr, num, key) {\n\t                var ind = this.binarySearchClosestInd(arr, num, key);\n\t                return arr[ind];\n\t            };\n\t            Utils.rectsIntersect = function(r1, r2) {\n\t                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n\t                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n\t                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n\t                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n\t            };\n\t            /**!\r\n\t\t     * @preserve $.parseColor\r\n\t\t     * Copyright 2011 THEtheChad Elliott\r\n\t\t     * Released under the MIT and GPL licenses.\r\n\t\t     */\n\t            Utils.parseColor = function(color) {\n\t                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n\t                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by $.parseColor\");\n\t                isNaN(cache[3]) && (cache[3] = 1);\n\t                return cache;\n\t            };\n\t            Utils.getHexColor = function(str) {\n\t                var rgb = this.parseColor(str);\n\t                return (rgb[0] << 8 * 2) + (rgb[1] << 8) + rgb[2];\n\t            };\n\t            Utils.throttle = function(func, ms) {\n\t                var isThrottled = false, savedArgs, savedThis;\n\t                function wrapper() {\n\t                    if (isThrottled) {\n\t                        savedArgs = arguments;\n\t                        savedThis = this;\n\t                        return;\n\t                    }\n\t                    func.apply(this, arguments);\n\t                    isThrottled = true;\n\t                    setTimeout(function() {\n\t                        isThrottled = false;\n\t                        if (savedArgs) {\n\t                            wrapper.apply(savedThis, savedArgs);\n\t                            savedArgs = savedThis = null;\n\t                        }\n\t                    }, ms);\n\t                }\n\t                return wrapper;\n\t            };\n\t            Utils.msToTimeString = function(timestamp) {\n\t                var h = Math.floor(timestamp / 36e4);\n\t                var m = Math.floor(timestamp / 6e4);\n\t                var s = Math.floor(timestamp / 1e3);\n\t                return h + \":\" + m + \":\" + s;\n\t            };\n\t            Utils.getRandomItem = function(arr) {\n\t                var ind = Math.floor(Math.random() * arr.length);\n\t                return arr[ind];\n\t            };\n\t            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n\t                if (excludeProps === void 0) {\n\t                    excludeProps = [];\n\t                }\n\t                for (var key in props) {\n\t                    if (excludeProps.indexOf(key) !== -1) continue;\n\t                    if (srcObject[key] == void 0) continue;\n\t                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n\t                    } else {\n\t                        dstObject[key] = this.deepCopy(srcObject[key]);\n\t                    }\n\t                }\n\t            };\n\t            Utils.currentId = 1;\n\t            return Utils;\n\t        }();\n\t        exports.Utils = Utils;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        var ChartWidget = function() {\n\t            function ChartWidget(chartState) {\n\t                this.unsubscribers = [];\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            ChartWidget.prototype.bindEvents = function() {};\n\t            ChartWidget.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartWidget.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartWidget.getDefaultOptions = function() {\n\t                return {\n\t                    enabled: true\n\t                };\n\t            };\n\t            ChartWidget.widgetName = \"\";\n\t            return ChartWidget;\n\t        }();\n\t        exports.ChartWidget = ChartWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Trend_1 = __webpack_require__(17);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var EVENTS = {\n\t            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n\t        };\n\t        var TrendsManager = function() {\n\t            function TrendsManager(state, initialState) {\n\t                this.trends = {};\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.chartState = state;\n\t                var trendsCalculatedOptions = {};\n\t                for (var trendName in initialState.trends) {\n\t                    var trend = this.createTrend(state, trendName, initialState);\n\t                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t                }\n\t                this.calculatedOptions = trendsCalculatedOptions;\n\t                this.bindEvents();\n\t            }\n\t            TrendsManager.prototype.getTrend = function(trendName) {\n\t                return this.trends[trendName];\n\t            };\n\t            TrendsManager.prototype.getEnabledTrends = function() {\n\t                var enabledTrends = [];\n\t                var allTrends = this.trends;\n\t                for (var trendName in allTrends) {\n\t                    var trend = allTrends[trendName];\n\t                    trend.getOptions().enabled && enabledTrends.push(trend);\n\t                }\n\t                return enabledTrends;\n\t            };\n\t            TrendsManager.prototype.getStartXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                return trends[0].getData()[0].xVal;\n\t            };\n\t            TrendsManager.prototype.getEndXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                var firstTrendData = trends[0].getData();\n\t                return firstTrendData[firstTrendData.length - 1].xVal;\n\t            };\n\t            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n\t                var trends = this.getEnabledTrends();\n\t                var compareFn;\n\t                var result;\n\t                if (extremumIsMax) {\n\t                    result = -Infinity;\n\t                    compareFn = Math.max;\n\t                } else {\n\t                    result = Infinity;\n\t                    compareFn = Math.min;\n\t                }\n\t                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n\t                    var trend = trends_1[_i];\n\t                    var trendData = trend.getData(fromX, toX);\n\t                    var trendYValues = trendData.map(function(dataItem) {\n\t                        return dataItem.yVal;\n\t                    });\n\t                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n\t                }\n\t                if (result == Infinity || result == -Infinity) result = NaN;\n\t                return result;\n\t            };\n\t            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(true, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(false, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n\t                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t            };\n\t            TrendsManager.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateAppliedHandler();\n\t                });\n\t            };\n\t            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n\t                var _this = this;\n\t                var _loop_1 = function(trendName) {\n\t                    this_1.trends[trendName].segments.onRebuild(function() {\n\t                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n\t                    });\n\t                };\n\t                var this_1 = this;\n\t                for (var trendName in this.trends) {\n\t                    _loop_1(trendName);\n\t                }\n\t            };\n\t            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n\t                var trend = new Trend_1.Trend(state, trendName, initialState);\n\t                this.trends[trendName] = trend;\n\t                return trend;\n\t            };\n\t            return TrendsManager;\n\t        }();\n\t        exports.TrendsManager = TrendsManager;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendSegments_1 = __webpack_require__(18);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var deps_1 = __webpack_require__(3);\n\t        var EVENTS = {\n\t            CHANGE: \"Change\",\n\t            PREPEND_REQUEST: \"prependRequest\"\n\t        };\n\t        (function(TREND_TYPE) {\n\t            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n\t            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n\t        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n\t        var TREND_TYPE = exports.TREND_TYPE;\n\t        var DEFAULT_OPTIONS = {\n\t            enabled: true,\n\t            type: TREND_TYPE.LINE,\n\t            data: [],\n\t            maxSegmentLength: 1e3,\n\t            lineWidth: 2,\n\t            lineColor: 16777215,\n\t            hasGradient: true,\n\t            hasBeacon: false,\n\t            settingsForTypes: {\n\t                CANDLE: {\n\t                    minSegmentLengthInPx: 20,\n\t                    maxSegmentLengthInPx: 40\n\t                },\n\t                LINE: {\n\t                    minSegmentLengthInPx: 2,\n\t                    maxSegmentLengthInPx: 10\n\t                }\n\t            }\n\t        };\n\t        var Trend = function() {\n\t            function Trend(chartState, trendName, initialState) {\n\t                this.minXVal = Infinity;\n\t                this.minYVal = Infinity;\n\t                this.maxXVal = -Infinity;\n\t                this.maxYVal = -Infinity;\n\t                var options = initialState.trends[trendName];\n\t                this.name = trendName;\n\t                this.chartState = chartState;\n\t                this.calculatedOptions = Utils_1.Utils.deepMerge(DEFAULT_OPTIONS, options);\n\t                this.calculatedOptions.name = trendName;\n\t                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t                this.calculatedOptions.dataset = [];\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvents();\n\t            }\n\t            Trend.prototype.onInitialStateApplied = function() {\n\t                this.segments = new TrendSegments_1.TrendSegments(this.chartState, this);\n\t            };\n\t            Trend.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var chartState = this.chartState;\n\t                chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateApplied();\n\t                });\n\t                chartState.onScrollStop(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onZoom(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n\t                });\n\t                chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            Trend.prototype.getCalculatedOptions = function() {\n\t                return this.calculatedOptions;\n\t            };\n\t            Trend.prototype.appendData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData());\n\t                var updatedTrendData = options.data.concat(newData);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.prependData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData(), true);\n\t                var updatedTrendData = newData.concat(options.data);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.changeData = function(allData, newData) {\n\t                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n\t                    var item = newData_1[_i];\n\t                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t                }\n\t                var options = this.getOptions();\n\t                var statePatch = {\n\t                    trends: (_a = {}, _a[options.name] = {\n\t                        data: allData\n\t                    }, _a)\n\t                };\n\t                this.chartState.setState(statePatch, newData);\n\t                var _a;\n\t            };\n\t            Trend.prototype.getData = function(fromX, toX) {\n\t                var data = this.getOptions().data;\n\t                if (fromX == void 0 && toX == void 0) return data;\n\t                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t                toX = toX !== void 0 ? toX : data[data.length].xVal;\n\t                var filteredData = [];\n\t                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n\t                    var item = data_1[_i];\n\t                    if (item.xVal < fromX) continue;\n\t                    if (item.xVal > toX) break;\n\t                    filteredData.push(item);\n\t                }\n\t                return filteredData;\n\t            };\n\t            Trend.prototype.getFirstItem = function() {\n\t                return this.getOptions().data[0];\n\t            };\n\t            Trend.prototype.getLastItem = function() {\n\t                var data = this.getOptions().data;\n\t                return data[data.length - 1];\n\t            };\n\t            Trend.prototype.getOptions = function() {\n\t                return this.chartState.data.trends[this.name];\n\t            };\n\t            Trend.prototype.setOptions = function(options) {\n\t                this.chartState.setState({\n\t                    trends: (_a = {}, _a[this.name] = options, _a)\n\t                });\n\t                var _a;\n\t            };\n\t            Trend.prototype.onPrependRequest = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.CHANGE, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onDataChange = function(cb) {\n\t                var _this = this;\n\t                var onChangeCb = function(changedOptions, newData) {\n\t                    if (newData) cb(newData);\n\t                };\n\t                this.ee.on(EVENTS.CHANGE, onChangeCb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n\t                };\n\t            };\n\t            Trend.prototype.checkForPrependRequest = function() {\n\t                var _this = this;\n\t                if (this.prependRequest) return;\n\t                var chartState = this.chartState;\n\t                var minXVal = chartState.data.computedData.trends.minXVal;\n\t                var minScreenX = chartState.getScreenXByValue(minXVal);\n\t                var needToRequest = minScreenX > 0;\n\t                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var requestedDataLength = to - from;\n\t                if (!needToRequest) return;\n\t                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n\t                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t                });\n\t                this.prependRequest.then(function(newData) {\n\t                    _this.prependData(newData);\n\t                    _this.prependRequest = null;\n\t                }, function() {\n\t                    _this.prependRequest = null;\n\t                });\n\t            };\n\t            Trend.prepareData = function(newData, currentData, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var data = [];\n\t                if (typeof newData[0] == \"number\") {\n\t                    currentData = currentData || [];\n\t                    var initialItem = void 0;\n\t                    var xVal = void 0;\n\t                    if (isPrepend) {\n\t                        initialItem = currentData[0];\n\t                        xVal = initialItem.xVal - newData.length;\n\t                    } else {\n\t                        initialItem = currentData[currentData.length - 1];\n\t                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n\t                    }\n\t                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n\t                        var yVal = _a[_i];\n\t                        data.push({\n\t                            xVal: xVal,\n\t                            yVal: yVal,\n\t                            id: Utils_1.Utils.getUid()\n\t                        });\n\t                        xVal++;\n\t                    }\n\t                } else {\n\t                    data = newData;\n\t                }\n\t                return data;\n\t            };\n\t            return Trend;\n\t        }();\n\t        exports.Trend = Trend;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var Vector3 = THREE.Vector3;\n\t        var Trend_1 = __webpack_require__(17);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var MAX_ANIMATED_SEGMENTS = 100;\n\t        var EVENTS = {\n\t            REBUILD: \"rebuild\",\n\t            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n\t            ANIMATION_FRAME: \"animationFrame\"\n\t        };\n\t        var TrendSegments = function() {\n\t            function TrendSegments(chartState, trend) {\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.animatedSegmentsIds = [];\n\t                this.segmentsLength = 0;\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForPrepend = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.trend = trend;\n\t                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t                this.tryToRebuildSegments();\n\t                this.bindEvents();\n\t            }\n\t            TrendSegments.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.trend.onChange(function(changedOptions, newData) {\n\t                    return _this.onTrendChangeHandler(changedOptions, newData);\n\t                });\n\t                this.chartState.onZoom(function() {\n\t                    return _this.onZoomHandler();\n\t                });\n\t                this.chartState.onScroll(function() {\n\t                    return _this.recalculateDisplayedRange();\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            TrendSegments.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.appendAnimation && this.appendAnimation.kill();\n\t                this.prependAnimation && this.prependAnimation.kill();\n\t            };\n\t            TrendSegments.prototype.onZoomHandler = function() {\n\t                var segmentsRebuilded = this.tryToRebuildSegments();\n\t                if (!segmentsRebuilded) {\n\t                    this.recalculateDisplayedRange();\n\t                }\n\t            };\n\t            TrendSegments.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n\t                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n\t                if (needToRebuildSegments) {\n\t                    this.tryToRebuildSegments(true);\n\t                    return;\n\t                }\n\t                if (!newData) return;\n\t                var data = this.trend.getData();\n\t                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                isAppend ? this.appendData(newData) : this.prependData(newData);\n\t                this.recalculateDisplayedRange();\n\t            };\n\t            TrendSegments.prototype.getEndSegment = function() {\n\t                return this.segmentsById[this.endSegmentId];\n\t            };\n\t            TrendSegments.prototype.getStartSegment = function() {\n\t                return this.segmentsById[this.startSegmentId];\n\t            };\n\t            TrendSegments.prototype.tryToRebuildSegments = function(force) {\n\t                if (force === void 0) {\n\t                    force = false;\n\t                }\n\t                var options = this.trend.getOptions();\n\t                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n\t                var trendTypesSettings = options.settingsForTypes;\n\t                var trendTypeSettings = trendTypesSettings[trendTypeName];\n\t                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n\t                var needToRebuild = this.segments.length === 0 || force;\n\t                var segmentLength = this.maxSegmentLength;\n\t                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\t                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t                }\n\t                if (!needToRebuild) return false;\n\t                this.maxSegmentLength = segmentLength;\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.segmentsLength = 0;\n\t                this.stopAllAnimations();\n\t                this.appendData(null, true);\n\t                this.recalculateDisplayedRange(true);\n\t                this.ee.emit(EVENTS.REBUILD);\n\t            };\n\t            TrendSegments.prototype.stopAllAnimations = function() {\n\t                this.animatedSegmentsIds = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                if (this.prependAnimation) this.prependAnimation.kill();\n\t                if (this.appendAnimation) this.appendAnimation.kill();\n\t            };\n\t            TrendSegments.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n\t                if (segmentsAreRebuilded === void 0) {\n\t                    segmentsAreRebuilded = false;\n\t                }\n\t                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n\t                var displayedRange = to - from;\n\t                this.firstDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, from - displayedRange, \"startXVal\");\n\t                this.lastDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, to + displayedRange, \"endXVal\");\n\t                if (segmentsAreRebuilded) return;\n\t                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n\t                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t            };\n\t            TrendSegments.prototype.getSegmentsForXValues = function(values) {\n\t                var valueInd = 0;\n\t                var value = values[valueInd];\n\t                var lastValueInd = values.length - 1;\n\t                var results = [];\n\t                var segment = this.getStartSegment();\n\t                if (!segment.hasValue) return [];\n\t                while (segment) {\n\t                    while (value < segment.startXVal) {\n\t                        results.push(void 0);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    while (value > segment.endXVal) {\n\t                        segment = segment.getNext();\n\t                        if (!segment) break;\n\t                    }\n\t                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n\t                    if (valueInPoint) {\n\t                        results.push(segment);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    if (valueInd > lastValueInd) break;\n\t                }\n\t                return results;\n\t            };\n\t            TrendSegments.prototype.onAnimationFrame = function(cb) {\n\t                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t            };\n\t            TrendSegments.prototype.onRebuild = function(cb) {\n\t                return this.ee.subscribe(EVENTS.REBUILD, cb);\n\t            };\n\t            TrendSegments.prototype.onDisplayedRangeChanged = function(cb) {\n\t                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t            };\n\t            TrendSegments.prototype.allocateNextSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var prevSegment = this.segmentsById[this.endSegmentId];\n\t                if (prevSegment && prevSegment.hasValue) {\n\t                    prevSegment.nextId = id;\n\t                    segment.prevId = prevSegment.id;\n\t                }\n\t                this.endSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.push(segment);\n\t                return segment;\n\t            };\n\t            TrendSegments.prototype.allocatePrevSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var nextSegment = this.segmentsById[this.startSegmentId];\n\t                if (nextSegment && nextSegment.hasValue) {\n\t                    nextSegment.prevId = id;\n\t                    segment.nextId = nextSegment.id;\n\t                }\n\t                this.startSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.unshift(segment);\n\t                return segment;\n\t            };\n\t            TrendSegments.prototype.appendData = function(newData, needRebuildSegments) {\n\t                if (needRebuildSegments === void 0) {\n\t                    needRebuildSegments = false;\n\t                }\n\t                var trendData = this.trend.getData();\n\t                if (needRebuildSegments) {\n\t                    newData = trendData;\n\t                    this.animatedSegmentsForAppend = [];\n\t                }\n\t                var startItemInd = trendData.length - newData.length;\n\t                var segment = this.getEndSegment() || this.allocateNextSegment();\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                var itemInd = 0;\n\t                while (itemInd < newData.length) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.appendItem(item);\n\t                    var isLastItem = itemInd == newData.length - 1;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd++;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForAppend.length > 0) {\n\t                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForAppend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocateNextSegment();\n\t                    var prevItem = trendData[startItemInd + itemInd - 1];\n\t                    segment.appendItem(prevItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (needRebuildSegments) {\n\t                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n\t                        var segmentId = _a[_i];\n\t                        var segment_1 = this.segmentsById[segmentId];\n\t                        segment_1.currentAnimationState = segment_1.createAnimationState();\n\t                    }\n\t                    this.animatedSegmentsForAppend = [];\n\t                    return;\n\t                }\n\t                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time);\n\t            };\n\t            TrendSegments.prototype.prependData = function(newData) {\n\t                var trendData = this.trend.getData();\n\t                var segment = this.getStartSegment() || this.segmentsById[0];\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var itemInd = newData.length - 1;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                while (itemInd >= 0) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.prependItem(item);\n\t                    var isLastItem = itemInd == 0;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd--;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForPrepend.length > 0) {\n\t                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForPrepend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocatePrevSegment();\n\t                    var nextItem = trendData[itemInd + 1];\n\t                    segment.prependItem(nextItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time, true);\n\t            };\n\t            TrendSegments.prototype.animate = function(time, isPrepend) {\n\t                var _this = this;\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\t                if (animation && animation.isActive() || time == 0) {\n\t                    if (animation) animation.kill();\n\t                    this.onAnimationFrameHandler(1, isPrepend);\n\t                    animatedSegmentsIds.length = 0;\n\t                    return;\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var ease = animationsOptions.trendChangeEase;\n\t                var objectToAnimate = {\n\t                    animationValue: 0\n\t                };\n\t                animation = TweenLite.to(objectToAnimate, time, {\n\t                    animationValue: 1,\n\t                    ease: ease\n\t                });\n\t                animation.eventCallback(\"onUpdate\", function() {\n\t                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animatedSegmentsIds.length = 0;\n\t                    _this.appendAnimation = null;\n\t                });\n\t                if (isPrepend) {\n\t                    this.prependAnimation = animation;\n\t                } else {\n\t                    this.appendAnimation = animation;\n\t                }\n\t            };\n\t            TrendSegments.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n\t                    var segmentId = animatedSegmentsIds_1[_i];\n\t                    var segment = this.segmentsById[segmentId];\n\t                    for (var key in segment.targetAnimationState) {\n\t                        var targetValue = segment.targetAnimationState[key];\n\t                        var initialValue = segment.initialAnimationState[key];\n\t                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t                        segment.currentAnimationState[key] = currentValue;\n\t                    }\n\t                }\n\t                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t            };\n\t            return TrendSegments;\n\t        }();\n\t        exports.TrendSegments = TrendSegments;\n\t        var TrendSegment = function() {\n\t            function TrendSegment(trendPoints, id) {\n\t                this.isCompleted = false;\n\t                this.items = [];\n\t                this.initialAnimationState = {};\n\t                this.targetAnimationState = {};\n\t                this.currentAnimationState = {};\n\t                this.trendSegments = trendPoints;\n\t                this.id = id;\n\t                this.maxLength = trendPoints.maxSegmentLength;\n\t            }\n\t            TrendSegment.prototype.createAnimationState = function() {\n\t                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n\t                return {\n\t                    xVal: xVal,\n\t                    yVal: yVal,\n\t                    startXVal: startXVal,\n\t                    startYVal: startYVal,\n\t                    endXVal: endXVal,\n\t                    endYVal: endYVal,\n\t                    maxYVal: maxYVal,\n\t                    minYVal: minYVal,\n\t                    maxLength: maxLength\n\t                };\n\t            };\n\t            TrendSegment.prototype.appendItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.push(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var startXVal = items[0].xVal;\n\t                if (item.xVal - startXVal > this.maxLength) return false;\n\t                items.push(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.prependItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.unshift(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var endXVal = items[items.length - 1].xVal;\n\t                if (endXVal - item.xVal > this.maxLength) return false;\n\t                items.unshift(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.complete = function() {\n\t                this.isCompleted = true;\n\t                this.recalculateItems();\n\t                this.items = [];\n\t            };\n\t            TrendSegment.prototype.recalculateItems = function() {\n\t                var items = this.items;\n\t                var itemsLength = items.length;\n\t                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n\t                var endItem = items[itemsLength - 1];\n\t                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n\t                var startXVal, startYVal;\n\t                var startItem = items[0];\n\t                startXVal = startItem.xVal;\n\t                startYVal = startItem.yVal;\n\t                var minX = Math.min(startXVal, endXVal);\n\t                var maxX = Math.max(startXVal, endXVal);\n\t                var middleXVal = minX + (maxX - minX) / 2;\n\t                var minY = Math.min(startYVal, endYVal);\n\t                var maxY = Math.max(startYVal, endYVal);\n\t                var middleYVal = minY + (maxY - minY) / 2;\n\t                var yVals = items.map(function(item) {\n\t                    return item.yVal;\n\t                });\n\t                this.startXVal = startXVal;\n\t                this.startYVal = startYVal;\n\t                this.endXVal = endXVal;\n\t                this.endYVal = endYVal;\n\t                this.xVal = middleXVal;\n\t                this.yVal = middleYVal;\n\t                this.maxYVal = Math.max.apply(Math, yVals);\n\t                this.minYVal = Math.min.apply(Math, yVals);\n\t                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t            };\n\t            TrendSegment.prototype.getNext = function() {\n\t                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t            };\n\t            TrendSegment.prototype.getPrev = function() {\n\t                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t            };\n\t            TrendSegment.prototype.getFrameVal = function() {\n\t                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n\t                return new Vector3(xVal, yVal, 0);\n\t            };\n\t            TrendSegment.prototype.getFramePoint = function() {\n\t                var frameVal = this.getFrameVal();\n\t                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t            };\n\t            return TrendSegment;\n\t        }();\n\t        exports.TrendSegment = TrendSegment;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var Screen = function() {\n\t            function Screen(chartState) {\n\t                this.options = {\n\t                    scrollXVal: 0,\n\t                    scrollX: 0,\n\t                    scrollYVal: 0,\n\t                    scrollY: 0,\n\t                    zoomX: 1,\n\t                    zoomY: 1\n\t                };\n\t                this.currentScrollX = {\n\t                    x: 0\n\t                };\n\t                this.currentScrollY = {\n\t                    y: 0\n\t                };\n\t                this.currentZoomX = {\n\t                    val: 1\n\t                };\n\t                this.currentZoomY = {\n\t                    val: 1\n\t                };\n\t                this.chartState = chartState;\n\t                var _a = chartState.data, w = _a.width, h = _a.height;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.transform({\n\t                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n\t                    zoomY: 1\n\t                });\n\t                this.bindEvents();\n\t            }\n\t            Screen.prototype.getCameraSettings = function() {\n\t                var _a = this.chartState.data, w = _a.width, h = _a.height;\n\t                var FOV = 75;\n\t                var vFOV = FOV * (Math.PI / 180);\n\t                return {\n\t                    FOV: FOV,\n\t                    aspect: w / h,\n\t                    near: .1,\n\t                    far: 5e3,\n\t                    z: h / (2 * Math.tan(vFOV / 2)),\n\t                    x: w / 2,\n\t                    y: h / 2\n\t                };\n\t            };\n\t            Screen.prototype.onZoomFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"zoomFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onScrollFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"scrollFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onTransformationFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"transformationFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.cameraIsMoving = function() {\n\t                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n\t            };\n\t            Screen.prototype.transform = function(options, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n\t                if (scrollX != void 0) this.options.scrollX = scrollX;\n\t                if (scrollY != void 0) this.options.scrollY = scrollY;\n\t                if (zoomX != void 0) this.options.zoomX = zoomX;\n\t                if (zoomY != void 0) this.options.zoomY = zoomY;\n\t                if (scrollX != void 0 || zoomX) {\n\t                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t                    this.options.scrollXVal = options.scrollXVal;\n\t                }\n\t                if (scrollY != void 0 || zoomY) {\n\t                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t                    this.options.scrollYVal = options.scrollYVal;\n\t                }\n\t                if (silent) return;\n\t                this.ee.emit(\"transformationFrame\", options);\n\t                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t                    this.ee.emit(\"scrollFrame\", options);\n\t                }\n\t                if (options.zoomX != void 0 || options.zoomY != void 0) {\n\t                    this.ee.emit(\"zoomFrame\", options);\n\t                }\n\t            };\n\t            Screen.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onChange(function(changedProps) {\n\t                    if (changedProps.xAxis && changedProps.xAxis.range) {\n\t                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n\t                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n\t                    }\n\t                    if (changedProps.yAxis && changedProps.yAxis.range) {\n\t                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n\t                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n\t                    }\n\t                });\n\t                state.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            Screen.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.scrollXAnimation && this.scrollXAnimation.kill();\n\t                this.scrollYAnimation && this.scrollYAnimation.kill();\n\t                this.zoomXAnimation && this.zoomXAnimation.kill();\n\t                this.zoomYAnimation && this.zoomYAnimation.kill();\n\t            };\n\t            Screen.prototype.onScrollXHandler = function(changedProps) {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var isDragMode = state.data.cursor.dragMode;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled && !isDragMode;\n\t                var zoomXChanged = changedProps.xAxis.range.zoom;\n\t                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n\t                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n\t                var range = state.data.xAxis.range;\n\t                var targetX = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollX.x = this.options.scrollX;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollX: _this.currentScrollX.x\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t                        x: targetX,\n\t                        ease: ease\n\t                    });\n\t                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollX.x = targetX;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onScrollYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t                var range = state.data.yAxis.range;\n\t                var targetY = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollY.y = this.options.scrollY;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollY: _this.currentScrollY.y\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t                        y: targetY,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollY.y = targetY;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomXHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.xAxis.range.zoom;\n\t                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomX: _this.currentZoomX.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomX.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.yAxis.range.zoom;\n\t                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomY: _this.currentZoomY.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomY.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomX;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomY;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            Screen.prototype.getValueOnXAxis = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n\t            };\n\t            Screen.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n\t            };\n\t            Screen.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n\t            };\n\t            Screen.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n\t            };\n\t            Screen.prototype.getValueByScreenX = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.getValueByScreenY = function(y) {\n\t                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t            };\n\t            Screen.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            Screen.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            Screen.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            Screen.prototype.getPointByScreenY = function(screenY) {\n\t                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t            };\n\t            Screen.prototype.getTop = function() {\n\t                return this.getPointByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottom = function() {\n\t                return this.getPointByScreenY(0);\n\t            };\n\t            Screen.prototype.getLeft = function() {\n\t                return this.getPointByScreenX(0);\n\t            };\n\t            Screen.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.chartState.data.width);\n\t            };\n\t            Screen.prototype.getTopVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottomVal = function() {\n\t                return this.getValueByScreenY(0);\n\t            };\n\t            Screen.prototype.getCenterYVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height / 2);\n\t            };\n\t            return Screen;\n\t        }();\n\t        exports.Screen = Screen;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        var AXIS_MARK_DEFAULT_OPTIONS = {\n\t            type: \"simple\",\n\t            lineWidth: 1,\n\t            value: 0,\n\t            showValue: false,\n\t            stickToEdges: false,\n\t            lineColor: \"#FFFFFF\",\n\t            title: \"\"\n\t        };\n\t        var AxisMarks = function() {\n\t            function AxisMarks(chartState, axisType) {\n\t                this.items = {};\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.axisType = axisType;\n\t                var marks = this.items;\n\t                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n\t                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n\t                    var options = axisMarksOptions_1[_i];\n\t                    var axisMark = void 0;\n\t                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n\t                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n\t                    if (options.type == \"timeleft\") {\n\t                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t                    } else {\n\t                        axisMark = new AxisMark(chartState, axisType, options);\n\t                    }\n\t                    marks[options.name] = axisMark;\n\t                }\n\t                this.bindEvents();\n\t            }\n\t            AxisMarks.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, newData);\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n\t                if (!newData) return;\n\t                var startVal = newData[0].xVal;\n\t                var endVal = newData[newData.length - 1].xVal;\n\t                var marks = this.items;\n\t                for (var markName in marks) {\n\t                    var mark = marks[markName];\n\t                    var markVal = mark.options.value;\n\t                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n\t                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n\t                }\n\t            };\n\t            AxisMarks.prototype.getItems = function() {\n\t                return this.items;\n\t            };\n\t            AxisMarks.prototype.getItem = function(markName) {\n\t                return this.items[markName];\n\t            };\n\t            return AxisMarks;\n\t        }();\n\t        exports.AxisMarks = AxisMarks;\n\t        var AxisMark = function() {\n\t            function AxisMark(chartState, axisType, options) {\n\t                this.renderOnTrendsChange = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.options = options;\n\t                this.axisType = axisType;\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            AxisMark.prototype.bindEvents = function() {};\n\t            AxisMark.prototype.setOptions = function(newOptions) {\n\t                var value = this.options.value;\n\t                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n\t                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisMark.prototype.getDisplayedVal = function() {\n\t                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n\t                return String(displayedValue !== void 0 ? displayedValue : value);\n\t            };\n\t            AxisMark.prototype.onMarkCrossed = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"markCrossed\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"markCrossed\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"valueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"valueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"onDisplayedValueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"onDisplayedValueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.typeName = \"simple\";\n\t            return AxisMark;\n\t        }();\n\t        exports.AxisMark = AxisMark;\n\t        var AxisTimeleftMark = function(_super) {\n\t            __extends(AxisTimeleftMark, _super);\n\t            function AxisTimeleftMark() {\n\t                _super.apply(this, arguments);\n\t                this.renderOnTrendsChange = true;\n\t            }\n\t            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n\t                var markVal = this.options.value;\n\t                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n\t                var time = markVal - maxXVal;\n\t                if (time < 0) time = 0;\n\t                return Utils_1.Utils.msToTimeString(time);\n\t            };\n\t            AxisTimeleftMark.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t            };\n\t            AxisTimeleftMark.prototype.onTrendsChange = function() {\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisTimeleftMark.typeName = \"timeleft\";\n\t            return AxisTimeleftMark;\n\t        }(AxisMark);\n\t        exports.AxisTimeleftMark = AxisTimeleftMark;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        (function(AXIS_RANGE_TYPE) {\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n\t        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n\t        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n\t        (function(AXIS_TYPE) {\n\t            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n\t            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n\t        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n\t        var AXIS_TYPE = exports.AXIS_TYPE;\n\t        (function(AXIS_DATA_TYPE) {\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n\t        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n\t        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Mesh = THREE.Mesh;\n\t        var Object3D = THREE.Object3D;\n\t        var Widget_1 = __webpack_require__(15);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var AxisWidget = function(_super) {\n\t            __extends(AxisWidget, _super);\n\t            function AxisWidget(state) {\n\t                var _this = this;\n\t                _super.call(this, state);\n\t                this.isDestroyed = false;\n\t                this.object3D = new Object3D();\n\t                this.axisXObject = new Object3D();\n\t                this.axisYObject = new Object3D();\n\t                this.object3D.add(this.axisXObject);\n\t                this.object3D.add(this.axisYObject);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }, 1e3);\n\t                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n\t            }\n\t            AxisWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n\t                    _this.onScrollChange(options.scrollX, options.scrollY);\n\t                }), state.screen.onZoomFrame(function(options) {\n\t                    _this.onZoomFrame(options);\n\t                }), state.onDestroy(function() {\n\t                    return _this.onDestroy();\n\t                }), state.onResize(function() {\n\t                    return _this.onResize();\n\t                }));\n\t            };\n\t            AxisWidget.prototype.onDestroy = function() {\n\t                this.isDestroyed = true;\n\t                this.unbindEvents();\n\t            };\n\t            AxisWidget.prototype.onScrollChange = function(x, y) {\n\t                if (y != void 0) {\n\t                    this.axisYObject.position.y = y;\n\t                    this.axisXObject.position.y = y;\n\t                }\n\t                if (x != void 0) {\n\t                    this.axisYObject.position.x = x;\n\t                    this.updateAxisXRequest();\n\t                }\n\t            };\n\t            AxisWidget.prototype.onResize = function() {\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t            };\n\t            AxisWidget.prototype.setupAxis = function(orientation) {\n\t                var _this = this;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var canvasWidth = 0, canvasHeight = 0;\n\t                if (isXAxis) {\n\t                    this.axisXObject.traverse(function(obj) {\n\t                        return _this.axisXObject.remove(obj);\n\t                    });\n\t                    canvasWidth = visibleWidth * 3;\n\t                    canvasHeight = 50;\n\t                } else {\n\t                    this.axisYObject.traverse(function(obj) {\n\t                        return _this.axisYObject.remove(obj);\n\t                    });\n\t                    canvasWidth = 50;\n\t                    canvasHeight = visibleHeight * 3;\n\t                }\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n\t                if (isXAxis) {\n\t                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisXObject.add(axisMesh);\n\t                } else {\n\t                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisYObject.add(axisMesh);\n\t                }\n\t                this.updateAxis(orientation);\n\t            };\n\t            AxisWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisWidget.prototype.updateAxis = function(orientation) {\n\t                if (this.isDestroyed) return;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n\t                var axisOptions;\n\t                var axisMesh;\n\t                var axisGridParams;\n\t                if (isXAxis) {\n\t                    axisMesh = this.axisXObject.children[0];\n\t                    axisOptions = this.chartState.data.xAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t                } else {\n\t                    axisMesh = this.axisYObject.children[0];\n\t                    axisOptions = this.chartState.data.yAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t                }\n\t                var geometry = axisMesh.geometry;\n\t                var canvasWidth = geometry.parameters.width;\n\t                var canvasHeight = geometry.parameters.height;\n\t                var texture = axisMesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t                if (isXAxis) {\n\t                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t                }\n\t                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t                var startVal = axisGridParams.start - edgeOffset;\n\t                var endVal = axisGridParams.end + edgeOffset;\n\t                ctx.beginPath();\n\t                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n\t                    var displayedValue = \"\";\n\t                    if (isXAxis) {\n\t                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t                        ctx.textAlign = \"center\";\n\t                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n\t                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t                        } else {\n\t                            displayedValue = Number(val.toFixed(14)).toString();\n\t                        }\n\t                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t                    } else {\n\t                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n\t                        ctx.textAlign = \"right\";\n\t                        displayedValue = Number(val.toFixed(14)).toString();\n\t                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n\t                    }\n\t                    ctx.stroke();\n\t                }\n\t                ctx.stroke();\n\t                ctx.closePath();\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisWidget.prototype.onZoomFrame = function(options) {\n\t                if (options.zoomX) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }\n\t                if (options.zoomY) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n\t                }\n\t            };\n\t            AxisWidget.getDateStr = function(timestamp, gridParams) {\n\t                var sec = 1e3;\n\t                var min = sec * 60;\n\t                var hour = min * 60;\n\t                var day = hour * 60;\n\t                var step = gridParams.step;\n\t                var d = new Date(timestamp);\n\t                var tf = function(num) {\n\t                    return Utils_1.Utils.toFixed(num, 2);\n\t                };\n\t                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n\t            };\n\t            AxisWidget.widgetName = \"Axis\";\n\t            return AxisWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisWidget = AxisWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Vector3 = THREE.Vector3;\n\t        var Widget_1 = __webpack_require__(15);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var GridWidget = function(_super) {\n\t            __extends(GridWidget, _super);\n\t            function GridWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.isDestroyed = false;\n\t                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n\t                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n\t                this.initGrid();\n\t                this.updateGrid();\n\t            }\n\t            GridWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateGrid();\n\t                }, 1e3);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return updateGridThrottled();\n\t                }), this.chartState.screen.onZoomFrame(function(options) {\n\t                    updateGridThrottled();\n\t                    _this.onZoomFrame(options);\n\t                }), this.chartState.onDestroy(function() {\n\t                    _this.isDestroyed = true;\n\t                    _this.unbindEvents();\n\t                }), this.chartState.onResize(function() {\n\t                    _this.updateGrid();\n\t                }));\n\t            };\n\t            GridWidget.prototype.initGrid = function() {\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: .1,\n\t                    transparent: true\n\t                });\n\t                var xLinesCount = this.gridSizeH;\n\t                var yLinesCount = this.gridSizeV;\n\t                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t                this.lineSegments.position.setZ(-1);\n\t                this.lineSegments.frustumCulled = false;\n\t            };\n\t            GridWidget.prototype.updateGrid = function() {\n\t                if (this.isDestroyed) return;\n\t                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n\t                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t                var startXVal = axisXGrid.start + gridScrollXVal;\n\t                var startYVal = axisYGrid.start + gridScrollYVal;\n\t                var geometry = this.lineSegments.geometry;\n\t                var vertices = geometry.vertices;\n\t                var lineInd = 0;\n\t                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n\t                    var value = startXVal + i * axisXGrid.step;\n\t                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n\t                    var value = startYVal + i * axisYGrid.step;\n\t                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n\t            };\n\t            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n\t                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n\t                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n\t                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n\t                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.onZoomFrame = function(options) {\n\t                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t            };\n\t            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n\t                var axisRange = axisOptions.range;\n\t                var from = axisRange.from;\n\t                var to = axisRange.to;\n\t                var axisLength = to - from;\n\t                var gridStep = 0;\n\t                var gridStepInPixels = 0;\n\t                var minGridStepInPixels = axisOptions.gridMinSize;\n\t                var axisLengthStr = String(axisLength);\n\t                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n\t                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\t                var gridStepFound = false;\n\t                var digitPos = 0;\n\t                while (!gridStepFound) {\n\t                    var power = intPartLength - digitPos - 1;\n\t                    var multiplier = Math.pow(10, power) || 1;\n\t                    var dividers = [ 1, 2, 5 ];\n\t                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t                        var nextGridStep = multiplier / dividers[dividerInd];\n\t                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t                        if (nextGridStepInPixels >= minGridStepInPixels) {\n\t                            gridStep = nextGridStep;\n\t                            gridStepInPixels = nextGridStepInPixels;\n\t                        } else {\n\t                            gridStepFound = true;\n\t                            if (gridStep === 0) {\n\t                                gridStep = nextGridStep;\n\t                                gridStepInPixels = nextGridStepInPixels;\n\t                            }\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!gridStepFound) digitPos++;\n\t                }\n\t                var gridStart = Math.floor(from / gridStep) * gridStep;\n\t                var gridEnd = Math.floor(to / gridStep) * gridStep;\n\t                return {\n\t                    start: gridStart,\n\t                    end: gridEnd,\n\t                    step: gridStep,\n\t                    stepInPx: gridStepInPixels,\n\t                    length: gridEnd - gridStart,\n\t                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t                };\n\t            };\n\t            GridWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            GridWidget.widgetName = \"Grid\";\n\t            return GridWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.GridWidget = GridWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(17);\n\t        var TrendsLoadingWidget = function(_super) {\n\t            __extends(TrendsLoadingWidget, _super);\n\t            function TrendsLoadingWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLoading;\n\t            };\n\t            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n\t            return TrendsLoadingWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n\t        var TrendLoading = function(_super) {\n\t            __extends(TrendLoading, _super);\n\t            function TrendLoading(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.isActive = false;\n\t                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendLoading.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                this.deactivate();\n\t            }\n\t            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled && chartState.data.animations.enabled;\n\t            };\n\t            TrendLoading.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendLoading.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.onPrependRequest(function() {\n\t                    return _this.activate();\n\t                }));\n\t            };\n\t            TrendLoading.prototype.prependData = function() {\n\t                this.deactivate();\n\t            };\n\t            TrendLoading.prototype.activate = function() {\n\t                var mesh = this.mesh;\n\t                mesh.material.opacity = 1;\n\t                mesh.rotation.z = 0;\n\t                var animation = TweenLite.to(this.mesh.rotation, .5, {\n\t                    z: Math.PI * 2\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animation.restart();\n\t                });\n\t                this.animation = animation;\n\t                this.isActive = true;\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.deactivate = function() {\n\t                this.animation && this.animation.kill();\n\t                this.mesh.material.opacity = 0;\n\t                this.isActive = false;\n\t            };\n\t            TrendLoading.createTexture = function() {\n\t                var h = 64, w = 64;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                    ctx.lineWidth = 5;\n\t                    var center = h / 2;\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n\t                    ctx.stroke();\n\t                });\n\t            };\n\t            TrendLoading.prototype.onZoomFrame = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.updatePosition = function() {\n\t                if (!this.isActive) return;\n\t                var trend = this.trend;\n\t                var segment = trend.segments.getStartSegment();\n\t                var x, y;\n\t                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    x = segment.currentAnimationState.startXVal;\n\t                    y = segment.currentAnimationState.startYVal;\n\t                } else {\n\t                    x = segment.currentAnimationState.xVal - segment.maxLength;\n\t                    y = segment.currentAnimationState.yVal;\n\t                }\n\t                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n\t                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n\t            };\n\t            return TrendLoading;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLoading = TrendLoading;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(15);\n\t        var Object3D = THREE.Object3D;\n\t        var TrendsWidget = function(_super) {\n\t            __extends(TrendsWidget, _super);\n\t            function TrendsWidget(state) {\n\t                _super.call(this, state);\n\t                this.widgets = {};\n\t                this.object3D = new Object3D();\n\t                this.onTrendsChange();\n\t            }\n\t            TrendsWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t                state.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, changedOptions, newData);\n\t                });\n\t            };\n\t            TrendsWidget.prototype.onTrendsChange = function() {\n\t                var trendsOptions = this.chartState.data.trends;\n\t                var TrendWidgetClass = this.getTrendWidgetClass();\n\t                for (var trendName in trendsOptions) {\n\t                    var trendOptions = trendsOptions[trendName];\n\t                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n\t                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t                        this.createTrendWidget(trendName);\n\t                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n\t                        this.destroyTrendWidget(trendName);\n\t                    }\n\t                }\n\t            };\n\t            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n\t                var widget = this.widgets[trendName];\n\t                if (!widget) return;\n\t                widget.onTrendChange(changedOptions);\n\t                if (newData) {\n\t                    var data = this.chartState.getTrend(trendName).getData();\n\t                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t                }\n\t            };\n\t            TrendsWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n\t                var WidgetConstructor = this.getTrendWidgetClass();\n\t                var widget = new WidgetConstructor(this.chartState, trendName);\n\t                this.widgets[trendName] = widget;\n\t                var widgetObject = widget.getObject3D();\n\t                widgetObject.name = trendName;\n\t                this.object3D.add(widget.getObject3D());\n\t            };\n\t            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n\t                this.widgets[trendName].onDestroy();\n\t                delete this.widgets[trendName];\n\t                var widgetObject = this.object3D.getObjectByName(trendName);\n\t                this.object3D.remove(widgetObject);\n\t            };\n\t            return TrendsWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.TrendsWidget = TrendsWidget;\n\t        var TrendWidget = function() {\n\t            function TrendWidget(chartState, trendName) {\n\t                this.chartState = chartState;\n\t                this.trendName = trendName;\n\t                this.unsubscribers = [];\n\t                this.trend = chartState.trendsManager.getTrend(trendName);\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled;\n\t            };\n\t            TrendWidget.prototype.appendData = function(newData) {};\n\t            TrendWidget.prototype.prependData = function(newData) {};\n\t            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n\t            TrendWidget.prototype.onDestroy = function() {\n\t                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n\t                    var unsubscriber = _a[_i];\n\t                    unsubscriber();\n\t                }\n\t            };\n\t            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n\t            TrendWidget.prototype.onZoomFrame = function(options) {};\n\t            TrendWidget.prototype.onTransformationFrame = function(options) {};\n\t            TrendWidget.prototype.onZoom = function() {};\n\t            TrendWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.trend.segments.onAnimationFrame(function(trendPoints) {\n\t                    return _this.onSegmentsAnimate(trendPoints);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n\t                    return _this.onTransformationFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n\t                    return _this.onZoomFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.onZoom(function() {\n\t                    return _this.onZoom();\n\t                }));\n\t            };\n\t            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n\t                this.unsubscribers.push(unsubscriber);\n\t            };\n\t            return TrendWidget;\n\t        }();\n\t        exports.TrendWidget = TrendWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(15);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Line = THREE.Line;\n\t        var Mesh = THREE.Mesh;\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var AxisMarksWidget = function(_super) {\n\t            __extends(AxisMarksWidget, _super);\n\t            function AxisMarksWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.axisMarksWidgets = [];\n\t                this.object3D = new Object3D();\n\t                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n\t                var items = xAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t                items = yAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t            }\n\t            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n\t                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n\t                this.axisMarksWidgets.push(axisMarkWidget);\n\t                this.object3D.add(axisMarkWidget.getObject3D());\n\t            };\n\t            AxisMarksWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n\t                    return _this.updateMarksPositions();\n\t                }), this.chartState.onResize(function() {\n\t                    return _this.updateMarksPositions();\n\t                }));\n\t            };\n\t            AxisMarksWidget.prototype.updateMarksPositions = function() {\n\t                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n\t                    var widget = _a[_i];\n\t                    widget.updatePosition();\n\t                }\n\t            };\n\t            AxisMarksWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarksWidget.widgetName = \"AxisMarks\";\n\t            return AxisMarksWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisMarksWidget = AxisMarksWidget;\n\t        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n\t            var axisMark = axisMarkWidget.axisMark;\n\t            ctx.fillStyle = axisMark.options.lineColor;\n\t            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\t            var xCoord = 15;\n\t            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n\t                ctx.textAlign = \"end\";\n\t                xCoord = axisMarkWidget.indicatorWidth;\n\t            }\n\t            ctx.fillText(axisMark.options.title, xCoord, 20);\n\t            if (!axisMark.options.showValue) return;\n\t            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n\t            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n\t        };\n\t        var INDICATOR_POS_Z = .1;\n\t        var AxisMarkWidget = function() {\n\t            function AxisMarkWidget(chartState, axisMark) {\n\t                this.indicatorWidth = 128;\n\t                this.indicatorHeight = 64;\n\t                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\t                this.chartState = chartState;\n\t                this.axisMark = axisMark;\n\t                this.axisType = axisMark.axisType;\n\t                this.frameValue = axisMark.options.value;\n\t                this.object3D = new Object3D();\n\t                this.object3D.position.setZ(-.1);\n\t                this.line = this.createLine();\n\t                this.object3D.add(this.line);\n\t                this.indicator = this.createIndicator();\n\t                this.object3D.add(this.indicator);\n\t                this.renderIndicator();\n\t                this.updatePosition();\n\t                this.bindEvents();\n\t            }\n\t            AxisMarkWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarkWidget.prototype.createLine = function() {\n\t                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n\t                var lineGeometry = new Geometry();\n\t                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n\t                return new Line(lineGeometry, new LineBasicMaterial({\n\t                    color: Utils_1.Utils.getHexColor(lineColor),\n\t                    linewidth: lineWidth\n\t                }));\n\t            };\n\t            AxisMarkWidget.prototype.createIndicator = function() {\n\t                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n\t            };\n\t            AxisMarkWidget.prototype.renderIndicator = function() {\n\t                var texture = this.indicator.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisMarkWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.axisMark.onDisplayedValueChange(function() {\n\t                    return _this.renderIndicator();\n\t                });\n\t                this.axisMark.onValueChange(function() {\n\t                    return _this.onValueChangeHandler();\n\t                });\n\t            };\n\t            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n\t                var _this = this;\n\t                if (this.moveAnimation) this.moveAnimation.kill();\n\t                var animations = this.chartState.data.animations;\n\t                var targetValue = this.axisMark.options.value;\n\t                var cb = function() {\n\t                    _this.updatePosition();\n\t                };\n\t                if (animations.enabled) {\n\t                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n\t                        frameValue: targetValue,\n\t                        ease: animations.trendChangeEase\n\t                    });\n\t                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.frameValue = targetValue;\n\t                    cb();\n\t                }\n\t            };\n\t            AxisMarkWidget.prototype.updatePosition = function() {\n\t                var chartState = this.chartState;\n\t                var screen = chartState.screen;\n\t                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n\t                var lineGeometry = this.line.geometry;\n\t                var hasStickMode = this.axisMark.options.stickToEdges;\n\t                var _a = this.chartState.data, width = _a.width, height = _a.height;\n\t                if (isXAxis) {\n\t                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t                    this.object3D.position.y = screen.getBottom();\n\t                    lineGeometry.vertices[1].setY(height);\n\t                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n\t                } else {\n\t                    var val = this.frameValue;\n\t                    var bottomVal = screen.getBottomVal();\n\t                    var topVal = screen.getTopVal();\n\t                    var needToStickOnTop = hasStickMode && val > topVal;\n\t                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n\t                    var centerYVal = screen.getCenterYVal();\n\t                    this.object3D.position.x = screen.getLeft();\n\t                    if (needToStickOnTop) {\n\t                        this.object3D.position.y = screen.getTop();\n\t                    } else if (needToStickOnBottom) {\n\t                        this.object3D.position.y = screen.getBottom();\n\t                    } else {\n\t                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t                    }\n\t                    lineGeometry.vertices[1].setX(width);\n\t                    var indicatorPosY = val > centerYVal ? -35 : 10;\n\t                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t                }\n\t                lineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            AxisMarkWidget.typeName = \"simple\";\n\t            return AxisMarkWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(15);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Vector3 = THREE.Vector3;\n\t        var BorderWidget = function(_super) {\n\t            __extends(BorderWidget, _super);\n\t            function BorderWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                var _a = chartState.data, width = _a.width, height = _a.height;\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: 0,\n\t                    transparent: true\n\t                });\n\t                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t            }\n\t            BorderWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            BorderWidget.widgetName = \"Border\";\n\t            return BorderWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.BorderWidget = BorderWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Color = THREE.Color;\n\t        var CANVAS_WIDTH = 128;\n\t        var CANVAS_HEIGHT = 64;\n\t        var OFFSET_X = 15;\n\t        var TrendsIndicatorWidget = function(_super) {\n\t            __extends(TrendsIndicatorWidget, _super);\n\t            function TrendsIndicatorWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendIndicator;\n\t            };\n\t            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n\t            return TrendsIndicatorWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n\t        var TrendIndicator = function(_super) {\n\t            __extends(TrendIndicator, _super);\n\t            function TrendIndicator(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                this.onTrendChange();\n\t            }\n\t            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasIndicator;\n\t            };\n\t            TrendIndicator.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendIndicator.prototype.onTrendChange = function() {\n\t                var trendData = this.trend.getData();\n\t                var lastItem = trendData[trendData.length - 1];\n\t                var texture = this.mesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\t                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n\t                texture.needsUpdate = true;\n\t            };\n\t            TrendIndicator.prototype.initObject = function() {\n\t                var color = new Color(this.trend.getOptions().lineColor);\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"15px Arial\";\n\t                    ctx.fillStyle = color.getStyle();\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n\t            };\n\t            TrendIndicator.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n\t                this.segment = segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n\t                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x + OFFSET_X;\n\t                var y = endPointVector.y;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n\t                if (indicatorIsOutOfScreen) {\n\t                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n\t                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n\t                    y -= 25;\n\t                }\n\t                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n\t            };\n\t            return TrendIndicator;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendIndicator = TrendIndicator;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Trend_1 = __webpack_require__(17);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var MAX_DISPLAYED_SEGMENTS = 2e3;\n\t        var TrendsLineWidget = function(_super) {\n\t            __extends(TrendsLineWidget, _super);\n\t            function TrendsLineWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLine;\n\t            };\n\t            TrendsLineWidget.widgetName = \"TrendsLine\";\n\t            return TrendsLineWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLineWidget = TrendsLineWidget;\n\t        var TrendLine = function(_super) {\n\t            __extends(TrendLine, _super);\n\t            function TrendLine(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeSegmentsInds = [];\n\t                this.displayedSegments = {};\n\t                var options = this.trend.getOptions();\n\t                this.material = new LineBasicMaterial({\n\t                    color: options.lineColor,\n\t                    linewidth: options.lineWidth\n\t                });\n\t                this.initLine();\n\t            }\n\t            TrendLine.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendLine.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            TrendLine.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segments.onRebuild(function() {\n\t                    _this.destroySegments();\n\t                    _this.setupSegments();\n\t                }));\n\t                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n\t                    _this.setupSegments();\n\t                }));\n\t            };\n\t            TrendLine.prototype.initLine = function() {\n\t                var geometry = new Geometry();\n\t                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.scaleXFactor = scaleXFactor;\n\t                this.scaleYFactor = scaleYFactor;\n\t                this.lineSegments = new LineSegments(geometry, this.material);\n\t                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.lineSegments.frustumCulled = false;\n\t                for (var i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\n\t                    geometry.vertices.push(new Vector3(), new Vector3());\n\t                    this.freeSegmentsInds.push(i);\n\t                }\n\t                this.vertices = geometry.vertices;\n\t                this.setupSegments();\n\t            };\n\t            TrendLine.prototype.setupSegments = function() {\n\t                var geometry = this.lineSegments.geometry;\n\t                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.displayedSegments) {\n\t                    var lineSegment = this.displayedSegments[segmentId];\n\t                    var segment_1 = this.trend.segments.segments[lineSegment.segmentId];\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupSegment(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                if (!lineSegment) {\n\t                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n\t                    var ind = this.freeSegmentsInds.pop();\n\t                    lineSegment = this.displayedSegments[segmentId] = {\n\t                        segmentId: segmentId,\n\t                        ind: ind\n\t                    };\n\t                }\n\t                var segmentInd = lineSegment.ind;\n\t                var lineStartVertex = this.vertices[segmentInd * 2];\n\t                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t            };\n\t            TrendLine.prototype.destroySegments = function() {\n\t                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t            };\n\t            TrendLine.prototype.destroySegment = function(segmentId) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t                lineStartVertex.set(0, 0, 0);\n\t                lineEndVertex.set(0, 0, 0);\n\t                delete this.displayedSegments[segmentId];\n\t                this.freeSegmentsInds.push(lineSegment.ind);\n\t            };\n\t            TrendLine.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.lineSegments.scale;\n\t                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t            };\n\t            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                var geometry = this.lineSegments.geometry;\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.displayedSegments[segmentId]) continue;\n\t                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendLine;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLine = TrendLine;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var Vector3 = THREE.Vector3;\n\t        var Mesh = THREE.Mesh;\n\t        var Line = THREE.Line;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var PlaneGeometry = THREE.PlaneGeometry;\n\t        var Trend_1 = __webpack_require__(17);\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var RISE_COLOR = 2927680;\n\t        var FALL_COLOR = 15619379;\n\t        var MARGIN_PERCENT = .3;\n\t        var MAX_CANDLES = 100;\n\t        var TrendsCandlesWidget = function(_super) {\n\t            __extends(TrendsCandlesWidget, _super);\n\t            function TrendsCandlesWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendCandlesWidget;\n\t            };\n\t            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n\t            return TrendsCandlesWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n\t        var TrendCandlesWidget = function(_super) {\n\t            __extends(TrendCandlesWidget, _super);\n\t            function TrendCandlesWidget(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeCandlesInds = [];\n\t                this.candlesPool = [];\n\t                this.candles = {};\n\t                this.initObject();\n\t            }\n\t            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n\t            };\n\t            TrendCandlesWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendCandlesWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segments.onRebuild(function() {\n\t                    _this.destroyCandles();\n\t                    _this.setupCandles();\n\t                }));\n\t                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n\t                    _this.setupCandles();\n\t                }));\n\t            };\n\t            TrendCandlesWidget.prototype.initObject = function() {\n\t                var stateData = this.chartState.data;\n\t                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.scaleXFactor = scaleXFactor;\n\t                this.scaleYFactor = scaleYFactor;\n\t                this.object3D = new Object3D();\n\t                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.object3D.frustumCulled = false;\n\t                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t                this.setupCandles();\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandles = function() {\n\t                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.candles) {\n\t                    var segment_1 = this.candles[segmentId].segment;\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupCandle(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandles = function() {\n\t                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n\t                var candle = this.candles[segmentId];\n\t                this.object3D.remove(candle.getObject3D());\n\t                delete this.candles[segmentId];\n\t            };\n\t            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.object3D.scale;\n\t                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t            };\n\t            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.candles[segmentId]) continue;\n\t                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t                    this.setupCandle(segmentId, segmentState);\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n\t                var candleInd = candleId % MAX_CANDLES;\n\t                var candle = this.candlesPool[candleInd];\n\t                if (!candle) {\n\t                    candle = this.candlesPool[candleInd] = new CandleWidget();\n\t                }\n\t                if (!this.candles[candleId]) {\n\t                    this.candles[candleId] = candle;\n\t                    this.object3D.add(candle.getObject3D());\n\t                }\n\t                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t                candle.setSegment(segmentState);\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendCandlesWidget;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendCandlesWidget = TrendCandlesWidget;\n\t        var CandleWidget = function() {\n\t            function CandleWidget() {\n\t                this.initObject();\n\t            }\n\t            CandleWidget.prototype.getObject3D = function() {\n\t                return this.rect;\n\t            };\n\t            CandleWidget.prototype.setSegment = function(segment) {\n\t                this.segment = segment;\n\t                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\t                var geometry = this.rect.geometry;\n\t                var material = this.rect.material;\n\t                var width = segment.endXVal - segment.startXVal;\n\t                width -= width * MARGIN_PERCENT;\n\t                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n\t                leftTop.set(-width / 2, height / 2, 0);\n\t                rightTop.set(width / 2, height / 2, 0);\n\t                leftBottom.set(-width / 2, -height / 2, 0);\n\t                rightBottom.set(width / 2, -height / 2, 0);\n\t                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t                    leftBottom.setY(leftBottom.y + 1);\n\t                    rightBottom.setY(rightBottom.y + 1);\n\t                }\n\t                material.color.set(color);\n\t                geometry.verticesNeedUpdate = true;\n\t                var vLineGeometry = this.vLine.geometry;\n\t                var vLineMaterial = this.vLine.material;\n\t                var lineTop = segment.maxYVal - segment.yVal;\n\t                var lineBottom = segment.minYVal - segment.yVal;\n\t                vLineGeometry.vertices[0].set(0, lineTop, 0);\n\t                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t                vLineMaterial.color.set(color);\n\t                vLineGeometry.verticesNeedUpdate = true;\n\t                var hLineGeometry = this.hLine.geometry;\n\t                var hLineMaterial = this.hLine.material;\n\t                var lineLeft = -width / 2;\n\t                var lineRight = width / 2;\n\t                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t                hLineMaterial.color.set(color);\n\t                hLineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            CandleWidget.prototype.initObject = function() {\n\t                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n\t                var vLineGeometry = new Geometry();\n\t                var hLineGeometry = new Geometry();\n\t                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.rect.add(this.vLine);\n\t                this.rect.add(this.hLine);\n\t            };\n\t            return CandleWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(17);\n\t        var TrendsBeaconWidget = function(_super) {\n\t            __extends(TrendsBeaconWidget, _super);\n\t            function TrendsBeaconWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendBeacon;\n\t            };\n\t            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n\t            return TrendsBeaconWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n\t        var TrendBeacon = function(_super) {\n\t            __extends(TrendBeacon, _super);\n\t            function TrendBeacon(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                if (state.data.animations.enabled) {\n\t                    this.animate();\n\t                }\n\t                this.updatePosition();\n\t            }\n\t            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendBeacon.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendBeacon.prototype.onTrendChange = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return _this.updatePosition();\n\t                }));\n\t                this.bindEvent(this.chartState.onChange(function(changedProps) {\n\t                    return _this.onStateChange(changedProps);\n\t                }));\n\t                this.bindEvent(this.chartState.onDestroy(function() {\n\t                    return _this.stopAnimation();\n\t                }));\n\t            };\n\t            TrendBeacon.prototype.initObject = function() {\n\t                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                light.scale.set(.2, .2, 1);\n\t                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture()\n\t                })));\n\t                this.segment = this.trend.segments.getEndSegment();\n\t            };\n\t            TrendBeacon.prototype.animate = function() {\n\t                var _this = this;\n\t                this.animated = true;\n\t                var object = this.mesh;\n\t                var animationObject = {\n\t                    scale: object.scale.x,\n\t                    opacity: object.material.opacity\n\t                };\n\t                this.mesh.scale.set(.1, .1, 1);\n\t                setTimeout(function() {\n\t                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n\t                        scale: 1,\n\t                        opacity: 0\n\t                    });\n\t                    animation.eventCallback(\"onUpdate\", function() {\n\t                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n\t                        object.material.opacity = animationObject.opacity;\n\t                    }).eventCallback(\"onComplete\", function() {\n\t                        _this.animation && animation.restart();\n\t                    });\n\t                }, 500);\n\t            };\n\t            TrendBeacon.prototype.stopAnimation = function() {\n\t                this.animated = false;\n\t                this.animation && this.animation.kill();\n\t                this.animation = null;\n\t            };\n\t            TrendBeacon.createTexture = function() {\n\t                var h = 32, w = 32;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n\t                    ctx.fillStyle = \"white\";\n\t                    ctx.fill();\n\t                });\n\t            };\n\t            TrendBeacon.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n\t                this.segment = trendsSegments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onStateChange = function(changedProps) {\n\t                if (!changedProps.animations) return;\n\t                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n\t                if (changedProps.animations.enabled) {\n\t                    this.animate();\n\t                } else {\n\t                    this.stopAnimation();\n\t                }\n\t            };\n\t            TrendBeacon.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var xVal, yVal;\n\t                var currentAnimationState = this.segment.currentAnimationState;\n\t                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    xVal = currentAnimationState.endXVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                } else {\n\t                    xVal = currentAnimationState.xVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                }\n\t                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n\t                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n\t                this.mesh.position.set(x, endPointVector.y, .1);\n\t            };\n\t            return TrendBeacon;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendBeacon = TrendBeacon;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(3));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var EventEmmiter_1 = __webpack_require__(13);\n\t        exports.DEFAULT_CONFIG = {\n\t            installPluginWidgets: true\n\t        };\n\t        var ChartPlugin = function() {\n\t            function ChartPlugin(options, config) {\n\t                if (config === void 0) {\n\t                    config = {};\n\t                }\n\t                this.unsubscribers = [];\n\t                this.initialState = options;\n\t                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n\t                this.name = this.constructor.NAME;\n\t                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n\t            }\n\t            ChartPlugin.prototype.setupChartState = function(chartState) {\n\t                var _this = this;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n\t                    return _this.onInitialStateAppliedHandler(initialState);\n\t                }), this.chartState.onReady(function() {\n\t                    return _this.onChartReadyHandler();\n\t                }), this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n\t                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n\t                }));\n\t            };\n\t            ChartPlugin.prototype.getOptions = function() {\n\t                return this.chartState.data.pluginsState[this.name];\n\t            };\n\t            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n\t            ChartPlugin.prototype.onChartReadyHandler = function() {};\n\t            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n\t            ChartPlugin.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t            };\n\t            ChartPlugin.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartPlugin.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartPlugin.NAME = \"\";\n\t            ChartPlugin.pluginWidgets = [];\n\t            return ChartPlugin;\n\t        }();\n\t        exports.ChartPlugin = ChartPlugin;\n\t    } ]);\n\t});\n\t\n\t\n\t//# sourceMappingURL=ThreeChart.js.map\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar three_chart_1 = __webpack_require__(2);\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar TrendsMarksPlugin_1 = __webpack_require__(1);\r\n\tvar MAX_MARKS_IN_ROW = 3;\r\n\t/**\r\n\t * widget for drawing trends marks for all trends\r\n\t */\r\n\tvar TrendsMarksWidget = (function (_super) {\r\n\t    __extends(TrendsMarksWidget, _super);\r\n\t    function TrendsMarksWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsMarksWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendMarksWidget;\r\n\t    };\r\n\t    TrendsMarksWidget.widgetName = \"TrendsMarks\";\r\n\t    return TrendsMarksWidget;\r\n\t}(three_chart_1.TrendsWidget));\r\n\texports.TrendsMarksWidget = TrendsMarksWidget;\r\n\t/**\r\n\t * widget for drawing trend marks for one trend\r\n\t */\r\n\tvar TrendMarksWidget = (function (_super) {\r\n\t    __extends(TrendMarksWidget, _super);\r\n\t    function TrendMarksWidget(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        this.marksWidgets = {};\r\n\t        this.object3D = new Object3D();\r\n\t        this.onMarksChange();\r\n\t    }\r\n\t    TrendMarksWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendMarksWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.getTrendsMarksPlugin().onChange(function () { return _this.onMarksChange(); });\r\n\t    };\r\n\t    TrendMarksWidget.prototype.getTrendsMarksPlugin = function () {\r\n\t        return this.chartState.getPlugin(TrendsMarksPlugin_1.TrendsMarksPlugin.NAME);\r\n\t    };\r\n\t    TrendMarksWidget.prototype.onMarksChange = function () {\r\n\t        var marksItems = this.getTrendsMarksPlugin().getItems();\r\n\t        var widgets = this.marksWidgets;\r\n\t        var actualMarksNames = [];\r\n\t        for (var markName in marksItems) {\r\n\t            actualMarksNames.push(markName);\r\n\t            if (!widgets[markName])\r\n\t                this.createMarkWidget(marksItems[markName]);\r\n\t        }\r\n\t        for (var markName in this.marksWidgets) {\r\n\t            if (actualMarksNames.indexOf(markName) !== -1)\r\n\t                continue;\r\n\t            this.destroyMarkWidget(markName);\r\n\t        }\r\n\t    };\r\n\t    TrendMarksWidget.prototype.createMarkWidget = function (mark) {\r\n\t        if (!mark.segment)\r\n\t            return;\r\n\t        var markWidget = new TrendMarkWidget(this.chartState, mark);\r\n\t        this.marksWidgets[mark.options.name] = markWidget;\r\n\t        this.object3D.add(markWidget.getObject3D());\r\n\t    };\r\n\t    TrendMarksWidget.prototype.destroyMarkWidget = function (markName) {\r\n\t        this.object3D.remove(this.marksWidgets[markName].getObject3D());\r\n\t        delete this.marksWidgets[markName];\r\n\t    };\r\n\t    TrendMarksWidget.prototype.onZoomFrame = function () {\r\n\t        var widgets = this.marksWidgets;\r\n\t        for (var markName in widgets) {\r\n\t            widgets[markName].onZoomFrameHandler();\r\n\t        }\r\n\t    };\r\n\t    TrendMarksWidget.prototype.onSegmentsAnimate = function () {\r\n\t        var widgets = this.marksWidgets;\r\n\t        for (var markName in widgets) {\r\n\t            widgets[markName].onSegmentsAnimate();\r\n\t        }\r\n\t    };\r\n\t    return TrendMarksWidget;\r\n\t}(three_chart_1.TrendWidget));\r\n\texports.TrendMarksWidget = TrendMarksWidget;\r\n\t/**\r\n\t * widget for drawing one trend mark\r\n\t */\r\n\tvar TrendMarkWidget = (function () {\r\n\t    function TrendMarkWidget(chartState, trendMark) {\r\n\t        this.markHeight = 74;\r\n\t        this.markWidth = 150;\r\n\t        this.position = { lineHeight: 30, x: 0, y: 0 };\r\n\t        this.chartState = chartState;\r\n\t        this.mark = trendMark;\r\n\t        this.initObject();\r\n\t        this.show();\r\n\t    }\r\n\t    TrendMarkWidget.prototype.initObject = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        this.markMesh = this.createMarkMesh();\r\n\t        this.line = this.createMarkLine();\r\n\t        this.object3D.add(this.markMesh);\r\n\t        this.object3D.add(this.line);\r\n\t    };\r\n\t    TrendMarkWidget.prototype.createMarkMesh = function () {\r\n\t        var _a = this, markHeight = _a.markHeight, markWidth = _a.markWidth;\r\n\t        var mark = this.mark.options;\r\n\t        var isTopSide = mark.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP;\r\n\t        var texture = three_chart_1.Utils.createPixelPerfectTexture(markWidth, markHeight, function (ctx) {\r\n\t            var circleOffset = isTopSide ? 30 : 0;\r\n\t            var circleR = 22;\r\n\t            var circleX = markWidth / 2;\r\n\t            var circleY = circleOffset + circleR;\r\n\t            var textOffset = isTopSide ? 10 : circleR * 2 + 15;\r\n\t            // title and description\r\n\t            ctx.beginPath();\r\n\t            ctx.textAlign = 'center';\r\n\t            ctx.font = \"11px Arial\";\r\n\t            ctx.fillStyle = 'rgba(255,255,255, 0.6)';\r\n\t            ctx.fillText(mark.title, circleX, textOffset);\r\n\t            ctx.fillStyle = mark.descriptionColor;\r\n\t            ctx.fillText(mark.description, circleX, textOffset + 12);\r\n\t            // icon circle\r\n\t            ctx.beginPath();\r\n\t            ctx.fillStyle = mark.iconColor;\r\n\t            ctx.arc(circleX, circleY, circleR, 0, 2 * Math.PI);\r\n\t            ctx.fill();\r\n\t            // icon text\r\n\t            ctx.font = \"19px Arial\";\r\n\t            ctx.fillStyle = 'rgb(255, 255, 255)';\r\n\t            ctx.fillText(mark.icon, circleX, circleY + 7);\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        var mesh = new Mesh(new THREE.PlaneGeometry(markWidth, markHeight), material);\r\n\t        var offset = this.mark.options.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP ? this.mark.offset : -this.mark.offset;\r\n\t        // mesh.position.setY(markHeight / 2 + offset);\r\n\t        return mesh;\r\n\t    };\r\n\t    TrendMarkWidget.prototype.createMarkLine = function () {\r\n\t        var lineGeometry = new Geometry();\r\n\t        lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, this.mark.offset, 0));\r\n\t        lineGeometry.computeLineDistances();\r\n\t        var lineMaterial = new THREE.LineDashedMaterial({ dashSize: 1, gapSize: 4, transparent: true, opacity: 0.6 });\r\n\t        var line = new THREE.Line(lineGeometry, lineMaterial);\r\n\t        line.position.setZ(-0.1);\r\n\t        return line;\r\n\t    };\r\n\t    TrendMarkWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendMarkWidget.prototype.onSegmentsAnimate = function () {\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendMarkWidget.prototype.onZoomFrameHandler = function () {\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendMarkWidget.prototype.updatePosition = function () {\r\n\t        if (!this.mark.segment)\r\n\t            return;\r\n\t        var mark = this.mark;\r\n\t        var meshMaterial = this.markMesh.material;\r\n\t        var lineMaterial = this.line.material;\r\n\t        if (mark.row >= MAX_MARKS_IN_ROW - 1) {\r\n\t            meshMaterial.opacity = 0;\r\n\t            lineMaterial.opacity = 0;\r\n\t        }\r\n\t        else {\r\n\t            meshMaterial.opacity = 1;\r\n\t            lineMaterial.opacity = 1;\r\n\t        }\r\n\t        var screen = this.chartState.screen;\r\n\t        var posX = screen.getPointOnXAxis(mark.xVal);\r\n\t        var posY = screen.getPointOnYAxis(mark.yVal);\r\n\t        var lineGeometry = this.line.geometry;\r\n\t        if (mark.options.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP) {\r\n\t            this.markMesh.position.setY(this.markHeight / 2 + mark.offset);\r\n\t            lineGeometry.vertices[1].setY(mark.offset);\r\n\t        }\r\n\t        else {\r\n\t            this.markMesh.position.setY(-mark.offset - this.markHeight / 2);\r\n\t            lineGeometry.vertices[1].setY(-mark.offset);\r\n\t        }\r\n\t        lineGeometry.verticesNeedUpdate = true;\r\n\t        lineGeometry.lineDistancesNeedUpdate = true;\r\n\t        lineGeometry.computeLineDistances();\r\n\t        this.object3D.position.set(posX, posY, 0);\r\n\t    };\r\n\t    TrendMarkWidget.prototype.show = function () {\r\n\t        if (!this.mark.segment)\r\n\t            return;\r\n\t        this.updatePosition();\r\n\t        var animations = this.chartState.data.animations;\r\n\t        var time = animations.enabled ? 1 : 0;\r\n\t        this.object3D.scale.set(0.01, 0.01, 1);\r\n\t        TweenLite.to(this.object3D.scale, time, { x: 1, y: 1, ease: Elastic.easeOut });\r\n\t    };\r\n\t    return TrendMarkWidget;\r\n\t}());\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap eb0767f1c63b3799d773\n **/","export * from './TrendsMarksPlugin';\n\n\n/** WEBPACK FOOTER **\n ** ./plugins/src/TrendsMarksPlugin/index.ts\n **/","\nimport Vector3 = THREE.Vector3;\nimport { ChartPlugin, ChartWidget, TrendSegment, TREND_TYPE, Utils, ChartState } from 'three-chart';\nimport { TrendsMarksWidget } from './TrendsMarksWidget';\n\nexport enum TREND_MARK_SIDE {TOP, BOTTOM}\nexport enum EVENTS {CHANGE}\nexport type TTrendsMarksPluginOptions = {items: ITrendMarkOptions[]};\n\nexport interface ITrendMarkOptions {\n\ttrendName: string,\n\tvalue: number,\n\tname?: string,\n\ttitle?: string\n\tdescription?: string,\n\tdescriptionColor?: string,\n\ticon?: string,\n\ticonColor?: string,\n\torientation?: TREND_MARK_SIDE,\n\twidth?: number,\n\theight?: number,\n\t/**\n\t * min distance between trend and mark\n\t */\n\toffset?: number,\n\t/**\n\t * space between marks\n\t */\n\tmargin?: number\n}\n\nconst AXIS_MARK_DEFAULT_OPTIONS: ITrendMarkOptions = {\n\ttrendName: '',\n\ttitle: '',\n\tdescription: '',\n\tdescriptionColor: 'rgb(40,136,75)',\n\tvalue: 0,\n\ticonColor: 'rgb(255, 102, 217)',\n\torientation: TREND_MARK_SIDE.TOP,\n\twidth: 65,\n\theight: 80,\n\toffset: 40,\n\tmargin: 20\n};\n\n\nexport class TrendsMarksPlugin extends ChartPlugin {\n\tstatic NAME = 'TrendsMarks';\n\tstatic pluginWidgets = [TrendsMarksWidget] as typeof ChartWidget[];\n\n\tprivate items: {[name: string]: TrendMark} = {};\n\tprivate rects: {[name: string]: number[]} = {};\n\n\tconstructor(trendsMarksPluginOptions: TTrendsMarksPluginOptions) {\n\t\tsuper(trendsMarksPluginOptions);\n\t}\n\n\tprotected onInitialStateApplied() {\n\t\tthis.bindEvents();\n\t\tthis.onMarksChangeHandler();\n\t}\n\n\tprotected onStateChanged() {\n\t\tthis.onMarksChangeHandler();\n\t}\n\n\n\tgetOptions(): TTrendsMarksPluginOptions {\n\t\treturn super.getOptions() as TTrendsMarksPluginOptions;\n\t}\n\n\tgetItems() {\n\t\treturn this.items;\n\t}\n\n\tgetItem(markName: string) {\n\t\treturn this.items[markName];\n\t}\n\n\tcreateMark(options: ITrendMarkOptions) {\n\t\tvar marksOptions = this.getOptions().items;\n\t\tvar newMarkOptions = marksOptions.concat([options]);\n\t\tthis.chartState.setState({pluginsState: {[this.name]: {items: newMarkOptions}}});\n\t}\n\n\tonChange(cb: () => any) {\n\t\treturn this.ee.subscribe(EVENTS[EVENTS.CHANGE], cb);\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.trendsManager.onSegmentsRebuilded(() => this.updateMarksSegments());\n\t\tthis.chartState.screen.onZoomFrame(() => this.calclulateMarksPositions());\n\t}\n\n\tprotected onInitialStateAppliedHandler() {\n\t\tthis.onMarksChangeHandler();\n\t}\n\n\tprivate onMarksChangeHandler() {\n\t\tvar trendsMarksOptions = this.getOptions().items;\n\t\tlet actualMarksNames: string[] = [];\n\t\tfor (let options of trendsMarksOptions) {\n\t\t\tvar marks = this.items;\n\n\t\t\t// set mark name\n\t\t\tif (!options.name) {\n\t\t\t\toptions.name = Utils.getUid().toString();\n\t\t\t\tactualMarksNames.push(options.name);\n\t\t\t\tif (marks[options.name]) Utils.error('duplicated mark name ' + options.name);\n\t\t\t} else if (marks[options.name]) {\n\t\t\t\tactualMarksNames.push(options.name);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\toptions = Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\n\t\t\tlet mark = new TrendMark(this.chartState, options);\n\t\t\tmarks[options.name] = mark;\n\t\t}\n\n\t\t// delete not relevant marks\n\t\tfor (let markName in this.items) {\n\t\t\tif (actualMarksNames.indexOf(markName) != -1) continue;\n\t\t\tdelete this.items[markName];\n\t\t}\n\t\tthis.updateMarksSegments();\n\t\tthis.ee.emit(EVENTS[EVENTS.CHANGE]);\n\t}\n\n\n\tprivate calclulateMarksPositions() {\n\t\tthis.rects = {};\n\t\tfor (let markName in this.items) {\n\t\t\tthis.createMarkRect(this.items[markName]);\n\t\t}\n\t}\n\n\tprivate createMarkRect(mark: TrendMark) {\n\t\tif (!mark.segment) return;\n\n\t\tlet state = this.chartState;\n\t\tlet options = mark.options;\n\t\tlet {width, height, offset, name} = options;\n\t\tlet left = state.getPointOnXAxis(mark.xVal) - width / 2;\n\t\tlet top = state.getPointOnYAxis(mark.yVal);\n\t\tlet isTopSideMark = options.orientation == TREND_MARK_SIDE.TOP;\n\t\tlet newOffset: number;\n\t\tlet row = 0;\n\n\t\tif (isTopSideMark) {\n\t\t\ttop += offset + height;\n\t\t} else {\n\t\t\ttop -= offset;\n\t\t}\n\n\t\tlet markRect = [left, top, width, height];\n\t\tlet hasIntersection = false;\n\t\tdo {\n\t\t\tfor (let markName in this.rects) {\n\t\t\t\tlet rect = this.rects[markName];\n\t\t\t\thasIntersection = Utils.rectsIntersect(rect, markRect);\n\t\t\t\tif (!hasIntersection) continue;\n\t\t\t\tif (isTopSideMark) {\n\t\t\t\t\tmarkRect[1] = rect[1] + markRect[3] + options.margin;\n\t\t\t\t} else {\n\t\t\t\t\tmarkRect[1] = rect[1] - rect[3] - options.margin;\n\t\t\t\t}\n\t\t\t\trow++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (hasIntersection);\n\n\t\tif (isTopSideMark) {\n\t\t\tnewOffset = markRect[1] - markRect[3] - state.getPointOnYAxis(mark.yVal);\n\t\t} else {\n\t\t\tnewOffset = state.getPointOnYAxis(mark.yVal) - markRect[1];\n\t\t}\n\n\t\tmark._setOffset(newOffset);\n\t\tmark._setRow(row);\n\t\tthis.rects[name] = markRect;\n\t}\n\n\tprivate updateMarksSegments() {\n\t\tlet chartState = this.chartState;\n\t\tlet trends = chartState.trendsManager.trends;\n\t\tfor (let trendName in trends) {\n\t\t\tvar marks = this.getTrendMarks(trendName);\n\t\t\tvar marksArr: TrendMark[] = [];\n\t\t\tvar xVals: number[] = [];\n\t\t\tfor (let markName in marks) {\n\t\t\t\tlet mark = marks[markName];\n\t\t\t\txVals.push(mark.options.value);\n\t\t\t\tmarksArr.push(mark);\n\t\t\t\tmark._setSegment(null);\n\t\t\t}\n\t\t\tmarksArr.sort((a, b) => a.options.value - b.options.value);\n\t\t\tlet trend = chartState.getTrend(trendName);\n\t\t\tlet points = trend.segments.getSegmentsForXValues(xVals.sort((a, b) => a - b));\n\t\t\tfor (let markInd = 0; markInd < marksArr.length; markInd++) {\n\t\t\t\tmarksArr[markInd]._setSegment(points[markInd]);\n\t\t\t}\n\t\t}\n\t\tthis.calclulateMarksPositions();\n\t}\n\n\tprivate getTrendMarks(trendName: string): TrendMark[] {\n\t\tlet trendMarks: TrendMark[] = [];\n\t\tfor (let markName in this.items) {\n\t\t\tif (this.items[markName].options.trendName != trendName) continue;\n\t\t\ttrendMarks.push(this.items[markName]);\n\t\t}\n\t\treturn trendMarks;\n\t}\n\n}\n\nexport class TrendMark {\n\toptions: ITrendMarkOptions;\n\tsegment: TrendSegment;\n\txVal: number;\n\tyVal: number;\n\toffset: number;\n\trow = 0;\n\tprotected chartState: ChartState;\n\n\tconstructor(chartState: ChartState, options: ITrendMarkOptions) {\n\t\tthis.options = options;\n\t\tthis.chartState = chartState;\n\t}\n\n\n\t/**\n\t * only for internal usage\n\t */\n\t_setSegment(segment: TrendSegment) {\n\t\tthis.segment = segment;\n\t\tif (!segment) return;\n\n\t\tlet trend = this.chartState.getTrend(this.options.trendName)\n\n\t\tif (trend.getOptions().type == TREND_TYPE.LINE) {\n\t\t\tthis.xVal = segment.endXVal;\n\t\t\tthis.yVal = segment.endYVal;\n\t\t} else if (this.options.orientation == TREND_MARK_SIDE.TOP) {\n\t\t\tthis.xVal = segment.xVal;\n\t\t\tthis.yVal = segment.maxYVal;\n\t\t} else {\n\t\t\tthis.xVal = segment.xVal;\n\t\t\tthis.yVal = segment.minYVal;\n\t\t}\n\t}\n\n\t_setOffset(offset: number) {\n\t\tthis.offset = offset;\n\t}\n\n\t_setRow(row: number) {\n\t\tthis.row = row;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.ts\n **/","module.exports = require(\"./ThreeChart\")\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-chart/build/index.js\n ** module id = 2\n ** module chunks = 0\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n    if (typeof exports === \"object\" && typeof module === \"object\") module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"ThreeChart\"] = factory(); else root[\"ThreeChart\"] = factory();\n})(this, function() {\n    return function(modules) {\n        var installedModules = {};\n        function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n            var module = installedModules[moduleId] = {\n                exports: {},\n                id: moduleId,\n                loaded: false\n            };\n            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n            module.loaded = true;\n            return module.exports;\n        }\n        __webpack_require__.m = modules;\n        __webpack_require__.c = installedModules;\n        __webpack_require__.p = \"\";\n        return __webpack_require__(0);\n    }([ function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(1));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(2));\n        __export(__webpack_require__(21));\n        __export(__webpack_require__(20));\n        __export(__webpack_require__(19));\n        __export(__webpack_require__(12));\n        __export(__webpack_require__(17));\n        __export(__webpack_require__(18));\n        __export(__webpack_require__(16));\n        __export(__webpack_require__(14));\n        __export(__webpack_require__(15));\n        __export(__webpack_require__(33));\n        __export(__webpack_require__(25));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        __webpack_require__(3);\n        var PerspectiveCamera = THREE.PerspectiveCamera;\n        var State_1 = __webpack_require__(12);\n        var Utils_1 = __webpack_require__(14);\n        var AxisWidget_1 = __webpack_require__(22);\n        var GridWidget_1 = __webpack_require__(23);\n        var TrendsLoadingWidget_1 = __webpack_require__(24);\n        var AxisMarksWidget_1 = __webpack_require__(26);\n        var BorderWidget_1 = __webpack_require__(27);\n        var TrendsIndicatorWidget_1 = __webpack_require__(28);\n        var TrendsLineWidget_1 = __webpack_require__(29);\n        var TrendsCandleWidget_1 = __webpack_require__(30);\n        var TrendsBeaconWidget_1 = __webpack_require__(31);\n        var deps_1 = __webpack_require__(32);\n        exports.MAX_DATA_LENGTH = 2692e3;\n        var Chart = function() {\n            function Chart(state, $container, plugins) {\n                var _this = this;\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.widgets = [];\n                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n                if (!$container) {\n                    Utils_1.Utils.error(\"$el must be set\");\n                }\n                var style = getComputedStyle($container);\n                state.width = parseInt(style.width);\n                state.height = parseInt(style.height);\n                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n                    return _this.zoom(zoomValue, origin);\n                }, 200);\n                this.$container = $container;\n                this.init($container);\n            }\n            Chart.installWidget = function(Widget) {\n                if (!Widget.widgetName) {\n                    Utils_1.Utils.error(\"unnamed widget\");\n                }\n                this.installedWidgets[Widget.widgetName] = Widget;\n            };\n            Chart.prototype.init = function($container) {\n                var state = this.state;\n                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n                this.scene = new THREE.Scene();\n                this.isStopped = !autoRender.enabled;\n                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n                    antialias: true,\n                    alpha: true\n                });\n                renderer.setPixelRatio(Chart.devicePixelRatio);\n                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n                renderer.setSize(w, h);\n                $container.appendChild(renderer.domElement);\n                this.$el = renderer.domElement;\n                this.$el.style.display = \"block\";\n                if (showStats) {\n                    this.stats = new Stats();\n                    $container.appendChild(this.stats.domElement);\n                }\n                this.setupCamera();\n                var widgetsClasses = this.state.widgetsClasses;\n                for (var widgetName in widgetsClasses) {\n                    var widgetOptions = this.state.data.widgets[widgetName];\n                    if (!widgetOptions.enabled) continue;\n                    var WidgetConstructor = widgetsClasses[widgetName];\n                    var widget = new WidgetConstructor(this.state);\n                    this.scene.add(widget.getObject3D());\n                    this.widgets.push(widget);\n                }\n                this.bindEvents();\n                this.renderLoop();\n            };\n            Chart.prototype.renderLoop = function() {\n                var _this = this;\n                if (this.isDestroyed) return;\n                this.stats && this.stats.begin();\n                this.render();\n                if (this.isStopped) return;\n                var fpsLimit = this.state.data.autoRender.fps;\n                if (fpsLimit) {\n                    var delay = 1e3 / fpsLimit;\n                    setTimeout(function() {\n                        return requestAnimationFrame(function() {\n                            return _this.renderLoop();\n                        });\n                    }, delay);\n                } else {\n                    requestAnimationFrame(function() {\n                        return _this.renderLoop();\n                    });\n                }\n                this.stats && this.stats.end();\n            };\n            Chart.prototype.render = function() {\n                this.renderer.render(this.scene, this.camera);\n            };\n            Chart.prototype.stop = function() {\n                this.isStopped = true;\n            };\n            Chart.prototype.run = function() {\n                this.isStopped = false;\n                this.renderLoop();\n            };\n            Chart.prototype.destroy = function() {\n                this.isDestroyed = true;\n                this.stop();\n                this.state.destroy();\n                this.unbindEvents();\n                try {\n                    this.renderer.forceContextLoss();\n                } catch (wtf) {}\n                this.renderer.context = null;\n                this.renderer.domElement = null;\n                this.renderer = null;\n            };\n            Chart.prototype.getState = function() {\n                return this.state.data;\n            };\n            Chart.prototype.getTrend = function(trendName) {\n                return this.state.getTrend(trendName);\n            };\n            Chart.prototype.setState = function(state) {\n                return this.state.setState(state);\n            };\n            Chart.prototype.bindEvents = function() {\n                var _this = this;\n                var $el = this.$el;\n                if (this.state.data.controls.enabled) {\n                    $el.addEventListener(\"mousewheel\", function(ev) {\n                        _this.onMouseWheel(ev);\n                    });\n                    $el.addEventListener(\"mousemove\", function(ev) {\n                        _this.onMouseMove(ev);\n                    });\n                    $el.addEventListener(\"mousedown\", function(ev) {\n                        return _this.onMouseDown(ev);\n                    });\n                    $el.addEventListener(\"mouseup\", function(ev) {\n                        return _this.onMouseUp(ev);\n                    });\n                    $el.addEventListener(\"touchmove\", function(ev) {\n                        _this.onTouchMove(ev);\n                    });\n                    $el.addEventListener(\"touchend\", function(ev) {\n                        _this.onTouchEnd(ev);\n                    });\n                }\n                if (this.state.data.autoResize) {\n                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n                    });\n                }\n                this.unsubscribers = [ this.state.onTrendsChange(function() {\n                    return _this.autoscroll();\n                }), this.state.screen.onTransformationFrame(function(options) {\n                    return _this.onScreenTransformHandler(options);\n                }), this.state.onResize(function(options) {\n                    return _this.onChartResize();\n                }) ];\n            };\n            Chart.prototype.unbindEvents = function() {\n                try {\n                    this.resizeSensor && this.resizeSensor.detach();\n                } catch (e) {}\n                this.$el.remove();\n                this.unsubscribers.forEach(function(unsubscribe) {\n                    return unsubscribe();\n                });\n            };\n            Chart.prototype.setupCamera = function() {\n                var camSettings = this.state.screen.getCameraSettings();\n                if (!this.camera) {\n                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n                    this.scene.add(this.camera);\n                } else {\n                    this.camera.fov = camSettings.FOV;\n                    this.camera.aspect = camSettings.aspect;\n                    this.camera.far = camSettings.far;\n                    this.camera.near = camSettings.near;\n                    this.camera.updateProjectionMatrix();\n                }\n                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n                this.cameraInitialPosition = this.camera.position.clone();\n                this.onScreenTransformHandler(this.state.screen.options);\n            };\n            Chart.prototype.onScreenTransformHandler = function(options) {\n                if (options.scrollX != void 0) {\n                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n                    this.camera.position.setX(scrollX_1);\n                }\n                if (options.scrollY != void 0) {\n                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n                    this.camera.position.setY(scrollY_1);\n                }\n            };\n            Chart.prototype.autoscroll = function() {\n                var state = this.state;\n                if (!state.data.autoScroll) return;\n                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n                if (trendsMaxXDelta > 0) {\n                    var maxVisibleX = this.state.screen.getScreenRightVal();\n                    var paddingRightX = this.state.getPaddingRight();\n                    var currentScroll = state.data.xAxis.range.scroll;\n                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n                        return;\n                    }\n                    var scrollDelta = trendsMaxXDelta;\n                    this.setState({\n                        xAxis: {\n                            range: {\n                                scroll: currentScroll + scrollDelta\n                            }\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onScrollStop = function() {};\n            Chart.prototype.onMouseDown = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.clientX,\n                        y: ev.clientY\n                    }\n                });\n            };\n            Chart.prototype.onMouseUp = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onMouseMove = function(ev) {\n                if (this.state.data.cursor.dragMode) {\n                    this.setState({\n                        cursor: {\n                            dragMode: true,\n                            x: ev.clientX,\n                            y: ev.clientY\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onMouseWheel = function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n                var zoomOrigin = ev.layerX / this.state.data.width;\n                var zoomValue = 1 + ev.wheelDeltaY * .001;\n                this.zoom(zoomValue, zoomOrigin);\n            };\n            Chart.prototype.onTouchMove = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.touches[0].clientX,\n                        y: ev.touches[0].clientY\n                    }\n                });\n            };\n            Chart.prototype.onTouchEnd = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n                this.setState({\n                    width: width,\n                    height: height\n                });\n            };\n            Chart.prototype.onChartResize = function() {\n                var _a = this.state.data, width = _a.width, height = _a.height;\n                this.renderer.setSize(width, height);\n                this.setupCamera();\n            };\n            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n                var _this = this;\n                var MAX_ZOOM_VALUE = 1.5;\n                var MIN_ZOOM_VALUE = .7;\n                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n                var autoScrollIsEnabled = this.state.data.autoScroll;\n                if (autoScrollIsEnabled) this.state.setState({\n                    autoScroll: false\n                });\n                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n                    if (autoScrollIsEnabled) _this.setState({\n                        autoScroll: true\n                    });\n                });\n            };\n            Chart.createPreviewChart = function(userOptions, $el) {\n                var previewChartOptions = {\n                    animations: {\n                        enabled: false\n                    },\n                    widgets: {\n                        Grid: {\n                            enabled: false\n                        },\n                        Axis: {\n                            enabled: false\n                        },\n                        TrendsGradient: {\n                            enabled: false\n                        }\n                    }\n                };\n                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n                return new Chart(options, $el);\n            };\n            Chart.devicePixelRatio = window.devicePixelRatio;\n            Chart.installedWidgets = {};\n            Chart.renderers = {\n                CanvasRenderer: THREE.CanvasRenderer,\n                WebGLRenderer: THREE.WebGLRenderer\n            };\n            return Chart;\n        }();\n        exports.Chart = Chart;\n        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n        Chart.installWidget(AxisWidget_1.AxisWidget);\n        Chart.installWidget(GridWidget_1.GridWidget);\n        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n        Chart.installWidget(BorderWidget_1.BorderWidget);\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        window.TweenLite = TweenMax;\n        window.Stats = __webpack_require__(4);\n        __webpack_require__(5);\n        __webpack_require__(6);\n        exports.isPlainObject = __webpack_require__(7);\n        exports.EE2 = __webpack_require__(9);\n        var es6_promise_1 = __webpack_require__(10);\n        exports.Promise = es6_promise_1.Promise;\n        exports.ResizeSensor = __webpack_require__(11);\n    }, function(module, exports) {\n        var Stats = function() {\n            function h(a) {\n                c.appendChild(a.dom);\n                return a;\n            }\n            function k(a) {\n                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n                l = a;\n            }\n            var l = 0, c = document.createElement(\"div\");\n            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n            c.addEventListener(\"click\", function(a) {\n                a.preventDefault();\n                k(++l % c.children.length);\n            }, !1);\n            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n            k(0);\n            return {\n                REVISION: 16,\n                dom: c,\n                addPanel: h,\n                showPanel: k,\n                begin: function() {\n                    g = (performance || Date).now();\n                },\n                end: function() {\n                    a++;\n                    var c = (performance || Date).now();\n                    f.update(c - g, 200);\n                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n                        var d = performance.memory;\n                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                    }\n                    return c;\n                },\n                update: function() {\n                    g = this.end();\n                },\n                domElement: c,\n                setMode: k\n            };\n        };\n        Stats.Panel = function(h, k, l) {\n            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n            q.width = r;\n            q.height = f;\n            q.style.cssText = \"width:80px;height:48px\";\n            var b = q.getContext(\"2d\");\n            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n            b.textBaseline = \"top\";\n            b.fillStyle = l;\n            b.fillRect(0, 0, r, f);\n            b.fillStyle = k;\n            b.fillText(h, t, u);\n            b.fillRect(d, m, n, p);\n            b.fillStyle = l;\n            b.globalAlpha = .9;\n            b.fillRect(d, m, n, p);\n            return {\n                dom: q,\n                update: function(f, v) {\n                    c = Math.min(c, f);\n                    g = Math.max(g, f);\n                    b.fillStyle = l;\n                    b.globalAlpha = 1;\n                    b.fillRect(0, 0, r, m);\n                    b.fillStyle = k;\n                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                    b.fillRect(d + n - a, m, a, p);\n                    b.fillStyle = l;\n                    b.globalAlpha = .9;\n                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n                }\n            };\n        };\n        \"object\" === typeof module && (module.exports = Stats);\n    }, function(module, exports) {\n        THREE.SpriteCanvasMaterial = function(parameters) {\n            THREE.Material.call(this);\n            this.type = \"SpriteCanvasMaterial\";\n            this.color = new THREE.Color(16777215);\n            this.program = function(context, color) {};\n            this.setValues(parameters);\n        };\n        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n            var material = new THREE.SpriteCanvasMaterial();\n            material.copy(this);\n            material.color.copy(this.color);\n            material.program = this.program;\n            return material;\n        };\n        THREE.CanvasRenderer = function(parameters) {\n            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n            parameters = parameters || {};\n            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n                alpha: parameters.alpha === true\n            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n            if (_context.setLineDash === undefined) {\n                _context.setLineDash = function() {};\n            }\n            this.domElement = _canvas;\n            this.autoClear = true;\n            this.sortObjects = true;\n            this.sortElements = true;\n            this.info = {\n                render: {\n                    vertices: 0,\n                    faces: 0\n                }\n            };\n            this.supportsVertexTextures = function() {};\n            this.setFaceCulling = function() {};\n            this.getContext = function() {\n                return _context;\n            };\n            this.getContextAttributes = function() {\n                return _context.getContextAttributes();\n            };\n            this.getPixelRatio = function() {\n                return _pixelRatio;\n            };\n            this.setPixelRatio = function(value) {\n                if (value !== undefined) _pixelRatio = value;\n            };\n            this.setSize = function(width, height, updateStyle) {\n                _canvasWidth = width * _pixelRatio;\n                _canvasHeight = height * _pixelRatio;\n                _canvas.width = _canvasWidth;\n                _canvas.height = _canvasHeight;\n                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n                if (updateStyle !== false) {\n                    _canvas.style.width = width + \"px\";\n                    _canvas.style.height = height + \"px\";\n                }\n                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _contextGlobalAlpha = 1;\n                _contextGlobalCompositeOperation = 0;\n                _contextStrokeStyle = null;\n                _contextFillStyle = null;\n                _contextLineWidth = null;\n                _contextLineCap = null;\n                _contextLineJoin = null;\n                this.setViewport(0, 0, width, height);\n            };\n            this.setViewport = function(x, y, width, height) {\n                _viewportX = x * _pixelRatio;\n                _viewportY = y * _pixelRatio;\n                _viewportWidth = width * _pixelRatio;\n                _viewportHeight = height * _pixelRatio;\n            };\n            this.setScissor = function() {};\n            this.setScissorTest = function() {};\n            this.setClearColor = function(color, alpha) {\n                _clearColor.set(color);\n                _clearAlpha = alpha !== undefined ? alpha : 1;\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n            };\n            this.setClearColorHex = function(hex, alpha) {\n                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n                this.setClearColor(hex, alpha);\n            };\n            this.getClearColor = function() {\n                return _clearColor;\n            };\n            this.getClearAlpha = function() {\n                return _clearAlpha;\n            };\n            this.getMaxAnisotropy = function() {\n                return 0;\n            };\n            this.clear = function() {\n                if (_clearBox.isEmpty() === false) {\n                    _clearBox.intersect(_clipBox);\n                    _clearBox.expandByScalar(2);\n                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n                    if (_clearAlpha < 1) {\n                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    if (_clearAlpha > 0) {\n                        setBlending(THREE.NormalBlending);\n                        setOpacity(1);\n                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    _clearBox.makeEmpty();\n                }\n            };\n            this.clearColor = function() {};\n            this.clearDepth = function() {};\n            this.clearStencil = function() {};\n            this.render = function(scene, camera) {\n                if (camera instanceof THREE.Camera === false) {\n                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n                    return;\n                }\n                if (this.autoClear === true) this.clear();\n                _this.info.render.vertices = 0;\n                _this.info.render.faces = 0;\n                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n                _elements = _renderData.elements;\n                _lights = _renderData.lights;\n                _camera = camera;\n                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n                calculateLights();\n                for (var e = 0, el = _elements.length; e < el; e++) {\n                    var element = _elements[e];\n                    var material = element.material;\n                    if (material === undefined || material.opacity === 0) continue;\n                    _elemBox.makeEmpty();\n                    if (element instanceof THREE.RenderableSprite) {\n                        _v1 = element;\n                        _v1.x *= _canvasWidthHalf;\n                        _v1.y *= _canvasHeightHalf;\n                        renderSprite(_v1, element, material);\n                    } else if (element instanceof THREE.RenderableLine) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderLine(_v1, _v2, element, material);\n                        }\n                    } else if (element instanceof THREE.RenderableFace) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v3 = element.v3;\n                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _v3.positionScreen.x *= _canvasWidthHalf;\n                        _v3.positionScreen.y *= _canvasHeightHalf;\n                        if (material.overdraw > 0) {\n                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n                        }\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n                        }\n                    }\n                    _clearBox.union(_elemBox);\n                }\n                _context.setTransform(1, 0, 0, 1, 0, 0);\n            };\n            function calculateLights() {\n                _ambientLight.setRGB(0, 0, 0);\n                _directionalLights.setRGB(0, 0, 0);\n                _pointLights.setRGB(0, 0, 0);\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    var lightColor = light.color;\n                    if (light instanceof THREE.AmbientLight) {\n                        _ambientLight.add(lightColor);\n                    } else if (light instanceof THREE.DirectionalLight) {\n                        _directionalLights.add(lightColor);\n                    } else if (light instanceof THREE.PointLight) {\n                        _pointLights.add(lightColor);\n                    }\n                }\n            }\n            function calculateLight(position, normal, color) {\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    _lightColor.copy(light.color);\n                    if (light instanceof THREE.DirectionalLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n                        var amount = normal.dot(lightPosition);\n                        if (amount <= 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    } else if (light instanceof THREE.PointLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n                        if (amount <= 0) continue;\n                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n                        if (amount == 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    }\n                }\n            }\n            function renderSprite(v1, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                var scaleX = element.scale.x * _canvasWidthHalf;\n                var scaleY = element.scale.y * _canvasHeightHalf;\n                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n                _elemBox.min.set(v1.x - dist, v1.y - dist);\n                _elemBox.max.set(v1.x + dist, v1.y + dist);\n                if (material instanceof THREE.SpriteMaterial) {\n                    var texture = material.map;\n                    if (texture !== null) {\n                        var pattern = _patterns[texture.id];\n                        if (pattern === undefined || pattern.version !== texture.version) {\n                            pattern = textureToPattern(texture);\n                            _patterns[texture.id] = pattern;\n                        }\n                        if (pattern.canvas !== undefined) {\n                            setFillStyle(pattern.canvas);\n                            var bitmap = texture.image;\n                            var ox = bitmap.width * texture.offset.x;\n                            var oy = bitmap.height * texture.offset.y;\n                            var sx = bitmap.width * texture.repeat.x;\n                            var sy = bitmap.height * texture.repeat.y;\n                            var cx = scaleX / sx;\n                            var cy = scaleY / sy;\n                            _context.save();\n                            _context.translate(v1.x, v1.y);\n                            if (material.rotation !== 0) _context.rotate(material.rotation);\n                            _context.translate(-scaleX / 2, -scaleY / 2);\n                            _context.scale(cx, cy);\n                            _context.translate(-ox, -oy);\n                            _context.fillRect(ox, oy, sx, sy);\n                            _context.restore();\n                        }\n                    } else {\n                        setFillStyle(material.color.getStyle());\n                        _context.save();\n                        _context.translate(v1.x, v1.y);\n                        if (material.rotation !== 0) _context.rotate(material.rotation);\n                        _context.scale(scaleX, -scaleY);\n                        _context.fillRect(-.5, -.5, 1, 1);\n                        _context.restore();\n                    }\n                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n                    setStrokeStyle(material.color.getStyle());\n                    setFillStyle(material.color.getStyle());\n                    _context.save();\n                    _context.translate(v1.x, v1.y);\n                    if (material.rotation !== 0) _context.rotate(material.rotation);\n                    _context.scale(scaleX, scaleY);\n                    material.program(_context);\n                    _context.restore();\n                }\n            }\n            function renderLine(v1, v2, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _context.beginPath();\n                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n                if (material instanceof THREE.LineBasicMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    if (material.vertexColors !== THREE.VertexColors) {\n                        setStrokeStyle(material.color.getStyle());\n                    } else {\n                        var colorStyle1 = element.vertexColors[0].getStyle();\n                        var colorStyle2 = element.vertexColors[1].getStyle();\n                        if (colorStyle1 === colorStyle2) {\n                            setStrokeStyle(colorStyle1);\n                        } else {\n                            try {\n                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n                                grad.addColorStop(0, colorStyle1);\n                                grad.addColorStop(1, colorStyle2);\n                            } catch (exception) {\n                                grad = colorStyle1;\n                            }\n                            setStrokeStyle(grad);\n                        }\n                    }\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                } else if (material instanceof THREE.LineDashedMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    setStrokeStyle(material.color.getStyle());\n                    setLineDash([ material.dashSize, material.gapSize ]);\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                    setLineDash([]);\n                }\n            }\n            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n                _this.info.render.vertices += 3;\n                _this.info.render.faces++;\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _v1x = v1.positionScreen.x;\n                _v1y = v1.positionScreen.y;\n                _v2x = v2.positionScreen.x;\n                _v2y = v2.positionScreen.y;\n                _v3x = v3.positionScreen.x;\n                _v3y = v3.positionScreen.y;\n                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n                    _diffuseColor.copy(material.color);\n                    _emissiveColor.copy(material.emissive);\n                    if (material.vertexColors === THREE.FaceColors) {\n                        _diffuseColor.multiply(element.color);\n                    }\n                    _color.copy(_ambientLight);\n                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n                    calculateLight(_centroid, element.normalModel, _color);\n                    _color.multiply(_diffuseColor).add(_emissiveColor);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n                    if (material.map !== null) {\n                        var mapping = material.map.mapping;\n                        if (mapping === THREE.UVMapping) {\n                            _uvs = element.uvs;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n                        }\n                    } else if (material.envMap !== null) {\n                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n                            _uv1x = .5 * _normal.x + .5;\n                            _uv1y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n                            _uv2x = .5 * _normal.x + .5;\n                            _uv2y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n                            _uv3x = .5 * _normal.x + .5;\n                            _uv3y = .5 * _normal.y + .5;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n                        }\n                    } else {\n                        _color.copy(material.color);\n                        if (material.vertexColors === THREE.FaceColors) {\n                            _color.multiply(element.color);\n                        }\n                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                    }\n                } else if (material instanceof THREE.MeshNormalMaterial) {\n                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else {\n                    _color.setRGB(1, 1, 1);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                }\n            }\n            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n                _context.beginPath();\n                _context.moveTo(x0, y0);\n                _context.lineTo(x1, y1);\n                _context.lineTo(x2, y2);\n                _context.closePath();\n            }\n            function strokePath(color, linewidth, linecap, linejoin) {\n                setLineWidth(linewidth);\n                setLineCap(linecap);\n                setLineJoin(linejoin);\n                setStrokeStyle(color.getStyle());\n                _context.stroke();\n                _elemBox.expandByScalar(linewidth * 2);\n            }\n            function fillPath(color) {\n                setFillStyle(color.getStyle());\n                _context.fill();\n            }\n            function textureToPattern(texture) {\n                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n                    return {\n                        canvas: undefined,\n                        version: texture.version\n                    };\n                }\n                var image = texture.image;\n                if (image.complete === false) {\n                    return {\n                        canvas: undefined,\n                        version: 0\n                    };\n                }\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                var context = canvas.getContext(\"2d\");\n                context.setTransform(1, 0, 0, -1, 0, image.height);\n                context.drawImage(image, 0, 0);\n                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n                var repeat = \"no-repeat\";\n                if (repeatX === true && repeatY === true) {\n                    repeat = \"repeat\";\n                } else if (repeatX === true) {\n                    repeat = \"repeat-x\";\n                } else if (repeatY === true) {\n                    repeat = \"repeat-y\";\n                }\n                var pattern = _context.createPattern(canvas, repeat);\n                if (texture.onUpdate) texture.onUpdate(texture);\n                return {\n                    canvas: pattern,\n                    version: texture.version\n                };\n            }\n            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n                var pattern = _patterns[texture.id];\n                if (pattern === undefined || pattern.version !== texture.version) {\n                    pattern = textureToPattern(texture);\n                    _patterns[texture.id] = pattern;\n                }\n                if (pattern.canvas !== undefined) {\n                    setFillStyle(pattern.canvas);\n                } else {\n                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n                    _context.fill();\n                    return;\n                }\n                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n                u0 = (u0 + offsetX) * width;\n                v0 = (v0 + offsetY) * height;\n                u1 = (u1 + offsetX) * width;\n                v1 = (v1 + offsetY) * height;\n                u2 = (u2 + offsetX) * width;\n                v2 = (v2 + offsetY) * height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                if (det === 0) return;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.fill();\n                _context.restore();\n            }\n            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n                u0 *= width;\n                v0 *= height;\n                u1 *= width;\n                v1 *= height;\n                u2 *= width;\n                v2 *= height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.clip();\n                _context.drawImage(image, 0, 0);\n                _context.restore();\n            }\n            function expand(v1, v2, pixels) {\n                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n                if (det === 0) return;\n                idet = pixels / Math.sqrt(det);\n                x *= idet;\n                y *= idet;\n                v2.x += x;\n                v2.y += y;\n                v1.x -= x;\n                v1.y -= y;\n            }\n            function setOpacity(value) {\n                if (_contextGlobalAlpha !== value) {\n                    _context.globalAlpha = value;\n                    _contextGlobalAlpha = value;\n                }\n            }\n            function setBlending(value) {\n                if (_contextGlobalCompositeOperation !== value) {\n                    if (value === THREE.NormalBlending) {\n                        _context.globalCompositeOperation = \"source-over\";\n                    } else if (value === THREE.AdditiveBlending) {\n                        _context.globalCompositeOperation = \"lighter\";\n                    } else if (value === THREE.SubtractiveBlending) {\n                        _context.globalCompositeOperation = \"darker\";\n                    }\n                    _contextGlobalCompositeOperation = value;\n                }\n            }\n            function setLineWidth(value) {\n                if (_contextLineWidth !== value) {\n                    _context.lineWidth = value;\n                    _contextLineWidth = value;\n                }\n            }\n            function setLineCap(value) {\n                if (_contextLineCap !== value) {\n                    _context.lineCap = value;\n                    _contextLineCap = value;\n                }\n            }\n            function setLineJoin(value) {\n                if (_contextLineJoin !== value) {\n                    _context.lineJoin = value;\n                    _contextLineJoin = value;\n                }\n            }\n            function setStrokeStyle(value) {\n                if (_contextStrokeStyle !== value) {\n                    _context.strokeStyle = value;\n                    _contextStrokeStyle = value;\n                }\n            }\n            function setFillStyle(value) {\n                if (_contextFillStyle !== value) {\n                    _context.fillStyle = value;\n                    _contextFillStyle = value;\n                }\n            }\n            function setLineDash(value) {\n                if (_contextLineDash.length !== value.length) {\n                    _context.setLineDash(value);\n                    _contextLineDash = value;\n                }\n            }\n        };\n    }, function(module, exports) {\n        THREE.RenderableObject = function() {\n            this.id = 0;\n            this.object = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableFace = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.v3 = new THREE.RenderableVertex();\n            this.normalModel = new THREE.Vector3();\n            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n            this.vertexNormalsLength = 0;\n            this.color = new THREE.Color();\n            this.material = null;\n            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableVertex = function() {\n            this.position = new THREE.Vector3();\n            this.positionWorld = new THREE.Vector3();\n            this.positionScreen = new THREE.Vector4();\n            this.visible = true;\n        };\n        THREE.RenderableVertex.prototype.copy = function(vertex) {\n            this.positionWorld.copy(vertex.positionWorld);\n            this.positionScreen.copy(vertex.positionScreen);\n        };\n        THREE.RenderableLine = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n            this.material = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableSprite = function() {\n            this.id = 0;\n            this.object = null;\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.rotation = 0;\n            this.scale = new THREE.Vector2();\n            this.material = null;\n            this.renderOrder = 0;\n        };\n        THREE.Projector = function() {\n            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n                objects: [],\n                lights: [],\n                elements: []\n            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n            this.projectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n                vector.project(camera);\n            };\n            this.unprojectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n                vector.unproject(camera);\n            };\n            this.pickingRay = function(vector, camera) {\n                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n            };\n            var RenderList = function() {\n                var normals = [];\n                var uvs = [];\n                var object = null;\n                var material = null;\n                var normalMatrix = new THREE.Matrix3();\n                function setObject(value) {\n                    object = value;\n                    material = object.material;\n                    normalMatrix.getNormalMatrix(object.matrixWorld);\n                    normals.length = 0;\n                    uvs.length = 0;\n                }\n                function projectVertex(vertex) {\n                    var position = vertex.position;\n                    var positionWorld = vertex.positionWorld;\n                    var positionScreen = vertex.positionScreen;\n                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n                    var invW = 1 / positionScreen.w;\n                    positionScreen.x *= invW;\n                    positionScreen.y *= invW;\n                    positionScreen.z *= invW;\n                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n                }\n                function pushVertex(x, y, z) {\n                    _vertex = getNextVertexInPool();\n                    _vertex.position.set(x, y, z);\n                    projectVertex(_vertex);\n                }\n                function pushNormal(x, y, z) {\n                    normals.push(x, y, z);\n                }\n                function pushUv(x, y) {\n                    uvs.push(x, y);\n                }\n                function checkTriangleVisibility(v1, v2, v3) {\n                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n                    _points3[0] = v1.positionScreen;\n                    _points3[1] = v2.positionScreen;\n                    _points3[2] = v3.positionScreen;\n                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n                }\n                function checkBackfaceCulling(v1, v2, v3) {\n                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n                }\n                function pushLine(a, b) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    _line = getNextLineInPool();\n                    _line.id = object.id;\n                    _line.v1.copy(v1);\n                    _line.v2.copy(v2);\n                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n                    _line.renderOrder = object.renderOrder;\n                    _line.material = object.material;\n                    _renderData.elements.push(_line);\n                }\n                function pushTriangle(a, b, c) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    var v3 = _vertexPool[c];\n                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n                        _face = getNextFaceInPool();\n                        _face.id = object.id;\n                        _face.v1.copy(v1);\n                        _face.v2.copy(v2);\n                        _face.v3.copy(v3);\n                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                        _face.renderOrder = object.renderOrder;\n                        _face.normalModel.fromArray(normals, a * 3);\n                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n                        for (var i = 0; i < 3; i++) {\n                            var normal = _face.vertexNormalsModel[i];\n                            normal.fromArray(normals, arguments[i] * 3);\n                            normal.applyMatrix3(normalMatrix).normalize();\n                            var uv = _face.uvs[i];\n                            uv.fromArray(uvs, arguments[i] * 2);\n                        }\n                        _face.vertexNormalsLength = 3;\n                        _face.material = object.material;\n                        _renderData.elements.push(_face);\n                    }\n                }\n                return {\n                    setObject: setObject,\n                    projectVertex: projectVertex,\n                    checkTriangleVisibility: checkTriangleVisibility,\n                    checkBackfaceCulling: checkBackfaceCulling,\n                    pushVertex: pushVertex,\n                    pushNormal: pushNormal,\n                    pushUv: pushUv,\n                    pushLine: pushLine,\n                    pushTriangle: pushTriangle\n                };\n            };\n            var renderList = new RenderList();\n            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n                _faceCount = 0;\n                _lineCount = 0;\n                _spriteCount = 0;\n                _renderData.elements.length = 0;\n                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n                if (camera.parent === null) camera.updateMatrixWorld();\n                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n                _frustum.setFromMatrix(_viewProjectionMatrix);\n                _objectCount = 0;\n                _renderData.objects.length = 0;\n                _renderData.lights.length = 0;\n                scene.traverseVisible(function(object) {\n                    if (object instanceof THREE.Light) {\n                        _renderData.lights.push(object);\n                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n                        var material = object.material;\n                        if (material.visible === false) return;\n                        if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n                            _object = getNextObjectInPool();\n                            _object.id = object.id;\n                            _object.object = object;\n                            _vector3.setFromMatrixPosition(object.matrixWorld);\n                            _vector3.applyProjection(_viewProjectionMatrix);\n                            _object.z = _vector3.z;\n                            _object.renderOrder = object.renderOrder;\n                            _renderData.objects.push(_object);\n                        }\n                    }\n                });\n                if (sortObjects === true) {\n                    _renderData.objects.sort(painterSort);\n                }\n                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n                    var object = _renderData.objects[o].object;\n                    var geometry = object.geometry;\n                    renderList.setObject(object);\n                    _modelMatrix = object.matrixWorld;\n                    _vertexCount = 0;\n                    if (object instanceof THREE.Mesh) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            var groups = geometry.groups;\n                            if (attributes.position === undefined) continue;\n                            var positions = attributes.position.array;\n                            for (var i = 0, l = positions.length; i < l; i += 3) {\n                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                            }\n                            if (attributes.normal !== undefined) {\n                                var normals = attributes.normal.array;\n                                for (var i = 0, l = normals.length; i < l; i += 3) {\n                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n                                }\n                            }\n                            if (attributes.uv !== undefined) {\n                                var uvs = attributes.uv.array;\n                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n                                }\n                            }\n                            if (geometry.index !== null) {\n                                var indices = geometry.index.array;\n                                if (groups.length > 0) {\n                                    for (var o = 0; o < groups.length; o++) {\n                                        var group = groups[o];\n                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                        }\n                                    }\n                                } else {\n                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                    }\n                                }\n                            } else {\n                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                                    renderList.pushTriangle(i, i + 1, i + 2);\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            var vertices = geometry.vertices;\n                            var faces = geometry.faces;\n                            var faceVertexUvs = geometry.faceVertexUvs[0];\n                            _normalMatrix.getNormalMatrix(_modelMatrix);\n                            var material = object.material;\n                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n                                var vertex = vertices[v];\n                                _vector3.copy(vertex);\n                                if (material.morphTargets === true) {\n                                    var morphTargets = geometry.morphTargets;\n                                    var morphInfluences = object.morphTargetInfluences;\n                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                                        var influence = morphInfluences[t];\n                                        if (influence === 0) continue;\n                                        var target = morphTargets[t];\n                                        var targetVertex = target.vertices[v];\n                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n                                    }\n                                }\n                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n                            }\n                            for (var f = 0, fl = faces.length; f < fl; f++) {\n                                var face = faces[f];\n                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n                                if (material === undefined) continue;\n                                var side = material.side;\n                                var v1 = _vertexPool[face.a];\n                                var v2 = _vertexPool[face.b];\n                                var v3 = _vertexPool[face.c];\n                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n                                if (side !== THREE.DoubleSide) {\n                                    if (side === THREE.FrontSide && visible === false) continue;\n                                    if (side === THREE.BackSide && visible === true) continue;\n                                }\n                                _face = getNextFaceInPool();\n                                _face.id = object.id;\n                                _face.v1.copy(v1);\n                                _face.v2.copy(v2);\n                                _face.v3.copy(v3);\n                                _face.normalModel.copy(face.normal);\n                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                    _face.normalModel.negate();\n                                }\n                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n                                var faceVertexNormals = face.vertexNormals;\n                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n                                    var normalModel = _face.vertexNormalsModel[n];\n                                    normalModel.copy(faceVertexNormals[n]);\n                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                        normalModel.negate();\n                                    }\n                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n                                }\n                                _face.vertexNormalsLength = faceVertexNormals.length;\n                                var vertexUvs = faceVertexUvs[f];\n                                if (vertexUvs !== undefined) {\n                                    for (var u = 0; u < 3; u++) {\n                                        _face.uvs[u].copy(vertexUvs[u]);\n                                    }\n                                }\n                                _face.color = face.color;\n                                _face.material = material;\n                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                                _face.renderOrder = object.renderOrder;\n                                _renderData.elements.push(_face);\n                            }\n                        }\n                    } else if (object instanceof THREE.Line) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            if (attributes.position !== undefined) {\n                                var positions = attributes.position.array;\n                                for (var i = 0, l = positions.length; i < l; i += 3) {\n                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                                }\n                                if (geometry.index !== null) {\n                                    var indices = geometry.index.array;\n                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n                                        renderList.pushLine(indices[i], indices[i + 1]);\n                                    }\n                                } else {\n                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                                        renderList.pushLine(i, i + 1);\n                                    }\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n                            var vertices = object.geometry.vertices;\n                            if (vertices.length === 0) continue;\n                            v1 = getNextVertexInPool();\n                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n                                v1 = getNextVertexInPool();\n                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n                                if ((v + 1) % step > 0) continue;\n                                v2 = _vertexPool[_vertexCount - 2];\n                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n                                    _line = getNextLineInPool();\n                                    _line.id = object.id;\n                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n                                    _line.renderOrder = object.renderOrder;\n                                    _line.material = object.material;\n                                    if (object.material.vertexColors === THREE.VertexColors) {\n                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                                    }\n                                    _renderData.elements.push(_line);\n                                }\n                            }\n                        }\n                    } else if (object instanceof THREE.Sprite) {\n                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n                        _vector4.applyMatrix4(_viewProjectionMatrix);\n                        var invW = 1 / _vector4.w;\n                        _vector4.z *= invW;\n                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n                            _sprite = getNextSpriteInPool();\n                            _sprite.id = object.id;\n                            _sprite.x = _vector4.x * invW;\n                            _sprite.y = _vector4.y * invW;\n                            _sprite.z = _vector4.z;\n                            _sprite.renderOrder = object.renderOrder;\n                            _sprite.object = object;\n                            _sprite.rotation = object.rotation;\n                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n                            _sprite.material = object.material;\n                            _renderData.elements.push(_sprite);\n                        }\n                    }\n                }\n                if (sortElements === true) {\n                    _renderData.elements.sort(painterSort);\n                }\n                return _renderData;\n            };\n            function getNextObjectInPool() {\n                if (_objectCount === _objectPoolLength) {\n                    var object = new THREE.RenderableObject();\n                    _objectPool.push(object);\n                    _objectPoolLength++;\n                    _objectCount++;\n                    return object;\n                }\n                return _objectPool[_objectCount++];\n            }\n            function getNextVertexInPool() {\n                if (_vertexCount === _vertexPoolLength) {\n                    var vertex = new THREE.RenderableVertex();\n                    _vertexPool.push(vertex);\n                    _vertexPoolLength++;\n                    _vertexCount++;\n                    return vertex;\n                }\n                return _vertexPool[_vertexCount++];\n            }\n            function getNextFaceInPool() {\n                if (_faceCount === _facePoolLength) {\n                    var face = new THREE.RenderableFace();\n                    _facePool.push(face);\n                    _facePoolLength++;\n                    _faceCount++;\n                    return face;\n                }\n                return _facePool[_faceCount++];\n            }\n            function getNextLineInPool() {\n                if (_lineCount === _linePoolLength) {\n                    var line = new THREE.RenderableLine();\n                    _linePool.push(line);\n                    _linePoolLength++;\n                    _lineCount++;\n                    return line;\n                }\n                return _linePool[_lineCount++];\n            }\n            function getNextSpriteInPool() {\n                if (_spriteCount === _spritePoolLength) {\n                    var sprite = new THREE.RenderableSprite();\n                    _spritePool.push(sprite);\n                    _spritePoolLength++;\n                    _spriteCount++;\n                    return sprite;\n                }\n                return _spritePool[_spriteCount++];\n            }\n            function painterSort(a, b) {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                } else if (a.z !== b.z) {\n                    return b.z - a.z;\n                } else if (a.id !== b.id) {\n                    return a.id - b.id;\n                } else {\n                    return 0;\n                }\n            }\n            function clipLine(s1, s2) {\n                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n                    return true;\n                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n                    return false;\n                } else {\n                    if (bc1near < 0) {\n                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n                    } else if (bc2near < 0) {\n                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n                    }\n                    if (bc1far < 0) {\n                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n                    } else if (bc2far < 0) {\n                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n                    }\n                    if (alpha2 < alpha1) {\n                        return false;\n                    } else {\n                        s1.lerp(s2, alpha1);\n                        s2.lerp(s1, 1 - alpha2);\n                        return true;\n                    }\n                }\n            }\n        };\n    }, function(module, exports, __webpack_require__) {\n        /*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        var isObject = __webpack_require__(8);\n        function isObjectObject(o) {\n            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n        }\n        module.exports = function isPlainObject(o) {\n            var ctor, prot;\n            if (isObjectObject(o) === false) return false;\n            ctor = o.constructor;\n            if (typeof ctor !== \"function\") return false;\n            prot = ctor.prototype;\n            if (isObjectObject(prot) === false) return false;\n            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n                return false;\n            }\n            return true;\n        };\n    }, function(module, exports) {\n        /*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        module.exports = function isObject(val) {\n            return val != null && typeof val === \"object\" && !Array.isArray(val);\n        };\n    }, function(module, exports, __webpack_require__) {\n        var __WEBPACK_AMD_DEFINE_RESULT__;\n        !function(undefined) {\n            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n                return Object.prototype.toString.call(obj) === \"[object Array]\";\n            };\n            var defaultMaxListeners = 10;\n            function init() {\n                this._events = {};\n                if (this._conf) {\n                    configure.call(this, this._conf);\n                }\n            }\n            function configure(conf) {\n                if (conf) {\n                    this._conf = conf;\n                    conf.delimiter && (this.delimiter = conf.delimiter);\n                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n                    conf.wildcard && (this.wildcard = conf.wildcard);\n                    conf.newListener && (this.newListener = conf.newListener);\n                    if (this.wildcard) {\n                        this.listenerTree = {};\n                    }\n                }\n            }\n            function EventEmitter(conf) {\n                this._events = {};\n                this.newListener = false;\n                configure.call(this, conf);\n            }\n            function searchListenerTree(handlers, type, tree, i) {\n                if (!tree) {\n                    return [];\n                }\n                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n                if (i === typeLength && tree._listeners) {\n                    if (typeof tree._listeners === \"function\") {\n                        handlers && handlers.push(tree._listeners);\n                        return [ tree ];\n                    } else {\n                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n                            handlers && handlers.push(tree._listeners[leaf]);\n                        }\n                        return [ tree ];\n                    }\n                }\n                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n                    if (currentType === \"*\") {\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n                            }\n                        }\n                        return listeners;\n                    } else if (currentType === \"**\") {\n                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n                        if (endReached && tree._listeners) {\n                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n                        }\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                if (branch === \"*\" || branch === \"**\") {\n                                    if (tree[branch]._listeners && !endReached) {\n                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n                                    }\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                } else if (branch === nextType) {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n                                } else {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                }\n                            }\n                        }\n                        return listeners;\n                    }\n                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n                }\n                xTree = tree[\"*\"];\n                if (xTree) {\n                    searchListenerTree(handlers, type, xTree, i + 1);\n                }\n                xxTree = tree[\"**\"];\n                if (xxTree) {\n                    if (i < typeLength) {\n                        if (xxTree._listeners) {\n                            searchListenerTree(handlers, type, xxTree, typeLength);\n                        }\n                        for (branch in xxTree) {\n                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n                                if (branch === nextType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n                                } else if (branch === currentType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n                                } else {\n                                    isolatedBranch = {};\n                                    isolatedBranch[branch] = xxTree[branch];\n                                    searchListenerTree(handlers, type, {\n                                        \"**\": isolatedBranch\n                                    }, i + 1);\n                                }\n                            }\n                        }\n                    } else if (xxTree._listeners) {\n                        searchListenerTree(handlers, type, xxTree, typeLength);\n                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n                    }\n                }\n                return listeners;\n            }\n            function growListenerTree(type, listener) {\n                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                for (var i = 0, len = type.length; i + 1 < len; i++) {\n                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n                        return;\n                    }\n                }\n                var tree = this.listenerTree;\n                var name = type.shift();\n                while (name) {\n                    if (!tree[name]) {\n                        tree[name] = {};\n                    }\n                    tree = tree[name];\n                    if (type.length === 0) {\n                        if (!tree._listeners) {\n                            tree._listeners = listener;\n                        } else if (typeof tree._listeners === \"function\") {\n                            tree._listeners = [ tree._listeners, listener ];\n                        } else if (isArray(tree._listeners)) {\n                            tree._listeners.push(listener);\n                            if (!tree._listeners.warned) {\n                                var m = defaultMaxListeners;\n                                if (typeof this._events.maxListeners !== \"undefined\") {\n                                    m = this._events.maxListeners;\n                                }\n                                if (m > 0 && tree._listeners.length > m) {\n                                    tree._listeners.warned = true;\n                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n                                    console.trace();\n                                }\n                            }\n                        }\n                        return true;\n                    }\n                    name = type.shift();\n                }\n                return true;\n            }\n            EventEmitter.prototype.delimiter = \".\";\n            EventEmitter.prototype.setMaxListeners = function(n) {\n                this._events || init.call(this);\n                this._events.maxListeners = n;\n                if (!this._conf) this._conf = {};\n                this._conf.maxListeners = n;\n            };\n            EventEmitter.prototype.event = \"\";\n            EventEmitter.prototype.once = function(event, fn) {\n                this.many(event, 1, fn);\n                return this;\n            };\n            EventEmitter.prototype.many = function(event, ttl, fn) {\n                var self = this;\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"many only accepts instances of Function\");\n                }\n                function listener() {\n                    if (--ttl === 0) {\n                        self.off(event, listener);\n                    }\n                    fn.apply(this, arguments);\n                }\n                listener._origin = fn;\n                this.on(event, listener);\n                return self;\n            };\n            EventEmitter.prototype.emit = function() {\n                this._events || init.call(this);\n                var type = arguments[0];\n                if (type === \"newListener\" && !this.newListener) {\n                    if (!this._events.newListener) {\n                        return false;\n                    }\n                }\n                if (this._all) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    for (i = 0, l = this._all.length; i < l; i++) {\n                        this.event = type;\n                        this._all[i].apply(this, args);\n                    }\n                }\n                if (type === \"error\") {\n                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n                        if (arguments[1] instanceof Error) {\n                            throw arguments[1];\n                        } else {\n                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n                        }\n                        return false;\n                    }\n                }\n                var handler;\n                if (this.wildcard) {\n                    handler = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n                } else {\n                    handler = this._events[type];\n                }\n                if (typeof handler === \"function\") {\n                    this.event = type;\n                    if (arguments.length === 1) {\n                        handler.call(this);\n                    } else if (arguments.length > 1) switch (arguments.length) {\n                      case 2:\n                        handler.call(this, arguments[1]);\n                        break;\n\n                      case 3:\n                        handler.call(this, arguments[1], arguments[2]);\n                        break;\n\n                      default:\n                        var l = arguments.length;\n                        var args = new Array(l - 1);\n                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                        handler.apply(this, args);\n                    }\n                    return true;\n                } else if (handler) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    var listeners = handler.slice();\n                    for (var i = 0, l = listeners.length; i < l; i++) {\n                        this.event = type;\n                        listeners[i].apply(this, args);\n                    }\n                    return listeners.length > 0 || !!this._all;\n                } else {\n                    return !!this._all;\n                }\n            };\n            EventEmitter.prototype.on = function(type, listener) {\n                if (typeof type === \"function\") {\n                    this.onAny(type);\n                    return this;\n                }\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"on only accepts instances of Function\");\n                }\n                this._events || init.call(this);\n                this.emit(\"newListener\", type, listener);\n                if (this.wildcard) {\n                    growListenerTree.call(this, type, listener);\n                    return this;\n                }\n                if (!this._events[type]) {\n                    this._events[type] = listener;\n                } else if (typeof this._events[type] === \"function\") {\n                    this._events[type] = [ this._events[type], listener ];\n                } else if (isArray(this._events[type])) {\n                    this._events[type].push(listener);\n                    if (!this._events[type].warned) {\n                        var m = defaultMaxListeners;\n                        if (typeof this._events.maxListeners !== \"undefined\") {\n                            m = this._events.maxListeners;\n                        }\n                        if (m > 0 && this._events[type].length > m) {\n                            this._events[type].warned = true;\n                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n                            console.trace();\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.onAny = function(fn) {\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"onAny only accepts instances of Function\");\n                }\n                if (!this._all) {\n                    this._all = [];\n                }\n                this._all.push(fn);\n                return this;\n            };\n            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n            EventEmitter.prototype.off = function(type, listener) {\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"removeListener only takes instances of Function\");\n                }\n                var handlers, leafs = [];\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                } else {\n                    if (!this._events[type]) return this;\n                    handlers = this._events[type];\n                    leafs.push({\n                        _listeners: handlers\n                    });\n                }\n                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                    var leaf = leafs[iLeaf];\n                    handlers = leaf._listeners;\n                    if (isArray(handlers)) {\n                        var position = -1;\n                        for (var i = 0, length = handlers.length; i < length; i++) {\n                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n                                position = i;\n                                break;\n                            }\n                        }\n                        if (position < 0) {\n                            continue;\n                        }\n                        if (this.wildcard) {\n                            leaf._listeners.splice(position, 1);\n                        } else {\n                            this._events[type].splice(position, 1);\n                        }\n                        if (handlers.length === 0) {\n                            if (this.wildcard) {\n                                delete leaf._listeners;\n                            } else {\n                                delete this._events[type];\n                            }\n                        }\n                        return this;\n                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n                        if (this.wildcard) {\n                            delete leaf._listeners;\n                        } else {\n                            delete this._events[type];\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.offAny = function(fn) {\n                var i = 0, l = 0, fns;\n                if (fn && this._all && this._all.length > 0) {\n                    fns = this._all;\n                    for (i = 0, l = fns.length; i < l; i++) {\n                        if (fn === fns[i]) {\n                            fns.splice(i, 1);\n                            return this;\n                        }\n                    }\n                } else {\n                    this._all = [];\n                }\n                return this;\n            };\n            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n            EventEmitter.prototype.removeAllListeners = function(type) {\n                if (arguments.length === 0) {\n                    !this._events || init.call(this);\n                    return this;\n                }\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                        var leaf = leafs[iLeaf];\n                        leaf._listeners = null;\n                    }\n                } else {\n                    if (!this._events[type]) return this;\n                    this._events[type] = null;\n                }\n                return this;\n            };\n            EventEmitter.prototype.listeners = function(type) {\n                if (this.wildcard) {\n                    var handlers = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n                    return handlers;\n                }\n                this._events || init.call(this);\n                if (!this._events[type]) this._events[type] = [];\n                if (!isArray(this._events[type])) {\n                    this._events[type] = [ this._events[type] ];\n                }\n                return this._events[type];\n            };\n            EventEmitter.prototype.listenersAny = function() {\n                if (this._all) {\n                    return this._all;\n                } else {\n                    return [];\n                }\n            };\n            if (true) {\n                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n                    return EventEmitter;\n                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n            } else if (typeof exports === \"object\") {\n                exports.EventEmitter2 = EventEmitter;\n            } else {\n                window.EventEmitter2 = EventEmitter;\n            }\n        }();\n    }, function(module, exports) {\n        module.exports = {\n            Promise: window[\"Promise\"]\n        };\n    }, function(module, exports) {\n        (function() {\n            var ResizeSensor = function(element, callback) {\n                function EventQueue() {\n                    this.q = [];\n                    this.add = function(ev) {\n                        this.q.push(ev);\n                    };\n                    var i, j;\n                    this.call = function() {\n                        for (i = 0, j = this.q.length; i < j; i++) {\n                            this.q[i].call();\n                        }\n                    };\n                }\n                function getComputedStyle(element, prop) {\n                    if (element.currentStyle) {\n                        return element.currentStyle[prop];\n                    } else if (window.getComputedStyle) {\n                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n                    } else {\n                        return element.style[prop];\n                    }\n                }\n                function attachResizeEvent(element, resized) {\n                    if (!element.resizedAttached) {\n                        element.resizedAttached = new EventQueue();\n                        element.resizedAttached.add(resized);\n                    } else if (element.resizedAttached) {\n                        element.resizedAttached.add(resized);\n                        return;\n                    }\n                    element.resizeSensor = document.createElement(\"div\");\n                    element.resizeSensor.className = \"resize-sensor\";\n                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n                    element.resizeSensor.style.cssText = style;\n                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n                    element.appendChild(element.resizeSensor);\n                    if (!{\n                        fixed: 1,\n                        absolute: 1\n                    }[getComputedStyle(element, \"position\")]) {\n                        element.style.position = \"relative\";\n                    }\n                    var expand = element.resizeSensor.childNodes[0];\n                    var expandChild = expand.childNodes[0];\n                    var shrink = element.resizeSensor.childNodes[1];\n                    var shrinkChild = shrink.childNodes[0];\n                    var lastWidth, lastHeight;\n                    var reset = function() {\n                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n                        expand.scrollLeft = expand.scrollWidth;\n                        expand.scrollTop = expand.scrollHeight;\n                        shrink.scrollLeft = shrink.scrollWidth;\n                        shrink.scrollTop = shrink.scrollHeight;\n                        lastWidth = element.offsetWidth;\n                        lastHeight = element.offsetHeight;\n                    };\n                    reset();\n                    var changed = function() {\n                        if (element.resizedAttached) {\n                            element.resizedAttached.call();\n                        }\n                    };\n                    var addEvent = function(el, name, cb) {\n                        if (el.attachEvent) {\n                            el.attachEvent(\"on\" + name, cb);\n                        } else {\n                            el.addEventListener(name, cb);\n                        }\n                    };\n                    var onScroll = function() {\n                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                            changed();\n                        }\n                        reset();\n                    };\n                    addEvent(expand, \"scroll\", onScroll);\n                    addEvent(shrink, \"scroll\", onScroll);\n                }\n                var elementType = Object.prototype.toString.call(element);\n                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n                if (isCollectionTyped) {\n                    var i = 0, j = element.length;\n                    for (;i < j; i++) {\n                        attachResizeEvent(element[i], callback);\n                    }\n                } else {\n                    attachResizeEvent(element, callback);\n                }\n                this.detach = function() {\n                    if (isCollectionTyped) {\n                        var i = 0, j = element.length;\n                        for (;i < j; i++) {\n                            ResizeSensor.detach(element[i]);\n                        }\n                    } else {\n                        ResizeSensor.detach(element);\n                    }\n                };\n            };\n            ResizeSensor.detach = function(element) {\n                if (element.resizeSensor) {\n                    element.removeChild(element.resizeSensor);\n                    delete element.resizeSensor;\n                    delete element.resizedAttached;\n                }\n            };\n            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n                module.exports = ResizeSensor;\n            } else {\n                window.ResizeSensor = ResizeSensor;\n            }\n        })();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var EventEmmiter_1 = __webpack_require__(13);\n        var Utils_1 = __webpack_require__(14);\n        var Widget_1 = __webpack_require__(15);\n        var TrendsManager_1 = __webpack_require__(16);\n        var Screen_1 = __webpack_require__(19);\n        var AxisMarks_1 = __webpack_require__(20);\n        var interfaces_1 = __webpack_require__(21);\n        var deps_1 = __webpack_require__(3);\n        var CHART_STATE_EVENTS = {\n            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n            READY: \"ready\",\n            DESTROY: \"destroy\",\n            CHANGE: \"change\",\n            TREND_CHANGE: \"trendChange\",\n            TRENDS_CHANGE: \"trendsChange\",\n            ZOOM: \"zoom\",\n            RESIZE: \"resize\",\n            SCROLL: \"scroll\",\n            SCROLL_STOP: \"scrollStop\",\n            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n        };\n        var ChartState = function() {\n            function ChartState(initialState, widgetsClasses, plugins) {\n                if (widgetsClasses === void 0) {\n                    widgetsClasses = {};\n                }\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.data = {\n                    prevState: {},\n                    $el: null,\n                    zoom: 0,\n                    xAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n                            from: 0,\n                            to: 0,\n                            scroll: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 0,\n                                end: 5\n                            },\n                            margin: {\n                                start: 0,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 100,\n                        autoScroll: true,\n                        marks: []\n                    },\n                    yAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n                            from: 0,\n                            to: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 5,\n                                end: 5\n                            },\n                            margin: {\n                                start: 5,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 50,\n                        marks: []\n                    },\n                    animations: {\n                        enabled: true,\n                        trendChangeSpeed: .5,\n                        trendChangeEase: void 0,\n                        zoomSpeed: .25,\n                        zoomEase: Linear.easeNone,\n                        scrollSpeed: .5,\n                        scrollEase: Linear.easeNone,\n                        autoScrollSpeed: 1,\n                        autoScrollEase: Linear.easeNone\n                    },\n                    autoRender: {\n                        enabled: true,\n                        fps: 0\n                    },\n                    autoResize: true,\n                    renderer: \"WebGLRenderer\",\n                    autoScroll: true,\n                    controls: {\n                        enabled: true\n                    },\n                    cursor: {\n                        dragMode: false,\n                        x: 0,\n                        y: 0\n                    },\n                    backgroundColor: 0,\n                    backgroundOpacity: 1,\n                    showStats: false,\n                    pluginsState: {},\n                    eventEmitterMaxListeners: 20\n                };\n                this.widgetsClasses = {};\n                this.plugins = {};\n                this.isReady = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n                this.widgetsClasses = widgetsClasses;\n                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n                initialState.trends = this.trendsManager.calculatedOptions;\n                initialState = this.installPlugins(plugins, initialState);\n                this.setState(initialState);\n                this.setState({\n                    computedData: this.getComputedData()\n                });\n                this.savePrevState();\n                this.screen = new Screen_1.Screen(this);\n                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n                this.initListeners();\n                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n                this.isReady = true;\n                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n            }\n            ChartState.prototype.destroy = function() {\n                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n                this.ee.removeAllListeners();\n                this.data = {};\n            };\n            ChartState.prototype.onDestroy = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n            };\n            ChartState.prototype.onInitialStateApplied = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n            };\n            ChartState.prototype.onReady = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n            };\n            ChartState.prototype.onChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n            };\n            ChartState.prototype.onTrendChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n            };\n            ChartState.prototype.onTrendsChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n            };\n            ChartState.prototype.onScrollStop = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n            };\n            ChartState.prototype.onScroll = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n            };\n            ChartState.prototype.onZoom = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n            };\n            ChartState.prototype.onResize = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n            };\n            ChartState.prototype.onPluginsStateChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n            };\n            ChartState.prototype.getTrend = function(trendName) {\n                return this.trendsManager.getTrend(trendName);\n            };\n            ChartState.prototype.setState = function(newState, eventData, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var stateData = this.data;\n                var changedProps = {};\n                for (var key in newState) {\n                    if (stateData[key] !== newState[key]) {\n                        changedProps[key] = newState[key];\n                    }\n                }\n                this.savePrevState(changedProps);\n                var trendsData = {};\n                if (newState.trends) for (var trendName in newState.trends) {\n                    var trendOptions = newState.trends[trendName];\n                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n                    delete trendOptions.data;\n                }\n                var newStateContainsData = Object.keys(trendsData).length > 0;\n                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n                if (newStateContainsData) for (var trendName in trendsData) {\n                    this.data.trends[trendName].data = trendsData[trendName];\n                }\n                if (silent) return;\n                var recalculateResult = this.recalculateState(changedProps);\n                changedProps = recalculateResult.changedProps;\n                this.emitChangedStateEvents(changedProps, eventData);\n            };\n            ChartState.prototype.recalculateState = function(changedProps) {\n                var data = this.data;\n                var patch = {};\n                var actualData = Utils_1.Utils.deepMerge({}, data);\n                if (changedProps.widgets || !data.widgets) {\n                    patch.widgets = {};\n                    var widgetsOptions = data.widgets || {};\n                    for (var widgetName in this.widgetsClasses) {\n                        var WidgetClass = this.widgetsClasses[widgetName];\n                        var userOptions = widgetsOptions[widgetName] || {};\n                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n                    }\n                }\n                var cursorOptions = changedProps.cursor;\n                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n                if (isMouseDrag) {\n                    var oldX = data.prevState.cursor.x;\n                    var currentX = cursorOptions.x;\n                    var currentScroll = data.xAxis.range.scroll;\n                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n                    patch.xAxis = {\n                        range: {\n                            scroll: currentScroll + deltaXVal\n                        }\n                    };\n                    actualData = Utils_1.Utils.deepMerge(actualData, {\n                        xAxis: patch.xAxis\n                    });\n                }\n                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n                var scrollXChanged = false;\n                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n                if (needToRecalculateXAxis) {\n                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n                    if (xAxisPatch) {\n                        scrollXChanged = true;\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            xAxis: xAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            xAxis: xAxisPatch\n                        });\n                    }\n                }\n                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n                if (needToRecalculateYAxis) {\n                    var yAxisPatch = this.recalculateYAxis(actualData);\n                    if (yAxisPatch) {\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            yAxis: yAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            yAxis: yAxisPatch\n                        });\n                    }\n                }\n                this.savePrevState(patch);\n                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n                patch.computedData = this.getComputedData(allChangedProps);\n                this.savePrevState(patch);\n                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n                return {\n                    changedProps: allChangedProps,\n                    patch: patch\n                };\n            };\n            ChartState.prototype.getComputedData = function(changedProps) {\n                var computeAll = !changedProps;\n                var computedData = {};\n                if (computeAll || changedProps.trends && this.trendsManager) {\n                    computedData.trends = {\n                        maxXVal: this.trendsManager.getEndXVal(),\n                        minXVal: this.trendsManager.getStartXVal()\n                    };\n                }\n                return computedData;\n            };\n            ChartState.prototype.savePrevState = function(changedProps) {\n                if (!changedProps) changedProps = this.data;\n                var prevState = this.data.prevState;\n                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n            };\n            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n                var prevState = this.data.prevState;\n                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n                for (var key in changedProps) {\n                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n                }\n                if (!this.isReady) return;\n                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n                var resizeEventNeeded = changedProps.width || changedProps.height;\n                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n            };\n            ChartState.prototype.installPlugins = function(plugins, initialState) {\n                var _this = this;\n                initialState.pluginsState = {};\n                plugins.forEach(function(plugin) {\n                    var PluginClass = plugin.constructor;\n                    var pluginName = PluginClass.NAME;\n                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n                    });\n                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n                    _this.plugins[pluginName] = plugin;\n                    plugin.setupChartState(_this);\n                });\n                return initialState;\n            };\n            ChartState.prototype.getPlugin = function(pluginName) {\n                return this.plugins[pluginName];\n            };\n            ChartState.prototype.initListeners = function() {\n                var _this = this;\n                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n                    _this.handleTrendsChange(changedTrends, newData);\n                });\n            };\n            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n                for (var trendName in changedTrends) {\n                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n                }\n            };\n            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n                var axisRange = actualData.xAxis.range;\n                var patch = {\n                    range: {}\n                };\n                var isInitialize = axisRange.zeroVal == void 0;\n                var zeroVal, scaleFactor;\n                var zoom = axisRange.zoom;\n                if (axisRange.isMirrorMode) {\n                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n                }\n                if (isInitialize) {\n                    zeroVal = axisRange.from;\n                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                } else {\n                    zeroVal = axisRange.zeroVal;\n                    scaleFactor = axisRange.scaleFactor;\n                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n                        if (changedProps.xAxis.range.zoom) {\n                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n                        }\n                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                        patch.range.scroll = axisRange.from - zeroVal;\n                        patch.range.zoom = currentScaleFactor / scaleFactor;\n                        return patch;\n                    }\n                }\n                do {\n                    var from = zeroVal + axisRange.scroll;\n                    var to = from + actualData.width / (scaleFactor * zoom);\n                    var rangeLength = to - from;\n                    var needToRecalculateZoom = false;\n                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n                    if (needToRecalculateZoom) {\n                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n                        var zoom = zoom * fixScale;\n                        patch.range.zoom = zoom;\n                    }\n                } while (needToRecalculateZoom);\n                patch.range.from = from;\n                patch.range.to = to;\n                return patch;\n            };\n            ChartState.prototype.recalculateYAxis = function(actualData) {\n                var patch = {\n                    range: {}\n                };\n                var yAxisRange = actualData.yAxis.range;\n                var isInitialize = yAxisRange.scaleFactor == void 0;\n                var trends = this.trendsManager;\n                var trendsEndXVal = trends.getEndXVal();\n                var trendsStartXVal = trends.getStartXVal();\n                var xRange = actualData.xAxis.range;\n                var xFrom = xRange.from, xTo = xRange.to;\n                var xRangeLength = xTo - xFrom;\n                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n                if (xTo > trendsEndXVal) {\n                    xTo = trendsEndXVal;\n                    xFrom = xTo - xRangeLength;\n                } else if (xFrom < trendsStartXVal) {\n                    xFrom = trendsStartXVal;\n                    xTo = xFrom + xRangeLength;\n                }\n                var maxY = trends.getMaxYVal(xFrom, xTo);\n                var minY = trends.getMinYVal(xFrom, xTo);\n                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n                    if (trendLastY > maxY) maxY = trendLastY;\n                    if (trendLastY < minY) minY = trendLastY;\n                }\n                if (yAxisRange.isMirrorMode) {\n                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n                }\n                var margin = yAxisRange.margin;\n                var padding = {\n                    start: yAxisRange.padding.start + margin.start,\n                    end: yAxisRange.padding.end + margin.end\n                };\n                if (padding.end + padding.start >= actualData.height) {\n                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n                }\n                var rangeLength = maxY - minY;\n                var paddingTopInPercents = padding.end / actualData.height;\n                var paddingBottomInPercents = padding.start / actualData.height;\n                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n                if (isInitialize) {\n                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n                    scaleFactor = actualData.height / (toVal - fromVal);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                    needToZoom = true;\n                } else {\n                    scaleFactor = yAxisRange.scaleFactor;\n                    zeroVal = yAxisRange.zeroVal;\n                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n                }\n                if (!needToZoom) return null;\n                scroll = fromVal - zeroVal;\n                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n                var currentAxisRange = this.data.yAxis.range;\n                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n                return patch;\n            };\n            ChartState.prototype.zoom = function(zoomValue, origin) {\n                var _this = this;\n                if (origin === void 0) {\n                    origin = .5;\n                }\n                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n                var newZoom = zoom * zoomValue;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                var nextRange = this.data.width / (scaleFactor * newZoom);\n                var newScroll = scroll + (currentRange - nextRange) * origin;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            zoom: newZoom,\n                            scroll: newScroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.zoomToRange = function(range, origin) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                return this.zoom(currentRange / range, origin);\n            };\n            ChartState.prototype.scrollToEnd = function() {\n                var _this = this;\n                var state = this.data;\n                var endXVal = this.trendsManager.getEndXVal();\n                var range = state.xAxis.range;\n                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            scroll: scroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getValueOnXAxis = function(x) {\n                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.getValueByScreenX = function(x) {\n                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.getValueByScreenY = function(y) {\n                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByYAxis(y);\n            };\n            ChartState.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenYByValue = function(yVal) {\n                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            ChartState.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            ChartState.prototype.getScreenLeftVal = function() {\n                return this.getValueByScreenX(0);\n            };\n            ChartState.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.data.width);\n            };\n            ChartState.prototype.getPaddingRight = function() {\n                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n            };\n            return ChartState;\n        }();\n        exports.ChartState = ChartState;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        var EventEmitter = function() {\n            function EventEmitter() {\n                this.ee = new deps_1.EE2();\n            }\n            EventEmitter.prototype.emit = function(eventName) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n                var _a;\n            };\n            EventEmitter.prototype.on = function(eventName, callback) {\n                return this.ee.on(eventName, callback);\n            };\n            EventEmitter.prototype.off = function(eventName, callback) {\n                return this.ee.off(eventName, callback);\n            };\n            EventEmitter.prototype.subscribe = function(eventName, callback) {\n                var _this = this;\n                this.on(eventName, callback);\n                return function() {\n                    return _this.off(eventName, callback);\n                };\n            };\n            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n                this.ee.setMaxListeners(listenersCount);\n            };\n            EventEmitter.prototype.removeAllListeners = function(eventName) {\n                this.ee.removeAllListeners(eventName);\n            };\n            return EventEmitter;\n        }();\n        exports.EventEmitter = EventEmitter;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        function deepmerge(target, src, mergeArrays) {\n            if (mergeArrays === void 0) {\n                mergeArrays = true;\n            }\n            var array = Array.isArray(src);\n            var dst = array && [] || {};\n            if (array) {\n                target = target || [];\n                if (mergeArrays) {\n                    dst = dst.concat(target);\n                }\n                src.forEach(function(e, i) {\n                    if (typeof dst[i] === \"undefined\") {\n                        dst[i] = e;\n                    } else if (typeof e === \"object\") {\n                        dst[i] = deepmerge(target[i], e, mergeArrays);\n                    } else {\n                        if (target.indexOf(e) === -1) {\n                            dst.push(e);\n                        }\n                    }\n                });\n            } else {\n                if (target && typeof target === \"object\") {\n                    Object.keys(target).forEach(function(key) {\n                        dst[key] = target[key];\n                    });\n                }\n                Object.keys(src).forEach(function(key) {\n                    if (typeof src[key] !== \"object\" || !src[key]) {\n                        dst[key] = src[key];\n                    } else {\n                        if (!target[key]) {\n                            dst[key] = src[key];\n                        } else {\n                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n                        }\n                    }\n                });\n            }\n            return dst;\n        }\n        var Utils = function() {\n            function Utils() {}\n            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n                return deepmerge(obj1, obj2, mergeArrays);\n            };\n            Utils.deepCopy = function(obj) {\n                return JSON.parse(JSON.stringify(obj));\n            };\n            Utils.toFixed = function(num, digitsCount) {\n                var maxDigits = 15;\n                var result = \"\";\n                var intVal = Math.floor(num);\n                var intStr = intVal.toString();\n                var lengthDiff = digitsCount - intStr.length;\n                if (lengthDiff > 0) {\n                    result = \"0\".repeat(lengthDiff) + intStr;\n                } else {\n                    result = intStr;\n                }\n                var afterPointDigitsCount = maxDigits - intStr.length;\n                var afterPointStr = num.toString().split(\".\")[1];\n                if (afterPointStr) {\n                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n                }\n                return result;\n            };\n            Utils.bindEvent = function() {};\n            Utils.createTexture = function(width, height, fn) {\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = width;\n                canvas.height = height;\n                var ctx = canvas.getContext(\"2d\");\n                fn(ctx);\n                var texture = new THREE.Texture(canvas);\n                texture.needsUpdate = true;\n                return texture;\n            };\n            Utils.createPixelPerfectTexture = function(width, height, fn) {\n                var texture = this.createTexture(width, height, fn);\n                texture.minFilter = THREE.NearestFilter;\n                return texture;\n            };\n            Utils.error = function(msg) {\n                console.error(\"Chart error: \" + msg);\n                throw \"Chart: \" + msg;\n            };\n            Utils.warn = function(msg) {\n                console.warn(\"Chart warning: \" + msg);\n            };\n            Utils.getUid = function() {\n                return this.currentId++;\n            };\n            Utils.getDistance = function(num1, num2) {\n                return Math.max(num1, num2) - Math.min(num1, num2);\n            };\n            Utils.binarySearchClosestInd = function(arr, num, key) {\n                var mid;\n                var lo = 0;\n                var hi = arr.length - 1;\n                while (hi - lo > 1) {\n                    mid = Math.floor((lo + hi) / 2);\n                    if (arr[mid][key] < num) {\n                        lo = mid;\n                    } else {\n                        hi = mid;\n                    }\n                }\n                if (num - arr[lo][key] <= arr[hi][key] - num) {\n                    return lo;\n                }\n                return hi;\n            };\n            Utils.binarySearchClosest = function(arr, num, key) {\n                var ind = this.binarySearchClosestInd(arr, num, key);\n                return arr[ind];\n            };\n            Utils.rectsIntersect = function(r1, r2) {\n                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n            };\n            /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\n            Utils.parseColor = function(color) {\n                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by $.parseColor\");\n                isNaN(cache[3]) && (cache[3] = 1);\n                return cache;\n            };\n            Utils.getHexColor = function(str) {\n                var rgb = this.parseColor(str);\n                return (rgb[0] << 8 * 2) + (rgb[1] << 8) + rgb[2];\n            };\n            Utils.throttle = function(func, ms) {\n                var isThrottled = false, savedArgs, savedThis;\n                function wrapper() {\n                    if (isThrottled) {\n                        savedArgs = arguments;\n                        savedThis = this;\n                        return;\n                    }\n                    func.apply(this, arguments);\n                    isThrottled = true;\n                    setTimeout(function() {\n                        isThrottled = false;\n                        if (savedArgs) {\n                            wrapper.apply(savedThis, savedArgs);\n                            savedArgs = savedThis = null;\n                        }\n                    }, ms);\n                }\n                return wrapper;\n            };\n            Utils.msToTimeString = function(timestamp) {\n                var h = Math.floor(timestamp / 36e4);\n                var m = Math.floor(timestamp / 6e4);\n                var s = Math.floor(timestamp / 1e3);\n                return h + \":\" + m + \":\" + s;\n            };\n            Utils.getRandomItem = function(arr) {\n                var ind = Math.floor(Math.random() * arr.length);\n                return arr[ind];\n            };\n            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n                if (excludeProps === void 0) {\n                    excludeProps = [];\n                }\n                for (var key in props) {\n                    if (excludeProps.indexOf(key) !== -1) continue;\n                    if (srcObject[key] == void 0) continue;\n                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n                    } else {\n                        dstObject[key] = this.deepCopy(srcObject[key]);\n                    }\n                }\n            };\n            Utils.currentId = 1;\n            return Utils;\n        }();\n        exports.Utils = Utils;\n    }, function(module, exports) {\n        \"use strict\";\n        var ChartWidget = function() {\n            function ChartWidget(chartState) {\n                this.unsubscribers = [];\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            ChartWidget.prototype.bindEvents = function() {};\n            ChartWidget.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartWidget.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartWidget.getDefaultOptions = function() {\n                return {\n                    enabled: true\n                };\n            };\n            ChartWidget.widgetName = \"\";\n            return ChartWidget;\n        }();\n        exports.ChartWidget = ChartWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Trend_1 = __webpack_require__(17);\n        var EventEmmiter_1 = __webpack_require__(13);\n        var EVENTS = {\n            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n        };\n        var TrendsManager = function() {\n            function TrendsManager(state, initialState) {\n                this.trends = {};\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.chartState = state;\n                var trendsCalculatedOptions = {};\n                for (var trendName in initialState.trends) {\n                    var trend = this.createTrend(state, trendName, initialState);\n                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n                }\n                this.calculatedOptions = trendsCalculatedOptions;\n                this.bindEvents();\n            }\n            TrendsManager.prototype.getTrend = function(trendName) {\n                return this.trends[trendName];\n            };\n            TrendsManager.prototype.getEnabledTrends = function() {\n                var enabledTrends = [];\n                var allTrends = this.trends;\n                for (var trendName in allTrends) {\n                    var trend = allTrends[trendName];\n                    trend.getOptions().enabled && enabledTrends.push(trend);\n                }\n                return enabledTrends;\n            };\n            TrendsManager.prototype.getStartXVal = function() {\n                var trends = this.getEnabledTrends();\n                return trends[0].getData()[0].xVal;\n            };\n            TrendsManager.prototype.getEndXVal = function() {\n                var trends = this.getEnabledTrends();\n                var firstTrendData = trends[0].getData();\n                return firstTrendData[firstTrendData.length - 1].xVal;\n            };\n            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n                var trends = this.getEnabledTrends();\n                var compareFn;\n                var result;\n                if (extremumIsMax) {\n                    result = -Infinity;\n                    compareFn = Math.max;\n                } else {\n                    result = Infinity;\n                    compareFn = Math.min;\n                }\n                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n                    var trend = trends_1[_i];\n                    var trendData = trend.getData(fromX, toX);\n                    var trendYValues = trendData.map(function(dataItem) {\n                        return dataItem.yVal;\n                    });\n                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n                }\n                if (result == Infinity || result == -Infinity) result = NaN;\n                return result;\n            };\n            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n                return this.getExtremumYVal(true, fromX, toX);\n            };\n            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n                return this.getExtremumYVal(false, fromX, toX);\n            };\n            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n            };\n            TrendsManager.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateAppliedHandler();\n                });\n            };\n            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n                var _this = this;\n                var _loop_1 = function(trendName) {\n                    this_1.trends[trendName].segments.onRebuild(function() {\n                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n                    });\n                };\n                var this_1 = this;\n                for (var trendName in this.trends) {\n                    _loop_1(trendName);\n                }\n            };\n            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n                var trend = new Trend_1.Trend(state, trendName, initialState);\n                this.trends[trendName] = trend;\n                return trend;\n            };\n            return TrendsManager;\n        }();\n        exports.TrendsManager = TrendsManager;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var TrendSegments_1 = __webpack_require__(18);\n        var EventEmmiter_1 = __webpack_require__(13);\n        var deps_1 = __webpack_require__(3);\n        var EVENTS = {\n            CHANGE: \"Change\",\n            PREPEND_REQUEST: \"prependRequest\"\n        };\n        (function(TREND_TYPE) {\n            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n        var TREND_TYPE = exports.TREND_TYPE;\n        var DEFAULT_OPTIONS = {\n            enabled: true,\n            type: TREND_TYPE.LINE,\n            data: [],\n            maxSegmentLength: 1e3,\n            lineWidth: 2,\n            lineColor: 16777215,\n            hasGradient: true,\n            hasBeacon: false,\n            settingsForTypes: {\n                CANDLE: {\n                    minSegmentLengthInPx: 20,\n                    maxSegmentLengthInPx: 40\n                },\n                LINE: {\n                    minSegmentLengthInPx: 2,\n                    maxSegmentLengthInPx: 10\n                }\n            }\n        };\n        var Trend = function() {\n            function Trend(chartState, trendName, initialState) {\n                this.minXVal = Infinity;\n                this.minYVal = Infinity;\n                this.maxXVal = -Infinity;\n                this.maxYVal = -Infinity;\n                var options = initialState.trends[trendName];\n                this.name = trendName;\n                this.chartState = chartState;\n                this.calculatedOptions = Utils_1.Utils.deepMerge(DEFAULT_OPTIONS, options);\n                this.calculatedOptions.name = trendName;\n                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n                this.calculatedOptions.dataset = [];\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvents();\n            }\n            Trend.prototype.onInitialStateApplied = function() {\n                this.segments = new TrendSegments_1.TrendSegments(this.chartState, this);\n            };\n            Trend.prototype.bindEvents = function() {\n                var _this = this;\n                var chartState = this.chartState;\n                chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateApplied();\n                });\n                chartState.onScrollStop(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onZoom(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n                });\n                chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            Trend.prototype.getCalculatedOptions = function() {\n                return this.calculatedOptions;\n            };\n            Trend.prototype.appendData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData());\n                var updatedTrendData = options.data.concat(newData);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.prependData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData(), true);\n                var updatedTrendData = newData.concat(options.data);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.changeData = function(allData, newData) {\n                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n                    var item = newData_1[_i];\n                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n                }\n                var options = this.getOptions();\n                var statePatch = {\n                    trends: (_a = {}, _a[options.name] = {\n                        data: allData\n                    }, _a)\n                };\n                this.chartState.setState(statePatch, newData);\n                var _a;\n            };\n            Trend.prototype.getData = function(fromX, toX) {\n                var data = this.getOptions().data;\n                if (fromX == void 0 && toX == void 0) return data;\n                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n                toX = toX !== void 0 ? toX : data[data.length].xVal;\n                var filteredData = [];\n                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                    var item = data_1[_i];\n                    if (item.xVal < fromX) continue;\n                    if (item.xVal > toX) break;\n                    filteredData.push(item);\n                }\n                return filteredData;\n            };\n            Trend.prototype.getFirstItem = function() {\n                return this.getOptions().data[0];\n            };\n            Trend.prototype.getLastItem = function() {\n                var data = this.getOptions().data;\n                return data[data.length - 1];\n            };\n            Trend.prototype.getOptions = function() {\n                return this.chartState.data.trends[this.name];\n            };\n            Trend.prototype.setOptions = function(options) {\n                this.chartState.setState({\n                    trends: (_a = {}, _a[this.name] = options, _a)\n                });\n                var _a;\n            };\n            Trend.prototype.onPrependRequest = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n                return function() {\n                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n                };\n            };\n            Trend.prototype.onChange = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.CHANGE, cb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, cb);\n                };\n            };\n            Trend.prototype.onDataChange = function(cb) {\n                var _this = this;\n                var onChangeCb = function(changedOptions, newData) {\n                    if (newData) cb(newData);\n                };\n                this.ee.on(EVENTS.CHANGE, onChangeCb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n                };\n            };\n            Trend.prototype.checkForPrependRequest = function() {\n                var _this = this;\n                if (this.prependRequest) return;\n                var chartState = this.chartState;\n                var minXVal = chartState.data.computedData.trends.minXVal;\n                var minScreenX = chartState.getScreenXByValue(minXVal);\n                var needToRequest = minScreenX > 0;\n                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var requestedDataLength = to - from;\n                if (!needToRequest) return;\n                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n                });\n                this.prependRequest.then(function(newData) {\n                    _this.prependData(newData);\n                    _this.prependRequest = null;\n                }, function() {\n                    _this.prependRequest = null;\n                });\n            };\n            Trend.prepareData = function(newData, currentData, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var data = [];\n                if (typeof newData[0] == \"number\") {\n                    currentData = currentData || [];\n                    var initialItem = void 0;\n                    var xVal = void 0;\n                    if (isPrepend) {\n                        initialItem = currentData[0];\n                        xVal = initialItem.xVal - newData.length;\n                    } else {\n                        initialItem = currentData[currentData.length - 1];\n                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n                    }\n                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n                        var yVal = _a[_i];\n                        data.push({\n                            xVal: xVal,\n                            yVal: yVal,\n                            id: Utils_1.Utils.getUid()\n                        });\n                        xVal++;\n                    }\n                } else {\n                    data = newData;\n                }\n                return data;\n            };\n            return Trend;\n        }();\n        exports.Trend = Trend;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var EventEmmiter_1 = __webpack_require__(13);\n        var Vector3 = THREE.Vector3;\n        var Trend_1 = __webpack_require__(17);\n        var Utils_1 = __webpack_require__(14);\n        var MAX_ANIMATED_SEGMENTS = 100;\n        var EVENTS = {\n            REBUILD: \"rebuild\",\n            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n            ANIMATION_FRAME: \"animationFrame\"\n        };\n        var TrendSegments = function() {\n            function TrendSegments(chartState, trend) {\n                this.segmentsById = {};\n                this.segments = [];\n                this.animatedSegmentsIds = [];\n                this.segmentsLength = 0;\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForPrepend = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.trend = trend;\n                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n                this.tryToRebuildSegments();\n                this.bindEvents();\n            }\n            TrendSegments.prototype.bindEvents = function() {\n                var _this = this;\n                this.trend.onChange(function(changedOptions, newData) {\n                    return _this.onTrendChangeHandler(changedOptions, newData);\n                });\n                this.chartState.onZoom(function() {\n                    return _this.onZoomHandler();\n                });\n                this.chartState.onScroll(function() {\n                    return _this.recalculateDisplayedRange();\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            TrendSegments.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.appendAnimation && this.appendAnimation.kill();\n                this.prependAnimation && this.prependAnimation.kill();\n            };\n            TrendSegments.prototype.onZoomHandler = function() {\n                var segmentsRebuilded = this.tryToRebuildSegments();\n                if (!segmentsRebuilded) {\n                    this.recalculateDisplayedRange();\n                }\n            };\n            TrendSegments.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n                if (needToRebuildSegments) {\n                    this.tryToRebuildSegments(true);\n                    return;\n                }\n                if (!newData) return;\n                var data = this.trend.getData();\n                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                isAppend ? this.appendData(newData) : this.prependData(newData);\n                this.recalculateDisplayedRange();\n            };\n            TrendSegments.prototype.getEndSegment = function() {\n                return this.segmentsById[this.endSegmentId];\n            };\n            TrendSegments.prototype.getStartSegment = function() {\n                return this.segmentsById[this.startSegmentId];\n            };\n            TrendSegments.prototype.tryToRebuildSegments = function(force) {\n                if (force === void 0) {\n                    force = false;\n                }\n                var options = this.trend.getOptions();\n                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n                var trendTypesSettings = options.settingsForTypes;\n                var trendTypeSettings = trendTypesSettings[trendTypeName];\n                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n                var needToRebuild = this.segments.length === 0 || force;\n                var segmentLength = this.maxSegmentLength;\n                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n                }\n                if (!needToRebuild) return false;\n                this.maxSegmentLength = segmentLength;\n                this.segmentsById = {};\n                this.segments = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.segmentsLength = 0;\n                this.stopAllAnimations();\n                this.appendData(null, true);\n                this.recalculateDisplayedRange(true);\n                this.ee.emit(EVENTS.REBUILD);\n            };\n            TrendSegments.prototype.stopAllAnimations = function() {\n                this.animatedSegmentsIds = [];\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForAppend = [];\n                if (this.prependAnimation) this.prependAnimation.kill();\n                if (this.appendAnimation) this.appendAnimation.kill();\n            };\n            TrendSegments.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n                if (segmentsAreRebuilded === void 0) {\n                    segmentsAreRebuilded = false;\n                }\n                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n                var displayedRange = to - from;\n                this.firstDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, from - displayedRange, \"startXVal\");\n                this.lastDisplayedSegment = Utils_1.Utils.binarySearchClosest(this.segments, to + displayedRange, \"endXVal\");\n                if (segmentsAreRebuilded) return;\n                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n            };\n            TrendSegments.prototype.getSegmentsForXValues = function(values) {\n                var valueInd = 0;\n                var value = values[valueInd];\n                var lastValueInd = values.length - 1;\n                var results = [];\n                var segment = this.getStartSegment();\n                if (!segment.hasValue) return [];\n                while (segment) {\n                    while (value < segment.startXVal) {\n                        results.push(void 0);\n                        value = values[++valueInd];\n                    }\n                    while (value > segment.endXVal) {\n                        segment = segment.getNext();\n                        if (!segment) break;\n                    }\n                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n                    if (valueInPoint) {\n                        results.push(segment);\n                        value = values[++valueInd];\n                    }\n                    if (valueInd > lastValueInd) break;\n                }\n                return results;\n            };\n            TrendSegments.prototype.onAnimationFrame = function(cb) {\n                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n            };\n            TrendSegments.prototype.onRebuild = function(cb) {\n                return this.ee.subscribe(EVENTS.REBUILD, cb);\n            };\n            TrendSegments.prototype.onDisplayedRangeChanged = function(cb) {\n                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n            };\n            TrendSegments.prototype.allocateNextSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var prevSegment = this.segmentsById[this.endSegmentId];\n                if (prevSegment && prevSegment.hasValue) {\n                    prevSegment.nextId = id;\n                    segment.prevId = prevSegment.id;\n                }\n                this.endSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.push(segment);\n                return segment;\n            };\n            TrendSegments.prototype.allocatePrevSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var nextSegment = this.segmentsById[this.startSegmentId];\n                if (nextSegment && nextSegment.hasValue) {\n                    nextSegment.prevId = id;\n                    segment.nextId = nextSegment.id;\n                }\n                this.startSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.unshift(segment);\n                return segment;\n            };\n            TrendSegments.prototype.appendData = function(newData, needRebuildSegments) {\n                if (needRebuildSegments === void 0) {\n                    needRebuildSegments = false;\n                }\n                var trendData = this.trend.getData();\n                if (needRebuildSegments) {\n                    newData = trendData;\n                    this.animatedSegmentsForAppend = [];\n                }\n                var startItemInd = trendData.length - newData.length;\n                var segment = this.getEndSegment() || this.allocateNextSegment();\n                var initialSegment = segment.hasValue ? segment : null;\n                var initialAnimationState = segment.createAnimationState();\n                var itemInd = 0;\n                while (itemInd < newData.length) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.appendItem(item);\n                    var isLastItem = itemInd == newData.length - 1;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd++;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForAppend.length > 0) {\n                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForAppend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocateNextSegment();\n                    var prevItem = trendData[startItemInd + itemInd - 1];\n                    segment.appendItem(prevItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (needRebuildSegments) {\n                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n                        var segmentId = _a[_i];\n                        var segment_1 = this.segmentsById[segmentId];\n                        segment_1.currentAnimationState = segment_1.createAnimationState();\n                    }\n                    this.animatedSegmentsForAppend = [];\n                    return;\n                }\n                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time);\n            };\n            TrendSegments.prototype.prependData = function(newData) {\n                var trendData = this.trend.getData();\n                var segment = this.getStartSegment() || this.segmentsById[0];\n                var initialSegment = segment.hasValue ? segment : null;\n                var itemInd = newData.length - 1;\n                var initialAnimationState = segment.createAnimationState();\n                while (itemInd >= 0) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.prependItem(item);\n                    var isLastItem = itemInd == 0;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd--;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForPrepend.length > 0) {\n                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForPrepend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocatePrevSegment();\n                    var nextItem = trendData[itemInd + 1];\n                    segment.prependItem(nextItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time, true);\n            };\n            TrendSegments.prototype.animate = function(time, isPrepend) {\n                var _this = this;\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n                if (animation && animation.isActive() || time == 0) {\n                    if (animation) animation.kill();\n                    this.onAnimationFrameHandler(1, isPrepend);\n                    animatedSegmentsIds.length = 0;\n                    return;\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var ease = animationsOptions.trendChangeEase;\n                var objectToAnimate = {\n                    animationValue: 0\n                };\n                animation = TweenLite.to(objectToAnimate, time, {\n                    animationValue: 1,\n                    ease: ease\n                });\n                animation.eventCallback(\"onUpdate\", function() {\n                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animatedSegmentsIds.length = 0;\n                    _this.appendAnimation = null;\n                });\n                if (isPrepend) {\n                    this.prependAnimation = animation;\n                } else {\n                    this.appendAnimation = animation;\n                }\n            };\n            TrendSegments.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n                    var segmentId = animatedSegmentsIds_1[_i];\n                    var segment = this.segmentsById[segmentId];\n                    for (var key in segment.targetAnimationState) {\n                        var targetValue = segment.targetAnimationState[key];\n                        var initialValue = segment.initialAnimationState[key];\n                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n                        segment.currentAnimationState[key] = currentValue;\n                    }\n                }\n                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n            };\n            return TrendSegments;\n        }();\n        exports.TrendSegments = TrendSegments;\n        var TrendSegment = function() {\n            function TrendSegment(trendPoints, id) {\n                this.isCompleted = false;\n                this.items = [];\n                this.initialAnimationState = {};\n                this.targetAnimationState = {};\n                this.currentAnimationState = {};\n                this.trendSegments = trendPoints;\n                this.id = id;\n                this.maxLength = trendPoints.maxSegmentLength;\n            }\n            TrendSegment.prototype.createAnimationState = function() {\n                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n                return {\n                    xVal: xVal,\n                    yVal: yVal,\n                    startXVal: startXVal,\n                    startYVal: startYVal,\n                    endXVal: endXVal,\n                    endYVal: endYVal,\n                    maxYVal: maxYVal,\n                    minYVal: minYVal,\n                    maxLength: maxLength\n                };\n            };\n            TrendSegment.prototype.appendItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.push(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var startXVal = items[0].xVal;\n                if (item.xVal - startXVal > this.maxLength) return false;\n                items.push(item);\n                return true;\n            };\n            TrendSegment.prototype.prependItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.unshift(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var endXVal = items[items.length - 1].xVal;\n                if (endXVal - item.xVal > this.maxLength) return false;\n                items.unshift(item);\n                return true;\n            };\n            TrendSegment.prototype.complete = function() {\n                this.isCompleted = true;\n                this.recalculateItems();\n                this.items = [];\n            };\n            TrendSegment.prototype.recalculateItems = function() {\n                var items = this.items;\n                var itemsLength = items.length;\n                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n                var endItem = items[itemsLength - 1];\n                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n                var startXVal, startYVal;\n                var startItem = items[0];\n                startXVal = startItem.xVal;\n                startYVal = startItem.yVal;\n                var minX = Math.min(startXVal, endXVal);\n                var maxX = Math.max(startXVal, endXVal);\n                var middleXVal = minX + (maxX - minX) / 2;\n                var minY = Math.min(startYVal, endYVal);\n                var maxY = Math.max(startYVal, endYVal);\n                var middleYVal = minY + (maxY - minY) / 2;\n                var yVals = items.map(function(item) {\n                    return item.yVal;\n                });\n                this.startXVal = startXVal;\n                this.startYVal = startYVal;\n                this.endXVal = endXVal;\n                this.endYVal = endYVal;\n                this.xVal = middleXVal;\n                this.yVal = middleYVal;\n                this.maxYVal = Math.max.apply(Math, yVals);\n                this.minYVal = Math.min.apply(Math, yVals);\n                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n            };\n            TrendSegment.prototype.getNext = function() {\n                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n            };\n            TrendSegment.prototype.getPrev = function() {\n                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n            };\n            TrendSegment.prototype.getFrameVal = function() {\n                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n                return new Vector3(xVal, yVal, 0);\n            };\n            TrendSegment.prototype.getFramePoint = function() {\n                var frameVal = this.getFrameVal();\n                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n            };\n            return TrendSegment;\n        }();\n        exports.TrendSegment = TrendSegment;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var EventEmmiter_1 = __webpack_require__(13);\n        var Screen = function() {\n            function Screen(chartState) {\n                this.options = {\n                    scrollXVal: 0,\n                    scrollX: 0,\n                    scrollYVal: 0,\n                    scrollY: 0,\n                    zoomX: 1,\n                    zoomY: 1\n                };\n                this.currentScrollX = {\n                    x: 0\n                };\n                this.currentScrollY = {\n                    y: 0\n                };\n                this.currentZoomX = {\n                    val: 1\n                };\n                this.currentZoomY = {\n                    val: 1\n                };\n                this.chartState = chartState;\n                var _a = chartState.data, w = _a.width, h = _a.height;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.transform({\n                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n                    zoomY: 1\n                });\n                this.bindEvents();\n            }\n            Screen.prototype.getCameraSettings = function() {\n                var _a = this.chartState.data, w = _a.width, h = _a.height;\n                var FOV = 75;\n                var vFOV = FOV * (Math.PI / 180);\n                return {\n                    FOV: FOV,\n                    aspect: w / h,\n                    near: .1,\n                    far: 5e3,\n                    z: h / (2 * Math.tan(vFOV / 2)),\n                    x: w / 2,\n                    y: h / 2\n                };\n            };\n            Screen.prototype.onZoomFrame = function(cb) {\n                var _this = this;\n                var eventName = \"zoomFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onScrollFrame = function(cb) {\n                var _this = this;\n                var eventName = \"scrollFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onTransformationFrame = function(cb) {\n                var _this = this;\n                var eventName = \"transformationFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.cameraIsMoving = function() {\n                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n            };\n            Screen.prototype.transform = function(options, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n                if (scrollX != void 0) this.options.scrollX = scrollX;\n                if (scrollY != void 0) this.options.scrollY = scrollY;\n                if (zoomX != void 0) this.options.zoomX = zoomX;\n                if (zoomY != void 0) this.options.zoomY = zoomY;\n                if (scrollX != void 0 || zoomX) {\n                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n                    this.options.scrollXVal = options.scrollXVal;\n                }\n                if (scrollY != void 0 || zoomY) {\n                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n                    this.options.scrollYVal = options.scrollYVal;\n                }\n                if (silent) return;\n                this.ee.emit(\"transformationFrame\", options);\n                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n                    this.ee.emit(\"scrollFrame\", options);\n                }\n                if (options.zoomX != void 0 || options.zoomY != void 0) {\n                    this.ee.emit(\"zoomFrame\", options);\n                }\n            };\n            Screen.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onChange(function(changedProps) {\n                    if (changedProps.xAxis && changedProps.xAxis.range) {\n                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n                    }\n                    if (changedProps.yAxis && changedProps.yAxis.range) {\n                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n                    }\n                });\n                state.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            Screen.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.scrollXAnimation && this.scrollXAnimation.kill();\n                this.scrollYAnimation && this.scrollYAnimation.kill();\n                this.zoomXAnimation && this.zoomXAnimation.kill();\n                this.zoomYAnimation && this.zoomYAnimation.kill();\n            };\n            Screen.prototype.onScrollXHandler = function(changedProps) {\n                var _this = this;\n                var state = this.chartState;\n                var isDragMode = state.data.cursor.dragMode;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled && !isDragMode;\n                var zoomXChanged = changedProps.xAxis.range.zoom;\n                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n                var range = state.data.xAxis.range;\n                var targetX = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollX.x = this.options.scrollX;\n                var cb = function() {\n                    _this.transform({\n                        scrollX: _this.currentScrollX.x\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n                        x: targetX,\n                        ease: ease\n                    });\n                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollX.x = targetX;\n                    cb();\n                }\n            };\n            Screen.prototype.onScrollYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n                var range = state.data.yAxis.range;\n                var targetY = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollY.y = this.options.scrollY;\n                var cb = function() {\n                    _this.transform({\n                        scrollY: _this.currentScrollY.y\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n                        y: targetY,\n                        ease: animations.zoomEase\n                    });\n                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollY.y = targetY;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomXHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.xAxis.range.zoom;\n                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomX: _this.currentZoomX.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomX.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.yAxis.range.zoom;\n                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomY: _this.currentZoomY.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomY.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomX;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomY;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            Screen.prototype.getValueOnXAxis = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n            };\n            Screen.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n            };\n            Screen.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n            };\n            Screen.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n            };\n            Screen.prototype.getValueByScreenX = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.getValueByScreenY = function(y) {\n                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n            };\n            Screen.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            Screen.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            Screen.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            Screen.prototype.getPointByScreenY = function(screenY) {\n                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n            };\n            Screen.prototype.getTop = function() {\n                return this.getPointByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottom = function() {\n                return this.getPointByScreenY(0);\n            };\n            Screen.prototype.getLeft = function() {\n                return this.getPointByScreenX(0);\n            };\n            Screen.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.chartState.data.width);\n            };\n            Screen.prototype.getTopVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottomVal = function() {\n                return this.getValueByScreenY(0);\n            };\n            Screen.prototype.getCenterYVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height / 2);\n            };\n            return Screen;\n        }();\n        exports.Screen = Screen;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var EventEmmiter_1 = __webpack_require__(13);\n        var AXIS_MARK_DEFAULT_OPTIONS = {\n            type: \"simple\",\n            lineWidth: 1,\n            value: 0,\n            showValue: false,\n            stickToEdges: false,\n            lineColor: \"#FFFFFF\",\n            title: \"\"\n        };\n        var AxisMarks = function() {\n            function AxisMarks(chartState, axisType) {\n                this.items = {};\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.axisType = axisType;\n                var marks = this.items;\n                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n                    var options = axisMarksOptions_1[_i];\n                    var axisMark = void 0;\n                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n                    if (options.type == \"timeleft\") {\n                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n                    } else {\n                        axisMark = new AxisMark(chartState, axisType, options);\n                    }\n                    marks[options.name] = axisMark;\n                }\n                this.bindEvents();\n            }\n            AxisMarks.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, newData);\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n                if (!newData) return;\n                var startVal = newData[0].xVal;\n                var endVal = newData[newData.length - 1].xVal;\n                var marks = this.items;\n                for (var markName in marks) {\n                    var mark = marks[markName];\n                    var markVal = mark.options.value;\n                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n                }\n            };\n            AxisMarks.prototype.getItems = function() {\n                return this.items;\n            };\n            AxisMarks.prototype.getItem = function(markName) {\n                return this.items[markName];\n            };\n            return AxisMarks;\n        }();\n        exports.AxisMarks = AxisMarks;\n        var AxisMark = function() {\n            function AxisMark(chartState, axisType, options) {\n                this.renderOnTrendsChange = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.options = options;\n                this.axisType = axisType;\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            AxisMark.prototype.bindEvents = function() {};\n            AxisMark.prototype.setOptions = function(newOptions) {\n                var value = this.options.value;\n                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisMark.prototype.getDisplayedVal = function() {\n                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n                return String(displayedValue !== void 0 ? displayedValue : value);\n            };\n            AxisMark.prototype.onMarkCrossed = function(cb) {\n                var _this = this;\n                this.ee.on(\"markCrossed\", cb);\n                return function() {\n                    _this.ee.off(\"markCrossed\", cb);\n                };\n            };\n            AxisMark.prototype.onValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"valueChange\", cb);\n                return function() {\n                    _this.ee.off(\"valueChange\", cb);\n                };\n            };\n            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"onDisplayedValueChange\", cb);\n                return function() {\n                    _this.ee.off(\"onDisplayedValueChange\", cb);\n                };\n            };\n            AxisMark.typeName = \"simple\";\n            return AxisMark;\n        }();\n        exports.AxisMark = AxisMark;\n        var AxisTimeleftMark = function(_super) {\n            __extends(AxisTimeleftMark, _super);\n            function AxisTimeleftMark() {\n                _super.apply(this, arguments);\n                this.renderOnTrendsChange = true;\n            }\n            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n                var markVal = this.options.value;\n                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n                var time = markVal - maxXVal;\n                if (time < 0) time = 0;\n                return Utils_1.Utils.msToTimeString(time);\n            };\n            AxisTimeleftMark.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n            };\n            AxisTimeleftMark.prototype.onTrendsChange = function() {\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisTimeleftMark.typeName = \"timeleft\";\n            return AxisTimeleftMark;\n        }(AxisMark);\n        exports.AxisTimeleftMark = AxisTimeleftMark;\n    }, function(module, exports) {\n        \"use strict\";\n        (function(AXIS_RANGE_TYPE) {\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n        (function(AXIS_TYPE) {\n            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n        var AXIS_TYPE = exports.AXIS_TYPE;\n        (function(AXIS_DATA_TYPE) {\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Mesh = THREE.Mesh;\n        var Object3D = THREE.Object3D;\n        var Widget_1 = __webpack_require__(15);\n        var GridWidget_1 = __webpack_require__(23);\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var AxisWidget = function(_super) {\n            __extends(AxisWidget, _super);\n            function AxisWidget(state) {\n                var _this = this;\n                _super.call(this, state);\n                this.isDestroyed = false;\n                this.object3D = new Object3D();\n                this.axisXObject = new Object3D();\n                this.axisYObject = new Object3D();\n                this.object3D.add(this.axisXObject);\n                this.object3D.add(this.axisYObject);\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }, 1e3);\n                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n            }\n            AxisWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n                    _this.onScrollChange(options.scrollX, options.scrollY);\n                }), state.screen.onZoomFrame(function(options) {\n                    _this.onZoomFrame(options);\n                }), state.onDestroy(function() {\n                    return _this.onDestroy();\n                }), state.onResize(function() {\n                    return _this.onResize();\n                }));\n            };\n            AxisWidget.prototype.onDestroy = function() {\n                this.isDestroyed = true;\n                this.unbindEvents();\n            };\n            AxisWidget.prototype.onScrollChange = function(x, y) {\n                if (y != void 0) {\n                    this.axisYObject.position.y = y;\n                    this.axisXObject.position.y = y;\n                }\n                if (x != void 0) {\n                    this.axisYObject.position.x = x;\n                    this.updateAxisXRequest();\n                }\n            };\n            AxisWidget.prototype.onResize = function() {\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n            };\n            AxisWidget.prototype.setupAxis = function(orientation) {\n                var _this = this;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var canvasWidth = 0, canvasHeight = 0;\n                if (isXAxis) {\n                    this.axisXObject.traverse(function(obj) {\n                        return _this.axisXObject.remove(obj);\n                    });\n                    canvasWidth = visibleWidth * 3;\n                    canvasHeight = 50;\n                } else {\n                    this.axisYObject.traverse(function(obj) {\n                        return _this.axisYObject.remove(obj);\n                    });\n                    canvasWidth = 50;\n                    canvasHeight = visibleHeight * 3;\n                }\n                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n                if (isXAxis) {\n                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisXObject.add(axisMesh);\n                } else {\n                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisYObject.add(axisMesh);\n                }\n                this.updateAxis(orientation);\n            };\n            AxisWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisWidget.prototype.updateAxis = function(orientation) {\n                if (this.isDestroyed) return;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n                var axisOptions;\n                var axisMesh;\n                var axisGridParams;\n                if (isXAxis) {\n                    axisMesh = this.axisXObject.children[0];\n                    axisOptions = this.chartState.data.xAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n                } else {\n                    axisMesh = this.axisYObject.children[0];\n                    axisOptions = this.chartState.data.yAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n                }\n                var geometry = axisMesh.geometry;\n                var canvasWidth = geometry.parameters.width;\n                var canvasHeight = geometry.parameters.height;\n                var texture = axisMesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                if (isXAxis) {\n                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n                }\n                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n                var startVal = axisGridParams.start - edgeOffset;\n                var endVal = axisGridParams.end + edgeOffset;\n                ctx.beginPath();\n                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n                    var displayedValue = \"\";\n                    if (isXAxis) {\n                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n                        ctx.textAlign = \"center\";\n                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n                        } else {\n                            displayedValue = Number(val.toFixed(14)).toString();\n                        }\n                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n                    } else {\n                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n                        ctx.textAlign = \"right\";\n                        displayedValue = Number(val.toFixed(14)).toString();\n                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n                    }\n                    ctx.stroke();\n                }\n                ctx.stroke();\n                ctx.closePath();\n                texture.needsUpdate = true;\n            };\n            AxisWidget.prototype.onZoomFrame = function(options) {\n                if (options.zoomX) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }\n                if (options.zoomY) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n                }\n            };\n            AxisWidget.getDateStr = function(timestamp, gridParams) {\n                var sec = 1e3;\n                var min = sec * 60;\n                var hour = min * 60;\n                var day = hour * 60;\n                var step = gridParams.step;\n                var d = new Date(timestamp);\n                var tf = function(num) {\n                    return Utils_1.Utils.toFixed(num, 2);\n                };\n                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n            };\n            AxisWidget.widgetName = \"Axis\";\n            return AxisWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisWidget = AxisWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Vector3 = THREE.Vector3;\n        var Widget_1 = __webpack_require__(15);\n        var LineSegments = THREE.LineSegments;\n        var Utils_1 = __webpack_require__(14);\n        var GridWidget = function(_super) {\n            __extends(GridWidget, _super);\n            function GridWidget(chartState) {\n                _super.call(this, chartState);\n                this.isDestroyed = false;\n                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n                this.initGrid();\n                this.updateGrid();\n            }\n            GridWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n                    return _this.updateGrid();\n                }, 1e3);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return updateGridThrottled();\n                }), this.chartState.screen.onZoomFrame(function(options) {\n                    updateGridThrottled();\n                    _this.onZoomFrame(options);\n                }), this.chartState.onDestroy(function() {\n                    _this.isDestroyed = true;\n                    _this.unbindEvents();\n                }), this.chartState.onResize(function() {\n                    _this.updateGrid();\n                }));\n            };\n            GridWidget.prototype.initGrid = function() {\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: .1,\n                    transparent: true\n                });\n                var xLinesCount = this.gridSizeH;\n                var yLinesCount = this.gridSizeV;\n                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                this.lineSegments = new LineSegments(geometry, material);\n                this.lineSegments.position.setZ(-1);\n                this.lineSegments.frustumCulled = false;\n            };\n            GridWidget.prototype.updateGrid = function() {\n                if (this.isDestroyed) return;\n                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n                var startXVal = axisXGrid.start + gridScrollXVal;\n                var startYVal = axisYGrid.start + gridScrollYVal;\n                var geometry = this.lineSegments.geometry;\n                var vertices = geometry.vertices;\n                var lineInd = 0;\n                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n                    var value = startXVal + i * axisXGrid.step;\n                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n                    var value = startYVal + i * axisYGrid.step;\n                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                geometry.verticesNeedUpdate = true;\n                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n            };\n            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n            };\n            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n            };\n            GridWidget.prototype.onZoomFrame = function(options) {\n                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n            };\n            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n                var axisRange = axisOptions.range;\n                var from = axisRange.from;\n                var to = axisRange.to;\n                var axisLength = to - from;\n                var gridStep = 0;\n                var gridStepInPixels = 0;\n                var minGridStepInPixels = axisOptions.gridMinSize;\n                var axisLengthStr = String(axisLength);\n                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n                var gridStepFound = false;\n                var digitPos = 0;\n                while (!gridStepFound) {\n                    var power = intPartLength - digitPos - 1;\n                    var multiplier = Math.pow(10, power) || 1;\n                    var dividers = [ 1, 2, 5 ];\n                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n                        var nextGridStep = multiplier / dividers[dividerInd];\n                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n                        if (nextGridStepInPixels >= minGridStepInPixels) {\n                            gridStep = nextGridStep;\n                            gridStepInPixels = nextGridStepInPixels;\n                        } else {\n                            gridStepFound = true;\n                            if (gridStep === 0) {\n                                gridStep = nextGridStep;\n                                gridStepInPixels = nextGridStepInPixels;\n                            }\n                            break;\n                        }\n                    }\n                    if (!gridStepFound) digitPos++;\n                }\n                var gridStart = Math.floor(from / gridStep) * gridStep;\n                var gridEnd = Math.floor(to / gridStep) * gridStep;\n                return {\n                    start: gridStart,\n                    end: gridEnd,\n                    step: gridStep,\n                    stepInPx: gridStepInPixels,\n                    length: gridEnd - gridStart,\n                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n                };\n            };\n            GridWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            GridWidget.widgetName = \"Grid\";\n            return GridWidget;\n        }(Widget_1.ChartWidget);\n        exports.GridWidget = GridWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(17);\n        var TrendsLoadingWidget = function(_super) {\n            __extends(TrendsLoadingWidget, _super);\n            function TrendsLoadingWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLoading;\n            };\n            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n            return TrendsLoadingWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n        var TrendLoading = function(_super) {\n            __extends(TrendLoading, _super);\n            function TrendLoading(state, trendName) {\n                _super.call(this, state, trendName);\n                this.isActive = false;\n                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendLoading.createTexture(),\n                    transparent: true\n                }));\n                this.deactivate();\n            }\n            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled && chartState.data.animations.enabled;\n            };\n            TrendLoading.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendLoading.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.onPrependRequest(function() {\n                    return _this.activate();\n                }));\n            };\n            TrendLoading.prototype.prependData = function() {\n                this.deactivate();\n            };\n            TrendLoading.prototype.activate = function() {\n                var mesh = this.mesh;\n                mesh.material.opacity = 1;\n                mesh.rotation.z = 0;\n                var animation = TweenLite.to(this.mesh.rotation, .5, {\n                    z: Math.PI * 2\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animation.restart();\n                });\n                this.animation = animation;\n                this.isActive = true;\n                this.updatePosition();\n            };\n            TrendLoading.prototype.deactivate = function() {\n                this.animation && this.animation.kill();\n                this.mesh.material.opacity = 0;\n                this.isActive = false;\n            };\n            TrendLoading.createTexture = function() {\n                var h = 64, w = 64;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                    ctx.lineWidth = 5;\n                    var center = h / 2;\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n                    ctx.stroke();\n                });\n            };\n            TrendLoading.prototype.onZoomFrame = function() {\n                this.updatePosition();\n            };\n            TrendLoading.prototype.updatePosition = function() {\n                if (!this.isActive) return;\n                var trend = this.trend;\n                var segment = trend.segments.getStartSegment();\n                var x, y;\n                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    x = segment.currentAnimationState.startXVal;\n                    y = segment.currentAnimationState.startYVal;\n                } else {\n                    x = segment.currentAnimationState.xVal - segment.maxLength;\n                    y = segment.currentAnimationState.yVal;\n                }\n                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n            };\n            return TrendLoading;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLoading = TrendLoading;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(15);\n        var Object3D = THREE.Object3D;\n        var TrendsWidget = function(_super) {\n            __extends(TrendsWidget, _super);\n            function TrendsWidget(state) {\n                _super.call(this, state);\n                this.widgets = {};\n                this.object3D = new Object3D();\n                this.onTrendsChange();\n            }\n            TrendsWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n                state.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, changedOptions, newData);\n                });\n            };\n            TrendsWidget.prototype.onTrendsChange = function() {\n                var trendsOptions = this.chartState.data.trends;\n                var TrendWidgetClass = this.getTrendWidgetClass();\n                for (var trendName in trendsOptions) {\n                    var trendOptions = trendsOptions[trendName];\n                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n                        this.createTrendWidget(trendName);\n                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n                        this.destroyTrendWidget(trendName);\n                    }\n                }\n            };\n            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n                var widget = this.widgets[trendName];\n                if (!widget) return;\n                widget.onTrendChange(changedOptions);\n                if (newData) {\n                    var data = this.chartState.getTrend(trendName).getData();\n                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n                }\n            };\n            TrendsWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n                var WidgetConstructor = this.getTrendWidgetClass();\n                var widget = new WidgetConstructor(this.chartState, trendName);\n                this.widgets[trendName] = widget;\n                var widgetObject = widget.getObject3D();\n                widgetObject.name = trendName;\n                this.object3D.add(widget.getObject3D());\n            };\n            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n                this.widgets[trendName].onDestroy();\n                delete this.widgets[trendName];\n                var widgetObject = this.object3D.getObjectByName(trendName);\n                this.object3D.remove(widgetObject);\n            };\n            return TrendsWidget;\n        }(Widget_1.ChartWidget);\n        exports.TrendsWidget = TrendsWidget;\n        var TrendWidget = function() {\n            function TrendWidget(chartState, trendName) {\n                this.chartState = chartState;\n                this.trendName = trendName;\n                this.unsubscribers = [];\n                this.trend = chartState.trendsManager.getTrend(trendName);\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled;\n            };\n            TrendWidget.prototype.appendData = function(newData) {};\n            TrendWidget.prototype.prependData = function(newData) {};\n            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n            TrendWidget.prototype.onDestroy = function() {\n                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n                    var unsubscriber = _a[_i];\n                    unsubscriber();\n                }\n            };\n            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n            TrendWidget.prototype.onZoomFrame = function(options) {};\n            TrendWidget.prototype.onTransformationFrame = function(options) {};\n            TrendWidget.prototype.onZoom = function() {};\n            TrendWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.trend.segments.onAnimationFrame(function(trendPoints) {\n                    return _this.onSegmentsAnimate(trendPoints);\n                }));\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n                    return _this.onTransformationFrame(options);\n                }));\n                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n                    return _this.onZoomFrame(options);\n                }));\n                this.bindEvent(this.chartState.onZoom(function() {\n                    return _this.onZoom();\n                }));\n            };\n            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n                this.unsubscribers.push(unsubscriber);\n            };\n            return TrendWidget;\n        }();\n        exports.TrendWidget = TrendWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(15);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var Utils_1 = __webpack_require__(14);\n        var Line = THREE.Line;\n        var Mesh = THREE.Mesh;\n        var interfaces_1 = __webpack_require__(21);\n        var AxisMarksWidget = function(_super) {\n            __extends(AxisMarksWidget, _super);\n            function AxisMarksWidget(chartState) {\n                _super.call(this, chartState);\n                this.axisMarksWidgets = [];\n                this.object3D = new Object3D();\n                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n                var items = xAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n                items = yAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n            }\n            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n                this.axisMarksWidgets.push(axisMarkWidget);\n                this.object3D.add(axisMarkWidget.getObject3D());\n            };\n            AxisMarksWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n                    return _this.updateMarksPositions();\n                }), this.chartState.onResize(function() {\n                    return _this.updateMarksPositions();\n                }));\n            };\n            AxisMarksWidget.prototype.updateMarksPositions = function() {\n                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n                    var widget = _a[_i];\n                    widget.updatePosition();\n                }\n            };\n            AxisMarksWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarksWidget.widgetName = \"AxisMarks\";\n            return AxisMarksWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisMarksWidget = AxisMarksWidget;\n        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n            var axisMark = axisMarkWidget.axisMark;\n            ctx.fillStyle = axisMark.options.lineColor;\n            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n            var xCoord = 15;\n            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n                ctx.textAlign = \"end\";\n                xCoord = axisMarkWidget.indicatorWidth;\n            }\n            ctx.fillText(axisMark.options.title, xCoord, 20);\n            if (!axisMark.options.showValue) return;\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n        };\n        var INDICATOR_POS_Z = .1;\n        var AxisMarkWidget = function() {\n            function AxisMarkWidget(chartState, axisMark) {\n                this.indicatorWidth = 128;\n                this.indicatorHeight = 64;\n                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n                this.chartState = chartState;\n                this.axisMark = axisMark;\n                this.axisType = axisMark.axisType;\n                this.frameValue = axisMark.options.value;\n                this.object3D = new Object3D();\n                this.object3D.position.setZ(-.1);\n                this.line = this.createLine();\n                this.object3D.add(this.line);\n                this.indicator = this.createIndicator();\n                this.object3D.add(this.indicator);\n                this.renderIndicator();\n                this.updatePosition();\n                this.bindEvents();\n            }\n            AxisMarkWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarkWidget.prototype.createLine = function() {\n                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n                var lineGeometry = new Geometry();\n                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n                return new Line(lineGeometry, new LineBasicMaterial({\n                    color: Utils_1.Utils.getHexColor(lineColor),\n                    linewidth: lineWidth\n                }));\n            };\n            AxisMarkWidget.prototype.createIndicator = function() {\n                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n            };\n            AxisMarkWidget.prototype.renderIndicator = function() {\n                var texture = this.indicator.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n                texture.needsUpdate = true;\n            };\n            AxisMarkWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.axisMark.onDisplayedValueChange(function() {\n                    return _this.renderIndicator();\n                });\n                this.axisMark.onValueChange(function() {\n                    return _this.onValueChangeHandler();\n                });\n            };\n            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n                var _this = this;\n                if (this.moveAnimation) this.moveAnimation.kill();\n                var animations = this.chartState.data.animations;\n                var targetValue = this.axisMark.options.value;\n                var cb = function() {\n                    _this.updatePosition();\n                };\n                if (animations.enabled) {\n                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n                        frameValue: targetValue,\n                        ease: animations.trendChangeEase\n                    });\n                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.frameValue = targetValue;\n                    cb();\n                }\n            };\n            AxisMarkWidget.prototype.updatePosition = function() {\n                var chartState = this.chartState;\n                var screen = chartState.screen;\n                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n                var lineGeometry = this.line.geometry;\n                var hasStickMode = this.axisMark.options.stickToEdges;\n                var _a = this.chartState.data, width = _a.width, height = _a.height;\n                if (isXAxis) {\n                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n                    this.object3D.position.y = screen.getBottom();\n                    lineGeometry.vertices[1].setY(height);\n                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n                } else {\n                    var val = this.frameValue;\n                    var bottomVal = screen.getBottomVal();\n                    var topVal = screen.getTopVal();\n                    var needToStickOnTop = hasStickMode && val > topVal;\n                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n                    var centerYVal = screen.getCenterYVal();\n                    this.object3D.position.x = screen.getLeft();\n                    if (needToStickOnTop) {\n                        this.object3D.position.y = screen.getTop();\n                    } else if (needToStickOnBottom) {\n                        this.object3D.position.y = screen.getBottom();\n                    } else {\n                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n                    }\n                    lineGeometry.vertices[1].setX(width);\n                    var indicatorPosY = val > centerYVal ? -35 : 10;\n                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n                }\n                lineGeometry.verticesNeedUpdate = true;\n            };\n            AxisMarkWidget.typeName = \"simple\";\n            return AxisMarkWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(15);\n        var LineSegments = THREE.LineSegments;\n        var Vector3 = THREE.Vector3;\n        var BorderWidget = function(_super) {\n            __extends(BorderWidget, _super);\n            function BorderWidget(chartState) {\n                _super.call(this, chartState);\n                var _a = chartState.data, width = _a.width, height = _a.height;\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: 0,\n                    transparent: true\n                });\n                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n                this.lineSegments = new LineSegments(geometry, material);\n            }\n            BorderWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            BorderWidget.widgetName = \"Border\";\n            return BorderWidget;\n        }(Widget_1.ChartWidget);\n        exports.BorderWidget = BorderWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Color = THREE.Color;\n        var CANVAS_WIDTH = 128;\n        var CANVAS_HEIGHT = 64;\n        var OFFSET_X = 15;\n        var TrendsIndicatorWidget = function(_super) {\n            __extends(TrendsIndicatorWidget, _super);\n            function TrendsIndicatorWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n                return TrendIndicator;\n            };\n            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n            return TrendsIndicatorWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n        var TrendIndicator = function(_super) {\n            __extends(TrendIndicator, _super);\n            function TrendIndicator(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                this.onTrendChange();\n            }\n            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasIndicator;\n            };\n            TrendIndicator.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendIndicator.prototype.onTrendChange = function() {\n                var trendData = this.trend.getData();\n                var lastItem = trendData[trendData.length - 1];\n                var texture = this.mesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n                texture.needsUpdate = true;\n            };\n            TrendIndicator.prototype.initObject = function() {\n                var color = new Color(this.trend.getOptions().lineColor);\n                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"15px Arial\";\n                    ctx.fillStyle = color.getStyle();\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n            };\n            TrendIndicator.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n                this.segment = segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x + OFFSET_X;\n                var y = endPointVector.y;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n                if (indicatorIsOutOfScreen) {\n                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n                    y -= 25;\n                }\n                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n            };\n            return TrendIndicator;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendIndicator = TrendIndicator;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var LineSegments = THREE.LineSegments;\n        var Trend_1 = __webpack_require__(17);\n        var Utils_1 = __webpack_require__(14);\n        var MAX_DISPLAYED_SEGMENTS = 2e3;\n        var TrendsLineWidget = function(_super) {\n            __extends(TrendsLineWidget, _super);\n            function TrendsLineWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLine;\n            };\n            TrendsLineWidget.widgetName = \"TrendsLine\";\n            return TrendsLineWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLineWidget = TrendsLineWidget;\n        var TrendLine = function(_super) {\n            __extends(TrendLine, _super);\n            function TrendLine(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeSegmentsInds = [];\n                this.displayedSegments = {};\n                var options = this.trend.getOptions();\n                this.material = new LineBasicMaterial({\n                    color: options.lineColor,\n                    linewidth: options.lineWidth\n                });\n                this.initLine();\n            }\n            TrendLine.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendLine.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            TrendLine.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segments.onRebuild(function() {\n                    _this.destroySegments();\n                    _this.setupSegments();\n                }));\n                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n                    _this.setupSegments();\n                }));\n            };\n            TrendLine.prototype.initLine = function() {\n                var geometry = new Geometry();\n                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.scaleXFactor = scaleXFactor;\n                this.scaleYFactor = scaleYFactor;\n                this.lineSegments = new LineSegments(geometry, this.material);\n                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.lineSegments.frustumCulled = false;\n                for (var i = 0; i < MAX_DISPLAYED_SEGMENTS; i++) {\n                    geometry.vertices.push(new Vector3(), new Vector3());\n                    this.freeSegmentsInds.push(i);\n                }\n                this.vertices = geometry.vertices;\n                this.setupSegments();\n            };\n            TrendLine.prototype.setupSegments = function() {\n                var geometry = this.lineSegments.geometry;\n                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.displayedSegments) {\n                    var lineSegment = this.displayedSegments[segmentId];\n                    var segment_1 = this.trend.segments.segments[lineSegment.segmentId];\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupSegment(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n                var lineSegment = this.displayedSegments[segmentId];\n                if (!lineSegment) {\n                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n                    var ind = this.freeSegmentsInds.pop();\n                    lineSegment = this.displayedSegments[segmentId] = {\n                        segmentId: segmentId,\n                        ind: ind\n                    };\n                }\n                var segmentInd = lineSegment.ind;\n                var lineStartVertex = this.vertices[segmentInd * 2];\n                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n            };\n            TrendLine.prototype.destroySegments = function() {\n                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n            };\n            TrendLine.prototype.destroySegment = function(segmentId) {\n                var lineSegment = this.displayedSegments[segmentId];\n                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n                lineStartVertex.set(0, 0, 0);\n                lineEndVertex.set(0, 0, 0);\n                delete this.displayedSegments[segmentId];\n                this.freeSegmentsInds.push(lineSegment.ind);\n            };\n            TrendLine.prototype.onZoomFrame = function(options) {\n                var currentScale = this.lineSegments.scale;\n                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n            };\n            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n                var geometry = this.lineSegments.geometry;\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.displayedSegments[segmentId]) continue;\n                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendLine;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLine = TrendLine;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var Vector3 = THREE.Vector3;\n        var Mesh = THREE.Mesh;\n        var Line = THREE.Line;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var PlaneGeometry = THREE.PlaneGeometry;\n        var Trend_1 = __webpack_require__(17);\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Utils_1 = __webpack_require__(14);\n        var RISE_COLOR = 2927680;\n        var FALL_COLOR = 15619379;\n        var MARGIN_PERCENT = .3;\n        var MAX_CANDLES = 100;\n        var TrendsCandlesWidget = function(_super) {\n            __extends(TrendsCandlesWidget, _super);\n            function TrendsCandlesWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n                return TrendCandlesWidget;\n            };\n            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n            return TrendsCandlesWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n        var TrendCandlesWidget = function(_super) {\n            __extends(TrendCandlesWidget, _super);\n            function TrendCandlesWidget(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeCandlesInds = [];\n                this.candlesPool = [];\n                this.candles = {};\n                this.initObject();\n            }\n            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n            };\n            TrendCandlesWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendCandlesWidget.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segments.onRebuild(function() {\n                    _this.destroyCandles();\n                    _this.setupCandles();\n                }));\n                this.bindEvent(this.trend.segments.onDisplayedRangeChanged(function() {\n                    _this.setupCandles();\n                }));\n            };\n            TrendCandlesWidget.prototype.initObject = function() {\n                var stateData = this.chartState.data;\n                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.scaleXFactor = scaleXFactor;\n                this.scaleYFactor = scaleYFactor;\n                this.object3D = new Object3D();\n                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.object3D.frustumCulled = false;\n                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n                this.setupCandles();\n            };\n            TrendCandlesWidget.prototype.setupCandles = function() {\n                var _a = this.trend.segments, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.candles) {\n                    var segment_1 = this.candles[segmentId].segment;\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupCandle(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n            };\n            TrendCandlesWidget.prototype.destroyCandles = function() {\n                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n            };\n            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n                var candle = this.candles[segmentId];\n                this.object3D.remove(candle.getObject3D());\n                delete this.candles[segmentId];\n            };\n            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n                var currentScale = this.object3D.scale;\n                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n            };\n            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.candles[segmentId]) continue;\n                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n                    this.setupCandle(segmentId, segmentState);\n                }\n            };\n            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n                var candleInd = candleId % MAX_CANDLES;\n                var candle = this.candlesPool[candleInd];\n                if (!candle) {\n                    candle = this.candlesPool[candleInd] = new CandleWidget();\n                }\n                if (!this.candles[candleId]) {\n                    this.candles[candleId] = candle;\n                    this.object3D.add(candle.getObject3D());\n                }\n                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n                candle.setSegment(segmentState);\n            };\n            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendCandlesWidget;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendCandlesWidget = TrendCandlesWidget;\n        var CandleWidget = function() {\n            function CandleWidget() {\n                this.initObject();\n            }\n            CandleWidget.prototype.getObject3D = function() {\n                return this.rect;\n            };\n            CandleWidget.prototype.setSegment = function(segment) {\n                this.segment = segment;\n                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n                var geometry = this.rect.geometry;\n                var material = this.rect.material;\n                var width = segment.endXVal - segment.startXVal;\n                width -= width * MARGIN_PERCENT;\n                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n                leftTop.set(-width / 2, height / 2, 0);\n                rightTop.set(width / 2, height / 2, 0);\n                leftBottom.set(-width / 2, -height / 2, 0);\n                rightBottom.set(width / 2, -height / 2, 0);\n                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n                    leftBottom.setY(leftBottom.y + 1);\n                    rightBottom.setY(rightBottom.y + 1);\n                }\n                material.color.set(color);\n                geometry.verticesNeedUpdate = true;\n                var vLineGeometry = this.vLine.geometry;\n                var vLineMaterial = this.vLine.material;\n                var lineTop = segment.maxYVal - segment.yVal;\n                var lineBottom = segment.minYVal - segment.yVal;\n                vLineGeometry.vertices[0].set(0, lineTop, 0);\n                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n                vLineMaterial.color.set(color);\n                vLineGeometry.verticesNeedUpdate = true;\n                var hLineGeometry = this.hLine.geometry;\n                var hLineMaterial = this.hLine.material;\n                var lineLeft = -width / 2;\n                var lineRight = width / 2;\n                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n                hLineMaterial.color.set(color);\n                hLineGeometry.verticesNeedUpdate = true;\n            };\n            CandleWidget.prototype.initObject = function() {\n                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n                var vLineGeometry = new Geometry();\n                var hLineGeometry = new Geometry();\n                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.rect.add(this.vLine);\n                this.rect.add(this.hLine);\n            };\n            return CandleWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(17);\n        var TrendsBeaconWidget = function(_super) {\n            __extends(TrendsBeaconWidget, _super);\n            function TrendsBeaconWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n                return TrendBeacon;\n            };\n            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n            return TrendsBeaconWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n        var TrendBeacon = function(_super) {\n            __extends(TrendBeacon, _super);\n            function TrendBeacon(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                if (state.data.animations.enabled) {\n                    this.animate();\n                }\n                this.updatePosition();\n            }\n            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendBeacon.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendBeacon.prototype.onTrendChange = function() {\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return _this.updatePosition();\n                }));\n                this.bindEvent(this.chartState.onChange(function(changedProps) {\n                    return _this.onStateChange(changedProps);\n                }));\n                this.bindEvent(this.chartState.onDestroy(function() {\n                    return _this.stopAnimation();\n                }));\n            };\n            TrendBeacon.prototype.initObject = function() {\n                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture(),\n                    transparent: true\n                }));\n                light.scale.set(.2, .2, 1);\n                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture()\n                })));\n                this.segment = this.trend.segments.getEndSegment();\n            };\n            TrendBeacon.prototype.animate = function() {\n                var _this = this;\n                this.animated = true;\n                var object = this.mesh;\n                var animationObject = {\n                    scale: object.scale.x,\n                    opacity: object.material.opacity\n                };\n                this.mesh.scale.set(.1, .1, 1);\n                setTimeout(function() {\n                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n                        scale: 1,\n                        opacity: 0\n                    });\n                    animation.eventCallback(\"onUpdate\", function() {\n                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n                        object.material.opacity = animationObject.opacity;\n                    }).eventCallback(\"onComplete\", function() {\n                        _this.animation && animation.restart();\n                    });\n                }, 500);\n            };\n            TrendBeacon.prototype.stopAnimation = function() {\n                this.animated = false;\n                this.animation && this.animation.kill();\n                this.animation = null;\n            };\n            TrendBeacon.createTexture = function() {\n                var h = 32, w = 32;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.beginPath();\n                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = \"white\";\n                    ctx.fill();\n                });\n            };\n            TrendBeacon.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n                this.segment = trendsSegments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onStateChange = function(changedProps) {\n                if (!changedProps.animations) return;\n                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n                if (changedProps.animations.enabled) {\n                    this.animate();\n                } else {\n                    this.stopAnimation();\n                }\n            };\n            TrendBeacon.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var xVal, yVal;\n                var currentAnimationState = this.segment.currentAnimationState;\n                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    xVal = currentAnimationState.endXVal;\n                    yVal = currentAnimationState.endYVal;\n                } else {\n                    xVal = currentAnimationState.xVal;\n                    yVal = currentAnimationState.endYVal;\n                }\n                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n                this.mesh.position.set(x, endPointVector.y, .1);\n            };\n            return TrendBeacon;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendBeacon = TrendBeacon;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(3));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var EventEmmiter_1 = __webpack_require__(13);\n        exports.DEFAULT_CONFIG = {\n            installPluginWidgets: true\n        };\n        var ChartPlugin = function() {\n            function ChartPlugin(options, config) {\n                if (config === void 0) {\n                    config = {};\n                }\n                this.unsubscribers = [];\n                this.initialState = options;\n                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n                this.name = this.constructor.NAME;\n                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n            }\n            ChartPlugin.prototype.setupChartState = function(chartState) {\n                var _this = this;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n                    return _this.onInitialStateAppliedHandler(initialState);\n                }), this.chartState.onReady(function() {\n                    return _this.onChartReadyHandler();\n                }), this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n                }));\n            };\n            ChartPlugin.prototype.getOptions = function() {\n                return this.chartState.data.pluginsState[this.name];\n            };\n            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n            ChartPlugin.prototype.onChartReadyHandler = function() {};\n            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n            ChartPlugin.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n            };\n            ChartPlugin.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartPlugin.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartPlugin.NAME = \"\";\n            ChartPlugin.pluginWidgets = [];\n            return ChartPlugin;\n        }();\n        exports.ChartPlugin = ChartPlugin;\n    } ]);\n});\n\n\n//# sourceMappingURL=ThreeChart.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-chart/build/ThreeChart.js\n ** module id = 3\n ** module chunks = 0\n **/","import {ChartState, Utils, TrendsWidget, TrendWidget } from 'three-chart';\nimport Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport LineSegments = THREE.LineSegments;\nimport LineDashedMaterial = THREE.LineDashedMaterial;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport { TrendMark, TREND_MARK_SIDE, TrendsMarksPlugin } from \"./TrendsMarksPlugin\";\n\n\nconst MAX_MARKS_IN_ROW = 3;\n\n/**\n * widget for drawing trends marks for all trends\n */\nexport class TrendsMarksWidget extends TrendsWidget<TrendMarksWidget> {\n\tstatic widgetName = \"TrendsMarks\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendMarksWidget;\n\t}\n}\n\n/**\n * widget for drawing trend marks for one trend\n */\nexport class TrendMarksWidget extends TrendWidget {\n\n\tprivate trendsMarksPlugin: TrendsMarksPlugin;\n\tprivate object3D: Object3D;\n\tprivate marksWidgets: {[name: string]: TrendMarkWidget} = {};\n\n\tconstructor (chartState: ChartState, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.object3D = new Object3D();\n\t\tthis.onMarksChange();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\t\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.getTrendsMarksPlugin().onChange(() => this.onMarksChange());\n\t}\n\n\tprivate getTrendsMarksPlugin(): TrendsMarksPlugin {\n\t\treturn this.chartState.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\n\t}\n\n\tprivate onMarksChange() {\n\t\tlet marksItems = this.getTrendsMarksPlugin().getItems();\n\t\tlet widgets = this.marksWidgets;\n\t\tlet actualMarksNames: string[] = [];\n\t\tfor (let markName in marksItems) {\n\t\t\tactualMarksNames.push(markName);\n\t\t\tif (!widgets[markName]) this.createMarkWidget(marksItems[markName]);\n\t\t}\n\t\tfor (let markName in this.marksWidgets) {\n\t\t\tif (actualMarksNames.indexOf(markName) !== -1) continue;\n\t\t\tthis.destroyMarkWidget(markName);\n\t\t}\n\n\t}\n\t\n\tprivate createMarkWidget(mark: TrendMark) {\n\t\tif (!mark.segment) return;\n\t\tlet markWidget = new TrendMarkWidget(this.chartState, mark);\n\t\tthis.marksWidgets[mark.options.name] = markWidget;\n\t\tthis.object3D.add(markWidget.getObject3D());\n\t}\n\n\tprivate destroyMarkWidget(markName: string) {\n\t\tthis.object3D.remove(this.marksWidgets[markName].getObject3D());\n\t\tdelete this.marksWidgets[markName];\n\t}\n\n\tprotected onZoomFrame() {\n\t\tvar widgets = this.marksWidgets;\n\t\tfor (let markName in widgets) {\n\t\t\twidgets[markName].onZoomFrameHandler();\n\t\t}\n\t}\n\n\tprotected onSegmentsAnimate() {\n\t\tvar widgets = this.marksWidgets;\n\t\tfor (let markName in widgets) {\n\t\t\twidgets[markName].onSegmentsAnimate();\n\t\t}\n\t}\n}\n\n/**\n * widget for drawing one trend mark\n */\nclass TrendMarkWidget {\n\tprivate chartState: ChartState;\n\tprivate mark: TrendMark;\n\tprivate object3D: Object3D;\n\tprivate line: Line;\n\tprivate markMesh: Mesh;\n\tprivate markHeight = 74;\n\tprivate markWidth = 150;\n\tprivate position = {lineHeight: 30, x: 0, y: 0};\n\n\tconstructor(chartState: ChartState, trendMark: TrendMark) {\n\t\tthis.chartState = chartState;\n\t\tthis.mark = trendMark;\n\t\tthis.initObject();\n\t\tthis.show();\n\t}\n\t\n\tprotected initObject() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.markMesh = this.createMarkMesh();\n\t\tthis.line = this.createMarkLine();\n\t\tthis.object3D.add(this.markMesh);\n\t\tthis.object3D.add(this.line);\n\t}\n\n\tprotected createMarkMesh(): Mesh {\n\t\tvar {markHeight, markWidth} = this;\n\t\tvar mark = this.mark.options;\n\t\tvar isTopSide = mark.orientation == TREND_MARK_SIDE.TOP;\n\n\t\tvar texture = Utils.createPixelPerfectTexture(markWidth, markHeight, (ctx) => {\n\n\t\t\tvar circleOffset = isTopSide ? 30 : 0;\n\t\t\tvar circleR = 22;\n\t\t\tvar circleX = markWidth / 2;\n\t\t\tvar circleY = circleOffset + circleR;\n\t\t\tvar textOffset = isTopSide ? 10 : circleR * 2 + 15;\n\n\t\t\t// title and description\n\t\t\tctx.beginPath();\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.font = \"11px Arial\";\n\t\t\tctx.fillStyle = 'rgba(255,255,255, 0.6)';\n\t\t\tctx.fillText(mark.title, circleX, textOffset);\n\t\t\tctx.fillStyle = mark.descriptionColor;\n\t\t\tctx.fillText(mark.description, circleX, textOffset + 12);\n\n\t\t\t// icon circle\n\t\t\tctx.beginPath();\n\t\t\tctx.fillStyle = mark.iconColor;\n\t\t\tctx.arc(circleX, circleY, circleR, 0, 2 * Math.PI);\n\t\t\tctx.fill();\n\n\t\t\t// icon text\n\t\t\tctx.font = \"19px Arial\";\n\t\t\tctx.fillStyle = 'rgb(255, 255, 255)';\n\t\t\tctx.fillText(mark.icon, circleX, circleY + 7);\n\n\t\t});\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tvar mesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(markWidth, markHeight),\n\t\t\tmaterial\n\t\t);\n\n\t\tlet offset = this.mark.options.orientation == TREND_MARK_SIDE.TOP ? this.mark.offset : -this.mark.offset;\n\t\t// mesh.position.setY(markHeight / 2 + offset);\n\n\t\treturn mesh;\n\t}\n\n\tprotected createMarkLine() {\n\t\tlet lineGeometry = new Geometry();\n\t\tlineGeometry.vertices.push( new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, this.mark.offset, 0) );\n\t\tlineGeometry.computeLineDistances();\n\t\tlet lineMaterial = new THREE.LineDashedMaterial( {dashSize: 1, gapSize: 4, transparent: true, opacity: 0.6 } );\n\t\tlet line = new THREE.Line( lineGeometry, lineMaterial );\n\t\tline.position.setZ(-0.1);\n\t\treturn line\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tonSegmentsAnimate() {\n\t\tthis.updatePosition();\n\t}\n\n\tonZoomFrameHandler() {\n\t\tthis.updatePosition();\n\t}\n\n\tprivate updatePosition() {\n\t\tif (!this.mark.segment) return;\n\t\tlet mark = this.mark;\n\t\tlet meshMaterial = this.markMesh.material as MeshBasicMaterial;\n\t\tlet lineMaterial = this.line.material as LineBasicMaterial;\n\t\tif (mark.row >= MAX_MARKS_IN_ROW - 1) {\n\t\t\tmeshMaterial.opacity = 0;\n\t\t\tlineMaterial.opacity = 0;\n\t\t} else {\n\t\t\tmeshMaterial.opacity = 1;\n\t\t\tlineMaterial.opacity = 1;\n\t\t}\n\n\t\tlet screen = this.chartState.screen;\n\t\tlet posX = screen.getPointOnXAxis(mark.xVal);\n\t\tlet posY = screen.getPointOnYAxis(mark.yVal);\n\t\tlet lineGeometry = this.line.geometry as Geometry;\n\n\t\tif (mark.options.orientation == TREND_MARK_SIDE.TOP) {\n\t\t\tthis.markMesh.position.setY(this.markHeight / 2 + mark.offset);\n\t\t\tlineGeometry.vertices[1].setY(mark.offset);\n\t\t} else {\n\t\t\tthis.markMesh.position.setY(-mark.offset - this.markHeight / 2);\n\t\t\tlineGeometry.vertices[1].setY(-mark.offset);\n\t\t}\n\t\tlineGeometry.verticesNeedUpdate = true;\n\t\tlineGeometry.lineDistancesNeedUpdate = true;\n\t\tlineGeometry.computeLineDistances();\n\t\tthis.object3D.position.set(posX, posY, 0);\n\t}\n\n\tprivate show() {\n\t\tif (!this.mark.segment) return;\n\t\tthis.updatePosition();\n\t\tvar animations = this.chartState.data.animations;\n\t\tvar time = animations.enabled ? 1 : 0;\n\t\tthis.object3D.scale.set(0.01, 0.01, 1);\n\t\tTweenLite.to(this.object3D.scale, time, {x: 1, y: 1, ease: Elastic.easeOut});\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./plugins/src/TrendsMarksPlugin/TrendsMarksWidget.ts\n **/"],"sourceRoot":""}