{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.js","webpack:///webpack/bootstrap e868dc97b9a9dc74cd8a?c7a4","webpack:///./plugins/src/TrendsMarksPlugin/index.ts","webpack:///./~/three-charts/build/index.js?71fd","webpack:///./~/three-charts/build/ThreeChart.js?7175","webpack:///./plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.ts","webpack:///./plugins/src/TrendsMarksPlugin/TrendsMarksWidget.ts"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","__export","hasOwnProperty","PerspectiveCamera","THREE","State_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsGradientWidget_1","TrendsLoadingWidget_1","AxisMarksWidget_1","BorderWidget_1","TrendsIndicatorWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","TrendsBeaconWidget_1","deps_1","Chart","state","$container","plugins","_this","widgets","REVISION","Utils","error","style","getComputedStyle","width","parseInt","height","ChartState","installedWidgets","zoomThrottled","throttle","zoomValue","origin","zoom","init","installWidget","Widget","widgetName","prototype","_a","data","w","h","showStats","autoRender","scene","Scene","isStopped","enabled","renderer","renderers","antialias","alpha","setPixelRatio","devicePixelRatio","setClearColor","backgroundColor","backgroundOpacity","setSize","appendChild","domElement","$el","display","stats","Stats","setupCamera","widgetsClasses","widgetOptions","WidgetConstructor","widget","add","getObject3D","push","bindEvents","renderLoop","isDestroyed","begin","render","fpsLimit","fps","delay_1","setTimeout","requestAnimationFrame","end","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","getTrend","trendName","setState","controls","addEventListener","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","screen","onTransformationFrame","options","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","forEach","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","position","set","x","y","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","autoScroll","oldTrendsMaxX","prevState","computedData","trends","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","xAxis","range","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","Math","min","max","autoScrollIsEnabled","then","createPreviewChart","userOptions","previewChartOptions","animations","Grid","Axis","TrendsGradient","deepMerge","window","CanvasRenderer","WebGLRenderer","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsBeaconWidget","TrendsIndicatorWidget","TrendsGradientWidget","TrendsLoadingWidget","AxisMarksWidget","BorderWidget","TweenLite","TweenMax","isPlainObject","EE2","es6_promise_1","Promise","a","dom","k","d","children","length","l","document","createElement","cssText","g","performance","Date","now","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","round","u","n","q","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","v","drawImage","SpriteCanvasMaterial","parameters","Material","type","color","Color","program","setValues","Object","create","constructor","material","copy","console","log","_renderData","_elements","_lights","_projector","Projector","_canvas","canvas","undefined","_canvasWidth","_canvasHeight","_canvasWidthHalf","floor","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_context","_clearColor","_clearAlpha","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_camera","_v1","_v2","_v3","_v4","_v5","RenderableVertex","_v6","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_clipBox","Box2","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_vector3","Vector3","_centroid","_normal","_normalViewMatrix","Matrix3","setLineDash","autoClear","sortObjects","sortElements","info","vertices","faces","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","value","updateStyle","setViewport","setScissor","setScissorTest","setClearColorHex","hex","warn","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","intersect","expandByScalar","clearRect","setBlending","NormalBlending","setOpacity","setFillStyle","makeEmpty","clearColor","clearDepth","clearStencil","Camera","setTransform","translate","projectScene","elements","lights","getNormalMatrix","matrixWorldInverse","calculateLights","el","element","opacity","RenderableSprite","renderSprite","RenderableLine","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","RenderableFace","v3","overdraw","expand","renderFace3","union","setRGB","ll","light","lightColor","AmbientLight","DirectionalLight","PointLight","calculateLight","normal","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","multiplyScalar","subVectors","distance","distanceTo","blending","scaleX","scale","scaleY","dist","sqrt","SpriteMaterial","texture","map","pattern","version","textureToPattern","bitmap","image","ox","offset","oy","sx","repeat","sy","cx","cy","save","rotation","rotate","restore","getStyle","setStrokeStyle","beginPath","moveTo","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","LineDashedMaterial","dashSize","gapSize","uv1","uv2","uv3","drawTriangle","MeshLambertMaterial","MeshPhongMaterial","emissive","FaceColors","multiply","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","MeshBasicMaterial","mapping","UVMapping","uvs","patternPath","envMap","SphericalReflectionMapping","vertexNormalsModel","applyMatrix3","MeshNormalMaterial","addScalar","x0","y0","x1","y1","x2","y2","closePath","fill","CompressedTexture","DataTexture","complete","repeatX","wrapS","RepeatWrapping","repeatY","wrapT","createPattern","onUpdate","u0","v0","u1","u2","det","idet","offsetX","offsetY","transform","clipImage","clip","pixels","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","MultiplyBlending","lineWidth","lineCap","lineJoin","strokeStyle","RenderableObject","object","renderOrder","vertexNormalsLength","Vector2","Vector4","visible","vertex","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","objects","_vector4","Box3","_boundingBox","_points3","Array","_points4","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","unproject","pickingRay","RenderList","normals","normalMatrix","setObject","projectVertex","applyMatrix4","invW","pushVertex","getNextVertexInPool","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","getNextLineInPool","pushTriangle","side","DoubleSide","getNextFaceInPool","fromArray","i","arguments","uv","renderList","autoUpdate","updateMatrixWorld","parent","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","addObject","getNextObjectInPool","applyProjection","traverseVisible","Light","Mesh","Line","frustumCulled","intersectsObject","Sprite","intersectsSprite","sort","painterSort","o","ol","geometry","BufferGeometry","attributes","groups","positions","array","index","indices","group","start","count","Geometry","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","target","targetVertex","fl","face","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","step","LineSegments","clipLine","colors","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","isObject","isObjectObject","toString","ctor","prot","val","isArray","__WEBPACK_AMD_DEFINE_RESULT__","_isArray","obj","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","concat","**","growListenerTree","listener","split","slice","name","shift","warned","trace","setMaxListeners","event","once","fn","many","ttl","Error","off","apply","_origin","on","emit","_all","args","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","removeAllListeners","listenersAny","EventEmitter2","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","cb","attachEvent","onScroll","elementType","isCollectionTyped","jQuery","Elements","removeChild","Trend_1","EventEmmiter_1","Widget_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","initialState","AXIS_RANGE_TYPE","ALL","from","to","padding","margin","dataType","AXIS_DATA_TYPE","NUMBER","gridMinSize","marks","yAxis","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","scrollSpeed","scrollEase","Linear","easeNone","autoScrollSpeed","autoScrollEase","trendDefaultState","TREND_TYPE","LINE","maxSegmentLength","lineColor","hasBackground","hasBeacon","settingsForTypes","CANDLE","minSegmentLengthInPx","maxSegmentLengthInPx","pluginsState","eventEmitterMaxListeners","maxVisibleSegments","isReady","ee","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","xAxisMarks","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","initListeners","onDestroy","subscribe","onInitialStateApplied","onReady","onChange","onTrendChange","onZoom","onPluginsStateChange","newState","eventData","silent","stateData","changedProps","key","trendsData","trendOptions","newStateContainsData","keys","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","widgetsOptions","WidgetClass","defaultOptions","getDefaultOptions","ChartWidget","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","zeroVal","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","copyProps","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","NAME","pluginWidgets","PluginWidget","setupChartState","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","maxLength","rangeLessThenMinValue","minLength","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","currentRange","nextRange","newScroll","resolve","animationTime","zoomToRange","scrollToEnd","endXVal","getPointOnXAxis","xVal","getPointOnYAxis","yVal","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenXByPoint","getPointByScreenX","screenX","getPointOnChart","getScreenLeftVal","TrendSegmentsManager_1","EVENTS","PREPEND_REQUEST","Trend","chartState","minYVal","maxYVal","dataset","prepareData","segmentsManager","TrendSegmentsManager","checkForPrependRequest","changedOptions","getCalculatedOptions","appendData","rawData","getOptions","getData","updatedTrendData","changeData","prependData","allData","_i","newData_1","item","statePatch","fromX","toX","filteredData","data_1","getFirstItem","getLastItem","setOptions","onPrependRequest","onDataChange","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","reject","currentData","isPrepend","initialItem","getUid","deepmerge","src","mergeArrays","dst","indexOf","obj1","obj2","deepCopy","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","intStr","lengthDiff","afterPointDigitsCount","afterPointStr","substr","bindEvent","createTexture","ctx","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","random","srcObject","dstObject","props","excludeProps","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","trend","segmentsById","segments","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","onDestroyHandler","appendAnimation","kill","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getSegment","getEndSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","segmentLength","currentSegmentLengthInPx","Number","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","firstDisplayedSegmentInd","lastDisplayedSegmentInd","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","segment","hasValue","startXVal","getNext","valueInPoint","onAnimationFrame","onRebuild","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","unshift","needRebuildSegments","trendData","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","recalculateItems","segmentIsReadyForAnimate","startYVal","endYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","currentAnimationState","animate","prependItem","nextItem","animation","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","eventCallback","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","getPrev","prevPoint","getFrameVal","getFramePoint","frameVal","eventName","listenersCount","unsubscriber","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getEnabledTrends","enabledTrends","allTrends","firstTrendData","getExtremumYVal","extremumIsMax","compareFn","trends_1","trendYValues","dataItem","NaN","onSegmentsRebuilded","onInitialStateAppliedHandler","_loop_1","this_1","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","vFOV","PI","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","__extends","__","AXIS_MARK_DEFAULT_OPTIONS","showValue","stickToEdges","title","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","getItem","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","_super","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","traverse","transparent","axisMesh","PlaneGeometry","axisOptions","axisGridParams","getGridParamsForAxis","edgeOffset","segmentsCount","pxVal","textAlign","DATE","getDateStr","gridParams","sec","hour","day","tf","getHours","getMinutes","getSeconds","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","xLinesCount","yLinesCount","lineSegments","setZ","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","TrendsWidget_1","Color_1","getTrendWidgetClass","TrendGradient","TrendsWidget","visibleSegmentsCnt","segmentsIds","Uint16Array","initGradient","updateSegments","widgetIsEnabled","gradient","Face3","ChartColor","scaleXFactor","scaleYFactor","currentScale","onSegmentsAnimate","trendSegmentsManager","includes","setupSegmentVertices","segmentInd","prevVisibleSegmentsCnt","segmentsToProcessCnt","segmentState","gradientSegmentInd","topLeft","bottomLeft","bottomRight","topRight","screenHeightVal","startX","toLocalX","startY","toLocalY","endX","endY","TrendWidget","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","widgetObject","getObjectByName","parseColor","cache","replace","exec","isNaN","colorStr","rgba","hexStr","rgbaStr","PlaneBufferGeometry","TrendLoading","mesh","deactivate","activate","restart","updatePosition","center","arc","pointVector","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY","CANVAS_WIDTH","CANVAS_HEIGHT","OFFSET_X","TrendIndicator","initObject","hasIndicator","lastItem","segmentEndXVal","segmentEndYVal","endPointVector","screenWidth","indicatorIsOutOfScreen","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","segmentIsNotDisplayed","destroySegment","setupSegment","pop","lineStartVertex","lineEndVertex","toLocalVec","vec","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","TrendBeacon","onStateChange","stopAnimation","animated","animationObject","trendsSegments","DEFAULT_CONFIG","installPluginWidgets","ChartPlugin","config","onChartReadyHandler","changedPluginsStates","onStateChanged","changedState","three_charts_1","TrendsMarksWidget_1","TREND_MARK_SIDE","description","descriptionColor","iconColor","TOP","TrendsMarksPlugin","trendsMarksPluginOptions","rects","onMarksChangeHandler","createMark","marksOptions","newMarkOptions","updateMarksSegments","calclulateMarksPositions","trendsMarksOptions","actualMarksNames","trendsMarksOptions_1","TrendMark","createMarkRect","left","top","isTopSideMark","newOffset","row","markRect","hasIntersection","_setOffset","_setRow","getTrendMarks","marksArr","xVals","_setSegment","points","markInd","trendMarks","TrendsMarksWidget","TrendsMarksPlugin_1","MAX_MARKS_IN_ROW","TrendMarksWidget","marksWidgets","onMarksChange","getTrendsMarksPlugin","marksItems","createMarkWidget","destroyMarkWidget","markWidget","TrendMarkWidget","onZoomFrameHandler","trendMark","markHeight","markWidth","lineHeight","show","markMesh","createMarkMesh","createMarkLine","isTopSide","circleOffset","circleR","circleX","circleY","textOffset","icon","computeLineDistances","lineMaterial","meshMaterial","posX","posY","lineDistancesNeedUpdate","Elastic","easeOut"],"mappings":"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","file":"plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(4));\r\n\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(3)\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t    if (true) module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"THREE_CHARTS\"] = factory(); else root[\"THREE_CHARTS\"] = factory();\n\t})(this, function() {\n\t    return function(modules) {\n\t        var installedModules = {};\n\t        function __webpack_require__(moduleId) {\n\t            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n\t            var module = installedModules[moduleId] = {\n\t                exports: {},\n\t                id: moduleId,\n\t                loaded: false\n\t            };\n\t            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t            module.loaded = true;\n\t            return module.exports;\n\t        }\n\t        __webpack_require__.m = modules;\n\t        __webpack_require__.c = installedModules;\n\t        __webpack_require__.p = \"\";\n\t        return __webpack_require__(0);\n\t    }([ function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(1));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(2));\n\t        __export(__webpack_require__(21));\n\t        __export(__webpack_require__(20));\n\t        __export(__webpack_require__(19));\n\t        __export(__webpack_require__(12));\n\t        __export(__webpack_require__(13));\n\t        __export(__webpack_require__(15));\n\t        __export(__webpack_require__(18));\n\t        __export(__webpack_require__(14));\n\t        __export(__webpack_require__(17));\n\t        __export(__webpack_require__(35));\n\t        __export(__webpack_require__(25));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        __webpack_require__(3);\n\t        var PerspectiveCamera = THREE.PerspectiveCamera;\n\t        var State_1 = __webpack_require__(12);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var AxisWidget_1 = __webpack_require__(22);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var TrendsGradientWidget_1 = __webpack_require__(24);\n\t        var TrendsLoadingWidget_1 = __webpack_require__(27);\n\t        var AxisMarksWidget_1 = __webpack_require__(28);\n\t        var BorderWidget_1 = __webpack_require__(29);\n\t        var TrendsIndicatorWidget_1 = __webpack_require__(30);\n\t        var TrendsLineWidget_1 = __webpack_require__(31);\n\t        var TrendsCandleWidget_1 = __webpack_require__(32);\n\t        var TrendsBeaconWidget_1 = __webpack_require__(33);\n\t        var deps_1 = __webpack_require__(34);\n\t        var Chart = function() {\n\t            function Chart(state, $container, plugins) {\n\t                var _this = this;\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.widgets = [];\n\t                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n\t                if (!$container) {\n\t                    Utils_1.Utils.error(\"$el must be set\");\n\t                }\n\t                var style = getComputedStyle($container);\n\t                state.width = parseInt(style.width);\n\t                state.height = parseInt(style.height);\n\t                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n\t                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n\t                    return _this.zoom(zoomValue, origin);\n\t                }, 200);\n\t                this.$container = $container;\n\t                this.init($container);\n\t            }\n\t            Chart.installWidget = function(Widget) {\n\t                if (!Widget.widgetName) {\n\t                    Utils_1.Utils.error(\"unnamed widget\");\n\t                }\n\t                this.installedWidgets[Widget.widgetName] = Widget;\n\t            };\n\t            Chart.prototype.init = function($container) {\n\t                var state = this.state;\n\t                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n\t                this.scene = new THREE.Scene();\n\t                this.isStopped = !autoRender.enabled;\n\t                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n\t                    antialias: true,\n\t                    alpha: true\n\t                });\n\t                renderer.setPixelRatio(Chart.devicePixelRatio);\n\t                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n\t                renderer.setSize(w, h);\n\t                $container.appendChild(renderer.domElement);\n\t                this.$el = renderer.domElement;\n\t                this.$el.style.display = \"block\";\n\t                if (showStats) {\n\t                    this.stats = new Stats();\n\t                    $container.appendChild(this.stats.domElement);\n\t                }\n\t                this.setupCamera();\n\t                var widgetsClasses = this.state.widgetsClasses;\n\t                for (var widgetName in widgetsClasses) {\n\t                    var widgetOptions = this.state.data.widgets[widgetName];\n\t                    if (!widgetOptions.enabled) continue;\n\t                    var WidgetConstructor = widgetsClasses[widgetName];\n\t                    var widget = new WidgetConstructor(this.state);\n\t                    this.scene.add(widget.getObject3D());\n\t                    this.widgets.push(widget);\n\t                }\n\t                this.bindEvents();\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.renderLoop = function() {\n\t                var _this = this;\n\t                if (this.isDestroyed) return;\n\t                this.stats && this.stats.begin();\n\t                this.render();\n\t                if (this.isStopped) return;\n\t                var fpsLimit = this.state.data.autoRender.fps;\n\t                if (fpsLimit) {\n\t                    var delay_1 = 1e3 / fpsLimit;\n\t                    setTimeout(function() {\n\t                        return requestAnimationFrame(function() {\n\t                            return _this.renderLoop();\n\t                        });\n\t                    }, delay_1);\n\t                } else {\n\t                    requestAnimationFrame(function() {\n\t                        return _this.renderLoop();\n\t                    });\n\t                }\n\t                this.stats && this.stats.end();\n\t            };\n\t            Chart.prototype.render = function() {\n\t                this.renderer.render(this.scene, this.camera);\n\t            };\n\t            Chart.prototype.stop = function() {\n\t                this.isStopped = true;\n\t            };\n\t            Chart.prototype.run = function() {\n\t                this.isStopped = false;\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.destroy = function() {\n\t                this.isDestroyed = true;\n\t                this.stop();\n\t                this.state.destroy();\n\t                this.unbindEvents();\n\t                try {\n\t                    this.renderer.forceContextLoss();\n\t                } catch (wtf) {}\n\t                this.renderer.context = null;\n\t                this.renderer.domElement = null;\n\t                this.renderer = null;\n\t            };\n\t            Chart.prototype.getState = function() {\n\t                return this.state.data;\n\t            };\n\t            Chart.prototype.getTrend = function(trendName) {\n\t                return this.state.getTrend(trendName);\n\t            };\n\t            Chart.prototype.setState = function(state) {\n\t                return this.state.setState(state);\n\t            };\n\t            Chart.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var $el = this.$el;\n\t                if (this.state.data.controls.enabled) {\n\t                    $el.addEventListener(\"mousewheel\", function(ev) {\n\t                        _this.onMouseWheel(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousemove\", function(ev) {\n\t                        _this.onMouseMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousedown\", function(ev) {\n\t                        return _this.onMouseDown(ev);\n\t                    });\n\t                    $el.addEventListener(\"mouseup\", function(ev) {\n\t                        return _this.onMouseUp(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchmove\", function(ev) {\n\t                        _this.onTouchMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchend\", function(ev) {\n\t                        _this.onTouchEnd(ev);\n\t                    });\n\t                }\n\t                if (this.state.data.autoResize) {\n\t                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n\t                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n\t                    });\n\t                }\n\t                this.unsubscribers = [ this.state.onTrendsChange(function() {\n\t                    return _this.autoscroll();\n\t                }), this.state.screen.onTransformationFrame(function(options) {\n\t                    return _this.onScreenTransformHandler(options);\n\t                }), this.state.onResize(function(options) {\n\t                    return _this.onChartResize();\n\t                }) ];\n\t            };\n\t            Chart.prototype.unbindEvents = function() {\n\t                try {\n\t                    this.resizeSensor && this.resizeSensor.detach();\n\t                } catch (e) {}\n\t                this.$el.remove();\n\t                this.unsubscribers.forEach(function(unsubscribe) {\n\t                    return unsubscribe();\n\t                });\n\t            };\n\t            Chart.prototype.setupCamera = function() {\n\t                var camSettings = this.state.screen.getCameraSettings();\n\t                if (!this.camera) {\n\t                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t                    this.scene.add(this.camera);\n\t                } else {\n\t                    this.camera.fov = camSettings.FOV;\n\t                    this.camera.aspect = camSettings.aspect;\n\t                    this.camera.far = camSettings.far;\n\t                    this.camera.near = camSettings.near;\n\t                    this.camera.updateProjectionMatrix();\n\t                }\n\t                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t                this.cameraInitialPosition = this.camera.position.clone();\n\t                this.onScreenTransformHandler(this.state.screen.options);\n\t            };\n\t            Chart.prototype.onScreenTransformHandler = function(options) {\n\t                if (options.scrollX != void 0) {\n\t                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n\t                    this.camera.position.setX(scrollX_1);\n\t                }\n\t                if (options.scrollY != void 0) {\n\t                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n\t                    this.camera.position.setY(scrollY_1);\n\t                }\n\t            };\n\t            Chart.prototype.autoscroll = function() {\n\t                var state = this.state;\n\t                if (!state.data.autoScroll) return;\n\t                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n\t                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n\t                if (trendsMaxXDelta > 0) {\n\t                    var maxVisibleX = this.state.screen.getScreenRightVal();\n\t                    var paddingRightX = this.state.getPaddingRight();\n\t                    var currentScroll = state.data.xAxis.range.scroll;\n\t                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t                        return;\n\t                    }\n\t                    var scrollDelta = trendsMaxXDelta;\n\t                    this.setState({\n\t                        xAxis: {\n\t                            range: {\n\t                                scroll: currentScroll + scrollDelta\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onScrollStop = function() {};\n\t            Chart.prototype.onMouseDown = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.clientX,\n\t                        y: ev.clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseUp = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseMove = function(ev) {\n\t                if (this.state.data.cursor.dragMode) {\n\t                    this.setState({\n\t                        cursor: {\n\t                            dragMode: true,\n\t                            x: ev.clientX,\n\t                            y: ev.clientY\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onMouseWheel = function(ev) {\n\t                ev.stopPropagation();\n\t                ev.preventDefault();\n\t                var zoomOrigin = ev.layerX / this.state.data.width;\n\t                var zoomValue = 1 + ev.wheelDeltaY * .001;\n\t                this.zoom(zoomValue, zoomOrigin);\n\t            };\n\t            Chart.prototype.onTouchMove = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.touches[0].clientX,\n\t                        y: ev.touches[0].clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onTouchEnd = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n\t                this.setState({\n\t                    width: width,\n\t                    height: height\n\t                });\n\t            };\n\t            Chart.prototype.onChartResize = function() {\n\t                var _a = this.state.data, width = _a.width, height = _a.height;\n\t                this.renderer.setSize(width, height);\n\t                this.setupCamera();\n\t            };\n\t            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n\t                var _this = this;\n\t                var MAX_ZOOM_VALUE = 1.5;\n\t                var MIN_ZOOM_VALUE = .7;\n\t                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t                var autoScrollIsEnabled = this.state.data.autoScroll;\n\t                if (autoScrollIsEnabled) this.state.setState({\n\t                    autoScroll: false\n\t                });\n\t                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n\t                    if (autoScrollIsEnabled) _this.setState({\n\t                        autoScroll: true\n\t                    });\n\t                });\n\t            };\n\t            Chart.createPreviewChart = function(userOptions, $el) {\n\t                var previewChartOptions = {\n\t                    animations: {\n\t                        enabled: false\n\t                    },\n\t                    widgets: {\n\t                        Grid: {\n\t                            enabled: false\n\t                        },\n\t                        Axis: {\n\t                            enabled: false\n\t                        },\n\t                        TrendsGradient: {\n\t                            enabled: false\n\t                        }\n\t                    }\n\t                };\n\t                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n\t                return new Chart(options, $el);\n\t            };\n\t            Chart.devicePixelRatio = window.devicePixelRatio;\n\t            Chart.installedWidgets = {};\n\t            Chart.renderers = {\n\t                CanvasRenderer: THREE.CanvasRenderer,\n\t                WebGLRenderer: THREE.WebGLRenderer\n\t            };\n\t            return Chart;\n\t        }();\n\t        exports.Chart = Chart;\n\t        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n\t        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n\t        Chart.installWidget(AxisWidget_1.AxisWidget);\n\t        Chart.installWidget(GridWidget_1.GridWidget);\n\t        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n\t        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n\t        Chart.installWidget(TrendsGradientWidget_1.TrendsGradientWidget);\n\t        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n\t        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n\t        Chart.installWidget(BorderWidget_1.BorderWidget);\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        window.TweenLite = TweenMax;\n\t        window.Stats = __webpack_require__(4);\n\t        __webpack_require__(5);\n\t        __webpack_require__(6);\n\t        exports.isPlainObject = __webpack_require__(7);\n\t        exports.EE2 = __webpack_require__(9);\n\t        var es6_promise_1 = __webpack_require__(10);\n\t        exports.Promise = es6_promise_1.Promise;\n\t        exports.ResizeSensor = __webpack_require__(11);\n\t    }, function(module, exports) {\n\t        var Stats = function() {\n\t            function h(a) {\n\t                c.appendChild(a.dom);\n\t                return a;\n\t            }\n\t            function k(a) {\n\t                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n\t                l = a;\n\t            }\n\t            var l = 0, c = document.createElement(\"div\");\n\t            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n\t            c.addEventListener(\"click\", function(a) {\n\t                a.preventDefault();\n\t                k(++l % c.children.length);\n\t            }, !1);\n\t            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n\t            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n\t            k(0);\n\t            return {\n\t                REVISION: 16,\n\t                dom: c,\n\t                addPanel: h,\n\t                showPanel: k,\n\t                begin: function() {\n\t                    g = (performance || Date).now();\n\t                },\n\t                end: function() {\n\t                    a++;\n\t                    var c = (performance || Date).now();\n\t                    f.update(c - g, 200);\n\t                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n\t                        var d = performance.memory;\n\t                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n\t                    }\n\t                    return c;\n\t                },\n\t                update: function() {\n\t                    g = this.end();\n\t                },\n\t                domElement: c,\n\t                setMode: k\n\t            };\n\t        };\n\t        Stats.Panel = function(h, k, l) {\n\t            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n\t            q.width = r;\n\t            q.height = f;\n\t            q.style.cssText = \"width:80px;height:48px\";\n\t            var b = q.getContext(\"2d\");\n\t            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n\t            b.textBaseline = \"top\";\n\t            b.fillStyle = l;\n\t            b.fillRect(0, 0, r, f);\n\t            b.fillStyle = k;\n\t            b.fillText(h, t, u);\n\t            b.fillRect(d, m, n, p);\n\t            b.fillStyle = l;\n\t            b.globalAlpha = .9;\n\t            b.fillRect(d, m, n, p);\n\t            return {\n\t                dom: q,\n\t                update: function(f, v) {\n\t                    c = Math.min(c, f);\n\t                    g = Math.max(g, f);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = 1;\n\t                    b.fillRect(0, 0, r, m);\n\t                    b.fillStyle = k;\n\t                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n\t                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n\t                    b.fillRect(d + n - a, m, a, p);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = .9;\n\t                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n\t                }\n\t            };\n\t        };\n\t        \"object\" === typeof module && (module.exports = Stats);\n\t    }, function(module, exports) {\n\t        THREE.SpriteCanvasMaterial = function(parameters) {\n\t            THREE.Material.call(this);\n\t            this.type = \"SpriteCanvasMaterial\";\n\t            this.color = new THREE.Color(16777215);\n\t            this.program = function(context, color) {};\n\t            this.setValues(parameters);\n\t        };\n\t        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n\t        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n\t            var material = new THREE.SpriteCanvasMaterial();\n\t            material.copy(this);\n\t            material.color.copy(this.color);\n\t            material.program = this.program;\n\t            return material;\n\t        };\n\t        THREE.CanvasRenderer = function(parameters) {\n\t            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n\t            parameters = parameters || {};\n\t            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n\t                alpha: parameters.alpha === true\n\t            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n\t            if (_context.setLineDash === undefined) {\n\t                _context.setLineDash = function() {};\n\t            }\n\t            this.domElement = _canvas;\n\t            this.autoClear = true;\n\t            this.sortObjects = true;\n\t            this.sortElements = true;\n\t            this.info = {\n\t                render: {\n\t                    vertices: 0,\n\t                    faces: 0\n\t                }\n\t            };\n\t            this.supportsVertexTextures = function() {};\n\t            this.setFaceCulling = function() {};\n\t            this.getContext = function() {\n\t                return _context;\n\t            };\n\t            this.getContextAttributes = function() {\n\t                return _context.getContextAttributes();\n\t            };\n\t            this.getPixelRatio = function() {\n\t                return _pixelRatio;\n\t            };\n\t            this.setPixelRatio = function(value) {\n\t                if (value !== undefined) _pixelRatio = value;\n\t            };\n\t            this.setSize = function(width, height, updateStyle) {\n\t                _canvasWidth = width * _pixelRatio;\n\t                _canvasHeight = height * _pixelRatio;\n\t                _canvas.width = _canvasWidth;\n\t                _canvas.height = _canvasHeight;\n\t                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n\t                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n\t                if (updateStyle !== false) {\n\t                    _canvas.style.width = width + \"px\";\n\t                    _canvas.style.height = height + \"px\";\n\t                }\n\t                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _contextGlobalAlpha = 1;\n\t                _contextGlobalCompositeOperation = 0;\n\t                _contextStrokeStyle = null;\n\t                _contextFillStyle = null;\n\t                _contextLineWidth = null;\n\t                _contextLineCap = null;\n\t                _contextLineJoin = null;\n\t                this.setViewport(0, 0, width, height);\n\t            };\n\t            this.setViewport = function(x, y, width, height) {\n\t                _viewportX = x * _pixelRatio;\n\t                _viewportY = y * _pixelRatio;\n\t                _viewportWidth = width * _pixelRatio;\n\t                _viewportHeight = height * _pixelRatio;\n\t            };\n\t            this.setScissor = function() {};\n\t            this.setScissorTest = function() {};\n\t            this.setClearColor = function(color, alpha) {\n\t                _clearColor.set(color);\n\t                _clearAlpha = alpha !== undefined ? alpha : 1;\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t            };\n\t            this.setClearColorHex = function(hex, alpha) {\n\t                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n\t                this.setClearColor(hex, alpha);\n\t            };\n\t            this.getClearColor = function() {\n\t                return _clearColor;\n\t            };\n\t            this.getClearAlpha = function() {\n\t                return _clearAlpha;\n\t            };\n\t            this.getMaxAnisotropy = function() {\n\t                return 0;\n\t            };\n\t            this.clear = function() {\n\t                if (_clearBox.isEmpty() === false) {\n\t                    _clearBox.intersect(_clipBox);\n\t                    _clearBox.expandByScalar(2);\n\t                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n\t                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n\t                    if (_clearAlpha < 1) {\n\t                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    if (_clearAlpha > 0) {\n\t                        setBlending(THREE.NormalBlending);\n\t                        setOpacity(1);\n\t                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n\t                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    _clearBox.makeEmpty();\n\t                }\n\t            };\n\t            this.clearColor = function() {};\n\t            this.clearDepth = function() {};\n\t            this.clearStencil = function() {};\n\t            this.render = function(scene, camera) {\n\t                if (camera instanceof THREE.Camera === false) {\n\t                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n\t                    return;\n\t                }\n\t                if (this.autoClear === true) this.clear();\n\t                _this.info.render.vertices = 0;\n\t                _this.info.render.faces = 0;\n\t                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n\t                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n\t                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n\t                _elements = _renderData.elements;\n\t                _lights = _renderData.lights;\n\t                _camera = camera;\n\t                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\t                calculateLights();\n\t                for (var e = 0, el = _elements.length; e < el; e++) {\n\t                    var element = _elements[e];\n\t                    var material = element.material;\n\t                    if (material === undefined || material.opacity === 0) continue;\n\t                    _elemBox.makeEmpty();\n\t                    if (element instanceof THREE.RenderableSprite) {\n\t                        _v1 = element;\n\t                        _v1.x *= _canvasWidthHalf;\n\t                        _v1.y *= _canvasHeightHalf;\n\t                        renderSprite(_v1, element, material);\n\t                    } else if (element instanceof THREE.RenderableLine) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderLine(_v1, _v2, element, material);\n\t                        }\n\t                    } else if (element instanceof THREE.RenderableFace) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v3 = element.v3;\n\t                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n\t                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n\t                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _v3.positionScreen.x *= _canvasWidthHalf;\n\t                        _v3.positionScreen.y *= _canvasHeightHalf;\n\t                        if (material.overdraw > 0) {\n\t                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n\t                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n\t                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n\t                        }\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n\t                        }\n\t                    }\n\t                    _clearBox.union(_elemBox);\n\t                }\n\t                _context.setTransform(1, 0, 0, 1, 0, 0);\n\t            };\n\t            function calculateLights() {\n\t                _ambientLight.setRGB(0, 0, 0);\n\t                _directionalLights.setRGB(0, 0, 0);\n\t                _pointLights.setRGB(0, 0, 0);\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    var lightColor = light.color;\n\t                    if (light instanceof THREE.AmbientLight) {\n\t                        _ambientLight.add(lightColor);\n\t                    } else if (light instanceof THREE.DirectionalLight) {\n\t                        _directionalLights.add(lightColor);\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        _pointLights.add(lightColor);\n\t                    }\n\t                }\n\t            }\n\t            function calculateLight(position, normal, color) {\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    _lightColor.copy(light.color);\n\t                    if (light instanceof THREE.DirectionalLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\t                        var amount = normal.dot(lightPosition);\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\t                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n\t                        if (amount == 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    }\n\t                }\n\t            }\n\t            function renderSprite(v1, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                var scaleX = element.scale.x * _canvasWidthHalf;\n\t                var scaleY = element.scale.y * _canvasHeightHalf;\n\t                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n\t                _elemBox.min.set(v1.x - dist, v1.y - dist);\n\t                _elemBox.max.set(v1.x + dist, v1.y + dist);\n\t                if (material instanceof THREE.SpriteMaterial) {\n\t                    var texture = material.map;\n\t                    if (texture !== null) {\n\t                        var pattern = _patterns[texture.id];\n\t                        if (pattern === undefined || pattern.version !== texture.version) {\n\t                            pattern = textureToPattern(texture);\n\t                            _patterns[texture.id] = pattern;\n\t                        }\n\t                        if (pattern.canvas !== undefined) {\n\t                            setFillStyle(pattern.canvas);\n\t                            var bitmap = texture.image;\n\t                            var ox = bitmap.width * texture.offset.x;\n\t                            var oy = bitmap.height * texture.offset.y;\n\t                            var sx = bitmap.width * texture.repeat.x;\n\t                            var sy = bitmap.height * texture.repeat.y;\n\t                            var cx = scaleX / sx;\n\t                            var cy = scaleY / sy;\n\t                            _context.save();\n\t                            _context.translate(v1.x, v1.y);\n\t                            if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                            _context.translate(-scaleX / 2, -scaleY / 2);\n\t                            _context.scale(cx, cy);\n\t                            _context.translate(-ox, -oy);\n\t                            _context.fillRect(ox, oy, sx, sy);\n\t                            _context.restore();\n\t                        }\n\t                    } else {\n\t                        setFillStyle(material.color.getStyle());\n\t                        _context.save();\n\t                        _context.translate(v1.x, v1.y);\n\t                        if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                        _context.scale(scaleX, -scaleY);\n\t                        _context.fillRect(-.5, -.5, 1, 1);\n\t                        _context.restore();\n\t                    }\n\t                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setFillStyle(material.color.getStyle());\n\t                    _context.save();\n\t                    _context.translate(v1.x, v1.y);\n\t                    if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                    _context.scale(scaleX, scaleY);\n\t                    material.program(_context);\n\t                    _context.restore();\n\t                }\n\t            }\n\t            function renderLine(v1, v2, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _context.beginPath();\n\t                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n\t                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n\t                if (material instanceof THREE.LineBasicMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    if (material.vertexColors !== THREE.VertexColors) {\n\t                        setStrokeStyle(material.color.getStyle());\n\t                    } else {\n\t                        var colorStyle1 = element.vertexColors[0].getStyle();\n\t                        var colorStyle2 = element.vertexColors[1].getStyle();\n\t                        if (colorStyle1 === colorStyle2) {\n\t                            setStrokeStyle(colorStyle1);\n\t                        } else {\n\t                            try {\n\t                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n\t                                grad.addColorStop(0, colorStyle1);\n\t                                grad.addColorStop(1, colorStyle2);\n\t                            } catch (exception) {\n\t                                grad = colorStyle1;\n\t                            }\n\t                            setStrokeStyle(grad);\n\t                        }\n\t                    }\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                } else if (material instanceof THREE.LineDashedMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setLineDash([ material.dashSize, material.gapSize ]);\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                    setLineDash([]);\n\t                }\n\t            }\n\t            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n\t                _this.info.render.vertices += 3;\n\t                _this.info.render.faces++;\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _v1x = v1.positionScreen.x;\n\t                _v1y = v1.positionScreen.y;\n\t                _v2x = v2.positionScreen.x;\n\t                _v2y = v2.positionScreen.y;\n\t                _v3x = v3.positionScreen.x;\n\t                _v3y = v3.positionScreen.y;\n\t                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n\t                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n\t                    _diffuseColor.copy(material.color);\n\t                    _emissiveColor.copy(material.emissive);\n\t                    if (material.vertexColors === THREE.FaceColors) {\n\t                        _diffuseColor.multiply(element.color);\n\t                    }\n\t                    _color.copy(_ambientLight);\n\t                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\t                    calculateLight(_centroid, element.normalModel, _color);\n\t                    _color.multiply(_diffuseColor).add(_emissiveColor);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n\t                    if (material.map !== null) {\n\t                        var mapping = material.map.mapping;\n\t                        if (mapping === THREE.UVMapping) {\n\t                            _uvs = element.uvs;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n\t                        }\n\t                    } else if (material.envMap !== null) {\n\t                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n\t                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n\t                            _uv1x = .5 * _normal.x + .5;\n\t                            _uv1y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n\t                            _uv2x = .5 * _normal.x + .5;\n\t                            _uv2y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n\t                            _uv3x = .5 * _normal.x + .5;\n\t                            _uv3y = .5 * _normal.y + .5;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n\t                        }\n\t                    } else {\n\t                        _color.copy(material.color);\n\t                        if (material.vertexColors === THREE.FaceColors) {\n\t                            _color.multiply(element.color);\n\t                        }\n\t                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                    }\n\t                } else if (material instanceof THREE.MeshNormalMaterial) {\n\t                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n\t                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else {\n\t                    _color.setRGB(1, 1, 1);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                }\n\t            }\n\t            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n\t                _context.beginPath();\n\t                _context.moveTo(x0, y0);\n\t                _context.lineTo(x1, y1);\n\t                _context.lineTo(x2, y2);\n\t                _context.closePath();\n\t            }\n\t            function strokePath(color, linewidth, linecap, linejoin) {\n\t                setLineWidth(linewidth);\n\t                setLineCap(linecap);\n\t                setLineJoin(linejoin);\n\t                setStrokeStyle(color.getStyle());\n\t                _context.stroke();\n\t                _elemBox.expandByScalar(linewidth * 2);\n\t            }\n\t            function fillPath(color) {\n\t                setFillStyle(color.getStyle());\n\t                _context.fill();\n\t            }\n\t            function textureToPattern(texture) {\n\t                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: texture.version\n\t                    };\n\t                }\n\t                var image = texture.image;\n\t                if (image.complete === false) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: 0\n\t                    };\n\t                }\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = image.width;\n\t                canvas.height = image.height;\n\t                var context = canvas.getContext(\"2d\");\n\t                context.setTransform(1, 0, 0, -1, 0, image.height);\n\t                context.drawImage(image, 0, 0);\n\t                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t                var repeat = \"no-repeat\";\n\t                if (repeatX === true && repeatY === true) {\n\t                    repeat = \"repeat\";\n\t                } else if (repeatX === true) {\n\t                    repeat = \"repeat-x\";\n\t                } else if (repeatY === true) {\n\t                    repeat = \"repeat-y\";\n\t                }\n\t                var pattern = _context.createPattern(canvas, repeat);\n\t                if (texture.onUpdate) texture.onUpdate(texture);\n\t                return {\n\t                    canvas: pattern,\n\t                    version: texture.version\n\t                };\n\t            }\n\t            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n\t                var pattern = _patterns[texture.id];\n\t                if (pattern === undefined || pattern.version !== texture.version) {\n\t                    pattern = textureToPattern(texture);\n\t                    _patterns[texture.id] = pattern;\n\t                }\n\t                if (pattern.canvas !== undefined) {\n\t                    setFillStyle(pattern.canvas);\n\t                } else {\n\t                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n\t                    _context.fill();\n\t                    return;\n\t                }\n\t                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n\t                u0 = (u0 + offsetX) * width;\n\t                v0 = (v0 + offsetY) * height;\n\t                u1 = (u1 + offsetX) * width;\n\t                v1 = (v1 + offsetY) * height;\n\t                u2 = (u2 + offsetX) * width;\n\t                v2 = (v2 + offsetY) * height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                if (det === 0) return;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.fill();\n\t                _context.restore();\n\t            }\n\t            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n\t                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n\t                u0 *= width;\n\t                v0 *= height;\n\t                u1 *= width;\n\t                v1 *= height;\n\t                u2 *= width;\n\t                v2 *= height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.clip();\n\t                _context.drawImage(image, 0, 0);\n\t                _context.restore();\n\t            }\n\t            function expand(v1, v2, pixels) {\n\t                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n\t                if (det === 0) return;\n\t                idet = pixels / Math.sqrt(det);\n\t                x *= idet;\n\t                y *= idet;\n\t                v2.x += x;\n\t                v2.y += y;\n\t                v1.x -= x;\n\t                v1.y -= y;\n\t            }\n\t            function setOpacity(value) {\n\t                if (_contextGlobalAlpha !== value) {\n\t                    _context.globalAlpha = value;\n\t                    _contextGlobalAlpha = value;\n\t                }\n\t            }\n\t            function setBlending(value) {\n\t                if (_contextGlobalCompositeOperation !== value) {\n\t                    if (value === THREE.NormalBlending) {\n\t                        _context.globalCompositeOperation = \"source-over\";\n\t                    } else if (value === THREE.AdditiveBlending) {\n\t                        _context.globalCompositeOperation = \"lighter\";\n\t                    } else if (value === THREE.SubtractiveBlending) {\n\t                        _context.globalCompositeOperation = \"darker\";\n\t                    } else if (value === THREE.MultiplyBlending) {\n\t                        _context.globalCompositeOperation = \"multiply\";\n\t                    }\n\t                    _contextGlobalCompositeOperation = value;\n\t                }\n\t            }\n\t            function setLineWidth(value) {\n\t                if (_contextLineWidth !== value) {\n\t                    _context.lineWidth = value;\n\t                    _contextLineWidth = value;\n\t                }\n\t            }\n\t            function setLineCap(value) {\n\t                if (_contextLineCap !== value) {\n\t                    _context.lineCap = value;\n\t                    _contextLineCap = value;\n\t                }\n\t            }\n\t            function setLineJoin(value) {\n\t                if (_contextLineJoin !== value) {\n\t                    _context.lineJoin = value;\n\t                    _contextLineJoin = value;\n\t                }\n\t            }\n\t            function setStrokeStyle(value) {\n\t                if (_contextStrokeStyle !== value) {\n\t                    _context.strokeStyle = value;\n\t                    _contextStrokeStyle = value;\n\t                }\n\t            }\n\t            function setFillStyle(value) {\n\t                if (_contextFillStyle !== value) {\n\t                    _context.fillStyle = value;\n\t                    _contextFillStyle = value;\n\t                }\n\t            }\n\t            function setLineDash(value) {\n\t                if (_contextLineDash.length !== value.length) {\n\t                    _context.setLineDash(value);\n\t                    _contextLineDash = value;\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports) {\n\t        THREE.RenderableObject = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableFace = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.v3 = new THREE.RenderableVertex();\n\t            this.normalModel = new THREE.Vector3();\n\t            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t            this.vertexNormalsLength = 0;\n\t            this.color = new THREE.Color();\n\t            this.material = null;\n\t            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableVertex = function() {\n\t            this.position = new THREE.Vector3();\n\t            this.positionWorld = new THREE.Vector3();\n\t            this.positionScreen = new THREE.Vector4();\n\t            this.visible = true;\n\t        };\n\t        THREE.RenderableVertex.prototype.copy = function(vertex) {\n\t            this.positionWorld.copy(vertex.positionWorld);\n\t            this.positionScreen.copy(vertex.positionScreen);\n\t        };\n\t        THREE.RenderableLine = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t            this.material = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableSprite = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.x = 0;\n\t            this.y = 0;\n\t            this.z = 0;\n\t            this.rotation = 0;\n\t            this.scale = new THREE.Vector2();\n\t            this.material = null;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.Projector = function() {\n\t            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n\t                objects: [],\n\t                lights: [],\n\t                elements: []\n\t            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n\t            this.projectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n\t                vector.project(camera);\n\t            };\n\t            this.unprojectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n\t                vector.unproject(camera);\n\t            };\n\t            this.pickingRay = function(vector, camera) {\n\t                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n\t            };\n\t            var RenderList = function() {\n\t                var normals = [];\n\t                var uvs = [];\n\t                var object = null;\n\t                var material = null;\n\t                var normalMatrix = new THREE.Matrix3();\n\t                function setObject(value) {\n\t                    object = value;\n\t                    material = object.material;\n\t                    normalMatrix.getNormalMatrix(object.matrixWorld);\n\t                    normals.length = 0;\n\t                    uvs.length = 0;\n\t                }\n\t                function projectVertex(vertex) {\n\t                    var position = vertex.position;\n\t                    var positionWorld = vertex.positionWorld;\n\t                    var positionScreen = vertex.positionScreen;\n\t                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n\t                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n\t                    var invW = 1 / positionScreen.w;\n\t                    positionScreen.x *= invW;\n\t                    positionScreen.y *= invW;\n\t                    positionScreen.z *= invW;\n\t                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n\t                }\n\t                function pushVertex(x, y, z) {\n\t                    _vertex = getNextVertexInPool();\n\t                    _vertex.position.set(x, y, z);\n\t                    projectVertex(_vertex);\n\t                }\n\t                function pushNormal(x, y, z) {\n\t                    normals.push(x, y, z);\n\t                }\n\t                function pushUv(x, y) {\n\t                    uvs.push(x, y);\n\t                }\n\t                function checkTriangleVisibility(v1, v2, v3) {\n\t                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n\t                    _points3[0] = v1.positionScreen;\n\t                    _points3[1] = v2.positionScreen;\n\t                    _points3[2] = v3.positionScreen;\n\t                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n\t                }\n\t                function checkBackfaceCulling(v1, v2, v3) {\n\t                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n\t                }\n\t                function pushLine(a, b) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    _line = getNextLineInPool();\n\t                    _line.id = object.id;\n\t                    _line.v1.copy(v1);\n\t                    _line.v2.copy(v2);\n\t                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n\t                    _line.renderOrder = object.renderOrder;\n\t                    _line.material = object.material;\n\t                    _renderData.elements.push(_line);\n\t                }\n\t                function pushTriangle(a, b, c) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    var v3 = _vertexPool[c];\n\t                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\t                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n\t                        _face = getNextFaceInPool();\n\t                        _face.id = object.id;\n\t                        _face.v1.copy(v1);\n\t                        _face.v2.copy(v2);\n\t                        _face.v3.copy(v3);\n\t                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                        _face.renderOrder = object.renderOrder;\n\t                        _face.normalModel.fromArray(normals, a * 3);\n\t                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\t                        for (var i = 0; i < 3; i++) {\n\t                            var normal = _face.vertexNormalsModel[i];\n\t                            normal.fromArray(normals, arguments[i] * 3);\n\t                            normal.applyMatrix3(normalMatrix).normalize();\n\t                            var uv = _face.uvs[i];\n\t                            uv.fromArray(uvs, arguments[i] * 2);\n\t                        }\n\t                        _face.vertexNormalsLength = 3;\n\t                        _face.material = object.material;\n\t                        _renderData.elements.push(_face);\n\t                    }\n\t                }\n\t                return {\n\t                    setObject: setObject,\n\t                    projectVertex: projectVertex,\n\t                    checkTriangleVisibility: checkTriangleVisibility,\n\t                    checkBackfaceCulling: checkBackfaceCulling,\n\t                    pushVertex: pushVertex,\n\t                    pushNormal: pushNormal,\n\t                    pushUv: pushUv,\n\t                    pushLine: pushLine,\n\t                    pushTriangle: pushTriangle\n\t                };\n\t            };\n\t            var renderList = new RenderList();\n\t            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n\t                _faceCount = 0;\n\t                _lineCount = 0;\n\t                _spriteCount = 0;\n\t                _renderData.elements.length = 0;\n\t                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n\t                if (camera.parent === null) camera.updateMatrixWorld();\n\t                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\t                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\t                _frustum.setFromMatrix(_viewProjectionMatrix);\n\t                _objectCount = 0;\n\t                _renderData.objects.length = 0;\n\t                _renderData.lights.length = 0;\n\t                function addObject(object) {\n\t                    _object = getNextObjectInPool();\n\t                    _object.id = object.id;\n\t                    _object.object = object;\n\t                    _vector3.setFromMatrixPosition(object.matrixWorld);\n\t                    _vector3.applyProjection(_viewProjectionMatrix);\n\t                    _object.z = _vector3.z;\n\t                    _object.renderOrder = object.renderOrder;\n\t                    _renderData.objects.push(_object);\n\t                }\n\t                scene.traverseVisible(function(object) {\n\t                    if (object instanceof THREE.Light) {\n\t                        _renderData.lights.push(object);\n\t                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line) {\n\t                        if (object.material.visible === false) return;\n\t                        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n\t                        addObject(object);\n\t                    } else if (object instanceof THREE.Sprite) {\n\t                        if (object.material.visible === false) return;\n\t                        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n\t                        addObject(object);\n\t                    }\n\t                });\n\t                if (sortObjects === true) {\n\t                    _renderData.objects.sort(painterSort);\n\t                }\n\t                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n\t                    var object = _renderData.objects[o].object;\n\t                    var geometry = object.geometry;\n\t                    renderList.setObject(object);\n\t                    _modelMatrix = object.matrixWorld;\n\t                    _vertexCount = 0;\n\t                    if (object instanceof THREE.Mesh) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            var groups = geometry.groups;\n\t                            if (attributes.position === undefined) continue;\n\t                            var positions = attributes.position.array;\n\t                            for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                            }\n\t                            if (attributes.normal !== undefined) {\n\t                                var normals = attributes.normal.array;\n\t                                for (var i = 0, l = normals.length; i < l; i += 3) {\n\t                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n\t                                }\n\t                            }\n\t                            if (attributes.uv !== undefined) {\n\t                                var uvs = attributes.uv.array;\n\t                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n\t                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n\t                                }\n\t                            }\n\t                            if (geometry.index !== null) {\n\t                                var indices = geometry.index.array;\n\t                                if (groups.length > 0) {\n\t                                    for (var o = 0; o < groups.length; o++) {\n\t                                        var group = groups[o];\n\t                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n\t                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n\t                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n\t                                    renderList.pushTriangle(i, i + 1, i + 2);\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            var vertices = geometry.vertices;\n\t                            var faces = geometry.faces;\n\t                            var faceVertexUvs = geometry.faceVertexUvs[0];\n\t                            _normalMatrix.getNormalMatrix(_modelMatrix);\n\t                            var material = object.material;\n\t                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n\t                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n\t                                var vertex = vertices[v];\n\t                                _vector3.copy(vertex);\n\t                                if (material.morphTargets === true) {\n\t                                    var morphTargets = geometry.morphTargets;\n\t                                    var morphInfluences = object.morphTargetInfluences;\n\t                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n\t                                        var influence = morphInfluences[t];\n\t                                        if (influence === 0) continue;\n\t                                        var target = morphTargets[t];\n\t                                        var targetVertex = target.vertices[v];\n\t                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n\t                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n\t                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n\t                                    }\n\t                                }\n\t                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n\t                            }\n\t                            for (var f = 0, fl = faces.length; f < fl; f++) {\n\t                                var face = faces[f];\n\t                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n\t                                if (material === undefined) continue;\n\t                                var side = material.side;\n\t                                var v1 = _vertexPool[face.a];\n\t                                var v2 = _vertexPool[face.b];\n\t                                var v3 = _vertexPool[face.c];\n\t                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n\t                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\t                                if (side !== THREE.DoubleSide) {\n\t                                    if (side === THREE.FrontSide && visible === false) continue;\n\t                                    if (side === THREE.BackSide && visible === true) continue;\n\t                                }\n\t                                _face = getNextFaceInPool();\n\t                                _face.id = object.id;\n\t                                _face.v1.copy(v1);\n\t                                _face.v2.copy(v2);\n\t                                _face.v3.copy(v3);\n\t                                _face.normalModel.copy(face.normal);\n\t                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                    _face.normalModel.negate();\n\t                                }\n\t                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                var faceVertexNormals = face.vertexNormals;\n\t                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n\t                                    var normalModel = _face.vertexNormalsModel[n];\n\t                                    normalModel.copy(faceVertexNormals[n]);\n\t                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                        normalModel.negate();\n\t                                    }\n\t                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                }\n\t                                _face.vertexNormalsLength = faceVertexNormals.length;\n\t                                var vertexUvs = faceVertexUvs[f];\n\t                                if (vertexUvs !== undefined) {\n\t                                    for (var u = 0; u < 3; u++) {\n\t                                        _face.uvs[u].copy(vertexUvs[u]);\n\t                                    }\n\t                                }\n\t                                _face.color = face.color;\n\t                                _face.material = material;\n\t                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                                _face.renderOrder = object.renderOrder;\n\t                                _renderData.elements.push(_face);\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Line) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            if (attributes.position !== undefined) {\n\t                                var positions = attributes.position.array;\n\t                                for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                                }\n\t                                if (geometry.index !== null) {\n\t                                    var indices = geometry.index.array;\n\t                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n\t                                        renderList.pushLine(indices[i], indices[i + 1]);\n\t                                    }\n\t                                } else {\n\t                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n\t                                        renderList.pushLine(i, i + 1);\n\t                                    }\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\t                            var vertices = object.geometry.vertices;\n\t                            if (vertices.length === 0) continue;\n\t                            v1 = getNextVertexInPool();\n\t                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n\t                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n\t                                v1 = getNextVertexInPool();\n\t                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n\t                                if ((v + 1) % step > 0) continue;\n\t                                v2 = _vertexPool[_vertexCount - 2];\n\t                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\t                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\t                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n\t                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\t                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\t                                    _line = getNextLineInPool();\n\t                                    _line.id = object.id;\n\t                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\t                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\t                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n\t                                    _line.renderOrder = object.renderOrder;\n\t                                    _line.material = object.material;\n\t                                    if (object.material.vertexColors === THREE.VertexColors) {\n\t                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n\t                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n\t                                    }\n\t                                    _renderData.elements.push(_line);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Sprite) {\n\t                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\t                        _vector4.applyMatrix4(_viewProjectionMatrix);\n\t                        var invW = 1 / _vector4.w;\n\t                        _vector4.z *= invW;\n\t                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n\t                            _sprite = getNextSpriteInPool();\n\t                            _sprite.id = object.id;\n\t                            _sprite.x = _vector4.x * invW;\n\t                            _sprite.y = _vector4.y * invW;\n\t                            _sprite.z = _vector4.z;\n\t                            _sprite.renderOrder = object.renderOrder;\n\t                            _sprite.object = object;\n\t                            _sprite.rotation = object.rotation;\n\t                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n\t                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n\t                            _sprite.material = object.material;\n\t                            _renderData.elements.push(_sprite);\n\t                        }\n\t                    }\n\t                }\n\t                if (sortElements === true) {\n\t                    _renderData.elements.sort(painterSort);\n\t                }\n\t                return _renderData;\n\t            };\n\t            function getNextObjectInPool() {\n\t                if (_objectCount === _objectPoolLength) {\n\t                    var object = new THREE.RenderableObject();\n\t                    _objectPool.push(object);\n\t                    _objectPoolLength++;\n\t                    _objectCount++;\n\t                    return object;\n\t                }\n\t                return _objectPool[_objectCount++];\n\t            }\n\t            function getNextVertexInPool() {\n\t                if (_vertexCount === _vertexPoolLength) {\n\t                    var vertex = new THREE.RenderableVertex();\n\t                    _vertexPool.push(vertex);\n\t                    _vertexPoolLength++;\n\t                    _vertexCount++;\n\t                    return vertex;\n\t                }\n\t                return _vertexPool[_vertexCount++];\n\t            }\n\t            function getNextFaceInPool() {\n\t                if (_faceCount === _facePoolLength) {\n\t                    var face = new THREE.RenderableFace();\n\t                    _facePool.push(face);\n\t                    _facePoolLength++;\n\t                    _faceCount++;\n\t                    return face;\n\t                }\n\t                return _facePool[_faceCount++];\n\t            }\n\t            function getNextLineInPool() {\n\t                if (_lineCount === _linePoolLength) {\n\t                    var line = new THREE.RenderableLine();\n\t                    _linePool.push(line);\n\t                    _linePoolLength++;\n\t                    _lineCount++;\n\t                    return line;\n\t                }\n\t                return _linePool[_lineCount++];\n\t            }\n\t            function getNextSpriteInPool() {\n\t                if (_spriteCount === _spritePoolLength) {\n\t                    var sprite = new THREE.RenderableSprite();\n\t                    _spritePool.push(sprite);\n\t                    _spritePoolLength++;\n\t                    _spriteCount++;\n\t                    return sprite;\n\t                }\n\t                return _spritePool[_spriteCount++];\n\t            }\n\t            function painterSort(a, b) {\n\t                if (a.renderOrder !== b.renderOrder) {\n\t                    return a.renderOrder - b.renderOrder;\n\t                } else if (a.z !== b.z) {\n\t                    return b.z - a.z;\n\t                } else if (a.id !== b.id) {\n\t                    return a.id - b.id;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            }\n\t            function clipLine(s1, s2) {\n\t                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n\t                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n\t                    return true;\n\t                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n\t                    return false;\n\t                } else {\n\t                    if (bc1near < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n\t                    } else if (bc2near < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n\t                    }\n\t                    if (bc1far < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n\t                    } else if (bc2far < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n\t                    }\n\t                    if (alpha2 < alpha1) {\n\t                        return false;\n\t                    } else {\n\t                        s1.lerp(s2, alpha1);\n\t                        s2.lerp(s1, 1 - alpha2);\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        /*!\n\t\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        var isObject = __webpack_require__(8);\n\t        function isObjectObject(o) {\n\t            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n\t        }\n\t        module.exports = function isPlainObject(o) {\n\t            var ctor, prot;\n\t            if (isObjectObject(o) === false) return false;\n\t            ctor = o.constructor;\n\t            if (typeof ctor !== \"function\") return false;\n\t            prot = ctor.prototype;\n\t            if (isObjectObject(prot) === false) return false;\n\t            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n\t                return false;\n\t            }\n\t            return true;\n\t        };\n\t    }, function(module, exports) {\n\t        /*!\n\t\t * isobject <https://github.com/jonschlinkert/isobject>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        module.exports = function isObject(val) {\n\t            return val != null && typeof val === \"object\" && !Array.isArray(val);\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        var __WEBPACK_AMD_DEFINE_RESULT__;\n\t        !function(undefined) {\n\t            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t                return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t            };\n\t            var defaultMaxListeners = 10;\n\t            function init() {\n\t                this._events = {};\n\t                if (this._conf) {\n\t                    configure.call(this, this._conf);\n\t                }\n\t            }\n\t            function configure(conf) {\n\t                if (conf) {\n\t                    this._conf = conf;\n\t                    conf.delimiter && (this.delimiter = conf.delimiter);\n\t                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t                    conf.wildcard && (this.wildcard = conf.wildcard);\n\t                    conf.newListener && (this.newListener = conf.newListener);\n\t                    if (this.wildcard) {\n\t                        this.listenerTree = {};\n\t                    }\n\t                }\n\t            }\n\t            function EventEmitter(conf) {\n\t                this._events = {};\n\t                this.newListener = false;\n\t                configure.call(this, conf);\n\t            }\n\t            function searchListenerTree(handlers, type, tree, i) {\n\t                if (!tree) {\n\t                    return [];\n\t                }\n\t                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n\t                if (i === typeLength && tree._listeners) {\n\t                    if (typeof tree._listeners === \"function\") {\n\t                        handlers && handlers.push(tree._listeners);\n\t                        return [ tree ];\n\t                    } else {\n\t                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t                            handlers && handlers.push(tree._listeners[leaf]);\n\t                        }\n\t                        return [ tree ];\n\t                    }\n\t                }\n\t                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n\t                    if (currentType === \"*\") {\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    } else if (currentType === \"**\") {\n\t                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n\t                        if (endReached && tree._listeners) {\n\t                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t                        }\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                if (branch === \"*\" || branch === \"**\") {\n\t                                    if (tree[branch]._listeners && !endReached) {\n\t                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t                                    }\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                } else if (branch === nextType) {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n\t                                } else {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                }\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    }\n\t                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n\t                }\n\t                xTree = tree[\"*\"];\n\t                if (xTree) {\n\t                    searchListenerTree(handlers, type, xTree, i + 1);\n\t                }\n\t                xxTree = tree[\"**\"];\n\t                if (xxTree) {\n\t                    if (i < typeLength) {\n\t                        if (xxTree._listeners) {\n\t                            searchListenerTree(handlers, type, xxTree, typeLength);\n\t                        }\n\t                        for (branch in xxTree) {\n\t                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n\t                                if (branch === nextType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n\t                                } else if (branch === currentType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n\t                                } else {\n\t                                    isolatedBranch = {};\n\t                                    isolatedBranch[branch] = xxTree[branch];\n\t                                    searchListenerTree(handlers, type, {\n\t                                        \"**\": isolatedBranch\n\t                                    }, i + 1);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (xxTree._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree, typeLength);\n\t                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n\t                    }\n\t                }\n\t                return listeners;\n\t            }\n\t            function growListenerTree(type, listener) {\n\t                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                for (var i = 0, len = type.length; i + 1 < len; i++) {\n\t                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n\t                        return;\n\t                    }\n\t                }\n\t                var tree = this.listenerTree;\n\t                var name = type.shift();\n\t                while (name) {\n\t                    if (!tree[name]) {\n\t                        tree[name] = {};\n\t                    }\n\t                    tree = tree[name];\n\t                    if (type.length === 0) {\n\t                        if (!tree._listeners) {\n\t                            tree._listeners = listener;\n\t                        } else if (typeof tree._listeners === \"function\") {\n\t                            tree._listeners = [ tree._listeners, listener ];\n\t                        } else if (isArray(tree._listeners)) {\n\t                            tree._listeners.push(listener);\n\t                            if (!tree._listeners.warned) {\n\t                                var m = defaultMaxListeners;\n\t                                if (typeof this._events.maxListeners !== \"undefined\") {\n\t                                    m = this._events.maxListeners;\n\t                                }\n\t                                if (m > 0 && tree._listeners.length > m) {\n\t                                    tree._listeners.warned = true;\n\t                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n\t                                    console.trace();\n\t                                }\n\t                            }\n\t                        }\n\t                        return true;\n\t                    }\n\t                    name = type.shift();\n\t                }\n\t                return true;\n\t            }\n\t            EventEmitter.prototype.delimiter = \".\";\n\t            EventEmitter.prototype.setMaxListeners = function(n) {\n\t                this._events || init.call(this);\n\t                this._events.maxListeners = n;\n\t                if (!this._conf) this._conf = {};\n\t                this._conf.maxListeners = n;\n\t            };\n\t            EventEmitter.prototype.event = \"\";\n\t            EventEmitter.prototype.once = function(event, fn) {\n\t                this.many(event, 1, fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.many = function(event, ttl, fn) {\n\t                var self = this;\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"many only accepts instances of Function\");\n\t                }\n\t                function listener() {\n\t                    if (--ttl === 0) {\n\t                        self.off(event, listener);\n\t                    }\n\t                    fn.apply(this, arguments);\n\t                }\n\t                listener._origin = fn;\n\t                this.on(event, listener);\n\t                return self;\n\t            };\n\t            EventEmitter.prototype.emit = function() {\n\t                this._events || init.call(this);\n\t                var type = arguments[0];\n\t                if (type === \"newListener\" && !this.newListener) {\n\t                    if (!this._events.newListener) {\n\t                        return false;\n\t                    }\n\t                }\n\t                if (this._all) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    for (i = 0, l = this._all.length; i < l; i++) {\n\t                        this.event = type;\n\t                        this._all[i].apply(this, args);\n\t                    }\n\t                }\n\t                if (type === \"error\") {\n\t                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n\t                        if (arguments[1] instanceof Error) {\n\t                            throw arguments[1];\n\t                        } else {\n\t                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t                        }\n\t                        return false;\n\t                    }\n\t                }\n\t                var handler;\n\t                if (this.wildcard) {\n\t                    handler = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t                } else {\n\t                    handler = this._events[type];\n\t                }\n\t                if (typeof handler === \"function\") {\n\t                    this.event = type;\n\t                    if (arguments.length === 1) {\n\t                        handler.call(this);\n\t                    } else if (arguments.length > 1) switch (arguments.length) {\n\t                      case 2:\n\t                        handler.call(this, arguments[1]);\n\t                        break;\n\t\n\t                      case 3:\n\t                        handler.call(this, arguments[1], arguments[2]);\n\t                        break;\n\t\n\t                      default:\n\t                        var l = arguments.length;\n\t                        var args = new Array(l - 1);\n\t                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                        handler.apply(this, args);\n\t                    }\n\t                    return true;\n\t                } else if (handler) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    var listeners = handler.slice();\n\t                    for (var i = 0, l = listeners.length; i < l; i++) {\n\t                        this.event = type;\n\t                        listeners[i].apply(this, args);\n\t                    }\n\t                    return listeners.length > 0 || !!this._all;\n\t                } else {\n\t                    return !!this._all;\n\t                }\n\t            };\n\t            EventEmitter.prototype.on = function(type, listener) {\n\t                if (typeof type === \"function\") {\n\t                    this.onAny(type);\n\t                    return this;\n\t                }\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"on only accepts instances of Function\");\n\t                }\n\t                this._events || init.call(this);\n\t                this.emit(\"newListener\", type, listener);\n\t                if (this.wildcard) {\n\t                    growListenerTree.call(this, type, listener);\n\t                    return this;\n\t                }\n\t                if (!this._events[type]) {\n\t                    this._events[type] = listener;\n\t                } else if (typeof this._events[type] === \"function\") {\n\t                    this._events[type] = [ this._events[type], listener ];\n\t                } else if (isArray(this._events[type])) {\n\t                    this._events[type].push(listener);\n\t                    if (!this._events[type].warned) {\n\t                        var m = defaultMaxListeners;\n\t                        if (typeof this._events.maxListeners !== \"undefined\") {\n\t                            m = this._events.maxListeners;\n\t                        }\n\t                        if (m > 0 && this._events[type].length > m) {\n\t                            this._events[type].warned = true;\n\t                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n\t                            console.trace();\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.onAny = function(fn) {\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"onAny only accepts instances of Function\");\n\t                }\n\t                if (!this._all) {\n\t                    this._all = [];\n\t                }\n\t                this._all.push(fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t            EventEmitter.prototype.off = function(type, listener) {\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"removeListener only takes instances of Function\");\n\t                }\n\t                var handlers, leafs = [];\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    handlers = this._events[type];\n\t                    leafs.push({\n\t                        _listeners: handlers\n\t                    });\n\t                }\n\t                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                    var leaf = leafs[iLeaf];\n\t                    handlers = leaf._listeners;\n\t                    if (isArray(handlers)) {\n\t                        var position = -1;\n\t                        for (var i = 0, length = handlers.length; i < length; i++) {\n\t                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n\t                                position = i;\n\t                                break;\n\t                            }\n\t                        }\n\t                        if (position < 0) {\n\t                            continue;\n\t                        }\n\t                        if (this.wildcard) {\n\t                            leaf._listeners.splice(position, 1);\n\t                        } else {\n\t                            this._events[type].splice(position, 1);\n\t                        }\n\t                        if (handlers.length === 0) {\n\t                            if (this.wildcard) {\n\t                                delete leaf._listeners;\n\t                            } else {\n\t                                delete this._events[type];\n\t                            }\n\t                        }\n\t                        return this;\n\t                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n\t                        if (this.wildcard) {\n\t                            delete leaf._listeners;\n\t                        } else {\n\t                            delete this._events[type];\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.offAny = function(fn) {\n\t                var i = 0, l = 0, fns;\n\t                if (fn && this._all && this._all.length > 0) {\n\t                    fns = this._all;\n\t                    for (i = 0, l = fns.length; i < l; i++) {\n\t                        if (fn === fns[i]) {\n\t                            fns.splice(i, 1);\n\t                            return this;\n\t                        }\n\t                    }\n\t                } else {\n\t                    this._all = [];\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t            EventEmitter.prototype.removeAllListeners = function(type) {\n\t                if (arguments.length === 0) {\n\t                    !this._events || init.call(this);\n\t                    return this;\n\t                }\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                        var leaf = leafs[iLeaf];\n\t                        leaf._listeners = null;\n\t                    }\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    this._events[type] = null;\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.listeners = function(type) {\n\t                if (this.wildcard) {\n\t                    var handlers = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t                    return handlers;\n\t                }\n\t                this._events || init.call(this);\n\t                if (!this._events[type]) this._events[type] = [];\n\t                if (!isArray(this._events[type])) {\n\t                    this._events[type] = [ this._events[type] ];\n\t                }\n\t                return this._events[type];\n\t            };\n\t            EventEmitter.prototype.listenersAny = function() {\n\t                if (this._all) {\n\t                    return this._all;\n\t                } else {\n\t                    return [];\n\t                }\n\t            };\n\t            if (true) {\n\t                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t                    return EventEmitter;\n\t                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t            } else if (typeof exports === \"object\") {\n\t                exports.EventEmitter2 = EventEmitter;\n\t            } else {\n\t                window.EventEmitter2 = EventEmitter;\n\t            }\n\t        }();\n\t    }, function(module, exports) {\n\t        module.exports = {\n\t            Promise: window[\"Promise\"]\n\t        };\n\t    }, function(module, exports) {\n\t        (function() {\n\t            var ResizeSensor = function(element, callback) {\n\t                function EventQueue() {\n\t                    this.q = [];\n\t                    this.add = function(ev) {\n\t                        this.q.push(ev);\n\t                    };\n\t                    var i, j;\n\t                    this.call = function() {\n\t                        for (i = 0, j = this.q.length; i < j; i++) {\n\t                            this.q[i].call();\n\t                        }\n\t                    };\n\t                }\n\t                function getComputedStyle(element, prop) {\n\t                    if (element.currentStyle) {\n\t                        return element.currentStyle[prop];\n\t                    } else if (window.getComputedStyle) {\n\t                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t                    } else {\n\t                        return element.style[prop];\n\t                    }\n\t                }\n\t                function attachResizeEvent(element, resized) {\n\t                    if (!element.resizedAttached) {\n\t                        element.resizedAttached = new EventQueue();\n\t                        element.resizedAttached.add(resized);\n\t                    } else if (element.resizedAttached) {\n\t                        element.resizedAttached.add(resized);\n\t                        return;\n\t                    }\n\t                    element.resizeSensor = document.createElement(\"div\");\n\t                    element.resizeSensor.className = \"resize-sensor\";\n\t                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n\t                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n\t                    element.resizeSensor.style.cssText = style;\n\t                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n\t                    element.appendChild(element.resizeSensor);\n\t                    if (!{\n\t                        fixed: 1,\n\t                        absolute: 1\n\t                    }[getComputedStyle(element, \"position\")]) {\n\t                        element.style.position = \"relative\";\n\t                    }\n\t                    var expand = element.resizeSensor.childNodes[0];\n\t                    var expandChild = expand.childNodes[0];\n\t                    var shrink = element.resizeSensor.childNodes[1];\n\t                    var shrinkChild = shrink.childNodes[0];\n\t                    var lastWidth, lastHeight;\n\t                    var reset = function() {\n\t                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n\t                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n\t                        expand.scrollLeft = expand.scrollWidth;\n\t                        expand.scrollTop = expand.scrollHeight;\n\t                        shrink.scrollLeft = shrink.scrollWidth;\n\t                        shrink.scrollTop = shrink.scrollHeight;\n\t                        lastWidth = element.offsetWidth;\n\t                        lastHeight = element.offsetHeight;\n\t                    };\n\t                    reset();\n\t                    var changed = function() {\n\t                        if (element.resizedAttached) {\n\t                            element.resizedAttached.call();\n\t                        }\n\t                    };\n\t                    var addEvent = function(el, name, cb) {\n\t                        if (el.attachEvent) {\n\t                            el.attachEvent(\"on\" + name, cb);\n\t                        } else {\n\t                            el.addEventListener(name, cb);\n\t                        }\n\t                    };\n\t                    var onScroll = function() {\n\t                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                            changed();\n\t                        }\n\t                        reset();\n\t                    };\n\t                    addEvent(expand, \"scroll\", onScroll);\n\t                    addEvent(shrink, \"scroll\", onScroll);\n\t                }\n\t                var elementType = Object.prototype.toString.call(element);\n\t                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n\t                if (isCollectionTyped) {\n\t                    var i = 0, j = element.length;\n\t                    for (;i < j; i++) {\n\t                        attachResizeEvent(element[i], callback);\n\t                    }\n\t                } else {\n\t                    attachResizeEvent(element, callback);\n\t                }\n\t                this.detach = function() {\n\t                    if (isCollectionTyped) {\n\t                        var i = 0, j = element.length;\n\t                        for (;i < j; i++) {\n\t                            ResizeSensor.detach(element[i]);\n\t                        }\n\t                    } else {\n\t                        ResizeSensor.detach(element);\n\t                    }\n\t                };\n\t            };\n\t            ResizeSensor.detach = function(element) {\n\t                if (element.resizeSensor) {\n\t                    element.removeChild(element.resizeSensor);\n\t                    delete element.resizeSensor;\n\t                    delete element.resizedAttached;\n\t                }\n\t            };\n\t            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n\t                module.exports = ResizeSensor;\n\t            } else {\n\t                window.ResizeSensor = ResizeSensor;\n\t            }\n\t        })();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Widget_1 = __webpack_require__(17);\n\t        var TrendsManager_1 = __webpack_require__(18);\n\t        var Screen_1 = __webpack_require__(19);\n\t        var AxisMarks_1 = __webpack_require__(20);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var deps_1 = __webpack_require__(3);\n\t        var CHART_STATE_EVENTS = {\n\t            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n\t            READY: \"ready\",\n\t            DESTROY: \"destroy\",\n\t            CHANGE: \"change\",\n\t            TREND_CHANGE: \"trendChange\",\n\t            TRENDS_CHANGE: \"trendsChange\",\n\t            ZOOM: \"zoom\",\n\t            RESIZE: \"resize\",\n\t            SCROLL: \"scroll\",\n\t            SCROLL_STOP: \"scrollStop\",\n\t            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n\t        };\n\t        var ChartState = function() {\n\t            function ChartState(initialState, widgetsClasses, plugins) {\n\t                if (widgetsClasses === void 0) {\n\t                    widgetsClasses = {};\n\t                }\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.data = {\n\t                    prevState: {},\n\t                    $el: null,\n\t                    zoom: 0,\n\t                    xAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n\t                            from: 0,\n\t                            to: 0,\n\t                            scroll: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 0,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 0,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 100,\n\t                        autoScroll: true,\n\t                        marks: []\n\t                    },\n\t                    yAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n\t                            from: 0,\n\t                            to: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 5,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 5,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 50,\n\t                        marks: []\n\t                    },\n\t                    animations: {\n\t                        enabled: true,\n\t                        trendChangeSpeed: .5,\n\t                        trendChangeEase: void 0,\n\t                        zoomSpeed: .25,\n\t                        zoomEase: void 0,\n\t                        scrollSpeed: .5,\n\t                        scrollEase: Linear.easeNone,\n\t                        autoScrollSpeed: 1,\n\t                        autoScrollEase: Linear.easeNone\n\t                    },\n\t                    autoRender: {\n\t                        enabled: true,\n\t                        fps: 0\n\t                    },\n\t                    autoResize: true,\n\t                    renderer: \"WebGLRenderer\",\n\t                    autoScroll: true,\n\t                    controls: {\n\t                        enabled: true\n\t                    },\n\t                    trendDefaultState: {\n\t                        enabled: true,\n\t                        type: Trend_1.TREND_TYPE.LINE,\n\t                        data: [],\n\t                        maxSegmentLength: 1e3,\n\t                        lineWidth: 2,\n\t                        lineColor: 16777215,\n\t                        hasBackground: false,\n\t                        backgroundColor: \"rgba(#5273BD, 0.15)\",\n\t                        hasBeacon: false,\n\t                        settingsForTypes: {\n\t                            CANDLE: {\n\t                                minSegmentLengthInPx: 20,\n\t                                maxSegmentLengthInPx: 40\n\t                            },\n\t                            LINE: {\n\t                                minSegmentLengthInPx: 2,\n\t                                maxSegmentLengthInPx: 10\n\t                            }\n\t                        }\n\t                    },\n\t                    cursor: {\n\t                        dragMode: false,\n\t                        x: 0,\n\t                        y: 0\n\t                    },\n\t                    backgroundColor: 0,\n\t                    backgroundOpacity: 1,\n\t                    showStats: false,\n\t                    pluginsState: {},\n\t                    eventEmitterMaxListeners: 20,\n\t                    maxVisibleSegments: 1280\n\t                };\n\t                this.widgetsClasses = {};\n\t                this.plugins = {};\n\t                this.isReady = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n\t                this.widgetsClasses = widgetsClasses;\n\t                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n\t                initialState.trends = this.trendsManager.calculatedOptions;\n\t                initialState = this.installPlugins(plugins, initialState);\n\t                this.setState(initialState);\n\t                this.setState({\n\t                    computedData: this.getComputedData()\n\t                });\n\t                this.savePrevState();\n\t                this.screen = new Screen_1.Screen(this);\n\t                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n\t                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n\t                this.initListeners();\n\t                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\t                this.isReady = true;\n\t                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t            }\n\t            ChartState.prototype.destroy = function() {\n\t                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t                this.ee.removeAllListeners();\n\t                this.data = {};\n\t            };\n\t            ChartState.prototype.onDestroy = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t            };\n\t            ChartState.prototype.onInitialStateApplied = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t            };\n\t            ChartState.prototype.onReady = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t            };\n\t            ChartState.prototype.onChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendsChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onScrollStop = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t            };\n\t            ChartState.prototype.onScroll = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t            };\n\t            ChartState.prototype.onZoom = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t            };\n\t            ChartState.prototype.onResize = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t            };\n\t            ChartState.prototype.onPluginsStateChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t            };\n\t            ChartState.prototype.getTrend = function(trendName) {\n\t                return this.trendsManager.getTrend(trendName);\n\t            };\n\t            ChartState.prototype.setState = function(newState, eventData, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var stateData = this.data;\n\t                var changedProps = {};\n\t                for (var key in newState) {\n\t                    if (stateData[key] !== newState[key]) {\n\t                        changedProps[key] = newState[key];\n\t                    }\n\t                }\n\t                this.savePrevState(changedProps);\n\t                var trendsData = {};\n\t                if (newState.trends) for (var trendName in newState.trends) {\n\t                    var trendOptions = newState.trends[trendName];\n\t                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t                    delete trendOptions.data;\n\t                }\n\t                var newStateContainsData = Object.keys(trendsData).length > 0;\n\t                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n\t                if (newStateContainsData) for (var trendName in trendsData) {\n\t                    this.data.trends[trendName].data = trendsData[trendName];\n\t                }\n\t                if (silent) return;\n\t                var recalculateResult = this.recalculateState(changedProps);\n\t                changedProps = recalculateResult.changedProps;\n\t                this.emitChangedStateEvents(changedProps, eventData);\n\t            };\n\t            ChartState.prototype.recalculateState = function(changedProps) {\n\t                var data = this.data;\n\t                var patch = {};\n\t                var actualData = Utils_1.Utils.deepMerge({}, data);\n\t                if (changedProps.widgets || !data.widgets) {\n\t                    patch.widgets = {};\n\t                    var widgetsOptions = data.widgets || {};\n\t                    for (var widgetName in this.widgetsClasses) {\n\t                        var WidgetClass = this.widgetsClasses[widgetName];\n\t                        var userOptions = widgetsOptions[widgetName] || {};\n\t                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n\t                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n\t                    }\n\t                }\n\t                var cursorOptions = changedProps.cursor;\n\t                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t                if (isMouseDrag) {\n\t                    var oldX = data.prevState.cursor.x;\n\t                    var currentX = cursorOptions.x;\n\t                    var currentScroll = data.xAxis.range.scroll;\n\t                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t                    patch.xAxis = {\n\t                        range: {\n\t                            scroll: currentScroll + deltaXVal\n\t                        }\n\t                    };\n\t                    actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                        xAxis: patch.xAxis\n\t                    });\n\t                }\n\t                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\t                var scrollXChanged = false;\n\t                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateXAxis) {\n\t                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t                    if (xAxisPatch) {\n\t                        scrollXChanged = true;\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateYAxis) {\n\t                    var yAxisPatch = this.recalculateYAxis(actualData);\n\t                    if (yAxisPatch) {\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                this.savePrevState(patch);\n\t                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n\t                patch.computedData = this.getComputedData(allChangedProps);\n\t                this.savePrevState(patch);\n\t                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n\t                return {\n\t                    changedProps: allChangedProps,\n\t                    patch: patch\n\t                };\n\t            };\n\t            ChartState.prototype.getComputedData = function(changedProps) {\n\t                var computeAll = !changedProps;\n\t                var computedData = {};\n\t                if (computeAll || changedProps.trends && this.trendsManager) {\n\t                    computedData.trends = {\n\t                        maxXVal: this.trendsManager.getEndXVal(),\n\t                        minXVal: this.trendsManager.getStartXVal()\n\t                    };\n\t                }\n\t                return computedData;\n\t            };\n\t            ChartState.prototype.savePrevState = function(changedProps) {\n\t                if (!changedProps) changedProps = this.data;\n\t                var prevState = this.data.prevState;\n\t                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n\t            };\n\t            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n\t                var prevState = this.data.prevState;\n\t                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\t                for (var key in changedProps) {\n\t                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n\t                }\n\t                if (!this.isReady) return;\n\t                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n\t                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\t                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n\t                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\t                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n\t                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\t                var resizeEventNeeded = changedProps.width || changedProps.height;\n\t                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\t                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n\t                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t            };\n\t            ChartState.prototype.installPlugins = function(plugins, initialState) {\n\t                var _this = this;\n\t                initialState.pluginsState = {};\n\t                plugins.forEach(function(plugin) {\n\t                    var PluginClass = plugin.constructor;\n\t                    var pluginName = PluginClass.NAME;\n\t                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n\t                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n\t                    });\n\t                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n\t                    _this.plugins[pluginName] = plugin;\n\t                    plugin.setupChartState(_this);\n\t                });\n\t                return initialState;\n\t            };\n\t            ChartState.prototype.getPlugin = function(pluginName) {\n\t                return this.plugins[pluginName];\n\t            };\n\t            ChartState.prototype.initListeners = function() {\n\t                var _this = this;\n\t                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n\t                    _this.handleTrendsChange(changedTrends, newData);\n\t                });\n\t            };\n\t            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n\t                for (var trendName in changedTrends) {\n\t                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t                }\n\t            };\n\t            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n\t                var axisRange = actualData.xAxis.range;\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var isInitialize = axisRange.zeroVal == void 0;\n\t                var zeroVal, scaleFactor;\n\t                var zoom = axisRange.zoom;\n\t                if (axisRange.isMirrorMode) {\n\t                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n\t                }\n\t                if (isInitialize) {\n\t                    zeroVal = axisRange.from;\n\t                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                } else {\n\t                    zeroVal = axisRange.zeroVal;\n\t                    scaleFactor = axisRange.scaleFactor;\n\t                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n\t                        if (changedProps.xAxis.range.zoom) {\n\t                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t                        }\n\t                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                        patch.range.scroll = axisRange.from - zeroVal;\n\t                        patch.range.zoom = currentScaleFactor / scaleFactor;\n\t                        return patch;\n\t                    }\n\t                }\n\t                do {\n\t                    var from = zeroVal + axisRange.scroll;\n\t                    var to = from + actualData.width / (scaleFactor * zoom);\n\t                    var rangeLength = to - from;\n\t                    var needToRecalculateZoom = false;\n\t                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n\t                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n\t                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t                    if (needToRecalculateZoom) {\n\t                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n\t                        var zoom = zoom * fixScale;\n\t                        patch.range.zoom = zoom;\n\t                    }\n\t                } while (needToRecalculateZoom);\n\t                patch.range.from = from;\n\t                patch.range.to = to;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.recalculateYAxis = function(actualData) {\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var yAxisRange = actualData.yAxis.range;\n\t                var isInitialize = yAxisRange.scaleFactor == void 0;\n\t                var trends = this.trendsManager;\n\t                var trendsEndXVal = trends.getEndXVal();\n\t                var trendsStartXVal = trends.getStartXVal();\n\t                var xRange = actualData.xAxis.range;\n\t                var xFrom = xRange.from, xTo = xRange.to;\n\t                var xRangeLength = xTo - xFrom;\n\t                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n\t                if (xTo > trendsEndXVal) {\n\t                    xTo = trendsEndXVal;\n\t                    xFrom = xTo - xRangeLength;\n\t                } else if (xFrom < trendsStartXVal) {\n\t                    xFrom = trendsStartXVal;\n\t                    xTo = xFrom + xRangeLength;\n\t                }\n\t                var maxY = trends.getMaxYVal(xFrom, xTo);\n\t                var minY = trends.getMinYVal(xFrom, xTo);\n\t                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n\t                    if (trendLastY > maxY) maxY = trendLastY;\n\t                    if (trendLastY < minY) minY = trendLastY;\n\t                }\n\t                if (yAxisRange.isMirrorMode) {\n\t                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n\t                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t                }\n\t                var margin = yAxisRange.margin;\n\t                var padding = {\n\t                    start: yAxisRange.padding.start + margin.start,\n\t                    end: yAxisRange.padding.end + margin.end\n\t                };\n\t                if (padding.end + padding.start >= actualData.height) {\n\t                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n\t                }\n\t                var rangeLength = maxY - minY;\n\t                var paddingTopInPercents = padding.end / actualData.height;\n\t                var paddingBottomInPercents = padding.start / actualData.height;\n\t                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t                if (isInitialize) {\n\t                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t                    scaleFactor = actualData.height / (toVal - fromVal);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                    needToZoom = true;\n\t                } else {\n\t                    scaleFactor = yAxisRange.scaleFactor;\n\t                    zeroVal = yAxisRange.zeroVal;\n\t                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n\t                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n\t                }\n\t                if (!needToZoom) return null;\n\t                scroll = fromVal - zeroVal;\n\t                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n\t                var currentAxisRange = this.data.yAxis.range;\n\t                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.zoom = function(zoomValue, origin) {\n\t                var _this = this;\n\t                if (origin === void 0) {\n\t                    origin = .5;\n\t                }\n\t                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n\t                var newZoom = zoom * zoomValue;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                var nextRange = this.data.width / (scaleFactor * newZoom);\n\t                var newScroll = scroll + (currentRange - nextRange) * origin;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            zoom: newZoom,\n\t                            scroll: newScroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.zoomToRange = function(range, origin) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                return this.zoom(currentRange / range, origin);\n\t            };\n\t            ChartState.prototype.scrollToEnd = function() {\n\t                var _this = this;\n\t                var state = this.data;\n\t                var endXVal = this.trendsManager.getEndXVal();\n\t                var range = state.xAxis.range;\n\t                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            scroll: scroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getValueOnXAxis = function(x) {\n\t                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.getValueByScreenX = function(x) {\n\t                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.getValueByScreenY = function(y) {\n\t                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByYAxis(y);\n\t            };\n\t            ChartState.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenYByValue = function(yVal) {\n\t                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            ChartState.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            ChartState.prototype.getScreenLeftVal = function() {\n\t                return this.getValueByScreenX(0);\n\t            };\n\t            ChartState.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.data.width);\n\t            };\n\t            ChartState.prototype.getPaddingRight = function() {\n\t                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n\t            };\n\t            return ChartState;\n\t        }();\n\t        exports.ChartState = ChartState;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendSegmentsManager_1 = __webpack_require__(15);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var deps_1 = __webpack_require__(3);\n\t        var EVENTS = {\n\t            CHANGE: \"Change\",\n\t            PREPEND_REQUEST: \"prependRequest\"\n\t        };\n\t        (function(TREND_TYPE) {\n\t            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n\t            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n\t        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n\t        var TREND_TYPE = exports.TREND_TYPE;\n\t        var Trend = function() {\n\t            function Trend(chartState, trendName, initialState) {\n\t                this.minXVal = Infinity;\n\t                this.minYVal = Infinity;\n\t                this.maxXVal = -Infinity;\n\t                this.maxYVal = -Infinity;\n\t                var options = initialState.trends[trendName];\n\t                this.name = trendName;\n\t                this.chartState = chartState;\n\t                this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.data.trendDefaultState, options);\n\t                this.calculatedOptions.name = trendName;\n\t                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t                this.calculatedOptions.dataset = [];\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvents();\n\t            }\n\t            Trend.prototype.onInitialStateApplied = function() {\n\t                this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\n\t            };\n\t            Trend.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var chartState = this.chartState;\n\t                chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateApplied();\n\t                });\n\t                chartState.onScrollStop(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onZoom(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n\t                });\n\t                chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            Trend.prototype.getCalculatedOptions = function() {\n\t                return this.calculatedOptions;\n\t            };\n\t            Trend.prototype.appendData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData());\n\t                var updatedTrendData = options.data.concat(newData);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.prependData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData(), true);\n\t                var updatedTrendData = newData.concat(options.data);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.changeData = function(allData, newData) {\n\t                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n\t                    var item = newData_1[_i];\n\t                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t                }\n\t                var options = this.getOptions();\n\t                var statePatch = {\n\t                    trends: (_a = {}, _a[options.name] = {\n\t                        data: allData\n\t                    }, _a)\n\t                };\n\t                this.chartState.setState(statePatch, newData);\n\t                var _a;\n\t            };\n\t            Trend.prototype.getData = function(fromX, toX) {\n\t                var data = this.getOptions().data;\n\t                if (fromX == void 0 && toX == void 0) return data;\n\t                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t                toX = toX !== void 0 ? toX : data[data.length].xVal;\n\t                var filteredData = [];\n\t                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n\t                    var item = data_1[_i];\n\t                    if (item.xVal < fromX) continue;\n\t                    if (item.xVal > toX) break;\n\t                    filteredData.push(item);\n\t                }\n\t                return filteredData;\n\t            };\n\t            Trend.prototype.getFirstItem = function() {\n\t                return this.getOptions().data[0];\n\t            };\n\t            Trend.prototype.getLastItem = function() {\n\t                var data = this.getOptions().data;\n\t                return data[data.length - 1];\n\t            };\n\t            Trend.prototype.getOptions = function() {\n\t                return this.chartState.data.trends[this.name];\n\t            };\n\t            Trend.prototype.setOptions = function(options) {\n\t                this.chartState.setState({\n\t                    trends: (_a = {}, _a[this.name] = options, _a)\n\t                });\n\t                var _a;\n\t            };\n\t            Trend.prototype.onPrependRequest = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.CHANGE, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onDataChange = function(cb) {\n\t                var _this = this;\n\t                var onChangeCb = function(changedOptions, newData) {\n\t                    if (newData) cb(newData);\n\t                };\n\t                this.ee.on(EVENTS.CHANGE, onChangeCb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n\t                };\n\t            };\n\t            Trend.prototype.checkForPrependRequest = function() {\n\t                var _this = this;\n\t                if (this.prependRequest) return;\n\t                var chartState = this.chartState;\n\t                var minXVal = chartState.data.computedData.trends.minXVal;\n\t                var minScreenX = chartState.getScreenXByValue(minXVal);\n\t                var needToRequest = minScreenX > 0;\n\t                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var requestedDataLength = to - from;\n\t                if (!needToRequest) return;\n\t                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n\t                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t                });\n\t                this.prependRequest.then(function(newData) {\n\t                    _this.prependData(newData);\n\t                    _this.prependRequest = null;\n\t                }, function() {\n\t                    _this.prependRequest = null;\n\t                });\n\t            };\n\t            Trend.prepareData = function(newData, currentData, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var data = [];\n\t                if (typeof newData[0] == \"number\") {\n\t                    currentData = currentData || [];\n\t                    var initialItem = void 0;\n\t                    var xVal = void 0;\n\t                    if (isPrepend) {\n\t                        initialItem = currentData[0];\n\t                        xVal = initialItem.xVal - newData.length;\n\t                    } else {\n\t                        initialItem = currentData[currentData.length - 1];\n\t                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n\t                    }\n\t                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n\t                        var yVal = _a[_i];\n\t                        data.push({\n\t                            xVal: xVal,\n\t                            yVal: yVal,\n\t                            id: Utils_1.Utils.getUid()\n\t                        });\n\t                        xVal++;\n\t                    }\n\t                } else {\n\t                    data = newData;\n\t                }\n\t                return data;\n\t            };\n\t            return Trend;\n\t        }();\n\t        exports.Trend = Trend;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        function deepmerge(target, src, mergeArrays) {\n\t            if (mergeArrays === void 0) {\n\t                mergeArrays = true;\n\t            }\n\t            var array = Array.isArray(src);\n\t            var dst = array && [] || {};\n\t            if (array) {\n\t                target = target || [];\n\t                if (mergeArrays) {\n\t                    dst = dst.concat(target);\n\t                }\n\t                src.forEach(function(e, i) {\n\t                    if (typeof dst[i] === \"undefined\") {\n\t                        dst[i] = e;\n\t                    } else if (typeof e === \"object\") {\n\t                        dst[i] = deepmerge(target[i], e, mergeArrays);\n\t                    } else {\n\t                        if (target.indexOf(e) === -1) {\n\t                            dst.push(e);\n\t                        }\n\t                    }\n\t                });\n\t            } else {\n\t                if (target && typeof target === \"object\") {\n\t                    Object.keys(target).forEach(function(key) {\n\t                        dst[key] = target[key];\n\t                    });\n\t                }\n\t                Object.keys(src).forEach(function(key) {\n\t                    if (typeof src[key] !== \"object\" || !src[key]) {\n\t                        dst[key] = src[key];\n\t                    } else {\n\t                        if (!target[key]) {\n\t                            dst[key] = src[key];\n\t                        } else {\n\t                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t            return dst;\n\t        }\n\t        var Utils = function() {\n\t            function Utils() {}\n\t            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n\t                return deepmerge(obj1, obj2, mergeArrays);\n\t            };\n\t            Utils.deepCopy = function(obj) {\n\t                return JSON.parse(JSON.stringify(obj));\n\t            };\n\t            Utils.toFixed = function(num, digitsCount) {\n\t                var maxDigits = 15;\n\t                var result = \"\";\n\t                var intVal = Math.floor(num);\n\t                var intStr = intVal.toString();\n\t                var lengthDiff = digitsCount - intStr.length;\n\t                if (lengthDiff > 0) {\n\t                    result = \"0\".repeat(lengthDiff) + intStr;\n\t                } else {\n\t                    result = intStr;\n\t                }\n\t                var afterPointDigitsCount = maxDigits - intStr.length;\n\t                var afterPointStr = num.toString().split(\".\")[1];\n\t                if (afterPointStr) {\n\t                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n\t                }\n\t                return result;\n\t            };\n\t            Utils.bindEvent = function() {};\n\t            Utils.createTexture = function(width, height, fn) {\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = width;\n\t                canvas.height = height;\n\t                var ctx = canvas.getContext(\"2d\");\n\t                fn(ctx);\n\t                var texture = new THREE.Texture(canvas);\n\t                texture.needsUpdate = true;\n\t                return texture;\n\t            };\n\t            Utils.createPixelPerfectTexture = function(width, height, fn) {\n\t                var texture = this.createTexture(width, height, fn);\n\t                texture.minFilter = THREE.NearestFilter;\n\t                return texture;\n\t            };\n\t            Utils.error = function(msg) {\n\t                console.error(\"Chart error: \" + msg);\n\t                throw \"Chart: \" + msg;\n\t            };\n\t            Utils.warn = function(msg) {\n\t                console.warn(\"Chart warning: \" + msg);\n\t            };\n\t            Utils.getUid = function() {\n\t                return this.currentId++;\n\t            };\n\t            Utils.getDistance = function(num1, num2) {\n\t                return Math.max(num1, num2) - Math.min(num1, num2);\n\t            };\n\t            Utils.binarySearchClosestInd = function(arr, num, key) {\n\t                var mid;\n\t                var lo = 0;\n\t                var hi = arr.length - 1;\n\t                while (hi - lo > 1) {\n\t                    mid = Math.floor((lo + hi) / 2);\n\t                    if (arr[mid][key] < num) {\n\t                        lo = mid;\n\t                    } else {\n\t                        hi = mid;\n\t                    }\n\t                }\n\t                if (num - arr[lo][key] <= arr[hi][key] - num) {\n\t                    return lo;\n\t                }\n\t                return hi;\n\t            };\n\t            Utils.binarySearchClosest = function(arr, num, key) {\n\t                var ind = this.binarySearchClosestInd(arr, num, key);\n\t                return arr[ind];\n\t            };\n\t            Utils.rectsIntersect = function(r1, r2) {\n\t                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n\t                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n\t                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n\t                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n\t            };\n\t            Utils.throttle = function(func, ms) {\n\t                var isThrottled = false, savedArgs, savedThis;\n\t                function wrapper() {\n\t                    if (isThrottled) {\n\t                        savedArgs = arguments;\n\t                        savedThis = this;\n\t                        return;\n\t                    }\n\t                    func.apply(this, arguments);\n\t                    isThrottled = true;\n\t                    setTimeout(function() {\n\t                        isThrottled = false;\n\t                        if (savedArgs) {\n\t                            wrapper.apply(savedThis, savedArgs);\n\t                            savedArgs = savedThis = null;\n\t                        }\n\t                    }, ms);\n\t                }\n\t                return wrapper;\n\t            };\n\t            Utils.msToTimeString = function(timestamp) {\n\t                var h = Math.floor(timestamp / 36e4);\n\t                var m = Math.floor(timestamp / 6e4);\n\t                var s = Math.floor(timestamp / 1e3);\n\t                return h + \":\" + m + \":\" + s;\n\t            };\n\t            Utils.getRandomItem = function(arr) {\n\t                var ind = Math.floor(Math.random() * arr.length);\n\t                return arr[ind];\n\t            };\n\t            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n\t                if (excludeProps === void 0) {\n\t                    excludeProps = [];\n\t                }\n\t                for (var key in props) {\n\t                    if (excludeProps.indexOf(key) !== -1) continue;\n\t                    if (srcObject[key] == void 0) continue;\n\t                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n\t                    } else {\n\t                        dstObject[key] = this.deepCopy(srcObject[key]);\n\t                    }\n\t                }\n\t            };\n\t            Utils.currentId = 1;\n\t            return Utils;\n\t        }();\n\t        exports.Utils = Utils;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var Vector3 = THREE.Vector3;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var MAX_ANIMATED_SEGMENTS = 100;\n\t        var EVENTS = {\n\t            REBUILD: \"rebuild\",\n\t            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n\t            ANIMATION_FRAME: \"animationFrame\"\n\t        };\n\t        var TrendSegmentsManager = function() {\n\t            function TrendSegmentsManager(chartState, trend) {\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.animatedSegmentsIds = [];\n\t                this.segmentsLength = 0;\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForPrepend = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.trend = trend;\n\t                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t                this.tryToRebuildSegments();\n\t                this.bindEvents();\n\t            }\n\t            TrendSegmentsManager.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.trend.onChange(function(changedOptions, newData) {\n\t                    return _this.onTrendChangeHandler(changedOptions, newData);\n\t                });\n\t                this.chartState.onZoom(function() {\n\t                    return _this.onZoomHandler();\n\t                });\n\t                this.chartState.onScroll(function() {\n\t                    return _this.recalculateDisplayedRange();\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            TrendSegmentsManager.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.appendAnimation && this.appendAnimation.kill();\n\t                this.prependAnimation && this.prependAnimation.kill();\n\t            };\n\t            TrendSegmentsManager.prototype.onZoomHandler = function() {\n\t                var segmentsRebuilded = this.tryToRebuildSegments();\n\t                if (!segmentsRebuilded) {\n\t                    this.recalculateDisplayedRange();\n\t                }\n\t            };\n\t            TrendSegmentsManager.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n\t                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n\t                if (needToRebuildSegments) {\n\t                    this.tryToRebuildSegments(true);\n\t                    return;\n\t                }\n\t                if (!newData) return;\n\t                var data = this.trend.getData();\n\t                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                isAppend ? this.appendData(newData) : this.prependData(newData);\n\t                this.recalculateDisplayedRange();\n\t            };\n\t            TrendSegmentsManager.prototype.getSegment = function(id) {\n\t                return this.segmentsById[id];\n\t            };\n\t            TrendSegmentsManager.prototype.getEndSegment = function() {\n\t                return this.segmentsById[this.endSegmentId];\n\t            };\n\t            TrendSegmentsManager.prototype.getStartSegment = function() {\n\t                return this.segmentsById[this.startSegmentId];\n\t            };\n\t            TrendSegmentsManager.prototype.tryToRebuildSegments = function(force) {\n\t                if (force === void 0) {\n\t                    force = false;\n\t                }\n\t                var options = this.trend.getOptions();\n\t                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n\t                var trendTypesSettings = options.settingsForTypes;\n\t                var trendTypeSettings = trendTypesSettings[trendTypeName];\n\t                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n\t                var needToRebuild = this.segments.length === 0 || force;\n\t                var segmentLength = this.maxSegmentLength;\n\t                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\t                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t                }\n\t                if (!needToRebuild) return false;\n\t                this.maxSegmentLength = segmentLength;\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.segmentsLength = 0;\n\t                this.stopAllAnimations();\n\t                this.appendData(null, true);\n\t                this.recalculateDisplayedRange(true);\n\t                this.ee.emit(EVENTS.REBUILD);\n\t            };\n\t            TrendSegmentsManager.prototype.stopAllAnimations = function() {\n\t                this.animatedSegmentsIds = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                if (this.prependAnimation) this.prependAnimation.kill();\n\t                if (this.appendAnimation) this.appendAnimation.kill();\n\t            };\n\t            TrendSegmentsManager.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n\t                if (segmentsAreRebuilded === void 0) {\n\t                    segmentsAreRebuilded = false;\n\t                }\n\t                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n\t                var displayedRange = to - from;\n\t                this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, \"startXVal\");\n\t                this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n\t                this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, \"endXVal\");\n\t                this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n\t                if (segmentsAreRebuilded) return;\n\t                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n\t                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t            };\n\t            TrendSegmentsManager.prototype.getSegmentsForXValues = function(values) {\n\t                var valueInd = 0;\n\t                var value = values[valueInd];\n\t                var lastValueInd = values.length - 1;\n\t                var results = [];\n\t                var segment = this.getStartSegment();\n\t                if (!segment.hasValue) return [];\n\t                while (segment) {\n\t                    while (value < segment.startXVal) {\n\t                        results.push(void 0);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    while (value > segment.endXVal) {\n\t                        segment = segment.getNext();\n\t                        if (!segment) break;\n\t                    }\n\t                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n\t                    if (valueInPoint) {\n\t                        results.push(segment);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    if (valueInd > lastValueInd) break;\n\t                }\n\t                return results;\n\t            };\n\t            TrendSegmentsManager.prototype.onAnimationFrame = function(cb) {\n\t                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t            };\n\t            TrendSegmentsManager.prototype.onRebuild = function(cb) {\n\t                return this.ee.subscribe(EVENTS.REBUILD, cb);\n\t            };\n\t            TrendSegmentsManager.prototype.onDisplayedRangeChanged = function(cb) {\n\t                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t            };\n\t            TrendSegmentsManager.prototype.allocateNextSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var prevSegment = this.segmentsById[this.endSegmentId];\n\t                if (prevSegment && prevSegment.hasValue) {\n\t                    prevSegment.nextId = id;\n\t                    segment.prevId = prevSegment.id;\n\t                }\n\t                this.endSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.push(segment);\n\t                return segment;\n\t            };\n\t            TrendSegmentsManager.prototype.allocatePrevSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var nextSegment = this.segmentsById[this.startSegmentId];\n\t                if (nextSegment && nextSegment.hasValue) {\n\t                    nextSegment.prevId = id;\n\t                    segment.nextId = nextSegment.id;\n\t                }\n\t                this.startSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.unshift(segment);\n\t                return segment;\n\t            };\n\t            TrendSegmentsManager.prototype.appendData = function(newData, needRebuildSegments) {\n\t                if (needRebuildSegments === void 0) {\n\t                    needRebuildSegments = false;\n\t                }\n\t                var trendData = this.trend.getData();\n\t                if (needRebuildSegments) {\n\t                    newData = trendData;\n\t                    this.animatedSegmentsForAppend = [];\n\t                }\n\t                var startItemInd = trendData.length - newData.length;\n\t                var segment = this.getEndSegment() || this.allocateNextSegment();\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                var itemInd = 0;\n\t                while (itemInd < newData.length) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.appendItem(item);\n\t                    var isLastItem = itemInd == newData.length - 1;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd++;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForAppend.length > 0) {\n\t                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForAppend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocateNextSegment();\n\t                    var prevItem = trendData[startItemInd + itemInd - 1];\n\t                    segment.appendItem(prevItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (needRebuildSegments) {\n\t                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n\t                        var segmentId = _a[_i];\n\t                        var segment_1 = this.segmentsById[segmentId];\n\t                        segment_1.currentAnimationState = segment_1.createAnimationState();\n\t                    }\n\t                    this.animatedSegmentsForAppend = [];\n\t                    return;\n\t                }\n\t                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time);\n\t            };\n\t            TrendSegmentsManager.prototype.prependData = function(newData) {\n\t                var trendData = this.trend.getData();\n\t                var segment = this.getStartSegment() || this.segmentsById[0];\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var itemInd = newData.length - 1;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                while (itemInd >= 0) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.prependItem(item);\n\t                    var isLastItem = itemInd == 0;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd--;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForPrepend.length > 0) {\n\t                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForPrepend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocatePrevSegment();\n\t                    var nextItem = trendData[itemInd + 1];\n\t                    segment.prependItem(nextItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time, true);\n\t            };\n\t            TrendSegmentsManager.prototype.animate = function(time, isPrepend) {\n\t                var _this = this;\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\t                if (animation && animation.isActive() || time == 0) {\n\t                    if (animation) animation.kill();\n\t                    this.onAnimationFrameHandler(1, isPrepend);\n\t                    animatedSegmentsIds.length = 0;\n\t                    return;\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var ease = animationsOptions.trendChangeEase;\n\t                var objectToAnimate = {\n\t                    animationValue: 0\n\t                };\n\t                animation = TweenLite.to(objectToAnimate, time, {\n\t                    animationValue: 1,\n\t                    ease: ease\n\t                });\n\t                animation.eventCallback(\"onUpdate\", function() {\n\t                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animatedSegmentsIds.length = 0;\n\t                    _this.appendAnimation = null;\n\t                });\n\t                if (isPrepend) {\n\t                    this.prependAnimation = animation;\n\t                } else {\n\t                    this.appendAnimation = animation;\n\t                }\n\t            };\n\t            TrendSegmentsManager.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n\t                    var segmentId = animatedSegmentsIds_1[_i];\n\t                    var segment = this.segmentsById[segmentId];\n\t                    for (var key in segment.targetAnimationState) {\n\t                        var targetValue = segment.targetAnimationState[key];\n\t                        var initialValue = segment.initialAnimationState[key];\n\t                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t                        segment.currentAnimationState[key] = currentValue;\n\t                    }\n\t                }\n\t                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t            };\n\t            return TrendSegmentsManager;\n\t        }();\n\t        exports.TrendSegmentsManager = TrendSegmentsManager;\n\t        var TrendSegment = function() {\n\t            function TrendSegment(trendPoints, id) {\n\t                this.isCompleted = false;\n\t                this.items = [];\n\t                this.initialAnimationState = {};\n\t                this.targetAnimationState = {};\n\t                this.currentAnimationState = {};\n\t                this.trendSegments = trendPoints;\n\t                this.id = id;\n\t                this.maxLength = trendPoints.maxSegmentLength;\n\t            }\n\t            TrendSegment.prototype.createAnimationState = function() {\n\t                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n\t                return {\n\t                    xVal: xVal,\n\t                    yVal: yVal,\n\t                    startXVal: startXVal,\n\t                    startYVal: startYVal,\n\t                    endXVal: endXVal,\n\t                    endYVal: endYVal,\n\t                    maxYVal: maxYVal,\n\t                    minYVal: minYVal,\n\t                    maxLength: maxLength\n\t                };\n\t            };\n\t            TrendSegment.prototype.appendItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.push(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var startXVal = items[0].xVal;\n\t                if (item.xVal - startXVal > this.maxLength) return false;\n\t                items.push(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.prependItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.unshift(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var endXVal = items[items.length - 1].xVal;\n\t                if (endXVal - item.xVal > this.maxLength) return false;\n\t                items.unshift(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.complete = function() {\n\t                this.isCompleted = true;\n\t                this.recalculateItems();\n\t                this.items = [];\n\t            };\n\t            TrendSegment.prototype.recalculateItems = function() {\n\t                var items = this.items;\n\t                var itemsLength = items.length;\n\t                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n\t                var endItem = items[itemsLength - 1];\n\t                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n\t                var startXVal, startYVal;\n\t                var startItem = items[0];\n\t                startXVal = startItem.xVal;\n\t                startYVal = startItem.yVal;\n\t                var minX = Math.min(startXVal, endXVal);\n\t                var maxX = Math.max(startXVal, endXVal);\n\t                var middleXVal = minX + (maxX - minX) / 2;\n\t                var minY = Math.min(startYVal, endYVal);\n\t                var maxY = Math.max(startYVal, endYVal);\n\t                var middleYVal = minY + (maxY - minY) / 2;\n\t                var yVals = items.map(function(item) {\n\t                    return item.yVal;\n\t                });\n\t                this.startXVal = startXVal;\n\t                this.startYVal = startYVal;\n\t                this.endXVal = endXVal;\n\t                this.endYVal = endYVal;\n\t                this.xVal = middleXVal;\n\t                this.yVal = middleYVal;\n\t                this.maxYVal = Math.max.apply(Math, yVals);\n\t                this.minYVal = Math.min.apply(Math, yVals);\n\t                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t            };\n\t            TrendSegment.prototype.getNext = function() {\n\t                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t            };\n\t            TrendSegment.prototype.getPrev = function() {\n\t                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t            };\n\t            TrendSegment.prototype.getFrameVal = function() {\n\t                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n\t                return new Vector3(xVal, yVal, 0);\n\t            };\n\t            TrendSegment.prototype.getFramePoint = function() {\n\t                var frameVal = this.getFrameVal();\n\t                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t            };\n\t            return TrendSegment;\n\t        }();\n\t        exports.TrendSegment = TrendSegment;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        var EventEmitter = function() {\n\t            function EventEmitter() {\n\t                this.ee = new deps_1.EE2();\n\t            }\n\t            EventEmitter.prototype.emit = function(eventName) {\n\t                var args = [];\n\t                for (var _i = 1; _i < arguments.length; _i++) {\n\t                    args[_i - 1] = arguments[_i];\n\t                }\n\t                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n\t                var _a;\n\t            };\n\t            EventEmitter.prototype.on = function(eventName, callback) {\n\t                return this.ee.on(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.off = function(eventName, callback) {\n\t                return this.ee.off(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.subscribe = function(eventName, callback) {\n\t                var _this = this;\n\t                this.on(eventName, callback);\n\t                return function() {\n\t                    return _this.off(eventName, callback);\n\t                };\n\t            };\n\t            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n\t                this.ee.setMaxListeners(listenersCount);\n\t            };\n\t            EventEmitter.prototype.removeAllListeners = function(eventName) {\n\t                this.ee.removeAllListeners(eventName);\n\t            };\n\t            return EventEmitter;\n\t        }();\n\t        exports.EventEmitter = EventEmitter;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        var ChartWidget = function() {\n\t            function ChartWidget(chartState) {\n\t                this.unsubscribers = [];\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            ChartWidget.prototype.bindEvents = function() {};\n\t            ChartWidget.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartWidget.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartWidget.getDefaultOptions = function() {\n\t                return {\n\t                    enabled: true\n\t                };\n\t            };\n\t            ChartWidget.widgetName = \"\";\n\t            return ChartWidget;\n\t        }();\n\t        exports.ChartWidget = ChartWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Trend_1 = __webpack_require__(13);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var EVENTS = {\n\t            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n\t        };\n\t        var TrendsManager = function() {\n\t            function TrendsManager(state, initialState) {\n\t                this.trends = {};\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.chartState = state;\n\t                var trendsCalculatedOptions = {};\n\t                for (var trendName in initialState.trends) {\n\t                    var trend = this.createTrend(state, trendName, initialState);\n\t                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t                }\n\t                this.calculatedOptions = trendsCalculatedOptions;\n\t                this.bindEvents();\n\t            }\n\t            TrendsManager.prototype.getTrend = function(trendName) {\n\t                return this.trends[trendName];\n\t            };\n\t            TrendsManager.prototype.getEnabledTrends = function() {\n\t                var enabledTrends = [];\n\t                var allTrends = this.trends;\n\t                for (var trendName in allTrends) {\n\t                    var trend = allTrends[trendName];\n\t                    trend.getOptions().enabled && enabledTrends.push(trend);\n\t                }\n\t                return enabledTrends;\n\t            };\n\t            TrendsManager.prototype.getStartXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                return trends[0].getData()[0].xVal;\n\t            };\n\t            TrendsManager.prototype.getEndXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                var firstTrendData = trends[0].getData();\n\t                return firstTrendData[firstTrendData.length - 1].xVal;\n\t            };\n\t            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n\t                var trends = this.getEnabledTrends();\n\t                var compareFn;\n\t                var result;\n\t                if (extremumIsMax) {\n\t                    result = -Infinity;\n\t                    compareFn = Math.max;\n\t                } else {\n\t                    result = Infinity;\n\t                    compareFn = Math.min;\n\t                }\n\t                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n\t                    var trend = trends_1[_i];\n\t                    var trendData = trend.getData(fromX, toX);\n\t                    var trendYValues = trendData.map(function(dataItem) {\n\t                        return dataItem.yVal;\n\t                    });\n\t                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n\t                }\n\t                if (result == Infinity || result == -Infinity) result = NaN;\n\t                return result;\n\t            };\n\t            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(true, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(false, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n\t                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t            };\n\t            TrendsManager.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateAppliedHandler();\n\t                });\n\t            };\n\t            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n\t                var _this = this;\n\t                var _loop_1 = function(trendName) {\n\t                    this_1.trends[trendName].segmentsManager.onRebuild(function() {\n\t                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n\t                    });\n\t                };\n\t                var this_1 = this;\n\t                for (var trendName in this.trends) {\n\t                    _loop_1(trendName);\n\t                }\n\t            };\n\t            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n\t                var trend = new Trend_1.Trend(state, trendName, initialState);\n\t                this.trends[trendName] = trend;\n\t                return trend;\n\t            };\n\t            return TrendsManager;\n\t        }();\n\t        exports.TrendsManager = TrendsManager;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var Screen = function() {\n\t            function Screen(chartState) {\n\t                this.options = {\n\t                    scrollXVal: 0,\n\t                    scrollX: 0,\n\t                    scrollYVal: 0,\n\t                    scrollY: 0,\n\t                    zoomX: 1,\n\t                    zoomY: 1\n\t                };\n\t                this.currentScrollX = {\n\t                    x: 0\n\t                };\n\t                this.currentScrollY = {\n\t                    y: 0\n\t                };\n\t                this.currentZoomX = {\n\t                    val: 1\n\t                };\n\t                this.currentZoomY = {\n\t                    val: 1\n\t                };\n\t                this.chartState = chartState;\n\t                var _a = chartState.data, w = _a.width, h = _a.height;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.transform({\n\t                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n\t                    zoomY: 1\n\t                });\n\t                this.bindEvents();\n\t            }\n\t            Screen.prototype.getCameraSettings = function() {\n\t                var _a = this.chartState.data, w = _a.width, h = _a.height;\n\t                var FOV = 75;\n\t                var vFOV = FOV * (Math.PI / 180);\n\t                return {\n\t                    FOV: FOV,\n\t                    aspect: w / h,\n\t                    near: .1,\n\t                    far: 5e3,\n\t                    z: h / (2 * Math.tan(vFOV / 2)),\n\t                    x: w / 2,\n\t                    y: h / 2\n\t                };\n\t            };\n\t            Screen.prototype.onZoomFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"zoomFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onScrollFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"scrollFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onTransformationFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"transformationFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.cameraIsMoving = function() {\n\t                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n\t            };\n\t            Screen.prototype.transform = function(options, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n\t                if (scrollX != void 0) this.options.scrollX = scrollX;\n\t                if (scrollY != void 0) this.options.scrollY = scrollY;\n\t                if (zoomX != void 0) this.options.zoomX = zoomX;\n\t                if (zoomY != void 0) this.options.zoomY = zoomY;\n\t                if (scrollX != void 0 || zoomX) {\n\t                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t                    this.options.scrollXVal = options.scrollXVal;\n\t                }\n\t                if (scrollY != void 0 || zoomY) {\n\t                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t                    this.options.scrollYVal = options.scrollYVal;\n\t                }\n\t                if (silent) return;\n\t                this.ee.emit(\"transformationFrame\", options);\n\t                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t                    this.ee.emit(\"scrollFrame\", options);\n\t                }\n\t                if (options.zoomX != void 0 || options.zoomY != void 0) {\n\t                    this.ee.emit(\"zoomFrame\", options);\n\t                }\n\t            };\n\t            Screen.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onChange(function(changedProps) {\n\t                    if (changedProps.xAxis && changedProps.xAxis.range) {\n\t                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n\t                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n\t                    }\n\t                    if (changedProps.yAxis && changedProps.yAxis.range) {\n\t                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n\t                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n\t                    }\n\t                });\n\t                state.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            Screen.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.scrollXAnimation && this.scrollXAnimation.kill();\n\t                this.scrollYAnimation && this.scrollYAnimation.kill();\n\t                this.zoomXAnimation && this.zoomXAnimation.kill();\n\t                this.zoomYAnimation && this.zoomYAnimation.kill();\n\t            };\n\t            Screen.prototype.onScrollXHandler = function(changedProps) {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var isDragMode = state.data.cursor.dragMode;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled && !isDragMode;\n\t                var zoomXChanged = changedProps.xAxis.range.zoom;\n\t                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n\t                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n\t                var range = state.data.xAxis.range;\n\t                var targetX = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollX.x = this.options.scrollX;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollX: _this.currentScrollX.x\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t                        x: targetX,\n\t                        ease: ease\n\t                    });\n\t                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollX.x = targetX;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onScrollYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t                var range = state.data.yAxis.range;\n\t                var targetY = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollY.y = this.options.scrollY;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollY: _this.currentScrollY.y\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t                        y: targetY,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollY.y = targetY;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomXHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.xAxis.range.zoom;\n\t                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomX: _this.currentZoomX.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomX.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.yAxis.range.zoom;\n\t                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomY: _this.currentZoomY.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomY.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomX;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomY;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            Screen.prototype.getValueOnXAxis = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n\t            };\n\t            Screen.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n\t            };\n\t            Screen.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n\t            };\n\t            Screen.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n\t            };\n\t            Screen.prototype.getValueByScreenX = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.getValueByScreenY = function(y) {\n\t                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t            };\n\t            Screen.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            Screen.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            Screen.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            Screen.prototype.getPointByScreenY = function(screenY) {\n\t                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t            };\n\t            Screen.prototype.getTop = function() {\n\t                return this.getPointByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottom = function() {\n\t                return this.getPointByScreenY(0);\n\t            };\n\t            Screen.prototype.getLeft = function() {\n\t                return this.getPointByScreenX(0);\n\t            };\n\t            Screen.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.chartState.data.width);\n\t            };\n\t            Screen.prototype.getTopVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottomVal = function() {\n\t                return this.getValueByScreenY(0);\n\t            };\n\t            Screen.prototype.getCenterYVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height / 2);\n\t            };\n\t            return Screen;\n\t        }();\n\t        exports.Screen = Screen;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var AXIS_MARK_DEFAULT_OPTIONS = {\n\t            type: \"simple\",\n\t            lineWidth: 1,\n\t            value: 0,\n\t            showValue: false,\n\t            stickToEdges: false,\n\t            lineColor: \"#FFFFFF\",\n\t            title: \"\"\n\t        };\n\t        var AxisMarks = function() {\n\t            function AxisMarks(chartState, axisType) {\n\t                this.items = {};\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.axisType = axisType;\n\t                var marks = this.items;\n\t                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n\t                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n\t                    var options = axisMarksOptions_1[_i];\n\t                    var axisMark = void 0;\n\t                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n\t                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n\t                    if (options.type == \"timeleft\") {\n\t                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t                    } else {\n\t                        axisMark = new AxisMark(chartState, axisType, options);\n\t                    }\n\t                    marks[options.name] = axisMark;\n\t                }\n\t                this.bindEvents();\n\t            }\n\t            AxisMarks.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, newData);\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n\t                if (!newData) return;\n\t                var startVal = newData[0].xVal;\n\t                var endVal = newData[newData.length - 1].xVal;\n\t                var marks = this.items;\n\t                for (var markName in marks) {\n\t                    var mark = marks[markName];\n\t                    var markVal = mark.options.value;\n\t                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n\t                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n\t                }\n\t            };\n\t            AxisMarks.prototype.getItems = function() {\n\t                return this.items;\n\t            };\n\t            AxisMarks.prototype.getItem = function(markName) {\n\t                return this.items[markName];\n\t            };\n\t            return AxisMarks;\n\t        }();\n\t        exports.AxisMarks = AxisMarks;\n\t        var AxisMark = function() {\n\t            function AxisMark(chartState, axisType, options) {\n\t                this.renderOnTrendsChange = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.options = options;\n\t                this.axisType = axisType;\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            AxisMark.prototype.bindEvents = function() {};\n\t            AxisMark.prototype.setOptions = function(newOptions) {\n\t                var value = this.options.value;\n\t                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n\t                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisMark.prototype.getDisplayedVal = function() {\n\t                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n\t                return String(displayedValue !== void 0 ? displayedValue : value);\n\t            };\n\t            AxisMark.prototype.onMarkCrossed = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"markCrossed\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"markCrossed\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"valueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"valueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"onDisplayedValueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"onDisplayedValueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.typeName = \"simple\";\n\t            return AxisMark;\n\t        }();\n\t        exports.AxisMark = AxisMark;\n\t        var AxisTimeleftMark = function(_super) {\n\t            __extends(AxisTimeleftMark, _super);\n\t            function AxisTimeleftMark() {\n\t                _super.apply(this, arguments);\n\t                this.renderOnTrendsChange = true;\n\t            }\n\t            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n\t                var markVal = this.options.value;\n\t                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n\t                var time = markVal - maxXVal;\n\t                if (time < 0) time = 0;\n\t                return Utils_1.Utils.msToTimeString(time);\n\t            };\n\t            AxisTimeleftMark.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t            };\n\t            AxisTimeleftMark.prototype.onTrendsChange = function() {\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisTimeleftMark.typeName = \"timeleft\";\n\t            return AxisTimeleftMark;\n\t        }(AxisMark);\n\t        exports.AxisTimeleftMark = AxisTimeleftMark;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        (function(AXIS_RANGE_TYPE) {\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n\t        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n\t        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n\t        (function(AXIS_TYPE) {\n\t            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n\t            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n\t        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n\t        var AXIS_TYPE = exports.AXIS_TYPE;\n\t        (function(AXIS_DATA_TYPE) {\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n\t        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n\t        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Mesh = THREE.Mesh;\n\t        var Object3D = THREE.Object3D;\n\t        var Widget_1 = __webpack_require__(17);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var AxisWidget = function(_super) {\n\t            __extends(AxisWidget, _super);\n\t            function AxisWidget(state) {\n\t                var _this = this;\n\t                _super.call(this, state);\n\t                this.isDestroyed = false;\n\t                this.object3D = new Object3D();\n\t                this.axisXObject = new Object3D();\n\t                this.axisYObject = new Object3D();\n\t                this.object3D.add(this.axisXObject);\n\t                this.object3D.add(this.axisYObject);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }, 1e3);\n\t                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n\t            }\n\t            AxisWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n\t                    _this.onScrollChange(options.scrollX, options.scrollY);\n\t                }), state.screen.onZoomFrame(function(options) {\n\t                    _this.onZoomFrame(options);\n\t                }), state.onDestroy(function() {\n\t                    return _this.onDestroy();\n\t                }), state.onResize(function() {\n\t                    return _this.onResize();\n\t                }));\n\t            };\n\t            AxisWidget.prototype.onDestroy = function() {\n\t                this.isDestroyed = true;\n\t                this.unbindEvents();\n\t            };\n\t            AxisWidget.prototype.onScrollChange = function(x, y) {\n\t                if (y != void 0) {\n\t                    this.axisYObject.position.y = y;\n\t                    this.axisXObject.position.y = y;\n\t                }\n\t                if (x != void 0) {\n\t                    this.axisYObject.position.x = x;\n\t                    this.updateAxisXRequest();\n\t                }\n\t            };\n\t            AxisWidget.prototype.onResize = function() {\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t            };\n\t            AxisWidget.prototype.setupAxis = function(orientation) {\n\t                var _this = this;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var canvasWidth = 0, canvasHeight = 0;\n\t                if (isXAxis) {\n\t                    this.axisXObject.traverse(function(obj) {\n\t                        return _this.axisXObject.remove(obj);\n\t                    });\n\t                    canvasWidth = visibleWidth * 3;\n\t                    canvasHeight = 50;\n\t                } else {\n\t                    this.axisYObject.traverse(function(obj) {\n\t                        return _this.axisYObject.remove(obj);\n\t                    });\n\t                    canvasWidth = 50;\n\t                    canvasHeight = visibleHeight * 3;\n\t                }\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n\t                if (isXAxis) {\n\t                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisXObject.add(axisMesh);\n\t                } else {\n\t                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisYObject.add(axisMesh);\n\t                }\n\t                this.updateAxis(orientation);\n\t            };\n\t            AxisWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisWidget.prototype.updateAxis = function(orientation) {\n\t                if (this.isDestroyed) return;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n\t                var axisOptions;\n\t                var axisMesh;\n\t                var axisGridParams;\n\t                if (isXAxis) {\n\t                    axisMesh = this.axisXObject.children[0];\n\t                    axisOptions = this.chartState.data.xAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t                } else {\n\t                    axisMesh = this.axisYObject.children[0];\n\t                    axisOptions = this.chartState.data.yAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t                }\n\t                var geometry = axisMesh.geometry;\n\t                var canvasWidth = geometry.parameters.width;\n\t                var canvasHeight = geometry.parameters.height;\n\t                var texture = axisMesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t                if (isXAxis) {\n\t                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t                }\n\t                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t                var startVal = axisGridParams.start - edgeOffset;\n\t                var endVal = axisGridParams.end + edgeOffset;\n\t                ctx.beginPath();\n\t                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n\t                    var displayedValue = \"\";\n\t                    if (isXAxis) {\n\t                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t                        ctx.textAlign = \"center\";\n\t                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n\t                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t                        } else {\n\t                            displayedValue = Number(val.toFixed(14)).toString();\n\t                        }\n\t                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t                    } else {\n\t                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n\t                        ctx.textAlign = \"right\";\n\t                        displayedValue = Number(val.toFixed(14)).toString();\n\t                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n\t                    }\n\t                    ctx.stroke();\n\t                }\n\t                ctx.stroke();\n\t                ctx.closePath();\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisWidget.prototype.onZoomFrame = function(options) {\n\t                if (options.zoomX) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }\n\t                if (options.zoomY) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n\t                }\n\t            };\n\t            AxisWidget.getDateStr = function(timestamp, gridParams) {\n\t                var sec = 1e3;\n\t                var min = sec * 60;\n\t                var hour = min * 60;\n\t                var day = hour * 60;\n\t                var step = gridParams.step;\n\t                var d = new Date(timestamp);\n\t                var tf = function(num) {\n\t                    return Utils_1.Utils.toFixed(num, 2);\n\t                };\n\t                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n\t            };\n\t            AxisWidget.widgetName = \"Axis\";\n\t            return AxisWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisWidget = AxisWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Vector3 = THREE.Vector3;\n\t        var Widget_1 = __webpack_require__(17);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var GridWidget = function(_super) {\n\t            __extends(GridWidget, _super);\n\t            function GridWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.isDestroyed = false;\n\t                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n\t                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n\t                this.initGrid();\n\t                this.updateGrid();\n\t            }\n\t            GridWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateGrid();\n\t                }, 1e3);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return updateGridThrottled();\n\t                }), this.chartState.screen.onZoomFrame(function(options) {\n\t                    updateGridThrottled();\n\t                    _this.onZoomFrame(options);\n\t                }), this.chartState.onDestroy(function() {\n\t                    _this.isDestroyed = true;\n\t                    _this.unbindEvents();\n\t                }), this.chartState.onResize(function() {\n\t                    _this.updateGrid();\n\t                }));\n\t            };\n\t            GridWidget.prototype.initGrid = function() {\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: .1,\n\t                    transparent: true\n\t                });\n\t                var xLinesCount = this.gridSizeH;\n\t                var yLinesCount = this.gridSizeV;\n\t                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t                this.lineSegments.position.setZ(-1);\n\t                this.lineSegments.frustumCulled = false;\n\t            };\n\t            GridWidget.prototype.updateGrid = function() {\n\t                if (this.isDestroyed) return;\n\t                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n\t                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t                var startXVal = axisXGrid.start + gridScrollXVal;\n\t                var startYVal = axisYGrid.start + gridScrollYVal;\n\t                var geometry = this.lineSegments.geometry;\n\t                var vertices = geometry.vertices;\n\t                var lineInd = 0;\n\t                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n\t                    var value = startXVal + i * axisXGrid.step;\n\t                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n\t                    var value = startYVal + i * axisYGrid.step;\n\t                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n\t            };\n\t            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n\t                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n\t                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n\t                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n\t                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.onZoomFrame = function(options) {\n\t                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t            };\n\t            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n\t                var axisRange = axisOptions.range;\n\t                var from = axisRange.from;\n\t                var to = axisRange.to;\n\t                var axisLength = to - from;\n\t                var gridStep = 0;\n\t                var gridStepInPixels = 0;\n\t                var minGridStepInPixels = axisOptions.gridMinSize;\n\t                var axisLengthStr = String(axisLength);\n\t                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n\t                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\t                var gridStepFound = false;\n\t                var digitPos = 0;\n\t                while (!gridStepFound) {\n\t                    var power = intPartLength - digitPos - 1;\n\t                    var multiplier = Math.pow(10, power) || 1;\n\t                    var dividers = [ 1, 2, 5 ];\n\t                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t                        var nextGridStep = multiplier / dividers[dividerInd];\n\t                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t                        if (nextGridStepInPixels >= minGridStepInPixels) {\n\t                            gridStep = nextGridStep;\n\t                            gridStepInPixels = nextGridStepInPixels;\n\t                        } else {\n\t                            gridStepFound = true;\n\t                            if (gridStep === 0) {\n\t                                gridStep = nextGridStep;\n\t                                gridStepInPixels = nextGridStepInPixels;\n\t                            }\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!gridStepFound) digitPos++;\n\t                }\n\t                var gridStart = Math.floor(from / gridStep) * gridStep;\n\t                var gridEnd = Math.floor(to / gridStep) * gridStep;\n\t                return {\n\t                    start: gridStart,\n\t                    end: gridEnd,\n\t                    step: gridStep,\n\t                    stepInPx: gridStepInPixels,\n\t                    length: gridEnd - gridStart,\n\t                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t                };\n\t            };\n\t            GridWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            GridWidget.widgetName = \"Grid\";\n\t            return GridWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.GridWidget = GridWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Geometry = THREE.Geometry;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Color_1 = __webpack_require__(26);\n\t        var TrendsGradientWidget = function(_super) {\n\t            __extends(TrendsGradientWidget, _super);\n\t            function TrendsGradientWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsGradientWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendGradient;\n\t            };\n\t            TrendsGradientWidget.widgetName = \"TrendsGradient\";\n\t            return TrendsGradientWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsGradientWidget = TrendsGradientWidget;\n\t        var TrendGradient = function(_super) {\n\t            __extends(TrendGradient, _super);\n\t            function TrendGradient(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.visibleSegmentsCnt = 0;\n\t                this.trend = chartState.trendsManager.getTrend(trendName);\n\t                this.segmentsIds = new Uint16Array(chartState.data.maxVisibleSegments);\n\t                this.initGradient();\n\t                this.updateSegments();\n\t            }\n\t            TrendGradient.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasBackground;\n\t            };\n\t            TrendGradient.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n\t                    _this.updateSegments();\n\t                }));\n\t                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n\t                    _this.updateSegments();\n\t                }));\n\t                this.bindEvent(this.chartState.onZoom(function() {\n\t                    _this.updateSegments();\n\t                }));\n\t            };\n\t            TrendGradient.prototype.getObject3D = function() {\n\t                return this.gradient;\n\t            };\n\t            TrendGradient.prototype.initGradient = function() {\n\t                var geometry = new Geometry();\n\t                for (var i = 0; i < this.segmentsIds.length; i++) {\n\t                    geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\n\t                    var ind = i * 4;\n\t                    geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\n\t                }\n\t                var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\n\t                this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n\t                    color: color.value,\n\t                    transparent: true,\n\t                    opacity: color.a\n\t                }));\n\t                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.gradient.frustumCulled = false;\n\t            };\n\t            TrendGradient.prototype.onZoomFrame = function(options) {\n\t                var state = this.chartState.data;\n\t                var scaleXFactor = state.xAxis.range.scaleFactor;\n\t                var scaleYFactor = state.yAxis.range.scaleFactor;\n\t                var currentScale = this.gradient.scale;\n\t                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t            };\n\t            TrendGradient.prototype.onSegmentsAnimate = function(trendSegmentsManager) {\n\t                var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n\t                for (var i = 0; i < this.visibleSegmentsCnt; i++) {\n\t                    var segmentId = this.segmentsIds[i];\n\t                    if (!animatedSegmentsIds.includes(segmentId)) continue;\n\t                    this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n\t                }\n\t                this.gradient.geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendGradient.prototype.updateSegments = function() {\n\t                var geometry = this.gradient.geometry;\n\t                var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\n\t                var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n\t                this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n\t                var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n\t                if (segmentsToProcessCnt > this.segmentsIds.length) {\n\t                    Utils_1.Utils.error(TrendsGradientWidget.widgetName + \": MAX_SEGMENTS reached\");\n\t                }\n\t                for (var i = 0; i <= segmentsToProcessCnt; i++) {\n\t                    if (segmentInd <= lastDisplayedSegmentInd) {\n\t                        var segment = trendSegments[segmentInd];\n\t                        this.setupSegmentVertices(i, segment.currentAnimationState);\n\t                        this.segmentsIds[i] = segment.id;\n\t                        segmentInd++;\n\t                    } else {\n\t                        this.setupSegmentVertices(i);\n\t                    }\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendGradient.prototype.setupSegmentVertices = function(segmentInd, segmentState) {\n\t                var gradientSegmentInd = segmentInd * 4;\n\t                var vertices = this.gradient.geometry.vertices;\n\t                var topLeft = vertices[gradientSegmentInd];\n\t                var bottomLeft = vertices[gradientSegmentInd + 1];\n\t                var bottomRight = vertices[gradientSegmentInd + 2];\n\t                var topRight = vertices[gradientSegmentInd + 3];\n\t                var screenHeightVal = Math.max(this.chartState.pxToValueByYAxis(this.chartState.data.height), this.chartState.screen.pxToValueByYAxis(this.chartState.data.height));\n\t                if (segmentState) {\n\t                    var startX = this.toLocalX(segmentState.startXVal);\n\t                    var startY = this.toLocalY(segmentState.startYVal);\n\t                    var endX = this.toLocalX(segmentState.endXVal);\n\t                    var endY = this.toLocalY(segmentState.endYVal);\n\t                    topLeft.set(startX, startY, 0);\n\t                    topRight.set(endX, endY, 0);\n\t                    bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n\t                    bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n\t                } else {\n\t                    topLeft.set(0, 0, 0);\n\t                    topRight.set(0, 0, 0);\n\t                    bottomLeft.set(0, 0, 0);\n\t                    bottomRight.set(0, 0, 0);\n\t                }\n\t            };\n\t            TrendGradient.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendGradient.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            return TrendGradient;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendGradient = TrendGradient;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(17);\n\t        var Object3D = THREE.Object3D;\n\t        var TrendsWidget = function(_super) {\n\t            __extends(TrendsWidget, _super);\n\t            function TrendsWidget(state) {\n\t                _super.call(this, state);\n\t                this.widgets = {};\n\t                this.object3D = new Object3D();\n\t                this.onTrendsChange();\n\t            }\n\t            TrendsWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t                state.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, changedOptions, newData);\n\t                });\n\t            };\n\t            TrendsWidget.prototype.onTrendsChange = function() {\n\t                var trendsOptions = this.chartState.data.trends;\n\t                var TrendWidgetClass = this.getTrendWidgetClass();\n\t                for (var trendName in trendsOptions) {\n\t                    var trendOptions = trendsOptions[trendName];\n\t                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n\t                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t                        this.createTrendWidget(trendName);\n\t                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n\t                        this.destroyTrendWidget(trendName);\n\t                    }\n\t                }\n\t            };\n\t            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n\t                var widget = this.widgets[trendName];\n\t                if (!widget) return;\n\t                widget.onTrendChange(changedOptions);\n\t                if (newData) {\n\t                    var data = this.chartState.getTrend(trendName).getData();\n\t                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t                }\n\t            };\n\t            TrendsWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n\t                var WidgetConstructor = this.getTrendWidgetClass();\n\t                var widget = new WidgetConstructor(this.chartState, trendName);\n\t                this.widgets[trendName] = widget;\n\t                var widgetObject = widget.getObject3D();\n\t                widgetObject.name = trendName;\n\t                this.object3D.add(widget.getObject3D());\n\t            };\n\t            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n\t                this.widgets[trendName].onDestroy();\n\t                delete this.widgets[trendName];\n\t                var widgetObject = this.object3D.getObjectByName(trendName);\n\t                this.object3D.remove(widgetObject);\n\t            };\n\t            return TrendsWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.TrendsWidget = TrendsWidget;\n\t        var TrendWidget = function() {\n\t            function TrendWidget(chartState, trendName) {\n\t                this.chartState = chartState;\n\t                this.trendName = trendName;\n\t                this.unsubscribers = [];\n\t                this.trend = chartState.trendsManager.getTrend(trendName);\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled;\n\t            };\n\t            TrendWidget.prototype.appendData = function(newData) {};\n\t            TrendWidget.prototype.prependData = function(newData) {};\n\t            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n\t            TrendWidget.prototype.onDestroy = function() {\n\t                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n\t                    var unsubscriber = _a[_i];\n\t                    unsubscriber();\n\t                }\n\t            };\n\t            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n\t            TrendWidget.prototype.onZoomFrame = function(options) {};\n\t            TrendWidget.prototype.onTransformationFrame = function(options) {};\n\t            TrendWidget.prototype.onZoom = function() {};\n\t            TrendWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function(trendPoints) {\n\t                    return _this.onSegmentsAnimate(trendPoints);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n\t                    return _this.onTransformationFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n\t                    return _this.onZoomFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.onZoom(function() {\n\t                    return _this.onZoom();\n\t                }));\n\t            };\n\t            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n\t                this.unsubscribers.push(unsubscriber);\n\t            };\n\t            return TrendWidget;\n\t        }();\n\t        exports.TrendWidget = TrendWidget;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        var ChartColor = function() {\n\t            function ChartColor(color) {\n\t                this.set(color);\n\t            }\n\t            /**!\r\n\t\t     * @preserve $.parseColor\r\n\t\t     * Copyright 2011 THEtheChad Elliott\r\n\t\t     * Released under the MIT and GPL licenses.\r\n\t\t     */\n\t            ChartColor.parseColor = function(color) {\n\t                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n\t                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4] ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by parseColor\");\n\t                isNaN(cache[3]) && (cache[3] = 1);\n\t                return cache;\n\t            };\n\t            ChartColor.prototype.set = function(color) {\n\t                if (typeof color == \"number\") color = \"#\" + color.toString(16);\n\t                var colorStr = color;\n\t                var rgba = ChartColor.parseColor(colorStr);\n\t                this.r = rgba[0];\n\t                this.g = rgba[1];\n\t                this.b = rgba[2];\n\t                this.a = rgba[3];\n\t                this.value = (rgba[0] << 8 * 2) + (rgba[1] << 8) + rgba[2];\n\t                this.hexStr = \"#\" + this.value.toString(16);\n\t                this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\n\t            };\n\t            return ChartColor;\n\t        }();\n\t        exports.ChartColor = ChartColor;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(13);\n\t        var TrendsLoadingWidget = function(_super) {\n\t            __extends(TrendsLoadingWidget, _super);\n\t            function TrendsLoadingWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLoading;\n\t            };\n\t            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n\t            return TrendsLoadingWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n\t        var TrendLoading = function(_super) {\n\t            __extends(TrendLoading, _super);\n\t            function TrendLoading(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.isActive = false;\n\t                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendLoading.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                this.deactivate();\n\t            }\n\t            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled && chartState.data.animations.enabled;\n\t            };\n\t            TrendLoading.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendLoading.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.onPrependRequest(function() {\n\t                    return _this.activate();\n\t                }));\n\t            };\n\t            TrendLoading.prototype.prependData = function() {\n\t                this.deactivate();\n\t            };\n\t            TrendLoading.prototype.activate = function() {\n\t                var mesh = this.mesh;\n\t                mesh.material.opacity = 1;\n\t                mesh.rotation.z = 0;\n\t                var animation = TweenLite.to(this.mesh.rotation, .5, {\n\t                    z: Math.PI * 2\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animation.restart();\n\t                });\n\t                this.animation = animation;\n\t                this.isActive = true;\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.deactivate = function() {\n\t                this.animation && this.animation.kill();\n\t                this.mesh.material.opacity = 0;\n\t                this.isActive = false;\n\t            };\n\t            TrendLoading.createTexture = function() {\n\t                var h = 64, w = 64;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                    ctx.lineWidth = 5;\n\t                    var center = h / 2;\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n\t                    ctx.stroke();\n\t                });\n\t            };\n\t            TrendLoading.prototype.onZoomFrame = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.updatePosition = function() {\n\t                if (!this.isActive) return;\n\t                var trend = this.trend;\n\t                var segment = trend.segmentsManager.getStartSegment();\n\t                var x, y;\n\t                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    x = segment.currentAnimationState.startXVal;\n\t                    y = segment.currentAnimationState.startYVal;\n\t                } else {\n\t                    x = segment.currentAnimationState.xVal - segment.maxLength;\n\t                    y = segment.currentAnimationState.yVal;\n\t                }\n\t                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n\t                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n\t            };\n\t            return TrendLoading;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLoading = TrendLoading;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(17);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Line = THREE.Line;\n\t        var Mesh = THREE.Mesh;\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var Color_1 = __webpack_require__(26);\n\t        var AxisMarksWidget = function(_super) {\n\t            __extends(AxisMarksWidget, _super);\n\t            function AxisMarksWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.axisMarksWidgets = [];\n\t                this.object3D = new Object3D();\n\t                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n\t                var items = xAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t                items = yAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t            }\n\t            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n\t                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n\t                this.axisMarksWidgets.push(axisMarkWidget);\n\t                this.object3D.add(axisMarkWidget.getObject3D());\n\t            };\n\t            AxisMarksWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n\t                    return _this.updateMarksPositions();\n\t                }), this.chartState.onResize(function() {\n\t                    return _this.updateMarksPositions();\n\t                }));\n\t            };\n\t            AxisMarksWidget.prototype.updateMarksPositions = function() {\n\t                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n\t                    var widget = _a[_i];\n\t                    widget.updatePosition();\n\t                }\n\t            };\n\t            AxisMarksWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarksWidget.widgetName = \"AxisMarks\";\n\t            return AxisMarksWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisMarksWidget = AxisMarksWidget;\n\t        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n\t            var axisMark = axisMarkWidget.axisMark;\n\t            ctx.fillStyle = axisMark.options.lineColor;\n\t            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\t            var xCoord = 15;\n\t            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n\t                ctx.textAlign = \"end\";\n\t                xCoord = axisMarkWidget.indicatorWidth;\n\t            }\n\t            ctx.fillText(axisMark.options.title, xCoord, 20);\n\t            if (!axisMark.options.showValue) return;\n\t            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n\t            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n\t        };\n\t        var INDICATOR_POS_Z = .1;\n\t        var AxisMarkWidget = function() {\n\t            function AxisMarkWidget(chartState, axisMark) {\n\t                this.indicatorWidth = 128;\n\t                this.indicatorHeight = 64;\n\t                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\t                this.chartState = chartState;\n\t                this.axisMark = axisMark;\n\t                this.axisType = axisMark.axisType;\n\t                this.frameValue = axisMark.options.value;\n\t                this.object3D = new Object3D();\n\t                this.object3D.position.setZ(-.1);\n\t                this.line = this.createLine();\n\t                this.object3D.add(this.line);\n\t                this.indicator = this.createIndicator();\n\t                this.object3D.add(this.indicator);\n\t                this.renderIndicator();\n\t                this.updatePosition();\n\t                this.bindEvents();\n\t            }\n\t            AxisMarkWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarkWidget.prototype.createLine = function() {\n\t                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n\t                var lineGeometry = new Geometry();\n\t                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n\t                return new Line(lineGeometry, new LineBasicMaterial({\n\t                    color: new Color_1.ChartColor(lineColor).value,\n\t                    linewidth: lineWidth\n\t                }));\n\t            };\n\t            AxisMarkWidget.prototype.createIndicator = function() {\n\t                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n\t            };\n\t            AxisMarkWidget.prototype.renderIndicator = function() {\n\t                var texture = this.indicator.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisMarkWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.axisMark.onDisplayedValueChange(function() {\n\t                    return _this.renderIndicator();\n\t                });\n\t                this.axisMark.onValueChange(function() {\n\t                    return _this.onValueChangeHandler();\n\t                });\n\t            };\n\t            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n\t                var _this = this;\n\t                if (this.moveAnimation) this.moveAnimation.kill();\n\t                var animations = this.chartState.data.animations;\n\t                var targetValue = this.axisMark.options.value;\n\t                var cb = function() {\n\t                    _this.updatePosition();\n\t                };\n\t                if (animations.enabled) {\n\t                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n\t                        frameValue: targetValue,\n\t                        ease: animations.trendChangeEase\n\t                    });\n\t                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.frameValue = targetValue;\n\t                    cb();\n\t                }\n\t            };\n\t            AxisMarkWidget.prototype.updatePosition = function() {\n\t                var chartState = this.chartState;\n\t                var screen = chartState.screen;\n\t                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n\t                var lineGeometry = this.line.geometry;\n\t                var hasStickMode = this.axisMark.options.stickToEdges;\n\t                var _a = this.chartState.data, width = _a.width, height = _a.height;\n\t                if (isXAxis) {\n\t                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t                    this.object3D.position.y = screen.getBottom();\n\t                    lineGeometry.vertices[1].setY(height);\n\t                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n\t                } else {\n\t                    var val = this.frameValue;\n\t                    var bottomVal = screen.getBottomVal();\n\t                    var topVal = screen.getTopVal();\n\t                    var needToStickOnTop = hasStickMode && val > topVal;\n\t                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n\t                    var centerYVal = screen.getCenterYVal();\n\t                    this.object3D.position.x = screen.getLeft();\n\t                    if (needToStickOnTop) {\n\t                        this.object3D.position.y = screen.getTop();\n\t                    } else if (needToStickOnBottom) {\n\t                        this.object3D.position.y = screen.getBottom();\n\t                    } else {\n\t                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t                    }\n\t                    lineGeometry.vertices[1].setX(width);\n\t                    var indicatorPosY = val > centerYVal ? -35 : 10;\n\t                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t                }\n\t                lineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            AxisMarkWidget.typeName = \"simple\";\n\t            return AxisMarkWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(17);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Vector3 = THREE.Vector3;\n\t        var BorderWidget = function(_super) {\n\t            __extends(BorderWidget, _super);\n\t            function BorderWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                var _a = chartState.data, width = _a.width, height = _a.height;\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: 0,\n\t                    transparent: true\n\t                });\n\t                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t            }\n\t            BorderWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            BorderWidget.widgetName = \"Border\";\n\t            return BorderWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.BorderWidget = BorderWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Color_1 = __webpack_require__(26);\n\t        var CANVAS_WIDTH = 128;\n\t        var CANVAS_HEIGHT = 64;\n\t        var OFFSET_X = 15;\n\t        var TrendsIndicatorWidget = function(_super) {\n\t            __extends(TrendsIndicatorWidget, _super);\n\t            function TrendsIndicatorWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendIndicator;\n\t            };\n\t            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n\t            return TrendsIndicatorWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n\t        var TrendIndicator = function(_super) {\n\t            __extends(TrendIndicator, _super);\n\t            function TrendIndicator(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                this.onTrendChange();\n\t            }\n\t            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasIndicator;\n\t            };\n\t            TrendIndicator.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendIndicator.prototype.onTrendChange = function() {\n\t                var trendData = this.trend.getData();\n\t                var lastItem = trendData[trendData.length - 1];\n\t                var texture = this.mesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\t                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n\t                texture.needsUpdate = true;\n\t            };\n\t            TrendIndicator.prototype.initObject = function() {\n\t                var color = new Color_1.ChartColor(this.trend.getOptions().lineColor);\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"15px Arial\";\n\t                    ctx.fillStyle = color.rgbaStr;\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n\t            };\n\t            TrendIndicator.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segmentsManager.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n\t                this.segment = segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n\t                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x + OFFSET_X;\n\t                var y = endPointVector.y;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n\t                if (indicatorIsOutOfScreen) {\n\t                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n\t                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n\t                    y -= 25;\n\t                }\n\t                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n\t            };\n\t            return TrendIndicator;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendIndicator = TrendIndicator;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendsLineWidget = function(_super) {\n\t            __extends(TrendsLineWidget, _super);\n\t            function TrendsLineWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLine;\n\t            };\n\t            TrendsLineWidget.widgetName = \"TrendsLine\";\n\t            return TrendsLineWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLineWidget = TrendsLineWidget;\n\t        var TrendLine = function(_super) {\n\t            __extends(TrendLine, _super);\n\t            function TrendLine(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeSegmentsInds = [];\n\t                this.displayedSegments = {};\n\t                var options = this.trend.getOptions();\n\t                this.material = new LineBasicMaterial({\n\t                    color: options.lineColor,\n\t                    linewidth: options.lineWidth\n\t                });\n\t                this.initLine();\n\t            }\n\t            TrendLine.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendLine.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            TrendLine.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n\t                    _this.destroySegments();\n\t                    _this.setupSegments();\n\t                }));\n\t                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n\t                    _this.setupSegments();\n\t                }));\n\t            };\n\t            TrendLine.prototype.initLine = function() {\n\t                var geometry = new Geometry();\n\t                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.lineSegments = new LineSegments(geometry, this.material);\n\t                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.lineSegments.frustumCulled = false;\n\t                for (var i = 0; i < this.chartState.data.maxVisibleSegments; i++) {\n\t                    geometry.vertices.push(new Vector3(), new Vector3());\n\t                    this.freeSegmentsInds.push(i);\n\t                }\n\t                this.vertices = geometry.vertices;\n\t                this.setupSegments();\n\t            };\n\t            TrendLine.prototype.setupSegments = function() {\n\t                var geometry = this.lineSegments.geometry;\n\t                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.displayedSegments) {\n\t                    var lineSegment = this.displayedSegments[segmentId];\n\t                    var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupSegment(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                if (!lineSegment) {\n\t                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n\t                    var ind = this.freeSegmentsInds.pop();\n\t                    lineSegment = this.displayedSegments[segmentId] = {\n\t                        segmentId: segmentId,\n\t                        ind: ind\n\t                    };\n\t                }\n\t                var segmentInd = lineSegment.ind;\n\t                var lineStartVertex = this.vertices[segmentInd * 2];\n\t                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t            };\n\t            TrendLine.prototype.destroySegments = function() {\n\t                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t            };\n\t            TrendLine.prototype.destroySegment = function(segmentId) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t                lineStartVertex.set(0, 0, 0);\n\t                lineEndVertex.set(0, 0, 0);\n\t                delete this.displayedSegments[segmentId];\n\t                this.freeSegmentsInds.push(lineSegment.ind);\n\t            };\n\t            TrendLine.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.lineSegments.scale;\n\t                var state = this.chartState.data;\n\t                var scaleXFactor = state.xAxis.range.scaleFactor;\n\t                var scaleYFactor = state.yAxis.range.scaleFactor;\n\t                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t            };\n\t            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                var geometry = this.lineSegments.geometry;\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.displayedSegments[segmentId]) continue;\n\t                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendLine;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLine = TrendLine;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var Vector3 = THREE.Vector3;\n\t        var Mesh = THREE.Mesh;\n\t        var Line = THREE.Line;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var PlaneGeometry = THREE.PlaneGeometry;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var RISE_COLOR = 2927680;\n\t        var FALL_COLOR = 15619379;\n\t        var MARGIN_PERCENT = .3;\n\t        var MAX_CANDLES = 100;\n\t        var TrendsCandlesWidget = function(_super) {\n\t            __extends(TrendsCandlesWidget, _super);\n\t            function TrendsCandlesWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendCandlesWidget;\n\t            };\n\t            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n\t            return TrendsCandlesWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n\t        var TrendCandlesWidget = function(_super) {\n\t            __extends(TrendCandlesWidget, _super);\n\t            function TrendCandlesWidget(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeCandlesInds = [];\n\t                this.candlesPool = [];\n\t                this.candles = {};\n\t                this.initObject();\n\t            }\n\t            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n\t            };\n\t            TrendCandlesWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendCandlesWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n\t                    _this.destroyCandles();\n\t                    _this.setupCandles();\n\t                }));\n\t                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n\t                    _this.setupCandles();\n\t                }));\n\t            };\n\t            TrendCandlesWidget.prototype.initObject = function() {\n\t                var stateData = this.chartState.data;\n\t                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.scaleXFactor = scaleXFactor;\n\t                this.scaleYFactor = scaleYFactor;\n\t                this.object3D = new Object3D();\n\t                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.object3D.frustumCulled = false;\n\t                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t                this.setupCandles();\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandles = function() {\n\t                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.candles) {\n\t                    var segment_1 = this.candles[segmentId].segment;\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupCandle(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandles = function() {\n\t                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n\t                var candle = this.candles[segmentId];\n\t                this.object3D.remove(candle.getObject3D());\n\t                delete this.candles[segmentId];\n\t            };\n\t            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.object3D.scale;\n\t                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t            };\n\t            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.candles[segmentId]) continue;\n\t                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t                    this.setupCandle(segmentId, segmentState);\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n\t                var candleInd = candleId % MAX_CANDLES;\n\t                var candle = this.candlesPool[candleInd];\n\t                if (!candle) {\n\t                    candle = this.candlesPool[candleInd] = new CandleWidget();\n\t                }\n\t                if (!this.candles[candleId]) {\n\t                    this.candles[candleId] = candle;\n\t                    this.object3D.add(candle.getObject3D());\n\t                }\n\t                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t                candle.setSegment(segmentState);\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendCandlesWidget;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendCandlesWidget = TrendCandlesWidget;\n\t        var CandleWidget = function() {\n\t            function CandleWidget() {\n\t                this.initObject();\n\t            }\n\t            CandleWidget.prototype.getObject3D = function() {\n\t                return this.rect;\n\t            };\n\t            CandleWidget.prototype.setSegment = function(segment) {\n\t                this.segment = segment;\n\t                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\t                var geometry = this.rect.geometry;\n\t                var material = this.rect.material;\n\t                var width = segment.endXVal - segment.startXVal;\n\t                width -= width * MARGIN_PERCENT;\n\t                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n\t                leftTop.set(-width / 2, height / 2, 0);\n\t                rightTop.set(width / 2, height / 2, 0);\n\t                leftBottom.set(-width / 2, -height / 2, 0);\n\t                rightBottom.set(width / 2, -height / 2, 0);\n\t                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t                    leftBottom.setY(leftBottom.y + 1);\n\t                    rightBottom.setY(rightBottom.y + 1);\n\t                }\n\t                material.color.set(color);\n\t                geometry.verticesNeedUpdate = true;\n\t                var vLineGeometry = this.vLine.geometry;\n\t                var vLineMaterial = this.vLine.material;\n\t                var lineTop = segment.maxYVal - segment.yVal;\n\t                var lineBottom = segment.minYVal - segment.yVal;\n\t                vLineGeometry.vertices[0].set(0, lineTop, 0);\n\t                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t                vLineMaterial.color.set(color);\n\t                vLineGeometry.verticesNeedUpdate = true;\n\t                var hLineGeometry = this.hLine.geometry;\n\t                var hLineMaterial = this.hLine.material;\n\t                var lineLeft = -width / 2;\n\t                var lineRight = width / 2;\n\t                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t                hLineMaterial.color.set(color);\n\t                hLineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            CandleWidget.prototype.initObject = function() {\n\t                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n\t                var vLineGeometry = new Geometry();\n\t                var hLineGeometry = new Geometry();\n\t                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.rect.add(this.vLine);\n\t                this.rect.add(this.hLine);\n\t            };\n\t            return CandleWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(13);\n\t        var TrendsBeaconWidget = function(_super) {\n\t            __extends(TrendsBeaconWidget, _super);\n\t            function TrendsBeaconWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendBeacon;\n\t            };\n\t            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n\t            return TrendsBeaconWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n\t        var TrendBeacon = function(_super) {\n\t            __extends(TrendBeacon, _super);\n\t            function TrendBeacon(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                if (state.data.animations.enabled) {\n\t                    this.animate();\n\t                }\n\t                this.updatePosition();\n\t            }\n\t            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendBeacon.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendBeacon.prototype.onTrendChange = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return _this.updatePosition();\n\t                }));\n\t                this.bindEvent(this.chartState.onChange(function(changedProps) {\n\t                    return _this.onStateChange(changedProps);\n\t                }));\n\t                this.bindEvent(this.chartState.onDestroy(function() {\n\t                    return _this.stopAnimation();\n\t                }));\n\t            };\n\t            TrendBeacon.prototype.initObject = function() {\n\t                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                light.scale.set(.2, .2, 1);\n\t                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture()\n\t                })));\n\t                this.segment = this.trend.segmentsManager.getEndSegment();\n\t            };\n\t            TrendBeacon.prototype.animate = function() {\n\t                var _this = this;\n\t                this.animated = true;\n\t                var object = this.mesh;\n\t                var animationObject = {\n\t                    scale: object.scale.x,\n\t                    opacity: object.material.opacity\n\t                };\n\t                this.mesh.scale.set(.1, .1, 1);\n\t                setTimeout(function() {\n\t                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n\t                        scale: 1,\n\t                        opacity: 0\n\t                    });\n\t                    animation.eventCallback(\"onUpdate\", function() {\n\t                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n\t                        object.material.opacity = animationObject.opacity;\n\t                    }).eventCallback(\"onComplete\", function() {\n\t                        _this.animation && animation.restart();\n\t                    });\n\t                }, 500);\n\t            };\n\t            TrendBeacon.prototype.stopAnimation = function() {\n\t                this.animated = false;\n\t                this.animation && this.animation.kill();\n\t                this.animation = null;\n\t            };\n\t            TrendBeacon.createTexture = function() {\n\t                var h = 32, w = 32;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n\t                    ctx.fillStyle = \"white\";\n\t                    ctx.fill();\n\t                });\n\t            };\n\t            TrendBeacon.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segmentsManager.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n\t                this.segment = trendsSegments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onStateChange = function(changedProps) {\n\t                if (!changedProps.animations) return;\n\t                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n\t                if (changedProps.animations.enabled) {\n\t                    this.animate();\n\t                } else {\n\t                    this.stopAnimation();\n\t                }\n\t            };\n\t            TrendBeacon.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var xVal, yVal;\n\t                var currentAnimationState = this.segment.currentAnimationState;\n\t                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    xVal = currentAnimationState.endXVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                } else {\n\t                    xVal = currentAnimationState.xVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                }\n\t                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n\t                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n\t                this.mesh.position.set(x, endPointVector.y, .1);\n\t            };\n\t            return TrendBeacon;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendBeacon = TrendBeacon;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(3));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        exports.DEFAULT_CONFIG = {\n\t            installPluginWidgets: true\n\t        };\n\t        var ChartPlugin = function() {\n\t            function ChartPlugin(options, config) {\n\t                if (config === void 0) {\n\t                    config = {};\n\t                }\n\t                this.unsubscribers = [];\n\t                this.initialState = options;\n\t                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n\t                this.name = this.constructor.NAME;\n\t                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n\t            }\n\t            ChartPlugin.prototype.setupChartState = function(chartState) {\n\t                var _this = this;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n\t                    return _this.onInitialStateAppliedHandler(initialState);\n\t                }), this.chartState.onReady(function() {\n\t                    return _this.onChartReadyHandler();\n\t                }), this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n\t                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n\t                }));\n\t            };\n\t            ChartPlugin.prototype.getOptions = function() {\n\t                return this.chartState.data.pluginsState[this.name];\n\t            };\n\t            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n\t            ChartPlugin.prototype.onChartReadyHandler = function() {};\n\t            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n\t            ChartPlugin.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t            };\n\t            ChartPlugin.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartPlugin.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartPlugin.NAME = \"\";\n\t            ChartPlugin.pluginWidgets = [];\n\t            return ChartPlugin;\n\t        }();\n\t        exports.ChartPlugin = ChartPlugin;\n\t    } ]);\n\t});\n\t\n\t\n\t//# sourceMappingURL=ThreeChart.js.map\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar three_charts_1 = __webpack_require__(2);\r\n\tvar TrendsMarksWidget_1 = __webpack_require__(5);\r\n\t(function (TREND_MARK_SIDE) {\r\n\t    TREND_MARK_SIDE[TREND_MARK_SIDE[\"TOP\"] = 0] = \"TOP\";\r\n\t    TREND_MARK_SIDE[TREND_MARK_SIDE[\"BOTTOM\"] = 1] = \"BOTTOM\";\r\n\t})(exports.TREND_MARK_SIDE || (exports.TREND_MARK_SIDE = {}));\r\n\tvar TREND_MARK_SIDE = exports.TREND_MARK_SIDE;\r\n\t(function (EVENTS) {\r\n\t    EVENTS[EVENTS[\"CHANGE\"] = 0] = \"CHANGE\";\r\n\t})(exports.EVENTS || (exports.EVENTS = {}));\r\n\tvar EVENTS = exports.EVENTS;\r\n\tvar AXIS_MARK_DEFAULT_OPTIONS = {\r\n\t    trendName: '',\r\n\t    title: '',\r\n\t    description: '',\r\n\t    descriptionColor: 'rgb(40,136,75)',\r\n\t    value: 0,\r\n\t    iconColor: 'rgb(255, 102, 217)',\r\n\t    orientation: TREND_MARK_SIDE.TOP,\r\n\t    width: 65,\r\n\t    height: 80,\r\n\t    offset: 40,\r\n\t    margin: 20\r\n\t};\r\n\tvar TrendsMarksPlugin = (function (_super) {\r\n\t    __extends(TrendsMarksPlugin, _super);\r\n\t    function TrendsMarksPlugin(trendsMarksPluginOptions) {\r\n\t        _super.call(this, trendsMarksPluginOptions);\r\n\t        this.items = {};\r\n\t        this.rects = {};\r\n\t    }\r\n\t    TrendsMarksPlugin.prototype.onInitialStateApplied = function () {\r\n\t        this.bindEvents();\r\n\t        this.onMarksChangeHandler();\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.onStateChanged = function () {\r\n\t        this.onMarksChangeHandler();\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.getOptions = function () {\r\n\t        return _super.prototype.getOptions.call(this);\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.getItems = function () {\r\n\t        return this.items;\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.getItem = function (markName) {\r\n\t        return this.items[markName];\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.createMark = function (options) {\r\n\t        var marksOptions = this.getOptions().items;\r\n\t        var newMarkOptions = marksOptions.concat([options]);\r\n\t        this.chartState.setState({ pluginsState: (_a = {}, _a[this.name] = { items: newMarkOptions }, _a) });\r\n\t        var _a;\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.onChange = function (cb) {\r\n\t        return this.ee.subscribe(EVENTS[EVENTS.CHANGE], cb);\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        this.chartState.trendsManager.onSegmentsRebuilded(function () { return _this.updateMarksSegments(); });\r\n\t        this.chartState.screen.onZoomFrame(function () { return _this.calclulateMarksPositions(); });\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.onInitialStateAppliedHandler = function () {\r\n\t        this.onMarksChangeHandler();\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.onMarksChangeHandler = function () {\r\n\t        var trendsMarksOptions = this.getOptions().items;\r\n\t        var actualMarksNames = [];\r\n\t        for (var _i = 0, trendsMarksOptions_1 = trendsMarksOptions; _i < trendsMarksOptions_1.length; _i++) {\r\n\t            var options = trendsMarksOptions_1[_i];\r\n\t            var marks = this.items;\r\n\t            // set mark name\r\n\t            if (!options.name) {\r\n\t                options.name = three_charts_1.Utils.getUid().toString();\r\n\t                actualMarksNames.push(options.name);\r\n\t                if (marks[options.name])\r\n\t                    three_charts_1.Utils.error('duplicated mark name ' + options.name);\r\n\t            }\r\n\t            else if (marks[options.name]) {\r\n\t                actualMarksNames.push(options.name);\r\n\t                continue;\r\n\t            }\r\n\t            options = three_charts_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\r\n\t            var mark = new TrendMark(this.chartState, options);\r\n\t            marks[options.name] = mark;\r\n\t        }\r\n\t        // delete not relevant marks\r\n\t        for (var markName in this.items) {\r\n\t            if (actualMarksNames.indexOf(markName) != -1)\r\n\t                continue;\r\n\t            delete this.items[markName];\r\n\t        }\r\n\t        this.updateMarksSegments();\r\n\t        this.ee.emit(EVENTS[EVENTS.CHANGE]);\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.calclulateMarksPositions = function () {\r\n\t        this.rects = {};\r\n\t        for (var markName in this.items) {\r\n\t            this.createMarkRect(this.items[markName]);\r\n\t        }\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.createMarkRect = function (mark) {\r\n\t        if (!mark.segment)\r\n\t            return;\r\n\t        var state = this.chartState;\r\n\t        var options = mark.options;\r\n\t        var width = options.width, height = options.height, offset = options.offset, name = options.name;\r\n\t        var left = state.getPointOnXAxis(mark.xVal) - width / 2;\r\n\t        var top = state.getPointOnYAxis(mark.yVal);\r\n\t        var isTopSideMark = options.orientation == TREND_MARK_SIDE.TOP;\r\n\t        var newOffset;\r\n\t        var row = 0;\r\n\t        if (isTopSideMark) {\r\n\t            top += offset + height;\r\n\t        }\r\n\t        else {\r\n\t            top -= offset;\r\n\t        }\r\n\t        var markRect = [left, top, width, height];\r\n\t        var hasIntersection = false;\r\n\t        do {\r\n\t            for (var markName in this.rects) {\r\n\t                var rect = this.rects[markName];\r\n\t                hasIntersection = three_charts_1.Utils.rectsIntersect(rect, markRect);\r\n\t                if (!hasIntersection)\r\n\t                    continue;\r\n\t                if (isTopSideMark) {\r\n\t                    markRect[1] = rect[1] + markRect[3] + options.margin;\r\n\t                }\r\n\t                else {\r\n\t                    markRect[1] = rect[1] - rect[3] - options.margin;\r\n\t                }\r\n\t                row++;\r\n\t                break;\r\n\t            }\r\n\t        } while (hasIntersection);\r\n\t        if (isTopSideMark) {\r\n\t            newOffset = markRect[1] - markRect[3] - state.getPointOnYAxis(mark.yVal);\r\n\t        }\r\n\t        else {\r\n\t            newOffset = state.getPointOnYAxis(mark.yVal) - markRect[1];\r\n\t        }\r\n\t        mark._setOffset(newOffset);\r\n\t        mark._setRow(row);\r\n\t        this.rects[name] = markRect;\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.updateMarksSegments = function () {\r\n\t        var chartState = this.chartState;\r\n\t        var trends = chartState.trendsManager.trends;\r\n\t        for (var trendName in trends) {\r\n\t            var marks = this.getTrendMarks(trendName);\r\n\t            var marksArr = [];\r\n\t            var xVals = [];\r\n\t            for (var markName in marks) {\r\n\t                var mark = marks[markName];\r\n\t                xVals.push(mark.options.value);\r\n\t                marksArr.push(mark);\r\n\t                mark._setSegment(null);\r\n\t            }\r\n\t            marksArr.sort(function (a, b) { return a.options.value - b.options.value; });\r\n\t            var trend = chartState.getTrend(trendName);\r\n\t            var points = trend.segmentsManager.getSegmentsForXValues(xVals.sort(function (a, b) { return a - b; }));\r\n\t            for (var markInd = 0; markInd < marksArr.length; markInd++) {\r\n\t                marksArr[markInd]._setSegment(points[markInd]);\r\n\t            }\r\n\t        }\r\n\t        this.calclulateMarksPositions();\r\n\t    };\r\n\t    TrendsMarksPlugin.prototype.getTrendMarks = function (trendName) {\r\n\t        var trendMarks = [];\r\n\t        for (var markName in this.items) {\r\n\t            if (this.items[markName].options.trendName != trendName)\r\n\t                continue;\r\n\t            trendMarks.push(this.items[markName]);\r\n\t        }\r\n\t        return trendMarks;\r\n\t    };\r\n\t    TrendsMarksPlugin.NAME = 'TrendsMarks';\r\n\t    TrendsMarksPlugin.pluginWidgets = [TrendsMarksWidget_1.TrendsMarksWidget];\r\n\t    return TrendsMarksPlugin;\r\n\t}(three_charts_1.ChartPlugin));\r\n\texports.TrendsMarksPlugin = TrendsMarksPlugin;\r\n\tvar TrendMark = (function () {\r\n\t    function TrendMark(chartState, options) {\r\n\t        this.row = 0;\r\n\t        this.options = options;\r\n\t        this.chartState = chartState;\r\n\t    }\r\n\t    /**\r\n\t     * only for internal usage\r\n\t     */\r\n\t    TrendMark.prototype._setSegment = function (segment) {\r\n\t        this.segment = segment;\r\n\t        if (!segment)\r\n\t            return;\r\n\t        var trend = this.chartState.getTrend(this.options.trendName);\r\n\t        if (trend.getOptions().type == three_charts_1.TREND_TYPE.LINE) {\r\n\t            this.xVal = segment.endXVal;\r\n\t            this.yVal = segment.endYVal;\r\n\t        }\r\n\t        else if (this.options.orientation == TREND_MARK_SIDE.TOP) {\r\n\t            this.xVal = segment.xVal;\r\n\t            this.yVal = segment.maxYVal;\r\n\t        }\r\n\t        else {\r\n\t            this.xVal = segment.xVal;\r\n\t            this.yVal = segment.minYVal;\r\n\t        }\r\n\t    };\r\n\t    TrendMark.prototype._setOffset = function (offset) {\r\n\t        this.offset = offset;\r\n\t    };\r\n\t    TrendMark.prototype._setRow = function (row) {\r\n\t        this.row = row;\r\n\t    };\r\n\t    return TrendMark;\r\n\t}());\r\n\texports.TrendMark = TrendMark;\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar three_charts_1 = __webpack_require__(2);\r\n\tvar Geometry = THREE.Geometry;\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar Object3D = THREE.Object3D;\r\n\tvar TrendsMarksPlugin_1 = __webpack_require__(4);\r\n\tvar MAX_MARKS_IN_ROW = 3;\r\n\t/**\r\n\t * widget for drawing trends marks for all trends\r\n\t */\r\n\tvar TrendsMarksWidget = (function (_super) {\r\n\t    __extends(TrendsMarksWidget, _super);\r\n\t    function TrendsMarksWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsMarksWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendMarksWidget;\r\n\t    };\r\n\t    TrendsMarksWidget.widgetName = \"TrendsMarks\";\r\n\t    return TrendsMarksWidget;\r\n\t}(three_charts_1.TrendsWidget));\r\n\texports.TrendsMarksWidget = TrendsMarksWidget;\r\n\t/**\r\n\t * widget for drawing trend marks for one trend\r\n\t */\r\n\tvar TrendMarksWidget = (function (_super) {\r\n\t    __extends(TrendMarksWidget, _super);\r\n\t    function TrendMarksWidget(chartState, trendName) {\r\n\t        _super.call(this, chartState, trendName);\r\n\t        this.marksWidgets = {};\r\n\t        this.object3D = new Object3D();\r\n\t        this.onMarksChange();\r\n\t    }\r\n\t    TrendMarksWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendMarksWidget.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.getTrendsMarksPlugin().onChange(function () { return _this.onMarksChange(); });\r\n\t    };\r\n\t    TrendMarksWidget.prototype.getTrendsMarksPlugin = function () {\r\n\t        return this.chartState.getPlugin(TrendsMarksPlugin_1.TrendsMarksPlugin.NAME);\r\n\t    };\r\n\t    TrendMarksWidget.prototype.onMarksChange = function () {\r\n\t        var marksItems = this.getTrendsMarksPlugin().getItems();\r\n\t        var widgets = this.marksWidgets;\r\n\t        var actualMarksNames = [];\r\n\t        for (var markName in marksItems) {\r\n\t            actualMarksNames.push(markName);\r\n\t            if (!widgets[markName])\r\n\t                this.createMarkWidget(marksItems[markName]);\r\n\t        }\r\n\t        for (var markName in this.marksWidgets) {\r\n\t            if (actualMarksNames.indexOf(markName) !== -1)\r\n\t                continue;\r\n\t            this.destroyMarkWidget(markName);\r\n\t        }\r\n\t    };\r\n\t    TrendMarksWidget.prototype.createMarkWidget = function (mark) {\r\n\t        if (!mark.segment)\r\n\t            return;\r\n\t        var markWidget = new TrendMarkWidget(this.chartState, mark);\r\n\t        this.marksWidgets[mark.options.name] = markWidget;\r\n\t        this.object3D.add(markWidget.getObject3D());\r\n\t    };\r\n\t    TrendMarksWidget.prototype.destroyMarkWidget = function (markName) {\r\n\t        this.object3D.remove(this.marksWidgets[markName].getObject3D());\r\n\t        delete this.marksWidgets[markName];\r\n\t    };\r\n\t    TrendMarksWidget.prototype.onZoomFrame = function () {\r\n\t        var widgets = this.marksWidgets;\r\n\t        for (var markName in widgets) {\r\n\t            widgets[markName].onZoomFrameHandler();\r\n\t        }\r\n\t    };\r\n\t    TrendMarksWidget.prototype.onSegmentsAnimate = function () {\r\n\t        var widgets = this.marksWidgets;\r\n\t        for (var markName in widgets) {\r\n\t            widgets[markName].onSegmentsAnimate();\r\n\t        }\r\n\t    };\r\n\t    return TrendMarksWidget;\r\n\t}(three_charts_1.TrendWidget));\r\n\texports.TrendMarksWidget = TrendMarksWidget;\r\n\t/**\r\n\t * widget for drawing one trend mark\r\n\t */\r\n\tvar TrendMarkWidget = (function () {\r\n\t    function TrendMarkWidget(chartState, trendMark) {\r\n\t        this.markHeight = 74;\r\n\t        this.markWidth = 150;\r\n\t        this.position = { lineHeight: 30, x: 0, y: 0 };\r\n\t        this.chartState = chartState;\r\n\t        this.mark = trendMark;\r\n\t        this.initObject();\r\n\t        this.show();\r\n\t    }\r\n\t    TrendMarkWidget.prototype.initObject = function () {\r\n\t        this.object3D = new Object3D();\r\n\t        this.markMesh = this.createMarkMesh();\r\n\t        this.line = this.createMarkLine();\r\n\t        this.object3D.add(this.markMesh);\r\n\t        this.object3D.add(this.line);\r\n\t    };\r\n\t    TrendMarkWidget.prototype.createMarkMesh = function () {\r\n\t        var _a = this, markHeight = _a.markHeight, markWidth = _a.markWidth;\r\n\t        var mark = this.mark.options;\r\n\t        var isTopSide = mark.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP;\r\n\t        var texture = three_charts_1.Utils.createPixelPerfectTexture(markWidth, markHeight, function (ctx) {\r\n\t            var circleOffset = isTopSide ? 30 : 0;\r\n\t            var circleR = 22;\r\n\t            var circleX = markWidth / 2;\r\n\t            var circleY = circleOffset + circleR;\r\n\t            var textOffset = isTopSide ? 10 : circleR * 2 + 15;\r\n\t            // title and description\r\n\t            ctx.beginPath();\r\n\t            ctx.textAlign = 'center';\r\n\t            ctx.font = \"11px Arial\";\r\n\t            ctx.fillStyle = 'rgba(255,255,255, 0.6)';\r\n\t            ctx.fillText(mark.title, circleX, textOffset);\r\n\t            ctx.fillStyle = mark.descriptionColor;\r\n\t            ctx.fillText(mark.description, circleX, textOffset + 12);\r\n\t            // icon circle\r\n\t            ctx.beginPath();\r\n\t            ctx.fillStyle = mark.iconColor;\r\n\t            ctx.arc(circleX, circleY, circleR, 0, 2 * Math.PI);\r\n\t            ctx.fill();\r\n\t            // icon text\r\n\t            ctx.font = \"19px Arial\";\r\n\t            ctx.fillStyle = 'rgb(255, 255, 255)';\r\n\t            ctx.fillText(mark.icon, circleX, circleY + 7);\r\n\t        });\r\n\t        var material = new THREE.MeshBasicMaterial({ map: texture, side: THREE.FrontSide });\r\n\t        material.transparent = true;\r\n\t        var mesh = new Mesh(new THREE.PlaneGeometry(markWidth, markHeight), material);\r\n\t        var offset = this.mark.options.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP ? this.mark.offset : -this.mark.offset;\r\n\t        // mesh.position.setY(markHeight / 2 + offset);\r\n\t        return mesh;\r\n\t    };\r\n\t    TrendMarkWidget.prototype.createMarkLine = function () {\r\n\t        var lineGeometry = new Geometry();\r\n\t        lineGeometry.vertices.push(new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, this.mark.offset, 0));\r\n\t        lineGeometry.computeLineDistances();\r\n\t        var lineMaterial = new THREE.LineDashedMaterial({ dashSize: 1, gapSize: 4, transparent: true, opacity: 0.6 });\r\n\t        var line = new THREE.Line(lineGeometry, lineMaterial);\r\n\t        line.position.setZ(-0.1);\r\n\t        return line;\r\n\t    };\r\n\t    TrendMarkWidget.prototype.getObject3D = function () {\r\n\t        return this.object3D;\r\n\t    };\r\n\t    TrendMarkWidget.prototype.onSegmentsAnimate = function () {\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendMarkWidget.prototype.onZoomFrameHandler = function () {\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendMarkWidget.prototype.updatePosition = function () {\r\n\t        if (!this.mark.segment)\r\n\t            return;\r\n\t        var mark = this.mark;\r\n\t        var meshMaterial = this.markMesh.material;\r\n\t        var lineMaterial = this.line.material;\r\n\t        if (mark.row >= MAX_MARKS_IN_ROW - 1) {\r\n\t            meshMaterial.opacity = 0;\r\n\t            lineMaterial.opacity = 0;\r\n\t        }\r\n\t        else {\r\n\t            meshMaterial.opacity = 1;\r\n\t            lineMaterial.opacity = 1;\r\n\t        }\r\n\t        var screen = this.chartState.screen;\r\n\t        var posX = screen.getPointOnXAxis(mark.xVal);\r\n\t        var posY = screen.getPointOnYAxis(mark.yVal);\r\n\t        var lineGeometry = this.line.geometry;\r\n\t        if (mark.options.orientation == TrendsMarksPlugin_1.TREND_MARK_SIDE.TOP) {\r\n\t            this.markMesh.position.setY(this.markHeight / 2 + mark.offset);\r\n\t            lineGeometry.vertices[1].setY(mark.offset);\r\n\t        }\r\n\t        else {\r\n\t            this.markMesh.position.setY(-mark.offset - this.markHeight / 2);\r\n\t            lineGeometry.vertices[1].setY(-mark.offset);\r\n\t        }\r\n\t        lineGeometry.verticesNeedUpdate = true;\r\n\t        lineGeometry.lineDistancesNeedUpdate = true;\r\n\t        lineGeometry.computeLineDistances();\r\n\t        this.object3D.position.set(posX, posY, 0);\r\n\t    };\r\n\t    TrendMarkWidget.prototype.show = function () {\r\n\t        if (!this.mark.segment)\r\n\t            return;\r\n\t        this.updatePosition();\r\n\t        var animations = this.chartState.data.animations;\r\n\t        var time = animations.enabled ? 1 : 0;\r\n\t        this.object3D.scale.set(0.01, 0.01, 1);\r\n\t        TweenLite.to(this.object3D.scale, time, { x: 1, y: 1, ease: Elastic.easeOut });\r\n\t    };\r\n\t    return TrendMarkWidget;\r\n\t}());\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap e868dc97b9a9dc74cd8a\n **/","export * from './TrendsMarksPlugin';\n\n\n/** WEBPACK FOOTER **\n ** ./plugins/src/TrendsMarksPlugin/index.ts\n **/","module.exports = require(\"./ThreeChart\")\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-charts/build/index.js\n ** module id = 2\n ** module chunks = 0 1\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n    if (typeof exports === \"object\" && typeof module === \"object\") module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"THREE_CHARTS\"] = factory(); else root[\"THREE_CHARTS\"] = factory();\n})(this, function() {\n    return function(modules) {\n        var installedModules = {};\n        function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n            var module = installedModules[moduleId] = {\n                exports: {},\n                id: moduleId,\n                loaded: false\n            };\n            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n            module.loaded = true;\n            return module.exports;\n        }\n        __webpack_require__.m = modules;\n        __webpack_require__.c = installedModules;\n        __webpack_require__.p = \"\";\n        return __webpack_require__(0);\n    }([ function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(1));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(2));\n        __export(__webpack_require__(21));\n        __export(__webpack_require__(20));\n        __export(__webpack_require__(19));\n        __export(__webpack_require__(12));\n        __export(__webpack_require__(13));\n        __export(__webpack_require__(15));\n        __export(__webpack_require__(18));\n        __export(__webpack_require__(14));\n        __export(__webpack_require__(17));\n        __export(__webpack_require__(35));\n        __export(__webpack_require__(25));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        __webpack_require__(3);\n        var PerspectiveCamera = THREE.PerspectiveCamera;\n        var State_1 = __webpack_require__(12);\n        var Utils_1 = __webpack_require__(14);\n        var AxisWidget_1 = __webpack_require__(22);\n        var GridWidget_1 = __webpack_require__(23);\n        var TrendsGradientWidget_1 = __webpack_require__(24);\n        var TrendsLoadingWidget_1 = __webpack_require__(27);\n        var AxisMarksWidget_1 = __webpack_require__(28);\n        var BorderWidget_1 = __webpack_require__(29);\n        var TrendsIndicatorWidget_1 = __webpack_require__(30);\n        var TrendsLineWidget_1 = __webpack_require__(31);\n        var TrendsCandleWidget_1 = __webpack_require__(32);\n        var TrendsBeaconWidget_1 = __webpack_require__(33);\n        var deps_1 = __webpack_require__(34);\n        var Chart = function() {\n            function Chart(state, $container, plugins) {\n                var _this = this;\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.widgets = [];\n                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n                if (!$container) {\n                    Utils_1.Utils.error(\"$el must be set\");\n                }\n                var style = getComputedStyle($container);\n                state.width = parseInt(style.width);\n                state.height = parseInt(style.height);\n                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n                    return _this.zoom(zoomValue, origin);\n                }, 200);\n                this.$container = $container;\n                this.init($container);\n            }\n            Chart.installWidget = function(Widget) {\n                if (!Widget.widgetName) {\n                    Utils_1.Utils.error(\"unnamed widget\");\n                }\n                this.installedWidgets[Widget.widgetName] = Widget;\n            };\n            Chart.prototype.init = function($container) {\n                var state = this.state;\n                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n                this.scene = new THREE.Scene();\n                this.isStopped = !autoRender.enabled;\n                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n                    antialias: true,\n                    alpha: true\n                });\n                renderer.setPixelRatio(Chart.devicePixelRatio);\n                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n                renderer.setSize(w, h);\n                $container.appendChild(renderer.domElement);\n                this.$el = renderer.domElement;\n                this.$el.style.display = \"block\";\n                if (showStats) {\n                    this.stats = new Stats();\n                    $container.appendChild(this.stats.domElement);\n                }\n                this.setupCamera();\n                var widgetsClasses = this.state.widgetsClasses;\n                for (var widgetName in widgetsClasses) {\n                    var widgetOptions = this.state.data.widgets[widgetName];\n                    if (!widgetOptions.enabled) continue;\n                    var WidgetConstructor = widgetsClasses[widgetName];\n                    var widget = new WidgetConstructor(this.state);\n                    this.scene.add(widget.getObject3D());\n                    this.widgets.push(widget);\n                }\n                this.bindEvents();\n                this.renderLoop();\n            };\n            Chart.prototype.renderLoop = function() {\n                var _this = this;\n                if (this.isDestroyed) return;\n                this.stats && this.stats.begin();\n                this.render();\n                if (this.isStopped) return;\n                var fpsLimit = this.state.data.autoRender.fps;\n                if (fpsLimit) {\n                    var delay_1 = 1e3 / fpsLimit;\n                    setTimeout(function() {\n                        return requestAnimationFrame(function() {\n                            return _this.renderLoop();\n                        });\n                    }, delay_1);\n                } else {\n                    requestAnimationFrame(function() {\n                        return _this.renderLoop();\n                    });\n                }\n                this.stats && this.stats.end();\n            };\n            Chart.prototype.render = function() {\n                this.renderer.render(this.scene, this.camera);\n            };\n            Chart.prototype.stop = function() {\n                this.isStopped = true;\n            };\n            Chart.prototype.run = function() {\n                this.isStopped = false;\n                this.renderLoop();\n            };\n            Chart.prototype.destroy = function() {\n                this.isDestroyed = true;\n                this.stop();\n                this.state.destroy();\n                this.unbindEvents();\n                try {\n                    this.renderer.forceContextLoss();\n                } catch (wtf) {}\n                this.renderer.context = null;\n                this.renderer.domElement = null;\n                this.renderer = null;\n            };\n            Chart.prototype.getState = function() {\n                return this.state.data;\n            };\n            Chart.prototype.getTrend = function(trendName) {\n                return this.state.getTrend(trendName);\n            };\n            Chart.prototype.setState = function(state) {\n                return this.state.setState(state);\n            };\n            Chart.prototype.bindEvents = function() {\n                var _this = this;\n                var $el = this.$el;\n                if (this.state.data.controls.enabled) {\n                    $el.addEventListener(\"mousewheel\", function(ev) {\n                        _this.onMouseWheel(ev);\n                    });\n                    $el.addEventListener(\"mousemove\", function(ev) {\n                        _this.onMouseMove(ev);\n                    });\n                    $el.addEventListener(\"mousedown\", function(ev) {\n                        return _this.onMouseDown(ev);\n                    });\n                    $el.addEventListener(\"mouseup\", function(ev) {\n                        return _this.onMouseUp(ev);\n                    });\n                    $el.addEventListener(\"touchmove\", function(ev) {\n                        _this.onTouchMove(ev);\n                    });\n                    $el.addEventListener(\"touchend\", function(ev) {\n                        _this.onTouchEnd(ev);\n                    });\n                }\n                if (this.state.data.autoResize) {\n                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n                    });\n                }\n                this.unsubscribers = [ this.state.onTrendsChange(function() {\n                    return _this.autoscroll();\n                }), this.state.screen.onTransformationFrame(function(options) {\n                    return _this.onScreenTransformHandler(options);\n                }), this.state.onResize(function(options) {\n                    return _this.onChartResize();\n                }) ];\n            };\n            Chart.prototype.unbindEvents = function() {\n                try {\n                    this.resizeSensor && this.resizeSensor.detach();\n                } catch (e) {}\n                this.$el.remove();\n                this.unsubscribers.forEach(function(unsubscribe) {\n                    return unsubscribe();\n                });\n            };\n            Chart.prototype.setupCamera = function() {\n                var camSettings = this.state.screen.getCameraSettings();\n                if (!this.camera) {\n                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n                    this.scene.add(this.camera);\n                } else {\n                    this.camera.fov = camSettings.FOV;\n                    this.camera.aspect = camSettings.aspect;\n                    this.camera.far = camSettings.far;\n                    this.camera.near = camSettings.near;\n                    this.camera.updateProjectionMatrix();\n                }\n                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n                this.cameraInitialPosition = this.camera.position.clone();\n                this.onScreenTransformHandler(this.state.screen.options);\n            };\n            Chart.prototype.onScreenTransformHandler = function(options) {\n                if (options.scrollX != void 0) {\n                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n                    this.camera.position.setX(scrollX_1);\n                }\n                if (options.scrollY != void 0) {\n                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n                    this.camera.position.setY(scrollY_1);\n                }\n            };\n            Chart.prototype.autoscroll = function() {\n                var state = this.state;\n                if (!state.data.autoScroll) return;\n                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n                if (trendsMaxXDelta > 0) {\n                    var maxVisibleX = this.state.screen.getScreenRightVal();\n                    var paddingRightX = this.state.getPaddingRight();\n                    var currentScroll = state.data.xAxis.range.scroll;\n                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n                        return;\n                    }\n                    var scrollDelta = trendsMaxXDelta;\n                    this.setState({\n                        xAxis: {\n                            range: {\n                                scroll: currentScroll + scrollDelta\n                            }\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onScrollStop = function() {};\n            Chart.prototype.onMouseDown = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.clientX,\n                        y: ev.clientY\n                    }\n                });\n            };\n            Chart.prototype.onMouseUp = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onMouseMove = function(ev) {\n                if (this.state.data.cursor.dragMode) {\n                    this.setState({\n                        cursor: {\n                            dragMode: true,\n                            x: ev.clientX,\n                            y: ev.clientY\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onMouseWheel = function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n                var zoomOrigin = ev.layerX / this.state.data.width;\n                var zoomValue = 1 + ev.wheelDeltaY * .001;\n                this.zoom(zoomValue, zoomOrigin);\n            };\n            Chart.prototype.onTouchMove = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.touches[0].clientX,\n                        y: ev.touches[0].clientY\n                    }\n                });\n            };\n            Chart.prototype.onTouchEnd = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n                this.setState({\n                    width: width,\n                    height: height\n                });\n            };\n            Chart.prototype.onChartResize = function() {\n                var _a = this.state.data, width = _a.width, height = _a.height;\n                this.renderer.setSize(width, height);\n                this.setupCamera();\n            };\n            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n                var _this = this;\n                var MAX_ZOOM_VALUE = 1.5;\n                var MIN_ZOOM_VALUE = .7;\n                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n                var autoScrollIsEnabled = this.state.data.autoScroll;\n                if (autoScrollIsEnabled) this.state.setState({\n                    autoScroll: false\n                });\n                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n                    if (autoScrollIsEnabled) _this.setState({\n                        autoScroll: true\n                    });\n                });\n            };\n            Chart.createPreviewChart = function(userOptions, $el) {\n                var previewChartOptions = {\n                    animations: {\n                        enabled: false\n                    },\n                    widgets: {\n                        Grid: {\n                            enabled: false\n                        },\n                        Axis: {\n                            enabled: false\n                        },\n                        TrendsGradient: {\n                            enabled: false\n                        }\n                    }\n                };\n                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n                return new Chart(options, $el);\n            };\n            Chart.devicePixelRatio = window.devicePixelRatio;\n            Chart.installedWidgets = {};\n            Chart.renderers = {\n                CanvasRenderer: THREE.CanvasRenderer,\n                WebGLRenderer: THREE.WebGLRenderer\n            };\n            return Chart;\n        }();\n        exports.Chart = Chart;\n        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n        Chart.installWidget(AxisWidget_1.AxisWidget);\n        Chart.installWidget(GridWidget_1.GridWidget);\n        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n        Chart.installWidget(TrendsGradientWidget_1.TrendsGradientWidget);\n        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n        Chart.installWidget(BorderWidget_1.BorderWidget);\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        window.TweenLite = TweenMax;\n        window.Stats = __webpack_require__(4);\n        __webpack_require__(5);\n        __webpack_require__(6);\n        exports.isPlainObject = __webpack_require__(7);\n        exports.EE2 = __webpack_require__(9);\n        var es6_promise_1 = __webpack_require__(10);\n        exports.Promise = es6_promise_1.Promise;\n        exports.ResizeSensor = __webpack_require__(11);\n    }, function(module, exports) {\n        var Stats = function() {\n            function h(a) {\n                c.appendChild(a.dom);\n                return a;\n            }\n            function k(a) {\n                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n                l = a;\n            }\n            var l = 0, c = document.createElement(\"div\");\n            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n            c.addEventListener(\"click\", function(a) {\n                a.preventDefault();\n                k(++l % c.children.length);\n            }, !1);\n            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n            k(0);\n            return {\n                REVISION: 16,\n                dom: c,\n                addPanel: h,\n                showPanel: k,\n                begin: function() {\n                    g = (performance || Date).now();\n                },\n                end: function() {\n                    a++;\n                    var c = (performance || Date).now();\n                    f.update(c - g, 200);\n                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n                        var d = performance.memory;\n                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                    }\n                    return c;\n                },\n                update: function() {\n                    g = this.end();\n                },\n                domElement: c,\n                setMode: k\n            };\n        };\n        Stats.Panel = function(h, k, l) {\n            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n            q.width = r;\n            q.height = f;\n            q.style.cssText = \"width:80px;height:48px\";\n            var b = q.getContext(\"2d\");\n            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n            b.textBaseline = \"top\";\n            b.fillStyle = l;\n            b.fillRect(0, 0, r, f);\n            b.fillStyle = k;\n            b.fillText(h, t, u);\n            b.fillRect(d, m, n, p);\n            b.fillStyle = l;\n            b.globalAlpha = .9;\n            b.fillRect(d, m, n, p);\n            return {\n                dom: q,\n                update: function(f, v) {\n                    c = Math.min(c, f);\n                    g = Math.max(g, f);\n                    b.fillStyle = l;\n                    b.globalAlpha = 1;\n                    b.fillRect(0, 0, r, m);\n                    b.fillStyle = k;\n                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                    b.fillRect(d + n - a, m, a, p);\n                    b.fillStyle = l;\n                    b.globalAlpha = .9;\n                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n                }\n            };\n        };\n        \"object\" === typeof module && (module.exports = Stats);\n    }, function(module, exports) {\n        THREE.SpriteCanvasMaterial = function(parameters) {\n            THREE.Material.call(this);\n            this.type = \"SpriteCanvasMaterial\";\n            this.color = new THREE.Color(16777215);\n            this.program = function(context, color) {};\n            this.setValues(parameters);\n        };\n        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n            var material = new THREE.SpriteCanvasMaterial();\n            material.copy(this);\n            material.color.copy(this.color);\n            material.program = this.program;\n            return material;\n        };\n        THREE.CanvasRenderer = function(parameters) {\n            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n            parameters = parameters || {};\n            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n                alpha: parameters.alpha === true\n            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n            if (_context.setLineDash === undefined) {\n                _context.setLineDash = function() {};\n            }\n            this.domElement = _canvas;\n            this.autoClear = true;\n            this.sortObjects = true;\n            this.sortElements = true;\n            this.info = {\n                render: {\n                    vertices: 0,\n                    faces: 0\n                }\n            };\n            this.supportsVertexTextures = function() {};\n            this.setFaceCulling = function() {};\n            this.getContext = function() {\n                return _context;\n            };\n            this.getContextAttributes = function() {\n                return _context.getContextAttributes();\n            };\n            this.getPixelRatio = function() {\n                return _pixelRatio;\n            };\n            this.setPixelRatio = function(value) {\n                if (value !== undefined) _pixelRatio = value;\n            };\n            this.setSize = function(width, height, updateStyle) {\n                _canvasWidth = width * _pixelRatio;\n                _canvasHeight = height * _pixelRatio;\n                _canvas.width = _canvasWidth;\n                _canvas.height = _canvasHeight;\n                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n                if (updateStyle !== false) {\n                    _canvas.style.width = width + \"px\";\n                    _canvas.style.height = height + \"px\";\n                }\n                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _contextGlobalAlpha = 1;\n                _contextGlobalCompositeOperation = 0;\n                _contextStrokeStyle = null;\n                _contextFillStyle = null;\n                _contextLineWidth = null;\n                _contextLineCap = null;\n                _contextLineJoin = null;\n                this.setViewport(0, 0, width, height);\n            };\n            this.setViewport = function(x, y, width, height) {\n                _viewportX = x * _pixelRatio;\n                _viewportY = y * _pixelRatio;\n                _viewportWidth = width * _pixelRatio;\n                _viewportHeight = height * _pixelRatio;\n            };\n            this.setScissor = function() {};\n            this.setScissorTest = function() {};\n            this.setClearColor = function(color, alpha) {\n                _clearColor.set(color);\n                _clearAlpha = alpha !== undefined ? alpha : 1;\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n            };\n            this.setClearColorHex = function(hex, alpha) {\n                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n                this.setClearColor(hex, alpha);\n            };\n            this.getClearColor = function() {\n                return _clearColor;\n            };\n            this.getClearAlpha = function() {\n                return _clearAlpha;\n            };\n            this.getMaxAnisotropy = function() {\n                return 0;\n            };\n            this.clear = function() {\n                if (_clearBox.isEmpty() === false) {\n                    _clearBox.intersect(_clipBox);\n                    _clearBox.expandByScalar(2);\n                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n                    if (_clearAlpha < 1) {\n                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    if (_clearAlpha > 0) {\n                        setBlending(THREE.NormalBlending);\n                        setOpacity(1);\n                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    _clearBox.makeEmpty();\n                }\n            };\n            this.clearColor = function() {};\n            this.clearDepth = function() {};\n            this.clearStencil = function() {};\n            this.render = function(scene, camera) {\n                if (camera instanceof THREE.Camera === false) {\n                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n                    return;\n                }\n                if (this.autoClear === true) this.clear();\n                _this.info.render.vertices = 0;\n                _this.info.render.faces = 0;\n                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n                _elements = _renderData.elements;\n                _lights = _renderData.lights;\n                _camera = camera;\n                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n                calculateLights();\n                for (var e = 0, el = _elements.length; e < el; e++) {\n                    var element = _elements[e];\n                    var material = element.material;\n                    if (material === undefined || material.opacity === 0) continue;\n                    _elemBox.makeEmpty();\n                    if (element instanceof THREE.RenderableSprite) {\n                        _v1 = element;\n                        _v1.x *= _canvasWidthHalf;\n                        _v1.y *= _canvasHeightHalf;\n                        renderSprite(_v1, element, material);\n                    } else if (element instanceof THREE.RenderableLine) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderLine(_v1, _v2, element, material);\n                        }\n                    } else if (element instanceof THREE.RenderableFace) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v3 = element.v3;\n                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _v3.positionScreen.x *= _canvasWidthHalf;\n                        _v3.positionScreen.y *= _canvasHeightHalf;\n                        if (material.overdraw > 0) {\n                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n                        }\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n                        }\n                    }\n                    _clearBox.union(_elemBox);\n                }\n                _context.setTransform(1, 0, 0, 1, 0, 0);\n            };\n            function calculateLights() {\n                _ambientLight.setRGB(0, 0, 0);\n                _directionalLights.setRGB(0, 0, 0);\n                _pointLights.setRGB(0, 0, 0);\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    var lightColor = light.color;\n                    if (light instanceof THREE.AmbientLight) {\n                        _ambientLight.add(lightColor);\n                    } else if (light instanceof THREE.DirectionalLight) {\n                        _directionalLights.add(lightColor);\n                    } else if (light instanceof THREE.PointLight) {\n                        _pointLights.add(lightColor);\n                    }\n                }\n            }\n            function calculateLight(position, normal, color) {\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    _lightColor.copy(light.color);\n                    if (light instanceof THREE.DirectionalLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n                        var amount = normal.dot(lightPosition);\n                        if (amount <= 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    } else if (light instanceof THREE.PointLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n                        if (amount <= 0) continue;\n                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n                        if (amount == 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    }\n                }\n            }\n            function renderSprite(v1, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                var scaleX = element.scale.x * _canvasWidthHalf;\n                var scaleY = element.scale.y * _canvasHeightHalf;\n                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n                _elemBox.min.set(v1.x - dist, v1.y - dist);\n                _elemBox.max.set(v1.x + dist, v1.y + dist);\n                if (material instanceof THREE.SpriteMaterial) {\n                    var texture = material.map;\n                    if (texture !== null) {\n                        var pattern = _patterns[texture.id];\n                        if (pattern === undefined || pattern.version !== texture.version) {\n                            pattern = textureToPattern(texture);\n                            _patterns[texture.id] = pattern;\n                        }\n                        if (pattern.canvas !== undefined) {\n                            setFillStyle(pattern.canvas);\n                            var bitmap = texture.image;\n                            var ox = bitmap.width * texture.offset.x;\n                            var oy = bitmap.height * texture.offset.y;\n                            var sx = bitmap.width * texture.repeat.x;\n                            var sy = bitmap.height * texture.repeat.y;\n                            var cx = scaleX / sx;\n                            var cy = scaleY / sy;\n                            _context.save();\n                            _context.translate(v1.x, v1.y);\n                            if (material.rotation !== 0) _context.rotate(material.rotation);\n                            _context.translate(-scaleX / 2, -scaleY / 2);\n                            _context.scale(cx, cy);\n                            _context.translate(-ox, -oy);\n                            _context.fillRect(ox, oy, sx, sy);\n                            _context.restore();\n                        }\n                    } else {\n                        setFillStyle(material.color.getStyle());\n                        _context.save();\n                        _context.translate(v1.x, v1.y);\n                        if (material.rotation !== 0) _context.rotate(material.rotation);\n                        _context.scale(scaleX, -scaleY);\n                        _context.fillRect(-.5, -.5, 1, 1);\n                        _context.restore();\n                    }\n                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n                    setStrokeStyle(material.color.getStyle());\n                    setFillStyle(material.color.getStyle());\n                    _context.save();\n                    _context.translate(v1.x, v1.y);\n                    if (material.rotation !== 0) _context.rotate(material.rotation);\n                    _context.scale(scaleX, scaleY);\n                    material.program(_context);\n                    _context.restore();\n                }\n            }\n            function renderLine(v1, v2, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _context.beginPath();\n                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n                if (material instanceof THREE.LineBasicMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    if (material.vertexColors !== THREE.VertexColors) {\n                        setStrokeStyle(material.color.getStyle());\n                    } else {\n                        var colorStyle1 = element.vertexColors[0].getStyle();\n                        var colorStyle2 = element.vertexColors[1].getStyle();\n                        if (colorStyle1 === colorStyle2) {\n                            setStrokeStyle(colorStyle1);\n                        } else {\n                            try {\n                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n                                grad.addColorStop(0, colorStyle1);\n                                grad.addColorStop(1, colorStyle2);\n                            } catch (exception) {\n                                grad = colorStyle1;\n                            }\n                            setStrokeStyle(grad);\n                        }\n                    }\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                } else if (material instanceof THREE.LineDashedMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    setStrokeStyle(material.color.getStyle());\n                    setLineDash([ material.dashSize, material.gapSize ]);\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                    setLineDash([]);\n                }\n            }\n            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n                _this.info.render.vertices += 3;\n                _this.info.render.faces++;\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _v1x = v1.positionScreen.x;\n                _v1y = v1.positionScreen.y;\n                _v2x = v2.positionScreen.x;\n                _v2y = v2.positionScreen.y;\n                _v3x = v3.positionScreen.x;\n                _v3y = v3.positionScreen.y;\n                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n                    _diffuseColor.copy(material.color);\n                    _emissiveColor.copy(material.emissive);\n                    if (material.vertexColors === THREE.FaceColors) {\n                        _diffuseColor.multiply(element.color);\n                    }\n                    _color.copy(_ambientLight);\n                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n                    calculateLight(_centroid, element.normalModel, _color);\n                    _color.multiply(_diffuseColor).add(_emissiveColor);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n                    if (material.map !== null) {\n                        var mapping = material.map.mapping;\n                        if (mapping === THREE.UVMapping) {\n                            _uvs = element.uvs;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n                        }\n                    } else if (material.envMap !== null) {\n                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n                            _uv1x = .5 * _normal.x + .5;\n                            _uv1y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n                            _uv2x = .5 * _normal.x + .5;\n                            _uv2y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n                            _uv3x = .5 * _normal.x + .5;\n                            _uv3y = .5 * _normal.y + .5;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n                        }\n                    } else {\n                        _color.copy(material.color);\n                        if (material.vertexColors === THREE.FaceColors) {\n                            _color.multiply(element.color);\n                        }\n                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                    }\n                } else if (material instanceof THREE.MeshNormalMaterial) {\n                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else {\n                    _color.setRGB(1, 1, 1);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                }\n            }\n            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n                _context.beginPath();\n                _context.moveTo(x0, y0);\n                _context.lineTo(x1, y1);\n                _context.lineTo(x2, y2);\n                _context.closePath();\n            }\n            function strokePath(color, linewidth, linecap, linejoin) {\n                setLineWidth(linewidth);\n                setLineCap(linecap);\n                setLineJoin(linejoin);\n                setStrokeStyle(color.getStyle());\n                _context.stroke();\n                _elemBox.expandByScalar(linewidth * 2);\n            }\n            function fillPath(color) {\n                setFillStyle(color.getStyle());\n                _context.fill();\n            }\n            function textureToPattern(texture) {\n                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n                    return {\n                        canvas: undefined,\n                        version: texture.version\n                    };\n                }\n                var image = texture.image;\n                if (image.complete === false) {\n                    return {\n                        canvas: undefined,\n                        version: 0\n                    };\n                }\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                var context = canvas.getContext(\"2d\");\n                context.setTransform(1, 0, 0, -1, 0, image.height);\n                context.drawImage(image, 0, 0);\n                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n                var repeat = \"no-repeat\";\n                if (repeatX === true && repeatY === true) {\n                    repeat = \"repeat\";\n                } else if (repeatX === true) {\n                    repeat = \"repeat-x\";\n                } else if (repeatY === true) {\n                    repeat = \"repeat-y\";\n                }\n                var pattern = _context.createPattern(canvas, repeat);\n                if (texture.onUpdate) texture.onUpdate(texture);\n                return {\n                    canvas: pattern,\n                    version: texture.version\n                };\n            }\n            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n                var pattern = _patterns[texture.id];\n                if (pattern === undefined || pattern.version !== texture.version) {\n                    pattern = textureToPattern(texture);\n                    _patterns[texture.id] = pattern;\n                }\n                if (pattern.canvas !== undefined) {\n                    setFillStyle(pattern.canvas);\n                } else {\n                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n                    _context.fill();\n                    return;\n                }\n                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n                u0 = (u0 + offsetX) * width;\n                v0 = (v0 + offsetY) * height;\n                u1 = (u1 + offsetX) * width;\n                v1 = (v1 + offsetY) * height;\n                u2 = (u2 + offsetX) * width;\n                v2 = (v2 + offsetY) * height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                if (det === 0) return;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.fill();\n                _context.restore();\n            }\n            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n                u0 *= width;\n                v0 *= height;\n                u1 *= width;\n                v1 *= height;\n                u2 *= width;\n                v2 *= height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.clip();\n                _context.drawImage(image, 0, 0);\n                _context.restore();\n            }\n            function expand(v1, v2, pixels) {\n                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n                if (det === 0) return;\n                idet = pixels / Math.sqrt(det);\n                x *= idet;\n                y *= idet;\n                v2.x += x;\n                v2.y += y;\n                v1.x -= x;\n                v1.y -= y;\n            }\n            function setOpacity(value) {\n                if (_contextGlobalAlpha !== value) {\n                    _context.globalAlpha = value;\n                    _contextGlobalAlpha = value;\n                }\n            }\n            function setBlending(value) {\n                if (_contextGlobalCompositeOperation !== value) {\n                    if (value === THREE.NormalBlending) {\n                        _context.globalCompositeOperation = \"source-over\";\n                    } else if (value === THREE.AdditiveBlending) {\n                        _context.globalCompositeOperation = \"lighter\";\n                    } else if (value === THREE.SubtractiveBlending) {\n                        _context.globalCompositeOperation = \"darker\";\n                    } else if (value === THREE.MultiplyBlending) {\n                        _context.globalCompositeOperation = \"multiply\";\n                    }\n                    _contextGlobalCompositeOperation = value;\n                }\n            }\n            function setLineWidth(value) {\n                if (_contextLineWidth !== value) {\n                    _context.lineWidth = value;\n                    _contextLineWidth = value;\n                }\n            }\n            function setLineCap(value) {\n                if (_contextLineCap !== value) {\n                    _context.lineCap = value;\n                    _contextLineCap = value;\n                }\n            }\n            function setLineJoin(value) {\n                if (_contextLineJoin !== value) {\n                    _context.lineJoin = value;\n                    _contextLineJoin = value;\n                }\n            }\n            function setStrokeStyle(value) {\n                if (_contextStrokeStyle !== value) {\n                    _context.strokeStyle = value;\n                    _contextStrokeStyle = value;\n                }\n            }\n            function setFillStyle(value) {\n                if (_contextFillStyle !== value) {\n                    _context.fillStyle = value;\n                    _contextFillStyle = value;\n                }\n            }\n            function setLineDash(value) {\n                if (_contextLineDash.length !== value.length) {\n                    _context.setLineDash(value);\n                    _contextLineDash = value;\n                }\n            }\n        };\n    }, function(module, exports) {\n        THREE.RenderableObject = function() {\n            this.id = 0;\n            this.object = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableFace = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.v3 = new THREE.RenderableVertex();\n            this.normalModel = new THREE.Vector3();\n            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n            this.vertexNormalsLength = 0;\n            this.color = new THREE.Color();\n            this.material = null;\n            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableVertex = function() {\n            this.position = new THREE.Vector3();\n            this.positionWorld = new THREE.Vector3();\n            this.positionScreen = new THREE.Vector4();\n            this.visible = true;\n        };\n        THREE.RenderableVertex.prototype.copy = function(vertex) {\n            this.positionWorld.copy(vertex.positionWorld);\n            this.positionScreen.copy(vertex.positionScreen);\n        };\n        THREE.RenderableLine = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n            this.material = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableSprite = function() {\n            this.id = 0;\n            this.object = null;\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.rotation = 0;\n            this.scale = new THREE.Vector2();\n            this.material = null;\n            this.renderOrder = 0;\n        };\n        THREE.Projector = function() {\n            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n                objects: [],\n                lights: [],\n                elements: []\n            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n            this.projectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n                vector.project(camera);\n            };\n            this.unprojectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n                vector.unproject(camera);\n            };\n            this.pickingRay = function(vector, camera) {\n                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n            };\n            var RenderList = function() {\n                var normals = [];\n                var uvs = [];\n                var object = null;\n                var material = null;\n                var normalMatrix = new THREE.Matrix3();\n                function setObject(value) {\n                    object = value;\n                    material = object.material;\n                    normalMatrix.getNormalMatrix(object.matrixWorld);\n                    normals.length = 0;\n                    uvs.length = 0;\n                }\n                function projectVertex(vertex) {\n                    var position = vertex.position;\n                    var positionWorld = vertex.positionWorld;\n                    var positionScreen = vertex.positionScreen;\n                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n                    var invW = 1 / positionScreen.w;\n                    positionScreen.x *= invW;\n                    positionScreen.y *= invW;\n                    positionScreen.z *= invW;\n                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n                }\n                function pushVertex(x, y, z) {\n                    _vertex = getNextVertexInPool();\n                    _vertex.position.set(x, y, z);\n                    projectVertex(_vertex);\n                }\n                function pushNormal(x, y, z) {\n                    normals.push(x, y, z);\n                }\n                function pushUv(x, y) {\n                    uvs.push(x, y);\n                }\n                function checkTriangleVisibility(v1, v2, v3) {\n                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n                    _points3[0] = v1.positionScreen;\n                    _points3[1] = v2.positionScreen;\n                    _points3[2] = v3.positionScreen;\n                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n                }\n                function checkBackfaceCulling(v1, v2, v3) {\n                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n                }\n                function pushLine(a, b) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    _line = getNextLineInPool();\n                    _line.id = object.id;\n                    _line.v1.copy(v1);\n                    _line.v2.copy(v2);\n                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n                    _line.renderOrder = object.renderOrder;\n                    _line.material = object.material;\n                    _renderData.elements.push(_line);\n                }\n                function pushTriangle(a, b, c) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    var v3 = _vertexPool[c];\n                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n                        _face = getNextFaceInPool();\n                        _face.id = object.id;\n                        _face.v1.copy(v1);\n                        _face.v2.copy(v2);\n                        _face.v3.copy(v3);\n                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                        _face.renderOrder = object.renderOrder;\n                        _face.normalModel.fromArray(normals, a * 3);\n                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n                        for (var i = 0; i < 3; i++) {\n                            var normal = _face.vertexNormalsModel[i];\n                            normal.fromArray(normals, arguments[i] * 3);\n                            normal.applyMatrix3(normalMatrix).normalize();\n                            var uv = _face.uvs[i];\n                            uv.fromArray(uvs, arguments[i] * 2);\n                        }\n                        _face.vertexNormalsLength = 3;\n                        _face.material = object.material;\n                        _renderData.elements.push(_face);\n                    }\n                }\n                return {\n                    setObject: setObject,\n                    projectVertex: projectVertex,\n                    checkTriangleVisibility: checkTriangleVisibility,\n                    checkBackfaceCulling: checkBackfaceCulling,\n                    pushVertex: pushVertex,\n                    pushNormal: pushNormal,\n                    pushUv: pushUv,\n                    pushLine: pushLine,\n                    pushTriangle: pushTriangle\n                };\n            };\n            var renderList = new RenderList();\n            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n                _faceCount = 0;\n                _lineCount = 0;\n                _spriteCount = 0;\n                _renderData.elements.length = 0;\n                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n                if (camera.parent === null) camera.updateMatrixWorld();\n                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n                _frustum.setFromMatrix(_viewProjectionMatrix);\n                _objectCount = 0;\n                _renderData.objects.length = 0;\n                _renderData.lights.length = 0;\n                function addObject(object) {\n                    _object = getNextObjectInPool();\n                    _object.id = object.id;\n                    _object.object = object;\n                    _vector3.setFromMatrixPosition(object.matrixWorld);\n                    _vector3.applyProjection(_viewProjectionMatrix);\n                    _object.z = _vector3.z;\n                    _object.renderOrder = object.renderOrder;\n                    _renderData.objects.push(_object);\n                }\n                scene.traverseVisible(function(object) {\n                    if (object instanceof THREE.Light) {\n                        _renderData.lights.push(object);\n                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line) {\n                        if (object.material.visible === false) return;\n                        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n                        addObject(object);\n                    } else if (object instanceof THREE.Sprite) {\n                        if (object.material.visible === false) return;\n                        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n                        addObject(object);\n                    }\n                });\n                if (sortObjects === true) {\n                    _renderData.objects.sort(painterSort);\n                }\n                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n                    var object = _renderData.objects[o].object;\n                    var geometry = object.geometry;\n                    renderList.setObject(object);\n                    _modelMatrix = object.matrixWorld;\n                    _vertexCount = 0;\n                    if (object instanceof THREE.Mesh) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            var groups = geometry.groups;\n                            if (attributes.position === undefined) continue;\n                            var positions = attributes.position.array;\n                            for (var i = 0, l = positions.length; i < l; i += 3) {\n                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                            }\n                            if (attributes.normal !== undefined) {\n                                var normals = attributes.normal.array;\n                                for (var i = 0, l = normals.length; i < l; i += 3) {\n                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n                                }\n                            }\n                            if (attributes.uv !== undefined) {\n                                var uvs = attributes.uv.array;\n                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n                                }\n                            }\n                            if (geometry.index !== null) {\n                                var indices = geometry.index.array;\n                                if (groups.length > 0) {\n                                    for (var o = 0; o < groups.length; o++) {\n                                        var group = groups[o];\n                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                        }\n                                    }\n                                } else {\n                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                    }\n                                }\n                            } else {\n                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                                    renderList.pushTriangle(i, i + 1, i + 2);\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            var vertices = geometry.vertices;\n                            var faces = geometry.faces;\n                            var faceVertexUvs = geometry.faceVertexUvs[0];\n                            _normalMatrix.getNormalMatrix(_modelMatrix);\n                            var material = object.material;\n                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n                                var vertex = vertices[v];\n                                _vector3.copy(vertex);\n                                if (material.morphTargets === true) {\n                                    var morphTargets = geometry.morphTargets;\n                                    var morphInfluences = object.morphTargetInfluences;\n                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                                        var influence = morphInfluences[t];\n                                        if (influence === 0) continue;\n                                        var target = morphTargets[t];\n                                        var targetVertex = target.vertices[v];\n                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n                                    }\n                                }\n                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n                            }\n                            for (var f = 0, fl = faces.length; f < fl; f++) {\n                                var face = faces[f];\n                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n                                if (material === undefined) continue;\n                                var side = material.side;\n                                var v1 = _vertexPool[face.a];\n                                var v2 = _vertexPool[face.b];\n                                var v3 = _vertexPool[face.c];\n                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n                                if (side !== THREE.DoubleSide) {\n                                    if (side === THREE.FrontSide && visible === false) continue;\n                                    if (side === THREE.BackSide && visible === true) continue;\n                                }\n                                _face = getNextFaceInPool();\n                                _face.id = object.id;\n                                _face.v1.copy(v1);\n                                _face.v2.copy(v2);\n                                _face.v3.copy(v3);\n                                _face.normalModel.copy(face.normal);\n                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                    _face.normalModel.negate();\n                                }\n                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n                                var faceVertexNormals = face.vertexNormals;\n                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n                                    var normalModel = _face.vertexNormalsModel[n];\n                                    normalModel.copy(faceVertexNormals[n]);\n                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                        normalModel.negate();\n                                    }\n                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n                                }\n                                _face.vertexNormalsLength = faceVertexNormals.length;\n                                var vertexUvs = faceVertexUvs[f];\n                                if (vertexUvs !== undefined) {\n                                    for (var u = 0; u < 3; u++) {\n                                        _face.uvs[u].copy(vertexUvs[u]);\n                                    }\n                                }\n                                _face.color = face.color;\n                                _face.material = material;\n                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                                _face.renderOrder = object.renderOrder;\n                                _renderData.elements.push(_face);\n                            }\n                        }\n                    } else if (object instanceof THREE.Line) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            if (attributes.position !== undefined) {\n                                var positions = attributes.position.array;\n                                for (var i = 0, l = positions.length; i < l; i += 3) {\n                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                                }\n                                if (geometry.index !== null) {\n                                    var indices = geometry.index.array;\n                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n                                        renderList.pushLine(indices[i], indices[i + 1]);\n                                    }\n                                } else {\n                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                                        renderList.pushLine(i, i + 1);\n                                    }\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n                            var vertices = object.geometry.vertices;\n                            if (vertices.length === 0) continue;\n                            v1 = getNextVertexInPool();\n                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n                                v1 = getNextVertexInPool();\n                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n                                if ((v + 1) % step > 0) continue;\n                                v2 = _vertexPool[_vertexCount - 2];\n                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n                                    _line = getNextLineInPool();\n                                    _line.id = object.id;\n                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n                                    _line.renderOrder = object.renderOrder;\n                                    _line.material = object.material;\n                                    if (object.material.vertexColors === THREE.VertexColors) {\n                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                                    }\n                                    _renderData.elements.push(_line);\n                                }\n                            }\n                        }\n                    } else if (object instanceof THREE.Sprite) {\n                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n                        _vector4.applyMatrix4(_viewProjectionMatrix);\n                        var invW = 1 / _vector4.w;\n                        _vector4.z *= invW;\n                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n                            _sprite = getNextSpriteInPool();\n                            _sprite.id = object.id;\n                            _sprite.x = _vector4.x * invW;\n                            _sprite.y = _vector4.y * invW;\n                            _sprite.z = _vector4.z;\n                            _sprite.renderOrder = object.renderOrder;\n                            _sprite.object = object;\n                            _sprite.rotation = object.rotation;\n                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n                            _sprite.material = object.material;\n                            _renderData.elements.push(_sprite);\n                        }\n                    }\n                }\n                if (sortElements === true) {\n                    _renderData.elements.sort(painterSort);\n                }\n                return _renderData;\n            };\n            function getNextObjectInPool() {\n                if (_objectCount === _objectPoolLength) {\n                    var object = new THREE.RenderableObject();\n                    _objectPool.push(object);\n                    _objectPoolLength++;\n                    _objectCount++;\n                    return object;\n                }\n                return _objectPool[_objectCount++];\n            }\n            function getNextVertexInPool() {\n                if (_vertexCount === _vertexPoolLength) {\n                    var vertex = new THREE.RenderableVertex();\n                    _vertexPool.push(vertex);\n                    _vertexPoolLength++;\n                    _vertexCount++;\n                    return vertex;\n                }\n                return _vertexPool[_vertexCount++];\n            }\n            function getNextFaceInPool() {\n                if (_faceCount === _facePoolLength) {\n                    var face = new THREE.RenderableFace();\n                    _facePool.push(face);\n                    _facePoolLength++;\n                    _faceCount++;\n                    return face;\n                }\n                return _facePool[_faceCount++];\n            }\n            function getNextLineInPool() {\n                if (_lineCount === _linePoolLength) {\n                    var line = new THREE.RenderableLine();\n                    _linePool.push(line);\n                    _linePoolLength++;\n                    _lineCount++;\n                    return line;\n                }\n                return _linePool[_lineCount++];\n            }\n            function getNextSpriteInPool() {\n                if (_spriteCount === _spritePoolLength) {\n                    var sprite = new THREE.RenderableSprite();\n                    _spritePool.push(sprite);\n                    _spritePoolLength++;\n                    _spriteCount++;\n                    return sprite;\n                }\n                return _spritePool[_spriteCount++];\n            }\n            function painterSort(a, b) {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                } else if (a.z !== b.z) {\n                    return b.z - a.z;\n                } else if (a.id !== b.id) {\n                    return a.id - b.id;\n                } else {\n                    return 0;\n                }\n            }\n            function clipLine(s1, s2) {\n                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n                    return true;\n                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n                    return false;\n                } else {\n                    if (bc1near < 0) {\n                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n                    } else if (bc2near < 0) {\n                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n                    }\n                    if (bc1far < 0) {\n                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n                    } else if (bc2far < 0) {\n                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n                    }\n                    if (alpha2 < alpha1) {\n                        return false;\n                    } else {\n                        s1.lerp(s2, alpha1);\n                        s2.lerp(s1, 1 - alpha2);\n                        return true;\n                    }\n                }\n            }\n        };\n    }, function(module, exports, __webpack_require__) {\n        /*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        var isObject = __webpack_require__(8);\n        function isObjectObject(o) {\n            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n        }\n        module.exports = function isPlainObject(o) {\n            var ctor, prot;\n            if (isObjectObject(o) === false) return false;\n            ctor = o.constructor;\n            if (typeof ctor !== \"function\") return false;\n            prot = ctor.prototype;\n            if (isObjectObject(prot) === false) return false;\n            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n                return false;\n            }\n            return true;\n        };\n    }, function(module, exports) {\n        /*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        module.exports = function isObject(val) {\n            return val != null && typeof val === \"object\" && !Array.isArray(val);\n        };\n    }, function(module, exports, __webpack_require__) {\n        var __WEBPACK_AMD_DEFINE_RESULT__;\n        !function(undefined) {\n            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n                return Object.prototype.toString.call(obj) === \"[object Array]\";\n            };\n            var defaultMaxListeners = 10;\n            function init() {\n                this._events = {};\n                if (this._conf) {\n                    configure.call(this, this._conf);\n                }\n            }\n            function configure(conf) {\n                if (conf) {\n                    this._conf = conf;\n                    conf.delimiter && (this.delimiter = conf.delimiter);\n                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n                    conf.wildcard && (this.wildcard = conf.wildcard);\n                    conf.newListener && (this.newListener = conf.newListener);\n                    if (this.wildcard) {\n                        this.listenerTree = {};\n                    }\n                }\n            }\n            function EventEmitter(conf) {\n                this._events = {};\n                this.newListener = false;\n                configure.call(this, conf);\n            }\n            function searchListenerTree(handlers, type, tree, i) {\n                if (!tree) {\n                    return [];\n                }\n                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n                if (i === typeLength && tree._listeners) {\n                    if (typeof tree._listeners === \"function\") {\n                        handlers && handlers.push(tree._listeners);\n                        return [ tree ];\n                    } else {\n                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n                            handlers && handlers.push(tree._listeners[leaf]);\n                        }\n                        return [ tree ];\n                    }\n                }\n                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n                    if (currentType === \"*\") {\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n                            }\n                        }\n                        return listeners;\n                    } else if (currentType === \"**\") {\n                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n                        if (endReached && tree._listeners) {\n                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n                        }\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                if (branch === \"*\" || branch === \"**\") {\n                                    if (tree[branch]._listeners && !endReached) {\n                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n                                    }\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                } else if (branch === nextType) {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n                                } else {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                }\n                            }\n                        }\n                        return listeners;\n                    }\n                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n                }\n                xTree = tree[\"*\"];\n                if (xTree) {\n                    searchListenerTree(handlers, type, xTree, i + 1);\n                }\n                xxTree = tree[\"**\"];\n                if (xxTree) {\n                    if (i < typeLength) {\n                        if (xxTree._listeners) {\n                            searchListenerTree(handlers, type, xxTree, typeLength);\n                        }\n                        for (branch in xxTree) {\n                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n                                if (branch === nextType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n                                } else if (branch === currentType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n                                } else {\n                                    isolatedBranch = {};\n                                    isolatedBranch[branch] = xxTree[branch];\n                                    searchListenerTree(handlers, type, {\n                                        \"**\": isolatedBranch\n                                    }, i + 1);\n                                }\n                            }\n                        }\n                    } else if (xxTree._listeners) {\n                        searchListenerTree(handlers, type, xxTree, typeLength);\n                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n                    }\n                }\n                return listeners;\n            }\n            function growListenerTree(type, listener) {\n                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                for (var i = 0, len = type.length; i + 1 < len; i++) {\n                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n                        return;\n                    }\n                }\n                var tree = this.listenerTree;\n                var name = type.shift();\n                while (name) {\n                    if (!tree[name]) {\n                        tree[name] = {};\n                    }\n                    tree = tree[name];\n                    if (type.length === 0) {\n                        if (!tree._listeners) {\n                            tree._listeners = listener;\n                        } else if (typeof tree._listeners === \"function\") {\n                            tree._listeners = [ tree._listeners, listener ];\n                        } else if (isArray(tree._listeners)) {\n                            tree._listeners.push(listener);\n                            if (!tree._listeners.warned) {\n                                var m = defaultMaxListeners;\n                                if (typeof this._events.maxListeners !== \"undefined\") {\n                                    m = this._events.maxListeners;\n                                }\n                                if (m > 0 && tree._listeners.length > m) {\n                                    tree._listeners.warned = true;\n                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n                                    console.trace();\n                                }\n                            }\n                        }\n                        return true;\n                    }\n                    name = type.shift();\n                }\n                return true;\n            }\n            EventEmitter.prototype.delimiter = \".\";\n            EventEmitter.prototype.setMaxListeners = function(n) {\n                this._events || init.call(this);\n                this._events.maxListeners = n;\n                if (!this._conf) this._conf = {};\n                this._conf.maxListeners = n;\n            };\n            EventEmitter.prototype.event = \"\";\n            EventEmitter.prototype.once = function(event, fn) {\n                this.many(event, 1, fn);\n                return this;\n            };\n            EventEmitter.prototype.many = function(event, ttl, fn) {\n                var self = this;\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"many only accepts instances of Function\");\n                }\n                function listener() {\n                    if (--ttl === 0) {\n                        self.off(event, listener);\n                    }\n                    fn.apply(this, arguments);\n                }\n                listener._origin = fn;\n                this.on(event, listener);\n                return self;\n            };\n            EventEmitter.prototype.emit = function() {\n                this._events || init.call(this);\n                var type = arguments[0];\n                if (type === \"newListener\" && !this.newListener) {\n                    if (!this._events.newListener) {\n                        return false;\n                    }\n                }\n                if (this._all) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    for (i = 0, l = this._all.length; i < l; i++) {\n                        this.event = type;\n                        this._all[i].apply(this, args);\n                    }\n                }\n                if (type === \"error\") {\n                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n                        if (arguments[1] instanceof Error) {\n                            throw arguments[1];\n                        } else {\n                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n                        }\n                        return false;\n                    }\n                }\n                var handler;\n                if (this.wildcard) {\n                    handler = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n                } else {\n                    handler = this._events[type];\n                }\n                if (typeof handler === \"function\") {\n                    this.event = type;\n                    if (arguments.length === 1) {\n                        handler.call(this);\n                    } else if (arguments.length > 1) switch (arguments.length) {\n                      case 2:\n                        handler.call(this, arguments[1]);\n                        break;\n\n                      case 3:\n                        handler.call(this, arguments[1], arguments[2]);\n                        break;\n\n                      default:\n                        var l = arguments.length;\n                        var args = new Array(l - 1);\n                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                        handler.apply(this, args);\n                    }\n                    return true;\n                } else if (handler) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    var listeners = handler.slice();\n                    for (var i = 0, l = listeners.length; i < l; i++) {\n                        this.event = type;\n                        listeners[i].apply(this, args);\n                    }\n                    return listeners.length > 0 || !!this._all;\n                } else {\n                    return !!this._all;\n                }\n            };\n            EventEmitter.prototype.on = function(type, listener) {\n                if (typeof type === \"function\") {\n                    this.onAny(type);\n                    return this;\n                }\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"on only accepts instances of Function\");\n                }\n                this._events || init.call(this);\n                this.emit(\"newListener\", type, listener);\n                if (this.wildcard) {\n                    growListenerTree.call(this, type, listener);\n                    return this;\n                }\n                if (!this._events[type]) {\n                    this._events[type] = listener;\n                } else if (typeof this._events[type] === \"function\") {\n                    this._events[type] = [ this._events[type], listener ];\n                } else if (isArray(this._events[type])) {\n                    this._events[type].push(listener);\n                    if (!this._events[type].warned) {\n                        var m = defaultMaxListeners;\n                        if (typeof this._events.maxListeners !== \"undefined\") {\n                            m = this._events.maxListeners;\n                        }\n                        if (m > 0 && this._events[type].length > m) {\n                            this._events[type].warned = true;\n                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n                            console.trace();\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.onAny = function(fn) {\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"onAny only accepts instances of Function\");\n                }\n                if (!this._all) {\n                    this._all = [];\n                }\n                this._all.push(fn);\n                return this;\n            };\n            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n            EventEmitter.prototype.off = function(type, listener) {\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"removeListener only takes instances of Function\");\n                }\n                var handlers, leafs = [];\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                } else {\n                    if (!this._events[type]) return this;\n                    handlers = this._events[type];\n                    leafs.push({\n                        _listeners: handlers\n                    });\n                }\n                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                    var leaf = leafs[iLeaf];\n                    handlers = leaf._listeners;\n                    if (isArray(handlers)) {\n                        var position = -1;\n                        for (var i = 0, length = handlers.length; i < length; i++) {\n                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n                                position = i;\n                                break;\n                            }\n                        }\n                        if (position < 0) {\n                            continue;\n                        }\n                        if (this.wildcard) {\n                            leaf._listeners.splice(position, 1);\n                        } else {\n                            this._events[type].splice(position, 1);\n                        }\n                        if (handlers.length === 0) {\n                            if (this.wildcard) {\n                                delete leaf._listeners;\n                            } else {\n                                delete this._events[type];\n                            }\n                        }\n                        return this;\n                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n                        if (this.wildcard) {\n                            delete leaf._listeners;\n                        } else {\n                            delete this._events[type];\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.offAny = function(fn) {\n                var i = 0, l = 0, fns;\n                if (fn && this._all && this._all.length > 0) {\n                    fns = this._all;\n                    for (i = 0, l = fns.length; i < l; i++) {\n                        if (fn === fns[i]) {\n                            fns.splice(i, 1);\n                            return this;\n                        }\n                    }\n                } else {\n                    this._all = [];\n                }\n                return this;\n            };\n            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n            EventEmitter.prototype.removeAllListeners = function(type) {\n                if (arguments.length === 0) {\n                    !this._events || init.call(this);\n                    return this;\n                }\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                        var leaf = leafs[iLeaf];\n                        leaf._listeners = null;\n                    }\n                } else {\n                    if (!this._events[type]) return this;\n                    this._events[type] = null;\n                }\n                return this;\n            };\n            EventEmitter.prototype.listeners = function(type) {\n                if (this.wildcard) {\n                    var handlers = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n                    return handlers;\n                }\n                this._events || init.call(this);\n                if (!this._events[type]) this._events[type] = [];\n                if (!isArray(this._events[type])) {\n                    this._events[type] = [ this._events[type] ];\n                }\n                return this._events[type];\n            };\n            EventEmitter.prototype.listenersAny = function() {\n                if (this._all) {\n                    return this._all;\n                } else {\n                    return [];\n                }\n            };\n            if (true) {\n                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n                    return EventEmitter;\n                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n            } else if (typeof exports === \"object\") {\n                exports.EventEmitter2 = EventEmitter;\n            } else {\n                window.EventEmitter2 = EventEmitter;\n            }\n        }();\n    }, function(module, exports) {\n        module.exports = {\n            Promise: window[\"Promise\"]\n        };\n    }, function(module, exports) {\n        (function() {\n            var ResizeSensor = function(element, callback) {\n                function EventQueue() {\n                    this.q = [];\n                    this.add = function(ev) {\n                        this.q.push(ev);\n                    };\n                    var i, j;\n                    this.call = function() {\n                        for (i = 0, j = this.q.length; i < j; i++) {\n                            this.q[i].call();\n                        }\n                    };\n                }\n                function getComputedStyle(element, prop) {\n                    if (element.currentStyle) {\n                        return element.currentStyle[prop];\n                    } else if (window.getComputedStyle) {\n                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n                    } else {\n                        return element.style[prop];\n                    }\n                }\n                function attachResizeEvent(element, resized) {\n                    if (!element.resizedAttached) {\n                        element.resizedAttached = new EventQueue();\n                        element.resizedAttached.add(resized);\n                    } else if (element.resizedAttached) {\n                        element.resizedAttached.add(resized);\n                        return;\n                    }\n                    element.resizeSensor = document.createElement(\"div\");\n                    element.resizeSensor.className = \"resize-sensor\";\n                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n                    element.resizeSensor.style.cssText = style;\n                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n                    element.appendChild(element.resizeSensor);\n                    if (!{\n                        fixed: 1,\n                        absolute: 1\n                    }[getComputedStyle(element, \"position\")]) {\n                        element.style.position = \"relative\";\n                    }\n                    var expand = element.resizeSensor.childNodes[0];\n                    var expandChild = expand.childNodes[0];\n                    var shrink = element.resizeSensor.childNodes[1];\n                    var shrinkChild = shrink.childNodes[0];\n                    var lastWidth, lastHeight;\n                    var reset = function() {\n                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n                        expand.scrollLeft = expand.scrollWidth;\n                        expand.scrollTop = expand.scrollHeight;\n                        shrink.scrollLeft = shrink.scrollWidth;\n                        shrink.scrollTop = shrink.scrollHeight;\n                        lastWidth = element.offsetWidth;\n                        lastHeight = element.offsetHeight;\n                    };\n                    reset();\n                    var changed = function() {\n                        if (element.resizedAttached) {\n                            element.resizedAttached.call();\n                        }\n                    };\n                    var addEvent = function(el, name, cb) {\n                        if (el.attachEvent) {\n                            el.attachEvent(\"on\" + name, cb);\n                        } else {\n                            el.addEventListener(name, cb);\n                        }\n                    };\n                    var onScroll = function() {\n                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                            changed();\n                        }\n                        reset();\n                    };\n                    addEvent(expand, \"scroll\", onScroll);\n                    addEvent(shrink, \"scroll\", onScroll);\n                }\n                var elementType = Object.prototype.toString.call(element);\n                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n                if (isCollectionTyped) {\n                    var i = 0, j = element.length;\n                    for (;i < j; i++) {\n                        attachResizeEvent(element[i], callback);\n                    }\n                } else {\n                    attachResizeEvent(element, callback);\n                }\n                this.detach = function() {\n                    if (isCollectionTyped) {\n                        var i = 0, j = element.length;\n                        for (;i < j; i++) {\n                            ResizeSensor.detach(element[i]);\n                        }\n                    } else {\n                        ResizeSensor.detach(element);\n                    }\n                };\n            };\n            ResizeSensor.detach = function(element) {\n                if (element.resizeSensor) {\n                    element.removeChild(element.resizeSensor);\n                    delete element.resizeSensor;\n                    delete element.resizedAttached;\n                }\n            };\n            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n                module.exports = ResizeSensor;\n            } else {\n                window.ResizeSensor = ResizeSensor;\n            }\n        })();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var Trend_1 = __webpack_require__(13);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var Utils_1 = __webpack_require__(14);\n        var Widget_1 = __webpack_require__(17);\n        var TrendsManager_1 = __webpack_require__(18);\n        var Screen_1 = __webpack_require__(19);\n        var AxisMarks_1 = __webpack_require__(20);\n        var interfaces_1 = __webpack_require__(21);\n        var deps_1 = __webpack_require__(3);\n        var CHART_STATE_EVENTS = {\n            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n            READY: \"ready\",\n            DESTROY: \"destroy\",\n            CHANGE: \"change\",\n            TREND_CHANGE: \"trendChange\",\n            TRENDS_CHANGE: \"trendsChange\",\n            ZOOM: \"zoom\",\n            RESIZE: \"resize\",\n            SCROLL: \"scroll\",\n            SCROLL_STOP: \"scrollStop\",\n            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n        };\n        var ChartState = function() {\n            function ChartState(initialState, widgetsClasses, plugins) {\n                if (widgetsClasses === void 0) {\n                    widgetsClasses = {};\n                }\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.data = {\n                    prevState: {},\n                    $el: null,\n                    zoom: 0,\n                    xAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n                            from: 0,\n                            to: 0,\n                            scroll: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 0,\n                                end: 5\n                            },\n                            margin: {\n                                start: 0,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 100,\n                        autoScroll: true,\n                        marks: []\n                    },\n                    yAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n                            from: 0,\n                            to: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 5,\n                                end: 5\n                            },\n                            margin: {\n                                start: 5,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 50,\n                        marks: []\n                    },\n                    animations: {\n                        enabled: true,\n                        trendChangeSpeed: .5,\n                        trendChangeEase: void 0,\n                        zoomSpeed: .25,\n                        zoomEase: void 0,\n                        scrollSpeed: .5,\n                        scrollEase: Linear.easeNone,\n                        autoScrollSpeed: 1,\n                        autoScrollEase: Linear.easeNone\n                    },\n                    autoRender: {\n                        enabled: true,\n                        fps: 0\n                    },\n                    autoResize: true,\n                    renderer: \"WebGLRenderer\",\n                    autoScroll: true,\n                    controls: {\n                        enabled: true\n                    },\n                    trendDefaultState: {\n                        enabled: true,\n                        type: Trend_1.TREND_TYPE.LINE,\n                        data: [],\n                        maxSegmentLength: 1e3,\n                        lineWidth: 2,\n                        lineColor: 16777215,\n                        hasBackground: false,\n                        backgroundColor: \"rgba(#5273BD, 0.15)\",\n                        hasBeacon: false,\n                        settingsForTypes: {\n                            CANDLE: {\n                                minSegmentLengthInPx: 20,\n                                maxSegmentLengthInPx: 40\n                            },\n                            LINE: {\n                                minSegmentLengthInPx: 2,\n                                maxSegmentLengthInPx: 10\n                            }\n                        }\n                    },\n                    cursor: {\n                        dragMode: false,\n                        x: 0,\n                        y: 0\n                    },\n                    backgroundColor: 0,\n                    backgroundOpacity: 1,\n                    showStats: false,\n                    pluginsState: {},\n                    eventEmitterMaxListeners: 20,\n                    maxVisibleSegments: 1280\n                };\n                this.widgetsClasses = {};\n                this.plugins = {};\n                this.isReady = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n                this.widgetsClasses = widgetsClasses;\n                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n                initialState.trends = this.trendsManager.calculatedOptions;\n                initialState = this.installPlugins(plugins, initialState);\n                this.setState(initialState);\n                this.setState({\n                    computedData: this.getComputedData()\n                });\n                this.savePrevState();\n                this.screen = new Screen_1.Screen(this);\n                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n                this.initListeners();\n                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n                this.isReady = true;\n                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n            }\n            ChartState.prototype.destroy = function() {\n                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n                this.ee.removeAllListeners();\n                this.data = {};\n            };\n            ChartState.prototype.onDestroy = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n            };\n            ChartState.prototype.onInitialStateApplied = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n            };\n            ChartState.prototype.onReady = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n            };\n            ChartState.prototype.onChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n            };\n            ChartState.prototype.onTrendChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n            };\n            ChartState.prototype.onTrendsChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n            };\n            ChartState.prototype.onScrollStop = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n            };\n            ChartState.prototype.onScroll = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n            };\n            ChartState.prototype.onZoom = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n            };\n            ChartState.prototype.onResize = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n            };\n            ChartState.prototype.onPluginsStateChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n            };\n            ChartState.prototype.getTrend = function(trendName) {\n                return this.trendsManager.getTrend(trendName);\n            };\n            ChartState.prototype.setState = function(newState, eventData, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var stateData = this.data;\n                var changedProps = {};\n                for (var key in newState) {\n                    if (stateData[key] !== newState[key]) {\n                        changedProps[key] = newState[key];\n                    }\n                }\n                this.savePrevState(changedProps);\n                var trendsData = {};\n                if (newState.trends) for (var trendName in newState.trends) {\n                    var trendOptions = newState.trends[trendName];\n                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n                    delete trendOptions.data;\n                }\n                var newStateContainsData = Object.keys(trendsData).length > 0;\n                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n                if (newStateContainsData) for (var trendName in trendsData) {\n                    this.data.trends[trendName].data = trendsData[trendName];\n                }\n                if (silent) return;\n                var recalculateResult = this.recalculateState(changedProps);\n                changedProps = recalculateResult.changedProps;\n                this.emitChangedStateEvents(changedProps, eventData);\n            };\n            ChartState.prototype.recalculateState = function(changedProps) {\n                var data = this.data;\n                var patch = {};\n                var actualData = Utils_1.Utils.deepMerge({}, data);\n                if (changedProps.widgets || !data.widgets) {\n                    patch.widgets = {};\n                    var widgetsOptions = data.widgets || {};\n                    for (var widgetName in this.widgetsClasses) {\n                        var WidgetClass = this.widgetsClasses[widgetName];\n                        var userOptions = widgetsOptions[widgetName] || {};\n                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n                    }\n                }\n                var cursorOptions = changedProps.cursor;\n                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n                if (isMouseDrag) {\n                    var oldX = data.prevState.cursor.x;\n                    var currentX = cursorOptions.x;\n                    var currentScroll = data.xAxis.range.scroll;\n                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n                    patch.xAxis = {\n                        range: {\n                            scroll: currentScroll + deltaXVal\n                        }\n                    };\n                    actualData = Utils_1.Utils.deepMerge(actualData, {\n                        xAxis: patch.xAxis\n                    });\n                }\n                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n                var scrollXChanged = false;\n                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n                if (needToRecalculateXAxis) {\n                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n                    if (xAxisPatch) {\n                        scrollXChanged = true;\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            xAxis: xAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            xAxis: xAxisPatch\n                        });\n                    }\n                }\n                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n                if (needToRecalculateYAxis) {\n                    var yAxisPatch = this.recalculateYAxis(actualData);\n                    if (yAxisPatch) {\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            yAxis: yAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            yAxis: yAxisPatch\n                        });\n                    }\n                }\n                this.savePrevState(patch);\n                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n                patch.computedData = this.getComputedData(allChangedProps);\n                this.savePrevState(patch);\n                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n                return {\n                    changedProps: allChangedProps,\n                    patch: patch\n                };\n            };\n            ChartState.prototype.getComputedData = function(changedProps) {\n                var computeAll = !changedProps;\n                var computedData = {};\n                if (computeAll || changedProps.trends && this.trendsManager) {\n                    computedData.trends = {\n                        maxXVal: this.trendsManager.getEndXVal(),\n                        minXVal: this.trendsManager.getStartXVal()\n                    };\n                }\n                return computedData;\n            };\n            ChartState.prototype.savePrevState = function(changedProps) {\n                if (!changedProps) changedProps = this.data;\n                var prevState = this.data.prevState;\n                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n            };\n            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n                var prevState = this.data.prevState;\n                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n                for (var key in changedProps) {\n                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n                }\n                if (!this.isReady) return;\n                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n                var resizeEventNeeded = changedProps.width || changedProps.height;\n                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n            };\n            ChartState.prototype.installPlugins = function(plugins, initialState) {\n                var _this = this;\n                initialState.pluginsState = {};\n                plugins.forEach(function(plugin) {\n                    var PluginClass = plugin.constructor;\n                    var pluginName = PluginClass.NAME;\n                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n                    });\n                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n                    _this.plugins[pluginName] = plugin;\n                    plugin.setupChartState(_this);\n                });\n                return initialState;\n            };\n            ChartState.prototype.getPlugin = function(pluginName) {\n                return this.plugins[pluginName];\n            };\n            ChartState.prototype.initListeners = function() {\n                var _this = this;\n                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n                    _this.handleTrendsChange(changedTrends, newData);\n                });\n            };\n            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n                for (var trendName in changedTrends) {\n                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n                }\n            };\n            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n                var axisRange = actualData.xAxis.range;\n                var patch = {\n                    range: {}\n                };\n                var isInitialize = axisRange.zeroVal == void 0;\n                var zeroVal, scaleFactor;\n                var zoom = axisRange.zoom;\n                if (axisRange.isMirrorMode) {\n                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n                }\n                if (isInitialize) {\n                    zeroVal = axisRange.from;\n                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                } else {\n                    zeroVal = axisRange.zeroVal;\n                    scaleFactor = axisRange.scaleFactor;\n                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n                        if (changedProps.xAxis.range.zoom) {\n                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n                        }\n                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                        patch.range.scroll = axisRange.from - zeroVal;\n                        patch.range.zoom = currentScaleFactor / scaleFactor;\n                        return patch;\n                    }\n                }\n                do {\n                    var from = zeroVal + axisRange.scroll;\n                    var to = from + actualData.width / (scaleFactor * zoom);\n                    var rangeLength = to - from;\n                    var needToRecalculateZoom = false;\n                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n                    if (needToRecalculateZoom) {\n                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n                        var zoom = zoom * fixScale;\n                        patch.range.zoom = zoom;\n                    }\n                } while (needToRecalculateZoom);\n                patch.range.from = from;\n                patch.range.to = to;\n                return patch;\n            };\n            ChartState.prototype.recalculateYAxis = function(actualData) {\n                var patch = {\n                    range: {}\n                };\n                var yAxisRange = actualData.yAxis.range;\n                var isInitialize = yAxisRange.scaleFactor == void 0;\n                var trends = this.trendsManager;\n                var trendsEndXVal = trends.getEndXVal();\n                var trendsStartXVal = trends.getStartXVal();\n                var xRange = actualData.xAxis.range;\n                var xFrom = xRange.from, xTo = xRange.to;\n                var xRangeLength = xTo - xFrom;\n                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n                if (xTo > trendsEndXVal) {\n                    xTo = trendsEndXVal;\n                    xFrom = xTo - xRangeLength;\n                } else if (xFrom < trendsStartXVal) {\n                    xFrom = trendsStartXVal;\n                    xTo = xFrom + xRangeLength;\n                }\n                var maxY = trends.getMaxYVal(xFrom, xTo);\n                var minY = trends.getMinYVal(xFrom, xTo);\n                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n                    if (trendLastY > maxY) maxY = trendLastY;\n                    if (trendLastY < minY) minY = trendLastY;\n                }\n                if (yAxisRange.isMirrorMode) {\n                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n                }\n                var margin = yAxisRange.margin;\n                var padding = {\n                    start: yAxisRange.padding.start + margin.start,\n                    end: yAxisRange.padding.end + margin.end\n                };\n                if (padding.end + padding.start >= actualData.height) {\n                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n                }\n                var rangeLength = maxY - minY;\n                var paddingTopInPercents = padding.end / actualData.height;\n                var paddingBottomInPercents = padding.start / actualData.height;\n                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n                if (isInitialize) {\n                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n                    scaleFactor = actualData.height / (toVal - fromVal);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                    needToZoom = true;\n                } else {\n                    scaleFactor = yAxisRange.scaleFactor;\n                    zeroVal = yAxisRange.zeroVal;\n                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n                }\n                if (!needToZoom) return null;\n                scroll = fromVal - zeroVal;\n                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n                var currentAxisRange = this.data.yAxis.range;\n                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n                return patch;\n            };\n            ChartState.prototype.zoom = function(zoomValue, origin) {\n                var _this = this;\n                if (origin === void 0) {\n                    origin = .5;\n                }\n                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n                var newZoom = zoom * zoomValue;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                var nextRange = this.data.width / (scaleFactor * newZoom);\n                var newScroll = scroll + (currentRange - nextRange) * origin;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            zoom: newZoom,\n                            scroll: newScroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.zoomToRange = function(range, origin) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                return this.zoom(currentRange / range, origin);\n            };\n            ChartState.prototype.scrollToEnd = function() {\n                var _this = this;\n                var state = this.data;\n                var endXVal = this.trendsManager.getEndXVal();\n                var range = state.xAxis.range;\n                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            scroll: scroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getValueOnXAxis = function(x) {\n                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.getValueByScreenX = function(x) {\n                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.getValueByScreenY = function(y) {\n                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByYAxis(y);\n            };\n            ChartState.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenYByValue = function(yVal) {\n                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            ChartState.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            ChartState.prototype.getScreenLeftVal = function() {\n                return this.getValueByScreenX(0);\n            };\n            ChartState.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.data.width);\n            };\n            ChartState.prototype.getPaddingRight = function() {\n                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n            };\n            return ChartState;\n        }();\n        exports.ChartState = ChartState;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var TrendSegmentsManager_1 = __webpack_require__(15);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var deps_1 = __webpack_require__(3);\n        var EVENTS = {\n            CHANGE: \"Change\",\n            PREPEND_REQUEST: \"prependRequest\"\n        };\n        (function(TREND_TYPE) {\n            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n        var TREND_TYPE = exports.TREND_TYPE;\n        var Trend = function() {\n            function Trend(chartState, trendName, initialState) {\n                this.minXVal = Infinity;\n                this.minYVal = Infinity;\n                this.maxXVal = -Infinity;\n                this.maxYVal = -Infinity;\n                var options = initialState.trends[trendName];\n                this.name = trendName;\n                this.chartState = chartState;\n                this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.data.trendDefaultState, options);\n                this.calculatedOptions.name = trendName;\n                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n                this.calculatedOptions.dataset = [];\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvents();\n            }\n            Trend.prototype.onInitialStateApplied = function() {\n                this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\n            };\n            Trend.prototype.bindEvents = function() {\n                var _this = this;\n                var chartState = this.chartState;\n                chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateApplied();\n                });\n                chartState.onScrollStop(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onZoom(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n                });\n                chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            Trend.prototype.getCalculatedOptions = function() {\n                return this.calculatedOptions;\n            };\n            Trend.prototype.appendData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData());\n                var updatedTrendData = options.data.concat(newData);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.prependData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData(), true);\n                var updatedTrendData = newData.concat(options.data);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.changeData = function(allData, newData) {\n                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n                    var item = newData_1[_i];\n                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n                }\n                var options = this.getOptions();\n                var statePatch = {\n                    trends: (_a = {}, _a[options.name] = {\n                        data: allData\n                    }, _a)\n                };\n                this.chartState.setState(statePatch, newData);\n                var _a;\n            };\n            Trend.prototype.getData = function(fromX, toX) {\n                var data = this.getOptions().data;\n                if (fromX == void 0 && toX == void 0) return data;\n                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n                toX = toX !== void 0 ? toX : data[data.length].xVal;\n                var filteredData = [];\n                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                    var item = data_1[_i];\n                    if (item.xVal < fromX) continue;\n                    if (item.xVal > toX) break;\n                    filteredData.push(item);\n                }\n                return filteredData;\n            };\n            Trend.prototype.getFirstItem = function() {\n                return this.getOptions().data[0];\n            };\n            Trend.prototype.getLastItem = function() {\n                var data = this.getOptions().data;\n                return data[data.length - 1];\n            };\n            Trend.prototype.getOptions = function() {\n                return this.chartState.data.trends[this.name];\n            };\n            Trend.prototype.setOptions = function(options) {\n                this.chartState.setState({\n                    trends: (_a = {}, _a[this.name] = options, _a)\n                });\n                var _a;\n            };\n            Trend.prototype.onPrependRequest = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n                return function() {\n                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n                };\n            };\n            Trend.prototype.onChange = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.CHANGE, cb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, cb);\n                };\n            };\n            Trend.prototype.onDataChange = function(cb) {\n                var _this = this;\n                var onChangeCb = function(changedOptions, newData) {\n                    if (newData) cb(newData);\n                };\n                this.ee.on(EVENTS.CHANGE, onChangeCb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n                };\n            };\n            Trend.prototype.checkForPrependRequest = function() {\n                var _this = this;\n                if (this.prependRequest) return;\n                var chartState = this.chartState;\n                var minXVal = chartState.data.computedData.trends.minXVal;\n                var minScreenX = chartState.getScreenXByValue(minXVal);\n                var needToRequest = minScreenX > 0;\n                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var requestedDataLength = to - from;\n                if (!needToRequest) return;\n                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n                });\n                this.prependRequest.then(function(newData) {\n                    _this.prependData(newData);\n                    _this.prependRequest = null;\n                }, function() {\n                    _this.prependRequest = null;\n                });\n            };\n            Trend.prepareData = function(newData, currentData, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var data = [];\n                if (typeof newData[0] == \"number\") {\n                    currentData = currentData || [];\n                    var initialItem = void 0;\n                    var xVal = void 0;\n                    if (isPrepend) {\n                        initialItem = currentData[0];\n                        xVal = initialItem.xVal - newData.length;\n                    } else {\n                        initialItem = currentData[currentData.length - 1];\n                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n                    }\n                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n                        var yVal = _a[_i];\n                        data.push({\n                            xVal: xVal,\n                            yVal: yVal,\n                            id: Utils_1.Utils.getUid()\n                        });\n                        xVal++;\n                    }\n                } else {\n                    data = newData;\n                }\n                return data;\n            };\n            return Trend;\n        }();\n        exports.Trend = Trend;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        function deepmerge(target, src, mergeArrays) {\n            if (mergeArrays === void 0) {\n                mergeArrays = true;\n            }\n            var array = Array.isArray(src);\n            var dst = array && [] || {};\n            if (array) {\n                target = target || [];\n                if (mergeArrays) {\n                    dst = dst.concat(target);\n                }\n                src.forEach(function(e, i) {\n                    if (typeof dst[i] === \"undefined\") {\n                        dst[i] = e;\n                    } else if (typeof e === \"object\") {\n                        dst[i] = deepmerge(target[i], e, mergeArrays);\n                    } else {\n                        if (target.indexOf(e) === -1) {\n                            dst.push(e);\n                        }\n                    }\n                });\n            } else {\n                if (target && typeof target === \"object\") {\n                    Object.keys(target).forEach(function(key) {\n                        dst[key] = target[key];\n                    });\n                }\n                Object.keys(src).forEach(function(key) {\n                    if (typeof src[key] !== \"object\" || !src[key]) {\n                        dst[key] = src[key];\n                    } else {\n                        if (!target[key]) {\n                            dst[key] = src[key];\n                        } else {\n                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n                        }\n                    }\n                });\n            }\n            return dst;\n        }\n        var Utils = function() {\n            function Utils() {}\n            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n                return deepmerge(obj1, obj2, mergeArrays);\n            };\n            Utils.deepCopy = function(obj) {\n                return JSON.parse(JSON.stringify(obj));\n            };\n            Utils.toFixed = function(num, digitsCount) {\n                var maxDigits = 15;\n                var result = \"\";\n                var intVal = Math.floor(num);\n                var intStr = intVal.toString();\n                var lengthDiff = digitsCount - intStr.length;\n                if (lengthDiff > 0) {\n                    result = \"0\".repeat(lengthDiff) + intStr;\n                } else {\n                    result = intStr;\n                }\n                var afterPointDigitsCount = maxDigits - intStr.length;\n                var afterPointStr = num.toString().split(\".\")[1];\n                if (afterPointStr) {\n                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n                }\n                return result;\n            };\n            Utils.bindEvent = function() {};\n            Utils.createTexture = function(width, height, fn) {\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = width;\n                canvas.height = height;\n                var ctx = canvas.getContext(\"2d\");\n                fn(ctx);\n                var texture = new THREE.Texture(canvas);\n                texture.needsUpdate = true;\n                return texture;\n            };\n            Utils.createPixelPerfectTexture = function(width, height, fn) {\n                var texture = this.createTexture(width, height, fn);\n                texture.minFilter = THREE.NearestFilter;\n                return texture;\n            };\n            Utils.error = function(msg) {\n                console.error(\"Chart error: \" + msg);\n                throw \"Chart: \" + msg;\n            };\n            Utils.warn = function(msg) {\n                console.warn(\"Chart warning: \" + msg);\n            };\n            Utils.getUid = function() {\n                return this.currentId++;\n            };\n            Utils.getDistance = function(num1, num2) {\n                return Math.max(num1, num2) - Math.min(num1, num2);\n            };\n            Utils.binarySearchClosestInd = function(arr, num, key) {\n                var mid;\n                var lo = 0;\n                var hi = arr.length - 1;\n                while (hi - lo > 1) {\n                    mid = Math.floor((lo + hi) / 2);\n                    if (arr[mid][key] < num) {\n                        lo = mid;\n                    } else {\n                        hi = mid;\n                    }\n                }\n                if (num - arr[lo][key] <= arr[hi][key] - num) {\n                    return lo;\n                }\n                return hi;\n            };\n            Utils.binarySearchClosest = function(arr, num, key) {\n                var ind = this.binarySearchClosestInd(arr, num, key);\n                return arr[ind];\n            };\n            Utils.rectsIntersect = function(r1, r2) {\n                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n            };\n            Utils.throttle = function(func, ms) {\n                var isThrottled = false, savedArgs, savedThis;\n                function wrapper() {\n                    if (isThrottled) {\n                        savedArgs = arguments;\n                        savedThis = this;\n                        return;\n                    }\n                    func.apply(this, arguments);\n                    isThrottled = true;\n                    setTimeout(function() {\n                        isThrottled = false;\n                        if (savedArgs) {\n                            wrapper.apply(savedThis, savedArgs);\n                            savedArgs = savedThis = null;\n                        }\n                    }, ms);\n                }\n                return wrapper;\n            };\n            Utils.msToTimeString = function(timestamp) {\n                var h = Math.floor(timestamp / 36e4);\n                var m = Math.floor(timestamp / 6e4);\n                var s = Math.floor(timestamp / 1e3);\n                return h + \":\" + m + \":\" + s;\n            };\n            Utils.getRandomItem = function(arr) {\n                var ind = Math.floor(Math.random() * arr.length);\n                return arr[ind];\n            };\n            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n                if (excludeProps === void 0) {\n                    excludeProps = [];\n                }\n                for (var key in props) {\n                    if (excludeProps.indexOf(key) !== -1) continue;\n                    if (srcObject[key] == void 0) continue;\n                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n                    } else {\n                        dstObject[key] = this.deepCopy(srcObject[key]);\n                    }\n                }\n            };\n            Utils.currentId = 1;\n            return Utils;\n        }();\n        exports.Utils = Utils;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var EventEmmiter_1 = __webpack_require__(16);\n        var Vector3 = THREE.Vector3;\n        var Trend_1 = __webpack_require__(13);\n        var Utils_1 = __webpack_require__(14);\n        var MAX_ANIMATED_SEGMENTS = 100;\n        var EVENTS = {\n            REBUILD: \"rebuild\",\n            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n            ANIMATION_FRAME: \"animationFrame\"\n        };\n        var TrendSegmentsManager = function() {\n            function TrendSegmentsManager(chartState, trend) {\n                this.segmentsById = {};\n                this.segments = [];\n                this.animatedSegmentsIds = [];\n                this.segmentsLength = 0;\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForPrepend = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.trend = trend;\n                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n                this.tryToRebuildSegments();\n                this.bindEvents();\n            }\n            TrendSegmentsManager.prototype.bindEvents = function() {\n                var _this = this;\n                this.trend.onChange(function(changedOptions, newData) {\n                    return _this.onTrendChangeHandler(changedOptions, newData);\n                });\n                this.chartState.onZoom(function() {\n                    return _this.onZoomHandler();\n                });\n                this.chartState.onScroll(function() {\n                    return _this.recalculateDisplayedRange();\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            TrendSegmentsManager.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.appendAnimation && this.appendAnimation.kill();\n                this.prependAnimation && this.prependAnimation.kill();\n            };\n            TrendSegmentsManager.prototype.onZoomHandler = function() {\n                var segmentsRebuilded = this.tryToRebuildSegments();\n                if (!segmentsRebuilded) {\n                    this.recalculateDisplayedRange();\n                }\n            };\n            TrendSegmentsManager.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n                if (needToRebuildSegments) {\n                    this.tryToRebuildSegments(true);\n                    return;\n                }\n                if (!newData) return;\n                var data = this.trend.getData();\n                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                isAppend ? this.appendData(newData) : this.prependData(newData);\n                this.recalculateDisplayedRange();\n            };\n            TrendSegmentsManager.prototype.getSegment = function(id) {\n                return this.segmentsById[id];\n            };\n            TrendSegmentsManager.prototype.getEndSegment = function() {\n                return this.segmentsById[this.endSegmentId];\n            };\n            TrendSegmentsManager.prototype.getStartSegment = function() {\n                return this.segmentsById[this.startSegmentId];\n            };\n            TrendSegmentsManager.prototype.tryToRebuildSegments = function(force) {\n                if (force === void 0) {\n                    force = false;\n                }\n                var options = this.trend.getOptions();\n                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n                var trendTypesSettings = options.settingsForTypes;\n                var trendTypeSettings = trendTypesSettings[trendTypeName];\n                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n                var needToRebuild = this.segments.length === 0 || force;\n                var segmentLength = this.maxSegmentLength;\n                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n                }\n                if (!needToRebuild) return false;\n                this.maxSegmentLength = segmentLength;\n                this.segmentsById = {};\n                this.segments = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.segmentsLength = 0;\n                this.stopAllAnimations();\n                this.appendData(null, true);\n                this.recalculateDisplayedRange(true);\n                this.ee.emit(EVENTS.REBUILD);\n            };\n            TrendSegmentsManager.prototype.stopAllAnimations = function() {\n                this.animatedSegmentsIds = [];\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForAppend = [];\n                if (this.prependAnimation) this.prependAnimation.kill();\n                if (this.appendAnimation) this.appendAnimation.kill();\n            };\n            TrendSegmentsManager.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n                if (segmentsAreRebuilded === void 0) {\n                    segmentsAreRebuilded = false;\n                }\n                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n                var displayedRange = to - from;\n                this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, \"startXVal\");\n                this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n                this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, \"endXVal\");\n                this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n                if (segmentsAreRebuilded) return;\n                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n            };\n            TrendSegmentsManager.prototype.getSegmentsForXValues = function(values) {\n                var valueInd = 0;\n                var value = values[valueInd];\n                var lastValueInd = values.length - 1;\n                var results = [];\n                var segment = this.getStartSegment();\n                if (!segment.hasValue) return [];\n                while (segment) {\n                    while (value < segment.startXVal) {\n                        results.push(void 0);\n                        value = values[++valueInd];\n                    }\n                    while (value > segment.endXVal) {\n                        segment = segment.getNext();\n                        if (!segment) break;\n                    }\n                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n                    if (valueInPoint) {\n                        results.push(segment);\n                        value = values[++valueInd];\n                    }\n                    if (valueInd > lastValueInd) break;\n                }\n                return results;\n            };\n            TrendSegmentsManager.prototype.onAnimationFrame = function(cb) {\n                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n            };\n            TrendSegmentsManager.prototype.onRebuild = function(cb) {\n                return this.ee.subscribe(EVENTS.REBUILD, cb);\n            };\n            TrendSegmentsManager.prototype.onDisplayedRangeChanged = function(cb) {\n                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n            };\n            TrendSegmentsManager.prototype.allocateNextSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var prevSegment = this.segmentsById[this.endSegmentId];\n                if (prevSegment && prevSegment.hasValue) {\n                    prevSegment.nextId = id;\n                    segment.prevId = prevSegment.id;\n                }\n                this.endSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.push(segment);\n                return segment;\n            };\n            TrendSegmentsManager.prototype.allocatePrevSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var nextSegment = this.segmentsById[this.startSegmentId];\n                if (nextSegment && nextSegment.hasValue) {\n                    nextSegment.prevId = id;\n                    segment.nextId = nextSegment.id;\n                }\n                this.startSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.unshift(segment);\n                return segment;\n            };\n            TrendSegmentsManager.prototype.appendData = function(newData, needRebuildSegments) {\n                if (needRebuildSegments === void 0) {\n                    needRebuildSegments = false;\n                }\n                var trendData = this.trend.getData();\n                if (needRebuildSegments) {\n                    newData = trendData;\n                    this.animatedSegmentsForAppend = [];\n                }\n                var startItemInd = trendData.length - newData.length;\n                var segment = this.getEndSegment() || this.allocateNextSegment();\n                var initialSegment = segment.hasValue ? segment : null;\n                var initialAnimationState = segment.createAnimationState();\n                var itemInd = 0;\n                while (itemInd < newData.length) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.appendItem(item);\n                    var isLastItem = itemInd == newData.length - 1;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd++;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForAppend.length > 0) {\n                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForAppend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocateNextSegment();\n                    var prevItem = trendData[startItemInd + itemInd - 1];\n                    segment.appendItem(prevItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (needRebuildSegments) {\n                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n                        var segmentId = _a[_i];\n                        var segment_1 = this.segmentsById[segmentId];\n                        segment_1.currentAnimationState = segment_1.createAnimationState();\n                    }\n                    this.animatedSegmentsForAppend = [];\n                    return;\n                }\n                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time);\n            };\n            TrendSegmentsManager.prototype.prependData = function(newData) {\n                var trendData = this.trend.getData();\n                var segment = this.getStartSegment() || this.segmentsById[0];\n                var initialSegment = segment.hasValue ? segment : null;\n                var itemInd = newData.length - 1;\n                var initialAnimationState = segment.createAnimationState();\n                while (itemInd >= 0) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.prependItem(item);\n                    var isLastItem = itemInd == 0;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd--;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForPrepend.length > 0) {\n                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForPrepend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocatePrevSegment();\n                    var nextItem = trendData[itemInd + 1];\n                    segment.prependItem(nextItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time, true);\n            };\n            TrendSegmentsManager.prototype.animate = function(time, isPrepend) {\n                var _this = this;\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n                if (animation && animation.isActive() || time == 0) {\n                    if (animation) animation.kill();\n                    this.onAnimationFrameHandler(1, isPrepend);\n                    animatedSegmentsIds.length = 0;\n                    return;\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var ease = animationsOptions.trendChangeEase;\n                var objectToAnimate = {\n                    animationValue: 0\n                };\n                animation = TweenLite.to(objectToAnimate, time, {\n                    animationValue: 1,\n                    ease: ease\n                });\n                animation.eventCallback(\"onUpdate\", function() {\n                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animatedSegmentsIds.length = 0;\n                    _this.appendAnimation = null;\n                });\n                if (isPrepend) {\n                    this.prependAnimation = animation;\n                } else {\n                    this.appendAnimation = animation;\n                }\n            };\n            TrendSegmentsManager.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n                    var segmentId = animatedSegmentsIds_1[_i];\n                    var segment = this.segmentsById[segmentId];\n                    for (var key in segment.targetAnimationState) {\n                        var targetValue = segment.targetAnimationState[key];\n                        var initialValue = segment.initialAnimationState[key];\n                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n                        segment.currentAnimationState[key] = currentValue;\n                    }\n                }\n                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n            };\n            return TrendSegmentsManager;\n        }();\n        exports.TrendSegmentsManager = TrendSegmentsManager;\n        var TrendSegment = function() {\n            function TrendSegment(trendPoints, id) {\n                this.isCompleted = false;\n                this.items = [];\n                this.initialAnimationState = {};\n                this.targetAnimationState = {};\n                this.currentAnimationState = {};\n                this.trendSegments = trendPoints;\n                this.id = id;\n                this.maxLength = trendPoints.maxSegmentLength;\n            }\n            TrendSegment.prototype.createAnimationState = function() {\n                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n                return {\n                    xVal: xVal,\n                    yVal: yVal,\n                    startXVal: startXVal,\n                    startYVal: startYVal,\n                    endXVal: endXVal,\n                    endYVal: endYVal,\n                    maxYVal: maxYVal,\n                    minYVal: minYVal,\n                    maxLength: maxLength\n                };\n            };\n            TrendSegment.prototype.appendItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.push(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var startXVal = items[0].xVal;\n                if (item.xVal - startXVal > this.maxLength) return false;\n                items.push(item);\n                return true;\n            };\n            TrendSegment.prototype.prependItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.unshift(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var endXVal = items[items.length - 1].xVal;\n                if (endXVal - item.xVal > this.maxLength) return false;\n                items.unshift(item);\n                return true;\n            };\n            TrendSegment.prototype.complete = function() {\n                this.isCompleted = true;\n                this.recalculateItems();\n                this.items = [];\n            };\n            TrendSegment.prototype.recalculateItems = function() {\n                var items = this.items;\n                var itemsLength = items.length;\n                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n                var endItem = items[itemsLength - 1];\n                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n                var startXVal, startYVal;\n                var startItem = items[0];\n                startXVal = startItem.xVal;\n                startYVal = startItem.yVal;\n                var minX = Math.min(startXVal, endXVal);\n                var maxX = Math.max(startXVal, endXVal);\n                var middleXVal = minX + (maxX - minX) / 2;\n                var minY = Math.min(startYVal, endYVal);\n                var maxY = Math.max(startYVal, endYVal);\n                var middleYVal = minY + (maxY - minY) / 2;\n                var yVals = items.map(function(item) {\n                    return item.yVal;\n                });\n                this.startXVal = startXVal;\n                this.startYVal = startYVal;\n                this.endXVal = endXVal;\n                this.endYVal = endYVal;\n                this.xVal = middleXVal;\n                this.yVal = middleYVal;\n                this.maxYVal = Math.max.apply(Math, yVals);\n                this.minYVal = Math.min.apply(Math, yVals);\n                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n            };\n            TrendSegment.prototype.getNext = function() {\n                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n            };\n            TrendSegment.prototype.getPrev = function() {\n                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n            };\n            TrendSegment.prototype.getFrameVal = function() {\n                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n                return new Vector3(xVal, yVal, 0);\n            };\n            TrendSegment.prototype.getFramePoint = function() {\n                var frameVal = this.getFrameVal();\n                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n            };\n            return TrendSegment;\n        }();\n        exports.TrendSegment = TrendSegment;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        var EventEmitter = function() {\n            function EventEmitter() {\n                this.ee = new deps_1.EE2();\n            }\n            EventEmitter.prototype.emit = function(eventName) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n                var _a;\n            };\n            EventEmitter.prototype.on = function(eventName, callback) {\n                return this.ee.on(eventName, callback);\n            };\n            EventEmitter.prototype.off = function(eventName, callback) {\n                return this.ee.off(eventName, callback);\n            };\n            EventEmitter.prototype.subscribe = function(eventName, callback) {\n                var _this = this;\n                this.on(eventName, callback);\n                return function() {\n                    return _this.off(eventName, callback);\n                };\n            };\n            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n                this.ee.setMaxListeners(listenersCount);\n            };\n            EventEmitter.prototype.removeAllListeners = function(eventName) {\n                this.ee.removeAllListeners(eventName);\n            };\n            return EventEmitter;\n        }();\n        exports.EventEmitter = EventEmitter;\n    }, function(module, exports) {\n        \"use strict\";\n        var ChartWidget = function() {\n            function ChartWidget(chartState) {\n                this.unsubscribers = [];\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            ChartWidget.prototype.bindEvents = function() {};\n            ChartWidget.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartWidget.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartWidget.getDefaultOptions = function() {\n                return {\n                    enabled: true\n                };\n            };\n            ChartWidget.widgetName = \"\";\n            return ChartWidget;\n        }();\n        exports.ChartWidget = ChartWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Trend_1 = __webpack_require__(13);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var EVENTS = {\n            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n        };\n        var TrendsManager = function() {\n            function TrendsManager(state, initialState) {\n                this.trends = {};\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.chartState = state;\n                var trendsCalculatedOptions = {};\n                for (var trendName in initialState.trends) {\n                    var trend = this.createTrend(state, trendName, initialState);\n                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n                }\n                this.calculatedOptions = trendsCalculatedOptions;\n                this.bindEvents();\n            }\n            TrendsManager.prototype.getTrend = function(trendName) {\n                return this.trends[trendName];\n            };\n            TrendsManager.prototype.getEnabledTrends = function() {\n                var enabledTrends = [];\n                var allTrends = this.trends;\n                for (var trendName in allTrends) {\n                    var trend = allTrends[trendName];\n                    trend.getOptions().enabled && enabledTrends.push(trend);\n                }\n                return enabledTrends;\n            };\n            TrendsManager.prototype.getStartXVal = function() {\n                var trends = this.getEnabledTrends();\n                return trends[0].getData()[0].xVal;\n            };\n            TrendsManager.prototype.getEndXVal = function() {\n                var trends = this.getEnabledTrends();\n                var firstTrendData = trends[0].getData();\n                return firstTrendData[firstTrendData.length - 1].xVal;\n            };\n            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n                var trends = this.getEnabledTrends();\n                var compareFn;\n                var result;\n                if (extremumIsMax) {\n                    result = -Infinity;\n                    compareFn = Math.max;\n                } else {\n                    result = Infinity;\n                    compareFn = Math.min;\n                }\n                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n                    var trend = trends_1[_i];\n                    var trendData = trend.getData(fromX, toX);\n                    var trendYValues = trendData.map(function(dataItem) {\n                        return dataItem.yVal;\n                    });\n                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n                }\n                if (result == Infinity || result == -Infinity) result = NaN;\n                return result;\n            };\n            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n                return this.getExtremumYVal(true, fromX, toX);\n            };\n            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n                return this.getExtremumYVal(false, fromX, toX);\n            };\n            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n            };\n            TrendsManager.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateAppliedHandler();\n                });\n            };\n            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n                var _this = this;\n                var _loop_1 = function(trendName) {\n                    this_1.trends[trendName].segmentsManager.onRebuild(function() {\n                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n                    });\n                };\n                var this_1 = this;\n                for (var trendName in this.trends) {\n                    _loop_1(trendName);\n                }\n            };\n            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n                var trend = new Trend_1.Trend(state, trendName, initialState);\n                this.trends[trendName] = trend;\n                return trend;\n            };\n            return TrendsManager;\n        }();\n        exports.TrendsManager = TrendsManager;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var EventEmmiter_1 = __webpack_require__(16);\n        var Screen = function() {\n            function Screen(chartState) {\n                this.options = {\n                    scrollXVal: 0,\n                    scrollX: 0,\n                    scrollYVal: 0,\n                    scrollY: 0,\n                    zoomX: 1,\n                    zoomY: 1\n                };\n                this.currentScrollX = {\n                    x: 0\n                };\n                this.currentScrollY = {\n                    y: 0\n                };\n                this.currentZoomX = {\n                    val: 1\n                };\n                this.currentZoomY = {\n                    val: 1\n                };\n                this.chartState = chartState;\n                var _a = chartState.data, w = _a.width, h = _a.height;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.transform({\n                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n                    zoomY: 1\n                });\n                this.bindEvents();\n            }\n            Screen.prototype.getCameraSettings = function() {\n                var _a = this.chartState.data, w = _a.width, h = _a.height;\n                var FOV = 75;\n                var vFOV = FOV * (Math.PI / 180);\n                return {\n                    FOV: FOV,\n                    aspect: w / h,\n                    near: .1,\n                    far: 5e3,\n                    z: h / (2 * Math.tan(vFOV / 2)),\n                    x: w / 2,\n                    y: h / 2\n                };\n            };\n            Screen.prototype.onZoomFrame = function(cb) {\n                var _this = this;\n                var eventName = \"zoomFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onScrollFrame = function(cb) {\n                var _this = this;\n                var eventName = \"scrollFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onTransformationFrame = function(cb) {\n                var _this = this;\n                var eventName = \"transformationFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.cameraIsMoving = function() {\n                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n            };\n            Screen.prototype.transform = function(options, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n                if (scrollX != void 0) this.options.scrollX = scrollX;\n                if (scrollY != void 0) this.options.scrollY = scrollY;\n                if (zoomX != void 0) this.options.zoomX = zoomX;\n                if (zoomY != void 0) this.options.zoomY = zoomY;\n                if (scrollX != void 0 || zoomX) {\n                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n                    this.options.scrollXVal = options.scrollXVal;\n                }\n                if (scrollY != void 0 || zoomY) {\n                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n                    this.options.scrollYVal = options.scrollYVal;\n                }\n                if (silent) return;\n                this.ee.emit(\"transformationFrame\", options);\n                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n                    this.ee.emit(\"scrollFrame\", options);\n                }\n                if (options.zoomX != void 0 || options.zoomY != void 0) {\n                    this.ee.emit(\"zoomFrame\", options);\n                }\n            };\n            Screen.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onChange(function(changedProps) {\n                    if (changedProps.xAxis && changedProps.xAxis.range) {\n                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n                    }\n                    if (changedProps.yAxis && changedProps.yAxis.range) {\n                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n                    }\n                });\n                state.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            Screen.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.scrollXAnimation && this.scrollXAnimation.kill();\n                this.scrollYAnimation && this.scrollYAnimation.kill();\n                this.zoomXAnimation && this.zoomXAnimation.kill();\n                this.zoomYAnimation && this.zoomYAnimation.kill();\n            };\n            Screen.prototype.onScrollXHandler = function(changedProps) {\n                var _this = this;\n                var state = this.chartState;\n                var isDragMode = state.data.cursor.dragMode;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled && !isDragMode;\n                var zoomXChanged = changedProps.xAxis.range.zoom;\n                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n                var range = state.data.xAxis.range;\n                var targetX = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollX.x = this.options.scrollX;\n                var cb = function() {\n                    _this.transform({\n                        scrollX: _this.currentScrollX.x\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n                        x: targetX,\n                        ease: ease\n                    });\n                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollX.x = targetX;\n                    cb();\n                }\n            };\n            Screen.prototype.onScrollYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n                var range = state.data.yAxis.range;\n                var targetY = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollY.y = this.options.scrollY;\n                var cb = function() {\n                    _this.transform({\n                        scrollY: _this.currentScrollY.y\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n                        y: targetY,\n                        ease: animations.zoomEase\n                    });\n                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollY.y = targetY;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomXHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.xAxis.range.zoom;\n                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomX: _this.currentZoomX.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomX.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.yAxis.range.zoom;\n                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomY: _this.currentZoomY.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomY.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomX;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomY;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            Screen.prototype.getValueOnXAxis = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n            };\n            Screen.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n            };\n            Screen.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n            };\n            Screen.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n            };\n            Screen.prototype.getValueByScreenX = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.getValueByScreenY = function(y) {\n                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n            };\n            Screen.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            Screen.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            Screen.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            Screen.prototype.getPointByScreenY = function(screenY) {\n                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n            };\n            Screen.prototype.getTop = function() {\n                return this.getPointByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottom = function() {\n                return this.getPointByScreenY(0);\n            };\n            Screen.prototype.getLeft = function() {\n                return this.getPointByScreenX(0);\n            };\n            Screen.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.chartState.data.width);\n            };\n            Screen.prototype.getTopVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottomVal = function() {\n                return this.getValueByScreenY(0);\n            };\n            Screen.prototype.getCenterYVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height / 2);\n            };\n            return Screen;\n        }();\n        exports.Screen = Screen;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var AXIS_MARK_DEFAULT_OPTIONS = {\n            type: \"simple\",\n            lineWidth: 1,\n            value: 0,\n            showValue: false,\n            stickToEdges: false,\n            lineColor: \"#FFFFFF\",\n            title: \"\"\n        };\n        var AxisMarks = function() {\n            function AxisMarks(chartState, axisType) {\n                this.items = {};\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.axisType = axisType;\n                var marks = this.items;\n                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n                    var options = axisMarksOptions_1[_i];\n                    var axisMark = void 0;\n                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n                    if (options.type == \"timeleft\") {\n                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n                    } else {\n                        axisMark = new AxisMark(chartState, axisType, options);\n                    }\n                    marks[options.name] = axisMark;\n                }\n                this.bindEvents();\n            }\n            AxisMarks.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, newData);\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n                if (!newData) return;\n                var startVal = newData[0].xVal;\n                var endVal = newData[newData.length - 1].xVal;\n                var marks = this.items;\n                for (var markName in marks) {\n                    var mark = marks[markName];\n                    var markVal = mark.options.value;\n                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n                }\n            };\n            AxisMarks.prototype.getItems = function() {\n                return this.items;\n            };\n            AxisMarks.prototype.getItem = function(markName) {\n                return this.items[markName];\n            };\n            return AxisMarks;\n        }();\n        exports.AxisMarks = AxisMarks;\n        var AxisMark = function() {\n            function AxisMark(chartState, axisType, options) {\n                this.renderOnTrendsChange = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.options = options;\n                this.axisType = axisType;\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            AxisMark.prototype.bindEvents = function() {};\n            AxisMark.prototype.setOptions = function(newOptions) {\n                var value = this.options.value;\n                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisMark.prototype.getDisplayedVal = function() {\n                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n                return String(displayedValue !== void 0 ? displayedValue : value);\n            };\n            AxisMark.prototype.onMarkCrossed = function(cb) {\n                var _this = this;\n                this.ee.on(\"markCrossed\", cb);\n                return function() {\n                    _this.ee.off(\"markCrossed\", cb);\n                };\n            };\n            AxisMark.prototype.onValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"valueChange\", cb);\n                return function() {\n                    _this.ee.off(\"valueChange\", cb);\n                };\n            };\n            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"onDisplayedValueChange\", cb);\n                return function() {\n                    _this.ee.off(\"onDisplayedValueChange\", cb);\n                };\n            };\n            AxisMark.typeName = \"simple\";\n            return AxisMark;\n        }();\n        exports.AxisMark = AxisMark;\n        var AxisTimeleftMark = function(_super) {\n            __extends(AxisTimeleftMark, _super);\n            function AxisTimeleftMark() {\n                _super.apply(this, arguments);\n                this.renderOnTrendsChange = true;\n            }\n            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n                var markVal = this.options.value;\n                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n                var time = markVal - maxXVal;\n                if (time < 0) time = 0;\n                return Utils_1.Utils.msToTimeString(time);\n            };\n            AxisTimeleftMark.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n            };\n            AxisTimeleftMark.prototype.onTrendsChange = function() {\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisTimeleftMark.typeName = \"timeleft\";\n            return AxisTimeleftMark;\n        }(AxisMark);\n        exports.AxisTimeleftMark = AxisTimeleftMark;\n    }, function(module, exports) {\n        \"use strict\";\n        (function(AXIS_RANGE_TYPE) {\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n        (function(AXIS_TYPE) {\n            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n        var AXIS_TYPE = exports.AXIS_TYPE;\n        (function(AXIS_DATA_TYPE) {\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Mesh = THREE.Mesh;\n        var Object3D = THREE.Object3D;\n        var Widget_1 = __webpack_require__(17);\n        var GridWidget_1 = __webpack_require__(23);\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var AxisWidget = function(_super) {\n            __extends(AxisWidget, _super);\n            function AxisWidget(state) {\n                var _this = this;\n                _super.call(this, state);\n                this.isDestroyed = false;\n                this.object3D = new Object3D();\n                this.axisXObject = new Object3D();\n                this.axisYObject = new Object3D();\n                this.object3D.add(this.axisXObject);\n                this.object3D.add(this.axisYObject);\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }, 1e3);\n                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n            }\n            AxisWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n                    _this.onScrollChange(options.scrollX, options.scrollY);\n                }), state.screen.onZoomFrame(function(options) {\n                    _this.onZoomFrame(options);\n                }), state.onDestroy(function() {\n                    return _this.onDestroy();\n                }), state.onResize(function() {\n                    return _this.onResize();\n                }));\n            };\n            AxisWidget.prototype.onDestroy = function() {\n                this.isDestroyed = true;\n                this.unbindEvents();\n            };\n            AxisWidget.prototype.onScrollChange = function(x, y) {\n                if (y != void 0) {\n                    this.axisYObject.position.y = y;\n                    this.axisXObject.position.y = y;\n                }\n                if (x != void 0) {\n                    this.axisYObject.position.x = x;\n                    this.updateAxisXRequest();\n                }\n            };\n            AxisWidget.prototype.onResize = function() {\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n            };\n            AxisWidget.prototype.setupAxis = function(orientation) {\n                var _this = this;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var canvasWidth = 0, canvasHeight = 0;\n                if (isXAxis) {\n                    this.axisXObject.traverse(function(obj) {\n                        return _this.axisXObject.remove(obj);\n                    });\n                    canvasWidth = visibleWidth * 3;\n                    canvasHeight = 50;\n                } else {\n                    this.axisYObject.traverse(function(obj) {\n                        return _this.axisYObject.remove(obj);\n                    });\n                    canvasWidth = 50;\n                    canvasHeight = visibleHeight * 3;\n                }\n                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n                if (isXAxis) {\n                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisXObject.add(axisMesh);\n                } else {\n                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisYObject.add(axisMesh);\n                }\n                this.updateAxis(orientation);\n            };\n            AxisWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisWidget.prototype.updateAxis = function(orientation) {\n                if (this.isDestroyed) return;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n                var axisOptions;\n                var axisMesh;\n                var axisGridParams;\n                if (isXAxis) {\n                    axisMesh = this.axisXObject.children[0];\n                    axisOptions = this.chartState.data.xAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n                } else {\n                    axisMesh = this.axisYObject.children[0];\n                    axisOptions = this.chartState.data.yAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n                }\n                var geometry = axisMesh.geometry;\n                var canvasWidth = geometry.parameters.width;\n                var canvasHeight = geometry.parameters.height;\n                var texture = axisMesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                if (isXAxis) {\n                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n                }\n                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n                var startVal = axisGridParams.start - edgeOffset;\n                var endVal = axisGridParams.end + edgeOffset;\n                ctx.beginPath();\n                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n                    var displayedValue = \"\";\n                    if (isXAxis) {\n                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n                        ctx.textAlign = \"center\";\n                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n                        } else {\n                            displayedValue = Number(val.toFixed(14)).toString();\n                        }\n                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n                    } else {\n                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n                        ctx.textAlign = \"right\";\n                        displayedValue = Number(val.toFixed(14)).toString();\n                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n                    }\n                    ctx.stroke();\n                }\n                ctx.stroke();\n                ctx.closePath();\n                texture.needsUpdate = true;\n            };\n            AxisWidget.prototype.onZoomFrame = function(options) {\n                if (options.zoomX) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }\n                if (options.zoomY) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n                }\n            };\n            AxisWidget.getDateStr = function(timestamp, gridParams) {\n                var sec = 1e3;\n                var min = sec * 60;\n                var hour = min * 60;\n                var day = hour * 60;\n                var step = gridParams.step;\n                var d = new Date(timestamp);\n                var tf = function(num) {\n                    return Utils_1.Utils.toFixed(num, 2);\n                };\n                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n            };\n            AxisWidget.widgetName = \"Axis\";\n            return AxisWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisWidget = AxisWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Vector3 = THREE.Vector3;\n        var Widget_1 = __webpack_require__(17);\n        var LineSegments = THREE.LineSegments;\n        var Utils_1 = __webpack_require__(14);\n        var GridWidget = function(_super) {\n            __extends(GridWidget, _super);\n            function GridWidget(chartState) {\n                _super.call(this, chartState);\n                this.isDestroyed = false;\n                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n                this.initGrid();\n                this.updateGrid();\n            }\n            GridWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n                    return _this.updateGrid();\n                }, 1e3);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return updateGridThrottled();\n                }), this.chartState.screen.onZoomFrame(function(options) {\n                    updateGridThrottled();\n                    _this.onZoomFrame(options);\n                }), this.chartState.onDestroy(function() {\n                    _this.isDestroyed = true;\n                    _this.unbindEvents();\n                }), this.chartState.onResize(function() {\n                    _this.updateGrid();\n                }));\n            };\n            GridWidget.prototype.initGrid = function() {\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: .1,\n                    transparent: true\n                });\n                var xLinesCount = this.gridSizeH;\n                var yLinesCount = this.gridSizeV;\n                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                this.lineSegments = new LineSegments(geometry, material);\n                this.lineSegments.position.setZ(-1);\n                this.lineSegments.frustumCulled = false;\n            };\n            GridWidget.prototype.updateGrid = function() {\n                if (this.isDestroyed) return;\n                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n                var startXVal = axisXGrid.start + gridScrollXVal;\n                var startYVal = axisYGrid.start + gridScrollYVal;\n                var geometry = this.lineSegments.geometry;\n                var vertices = geometry.vertices;\n                var lineInd = 0;\n                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n                    var value = startXVal + i * axisXGrid.step;\n                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n                    var value = startYVal + i * axisYGrid.step;\n                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                geometry.verticesNeedUpdate = true;\n                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n            };\n            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n            };\n            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n            };\n            GridWidget.prototype.onZoomFrame = function(options) {\n                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n            };\n            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n                var axisRange = axisOptions.range;\n                var from = axisRange.from;\n                var to = axisRange.to;\n                var axisLength = to - from;\n                var gridStep = 0;\n                var gridStepInPixels = 0;\n                var minGridStepInPixels = axisOptions.gridMinSize;\n                var axisLengthStr = String(axisLength);\n                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n                var gridStepFound = false;\n                var digitPos = 0;\n                while (!gridStepFound) {\n                    var power = intPartLength - digitPos - 1;\n                    var multiplier = Math.pow(10, power) || 1;\n                    var dividers = [ 1, 2, 5 ];\n                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n                        var nextGridStep = multiplier / dividers[dividerInd];\n                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n                        if (nextGridStepInPixels >= minGridStepInPixels) {\n                            gridStep = nextGridStep;\n                            gridStepInPixels = nextGridStepInPixels;\n                        } else {\n                            gridStepFound = true;\n                            if (gridStep === 0) {\n                                gridStep = nextGridStep;\n                                gridStepInPixels = nextGridStepInPixels;\n                            }\n                            break;\n                        }\n                    }\n                    if (!gridStepFound) digitPos++;\n                }\n                var gridStart = Math.floor(from / gridStep) * gridStep;\n                var gridEnd = Math.floor(to / gridStep) * gridStep;\n                return {\n                    start: gridStart,\n                    end: gridEnd,\n                    step: gridStep,\n                    stepInPx: gridStepInPixels,\n                    length: gridEnd - gridStart,\n                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n                };\n            };\n            GridWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            GridWidget.widgetName = \"Grid\";\n            return GridWidget;\n        }(Widget_1.ChartWidget);\n        exports.GridWidget = GridWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Geometry = THREE.Geometry;\n        var Utils_1 = __webpack_require__(14);\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Color_1 = __webpack_require__(26);\n        var TrendsGradientWidget = function(_super) {\n            __extends(TrendsGradientWidget, _super);\n            function TrendsGradientWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsGradientWidget.prototype.getTrendWidgetClass = function() {\n                return TrendGradient;\n            };\n            TrendsGradientWidget.widgetName = \"TrendsGradient\";\n            return TrendsGradientWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsGradientWidget = TrendsGradientWidget;\n        var TrendGradient = function(_super) {\n            __extends(TrendGradient, _super);\n            function TrendGradient(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.visibleSegmentsCnt = 0;\n                this.trend = chartState.trendsManager.getTrend(trendName);\n                this.segmentsIds = new Uint16Array(chartState.data.maxVisibleSegments);\n                this.initGradient();\n                this.updateSegments();\n            }\n            TrendGradient.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasBackground;\n            };\n            TrendGradient.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n                    _this.updateSegments();\n                }));\n                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n                    _this.updateSegments();\n                }));\n                this.bindEvent(this.chartState.onZoom(function() {\n                    _this.updateSegments();\n                }));\n            };\n            TrendGradient.prototype.getObject3D = function() {\n                return this.gradient;\n            };\n            TrendGradient.prototype.initGradient = function() {\n                var geometry = new Geometry();\n                for (var i = 0; i < this.segmentsIds.length; i++) {\n                    geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\n                    var ind = i * 4;\n                    geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\n                }\n                var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\n                this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n                    color: color.value,\n                    transparent: true,\n                    opacity: color.a\n                }));\n                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.gradient.frustumCulled = false;\n            };\n            TrendGradient.prototype.onZoomFrame = function(options) {\n                var state = this.chartState.data;\n                var scaleXFactor = state.xAxis.range.scaleFactor;\n                var scaleYFactor = state.yAxis.range.scaleFactor;\n                var currentScale = this.gradient.scale;\n                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n            };\n            TrendGradient.prototype.onSegmentsAnimate = function(trendSegmentsManager) {\n                var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n                for (var i = 0; i < this.visibleSegmentsCnt; i++) {\n                    var segmentId = this.segmentsIds[i];\n                    if (!animatedSegmentsIds.includes(segmentId)) continue;\n                    this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n                }\n                this.gradient.geometry.verticesNeedUpdate = true;\n            };\n            TrendGradient.prototype.updateSegments = function() {\n                var geometry = this.gradient.geometry;\n                var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\n                var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n                this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n                var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n                if (segmentsToProcessCnt > this.segmentsIds.length) {\n                    Utils_1.Utils.error(TrendsGradientWidget.widgetName + \": MAX_SEGMENTS reached\");\n                }\n                for (var i = 0; i <= segmentsToProcessCnt; i++) {\n                    if (segmentInd <= lastDisplayedSegmentInd) {\n                        var segment = trendSegments[segmentInd];\n                        this.setupSegmentVertices(i, segment.currentAnimationState);\n                        this.segmentsIds[i] = segment.id;\n                        segmentInd++;\n                    } else {\n                        this.setupSegmentVertices(i);\n                    }\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendGradient.prototype.setupSegmentVertices = function(segmentInd, segmentState) {\n                var gradientSegmentInd = segmentInd * 4;\n                var vertices = this.gradient.geometry.vertices;\n                var topLeft = vertices[gradientSegmentInd];\n                var bottomLeft = vertices[gradientSegmentInd + 1];\n                var bottomRight = vertices[gradientSegmentInd + 2];\n                var topRight = vertices[gradientSegmentInd + 3];\n                var screenHeightVal = Math.max(this.chartState.pxToValueByYAxis(this.chartState.data.height), this.chartState.screen.pxToValueByYAxis(this.chartState.data.height));\n                if (segmentState) {\n                    var startX = this.toLocalX(segmentState.startXVal);\n                    var startY = this.toLocalY(segmentState.startYVal);\n                    var endX = this.toLocalX(segmentState.endXVal);\n                    var endY = this.toLocalY(segmentState.endYVal);\n                    topLeft.set(startX, startY, 0);\n                    topRight.set(endX, endY, 0);\n                    bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n                    bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n                } else {\n                    topLeft.set(0, 0, 0);\n                    topRight.set(0, 0, 0);\n                    bottomLeft.set(0, 0, 0);\n                    bottomRight.set(0, 0, 0);\n                }\n            };\n            TrendGradient.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendGradient.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            return TrendGradient;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendGradient = TrendGradient;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(17);\n        var Object3D = THREE.Object3D;\n        var TrendsWidget = function(_super) {\n            __extends(TrendsWidget, _super);\n            function TrendsWidget(state) {\n                _super.call(this, state);\n                this.widgets = {};\n                this.object3D = new Object3D();\n                this.onTrendsChange();\n            }\n            TrendsWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n                state.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, changedOptions, newData);\n                });\n            };\n            TrendsWidget.prototype.onTrendsChange = function() {\n                var trendsOptions = this.chartState.data.trends;\n                var TrendWidgetClass = this.getTrendWidgetClass();\n                for (var trendName in trendsOptions) {\n                    var trendOptions = trendsOptions[trendName];\n                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n                        this.createTrendWidget(trendName);\n                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n                        this.destroyTrendWidget(trendName);\n                    }\n                }\n            };\n            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n                var widget = this.widgets[trendName];\n                if (!widget) return;\n                widget.onTrendChange(changedOptions);\n                if (newData) {\n                    var data = this.chartState.getTrend(trendName).getData();\n                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n                }\n            };\n            TrendsWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n                var WidgetConstructor = this.getTrendWidgetClass();\n                var widget = new WidgetConstructor(this.chartState, trendName);\n                this.widgets[trendName] = widget;\n                var widgetObject = widget.getObject3D();\n                widgetObject.name = trendName;\n                this.object3D.add(widget.getObject3D());\n            };\n            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n                this.widgets[trendName].onDestroy();\n                delete this.widgets[trendName];\n                var widgetObject = this.object3D.getObjectByName(trendName);\n                this.object3D.remove(widgetObject);\n            };\n            return TrendsWidget;\n        }(Widget_1.ChartWidget);\n        exports.TrendsWidget = TrendsWidget;\n        var TrendWidget = function() {\n            function TrendWidget(chartState, trendName) {\n                this.chartState = chartState;\n                this.trendName = trendName;\n                this.unsubscribers = [];\n                this.trend = chartState.trendsManager.getTrend(trendName);\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled;\n            };\n            TrendWidget.prototype.appendData = function(newData) {};\n            TrendWidget.prototype.prependData = function(newData) {};\n            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n            TrendWidget.prototype.onDestroy = function() {\n                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n                    var unsubscriber = _a[_i];\n                    unsubscriber();\n                }\n            };\n            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n            TrendWidget.prototype.onZoomFrame = function(options) {};\n            TrendWidget.prototype.onTransformationFrame = function(options) {};\n            TrendWidget.prototype.onZoom = function() {};\n            TrendWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function(trendPoints) {\n                    return _this.onSegmentsAnimate(trendPoints);\n                }));\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n                    return _this.onTransformationFrame(options);\n                }));\n                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n                    return _this.onZoomFrame(options);\n                }));\n                this.bindEvent(this.chartState.onZoom(function() {\n                    return _this.onZoom();\n                }));\n            };\n            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n                this.unsubscribers.push(unsubscriber);\n            };\n            return TrendWidget;\n        }();\n        exports.TrendWidget = TrendWidget;\n    }, function(module, exports) {\n        \"use strict\";\n        var ChartColor = function() {\n            function ChartColor(color) {\n                this.set(color);\n            }\n            /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\n            ChartColor.parseColor = function(color) {\n                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4] ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by parseColor\");\n                isNaN(cache[3]) && (cache[3] = 1);\n                return cache;\n            };\n            ChartColor.prototype.set = function(color) {\n                if (typeof color == \"number\") color = \"#\" + color.toString(16);\n                var colorStr = color;\n                var rgba = ChartColor.parseColor(colorStr);\n                this.r = rgba[0];\n                this.g = rgba[1];\n                this.b = rgba[2];\n                this.a = rgba[3];\n                this.value = (rgba[0] << 8 * 2) + (rgba[1] << 8) + rgba[2];\n                this.hexStr = \"#\" + this.value.toString(16);\n                this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\n            };\n            return ChartColor;\n        }();\n        exports.ChartColor = ChartColor;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(13);\n        var TrendsLoadingWidget = function(_super) {\n            __extends(TrendsLoadingWidget, _super);\n            function TrendsLoadingWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLoading;\n            };\n            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n            return TrendsLoadingWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n        var TrendLoading = function(_super) {\n            __extends(TrendLoading, _super);\n            function TrendLoading(state, trendName) {\n                _super.call(this, state, trendName);\n                this.isActive = false;\n                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendLoading.createTexture(),\n                    transparent: true\n                }));\n                this.deactivate();\n            }\n            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled && chartState.data.animations.enabled;\n            };\n            TrendLoading.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendLoading.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.onPrependRequest(function() {\n                    return _this.activate();\n                }));\n            };\n            TrendLoading.prototype.prependData = function() {\n                this.deactivate();\n            };\n            TrendLoading.prototype.activate = function() {\n                var mesh = this.mesh;\n                mesh.material.opacity = 1;\n                mesh.rotation.z = 0;\n                var animation = TweenLite.to(this.mesh.rotation, .5, {\n                    z: Math.PI * 2\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animation.restart();\n                });\n                this.animation = animation;\n                this.isActive = true;\n                this.updatePosition();\n            };\n            TrendLoading.prototype.deactivate = function() {\n                this.animation && this.animation.kill();\n                this.mesh.material.opacity = 0;\n                this.isActive = false;\n            };\n            TrendLoading.createTexture = function() {\n                var h = 64, w = 64;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                    ctx.lineWidth = 5;\n                    var center = h / 2;\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n                    ctx.stroke();\n                });\n            };\n            TrendLoading.prototype.onZoomFrame = function() {\n                this.updatePosition();\n            };\n            TrendLoading.prototype.updatePosition = function() {\n                if (!this.isActive) return;\n                var trend = this.trend;\n                var segment = trend.segmentsManager.getStartSegment();\n                var x, y;\n                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    x = segment.currentAnimationState.startXVal;\n                    y = segment.currentAnimationState.startYVal;\n                } else {\n                    x = segment.currentAnimationState.xVal - segment.maxLength;\n                    y = segment.currentAnimationState.yVal;\n                }\n                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n            };\n            return TrendLoading;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLoading = TrendLoading;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(17);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var Utils_1 = __webpack_require__(14);\n        var Line = THREE.Line;\n        var Mesh = THREE.Mesh;\n        var interfaces_1 = __webpack_require__(21);\n        var Color_1 = __webpack_require__(26);\n        var AxisMarksWidget = function(_super) {\n            __extends(AxisMarksWidget, _super);\n            function AxisMarksWidget(chartState) {\n                _super.call(this, chartState);\n                this.axisMarksWidgets = [];\n                this.object3D = new Object3D();\n                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n                var items = xAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n                items = yAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n            }\n            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n                this.axisMarksWidgets.push(axisMarkWidget);\n                this.object3D.add(axisMarkWidget.getObject3D());\n            };\n            AxisMarksWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n                    return _this.updateMarksPositions();\n                }), this.chartState.onResize(function() {\n                    return _this.updateMarksPositions();\n                }));\n            };\n            AxisMarksWidget.prototype.updateMarksPositions = function() {\n                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n                    var widget = _a[_i];\n                    widget.updatePosition();\n                }\n            };\n            AxisMarksWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarksWidget.widgetName = \"AxisMarks\";\n            return AxisMarksWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisMarksWidget = AxisMarksWidget;\n        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n            var axisMark = axisMarkWidget.axisMark;\n            ctx.fillStyle = axisMark.options.lineColor;\n            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n            var xCoord = 15;\n            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n                ctx.textAlign = \"end\";\n                xCoord = axisMarkWidget.indicatorWidth;\n            }\n            ctx.fillText(axisMark.options.title, xCoord, 20);\n            if (!axisMark.options.showValue) return;\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n        };\n        var INDICATOR_POS_Z = .1;\n        var AxisMarkWidget = function() {\n            function AxisMarkWidget(chartState, axisMark) {\n                this.indicatorWidth = 128;\n                this.indicatorHeight = 64;\n                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n                this.chartState = chartState;\n                this.axisMark = axisMark;\n                this.axisType = axisMark.axisType;\n                this.frameValue = axisMark.options.value;\n                this.object3D = new Object3D();\n                this.object3D.position.setZ(-.1);\n                this.line = this.createLine();\n                this.object3D.add(this.line);\n                this.indicator = this.createIndicator();\n                this.object3D.add(this.indicator);\n                this.renderIndicator();\n                this.updatePosition();\n                this.bindEvents();\n            }\n            AxisMarkWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarkWidget.prototype.createLine = function() {\n                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n                var lineGeometry = new Geometry();\n                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n                return new Line(lineGeometry, new LineBasicMaterial({\n                    color: new Color_1.ChartColor(lineColor).value,\n                    linewidth: lineWidth\n                }));\n            };\n            AxisMarkWidget.prototype.createIndicator = function() {\n                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n            };\n            AxisMarkWidget.prototype.renderIndicator = function() {\n                var texture = this.indicator.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n                texture.needsUpdate = true;\n            };\n            AxisMarkWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.axisMark.onDisplayedValueChange(function() {\n                    return _this.renderIndicator();\n                });\n                this.axisMark.onValueChange(function() {\n                    return _this.onValueChangeHandler();\n                });\n            };\n            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n                var _this = this;\n                if (this.moveAnimation) this.moveAnimation.kill();\n                var animations = this.chartState.data.animations;\n                var targetValue = this.axisMark.options.value;\n                var cb = function() {\n                    _this.updatePosition();\n                };\n                if (animations.enabled) {\n                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n                        frameValue: targetValue,\n                        ease: animations.trendChangeEase\n                    });\n                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.frameValue = targetValue;\n                    cb();\n                }\n            };\n            AxisMarkWidget.prototype.updatePosition = function() {\n                var chartState = this.chartState;\n                var screen = chartState.screen;\n                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n                var lineGeometry = this.line.geometry;\n                var hasStickMode = this.axisMark.options.stickToEdges;\n                var _a = this.chartState.data, width = _a.width, height = _a.height;\n                if (isXAxis) {\n                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n                    this.object3D.position.y = screen.getBottom();\n                    lineGeometry.vertices[1].setY(height);\n                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n                } else {\n                    var val = this.frameValue;\n                    var bottomVal = screen.getBottomVal();\n                    var topVal = screen.getTopVal();\n                    var needToStickOnTop = hasStickMode && val > topVal;\n                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n                    var centerYVal = screen.getCenterYVal();\n                    this.object3D.position.x = screen.getLeft();\n                    if (needToStickOnTop) {\n                        this.object3D.position.y = screen.getTop();\n                    } else if (needToStickOnBottom) {\n                        this.object3D.position.y = screen.getBottom();\n                    } else {\n                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n                    }\n                    lineGeometry.vertices[1].setX(width);\n                    var indicatorPosY = val > centerYVal ? -35 : 10;\n                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n                }\n                lineGeometry.verticesNeedUpdate = true;\n            };\n            AxisMarkWidget.typeName = \"simple\";\n            return AxisMarkWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(17);\n        var LineSegments = THREE.LineSegments;\n        var Vector3 = THREE.Vector3;\n        var BorderWidget = function(_super) {\n            __extends(BorderWidget, _super);\n            function BorderWidget(chartState) {\n                _super.call(this, chartState);\n                var _a = chartState.data, width = _a.width, height = _a.height;\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: 0,\n                    transparent: true\n                });\n                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n                this.lineSegments = new LineSegments(geometry, material);\n            }\n            BorderWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            BorderWidget.widgetName = \"Border\";\n            return BorderWidget;\n        }(Widget_1.ChartWidget);\n        exports.BorderWidget = BorderWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Color_1 = __webpack_require__(26);\n        var CANVAS_WIDTH = 128;\n        var CANVAS_HEIGHT = 64;\n        var OFFSET_X = 15;\n        var TrendsIndicatorWidget = function(_super) {\n            __extends(TrendsIndicatorWidget, _super);\n            function TrendsIndicatorWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n                return TrendIndicator;\n            };\n            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n            return TrendsIndicatorWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n        var TrendIndicator = function(_super) {\n            __extends(TrendIndicator, _super);\n            function TrendIndicator(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                this.onTrendChange();\n            }\n            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasIndicator;\n            };\n            TrendIndicator.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendIndicator.prototype.onTrendChange = function() {\n                var trendData = this.trend.getData();\n                var lastItem = trendData[trendData.length - 1];\n                var texture = this.mesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n                texture.needsUpdate = true;\n            };\n            TrendIndicator.prototype.initObject = function() {\n                var color = new Color_1.ChartColor(this.trend.getOptions().lineColor);\n                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"15px Arial\";\n                    ctx.fillStyle = color.rgbaStr;\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n            };\n            TrendIndicator.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segmentsManager.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n                this.segment = segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x + OFFSET_X;\n                var y = endPointVector.y;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n                if (indicatorIsOutOfScreen) {\n                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n                    y -= 25;\n                }\n                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n            };\n            return TrendIndicator;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendIndicator = TrendIndicator;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var LineSegments = THREE.LineSegments;\n        var Trend_1 = __webpack_require__(13);\n        var Utils_1 = __webpack_require__(14);\n        var TrendsLineWidget = function(_super) {\n            __extends(TrendsLineWidget, _super);\n            function TrendsLineWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLine;\n            };\n            TrendsLineWidget.widgetName = \"TrendsLine\";\n            return TrendsLineWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLineWidget = TrendsLineWidget;\n        var TrendLine = function(_super) {\n            __extends(TrendLine, _super);\n            function TrendLine(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeSegmentsInds = [];\n                this.displayedSegments = {};\n                var options = this.trend.getOptions();\n                this.material = new LineBasicMaterial({\n                    color: options.lineColor,\n                    linewidth: options.lineWidth\n                });\n                this.initLine();\n            }\n            TrendLine.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendLine.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            TrendLine.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n                    _this.destroySegments();\n                    _this.setupSegments();\n                }));\n                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n                    _this.setupSegments();\n                }));\n            };\n            TrendLine.prototype.initLine = function() {\n                var geometry = new Geometry();\n                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.lineSegments = new LineSegments(geometry, this.material);\n                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.lineSegments.frustumCulled = false;\n                for (var i = 0; i < this.chartState.data.maxVisibleSegments; i++) {\n                    geometry.vertices.push(new Vector3(), new Vector3());\n                    this.freeSegmentsInds.push(i);\n                }\n                this.vertices = geometry.vertices;\n                this.setupSegments();\n            };\n            TrendLine.prototype.setupSegments = function() {\n                var geometry = this.lineSegments.geometry;\n                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.displayedSegments) {\n                    var lineSegment = this.displayedSegments[segmentId];\n                    var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupSegment(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n                var lineSegment = this.displayedSegments[segmentId];\n                if (!lineSegment) {\n                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n                    var ind = this.freeSegmentsInds.pop();\n                    lineSegment = this.displayedSegments[segmentId] = {\n                        segmentId: segmentId,\n                        ind: ind\n                    };\n                }\n                var segmentInd = lineSegment.ind;\n                var lineStartVertex = this.vertices[segmentInd * 2];\n                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n            };\n            TrendLine.prototype.destroySegments = function() {\n                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n            };\n            TrendLine.prototype.destroySegment = function(segmentId) {\n                var lineSegment = this.displayedSegments[segmentId];\n                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n                lineStartVertex.set(0, 0, 0);\n                lineEndVertex.set(0, 0, 0);\n                delete this.displayedSegments[segmentId];\n                this.freeSegmentsInds.push(lineSegment.ind);\n            };\n            TrendLine.prototype.onZoomFrame = function(options) {\n                var currentScale = this.lineSegments.scale;\n                var state = this.chartState.data;\n                var scaleXFactor = state.xAxis.range.scaleFactor;\n                var scaleYFactor = state.yAxis.range.scaleFactor;\n                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n            };\n            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n                var geometry = this.lineSegments.geometry;\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.displayedSegments[segmentId]) continue;\n                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendLine;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLine = TrendLine;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var Vector3 = THREE.Vector3;\n        var Mesh = THREE.Mesh;\n        var Line = THREE.Line;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var PlaneGeometry = THREE.PlaneGeometry;\n        var Trend_1 = __webpack_require__(13);\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Utils_1 = __webpack_require__(14);\n        var RISE_COLOR = 2927680;\n        var FALL_COLOR = 15619379;\n        var MARGIN_PERCENT = .3;\n        var MAX_CANDLES = 100;\n        var TrendsCandlesWidget = function(_super) {\n            __extends(TrendsCandlesWidget, _super);\n            function TrendsCandlesWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n                return TrendCandlesWidget;\n            };\n            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n            return TrendsCandlesWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n        var TrendCandlesWidget = function(_super) {\n            __extends(TrendCandlesWidget, _super);\n            function TrendCandlesWidget(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeCandlesInds = [];\n                this.candlesPool = [];\n                this.candles = {};\n                this.initObject();\n            }\n            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n            };\n            TrendCandlesWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendCandlesWidget.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n                    _this.destroyCandles();\n                    _this.setupCandles();\n                }));\n                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n                    _this.setupCandles();\n                }));\n            };\n            TrendCandlesWidget.prototype.initObject = function() {\n                var stateData = this.chartState.data;\n                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.scaleXFactor = scaleXFactor;\n                this.scaleYFactor = scaleYFactor;\n                this.object3D = new Object3D();\n                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.object3D.frustumCulled = false;\n                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n                this.setupCandles();\n            };\n            TrendCandlesWidget.prototype.setupCandles = function() {\n                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.candles) {\n                    var segment_1 = this.candles[segmentId].segment;\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupCandle(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n            };\n            TrendCandlesWidget.prototype.destroyCandles = function() {\n                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n            };\n            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n                var candle = this.candles[segmentId];\n                this.object3D.remove(candle.getObject3D());\n                delete this.candles[segmentId];\n            };\n            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n                var currentScale = this.object3D.scale;\n                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n            };\n            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.candles[segmentId]) continue;\n                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n                    this.setupCandle(segmentId, segmentState);\n                }\n            };\n            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n                var candleInd = candleId % MAX_CANDLES;\n                var candle = this.candlesPool[candleInd];\n                if (!candle) {\n                    candle = this.candlesPool[candleInd] = new CandleWidget();\n                }\n                if (!this.candles[candleId]) {\n                    this.candles[candleId] = candle;\n                    this.object3D.add(candle.getObject3D());\n                }\n                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n                candle.setSegment(segmentState);\n            };\n            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendCandlesWidget;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendCandlesWidget = TrendCandlesWidget;\n        var CandleWidget = function() {\n            function CandleWidget() {\n                this.initObject();\n            }\n            CandleWidget.prototype.getObject3D = function() {\n                return this.rect;\n            };\n            CandleWidget.prototype.setSegment = function(segment) {\n                this.segment = segment;\n                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n                var geometry = this.rect.geometry;\n                var material = this.rect.material;\n                var width = segment.endXVal - segment.startXVal;\n                width -= width * MARGIN_PERCENT;\n                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n                leftTop.set(-width / 2, height / 2, 0);\n                rightTop.set(width / 2, height / 2, 0);\n                leftBottom.set(-width / 2, -height / 2, 0);\n                rightBottom.set(width / 2, -height / 2, 0);\n                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n                    leftBottom.setY(leftBottom.y + 1);\n                    rightBottom.setY(rightBottom.y + 1);\n                }\n                material.color.set(color);\n                geometry.verticesNeedUpdate = true;\n                var vLineGeometry = this.vLine.geometry;\n                var vLineMaterial = this.vLine.material;\n                var lineTop = segment.maxYVal - segment.yVal;\n                var lineBottom = segment.minYVal - segment.yVal;\n                vLineGeometry.vertices[0].set(0, lineTop, 0);\n                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n                vLineMaterial.color.set(color);\n                vLineGeometry.verticesNeedUpdate = true;\n                var hLineGeometry = this.hLine.geometry;\n                var hLineMaterial = this.hLine.material;\n                var lineLeft = -width / 2;\n                var lineRight = width / 2;\n                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n                hLineMaterial.color.set(color);\n                hLineGeometry.verticesNeedUpdate = true;\n            };\n            CandleWidget.prototype.initObject = function() {\n                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n                var vLineGeometry = new Geometry();\n                var hLineGeometry = new Geometry();\n                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.rect.add(this.vLine);\n                this.rect.add(this.hLine);\n            };\n            return CandleWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(13);\n        var TrendsBeaconWidget = function(_super) {\n            __extends(TrendsBeaconWidget, _super);\n            function TrendsBeaconWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n                return TrendBeacon;\n            };\n            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n            return TrendsBeaconWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n        var TrendBeacon = function(_super) {\n            __extends(TrendBeacon, _super);\n            function TrendBeacon(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                if (state.data.animations.enabled) {\n                    this.animate();\n                }\n                this.updatePosition();\n            }\n            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendBeacon.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendBeacon.prototype.onTrendChange = function() {\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return _this.updatePosition();\n                }));\n                this.bindEvent(this.chartState.onChange(function(changedProps) {\n                    return _this.onStateChange(changedProps);\n                }));\n                this.bindEvent(this.chartState.onDestroy(function() {\n                    return _this.stopAnimation();\n                }));\n            };\n            TrendBeacon.prototype.initObject = function() {\n                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture(),\n                    transparent: true\n                }));\n                light.scale.set(.2, .2, 1);\n                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture()\n                })));\n                this.segment = this.trend.segmentsManager.getEndSegment();\n            };\n            TrendBeacon.prototype.animate = function() {\n                var _this = this;\n                this.animated = true;\n                var object = this.mesh;\n                var animationObject = {\n                    scale: object.scale.x,\n                    opacity: object.material.opacity\n                };\n                this.mesh.scale.set(.1, .1, 1);\n                setTimeout(function() {\n                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n                        scale: 1,\n                        opacity: 0\n                    });\n                    animation.eventCallback(\"onUpdate\", function() {\n                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n                        object.material.opacity = animationObject.opacity;\n                    }).eventCallback(\"onComplete\", function() {\n                        _this.animation && animation.restart();\n                    });\n                }, 500);\n            };\n            TrendBeacon.prototype.stopAnimation = function() {\n                this.animated = false;\n                this.animation && this.animation.kill();\n                this.animation = null;\n            };\n            TrendBeacon.createTexture = function() {\n                var h = 32, w = 32;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.beginPath();\n                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = \"white\";\n                    ctx.fill();\n                });\n            };\n            TrendBeacon.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segmentsManager.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n                this.segment = trendsSegments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onStateChange = function(changedProps) {\n                if (!changedProps.animations) return;\n                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n                if (changedProps.animations.enabled) {\n                    this.animate();\n                } else {\n                    this.stopAnimation();\n                }\n            };\n            TrendBeacon.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var xVal, yVal;\n                var currentAnimationState = this.segment.currentAnimationState;\n                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    xVal = currentAnimationState.endXVal;\n                    yVal = currentAnimationState.endYVal;\n                } else {\n                    xVal = currentAnimationState.xVal;\n                    yVal = currentAnimationState.endYVal;\n                }\n                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n                this.mesh.position.set(x, endPointVector.y, .1);\n            };\n            return TrendBeacon;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendBeacon = TrendBeacon;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(3));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var EventEmmiter_1 = __webpack_require__(16);\n        exports.DEFAULT_CONFIG = {\n            installPluginWidgets: true\n        };\n        var ChartPlugin = function() {\n            function ChartPlugin(options, config) {\n                if (config === void 0) {\n                    config = {};\n                }\n                this.unsubscribers = [];\n                this.initialState = options;\n                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n                this.name = this.constructor.NAME;\n                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n            }\n            ChartPlugin.prototype.setupChartState = function(chartState) {\n                var _this = this;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n                    return _this.onInitialStateAppliedHandler(initialState);\n                }), this.chartState.onReady(function() {\n                    return _this.onChartReadyHandler();\n                }), this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n                }));\n            };\n            ChartPlugin.prototype.getOptions = function() {\n                return this.chartState.data.pluginsState[this.name];\n            };\n            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n            ChartPlugin.prototype.onChartReadyHandler = function() {};\n            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n            ChartPlugin.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n            };\n            ChartPlugin.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartPlugin.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartPlugin.NAME = \"\";\n            ChartPlugin.pluginWidgets = [];\n            return ChartPlugin;\n        }();\n        exports.ChartPlugin = ChartPlugin;\n    } ]);\n});\n\n\n//# sourceMappingURL=ThreeChart.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-charts/build/ThreeChart.js\n ** module id = 3\n ** module chunks = 0 1\n **/","\nimport Vector3 = THREE.Vector3;\nimport { ChartPlugin, ChartWidget, TrendSegment, TREND_TYPE, Utils, ChartState } from 'three-charts';\nimport { TrendsMarksWidget } from './TrendsMarksWidget';\n\nexport enum TREND_MARK_SIDE {TOP, BOTTOM}\nexport enum EVENTS {CHANGE}\nexport type TTrendsMarksPluginOptions = {items: ITrendMarkOptions[]};\n\nexport interface ITrendMarkOptions {\n\ttrendName: string,\n\tvalue: number,\n\tname?: string,\n\ttitle?: string\n\tdescription?: string,\n\tdescriptionColor?: string,\n\ticon?: string,\n\ticonColor?: string,\n\torientation?: TREND_MARK_SIDE,\n\twidth?: number,\n\theight?: number,\n\t/**\n\t * min distance between trend and mark\n\t */\n\toffset?: number,\n\t/**\n\t * space between marks\n\t */\n\tmargin?: number\n}\n\nconst AXIS_MARK_DEFAULT_OPTIONS: ITrendMarkOptions = {\n\ttrendName: '',\n\ttitle: '',\n\tdescription: '',\n\tdescriptionColor: 'rgb(40,136,75)',\n\tvalue: 0,\n\ticonColor: 'rgb(255, 102, 217)',\n\torientation: TREND_MARK_SIDE.TOP,\n\twidth: 65,\n\theight: 80,\n\toffset: 40,\n\tmargin: 20\n};\n\n\nexport class TrendsMarksPlugin extends ChartPlugin {\n\tstatic NAME = 'TrendsMarks';\n\tstatic pluginWidgets = [TrendsMarksWidget] as typeof ChartWidget[];\n\n\tprivate items: {[name: string]: TrendMark} = {};\n\tprivate rects: {[name: string]: number[]} = {};\n\n\tconstructor(trendsMarksPluginOptions: TTrendsMarksPluginOptions) {\n\t\tsuper(trendsMarksPluginOptions);\n\t}\n\n\tprotected onInitialStateApplied() {\n\t\tthis.bindEvents();\n\t\tthis.onMarksChangeHandler();\n\t}\n\n\tprotected onStateChanged() {\n\t\tthis.onMarksChangeHandler();\n\t}\n\n\n\tgetOptions(): TTrendsMarksPluginOptions {\n\t\treturn super.getOptions() as TTrendsMarksPluginOptions;\n\t}\n\n\tgetItems() {\n\t\treturn this.items;\n\t}\n\n\tgetItem(markName: string) {\n\t\treturn this.items[markName];\n\t}\n\n\tcreateMark(options: ITrendMarkOptions) {\n\t\tvar marksOptions = this.getOptions().items;\n\t\tvar newMarkOptions = marksOptions.concat([options]);\n\t\tthis.chartState.setState({pluginsState: {[this.name]: {items: newMarkOptions}}});\n\t}\n\n\tonChange(cb: () => any) {\n\t\treturn this.ee.subscribe(EVENTS[EVENTS.CHANGE], cb);\n\t}\n\n\tprotected bindEvents() {\n\t\tthis.chartState.trendsManager.onSegmentsRebuilded(() => this.updateMarksSegments());\n\t\tthis.chartState.screen.onZoomFrame(() => this.calclulateMarksPositions());\n\t}\n\n\tprotected onInitialStateAppliedHandler() {\n\t\tthis.onMarksChangeHandler();\n\t}\n\n\tprivate onMarksChangeHandler() {\n\t\tvar trendsMarksOptions = this.getOptions().items;\n\t\tlet actualMarksNames: string[] = [];\n\t\tfor (let options of trendsMarksOptions) {\n\t\t\tvar marks = this.items;\n\n\t\t\t// set mark name\n\t\t\tif (!options.name) {\n\t\t\t\toptions.name = Utils.getUid().toString();\n\t\t\t\tactualMarksNames.push(options.name);\n\t\t\t\tif (marks[options.name]) Utils.error('duplicated mark name ' + options.name);\n\t\t\t} else if (marks[options.name]) {\n\t\t\t\tactualMarksNames.push(options.name);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\toptions = Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\n\t\t\tlet mark = new TrendMark(this.chartState, options);\n\t\t\tmarks[options.name] = mark;\n\t\t}\n\n\t\t// delete not relevant marks\n\t\tfor (let markName in this.items) {\n\t\t\tif (actualMarksNames.indexOf(markName) != -1) continue;\n\t\t\tdelete this.items[markName];\n\t\t}\n\t\tthis.updateMarksSegments();\n\t\tthis.ee.emit(EVENTS[EVENTS.CHANGE]);\n\t}\n\n\n\tprivate calclulateMarksPositions() {\n\t\tthis.rects = {};\n\t\tfor (let markName in this.items) {\n\t\t\tthis.createMarkRect(this.items[markName]);\n\t\t}\n\t}\n\n\tprivate createMarkRect(mark: TrendMark) {\n\t\tif (!mark.segment) return;\n\n\t\tlet state = this.chartState;\n\t\tlet options = mark.options;\n\t\tlet {width, height, offset, name} = options;\n\t\tlet left = state.getPointOnXAxis(mark.xVal) - width / 2;\n\t\tlet top = state.getPointOnYAxis(mark.yVal);\n\t\tlet isTopSideMark = options.orientation == TREND_MARK_SIDE.TOP;\n\t\tlet newOffset: number;\n\t\tlet row = 0;\n\n\t\tif (isTopSideMark) {\n\t\t\ttop += offset + height;\n\t\t} else {\n\t\t\ttop -= offset;\n\t\t}\n\n\t\tlet markRect = [left, top, width, height];\n\t\tlet hasIntersection = false;\n\t\tdo {\n\t\t\tfor (let markName in this.rects) {\n\t\t\t\tlet rect = this.rects[markName];\n\t\t\t\thasIntersection = Utils.rectsIntersect(rect, markRect);\n\t\t\t\tif (!hasIntersection) continue;\n\t\t\t\tif (isTopSideMark) {\n\t\t\t\t\tmarkRect[1] = rect[1] + markRect[3] + options.margin;\n\t\t\t\t} else {\n\t\t\t\t\tmarkRect[1] = rect[1] - rect[3] - options.margin;\n\t\t\t\t}\n\t\t\t\trow++;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (hasIntersection);\n\n\t\tif (isTopSideMark) {\n\t\t\tnewOffset = markRect[1] - markRect[3] - state.getPointOnYAxis(mark.yVal);\n\t\t} else {\n\t\t\tnewOffset = state.getPointOnYAxis(mark.yVal) - markRect[1];\n\t\t}\n\n\t\tmark._setOffset(newOffset);\n\t\tmark._setRow(row);\n\t\tthis.rects[name] = markRect;\n\t}\n\n\tprivate updateMarksSegments() {\n\t\tlet chartState = this.chartState;\n\t\tlet trends = chartState.trendsManager.trends;\n\t\tfor (let trendName in trends) {\n\t\t\tvar marks = this.getTrendMarks(trendName);\n\t\t\tvar marksArr: TrendMark[] = [];\n\t\t\tvar xVals: number[] = [];\n\t\t\tfor (let markName in marks) {\n\t\t\t\tlet mark = marks[markName];\n\t\t\t\txVals.push(mark.options.value);\n\t\t\t\tmarksArr.push(mark);\n\t\t\t\tmark._setSegment(null);\n\t\t\t}\n\t\t\tmarksArr.sort((a, b) => a.options.value - b.options.value);\n\t\t\tlet trend = chartState.getTrend(trendName);\n\t\t\tlet points = trend.segmentsManager.getSegmentsForXValues(xVals.sort((a, b) => a - b));\n\t\t\tfor (let markInd = 0; markInd < marksArr.length; markInd++) {\n\t\t\t\tmarksArr[markInd]._setSegment(points[markInd]);\n\t\t\t}\n\t\t}\n\t\tthis.calclulateMarksPositions();\n\t}\n\n\tprivate getTrendMarks(trendName: string): TrendMark[] {\n\t\tlet trendMarks: TrendMark[] = [];\n\t\tfor (let markName in this.items) {\n\t\t\tif (this.items[markName].options.trendName != trendName) continue;\n\t\t\ttrendMarks.push(this.items[markName]);\n\t\t}\n\t\treturn trendMarks;\n\t}\n\n}\n\nexport class TrendMark {\n\toptions: ITrendMarkOptions;\n\tsegment: TrendSegment;\n\txVal: number;\n\tyVal: number;\n\toffset: number;\n\trow = 0;\n\tprotected chartState: ChartState;\n\n\tconstructor(chartState: ChartState, options: ITrendMarkOptions) {\n\t\tthis.options = options;\n\t\tthis.chartState = chartState;\n\t}\n\n\n\t/**\n\t * only for internal usage\n\t */\n\t_setSegment(segment: TrendSegment) {\n\t\tthis.segment = segment;\n\t\tif (!segment) return;\n\n\t\tlet trend = this.chartState.getTrend(this.options.trendName)\n\n\t\tif (trend.getOptions().type == TREND_TYPE.LINE) {\n\t\t\tthis.xVal = segment.endXVal;\n\t\t\tthis.yVal = segment.endYVal;\n\t\t} else if (this.options.orientation == TREND_MARK_SIDE.TOP) {\n\t\t\tthis.xVal = segment.xVal;\n\t\t\tthis.yVal = segment.maxYVal;\n\t\t} else {\n\t\t\tthis.xVal = segment.xVal;\n\t\t\tthis.yVal = segment.minYVal;\n\t\t}\n\t}\n\n\t_setOffset(offset: number) {\n\t\tthis.offset = offset;\n\t}\n\n\t_setRow(row: number) {\n\t\tthis.row = row;\n\t}\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./plugins/src/TrendsMarksPlugin/TrendsMarksPlugin.ts\n **/","import {ChartState, Utils, TrendsWidget, TrendWidget } from 'three-charts';\nimport Geometry = THREE.Geometry;\nimport Mesh = THREE.Mesh;\nimport LineBasicMaterial = THREE.LineBasicMaterial;\nimport Material = THREE.Material;\nimport Vector3 = THREE.Vector3;\nimport Line = THREE.Line;\nimport Object3D = THREE.Object3D;\nimport Face3 = THREE.Face3;\nimport Texture = THREE.Texture;\nimport Vector2 = THREE.Vector2;\nimport LineSegments = THREE.LineSegments;\nimport LineDashedMaterial = THREE.LineDashedMaterial;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport { TrendMark, TREND_MARK_SIDE, TrendsMarksPlugin } from \"./TrendsMarksPlugin\";\n\n\nconst MAX_MARKS_IN_ROW = 3;\n\n/**\n * widget for drawing trends marks for all trends\n */\nexport class TrendsMarksWidget extends TrendsWidget<TrendMarksWidget> {\n\tstatic widgetName = \"TrendsMarks\";\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendMarksWidget;\n\t}\n}\n\n/**\n * widget for drawing trend marks for one trend\n */\nexport class TrendMarksWidget extends TrendWidget {\n\n\tprivate trendsMarksPlugin: TrendsMarksPlugin;\n\tprivate object3D: Object3D;\n\tprivate marksWidgets: {[name: string]: TrendMarkWidget} = {};\n\n\tconstructor (chartState: ChartState, trendName: string) {\n\t\tsuper(chartState, trendName);\n\t\tthis.object3D = new Object3D();\n\t\tthis.onMarksChange();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\t\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.getTrendsMarksPlugin().onChange(() => this.onMarksChange());\n\t}\n\n\tprivate getTrendsMarksPlugin(): TrendsMarksPlugin {\n\t\treturn this.chartState.getPlugin(TrendsMarksPlugin.NAME) as TrendsMarksPlugin;\n\t}\n\n\tprivate onMarksChange() {\n\t\tlet marksItems = this.getTrendsMarksPlugin().getItems();\n\t\tlet widgets = this.marksWidgets;\n\t\tlet actualMarksNames: string[] = [];\n\t\tfor (let markName in marksItems) {\n\t\t\tactualMarksNames.push(markName);\n\t\t\tif (!widgets[markName]) this.createMarkWidget(marksItems[markName]);\n\t\t}\n\t\tfor (let markName in this.marksWidgets) {\n\t\t\tif (actualMarksNames.indexOf(markName) !== -1) continue;\n\t\t\tthis.destroyMarkWidget(markName);\n\t\t}\n\n\t}\n\t\n\tprivate createMarkWidget(mark: TrendMark) {\n\t\tif (!mark.segment) return;\n\t\tlet markWidget = new TrendMarkWidget(this.chartState, mark);\n\t\tthis.marksWidgets[mark.options.name] = markWidget;\n\t\tthis.object3D.add(markWidget.getObject3D());\n\t}\n\n\tprivate destroyMarkWidget(markName: string) {\n\t\tthis.object3D.remove(this.marksWidgets[markName].getObject3D());\n\t\tdelete this.marksWidgets[markName];\n\t}\n\n\tprotected onZoomFrame() {\n\t\tvar widgets = this.marksWidgets;\n\t\tfor (let markName in widgets) {\n\t\t\twidgets[markName].onZoomFrameHandler();\n\t\t}\n\t}\n\n\tprotected onSegmentsAnimate() {\n\t\tvar widgets = this.marksWidgets;\n\t\tfor (let markName in widgets) {\n\t\t\twidgets[markName].onSegmentsAnimate();\n\t\t}\n\t}\n}\n\n/**\n * widget for drawing one trend mark\n */\nclass TrendMarkWidget {\n\tprivate chartState: ChartState;\n\tprivate mark: TrendMark;\n\tprivate object3D: Object3D;\n\tprivate line: Line;\n\tprivate markMesh: Mesh;\n\tprivate markHeight = 74;\n\tprivate markWidth = 150;\n\tprivate position = {lineHeight: 30, x: 0, y: 0};\n\n\tconstructor(chartState: ChartState, trendMark: TrendMark) {\n\t\tthis.chartState = chartState;\n\t\tthis.mark = trendMark;\n\t\tthis.initObject();\n\t\tthis.show();\n\t}\n\t\n\tprotected initObject() {\n\t\tthis.object3D = new Object3D();\n\t\tthis.markMesh = this.createMarkMesh();\n\t\tthis.line = this.createMarkLine();\n\t\tthis.object3D.add(this.markMesh);\n\t\tthis.object3D.add(this.line);\n\t}\n\n\tprotected createMarkMesh(): Mesh {\n\t\tvar {markHeight, markWidth} = this;\n\t\tvar mark = this.mark.options;\n\t\tvar isTopSide = mark.orientation == TREND_MARK_SIDE.TOP;\n\n\t\tvar texture = Utils.createPixelPerfectTexture(markWidth, markHeight, (ctx) => {\n\n\t\t\tvar circleOffset = isTopSide ? 30 : 0;\n\t\t\tvar circleR = 22;\n\t\t\tvar circleX = markWidth / 2;\n\t\t\tvar circleY = circleOffset + circleR;\n\t\t\tvar textOffset = isTopSide ? 10 : circleR * 2 + 15;\n\n\t\t\t// title and description\n\t\t\tctx.beginPath();\n\t\t\tctx.textAlign = 'center';\n\t\t\tctx.font = \"11px Arial\";\n\t\t\tctx.fillStyle = 'rgba(255,255,255, 0.6)';\n\t\t\tctx.fillText(mark.title, circleX, textOffset);\n\t\t\tctx.fillStyle = mark.descriptionColor;\n\t\t\tctx.fillText(mark.description, circleX, textOffset + 12);\n\n\t\t\t// icon circle\n\t\t\tctx.beginPath();\n\t\t\tctx.fillStyle = mark.iconColor;\n\t\t\tctx.arc(circleX, circleY, circleR, 0, 2 * Math.PI);\n\t\t\tctx.fill();\n\n\t\t\t// icon text\n\t\t\tctx.font = \"19px Arial\";\n\t\t\tctx.fillStyle = 'rgb(255, 255, 255)';\n\t\t\tctx.fillText(mark.icon, circleX, circleY + 7);\n\n\t\t});\n\n\t\tvar material = new THREE.MeshBasicMaterial( {map: texture, side: THREE.FrontSide} );\n\t\tmaterial.transparent = true;\n\n\t\tvar mesh = new Mesh(\n\t\t\tnew THREE.PlaneGeometry(markWidth, markHeight),\n\t\t\tmaterial\n\t\t);\n\n\t\tlet offset = this.mark.options.orientation == TREND_MARK_SIDE.TOP ? this.mark.offset : -this.mark.offset;\n\t\t// mesh.position.setY(markHeight / 2 + offset);\n\n\t\treturn mesh;\n\t}\n\n\tprotected createMarkLine() {\n\t\tlet lineGeometry = new Geometry();\n\t\tlineGeometry.vertices.push( new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, this.mark.offset, 0) );\n\t\tlineGeometry.computeLineDistances();\n\t\tlet lineMaterial = new THREE.LineDashedMaterial( {dashSize: 1, gapSize: 4, transparent: true, opacity: 0.6 } );\n\t\tlet line = new THREE.Line( lineGeometry, lineMaterial );\n\t\tline.position.setZ(-0.1);\n\t\treturn line\n\t}\n\n\tgetObject3D() {\n\t\treturn this.object3D;\n\t}\n\n\tonSegmentsAnimate() {\n\t\tthis.updatePosition();\n\t}\n\n\tonZoomFrameHandler() {\n\t\tthis.updatePosition();\n\t}\n\n\tprivate updatePosition() {\n\t\tif (!this.mark.segment) return;\n\t\tlet mark = this.mark;\n\t\tlet meshMaterial = this.markMesh.material as MeshBasicMaterial;\n\t\tlet lineMaterial = this.line.material as LineBasicMaterial;\n\t\tif (mark.row >= MAX_MARKS_IN_ROW - 1) {\n\t\t\tmeshMaterial.opacity = 0;\n\t\t\tlineMaterial.opacity = 0;\n\t\t} else {\n\t\t\tmeshMaterial.opacity = 1;\n\t\t\tlineMaterial.opacity = 1;\n\t\t}\n\n\t\tlet screen = this.chartState.screen;\n\t\tlet posX = screen.getPointOnXAxis(mark.xVal);\n\t\tlet posY = screen.getPointOnYAxis(mark.yVal);\n\t\tlet lineGeometry = this.line.geometry as Geometry;\n\n\t\tif (mark.options.orientation == TREND_MARK_SIDE.TOP) {\n\t\t\tthis.markMesh.position.setY(this.markHeight / 2 + mark.offset);\n\t\t\tlineGeometry.vertices[1].setY(mark.offset);\n\t\t} else {\n\t\t\tthis.markMesh.position.setY(-mark.offset - this.markHeight / 2);\n\t\t\tlineGeometry.vertices[1].setY(-mark.offset);\n\t\t}\n\t\tlineGeometry.verticesNeedUpdate = true;\n\t\tlineGeometry.lineDistancesNeedUpdate = true;\n\t\tlineGeometry.computeLineDistances();\n\t\tthis.object3D.position.set(posX, posY, 0);\n\t}\n\n\tprivate show() {\n\t\tif (!this.mark.segment) return;\n\t\tthis.updatePosition();\n\t\tvar animations = this.chartState.data.animations;\n\t\tvar time = animations.enabled ? 1 : 0;\n\t\tthis.object3D.scale.set(0.01, 0.01, 1);\n\t\tTweenLite.to(this.object3D.scale, time, {x: 1, y: 1, ease: Elastic.easeOut});\n\t}\n}\n\n\n/** WEBPACK FOOTER **\n ** ./plugins/src/TrendsMarksPlugin/TrendsMarksWidget.ts\n **/"],"sourceRoot":""}