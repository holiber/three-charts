{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///plugins/src/TrendsBeaconWidget/TrendsBeaconWidget.js","webpack:///webpack/bootstrap a25ded0145b4fbb3778e","webpack:///./plugins/src/TrendsBeaconWidget/index.ts","webpack:///./plugins/src/TrendsBeaconWidget/TrendsBeaconWidget.ts","webpack:///./~/three-charts/build/index.js","webpack:///./~/three-charts/build/ThreeChart.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","this","modules","installedModules","__webpack_require__","moduleId","id","loaded","call","m","c","p","__export","hasOwnProperty","__extends","d","b","__","constructor","prototype","Object","create","Mesh","THREE","PlaneBufferGeometry","MeshBasicMaterial","three_charts_1","TrendsBeaconWidget","_super","apply","arguments","getTrendWidgetClass","TrendBeacon","widgetName","TrendsWidget","state","trendName","initObject","data","animations","enabled","animate","updatePosition","widgetIsEnabled","trendOptions","hasBeacon","type","TREND_TYPE","LINE","getObject3D","mesh","onTrendChange","bindEvents","_this","bindEvent","chartState","onScroll","onChange","changedProps","onStateChange","onDestroy","stopAnimation","light","map","createTexture","transparent","scale","set","add","segment","trend","segmentsManager","getEndSegment","animated","object","animationObject","x","opacity","material","setTimeout","animation","TweenLite","to","eventCallback","restart","kill","h","w","Utils","ctx","beginPath","arc","Math","PI","fillStyle","fill","onTransformationFrame","onSegmentsAnimate","trendsSegments","xVal","yVal","currentAnimationState","getOptions","endXVal","endYVal","endPointVector","screen","getPointOnChart","screenWidth","width","screenX","getScreenXByPoint","getPointByScreenX","position","y","TrendWidget","PerspectiveCamera","State_1","Utils_1","AxisWidget_1","GridWidget_1","TrendsGradientWidget_1","TrendsLoadingWidget_1","AxisMarksWidget_1","BorderWidget_1","TrendsIndicatorWidget_1","TrendsLineWidget_1","TrendsCandleWidget_1","TrendsBeaconWidget_1","deps_1","Chart","$container","plugins","widgets","REVISION","error","style","getComputedStyle","parseInt","height","ChartState","installedWidgets","zoomThrottled","throttle","zoomValue","origin","zoom","init","installWidget","Widget","_a","showStats","autoRender","scene","Scene","isStopped","renderer","renderers","antialias","alpha","setPixelRatio","devicePixelRatio","setClearColor","backgroundColor","backgroundOpacity","setSize","appendChild","domElement","$el","display","stats","Stats","setupCamera","widgetsClasses","widgetOptions","WidgetConstructor","widget","push","renderLoop","isDestroyed","begin","render","fpsLimit","fps","delay_1","requestAnimationFrame","end","camera","stop","run","destroy","unbindEvents","forceContextLoss","wtf","context","getState","getTrend","setState","controls","addEventListener","ev","onMouseWheel","onMouseMove","onMouseDown","onMouseUp","onTouchMove","onTouchEnd","autoResize","resizeSensor","ResizeSensor","onChartContainerResizeHandler","clientWidth","clientHeight","unsubscribers","onTrendsChange","autoscroll","options","onScreenTransformHandler","onResize","onChartResize","detach","e","remove","forEach","unsubscribe","camSettings","getCameraSettings","FOV","aspect","near","far","fov","updateProjectionMatrix","z","cameraInitialPosition","clone","scrollX","scrollX_1","setX","scrollY","scrollY_1","setY","autoScroll","oldTrendsMaxX","prevState","computedData","trends","maxXVal","trendsMaxXDelta","maxVisibleX","getScreenRightVal","paddingRightX","getPaddingRight","currentScroll","xAxis","range","scroll","scrollDelta","onScrollStop","cursor","dragMode","clientX","clientY","stopPropagation","preventDefault","zoomOrigin","layerX","wheelDeltaY","touches","MAX_ZOOM_VALUE","MIN_ZOOM_VALUE","min","max","autoScrollIsEnabled","then","createPreviewChart","userOptions","previewChartOptions","Grid","Axis","TrendsGradient","deepMerge","window","CanvasRenderer","WebGLRenderer","TrendsLineWidget","TrendsCandlesWidget","AxisWidget","GridWidget","TrendsIndicatorWidget","TrendsGradientWidget","TrendsLoadingWidget","AxisMarksWidget","BorderWidget","TweenMax","isPlainObject","EE2","es6_promise_1","Promise","a","dom","k","children","length","l","document","createElement","cssText","g","performance","Date","now","r","Panel","f","self","memory","t","addPanel","showPanel","update","usedJSHeapSize","jsHeapSizeLimit","setMode","Infinity","round","u","n","q","getContext","font","textBaseline","fillRect","fillText","globalAlpha","v","drawImage","SpriteCanvasMaterial","parameters","Material","color","Color","program","setValues","copy","console","log","_renderData","_elements","_lights","_projector","Projector","_canvas","canvas","undefined","_canvasWidth","_canvasHeight","_canvasWidthHalf","floor","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_pixelRatio","_context","_clearColor","_clearAlpha","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_camera","_v1","_v2","_v3","_v4","_v5","RenderableVertex","_v6","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_v4x","_v4y","_v5x","_v5y","_v6x","_v6y","_color","_color1","_color2","_color3","_color4","_diffuseColor","_emissiveColor","_lightColor","_patterns","_image","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_clipBox","Box2","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_vector3","Vector3","_centroid","_normal","_normalViewMatrix","Matrix3","setLineDash","autoClear","sortObjects","sortElements","info","vertices","faces","supportsVertexTextures","setFaceCulling","getContextAttributes","getPixelRatio","value","updateStyle","setViewport","setScissor","setScissorTest","setClearColorHex","hex","warn","getClearColor","getClearAlpha","getMaxAnisotropy","clear","isEmpty","intersect","expandByScalar","clearRect","setBlending","NormalBlending","setOpacity","setFillStyle","makeEmpty","clearColor","clearDepth","clearStencil","Camera","setTransform","translate","projectScene","elements","lights","getNormalMatrix","matrixWorldInverse","calculateLights","el","element","RenderableSprite","renderSprite","RenderableLine","v1","v2","positionScreen","setFromPoints","intersectsBox","renderLine","RenderableFace","v3","overdraw","expand","renderFace3","union","setRGB","ll","lightColor","AmbientLight","DirectionalLight","PointLight","calculateLight","normal","lightPosition","setFromMatrixPosition","matrixWorld","normalize","amount","dot","intensity","multiplyScalar","subVectors","distance","distanceTo","blending","scaleX","scaleY","dist","sqrt","SpriteMaterial","texture","pattern","version","textureToPattern","bitmap","image","ox","offset","oy","sx","repeat","sy","cx","cy","save","rotation","rotate","restore","getStyle","setStrokeStyle","moveTo","lineTo","LineBasicMaterial","setLineWidth","linewidth","setLineCap","linecap","setLineJoin","linejoin","vertexColors","VertexColors","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","LineDashedMaterial","dashSize","gapSize","uv1","uv2","uv3","drawTriangle","MeshLambertMaterial","MeshPhongMaterial","emissive","FaceColors","multiply","positionWorld","divideScalar","normalModel","wireframe","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","mapping","UVMapping","uvs","patternPath","envMap","SphericalReflectionMapping","vertexNormalsModel","applyMatrix3","MeshNormalMaterial","addScalar","x0","y0","x1","y1","x2","y2","closePath","CompressedTexture","DataTexture","complete","repeatX","wrapS","RepeatWrapping","repeatY","wrapT","createPattern","onUpdate","u0","v0","u1","u2","det","idet","offsetX","offsetY","transform","clipImage","clip","pixels","globalCompositeOperation","AdditiveBlending","SubtractiveBlending","MultiplyBlending","lineWidth","lineCap","lineJoin","strokeStyle","RenderableObject","renderOrder","vertexNormalsLength","Vector2","Vector4","visible","vertex","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","objects","_vector4","Box3","_boundingBox","_points3","Array","_points4","_viewMatrix","Matrix4","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_normalMatrix","_frustum","Frustum","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVector","vector","project","unprojectVector","unproject","pickingRay","RenderList","normals","normalMatrix","setObject","projectVertex","applyMatrix4","invW","pushVertex","getNextVertexInPool","pushNormal","pushUv","checkTriangleVisibility","checkBackfaceCulling","pushLine","getNextLineInPool","pushTriangle","side","DoubleSide","getNextFaceInPool","fromArray","i","uv","renderList","autoUpdate","updateMatrixWorld","parent","getInverse","multiplyMatrices","projectionMatrix","setFromMatrix","addObject","getNextObjectInPool","applyProjection","traverseVisible","Light","Line","frustumCulled","intersectsObject","Sprite","intersectsSprite","sort","painterSort","o","ol","geometry","BufferGeometry","attributes","groups","positions","array","index","indices","group","start","count","Geometry","faceVertexUvs","isFaceMaterial","MultiMaterial","objectMaterials","vl","morphTargets","morphInfluences","morphTargetInfluences","tl","influence","target","targetVertex","fl","face","materials","materialIndex","FrontSide","BackSide","negate","faceVertexNormals","vertexNormals","nl","vertexUvs","step","LineSegments","clipLine","colors","getNextSpriteInPool","abs","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","isObject","isObjectObject","toString","ctor","prot","val","isArray","__WEBPACK_AMD_DEFINE_RESULT__","_isArray","obj","defaultMaxListeners","_events","_conf","configure","conf","delimiter","maxListeners","wildcard","newListener","listenerTree","EventEmitter","searchListenerTree","handlers","tree","listeners","leaf","len","branch","xTree","xxTree","isolatedBranch","endReached","typeLength","currentType","nextType","_listeners","concat","**","growListenerTree","listener","split","slice","name","shift","warned","trace","setMaxListeners","event","once","fn","many","ttl","Error","off","_origin","on","emit","_all","args","handler","ns","onAny","addListener","leafs","iLeaf","splice","offAny","fns","removeListener","removeAllListeners","listenersAny","EventEmitter2","callback","EventQueue","j","prop","currentStyle","getPropertyValue","attachResizeEvent","resized","resizedAttached","className","styleChild","innerHTML","fixed","absolute","childNodes","expandChild","shrink","shrinkChild","lastWidth","lastHeight","reset","offsetWidth","offsetHeight","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","cb","attachEvent","elementType","isCollectionTyped","jQuery","Elements","removeChild","Trend_1","EventEmmiter_1","Widget_1","TrendsManager_1","Screen_1","AxisMarks_1","interfaces_1","CHART_STATE_EVENTS","INITIAL_STATE_APPLIED","READY","DESTROY","CHANGE","TREND_CHANGE","TRENDS_CHANGE","ZOOM","RESIZE","SCROLL","SCROLL_STOP","PLUGINS_STATE_CHANGED","initialState","AXIS_RANGE_TYPE","ALL","from","padding","margin","dataType","AXIS_DATA_TYPE","NUMBER","gridMinSize","marks","yAxis","RELATIVE_END","trendChangeSpeed","trendChangeEase","zoomSpeed","zoomEase","scrollSpeed","scrollEase","Linear","easeNone","autoScrollSpeed","autoScrollEase","trendDefaultState","maxSegmentLength","lineColor","hasBackground","settingsForTypes","CANDLE","minSegmentLengthInPx","maxSegmentLengthInPx","pluginsState","eventEmitterMaxListeners","maxVisibleSegments","isReady","ee","trendsManager","TrendsManager","calculatedOptions","installPlugins","getComputedData","savePrevState","Screen","xAxisMarks","AxisMarks","AXIS_TYPE","X","yAxisMarks","Y","initListeners","subscribe","onInitialStateApplied","onReady","onZoom","onPluginsStateChange","newState","eventData","silent","stateData","key","trendsData","newStateContainsData","keys","recalculateResult","recalculateState","emitChangedStateEvents","patch","actualData","widgetsOptions","WidgetClass","defaultOptions","getDefaultOptions","ChartWidget","cursorOptions","isMouseDrag","oldX","currentX","deltaXVal","pxToValueByXAxis","chartWasResized","scrollXChanged","needToRecalculateXAxis","zeroVal","xAxisPatch","recalculateXAxis","needToRecalculateYAxis","AUTO","isMirrorMode","yAxisPatch","recalculateYAxis","allChangedProps","computeAll","getEndXVal","minXVal","getStartXVal","copyProps","scrollStopEventNeeded","scrollChangeEventsNeeded","zoomEventsNeeded","resizeEventNeeded","pluginStateChangedEventNeeded","plugin","PluginClass","pluginName","NAME","pluginWidgets","PluginWidget","setupChartState","getPlugin","changedTrends","newData","handleTrendsChange","axisRange","isInitialize","scaleFactor","currentScaleFactor","rangeLength","needToRecalculateZoom","rangeMoreThenMaxValue","maxLength","rangeLessThenMinValue","minLength","fixScale","yAxisRange","trendsEndXVal","trendsStartXVal","xRange","xFrom","xTo","xRangeLength","needToZoom","maxY","getMaxYVal","minY","getMinYVal","trendLastY","distanceFromZeroValForMaxY","distanceFromZeroValForMinY","maxDistanceFromZeroVal","paddingTopInPercents","paddingBottomInPercents","rangeLengthInPercents","visibleRangeLength","fromVal","toVal","maxScreenY","getScreenYByValue","minScreenY","currentAxisRange","newZoom","currentRange","nextRange","newScroll","resolve","animationTime","zoomToRange","scrollToEnd","getPointOnXAxis","getPointOnYAxis","getValueOnXAxis","valueToPxByXAxis","valueToPxByYAxis","pxToValueByYAxis","getValueByScreenX","getValueByScreenY","getScreenXByValue","getScreenLeftVal","TrendSegmentsManager_1","EVENTS","PREPEND_REQUEST","Trend","minYVal","maxYVal","dataset","prepareData","TrendSegmentsManager","checkForPrependRequest","changedOptions","getCalculatedOptions","appendData","rawData","getData","updatedTrendData","changeData","prependData","allData","_i","newData_1","item","statePatch","fromX","toX","filteredData","data_1","getFirstItem","getLastItem","setOptions","onPrependRequest","onDataChange","onChangeCb","prependRequest","minScreenX","needToRequest","requestedDataLength","reject","currentData","isPrepend","initialItem","getUid","deepmerge","src","mergeArrays","dst","indexOf","obj1","obj2","deepCopy","JSON","parse","stringify","toFixed","num","digitsCount","maxDigits","result","intVal","intStr","lengthDiff","afterPointDigitsCount","afterPointStr","substr","Texture","needsUpdate","createPixelPerfectTexture","minFilter","NearestFilter","msg","currentId","getDistance","num1","num2","binarySearchClosestInd","arr","mid","lo","hi","binarySearchClosest","ind","rectsIntersect","r1","r2","left1","top1","width1","height1","left2","top2","width2","height2","right1","right2","bottom1","bottom2","func","ms","isThrottled","savedArgs","savedThis","wrapper","msToTimeString","timestamp","s","getRandomItem","random","srcObject","dstObject","props","excludeProps","MAX_ANIMATED_SEGMENTS","REBUILD","DISLPAYED_RANGE_CHANGED","ANIMATION_FRAME","segmentsById","segments","animatedSegmentsIds","segmentsLength","animatedSegmentsForAppend","animatedSegmentsForPrepend","nextEmptyId","startSegmentId","endSegmentId","tryToRebuildSegments","onTrendChangeHandler","onZoomHandler","recalculateDisplayedRange","onDestroyHandler","appendAnimation","prependAnimation","segmentsRebuilded","needToRebuildSegments","isAppend","getSegment","getStartSegment","force","trendTypeName","trendTypesSettings","trendTypeSettings","needToRebuild","segmentLength","currentSegmentLengthInPx","Number","currentMaxSegmentLengthInPx","ceil","stopAllAnimations","segmentsAreRebuilded","_b","firstDisplayedSegment","lastDisplayedSegment","displayedRange","firstDisplayedSegmentInd","lastDisplayedSegmentInd","displayedRangeChanged","getSegmentsForXValues","values","valueInd","lastValueInd","results","hasValue","startXVal","getNext","valueInPoint","onAnimationFrame","onRebuild","onDisplayedRangeChanged","allocateNextSegment","TrendSegment","prevSegment","nextId","prevId","allocatePrevSegment","nextSegment","unshift","needRebuildSegments","trendData","startItemInd","initialSegment","initialAnimationState","createAnimationState","itemInd","itemIsInserted","appendItem","isLastItem","isCompleted","recalculateItems","segmentIsReadyForAnimate","startYVal","targetAnimationState","prevItem","animationsOptions","time","segmentId","segment_1","prependItem","nextItem","isActive","onAnimationFrameHandler","ease","objectToAnimate","animationValue","coefficient","animatedSegmentsIds_1","targetValue","initialValue","currentValue","trendPoints","items","trendSegments","itemsLength","endItem","startItem","minX","maxX","middleXVal","middleYVal","yVals","nextPoint","getPrev","prevPoint","getFrameVal","getFramePoint","frameVal","eventName","listenersCount","unsubscriber","SEGMENTS_REBUILDED","trendsCalculatedOptions","createTrend","getEnabledTrends","enabledTrends","allTrends","firstTrendData","getExtremumYVal","extremumIsMax","compareFn","trends_1","trendYValues","dataItem","NaN","onSegmentsRebuilded","onInitialStateAppliedHandler","_loop_1","this_1","scrollXVal","scrollYVal","zoomX","zoomY","currentScrollX","currentScrollY","currentZoomX","currentZoomY","vFOV","tan","onZoomFrame","onScrollFrame","cameraIsMoving","scrollXAnimation","zoomXAnimation","onScrollXHandler","onZoomXHandler","onScrollYHandler","onZoomYHandler","scrollYAnimation","zoomYAnimation","isDragMode","canAnimate","zoomXChanged","isAutoscroll","pause","targetX","targetY","targetZoom","getPointByScreenY","screenY","getTop","getBottom","getLeft","getTopVal","getBottomVal","getCenterYVal","AXIS_MARK_DEFAULT_OPTIONS","showValue","stickToEdges","title","axisType","axisMarksOptions","axisMarksOptions_1","axisMark","AxisTimeleftMark","AxisMark","startVal","endVal","markName","mark","markVal","markWasCrossed","getItems","getItem","renderOnTrendsChange","newOptions","getDisplayedVal","displayedValue","String","onMarkCrossed","onValueChange","onDisplayedValueChange","typeName","Object3D","object3D","axisXObject","axisYObject","setupAxis","updateAxisXRequest","updateAxis","onScrollChange","orientation","isXAxis","visibleWidth","visibleHeight","canvasWidth","canvasHeight","traverse","axisMesh","PlaneGeometry","axisOptions","axisGridParams","getGridParamsForAxis","edgeOffset","segmentsCount","pxVal","textAlign","DATE","getDateStr","gridParams","sec","hour","day","tf","getHours","getMinutes","getSeconds","gridSizeH","gridSizeV","initGrid","updateGrid","updateGridThrottled","xLinesCount","yLinesCount","lineSegments","setZ","axisXGrid","axisYGrid","scrollXInSegments","scrollYInSegments","gridScrollXVal","gridScrollYVal","lineInd","lineSegment","getVerticalLineSegment","getHorizontalLineSegment","verticesNeedUpdate","localYVal","widthVal","localXVal","heightVal","axisWidth","axisLength","gridStep","gridStepInPixels","minGridStepInPixels","axisLengthStr","axisLengthPointPosition","intPartLength","gridStepFound","digitPos","power","multiplier","pow","dividers","dividerInd","nextGridStep","nextGridStepInPixels","gridStart","gridEnd","stepInPx","TrendsWidget_1","Color_1","TrendGradient","visibleSegmentsCnt","segmentsIds","Uint16Array","initGradient","updateSegments","gradient","Face3","ChartColor","scaleXFactor","scaleYFactor","currentScale","trendSegmentsManager","includes","setupSegmentVertices","segmentInd","prevVisibleSegmentsCnt","segmentsToProcessCnt","segmentState","gradientSegmentInd","topLeft","bottomLeft","bottomRight","topRight","screenHeightVal","startX","toLocalX","startY","toLocalY","endX","endY","trendsOptions","TrendWidgetClass","widgetCanBeEnabled","createTrendWidget","destroyTrendWidget","widgetObject","getObjectByName","parseColor","cache","replace","exec","isNaN","colorStr","rgba","hexStr","rgbaStr","TrendLoading","deactivate","activate","center","pointVector","axisMarksWidgets","createAxisMark","axisMarkWidget","AxisMarkWidget","updateMarksPositions","DEFAULT_INDICATOR_RENDER_FUNCTION","indicatorWidth","indicatorHeight","xCoord","INDICATOR_POS_Z","indicatorRenderFunction","frameValue","createLine","indicator","createIndicator","renderIndicator","lineGeometry","onValueChangeHandler","moveAnimation","hasStickMode","bottomVal","topVal","needToStickOnTop","needToStickOnBottom","centerYVal","indicatorPosY","CANVAS_WIDTH","CANVAS_HEIGHT","OFFSET_X","TrendIndicator","hasIndicator","lastItem","segmentEndXVal","segmentEndYVal","indicatorIsOutOfScreen","TrendLine","freeSegmentsInds","displayedSegments","initLine","destroySegments","setupSegments","segmentIsNotDisplayed","destroySegment","setupSegment","pop","lineStartVertex","lineEndVertex","toLocalVec","vec","RISE_COLOR","FALL_COLOR","MARGIN_PERCENT","MAX_CANDLES","TrendCandlesWidget","freeCandlesInds","candlesPool","candles","destroyCandles","setupCandles","destroyCandle","setupCandle","candle","candleId","candleInd","CandleWidget","setSegment","rect","leftTop","rightTop","leftBottom","rightBottom","vLineGeometry","vLine","vLineMaterial","lineTop","lineBottom","hLineGeometry","hLine","hLineMaterial","lineLeft","lineRight","DEFAULT_CONFIG","installPluginWidgets","ChartPlugin","config","onChartReadyHandler","changedPluginsStates","onStateChanged","changedState"],"mappings":"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","file":"plugins/src/TrendsBeaconWidget/TrendsBeaconWidget.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"THREE_CHARTS\"] = factory();\n\telse\n\t\troot[\"THREE_CHARTS\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tfunction __export(m) {\r\n\t    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n\t}\r\n\t__export(__webpack_require__(1));\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar __extends = (this && this.__extends) || function (d, b) {\r\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n\t    function __() { this.constructor = d; }\r\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n\t};\r\n\tvar Mesh = THREE.Mesh;\r\n\tvar PlaneBufferGeometry = THREE.PlaneBufferGeometry;\r\n\tvar MeshBasicMaterial = THREE.MeshBasicMaterial;\r\n\tvar three_charts_1 = __webpack_require__(2);\r\n\t/**\r\n\t * widget adds blinking beacon on trends end\r\n\t * activated when trend.hasBeacon = true\r\n\t */\r\n\tvar TrendsBeaconWidget = (function (_super) {\r\n\t    __extends(TrendsBeaconWidget, _super);\r\n\t    function TrendsBeaconWidget() {\r\n\t        _super.apply(this, arguments);\r\n\t    }\r\n\t    TrendsBeaconWidget.prototype.getTrendWidgetClass = function () {\r\n\t        return TrendBeacon;\r\n\t    };\r\n\t    TrendsBeaconWidget.widgetName = 'TrendsBeacon';\r\n\t    return TrendsBeaconWidget;\r\n\t}(three_charts_1.TrendsWidget));\r\n\texports.TrendsBeaconWidget = TrendsBeaconWidget;\r\n\tvar TrendBeacon = (function (_super) {\r\n\t    __extends(TrendBeacon, _super);\r\n\t    function TrendBeacon(state, trendName) {\r\n\t        _super.call(this, state, trendName);\r\n\t        this.initObject();\r\n\t        if (state.data.animations.enabled) {\r\n\t            this.animate();\r\n\t        }\r\n\t        this.updatePosition();\r\n\t    }\r\n\t    TrendBeacon.widgetIsEnabled = function (trendOptions) {\r\n\t        return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == three_charts_1.TREND_TYPE.LINE;\r\n\t    };\r\n\t    TrendBeacon.prototype.getObject3D = function () {\r\n\t        return this.mesh;\r\n\t    };\r\n\t    TrendBeacon.prototype.onTrendChange = function () {\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendBeacon.prototype.bindEvents = function () {\r\n\t        var _this = this;\r\n\t        _super.prototype.bindEvents.call(this);\r\n\t        this.bindEvent(this.chartState.onScroll(function () { return _this.updatePosition(); }));\r\n\t        this.bindEvent(this.chartState.onChange(function (changedProps) { return _this.onStateChange(changedProps); }));\r\n\t        this.bindEvent(this.chartState.onDestroy(function () { return _this.stopAnimation(); }));\r\n\t    };\r\n\t    TrendBeacon.prototype.initObject = function () {\r\n\t        // add beacon\r\n\t        var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({ map: TrendBeacon.createTexture(), transparent: true }));\r\n\t        light.scale.set(0.2, 0.2, 1);\r\n\t        // add dot\r\n\t        light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({ map: TrendBeacon.createTexture() })));\r\n\t        this.segment = this.trend.segmentsManager.getEndSegment();\r\n\t    };\r\n\t    TrendBeacon.prototype.animate = function () {\r\n\t        var _this = this;\r\n\t        this.animated = true;\r\n\t        var object = this.mesh;\r\n\t        var animationObject = {\r\n\t            scale: object.scale.x,\r\n\t            opacity: object.material.opacity\r\n\t        };\r\n\t        this.mesh.scale.set(0.1, 0.1, 1);\r\n\t        setTimeout(function () {\r\n\t            var animation = _this.animation = TweenLite.to(animationObject, 1, { scale: 1, opacity: 0 });\r\n\t            animation.eventCallback('onUpdate', function () {\r\n\t                object.scale.set(animationObject.scale, animationObject.scale, 1);\r\n\t                object.material.opacity = animationObject.opacity;\r\n\t            }).eventCallback('onComplete', function () {\r\n\t                _this.animation && animation.restart();\r\n\t            });\r\n\t        }, 500);\r\n\t    };\r\n\t    TrendBeacon.prototype.stopAnimation = function () {\r\n\t        this.animated = false;\r\n\t        this.animation && this.animation.kill();\r\n\t        this.animation = null;\r\n\t    };\r\n\t    TrendBeacon.createTexture = function () {\r\n\t        var h = 32, w = 32;\r\n\t        return three_charts_1.Utils.createTexture(h, w, function (ctx) {\r\n\t            ctx.beginPath();\r\n\t            ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\r\n\t            ctx.fillStyle = 'white';\r\n\t            ctx.fill();\r\n\t        });\r\n\t    };\r\n\t    TrendBeacon.prototype.onTransformationFrame = function () {\r\n\t        this.segment = this.trend.segmentsManager.getEndSegment();\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendBeacon.prototype.onSegmentsAnimate = function (trendsSegments) {\r\n\t        this.segment = trendsSegments.getEndSegment();\r\n\t        this.updatePosition();\r\n\t    };\r\n\t    TrendBeacon.prototype.onStateChange = function (changedProps) {\r\n\t        if (!changedProps.animations)\r\n\t            return;\r\n\t        if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated)\r\n\t            return;\r\n\t        if (changedProps.animations.enabled) {\r\n\t            this.animate();\r\n\t        }\r\n\t        else {\r\n\t            this.stopAnimation();\r\n\t        }\r\n\t    };\r\n\t    TrendBeacon.prototype.updatePosition = function () {\r\n\t        var state = this.chartState;\r\n\t        var xVal, yVal;\r\n\t        var currentAnimationState = this.segment.currentAnimationState;\r\n\t        if (this.trend.getOptions().type == three_charts_1.TREND_TYPE.LINE) {\r\n\t            xVal = currentAnimationState.endXVal;\r\n\t            yVal = currentAnimationState.endYVal;\r\n\t        }\r\n\t        else {\r\n\t            xVal = currentAnimationState.xVal;\r\n\t            yVal = currentAnimationState.endYVal;\r\n\t        }\r\n\t        var endPointVector = state.screen.getPointOnChart(xVal, yVal);\r\n\t        var screenWidth = state.data.width;\r\n\t        var x = endPointVector.x;\r\n\t        var screenX = state.screen.getScreenXByPoint(endPointVector.x);\r\n\t        if (screenX < 0)\r\n\t            x = state.screen.getPointByScreenX(0);\r\n\t        if (screenX > screenWidth)\r\n\t            x = state.screen.getPointByScreenX(screenWidth);\r\n\t        this.mesh.position.set(x, endPointVector.y, 0.1);\r\n\t    };\r\n\t    return TrendBeacon;\r\n\t}(three_charts_1.TrendWidget));\r\n\texports.TrendBeacon = TrendBeacon;\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(3)\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function webpackUniversalModuleDefinition(root, factory) {\n\t    if (true) module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"THREE_CHARTS\"] = factory(); else root[\"THREE_CHARTS\"] = factory();\n\t})(this, function() {\n\t    return function(modules) {\n\t        var installedModules = {};\n\t        function __webpack_require__(moduleId) {\n\t            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n\t            var module = installedModules[moduleId] = {\n\t                exports: {},\n\t                id: moduleId,\n\t                loaded: false\n\t            };\n\t            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t            module.loaded = true;\n\t            return module.exports;\n\t        }\n\t        __webpack_require__.m = modules;\n\t        __webpack_require__.c = installedModules;\n\t        __webpack_require__.p = \"\";\n\t        return __webpack_require__(0);\n\t    }([ function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(1));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(2));\n\t        __export(__webpack_require__(21));\n\t        __export(__webpack_require__(20));\n\t        __export(__webpack_require__(19));\n\t        __export(__webpack_require__(12));\n\t        __export(__webpack_require__(13));\n\t        __export(__webpack_require__(15));\n\t        __export(__webpack_require__(18));\n\t        __export(__webpack_require__(14));\n\t        __export(__webpack_require__(17));\n\t        __export(__webpack_require__(35));\n\t        __export(__webpack_require__(25));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        __webpack_require__(3);\n\t        var PerspectiveCamera = THREE.PerspectiveCamera;\n\t        var State_1 = __webpack_require__(12);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var AxisWidget_1 = __webpack_require__(22);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var TrendsGradientWidget_1 = __webpack_require__(24);\n\t        var TrendsLoadingWidget_1 = __webpack_require__(27);\n\t        var AxisMarksWidget_1 = __webpack_require__(28);\n\t        var BorderWidget_1 = __webpack_require__(29);\n\t        var TrendsIndicatorWidget_1 = __webpack_require__(30);\n\t        var TrendsLineWidget_1 = __webpack_require__(31);\n\t        var TrendsCandleWidget_1 = __webpack_require__(32);\n\t        var TrendsBeaconWidget_1 = __webpack_require__(33);\n\t        var deps_1 = __webpack_require__(34);\n\t        var Chart = function() {\n\t            function Chart(state, $container, plugins) {\n\t                var _this = this;\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.widgets = [];\n\t                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n\t                if (!$container) {\n\t                    Utils_1.Utils.error(\"$el must be set\");\n\t                }\n\t                var style = getComputedStyle($container);\n\t                state.width = parseInt(style.width);\n\t                state.height = parseInt(style.height);\n\t                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n\t                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n\t                    return _this.zoom(zoomValue, origin);\n\t                }, 200);\n\t                this.$container = $container;\n\t                this.init($container);\n\t            }\n\t            Chart.installWidget = function(Widget) {\n\t                if (!Widget.widgetName) {\n\t                    Utils_1.Utils.error(\"unnamed widget\");\n\t                }\n\t                this.installedWidgets[Widget.widgetName] = Widget;\n\t            };\n\t            Chart.prototype.init = function($container) {\n\t                var state = this.state;\n\t                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n\t                this.scene = new THREE.Scene();\n\t                this.isStopped = !autoRender.enabled;\n\t                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n\t                    antialias: true,\n\t                    alpha: true\n\t                });\n\t                renderer.setPixelRatio(Chart.devicePixelRatio);\n\t                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n\t                renderer.setSize(w, h);\n\t                $container.appendChild(renderer.domElement);\n\t                this.$el = renderer.domElement;\n\t                this.$el.style.display = \"block\";\n\t                if (showStats) {\n\t                    this.stats = new Stats();\n\t                    $container.appendChild(this.stats.domElement);\n\t                }\n\t                this.setupCamera();\n\t                var widgetsClasses = this.state.widgetsClasses;\n\t                for (var widgetName in widgetsClasses) {\n\t                    var widgetOptions = this.state.data.widgets[widgetName];\n\t                    if (!widgetOptions.enabled) continue;\n\t                    var WidgetConstructor = widgetsClasses[widgetName];\n\t                    var widget = new WidgetConstructor(this.state);\n\t                    this.scene.add(widget.getObject3D());\n\t                    this.widgets.push(widget);\n\t                }\n\t                this.bindEvents();\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.renderLoop = function() {\n\t                var _this = this;\n\t                if (this.isDestroyed) return;\n\t                this.stats && this.stats.begin();\n\t                this.render();\n\t                if (this.isStopped) return;\n\t                var fpsLimit = this.state.data.autoRender.fps;\n\t                if (fpsLimit) {\n\t                    var delay_1 = 1e3 / fpsLimit;\n\t                    setTimeout(function() {\n\t                        return requestAnimationFrame(function() {\n\t                            return _this.renderLoop();\n\t                        });\n\t                    }, delay_1);\n\t                } else {\n\t                    requestAnimationFrame(function() {\n\t                        return _this.renderLoop();\n\t                    });\n\t                }\n\t                this.stats && this.stats.end();\n\t            };\n\t            Chart.prototype.render = function() {\n\t                this.renderer.render(this.scene, this.camera);\n\t            };\n\t            Chart.prototype.stop = function() {\n\t                this.isStopped = true;\n\t            };\n\t            Chart.prototype.run = function() {\n\t                this.isStopped = false;\n\t                this.renderLoop();\n\t            };\n\t            Chart.prototype.destroy = function() {\n\t                this.isDestroyed = true;\n\t                this.stop();\n\t                this.state.destroy();\n\t                this.unbindEvents();\n\t                try {\n\t                    this.renderer.forceContextLoss();\n\t                } catch (wtf) {}\n\t                this.renderer.context = null;\n\t                this.renderer.domElement = null;\n\t                this.renderer = null;\n\t            };\n\t            Chart.prototype.getState = function() {\n\t                return this.state.data;\n\t            };\n\t            Chart.prototype.getTrend = function(trendName) {\n\t                return this.state.getTrend(trendName);\n\t            };\n\t            Chart.prototype.setState = function(state) {\n\t                return this.state.setState(state);\n\t            };\n\t            Chart.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var $el = this.$el;\n\t                if (this.state.data.controls.enabled) {\n\t                    $el.addEventListener(\"mousewheel\", function(ev) {\n\t                        _this.onMouseWheel(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousemove\", function(ev) {\n\t                        _this.onMouseMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"mousedown\", function(ev) {\n\t                        return _this.onMouseDown(ev);\n\t                    });\n\t                    $el.addEventListener(\"mouseup\", function(ev) {\n\t                        return _this.onMouseUp(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchmove\", function(ev) {\n\t                        _this.onTouchMove(ev);\n\t                    });\n\t                    $el.addEventListener(\"touchend\", function(ev) {\n\t                        _this.onTouchEnd(ev);\n\t                    });\n\t                }\n\t                if (this.state.data.autoResize) {\n\t                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n\t                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n\t                    });\n\t                }\n\t                this.unsubscribers = [ this.state.onTrendsChange(function() {\n\t                    return _this.autoscroll();\n\t                }), this.state.screen.onTransformationFrame(function(options) {\n\t                    return _this.onScreenTransformHandler(options);\n\t                }), this.state.onResize(function(options) {\n\t                    return _this.onChartResize();\n\t                }) ];\n\t            };\n\t            Chart.prototype.unbindEvents = function() {\n\t                try {\n\t                    this.resizeSensor && this.resizeSensor.detach();\n\t                } catch (e) {}\n\t                this.$el.remove();\n\t                this.unsubscribers.forEach(function(unsubscribe) {\n\t                    return unsubscribe();\n\t                });\n\t            };\n\t            Chart.prototype.setupCamera = function() {\n\t                var camSettings = this.state.screen.getCameraSettings();\n\t                if (!this.camera) {\n\t                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n\t                    this.scene.add(this.camera);\n\t                } else {\n\t                    this.camera.fov = camSettings.FOV;\n\t                    this.camera.aspect = camSettings.aspect;\n\t                    this.camera.far = camSettings.far;\n\t                    this.camera.near = camSettings.near;\n\t                    this.camera.updateProjectionMatrix();\n\t                }\n\t                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n\t                this.cameraInitialPosition = this.camera.position.clone();\n\t                this.onScreenTransformHandler(this.state.screen.options);\n\t            };\n\t            Chart.prototype.onScreenTransformHandler = function(options) {\n\t                if (options.scrollX != void 0) {\n\t                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n\t                    this.camera.position.setX(scrollX_1);\n\t                }\n\t                if (options.scrollY != void 0) {\n\t                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n\t                    this.camera.position.setY(scrollY_1);\n\t                }\n\t            };\n\t            Chart.prototype.autoscroll = function() {\n\t                var state = this.state;\n\t                if (!state.data.autoScroll) return;\n\t                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n\t                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n\t                if (trendsMaxXDelta > 0) {\n\t                    var maxVisibleX = this.state.screen.getScreenRightVal();\n\t                    var paddingRightX = this.state.getPaddingRight();\n\t                    var currentScroll = state.data.xAxis.range.scroll;\n\t                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n\t                        return;\n\t                    }\n\t                    var scrollDelta = trendsMaxXDelta;\n\t                    this.setState({\n\t                        xAxis: {\n\t                            range: {\n\t                                scroll: currentScroll + scrollDelta\n\t                            }\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onScrollStop = function() {};\n\t            Chart.prototype.onMouseDown = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.clientX,\n\t                        y: ev.clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseUp = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onMouseMove = function(ev) {\n\t                if (this.state.data.cursor.dragMode) {\n\t                    this.setState({\n\t                        cursor: {\n\t                            dragMode: true,\n\t                            x: ev.clientX,\n\t                            y: ev.clientY\n\t                        }\n\t                    });\n\t                }\n\t            };\n\t            Chart.prototype.onMouseWheel = function(ev) {\n\t                ev.stopPropagation();\n\t                ev.preventDefault();\n\t                var zoomOrigin = ev.layerX / this.state.data.width;\n\t                var zoomValue = 1 + ev.wheelDeltaY * .001;\n\t                this.zoom(zoomValue, zoomOrigin);\n\t            };\n\t            Chart.prototype.onTouchMove = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: true,\n\t                        x: ev.touches[0].clientX,\n\t                        y: ev.touches[0].clientY\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onTouchEnd = function(ev) {\n\t                this.setState({\n\t                    cursor: {\n\t                        dragMode: false\n\t                    }\n\t                });\n\t            };\n\t            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n\t                this.setState({\n\t                    width: width,\n\t                    height: height\n\t                });\n\t            };\n\t            Chart.prototype.onChartResize = function() {\n\t                var _a = this.state.data, width = _a.width, height = _a.height;\n\t                this.renderer.setSize(width, height);\n\t                this.setupCamera();\n\t            };\n\t            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n\t                var _this = this;\n\t                var MAX_ZOOM_VALUE = 1.5;\n\t                var MIN_ZOOM_VALUE = .7;\n\t                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n\t                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n\t                var autoScrollIsEnabled = this.state.data.autoScroll;\n\t                if (autoScrollIsEnabled) this.state.setState({\n\t                    autoScroll: false\n\t                });\n\t                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n\t                    if (autoScrollIsEnabled) _this.setState({\n\t                        autoScroll: true\n\t                    });\n\t                });\n\t            };\n\t            Chart.createPreviewChart = function(userOptions, $el) {\n\t                var previewChartOptions = {\n\t                    animations: {\n\t                        enabled: false\n\t                    },\n\t                    widgets: {\n\t                        Grid: {\n\t                            enabled: false\n\t                        },\n\t                        Axis: {\n\t                            enabled: false\n\t                        },\n\t                        TrendsGradient: {\n\t                            enabled: false\n\t                        }\n\t                    }\n\t                };\n\t                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n\t                return new Chart(options, $el);\n\t            };\n\t            Chart.devicePixelRatio = window.devicePixelRatio;\n\t            Chart.installedWidgets = {};\n\t            Chart.renderers = {\n\t                CanvasRenderer: THREE.CanvasRenderer,\n\t                WebGLRenderer: THREE.WebGLRenderer\n\t            };\n\t            return Chart;\n\t        }();\n\t        exports.Chart = Chart;\n\t        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n\t        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n\t        Chart.installWidget(AxisWidget_1.AxisWidget);\n\t        Chart.installWidget(GridWidget_1.GridWidget);\n\t        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n\t        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n\t        Chart.installWidget(TrendsGradientWidget_1.TrendsGradientWidget);\n\t        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n\t        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n\t        Chart.installWidget(BorderWidget_1.BorderWidget);\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        window.TweenLite = TweenMax;\n\t        window.Stats = __webpack_require__(4);\n\t        __webpack_require__(5);\n\t        __webpack_require__(6);\n\t        exports.isPlainObject = __webpack_require__(7);\n\t        exports.EE2 = __webpack_require__(9);\n\t        var es6_promise_1 = __webpack_require__(10);\n\t        exports.Promise = es6_promise_1.Promise;\n\t        exports.ResizeSensor = __webpack_require__(11);\n\t    }, function(module, exports) {\n\t        var Stats = function() {\n\t            function h(a) {\n\t                c.appendChild(a.dom);\n\t                return a;\n\t            }\n\t            function k(a) {\n\t                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n\t                l = a;\n\t            }\n\t            var l = 0, c = document.createElement(\"div\");\n\t            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n\t            c.addEventListener(\"click\", function(a) {\n\t                a.preventDefault();\n\t                k(++l % c.children.length);\n\t            }, !1);\n\t            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n\t            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n\t            k(0);\n\t            return {\n\t                REVISION: 16,\n\t                dom: c,\n\t                addPanel: h,\n\t                showPanel: k,\n\t                begin: function() {\n\t                    g = (performance || Date).now();\n\t                },\n\t                end: function() {\n\t                    a++;\n\t                    var c = (performance || Date).now();\n\t                    f.update(c - g, 200);\n\t                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n\t                        var d = performance.memory;\n\t                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n\t                    }\n\t                    return c;\n\t                },\n\t                update: function() {\n\t                    g = this.end();\n\t                },\n\t                domElement: c,\n\t                setMode: k\n\t            };\n\t        };\n\t        Stats.Panel = function(h, k, l) {\n\t            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n\t            q.width = r;\n\t            q.height = f;\n\t            q.style.cssText = \"width:80px;height:48px\";\n\t            var b = q.getContext(\"2d\");\n\t            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n\t            b.textBaseline = \"top\";\n\t            b.fillStyle = l;\n\t            b.fillRect(0, 0, r, f);\n\t            b.fillStyle = k;\n\t            b.fillText(h, t, u);\n\t            b.fillRect(d, m, n, p);\n\t            b.fillStyle = l;\n\t            b.globalAlpha = .9;\n\t            b.fillRect(d, m, n, p);\n\t            return {\n\t                dom: q,\n\t                update: function(f, v) {\n\t                    c = Math.min(c, f);\n\t                    g = Math.max(g, f);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = 1;\n\t                    b.fillRect(0, 0, r, m);\n\t                    b.fillStyle = k;\n\t                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n\t                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n\t                    b.fillRect(d + n - a, m, a, p);\n\t                    b.fillStyle = l;\n\t                    b.globalAlpha = .9;\n\t                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n\t                }\n\t            };\n\t        };\n\t        \"object\" === typeof module && (module.exports = Stats);\n\t    }, function(module, exports) {\n\t        THREE.SpriteCanvasMaterial = function(parameters) {\n\t            THREE.Material.call(this);\n\t            this.type = \"SpriteCanvasMaterial\";\n\t            this.color = new THREE.Color(16777215);\n\t            this.program = function(context, color) {};\n\t            this.setValues(parameters);\n\t        };\n\t        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n\t        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\t        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n\t            var material = new THREE.SpriteCanvasMaterial();\n\t            material.copy(this);\n\t            material.color.copy(this.color);\n\t            material.program = this.program;\n\t            return material;\n\t        };\n\t        THREE.CanvasRenderer = function(parameters) {\n\t            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n\t            parameters = parameters || {};\n\t            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n\t                alpha: parameters.alpha === true\n\t            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n\t            if (_context.setLineDash === undefined) {\n\t                _context.setLineDash = function() {};\n\t            }\n\t            this.domElement = _canvas;\n\t            this.autoClear = true;\n\t            this.sortObjects = true;\n\t            this.sortElements = true;\n\t            this.info = {\n\t                render: {\n\t                    vertices: 0,\n\t                    faces: 0\n\t                }\n\t            };\n\t            this.supportsVertexTextures = function() {};\n\t            this.setFaceCulling = function() {};\n\t            this.getContext = function() {\n\t                return _context;\n\t            };\n\t            this.getContextAttributes = function() {\n\t                return _context.getContextAttributes();\n\t            };\n\t            this.getPixelRatio = function() {\n\t                return _pixelRatio;\n\t            };\n\t            this.setPixelRatio = function(value) {\n\t                if (value !== undefined) _pixelRatio = value;\n\t            };\n\t            this.setSize = function(width, height, updateStyle) {\n\t                _canvasWidth = width * _pixelRatio;\n\t                _canvasHeight = height * _pixelRatio;\n\t                _canvas.width = _canvasWidth;\n\t                _canvas.height = _canvasHeight;\n\t                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n\t                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n\t                if (updateStyle !== false) {\n\t                    _canvas.style.width = width + \"px\";\n\t                    _canvas.style.height = height + \"px\";\n\t                }\n\t                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t                _contextGlobalAlpha = 1;\n\t                _contextGlobalCompositeOperation = 0;\n\t                _contextStrokeStyle = null;\n\t                _contextFillStyle = null;\n\t                _contextLineWidth = null;\n\t                _contextLineCap = null;\n\t                _contextLineJoin = null;\n\t                this.setViewport(0, 0, width, height);\n\t            };\n\t            this.setViewport = function(x, y, width, height) {\n\t                _viewportX = x * _pixelRatio;\n\t                _viewportY = y * _pixelRatio;\n\t                _viewportWidth = width * _pixelRatio;\n\t                _viewportHeight = height * _pixelRatio;\n\t            };\n\t            this.setScissor = function() {};\n\t            this.setScissorTest = function() {};\n\t            this.setClearColor = function(color, alpha) {\n\t                _clearColor.set(color);\n\t                _clearAlpha = alpha !== undefined ? alpha : 1;\n\t                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\t                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\t            };\n\t            this.setClearColorHex = function(hex, alpha) {\n\t                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n\t                this.setClearColor(hex, alpha);\n\t            };\n\t            this.getClearColor = function() {\n\t                return _clearColor;\n\t            };\n\t            this.getClearAlpha = function() {\n\t                return _clearAlpha;\n\t            };\n\t            this.getMaxAnisotropy = function() {\n\t                return 0;\n\t            };\n\t            this.clear = function() {\n\t                if (_clearBox.isEmpty() === false) {\n\t                    _clearBox.intersect(_clipBox);\n\t                    _clearBox.expandByScalar(2);\n\t                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n\t                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n\t                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n\t                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n\t                    if (_clearAlpha < 1) {\n\t                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    if (_clearAlpha > 0) {\n\t                        setBlending(THREE.NormalBlending);\n\t                        setOpacity(1);\n\t                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n\t                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n\t                    }\n\t                    _clearBox.makeEmpty();\n\t                }\n\t            };\n\t            this.clearColor = function() {};\n\t            this.clearDepth = function() {};\n\t            this.clearStencil = function() {};\n\t            this.render = function(scene, camera) {\n\t                if (camera instanceof THREE.Camera === false) {\n\t                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n\t                    return;\n\t                }\n\t                if (this.autoClear === true) this.clear();\n\t                _this.info.render.vertices = 0;\n\t                _this.info.render.faces = 0;\n\t                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n\t                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n\t                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n\t                _elements = _renderData.elements;\n\t                _lights = _renderData.lights;\n\t                _camera = camera;\n\t                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n\t                calculateLights();\n\t                for (var e = 0, el = _elements.length; e < el; e++) {\n\t                    var element = _elements[e];\n\t                    var material = element.material;\n\t                    if (material === undefined || material.opacity === 0) continue;\n\t                    _elemBox.makeEmpty();\n\t                    if (element instanceof THREE.RenderableSprite) {\n\t                        _v1 = element;\n\t                        _v1.x *= _canvasWidthHalf;\n\t                        _v1.y *= _canvasHeightHalf;\n\t                        renderSprite(_v1, element, material);\n\t                    } else if (element instanceof THREE.RenderableLine) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderLine(_v1, _v2, element, material);\n\t                        }\n\t                    } else if (element instanceof THREE.RenderableFace) {\n\t                        _v1 = element.v1;\n\t                        _v2 = element.v2;\n\t                        _v3 = element.v3;\n\t                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n\t                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n\t                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n\t                        _v1.positionScreen.x *= _canvasWidthHalf;\n\t                        _v1.positionScreen.y *= _canvasHeightHalf;\n\t                        _v2.positionScreen.x *= _canvasWidthHalf;\n\t                        _v2.positionScreen.y *= _canvasHeightHalf;\n\t                        _v3.positionScreen.x *= _canvasWidthHalf;\n\t                        _v3.positionScreen.y *= _canvasHeightHalf;\n\t                        if (material.overdraw > 0) {\n\t                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n\t                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n\t                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n\t                        }\n\t                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n\t                        if (_clipBox.intersectsBox(_elemBox) === true) {\n\t                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n\t                        }\n\t                    }\n\t                    _clearBox.union(_elemBox);\n\t                }\n\t                _context.setTransform(1, 0, 0, 1, 0, 0);\n\t            };\n\t            function calculateLights() {\n\t                _ambientLight.setRGB(0, 0, 0);\n\t                _directionalLights.setRGB(0, 0, 0);\n\t                _pointLights.setRGB(0, 0, 0);\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    var lightColor = light.color;\n\t                    if (light instanceof THREE.AmbientLight) {\n\t                        _ambientLight.add(lightColor);\n\t                    } else if (light instanceof THREE.DirectionalLight) {\n\t                        _directionalLights.add(lightColor);\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        _pointLights.add(lightColor);\n\t                    }\n\t                }\n\t            }\n\t            function calculateLight(position, normal, color) {\n\t                for (var l = 0, ll = _lights.length; l < ll; l++) {\n\t                    var light = _lights[l];\n\t                    _lightColor.copy(light.color);\n\t                    if (light instanceof THREE.DirectionalLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\t                        var amount = normal.dot(lightPosition);\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    } else if (light instanceof THREE.PointLight) {\n\t                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\t                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n\t                        if (amount <= 0) continue;\n\t                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n\t                        if (amount == 0) continue;\n\t                        amount *= light.intensity;\n\t                        color.add(_lightColor.multiplyScalar(amount));\n\t                    }\n\t                }\n\t            }\n\t            function renderSprite(v1, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                var scaleX = element.scale.x * _canvasWidthHalf;\n\t                var scaleY = element.scale.y * _canvasHeightHalf;\n\t                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n\t                _elemBox.min.set(v1.x - dist, v1.y - dist);\n\t                _elemBox.max.set(v1.x + dist, v1.y + dist);\n\t                if (material instanceof THREE.SpriteMaterial) {\n\t                    var texture = material.map;\n\t                    if (texture !== null) {\n\t                        var pattern = _patterns[texture.id];\n\t                        if (pattern === undefined || pattern.version !== texture.version) {\n\t                            pattern = textureToPattern(texture);\n\t                            _patterns[texture.id] = pattern;\n\t                        }\n\t                        if (pattern.canvas !== undefined) {\n\t                            setFillStyle(pattern.canvas);\n\t                            var bitmap = texture.image;\n\t                            var ox = bitmap.width * texture.offset.x;\n\t                            var oy = bitmap.height * texture.offset.y;\n\t                            var sx = bitmap.width * texture.repeat.x;\n\t                            var sy = bitmap.height * texture.repeat.y;\n\t                            var cx = scaleX / sx;\n\t                            var cy = scaleY / sy;\n\t                            _context.save();\n\t                            _context.translate(v1.x, v1.y);\n\t                            if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                            _context.translate(-scaleX / 2, -scaleY / 2);\n\t                            _context.scale(cx, cy);\n\t                            _context.translate(-ox, -oy);\n\t                            _context.fillRect(ox, oy, sx, sy);\n\t                            _context.restore();\n\t                        }\n\t                    } else {\n\t                        setFillStyle(material.color.getStyle());\n\t                        _context.save();\n\t                        _context.translate(v1.x, v1.y);\n\t                        if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                        _context.scale(scaleX, -scaleY);\n\t                        _context.fillRect(-.5, -.5, 1, 1);\n\t                        _context.restore();\n\t                    }\n\t                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setFillStyle(material.color.getStyle());\n\t                    _context.save();\n\t                    _context.translate(v1.x, v1.y);\n\t                    if (material.rotation !== 0) _context.rotate(material.rotation);\n\t                    _context.scale(scaleX, scaleY);\n\t                    material.program(_context);\n\t                    _context.restore();\n\t                }\n\t            }\n\t            function renderLine(v1, v2, element, material) {\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _context.beginPath();\n\t                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n\t                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n\t                if (material instanceof THREE.LineBasicMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    if (material.vertexColors !== THREE.VertexColors) {\n\t                        setStrokeStyle(material.color.getStyle());\n\t                    } else {\n\t                        var colorStyle1 = element.vertexColors[0].getStyle();\n\t                        var colorStyle2 = element.vertexColors[1].getStyle();\n\t                        if (colorStyle1 === colorStyle2) {\n\t                            setStrokeStyle(colorStyle1);\n\t                        } else {\n\t                            try {\n\t                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n\t                                grad.addColorStop(0, colorStyle1);\n\t                                grad.addColorStop(1, colorStyle2);\n\t                            } catch (exception) {\n\t                                grad = colorStyle1;\n\t                            }\n\t                            setStrokeStyle(grad);\n\t                        }\n\t                    }\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                } else if (material instanceof THREE.LineDashedMaterial) {\n\t                    setLineWidth(material.linewidth);\n\t                    setLineCap(material.linecap);\n\t                    setLineJoin(material.linejoin);\n\t                    setStrokeStyle(material.color.getStyle());\n\t                    setLineDash([ material.dashSize, material.gapSize ]);\n\t                    _context.stroke();\n\t                    _elemBox.expandByScalar(material.linewidth * 2);\n\t                    setLineDash([]);\n\t                }\n\t            }\n\t            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n\t                _this.info.render.vertices += 3;\n\t                _this.info.render.faces++;\n\t                setOpacity(material.opacity);\n\t                setBlending(material.blending);\n\t                _v1x = v1.positionScreen.x;\n\t                _v1y = v1.positionScreen.y;\n\t                _v2x = v2.positionScreen.x;\n\t                _v2y = v2.positionScreen.y;\n\t                _v3x = v3.positionScreen.x;\n\t                _v3y = v3.positionScreen.y;\n\t                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n\t                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n\t                    _diffuseColor.copy(material.color);\n\t                    _emissiveColor.copy(material.emissive);\n\t                    if (material.vertexColors === THREE.FaceColors) {\n\t                        _diffuseColor.multiply(element.color);\n\t                    }\n\t                    _color.copy(_ambientLight);\n\t                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\t                    calculateLight(_centroid, element.normalModel, _color);\n\t                    _color.multiply(_diffuseColor).add(_emissiveColor);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n\t                    if (material.map !== null) {\n\t                        var mapping = material.map.mapping;\n\t                        if (mapping === THREE.UVMapping) {\n\t                            _uvs = element.uvs;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n\t                        }\n\t                    } else if (material.envMap !== null) {\n\t                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n\t                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n\t                            _uv1x = .5 * _normal.x + .5;\n\t                            _uv1y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n\t                            _uv2x = .5 * _normal.x + .5;\n\t                            _uv2y = .5 * _normal.y + .5;\n\t                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n\t                            _uv3x = .5 * _normal.x + .5;\n\t                            _uv3y = .5 * _normal.y + .5;\n\t                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n\t                        }\n\t                    } else {\n\t                        _color.copy(material.color);\n\t                        if (material.vertexColors === THREE.FaceColors) {\n\t                            _color.multiply(element.color);\n\t                        }\n\t                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                    }\n\t                } else if (material instanceof THREE.MeshNormalMaterial) {\n\t                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n\t                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                } else {\n\t                    _color.setRGB(1, 1, 1);\n\t                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n\t                }\n\t            }\n\t            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n\t                _context.beginPath();\n\t                _context.moveTo(x0, y0);\n\t                _context.lineTo(x1, y1);\n\t                _context.lineTo(x2, y2);\n\t                _context.closePath();\n\t            }\n\t            function strokePath(color, linewidth, linecap, linejoin) {\n\t                setLineWidth(linewidth);\n\t                setLineCap(linecap);\n\t                setLineJoin(linejoin);\n\t                setStrokeStyle(color.getStyle());\n\t                _context.stroke();\n\t                _elemBox.expandByScalar(linewidth * 2);\n\t            }\n\t            function fillPath(color) {\n\t                setFillStyle(color.getStyle());\n\t                _context.fill();\n\t            }\n\t            function textureToPattern(texture) {\n\t                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: texture.version\n\t                    };\n\t                }\n\t                var image = texture.image;\n\t                if (image.complete === false) {\n\t                    return {\n\t                        canvas: undefined,\n\t                        version: 0\n\t                    };\n\t                }\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = image.width;\n\t                canvas.height = image.height;\n\t                var context = canvas.getContext(\"2d\");\n\t                context.setTransform(1, 0, 0, -1, 0, image.height);\n\t                context.drawImage(image, 0, 0);\n\t                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n\t                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n\t                var repeat = \"no-repeat\";\n\t                if (repeatX === true && repeatY === true) {\n\t                    repeat = \"repeat\";\n\t                } else if (repeatX === true) {\n\t                    repeat = \"repeat-x\";\n\t                } else if (repeatY === true) {\n\t                    repeat = \"repeat-y\";\n\t                }\n\t                var pattern = _context.createPattern(canvas, repeat);\n\t                if (texture.onUpdate) texture.onUpdate(texture);\n\t                return {\n\t                    canvas: pattern,\n\t                    version: texture.version\n\t                };\n\t            }\n\t            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n\t                var pattern = _patterns[texture.id];\n\t                if (pattern === undefined || pattern.version !== texture.version) {\n\t                    pattern = textureToPattern(texture);\n\t                    _patterns[texture.id] = pattern;\n\t                }\n\t                if (pattern.canvas !== undefined) {\n\t                    setFillStyle(pattern.canvas);\n\t                } else {\n\t                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n\t                    _context.fill();\n\t                    return;\n\t                }\n\t                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n\t                u0 = (u0 + offsetX) * width;\n\t                v0 = (v0 + offsetY) * height;\n\t                u1 = (u1 + offsetX) * width;\n\t                v1 = (v1 + offsetY) * height;\n\t                u2 = (u2 + offsetX) * width;\n\t                v2 = (v2 + offsetY) * height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                if (det === 0) return;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.fill();\n\t                _context.restore();\n\t            }\n\t            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n\t                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n\t                u0 *= width;\n\t                v0 *= height;\n\t                u1 *= width;\n\t                v1 *= height;\n\t                u2 *= width;\n\t                v2 *= height;\n\t                x1 -= x0;\n\t                y1 -= y0;\n\t                x2 -= x0;\n\t                y2 -= y0;\n\t                u1 -= u0;\n\t                v1 -= v0;\n\t                u2 -= u0;\n\t                v2 -= v0;\n\t                det = u1 * v2 - u2 * v1;\n\t                idet = 1 / det;\n\t                a = (v2 * x1 - v1 * x2) * idet;\n\t                b = (v2 * y1 - v1 * y2) * idet;\n\t                c = (u1 * x2 - u2 * x1) * idet;\n\t                d = (u1 * y2 - u2 * y1) * idet;\n\t                e = x0 - a * u0 - c * v0;\n\t                f = y0 - b * u0 - d * v0;\n\t                _context.save();\n\t                _context.transform(a, b, c, d, e, f);\n\t                _context.clip();\n\t                _context.drawImage(image, 0, 0);\n\t                _context.restore();\n\t            }\n\t            function expand(v1, v2, pixels) {\n\t                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n\t                if (det === 0) return;\n\t                idet = pixels / Math.sqrt(det);\n\t                x *= idet;\n\t                y *= idet;\n\t                v2.x += x;\n\t                v2.y += y;\n\t                v1.x -= x;\n\t                v1.y -= y;\n\t            }\n\t            function setOpacity(value) {\n\t                if (_contextGlobalAlpha !== value) {\n\t                    _context.globalAlpha = value;\n\t                    _contextGlobalAlpha = value;\n\t                }\n\t            }\n\t            function setBlending(value) {\n\t                if (_contextGlobalCompositeOperation !== value) {\n\t                    if (value === THREE.NormalBlending) {\n\t                        _context.globalCompositeOperation = \"source-over\";\n\t                    } else if (value === THREE.AdditiveBlending) {\n\t                        _context.globalCompositeOperation = \"lighter\";\n\t                    } else if (value === THREE.SubtractiveBlending) {\n\t                        _context.globalCompositeOperation = \"darker\";\n\t                    } else if (value === THREE.MultiplyBlending) {\n\t                        _context.globalCompositeOperation = \"multiply\";\n\t                    }\n\t                    _contextGlobalCompositeOperation = value;\n\t                }\n\t            }\n\t            function setLineWidth(value) {\n\t                if (_contextLineWidth !== value) {\n\t                    _context.lineWidth = value;\n\t                    _contextLineWidth = value;\n\t                }\n\t            }\n\t            function setLineCap(value) {\n\t                if (_contextLineCap !== value) {\n\t                    _context.lineCap = value;\n\t                    _contextLineCap = value;\n\t                }\n\t            }\n\t            function setLineJoin(value) {\n\t                if (_contextLineJoin !== value) {\n\t                    _context.lineJoin = value;\n\t                    _contextLineJoin = value;\n\t                }\n\t            }\n\t            function setStrokeStyle(value) {\n\t                if (_contextStrokeStyle !== value) {\n\t                    _context.strokeStyle = value;\n\t                    _contextStrokeStyle = value;\n\t                }\n\t            }\n\t            function setFillStyle(value) {\n\t                if (_contextFillStyle !== value) {\n\t                    _context.fillStyle = value;\n\t                    _contextFillStyle = value;\n\t                }\n\t            }\n\t            function setLineDash(value) {\n\t                if (_contextLineDash.length !== value.length) {\n\t                    _context.setLineDash(value);\n\t                    _contextLineDash = value;\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports) {\n\t        THREE.RenderableObject = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableFace = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.v3 = new THREE.RenderableVertex();\n\t            this.normalModel = new THREE.Vector3();\n\t            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\t            this.vertexNormalsLength = 0;\n\t            this.color = new THREE.Color();\n\t            this.material = null;\n\t            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableVertex = function() {\n\t            this.position = new THREE.Vector3();\n\t            this.positionWorld = new THREE.Vector3();\n\t            this.positionScreen = new THREE.Vector4();\n\t            this.visible = true;\n\t        };\n\t        THREE.RenderableVertex.prototype.copy = function(vertex) {\n\t            this.positionWorld.copy(vertex.positionWorld);\n\t            this.positionScreen.copy(vertex.positionScreen);\n\t        };\n\t        THREE.RenderableLine = function() {\n\t            this.id = 0;\n\t            this.v1 = new THREE.RenderableVertex();\n\t            this.v2 = new THREE.RenderableVertex();\n\t            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\t            this.material = null;\n\t            this.z = 0;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.RenderableSprite = function() {\n\t            this.id = 0;\n\t            this.object = null;\n\t            this.x = 0;\n\t            this.y = 0;\n\t            this.z = 0;\n\t            this.rotation = 0;\n\t            this.scale = new THREE.Vector2();\n\t            this.material = null;\n\t            this.renderOrder = 0;\n\t        };\n\t        THREE.Projector = function() {\n\t            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n\t                objects: [],\n\t                lights: [],\n\t                elements: []\n\t            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n\t            this.projectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n\t                vector.project(camera);\n\t            };\n\t            this.unprojectVector = function(vector, camera) {\n\t                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n\t                vector.unproject(camera);\n\t            };\n\t            this.pickingRay = function(vector, camera) {\n\t                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n\t            };\n\t            var RenderList = function() {\n\t                var normals = [];\n\t                var uvs = [];\n\t                var object = null;\n\t                var material = null;\n\t                var normalMatrix = new THREE.Matrix3();\n\t                function setObject(value) {\n\t                    object = value;\n\t                    material = object.material;\n\t                    normalMatrix.getNormalMatrix(object.matrixWorld);\n\t                    normals.length = 0;\n\t                    uvs.length = 0;\n\t                }\n\t                function projectVertex(vertex) {\n\t                    var position = vertex.position;\n\t                    var positionWorld = vertex.positionWorld;\n\t                    var positionScreen = vertex.positionScreen;\n\t                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n\t                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n\t                    var invW = 1 / positionScreen.w;\n\t                    positionScreen.x *= invW;\n\t                    positionScreen.y *= invW;\n\t                    positionScreen.z *= invW;\n\t                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n\t                }\n\t                function pushVertex(x, y, z) {\n\t                    _vertex = getNextVertexInPool();\n\t                    _vertex.position.set(x, y, z);\n\t                    projectVertex(_vertex);\n\t                }\n\t                function pushNormal(x, y, z) {\n\t                    normals.push(x, y, z);\n\t                }\n\t                function pushUv(x, y) {\n\t                    uvs.push(x, y);\n\t                }\n\t                function checkTriangleVisibility(v1, v2, v3) {\n\t                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n\t                    _points3[0] = v1.positionScreen;\n\t                    _points3[1] = v2.positionScreen;\n\t                    _points3[2] = v3.positionScreen;\n\t                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n\t                }\n\t                function checkBackfaceCulling(v1, v2, v3) {\n\t                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n\t                }\n\t                function pushLine(a, b) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    _line = getNextLineInPool();\n\t                    _line.id = object.id;\n\t                    _line.v1.copy(v1);\n\t                    _line.v2.copy(v2);\n\t                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n\t                    _line.renderOrder = object.renderOrder;\n\t                    _line.material = object.material;\n\t                    _renderData.elements.push(_line);\n\t                }\n\t                function pushTriangle(a, b, c) {\n\t                    var v1 = _vertexPool[a];\n\t                    var v2 = _vertexPool[b];\n\t                    var v3 = _vertexPool[c];\n\t                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\t                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n\t                        _face = getNextFaceInPool();\n\t                        _face.id = object.id;\n\t                        _face.v1.copy(v1);\n\t                        _face.v2.copy(v2);\n\t                        _face.v3.copy(v3);\n\t                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                        _face.renderOrder = object.renderOrder;\n\t                        _face.normalModel.fromArray(normals, a * 3);\n\t                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\t                        for (var i = 0; i < 3; i++) {\n\t                            var normal = _face.vertexNormalsModel[i];\n\t                            normal.fromArray(normals, arguments[i] * 3);\n\t                            normal.applyMatrix3(normalMatrix).normalize();\n\t                            var uv = _face.uvs[i];\n\t                            uv.fromArray(uvs, arguments[i] * 2);\n\t                        }\n\t                        _face.vertexNormalsLength = 3;\n\t                        _face.material = object.material;\n\t                        _renderData.elements.push(_face);\n\t                    }\n\t                }\n\t                return {\n\t                    setObject: setObject,\n\t                    projectVertex: projectVertex,\n\t                    checkTriangleVisibility: checkTriangleVisibility,\n\t                    checkBackfaceCulling: checkBackfaceCulling,\n\t                    pushVertex: pushVertex,\n\t                    pushNormal: pushNormal,\n\t                    pushUv: pushUv,\n\t                    pushLine: pushLine,\n\t                    pushTriangle: pushTriangle\n\t                };\n\t            };\n\t            var renderList = new RenderList();\n\t            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n\t                _faceCount = 0;\n\t                _lineCount = 0;\n\t                _spriteCount = 0;\n\t                _renderData.elements.length = 0;\n\t                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n\t                if (camera.parent === null) camera.updateMatrixWorld();\n\t                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\t                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\t                _frustum.setFromMatrix(_viewProjectionMatrix);\n\t                _objectCount = 0;\n\t                _renderData.objects.length = 0;\n\t                _renderData.lights.length = 0;\n\t                function addObject(object) {\n\t                    _object = getNextObjectInPool();\n\t                    _object.id = object.id;\n\t                    _object.object = object;\n\t                    _vector3.setFromMatrixPosition(object.matrixWorld);\n\t                    _vector3.applyProjection(_viewProjectionMatrix);\n\t                    _object.z = _vector3.z;\n\t                    _object.renderOrder = object.renderOrder;\n\t                    _renderData.objects.push(_object);\n\t                }\n\t                scene.traverseVisible(function(object) {\n\t                    if (object instanceof THREE.Light) {\n\t                        _renderData.lights.push(object);\n\t                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line) {\n\t                        if (object.material.visible === false) return;\n\t                        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n\t                        addObject(object);\n\t                    } else if (object instanceof THREE.Sprite) {\n\t                        if (object.material.visible === false) return;\n\t                        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n\t                        addObject(object);\n\t                    }\n\t                });\n\t                if (sortObjects === true) {\n\t                    _renderData.objects.sort(painterSort);\n\t                }\n\t                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n\t                    var object = _renderData.objects[o].object;\n\t                    var geometry = object.geometry;\n\t                    renderList.setObject(object);\n\t                    _modelMatrix = object.matrixWorld;\n\t                    _vertexCount = 0;\n\t                    if (object instanceof THREE.Mesh) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            var groups = geometry.groups;\n\t                            if (attributes.position === undefined) continue;\n\t                            var positions = attributes.position.array;\n\t                            for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                            }\n\t                            if (attributes.normal !== undefined) {\n\t                                var normals = attributes.normal.array;\n\t                                for (var i = 0, l = normals.length; i < l; i += 3) {\n\t                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n\t                                }\n\t                            }\n\t                            if (attributes.uv !== undefined) {\n\t                                var uvs = attributes.uv.array;\n\t                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n\t                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n\t                                }\n\t                            }\n\t                            if (geometry.index !== null) {\n\t                                var indices = geometry.index.array;\n\t                                if (groups.length > 0) {\n\t                                    for (var o = 0; o < groups.length; o++) {\n\t                                        var group = groups[o];\n\t                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n\t                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                        }\n\t                                    }\n\t                                } else {\n\t                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n\t                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n\t                                    }\n\t                                }\n\t                            } else {\n\t                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n\t                                    renderList.pushTriangle(i, i + 1, i + 2);\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            var vertices = geometry.vertices;\n\t                            var faces = geometry.faces;\n\t                            var faceVertexUvs = geometry.faceVertexUvs[0];\n\t                            _normalMatrix.getNormalMatrix(_modelMatrix);\n\t                            var material = object.material;\n\t                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n\t                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n\t                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n\t                                var vertex = vertices[v];\n\t                                _vector3.copy(vertex);\n\t                                if (material.morphTargets === true) {\n\t                                    var morphTargets = geometry.morphTargets;\n\t                                    var morphInfluences = object.morphTargetInfluences;\n\t                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n\t                                        var influence = morphInfluences[t];\n\t                                        if (influence === 0) continue;\n\t                                        var target = morphTargets[t];\n\t                                        var targetVertex = target.vertices[v];\n\t                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n\t                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n\t                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n\t                                    }\n\t                                }\n\t                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n\t                            }\n\t                            for (var f = 0, fl = faces.length; f < fl; f++) {\n\t                                var face = faces[f];\n\t                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n\t                                if (material === undefined) continue;\n\t                                var side = material.side;\n\t                                var v1 = _vertexPool[face.a];\n\t                                var v2 = _vertexPool[face.b];\n\t                                var v3 = _vertexPool[face.c];\n\t                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n\t                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\t                                if (side !== THREE.DoubleSide) {\n\t                                    if (side === THREE.FrontSide && visible === false) continue;\n\t                                    if (side === THREE.BackSide && visible === true) continue;\n\t                                }\n\t                                _face = getNextFaceInPool();\n\t                                _face.id = object.id;\n\t                                _face.v1.copy(v1);\n\t                                _face.v2.copy(v2);\n\t                                _face.v3.copy(v3);\n\t                                _face.normalModel.copy(face.normal);\n\t                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                    _face.normalModel.negate();\n\t                                }\n\t                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                var faceVertexNormals = face.vertexNormals;\n\t                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n\t                                    var normalModel = _face.vertexNormalsModel[n];\n\t                                    normalModel.copy(faceVertexNormals[n]);\n\t                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n\t                                        normalModel.negate();\n\t                                    }\n\t                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n\t                                }\n\t                                _face.vertexNormalsLength = faceVertexNormals.length;\n\t                                var vertexUvs = faceVertexUvs[f];\n\t                                if (vertexUvs !== undefined) {\n\t                                    for (var u = 0; u < 3; u++) {\n\t                                        _face.uvs[u].copy(vertexUvs[u]);\n\t                                    }\n\t                                }\n\t                                _face.color = face.color;\n\t                                _face.material = material;\n\t                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n\t                                _face.renderOrder = object.renderOrder;\n\t                                _renderData.elements.push(_face);\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Line) {\n\t                        if (geometry instanceof THREE.BufferGeometry) {\n\t                            var attributes = geometry.attributes;\n\t                            if (attributes.position !== undefined) {\n\t                                var positions = attributes.position.array;\n\t                                for (var i = 0, l = positions.length; i < l; i += 3) {\n\t                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n\t                                }\n\t                                if (geometry.index !== null) {\n\t                                    var indices = geometry.index.array;\n\t                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n\t                                        renderList.pushLine(indices[i], indices[i + 1]);\n\t                                    }\n\t                                } else {\n\t                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n\t                                        renderList.pushLine(i, i + 1);\n\t                                    }\n\t                                }\n\t                            }\n\t                        } else if (geometry instanceof THREE.Geometry) {\n\t                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\t                            var vertices = object.geometry.vertices;\n\t                            if (vertices.length === 0) continue;\n\t                            v1 = getNextVertexInPool();\n\t                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n\t                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n\t                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n\t                                v1 = getNextVertexInPool();\n\t                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n\t                                if ((v + 1) % step > 0) continue;\n\t                                v2 = _vertexPool[_vertexCount - 2];\n\t                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\t                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\t                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n\t                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\t                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\t                                    _line = getNextLineInPool();\n\t                                    _line.id = object.id;\n\t                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\t                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\t                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n\t                                    _line.renderOrder = object.renderOrder;\n\t                                    _line.material = object.material;\n\t                                    if (object.material.vertexColors === THREE.VertexColors) {\n\t                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n\t                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n\t                                    }\n\t                                    _renderData.elements.push(_line);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (object instanceof THREE.Sprite) {\n\t                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\t                        _vector4.applyMatrix4(_viewProjectionMatrix);\n\t                        var invW = 1 / _vector4.w;\n\t                        _vector4.z *= invW;\n\t                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n\t                            _sprite = getNextSpriteInPool();\n\t                            _sprite.id = object.id;\n\t                            _sprite.x = _vector4.x * invW;\n\t                            _sprite.y = _vector4.y * invW;\n\t                            _sprite.z = _vector4.z;\n\t                            _sprite.renderOrder = object.renderOrder;\n\t                            _sprite.object = object;\n\t                            _sprite.rotation = object.rotation;\n\t                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n\t                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n\t                            _sprite.material = object.material;\n\t                            _renderData.elements.push(_sprite);\n\t                        }\n\t                    }\n\t                }\n\t                if (sortElements === true) {\n\t                    _renderData.elements.sort(painterSort);\n\t                }\n\t                return _renderData;\n\t            };\n\t            function getNextObjectInPool() {\n\t                if (_objectCount === _objectPoolLength) {\n\t                    var object = new THREE.RenderableObject();\n\t                    _objectPool.push(object);\n\t                    _objectPoolLength++;\n\t                    _objectCount++;\n\t                    return object;\n\t                }\n\t                return _objectPool[_objectCount++];\n\t            }\n\t            function getNextVertexInPool() {\n\t                if (_vertexCount === _vertexPoolLength) {\n\t                    var vertex = new THREE.RenderableVertex();\n\t                    _vertexPool.push(vertex);\n\t                    _vertexPoolLength++;\n\t                    _vertexCount++;\n\t                    return vertex;\n\t                }\n\t                return _vertexPool[_vertexCount++];\n\t            }\n\t            function getNextFaceInPool() {\n\t                if (_faceCount === _facePoolLength) {\n\t                    var face = new THREE.RenderableFace();\n\t                    _facePool.push(face);\n\t                    _facePoolLength++;\n\t                    _faceCount++;\n\t                    return face;\n\t                }\n\t                return _facePool[_faceCount++];\n\t            }\n\t            function getNextLineInPool() {\n\t                if (_lineCount === _linePoolLength) {\n\t                    var line = new THREE.RenderableLine();\n\t                    _linePool.push(line);\n\t                    _linePoolLength++;\n\t                    _lineCount++;\n\t                    return line;\n\t                }\n\t                return _linePool[_lineCount++];\n\t            }\n\t            function getNextSpriteInPool() {\n\t                if (_spriteCount === _spritePoolLength) {\n\t                    var sprite = new THREE.RenderableSprite();\n\t                    _spritePool.push(sprite);\n\t                    _spritePoolLength++;\n\t                    _spriteCount++;\n\t                    return sprite;\n\t                }\n\t                return _spritePool[_spriteCount++];\n\t            }\n\t            function painterSort(a, b) {\n\t                if (a.renderOrder !== b.renderOrder) {\n\t                    return a.renderOrder - b.renderOrder;\n\t                } else if (a.z !== b.z) {\n\t                    return b.z - a.z;\n\t                } else if (a.id !== b.id) {\n\t                    return a.id - b.id;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            }\n\t            function clipLine(s1, s2) {\n\t                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n\t                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n\t                    return true;\n\t                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n\t                    return false;\n\t                } else {\n\t                    if (bc1near < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n\t                    } else if (bc2near < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n\t                    }\n\t                    if (bc1far < 0) {\n\t                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n\t                    } else if (bc2far < 0) {\n\t                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n\t                    }\n\t                    if (alpha2 < alpha1) {\n\t                        return false;\n\t                    } else {\n\t                        s1.lerp(s2, alpha1);\n\t                        s2.lerp(s1, 1 - alpha2);\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        /*!\n\t\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        var isObject = __webpack_require__(8);\n\t        function isObjectObject(o) {\n\t            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n\t        }\n\t        module.exports = function isPlainObject(o) {\n\t            var ctor, prot;\n\t            if (isObjectObject(o) === false) return false;\n\t            ctor = o.constructor;\n\t            if (typeof ctor !== \"function\") return false;\n\t            prot = ctor.prototype;\n\t            if (isObjectObject(prot) === false) return false;\n\t            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n\t                return false;\n\t            }\n\t            return true;\n\t        };\n\t    }, function(module, exports) {\n\t        /*!\n\t\t * isobject <https://github.com/jonschlinkert/isobject>\n\t\t *\n\t\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t\t * Licensed under the MIT License.\n\t\t */\n\t        \"use strict\";\n\t        module.exports = function isObject(val) {\n\t            return val != null && typeof val === \"object\" && !Array.isArray(val);\n\t        };\n\t    }, function(module, exports, __webpack_require__) {\n\t        var __WEBPACK_AMD_DEFINE_RESULT__;\n\t        !function(undefined) {\n\t            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n\t                return Object.prototype.toString.call(obj) === \"[object Array]\";\n\t            };\n\t            var defaultMaxListeners = 10;\n\t            function init() {\n\t                this._events = {};\n\t                if (this._conf) {\n\t                    configure.call(this, this._conf);\n\t                }\n\t            }\n\t            function configure(conf) {\n\t                if (conf) {\n\t                    this._conf = conf;\n\t                    conf.delimiter && (this.delimiter = conf.delimiter);\n\t                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n\t                    conf.wildcard && (this.wildcard = conf.wildcard);\n\t                    conf.newListener && (this.newListener = conf.newListener);\n\t                    if (this.wildcard) {\n\t                        this.listenerTree = {};\n\t                    }\n\t                }\n\t            }\n\t            function EventEmitter(conf) {\n\t                this._events = {};\n\t                this.newListener = false;\n\t                configure.call(this, conf);\n\t            }\n\t            function searchListenerTree(handlers, type, tree, i) {\n\t                if (!tree) {\n\t                    return [];\n\t                }\n\t                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n\t                if (i === typeLength && tree._listeners) {\n\t                    if (typeof tree._listeners === \"function\") {\n\t                        handlers && handlers.push(tree._listeners);\n\t                        return [ tree ];\n\t                    } else {\n\t                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n\t                            handlers && handlers.push(tree._listeners[leaf]);\n\t                        }\n\t                        return [ tree ];\n\t                    }\n\t                }\n\t                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n\t                    if (currentType === \"*\") {\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    } else if (currentType === \"**\") {\n\t                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n\t                        if (endReached && tree._listeners) {\n\t                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n\t                        }\n\t                        for (branch in tree) {\n\t                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n\t                                if (branch === \"*\" || branch === \"**\") {\n\t                                    if (tree[branch]._listeners && !endReached) {\n\t                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n\t                                    }\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                } else if (branch === nextType) {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n\t                                } else {\n\t                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n\t                                }\n\t                            }\n\t                        }\n\t                        return listeners;\n\t                    }\n\t                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n\t                }\n\t                xTree = tree[\"*\"];\n\t                if (xTree) {\n\t                    searchListenerTree(handlers, type, xTree, i + 1);\n\t                }\n\t                xxTree = tree[\"**\"];\n\t                if (xxTree) {\n\t                    if (i < typeLength) {\n\t                        if (xxTree._listeners) {\n\t                            searchListenerTree(handlers, type, xxTree, typeLength);\n\t                        }\n\t                        for (branch in xxTree) {\n\t                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n\t                                if (branch === nextType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n\t                                } else if (branch === currentType) {\n\t                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n\t                                } else {\n\t                                    isolatedBranch = {};\n\t                                    isolatedBranch[branch] = xxTree[branch];\n\t                                    searchListenerTree(handlers, type, {\n\t                                        \"**\": isolatedBranch\n\t                                    }, i + 1);\n\t                                }\n\t                            }\n\t                        }\n\t                    } else if (xxTree._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree, typeLength);\n\t                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n\t                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n\t                    }\n\t                }\n\t                return listeners;\n\t            }\n\t            function growListenerTree(type, listener) {\n\t                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                for (var i = 0, len = type.length; i + 1 < len; i++) {\n\t                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n\t                        return;\n\t                    }\n\t                }\n\t                var tree = this.listenerTree;\n\t                var name = type.shift();\n\t                while (name) {\n\t                    if (!tree[name]) {\n\t                        tree[name] = {};\n\t                    }\n\t                    tree = tree[name];\n\t                    if (type.length === 0) {\n\t                        if (!tree._listeners) {\n\t                            tree._listeners = listener;\n\t                        } else if (typeof tree._listeners === \"function\") {\n\t                            tree._listeners = [ tree._listeners, listener ];\n\t                        } else if (isArray(tree._listeners)) {\n\t                            tree._listeners.push(listener);\n\t                            if (!tree._listeners.warned) {\n\t                                var m = defaultMaxListeners;\n\t                                if (typeof this._events.maxListeners !== \"undefined\") {\n\t                                    m = this._events.maxListeners;\n\t                                }\n\t                                if (m > 0 && tree._listeners.length > m) {\n\t                                    tree._listeners.warned = true;\n\t                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n\t                                    console.trace();\n\t                                }\n\t                            }\n\t                        }\n\t                        return true;\n\t                    }\n\t                    name = type.shift();\n\t                }\n\t                return true;\n\t            }\n\t            EventEmitter.prototype.delimiter = \".\";\n\t            EventEmitter.prototype.setMaxListeners = function(n) {\n\t                this._events || init.call(this);\n\t                this._events.maxListeners = n;\n\t                if (!this._conf) this._conf = {};\n\t                this._conf.maxListeners = n;\n\t            };\n\t            EventEmitter.prototype.event = \"\";\n\t            EventEmitter.prototype.once = function(event, fn) {\n\t                this.many(event, 1, fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.many = function(event, ttl, fn) {\n\t                var self = this;\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"many only accepts instances of Function\");\n\t                }\n\t                function listener() {\n\t                    if (--ttl === 0) {\n\t                        self.off(event, listener);\n\t                    }\n\t                    fn.apply(this, arguments);\n\t                }\n\t                listener._origin = fn;\n\t                this.on(event, listener);\n\t                return self;\n\t            };\n\t            EventEmitter.prototype.emit = function() {\n\t                this._events || init.call(this);\n\t                var type = arguments[0];\n\t                if (type === \"newListener\" && !this.newListener) {\n\t                    if (!this._events.newListener) {\n\t                        return false;\n\t                    }\n\t                }\n\t                if (this._all) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    for (i = 0, l = this._all.length; i < l; i++) {\n\t                        this.event = type;\n\t                        this._all[i].apply(this, args);\n\t                    }\n\t                }\n\t                if (type === \"error\") {\n\t                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n\t                        if (arguments[1] instanceof Error) {\n\t                            throw arguments[1];\n\t                        } else {\n\t                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n\t                        }\n\t                        return false;\n\t                    }\n\t                }\n\t                var handler;\n\t                if (this.wildcard) {\n\t                    handler = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n\t                } else {\n\t                    handler = this._events[type];\n\t                }\n\t                if (typeof handler === \"function\") {\n\t                    this.event = type;\n\t                    if (arguments.length === 1) {\n\t                        handler.call(this);\n\t                    } else if (arguments.length > 1) switch (arguments.length) {\n\t                      case 2:\n\t                        handler.call(this, arguments[1]);\n\t                        break;\n\t\n\t                      case 3:\n\t                        handler.call(this, arguments[1], arguments[2]);\n\t                        break;\n\t\n\t                      default:\n\t                        var l = arguments.length;\n\t                        var args = new Array(l - 1);\n\t                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                        handler.apply(this, args);\n\t                    }\n\t                    return true;\n\t                } else if (handler) {\n\t                    var l = arguments.length;\n\t                    var args = new Array(l - 1);\n\t                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n\t                    var listeners = handler.slice();\n\t                    for (var i = 0, l = listeners.length; i < l; i++) {\n\t                        this.event = type;\n\t                        listeners[i].apply(this, args);\n\t                    }\n\t                    return listeners.length > 0 || !!this._all;\n\t                } else {\n\t                    return !!this._all;\n\t                }\n\t            };\n\t            EventEmitter.prototype.on = function(type, listener) {\n\t                if (typeof type === \"function\") {\n\t                    this.onAny(type);\n\t                    return this;\n\t                }\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"on only accepts instances of Function\");\n\t                }\n\t                this._events || init.call(this);\n\t                this.emit(\"newListener\", type, listener);\n\t                if (this.wildcard) {\n\t                    growListenerTree.call(this, type, listener);\n\t                    return this;\n\t                }\n\t                if (!this._events[type]) {\n\t                    this._events[type] = listener;\n\t                } else if (typeof this._events[type] === \"function\") {\n\t                    this._events[type] = [ this._events[type], listener ];\n\t                } else if (isArray(this._events[type])) {\n\t                    this._events[type].push(listener);\n\t                    if (!this._events[type].warned) {\n\t                        var m = defaultMaxListeners;\n\t                        if (typeof this._events.maxListeners !== \"undefined\") {\n\t                            m = this._events.maxListeners;\n\t                        }\n\t                        if (m > 0 && this._events[type].length > m) {\n\t                            this._events[type].warned = true;\n\t                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n\t                            console.trace();\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.onAny = function(fn) {\n\t                if (typeof fn !== \"function\") {\n\t                    throw new Error(\"onAny only accepts instances of Function\");\n\t                }\n\t                if (!this._all) {\n\t                    this._all = [];\n\t                }\n\t                this._all.push(fn);\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\t            EventEmitter.prototype.off = function(type, listener) {\n\t                if (typeof listener !== \"function\") {\n\t                    throw new Error(\"removeListener only takes instances of Function\");\n\t                }\n\t                var handlers, leafs = [];\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    handlers = this._events[type];\n\t                    leafs.push({\n\t                        _listeners: handlers\n\t                    });\n\t                }\n\t                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                    var leaf = leafs[iLeaf];\n\t                    handlers = leaf._listeners;\n\t                    if (isArray(handlers)) {\n\t                        var position = -1;\n\t                        for (var i = 0, length = handlers.length; i < length; i++) {\n\t                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n\t                                position = i;\n\t                                break;\n\t                            }\n\t                        }\n\t                        if (position < 0) {\n\t                            continue;\n\t                        }\n\t                        if (this.wildcard) {\n\t                            leaf._listeners.splice(position, 1);\n\t                        } else {\n\t                            this._events[type].splice(position, 1);\n\t                        }\n\t                        if (handlers.length === 0) {\n\t                            if (this.wildcard) {\n\t                                delete leaf._listeners;\n\t                            } else {\n\t                                delete this._events[type];\n\t                            }\n\t                        }\n\t                        return this;\n\t                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n\t                        if (this.wildcard) {\n\t                            delete leaf._listeners;\n\t                        } else {\n\t                            delete this._events[type];\n\t                        }\n\t                    }\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.offAny = function(fn) {\n\t                var i = 0, l = 0, fns;\n\t                if (fn && this._all && this._all.length > 0) {\n\t                    fns = this._all;\n\t                    for (i = 0, l = fns.length; i < l; i++) {\n\t                        if (fn === fns[i]) {\n\t                            fns.splice(i, 1);\n\t                            return this;\n\t                        }\n\t                    }\n\t                } else {\n\t                    this._all = [];\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\t            EventEmitter.prototype.removeAllListeners = function(type) {\n\t                if (arguments.length === 0) {\n\t                    !this._events || init.call(this);\n\t                    return this;\n\t                }\n\t                if (this.wildcard) {\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\t                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n\t                        var leaf = leafs[iLeaf];\n\t                        leaf._listeners = null;\n\t                    }\n\t                } else {\n\t                    if (!this._events[type]) return this;\n\t                    this._events[type] = null;\n\t                }\n\t                return this;\n\t            };\n\t            EventEmitter.prototype.listeners = function(type) {\n\t                if (this.wildcard) {\n\t                    var handlers = [];\n\t                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n\t                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n\t                    return handlers;\n\t                }\n\t                this._events || init.call(this);\n\t                if (!this._events[type]) this._events[type] = [];\n\t                if (!isArray(this._events[type])) {\n\t                    this._events[type] = [ this._events[type] ];\n\t                }\n\t                return this._events[type];\n\t            };\n\t            EventEmitter.prototype.listenersAny = function() {\n\t                if (this._all) {\n\t                    return this._all;\n\t                } else {\n\t                    return [];\n\t                }\n\t            };\n\t            if (true) {\n\t                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t                    return EventEmitter;\n\t                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t            } else if (typeof exports === \"object\") {\n\t                exports.EventEmitter2 = EventEmitter;\n\t            } else {\n\t                window.EventEmitter2 = EventEmitter;\n\t            }\n\t        }();\n\t    }, function(module, exports) {\n\t        module.exports = {\n\t            Promise: window[\"Promise\"]\n\t        };\n\t    }, function(module, exports) {\n\t        (function() {\n\t            var ResizeSensor = function(element, callback) {\n\t                function EventQueue() {\n\t                    this.q = [];\n\t                    this.add = function(ev) {\n\t                        this.q.push(ev);\n\t                    };\n\t                    var i, j;\n\t                    this.call = function() {\n\t                        for (i = 0, j = this.q.length; i < j; i++) {\n\t                            this.q[i].call();\n\t                        }\n\t                    };\n\t                }\n\t                function getComputedStyle(element, prop) {\n\t                    if (element.currentStyle) {\n\t                        return element.currentStyle[prop];\n\t                    } else if (window.getComputedStyle) {\n\t                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n\t                    } else {\n\t                        return element.style[prop];\n\t                    }\n\t                }\n\t                function attachResizeEvent(element, resized) {\n\t                    if (!element.resizedAttached) {\n\t                        element.resizedAttached = new EventQueue();\n\t                        element.resizedAttached.add(resized);\n\t                    } else if (element.resizedAttached) {\n\t                        element.resizedAttached.add(resized);\n\t                        return;\n\t                    }\n\t                    element.resizeSensor = document.createElement(\"div\");\n\t                    element.resizeSensor.className = \"resize-sensor\";\n\t                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n\t                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n\t                    element.resizeSensor.style.cssText = style;\n\t                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n\t                    element.appendChild(element.resizeSensor);\n\t                    if (!{\n\t                        fixed: 1,\n\t                        absolute: 1\n\t                    }[getComputedStyle(element, \"position\")]) {\n\t                        element.style.position = \"relative\";\n\t                    }\n\t                    var expand = element.resizeSensor.childNodes[0];\n\t                    var expandChild = expand.childNodes[0];\n\t                    var shrink = element.resizeSensor.childNodes[1];\n\t                    var shrinkChild = shrink.childNodes[0];\n\t                    var lastWidth, lastHeight;\n\t                    var reset = function() {\n\t                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n\t                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n\t                        expand.scrollLeft = expand.scrollWidth;\n\t                        expand.scrollTop = expand.scrollHeight;\n\t                        shrink.scrollLeft = shrink.scrollWidth;\n\t                        shrink.scrollTop = shrink.scrollHeight;\n\t                        lastWidth = element.offsetWidth;\n\t                        lastHeight = element.offsetHeight;\n\t                    };\n\t                    reset();\n\t                    var changed = function() {\n\t                        if (element.resizedAttached) {\n\t                            element.resizedAttached.call();\n\t                        }\n\t                    };\n\t                    var addEvent = function(el, name, cb) {\n\t                        if (el.attachEvent) {\n\t                            el.attachEvent(\"on\" + name, cb);\n\t                        } else {\n\t                            el.addEventListener(name, cb);\n\t                        }\n\t                    };\n\t                    var onScroll = function() {\n\t                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n\t                            changed();\n\t                        }\n\t                        reset();\n\t                    };\n\t                    addEvent(expand, \"scroll\", onScroll);\n\t                    addEvent(shrink, \"scroll\", onScroll);\n\t                }\n\t                var elementType = Object.prototype.toString.call(element);\n\t                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n\t                if (isCollectionTyped) {\n\t                    var i = 0, j = element.length;\n\t                    for (;i < j; i++) {\n\t                        attachResizeEvent(element[i], callback);\n\t                    }\n\t                } else {\n\t                    attachResizeEvent(element, callback);\n\t                }\n\t                this.detach = function() {\n\t                    if (isCollectionTyped) {\n\t                        var i = 0, j = element.length;\n\t                        for (;i < j; i++) {\n\t                            ResizeSensor.detach(element[i]);\n\t                        }\n\t                    } else {\n\t                        ResizeSensor.detach(element);\n\t                    }\n\t                };\n\t            };\n\t            ResizeSensor.detach = function(element) {\n\t                if (element.resizeSensor) {\n\t                    element.removeChild(element.resizeSensor);\n\t                    delete element.resizeSensor;\n\t                    delete element.resizedAttached;\n\t                }\n\t            };\n\t            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n\t                module.exports = ResizeSensor;\n\t            } else {\n\t                window.ResizeSensor = ResizeSensor;\n\t            }\n\t        })();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Widget_1 = __webpack_require__(17);\n\t        var TrendsManager_1 = __webpack_require__(18);\n\t        var Screen_1 = __webpack_require__(19);\n\t        var AxisMarks_1 = __webpack_require__(20);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var deps_1 = __webpack_require__(3);\n\t        var CHART_STATE_EVENTS = {\n\t            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n\t            READY: \"ready\",\n\t            DESTROY: \"destroy\",\n\t            CHANGE: \"change\",\n\t            TREND_CHANGE: \"trendChange\",\n\t            TRENDS_CHANGE: \"trendsChange\",\n\t            ZOOM: \"zoom\",\n\t            RESIZE: \"resize\",\n\t            SCROLL: \"scroll\",\n\t            SCROLL_STOP: \"scrollStop\",\n\t            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n\t        };\n\t        var ChartState = function() {\n\t            function ChartState(initialState, widgetsClasses, plugins) {\n\t                if (widgetsClasses === void 0) {\n\t                    widgetsClasses = {};\n\t                }\n\t                if (plugins === void 0) {\n\t                    plugins = [];\n\t                }\n\t                this.data = {\n\t                    prevState: {},\n\t                    $el: null,\n\t                    zoom: 0,\n\t                    xAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n\t                            from: 0,\n\t                            to: 0,\n\t                            scroll: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 0,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 0,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 100,\n\t                        autoScroll: true,\n\t                        marks: []\n\t                    },\n\t                    yAxis: {\n\t                        range: {\n\t                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n\t                            from: 0,\n\t                            to: 0,\n\t                            zoom: 1,\n\t                            padding: {\n\t                                start: 5,\n\t                                end: 5\n\t                            },\n\t                            margin: {\n\t                                start: 5,\n\t                                end: 5\n\t                            }\n\t                        },\n\t                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n\t                        gridMinSize: 50,\n\t                        marks: []\n\t                    },\n\t                    animations: {\n\t                        enabled: true,\n\t                        trendChangeSpeed: .5,\n\t                        trendChangeEase: void 0,\n\t                        zoomSpeed: .25,\n\t                        zoomEase: void 0,\n\t                        scrollSpeed: .5,\n\t                        scrollEase: Linear.easeNone,\n\t                        autoScrollSpeed: 1,\n\t                        autoScrollEase: Linear.easeNone\n\t                    },\n\t                    autoRender: {\n\t                        enabled: true,\n\t                        fps: 0\n\t                    },\n\t                    autoResize: true,\n\t                    renderer: \"WebGLRenderer\",\n\t                    autoScroll: true,\n\t                    controls: {\n\t                        enabled: true\n\t                    },\n\t                    trendDefaultState: {\n\t                        enabled: true,\n\t                        type: Trend_1.TREND_TYPE.LINE,\n\t                        data: [],\n\t                        maxSegmentLength: 1e3,\n\t                        lineWidth: 2,\n\t                        lineColor: 16777215,\n\t                        hasBackground: false,\n\t                        backgroundColor: \"rgba(#5273BD, 0.15)\",\n\t                        hasBeacon: false,\n\t                        settingsForTypes: {\n\t                            CANDLE: {\n\t                                minSegmentLengthInPx: 20,\n\t                                maxSegmentLengthInPx: 40\n\t                            },\n\t                            LINE: {\n\t                                minSegmentLengthInPx: 2,\n\t                                maxSegmentLengthInPx: 10\n\t                            }\n\t                        }\n\t                    },\n\t                    cursor: {\n\t                        dragMode: false,\n\t                        x: 0,\n\t                        y: 0\n\t                    },\n\t                    backgroundColor: 0,\n\t                    backgroundOpacity: 1,\n\t                    showStats: false,\n\t                    pluginsState: {},\n\t                    eventEmitterMaxListeners: 20,\n\t                    maxVisibleSegments: 1280\n\t                };\n\t                this.widgetsClasses = {};\n\t                this.plugins = {};\n\t                this.isReady = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n\t                this.widgetsClasses = widgetsClasses;\n\t                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n\t                initialState.trends = this.trendsManager.calculatedOptions;\n\t                initialState = this.installPlugins(plugins, initialState);\n\t                this.setState(initialState);\n\t                this.setState({\n\t                    computedData: this.getComputedData()\n\t                });\n\t                this.savePrevState();\n\t                this.screen = new Screen_1.Screen(this);\n\t                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n\t                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n\t                this.initListeners();\n\t                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n\t                this.isReady = true;\n\t                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n\t            }\n\t            ChartState.prototype.destroy = function() {\n\t                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n\t                this.ee.removeAllListeners();\n\t                this.data = {};\n\t            };\n\t            ChartState.prototype.onDestroy = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n\t            };\n\t            ChartState.prototype.onInitialStateApplied = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n\t            };\n\t            ChartState.prototype.onReady = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n\t            };\n\t            ChartState.prototype.onChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onTrendsChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n\t            };\n\t            ChartState.prototype.onScrollStop = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n\t            };\n\t            ChartState.prototype.onScroll = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n\t            };\n\t            ChartState.prototype.onZoom = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n\t            };\n\t            ChartState.prototype.onResize = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n\t            };\n\t            ChartState.prototype.onPluginsStateChange = function(cb) {\n\t                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n\t            };\n\t            ChartState.prototype.getTrend = function(trendName) {\n\t                return this.trendsManager.getTrend(trendName);\n\t            };\n\t            ChartState.prototype.setState = function(newState, eventData, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var stateData = this.data;\n\t                var changedProps = {};\n\t                for (var key in newState) {\n\t                    if (stateData[key] !== newState[key]) {\n\t                        changedProps[key] = newState[key];\n\t                    }\n\t                }\n\t                this.savePrevState(changedProps);\n\t                var trendsData = {};\n\t                if (newState.trends) for (var trendName in newState.trends) {\n\t                    var trendOptions = newState.trends[trendName];\n\t                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n\t                    delete trendOptions.data;\n\t                }\n\t                var newStateContainsData = Object.keys(trendsData).length > 0;\n\t                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n\t                if (newStateContainsData) for (var trendName in trendsData) {\n\t                    this.data.trends[trendName].data = trendsData[trendName];\n\t                }\n\t                if (silent) return;\n\t                var recalculateResult = this.recalculateState(changedProps);\n\t                changedProps = recalculateResult.changedProps;\n\t                this.emitChangedStateEvents(changedProps, eventData);\n\t            };\n\t            ChartState.prototype.recalculateState = function(changedProps) {\n\t                var data = this.data;\n\t                var patch = {};\n\t                var actualData = Utils_1.Utils.deepMerge({}, data);\n\t                if (changedProps.widgets || !data.widgets) {\n\t                    patch.widgets = {};\n\t                    var widgetsOptions = data.widgets || {};\n\t                    for (var widgetName in this.widgetsClasses) {\n\t                        var WidgetClass = this.widgetsClasses[widgetName];\n\t                        var userOptions = widgetsOptions[widgetName] || {};\n\t                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n\t                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n\t                    }\n\t                }\n\t                var cursorOptions = changedProps.cursor;\n\t                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n\t                if (isMouseDrag) {\n\t                    var oldX = data.prevState.cursor.x;\n\t                    var currentX = cursorOptions.x;\n\t                    var currentScroll = data.xAxis.range.scroll;\n\t                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n\t                    patch.xAxis = {\n\t                        range: {\n\t                            scroll: currentScroll + deltaXVal\n\t                        }\n\t                    };\n\t                    actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                        xAxis: patch.xAxis\n\t                    });\n\t                }\n\t                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n\t                var scrollXChanged = false;\n\t                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateXAxis) {\n\t                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n\t                    if (xAxisPatch) {\n\t                        scrollXChanged = true;\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            xAxis: xAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n\t                if (needToRecalculateYAxis) {\n\t                    var yAxisPatch = this.recalculateYAxis(actualData);\n\t                    if (yAxisPatch) {\n\t                        patch = Utils_1.Utils.deepMerge(patch, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                        actualData = Utils_1.Utils.deepMerge(actualData, {\n\t                            yAxis: yAxisPatch\n\t                        });\n\t                    }\n\t                }\n\t                this.savePrevState(patch);\n\t                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n\t                patch.computedData = this.getComputedData(allChangedProps);\n\t                this.savePrevState(patch);\n\t                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n\t                return {\n\t                    changedProps: allChangedProps,\n\t                    patch: patch\n\t                };\n\t            };\n\t            ChartState.prototype.getComputedData = function(changedProps) {\n\t                var computeAll = !changedProps;\n\t                var computedData = {};\n\t                if (computeAll || changedProps.trends && this.trendsManager) {\n\t                    computedData.trends = {\n\t                        maxXVal: this.trendsManager.getEndXVal(),\n\t                        minXVal: this.trendsManager.getStartXVal()\n\t                    };\n\t                }\n\t                return computedData;\n\t            };\n\t            ChartState.prototype.savePrevState = function(changedProps) {\n\t                if (!changedProps) changedProps = this.data;\n\t                var prevState = this.data.prevState;\n\t                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n\t            };\n\t            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n\t                var prevState = this.data.prevState;\n\t                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n\t                for (var key in changedProps) {\n\t                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n\t                }\n\t                if (!this.isReady) return;\n\t                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n\t                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n\t                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n\t                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n\t                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n\t                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n\t                var resizeEventNeeded = changedProps.width || changedProps.height;\n\t                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n\t                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n\t                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n\t            };\n\t            ChartState.prototype.installPlugins = function(plugins, initialState) {\n\t                var _this = this;\n\t                initialState.pluginsState = {};\n\t                plugins.forEach(function(plugin) {\n\t                    var PluginClass = plugin.constructor;\n\t                    var pluginName = PluginClass.NAME;\n\t                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n\t                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n\t                    });\n\t                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n\t                    _this.plugins[pluginName] = plugin;\n\t                    plugin.setupChartState(_this);\n\t                });\n\t                return initialState;\n\t            };\n\t            ChartState.prototype.getPlugin = function(pluginName) {\n\t                return this.plugins[pluginName];\n\t            };\n\t            ChartState.prototype.initListeners = function() {\n\t                var _this = this;\n\t                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n\t                    _this.handleTrendsChange(changedTrends, newData);\n\t                });\n\t            };\n\t            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n\t                for (var trendName in changedTrends) {\n\t                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n\t                }\n\t            };\n\t            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n\t                var axisRange = actualData.xAxis.range;\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var isInitialize = axisRange.zeroVal == void 0;\n\t                var zeroVal, scaleFactor;\n\t                var zoom = axisRange.zoom;\n\t                if (axisRange.isMirrorMode) {\n\t                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n\t                }\n\t                if (isInitialize) {\n\t                    zeroVal = axisRange.from;\n\t                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                } else {\n\t                    zeroVal = axisRange.zeroVal;\n\t                    scaleFactor = axisRange.scaleFactor;\n\t                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n\t                        if (changedProps.xAxis.range.zoom) {\n\t                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n\t                        }\n\t                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n\t                        patch.range.scroll = axisRange.from - zeroVal;\n\t                        patch.range.zoom = currentScaleFactor / scaleFactor;\n\t                        return patch;\n\t                    }\n\t                }\n\t                do {\n\t                    var from = zeroVal + axisRange.scroll;\n\t                    var to = from + actualData.width / (scaleFactor * zoom);\n\t                    var rangeLength = to - from;\n\t                    var needToRecalculateZoom = false;\n\t                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n\t                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n\t                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n\t                    if (needToRecalculateZoom) {\n\t                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n\t                        var zoom = zoom * fixScale;\n\t                        patch.range.zoom = zoom;\n\t                    }\n\t                } while (needToRecalculateZoom);\n\t                patch.range.from = from;\n\t                patch.range.to = to;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.recalculateYAxis = function(actualData) {\n\t                var patch = {\n\t                    range: {}\n\t                };\n\t                var yAxisRange = actualData.yAxis.range;\n\t                var isInitialize = yAxisRange.scaleFactor == void 0;\n\t                var trends = this.trendsManager;\n\t                var trendsEndXVal = trends.getEndXVal();\n\t                var trendsStartXVal = trends.getStartXVal();\n\t                var xRange = actualData.xAxis.range;\n\t                var xFrom = xRange.from, xTo = xRange.to;\n\t                var xRangeLength = xTo - xFrom;\n\t                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n\t                if (xTo > trendsEndXVal) {\n\t                    xTo = trendsEndXVal;\n\t                    xFrom = xTo - xRangeLength;\n\t                } else if (xFrom < trendsStartXVal) {\n\t                    xFrom = trendsStartXVal;\n\t                    xTo = xFrom + xRangeLength;\n\t                }\n\t                var maxY = trends.getMaxYVal(xFrom, xTo);\n\t                var minY = trends.getMinYVal(xFrom, xTo);\n\t                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n\t                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n\t                    if (trendLastY > maxY) maxY = trendLastY;\n\t                    if (trendLastY < minY) minY = trendLastY;\n\t                }\n\t                if (yAxisRange.isMirrorMode) {\n\t                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n\t                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n\t                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n\t                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n\t                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n\t                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n\t                }\n\t                var margin = yAxisRange.margin;\n\t                var padding = {\n\t                    start: yAxisRange.padding.start + margin.start,\n\t                    end: yAxisRange.padding.end + margin.end\n\t                };\n\t                if (padding.end + padding.start >= actualData.height) {\n\t                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n\t                }\n\t                var rangeLength = maxY - minY;\n\t                var paddingTopInPercents = padding.end / actualData.height;\n\t                var paddingBottomInPercents = padding.start / actualData.height;\n\t                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n\t                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n\t                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n\t                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n\t                if (isInitialize) {\n\t                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n\t                    scaleFactor = actualData.height / (toVal - fromVal);\n\t                    patch = {\n\t                        range: {\n\t                            zeroVal: zeroVal,\n\t                            scaleFactor: scaleFactor\n\t                        }\n\t                    };\n\t                    needToZoom = true;\n\t                } else {\n\t                    scaleFactor = yAxisRange.scaleFactor;\n\t                    zeroVal = yAxisRange.zeroVal;\n\t                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n\t                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n\t                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n\t                }\n\t                if (!needToZoom) return null;\n\t                scroll = fromVal - zeroVal;\n\t                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n\t                var currentAxisRange = this.data.yAxis.range;\n\t                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n\t                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n\t                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n\t                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n\t                return patch;\n\t            };\n\t            ChartState.prototype.zoom = function(zoomValue, origin) {\n\t                var _this = this;\n\t                if (origin === void 0) {\n\t                    origin = .5;\n\t                }\n\t                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n\t                var newZoom = zoom * zoomValue;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                var nextRange = this.data.width / (scaleFactor * newZoom);\n\t                var newScroll = scroll + (currentRange - nextRange) * origin;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            zoom: newZoom,\n\t                            scroll: newScroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.zoomToRange = function(range, origin) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n\t                var currentRange = this.data.width / (scaleFactor * zoom);\n\t                return this.zoom(currentRange / range, origin);\n\t            };\n\t            ChartState.prototype.scrollToEnd = function() {\n\t                var _this = this;\n\t                var state = this.data;\n\t                var endXVal = this.trendsManager.getEndXVal();\n\t                var range = state.xAxis.range;\n\t                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n\t                this.setState({\n\t                    xAxis: {\n\t                        range: {\n\t                            scroll: scroll\n\t                        }\n\t                    }\n\t                });\n\t                return new deps_1.Promise(function(resolve) {\n\t                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n\t                    setTimeout(resolve, animationTime * 1e3);\n\t                });\n\t            };\n\t            ChartState.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            ChartState.prototype.getValueOnXAxis = function(x) {\n\t                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n\t            };\n\t            ChartState.prototype.getValueByScreenX = function(x) {\n\t                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByXAxis(x);\n\t            };\n\t            ChartState.prototype.getValueByScreenY = function(y) {\n\t                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n\t                return zeroVal + scroll + this.pxToValueByYAxis(y);\n\t            };\n\t            ChartState.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenYByValue = function(yVal) {\n\t                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n\t            };\n\t            ChartState.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            ChartState.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            ChartState.prototype.getScreenLeftVal = function() {\n\t                return this.getValueByScreenX(0);\n\t            };\n\t            ChartState.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.data.width);\n\t            };\n\t            ChartState.prototype.getPaddingRight = function() {\n\t                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n\t            };\n\t            return ChartState;\n\t        }();\n\t        exports.ChartState = ChartState;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendSegmentsManager_1 = __webpack_require__(15);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var deps_1 = __webpack_require__(3);\n\t        var EVENTS = {\n\t            CHANGE: \"Change\",\n\t            PREPEND_REQUEST: \"prependRequest\"\n\t        };\n\t        (function(TREND_TYPE) {\n\t            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n\t            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n\t        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n\t        var TREND_TYPE = exports.TREND_TYPE;\n\t        var Trend = function() {\n\t            function Trend(chartState, trendName, initialState) {\n\t                this.minXVal = Infinity;\n\t                this.minYVal = Infinity;\n\t                this.maxXVal = -Infinity;\n\t                this.maxYVal = -Infinity;\n\t                var options = initialState.trends[trendName];\n\t                this.name = trendName;\n\t                this.chartState = chartState;\n\t                this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.data.trendDefaultState, options);\n\t                this.calculatedOptions.name = trendName;\n\t                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n\t                this.calculatedOptions.dataset = [];\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvents();\n\t            }\n\t            Trend.prototype.onInitialStateApplied = function() {\n\t                this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\n\t            };\n\t            Trend.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var chartState = this.chartState;\n\t                chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateApplied();\n\t                });\n\t                chartState.onScrollStop(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onZoom(function() {\n\t                    return _this.checkForPrependRequest();\n\t                });\n\t                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n\t                });\n\t                chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            Trend.prototype.getCalculatedOptions = function() {\n\t                return this.calculatedOptions;\n\t            };\n\t            Trend.prototype.appendData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData());\n\t                var updatedTrendData = options.data.concat(newData);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.prependData = function(rawData) {\n\t                var options = this.getOptions();\n\t                var newData = Trend.prepareData(rawData, this.getData(), true);\n\t                var updatedTrendData = newData.concat(options.data);\n\t                this.changeData(updatedTrendData, newData);\n\t            };\n\t            Trend.prototype.changeData = function(allData, newData) {\n\t                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n\t                    var item = newData_1[_i];\n\t                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n\t                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n\t                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n\t                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n\t                }\n\t                var options = this.getOptions();\n\t                var statePatch = {\n\t                    trends: (_a = {}, _a[options.name] = {\n\t                        data: allData\n\t                    }, _a)\n\t                };\n\t                this.chartState.setState(statePatch, newData);\n\t                var _a;\n\t            };\n\t            Trend.prototype.getData = function(fromX, toX) {\n\t                var data = this.getOptions().data;\n\t                if (fromX == void 0 && toX == void 0) return data;\n\t                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n\t                toX = toX !== void 0 ? toX : data[data.length].xVal;\n\t                var filteredData = [];\n\t                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n\t                    var item = data_1[_i];\n\t                    if (item.xVal < fromX) continue;\n\t                    if (item.xVal > toX) break;\n\t                    filteredData.push(item);\n\t                }\n\t                return filteredData;\n\t            };\n\t            Trend.prototype.getFirstItem = function() {\n\t                return this.getOptions().data[0];\n\t            };\n\t            Trend.prototype.getLastItem = function() {\n\t                var data = this.getOptions().data;\n\t                return data[data.length - 1];\n\t            };\n\t            Trend.prototype.getOptions = function() {\n\t                return this.chartState.data.trends[this.name];\n\t            };\n\t            Trend.prototype.setOptions = function(options) {\n\t                this.chartState.setState({\n\t                    trends: (_a = {}, _a[this.name] = options, _a)\n\t                });\n\t                var _a;\n\t            };\n\t            Trend.prototype.onPrependRequest = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(EVENTS.CHANGE, cb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, cb);\n\t                };\n\t            };\n\t            Trend.prototype.onDataChange = function(cb) {\n\t                var _this = this;\n\t                var onChangeCb = function(changedOptions, newData) {\n\t                    if (newData) cb(newData);\n\t                };\n\t                this.ee.on(EVENTS.CHANGE, onChangeCb);\n\t                return function() {\n\t                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n\t                };\n\t            };\n\t            Trend.prototype.checkForPrependRequest = function() {\n\t                var _this = this;\n\t                if (this.prependRequest) return;\n\t                var chartState = this.chartState;\n\t                var minXVal = chartState.data.computedData.trends.minXVal;\n\t                var minScreenX = chartState.getScreenXByValue(minXVal);\n\t                var needToRequest = minScreenX > 0;\n\t                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var requestedDataLength = to - from;\n\t                if (!needToRequest) return;\n\t                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n\t                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n\t                });\n\t                this.prependRequest.then(function(newData) {\n\t                    _this.prependData(newData);\n\t                    _this.prependRequest = null;\n\t                }, function() {\n\t                    _this.prependRequest = null;\n\t                });\n\t            };\n\t            Trend.prepareData = function(newData, currentData, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var data = [];\n\t                if (typeof newData[0] == \"number\") {\n\t                    currentData = currentData || [];\n\t                    var initialItem = void 0;\n\t                    var xVal = void 0;\n\t                    if (isPrepend) {\n\t                        initialItem = currentData[0];\n\t                        xVal = initialItem.xVal - newData.length;\n\t                    } else {\n\t                        initialItem = currentData[currentData.length - 1];\n\t                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n\t                    }\n\t                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n\t                        var yVal = _a[_i];\n\t                        data.push({\n\t                            xVal: xVal,\n\t                            yVal: yVal,\n\t                            id: Utils_1.Utils.getUid()\n\t                        });\n\t                        xVal++;\n\t                    }\n\t                } else {\n\t                    data = newData;\n\t                }\n\t                return data;\n\t            };\n\t            return Trend;\n\t        }();\n\t        exports.Trend = Trend;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        function deepmerge(target, src, mergeArrays) {\n\t            if (mergeArrays === void 0) {\n\t                mergeArrays = true;\n\t            }\n\t            var array = Array.isArray(src);\n\t            var dst = array && [] || {};\n\t            if (array) {\n\t                target = target || [];\n\t                if (mergeArrays) {\n\t                    dst = dst.concat(target);\n\t                }\n\t                src.forEach(function(e, i) {\n\t                    if (typeof dst[i] === \"undefined\") {\n\t                        dst[i] = e;\n\t                    } else if (typeof e === \"object\") {\n\t                        dst[i] = deepmerge(target[i], e, mergeArrays);\n\t                    } else {\n\t                        if (target.indexOf(e) === -1) {\n\t                            dst.push(e);\n\t                        }\n\t                    }\n\t                });\n\t            } else {\n\t                if (target && typeof target === \"object\") {\n\t                    Object.keys(target).forEach(function(key) {\n\t                        dst[key] = target[key];\n\t                    });\n\t                }\n\t                Object.keys(src).forEach(function(key) {\n\t                    if (typeof src[key] !== \"object\" || !src[key]) {\n\t                        dst[key] = src[key];\n\t                    } else {\n\t                        if (!target[key]) {\n\t                            dst[key] = src[key];\n\t                        } else {\n\t                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t            return dst;\n\t        }\n\t        var Utils = function() {\n\t            function Utils() {}\n\t            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n\t                return deepmerge(obj1, obj2, mergeArrays);\n\t            };\n\t            Utils.deepCopy = function(obj) {\n\t                return JSON.parse(JSON.stringify(obj));\n\t            };\n\t            Utils.toFixed = function(num, digitsCount) {\n\t                var maxDigits = 15;\n\t                var result = \"\";\n\t                var intVal = Math.floor(num);\n\t                var intStr = intVal.toString();\n\t                var lengthDiff = digitsCount - intStr.length;\n\t                if (lengthDiff > 0) {\n\t                    result = \"0\".repeat(lengthDiff) + intStr;\n\t                } else {\n\t                    result = intStr;\n\t                }\n\t                var afterPointDigitsCount = maxDigits - intStr.length;\n\t                var afterPointStr = num.toString().split(\".\")[1];\n\t                if (afterPointStr) {\n\t                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n\t                }\n\t                return result;\n\t            };\n\t            Utils.bindEvent = function() {};\n\t            Utils.createTexture = function(width, height, fn) {\n\t                var canvas = document.createElement(\"canvas\");\n\t                canvas.width = width;\n\t                canvas.height = height;\n\t                var ctx = canvas.getContext(\"2d\");\n\t                fn(ctx);\n\t                var texture = new THREE.Texture(canvas);\n\t                texture.needsUpdate = true;\n\t                return texture;\n\t            };\n\t            Utils.createPixelPerfectTexture = function(width, height, fn) {\n\t                var texture = this.createTexture(width, height, fn);\n\t                texture.minFilter = THREE.NearestFilter;\n\t                return texture;\n\t            };\n\t            Utils.error = function(msg) {\n\t                console.error(\"Chart error: \" + msg);\n\t                throw \"Chart: \" + msg;\n\t            };\n\t            Utils.warn = function(msg) {\n\t                console.warn(\"Chart warning: \" + msg);\n\t            };\n\t            Utils.getUid = function() {\n\t                return this.currentId++;\n\t            };\n\t            Utils.getDistance = function(num1, num2) {\n\t                return Math.max(num1, num2) - Math.min(num1, num2);\n\t            };\n\t            Utils.binarySearchClosestInd = function(arr, num, key) {\n\t                var mid;\n\t                var lo = 0;\n\t                var hi = arr.length - 1;\n\t                while (hi - lo > 1) {\n\t                    mid = Math.floor((lo + hi) / 2);\n\t                    if (arr[mid][key] < num) {\n\t                        lo = mid;\n\t                    } else {\n\t                        hi = mid;\n\t                    }\n\t                }\n\t                if (num - arr[lo][key] <= arr[hi][key] - num) {\n\t                    return lo;\n\t                }\n\t                return hi;\n\t            };\n\t            Utils.binarySearchClosest = function(arr, num, key) {\n\t                var ind = this.binarySearchClosestInd(arr, num, key);\n\t                return arr[ind];\n\t            };\n\t            Utils.rectsIntersect = function(r1, r2) {\n\t                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n\t                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n\t                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n\t                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n\t            };\n\t            Utils.throttle = function(func, ms) {\n\t                var isThrottled = false, savedArgs, savedThis;\n\t                function wrapper() {\n\t                    if (isThrottled) {\n\t                        savedArgs = arguments;\n\t                        savedThis = this;\n\t                        return;\n\t                    }\n\t                    func.apply(this, arguments);\n\t                    isThrottled = true;\n\t                    setTimeout(function() {\n\t                        isThrottled = false;\n\t                        if (savedArgs) {\n\t                            wrapper.apply(savedThis, savedArgs);\n\t                            savedArgs = savedThis = null;\n\t                        }\n\t                    }, ms);\n\t                }\n\t                return wrapper;\n\t            };\n\t            Utils.msToTimeString = function(timestamp) {\n\t                var h = Math.floor(timestamp / 36e4);\n\t                var m = Math.floor(timestamp / 6e4);\n\t                var s = Math.floor(timestamp / 1e3);\n\t                return h + \":\" + m + \":\" + s;\n\t            };\n\t            Utils.getRandomItem = function(arr) {\n\t                var ind = Math.floor(Math.random() * arr.length);\n\t                return arr[ind];\n\t            };\n\t            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n\t                if (excludeProps === void 0) {\n\t                    excludeProps = [];\n\t                }\n\t                for (var key in props) {\n\t                    if (excludeProps.indexOf(key) !== -1) continue;\n\t                    if (srcObject[key] == void 0) continue;\n\t                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n\t                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n\t                    } else {\n\t                        dstObject[key] = this.deepCopy(srcObject[key]);\n\t                    }\n\t                }\n\t            };\n\t            Utils.currentId = 1;\n\t            return Utils;\n\t        }();\n\t        exports.Utils = Utils;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var Vector3 = THREE.Vector3;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var MAX_ANIMATED_SEGMENTS = 100;\n\t        var EVENTS = {\n\t            REBUILD: \"rebuild\",\n\t            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n\t            ANIMATION_FRAME: \"animationFrame\"\n\t        };\n\t        var TrendSegmentsManager = function() {\n\t            function TrendSegmentsManager(chartState, trend) {\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.animatedSegmentsIds = [];\n\t                this.segmentsLength = 0;\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForPrepend = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.trend = trend;\n\t                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n\t                this.tryToRebuildSegments();\n\t                this.bindEvents();\n\t            }\n\t            TrendSegmentsManager.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.trend.onChange(function(changedOptions, newData) {\n\t                    return _this.onTrendChangeHandler(changedOptions, newData);\n\t                });\n\t                this.chartState.onZoom(function() {\n\t                    return _this.onZoomHandler();\n\t                });\n\t                this.chartState.onScroll(function() {\n\t                    return _this.recalculateDisplayedRange();\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            TrendSegmentsManager.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.appendAnimation && this.appendAnimation.kill();\n\t                this.prependAnimation && this.prependAnimation.kill();\n\t            };\n\t            TrendSegmentsManager.prototype.onZoomHandler = function() {\n\t                var segmentsRebuilded = this.tryToRebuildSegments();\n\t                if (!segmentsRebuilded) {\n\t                    this.recalculateDisplayedRange();\n\t                }\n\t            };\n\t            TrendSegmentsManager.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n\t                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n\t                if (needToRebuildSegments) {\n\t                    this.tryToRebuildSegments(true);\n\t                    return;\n\t                }\n\t                if (!newData) return;\n\t                var data = this.trend.getData();\n\t                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                isAppend ? this.appendData(newData) : this.prependData(newData);\n\t                this.recalculateDisplayedRange();\n\t            };\n\t            TrendSegmentsManager.prototype.getSegment = function(id) {\n\t                return this.segmentsById[id];\n\t            };\n\t            TrendSegmentsManager.prototype.getEndSegment = function() {\n\t                return this.segmentsById[this.endSegmentId];\n\t            };\n\t            TrendSegmentsManager.prototype.getStartSegment = function() {\n\t                return this.segmentsById[this.startSegmentId];\n\t            };\n\t            TrendSegmentsManager.prototype.tryToRebuildSegments = function(force) {\n\t                if (force === void 0) {\n\t                    force = false;\n\t                }\n\t                var options = this.trend.getOptions();\n\t                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n\t                var trendTypesSettings = options.settingsForTypes;\n\t                var trendTypeSettings = trendTypesSettings[trendTypeName];\n\t                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n\t                var needToRebuild = this.segments.length === 0 || force;\n\t                var segmentLength = this.maxSegmentLength;\n\t                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n\t                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n\t                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n\t                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n\t                    needToRebuild = true;\n\t                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n\t                }\n\t                if (!needToRebuild) return false;\n\t                this.maxSegmentLength = segmentLength;\n\t                this.segmentsById = {};\n\t                this.segments = [];\n\t                this.nextEmptyId = 0;\n\t                this.startSegmentId = 0;\n\t                this.endSegmentId = 0;\n\t                this.segmentsLength = 0;\n\t                this.stopAllAnimations();\n\t                this.appendData(null, true);\n\t                this.recalculateDisplayedRange(true);\n\t                this.ee.emit(EVENTS.REBUILD);\n\t            };\n\t            TrendSegmentsManager.prototype.stopAllAnimations = function() {\n\t                this.animatedSegmentsIds = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                this.animatedSegmentsForAppend = [];\n\t                if (this.prependAnimation) this.prependAnimation.kill();\n\t                if (this.appendAnimation) this.appendAnimation.kill();\n\t            };\n\t            TrendSegmentsManager.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n\t                if (segmentsAreRebuilded === void 0) {\n\t                    segmentsAreRebuilded = false;\n\t                }\n\t                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n\t                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n\t                var displayedRange = to - from;\n\t                this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, \"startXVal\");\n\t                this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n\t                this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, \"endXVal\");\n\t                this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n\t                if (segmentsAreRebuilded) return;\n\t                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n\t                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n\t            };\n\t            TrendSegmentsManager.prototype.getSegmentsForXValues = function(values) {\n\t                var valueInd = 0;\n\t                var value = values[valueInd];\n\t                var lastValueInd = values.length - 1;\n\t                var results = [];\n\t                var segment = this.getStartSegment();\n\t                if (!segment.hasValue) return [];\n\t                while (segment) {\n\t                    while (value < segment.startXVal) {\n\t                        results.push(void 0);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    while (value > segment.endXVal) {\n\t                        segment = segment.getNext();\n\t                        if (!segment) break;\n\t                    }\n\t                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n\t                    if (valueInPoint) {\n\t                        results.push(segment);\n\t                        value = values[++valueInd];\n\t                    }\n\t                    if (valueInd > lastValueInd) break;\n\t                }\n\t                return results;\n\t            };\n\t            TrendSegmentsManager.prototype.onAnimationFrame = function(cb) {\n\t                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n\t            };\n\t            TrendSegmentsManager.prototype.onRebuild = function(cb) {\n\t                return this.ee.subscribe(EVENTS.REBUILD, cb);\n\t            };\n\t            TrendSegmentsManager.prototype.onDisplayedRangeChanged = function(cb) {\n\t                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n\t            };\n\t            TrendSegmentsManager.prototype.allocateNextSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var prevSegment = this.segmentsById[this.endSegmentId];\n\t                if (prevSegment && prevSegment.hasValue) {\n\t                    prevSegment.nextId = id;\n\t                    segment.prevId = prevSegment.id;\n\t                }\n\t                this.endSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.push(segment);\n\t                return segment;\n\t            };\n\t            TrendSegmentsManager.prototype.allocatePrevSegment = function() {\n\t                var id = this.nextEmptyId++;\n\t                var segment = new TrendSegment(this, id);\n\t                var nextSegment = this.segmentsById[this.startSegmentId];\n\t                if (nextSegment && nextSegment.hasValue) {\n\t                    nextSegment.prevId = id;\n\t                    segment.nextId = nextSegment.id;\n\t                }\n\t                this.startSegmentId = id;\n\t                this.segmentsLength++;\n\t                this.segmentsById[id] = segment;\n\t                this.segments.unshift(segment);\n\t                return segment;\n\t            };\n\t            TrendSegmentsManager.prototype.appendData = function(newData, needRebuildSegments) {\n\t                if (needRebuildSegments === void 0) {\n\t                    needRebuildSegments = false;\n\t                }\n\t                var trendData = this.trend.getData();\n\t                if (needRebuildSegments) {\n\t                    newData = trendData;\n\t                    this.animatedSegmentsForAppend = [];\n\t                }\n\t                var startItemInd = trendData.length - newData.length;\n\t                var segment = this.getEndSegment() || this.allocateNextSegment();\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                var itemInd = 0;\n\t                while (itemInd < newData.length) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.appendItem(item);\n\t                    var isLastItem = itemInd == newData.length - 1;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd++;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForAppend.length > 0) {\n\t                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n\t                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForAppend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocateNextSegment();\n\t                    var prevItem = trendData[startItemInd + itemInd - 1];\n\t                    segment.appendItem(prevItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (needRebuildSegments) {\n\t                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n\t                        var segmentId = _a[_i];\n\t                        var segment_1 = this.segmentsById[segmentId];\n\t                        segment_1.currentAnimationState = segment_1.createAnimationState();\n\t                    }\n\t                    this.animatedSegmentsForAppend = [];\n\t                    return;\n\t                }\n\t                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time);\n\t            };\n\t            TrendSegmentsManager.prototype.prependData = function(newData) {\n\t                var trendData = this.trend.getData();\n\t                var segment = this.getStartSegment() || this.segmentsById[0];\n\t                var initialSegment = segment.hasValue ? segment : null;\n\t                var itemInd = newData.length - 1;\n\t                var initialAnimationState = segment.createAnimationState();\n\t                while (itemInd >= 0) {\n\t                    var item = newData[itemInd];\n\t                    var itemIsInserted = segment.prependItem(item);\n\t                    var isLastItem = itemInd == 0;\n\t                    if (itemIsInserted) {\n\t                        if (!isLastItem) itemInd--;\n\t                    } else {\n\t                        if (!segment.isCompleted) segment.complete();\n\t                    }\n\t                    if (isLastItem && itemIsInserted) {\n\t                        segment.recalculateItems();\n\t                    }\n\t                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n\t                    if (segmentIsReadyForAnimate) {\n\t                        var id = segment.id;\n\t                        if (!initialSegment) initialSegment = segment;\n\t                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n\t                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n\t                        if (this.animatedSegmentsForPrepend.length > 0) {\n\t                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n\t                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n\t                        }\n\t                        segment.targetAnimationState = segment.createAnimationState();\n\t                        this.animatedSegmentsForPrepend.push(id);\n\t                    }\n\t                    if (isLastItem && itemIsInserted) break;\n\t                    if (!segment.isCompleted) continue;\n\t                    segment = this.allocatePrevSegment();\n\t                    var nextItem = trendData[itemInd + 1];\n\t                    segment.prependItem(nextItem);\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n\t                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n\t                this.animate(time, true);\n\t            };\n\t            TrendSegmentsManager.prototype.animate = function(time, isPrepend) {\n\t                var _this = this;\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n\t                if (animation && animation.isActive() || time == 0) {\n\t                    if (animation) animation.kill();\n\t                    this.onAnimationFrameHandler(1, isPrepend);\n\t                    animatedSegmentsIds.length = 0;\n\t                    return;\n\t                }\n\t                var animationsOptions = this.chartState.data.animations;\n\t                var ease = animationsOptions.trendChangeEase;\n\t                var objectToAnimate = {\n\t                    animationValue: 0\n\t                };\n\t                animation = TweenLite.to(objectToAnimate, time, {\n\t                    animationValue: 1,\n\t                    ease: ease\n\t                });\n\t                animation.eventCallback(\"onUpdate\", function() {\n\t                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animatedSegmentsIds.length = 0;\n\t                    _this.appendAnimation = null;\n\t                });\n\t                if (isPrepend) {\n\t                    this.prependAnimation = animation;\n\t                } else {\n\t                    this.appendAnimation = animation;\n\t                }\n\t            };\n\t            TrendSegmentsManager.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n\t                if (isPrepend === void 0) {\n\t                    isPrepend = false;\n\t                }\n\t                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n\t                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n\t                    var segmentId = animatedSegmentsIds_1[_i];\n\t                    var segment = this.segmentsById[segmentId];\n\t                    for (var key in segment.targetAnimationState) {\n\t                        var targetValue = segment.targetAnimationState[key];\n\t                        var initialValue = segment.initialAnimationState[key];\n\t                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n\t                        segment.currentAnimationState[key] = currentValue;\n\t                    }\n\t                }\n\t                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n\t                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n\t            };\n\t            return TrendSegmentsManager;\n\t        }();\n\t        exports.TrendSegmentsManager = TrendSegmentsManager;\n\t        var TrendSegment = function() {\n\t            function TrendSegment(trendPoints, id) {\n\t                this.isCompleted = false;\n\t                this.items = [];\n\t                this.initialAnimationState = {};\n\t                this.targetAnimationState = {};\n\t                this.currentAnimationState = {};\n\t                this.trendSegments = trendPoints;\n\t                this.id = id;\n\t                this.maxLength = trendPoints.maxSegmentLength;\n\t            }\n\t            TrendSegment.prototype.createAnimationState = function() {\n\t                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n\t                return {\n\t                    xVal: xVal,\n\t                    yVal: yVal,\n\t                    startXVal: startXVal,\n\t                    startYVal: startYVal,\n\t                    endXVal: endXVal,\n\t                    endYVal: endYVal,\n\t                    maxYVal: maxYVal,\n\t                    minYVal: minYVal,\n\t                    maxLength: maxLength\n\t                };\n\t            };\n\t            TrendSegment.prototype.appendItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.push(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var startXVal = items[0].xVal;\n\t                if (item.xVal - startXVal > this.maxLength) return false;\n\t                items.push(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.prependItem = function(item) {\n\t                if (this.isCompleted) return false;\n\t                var items = this.items;\n\t                if (items.length < 2) {\n\t                    this.items.unshift(item);\n\t                    this.hasValue = true;\n\t                    return true;\n\t                }\n\t                var endXVal = items[items.length - 1].xVal;\n\t                if (endXVal - item.xVal > this.maxLength) return false;\n\t                items.unshift(item);\n\t                return true;\n\t            };\n\t            TrendSegment.prototype.complete = function() {\n\t                this.isCompleted = true;\n\t                this.recalculateItems();\n\t                this.items = [];\n\t            };\n\t            TrendSegment.prototype.recalculateItems = function() {\n\t                var items = this.items;\n\t                var itemsLength = items.length;\n\t                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n\t                var endItem = items[itemsLength - 1];\n\t                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n\t                var startXVal, startYVal;\n\t                var startItem = items[0];\n\t                startXVal = startItem.xVal;\n\t                startYVal = startItem.yVal;\n\t                var minX = Math.min(startXVal, endXVal);\n\t                var maxX = Math.max(startXVal, endXVal);\n\t                var middleXVal = minX + (maxX - minX) / 2;\n\t                var minY = Math.min(startYVal, endYVal);\n\t                var maxY = Math.max(startYVal, endYVal);\n\t                var middleYVal = minY + (maxY - minY) / 2;\n\t                var yVals = items.map(function(item) {\n\t                    return item.yVal;\n\t                });\n\t                this.startXVal = startXVal;\n\t                this.startYVal = startYVal;\n\t                this.endXVal = endXVal;\n\t                this.endYVal = endYVal;\n\t                this.xVal = middleXVal;\n\t                this.yVal = middleYVal;\n\t                this.maxYVal = Math.max.apply(Math, yVals);\n\t                this.minYVal = Math.min.apply(Math, yVals);\n\t                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n\t            };\n\t            TrendSegment.prototype.getNext = function() {\n\t                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n\t                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n\t            };\n\t            TrendSegment.prototype.getPrev = function() {\n\t                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n\t                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n\t            };\n\t            TrendSegment.prototype.getFrameVal = function() {\n\t                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n\t                return new Vector3(xVal, yVal, 0);\n\t            };\n\t            TrendSegment.prototype.getFramePoint = function() {\n\t                var frameVal = this.getFrameVal();\n\t                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n\t            };\n\t            return TrendSegment;\n\t        }();\n\t        exports.TrendSegment = TrendSegment;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var deps_1 = __webpack_require__(3);\n\t        var EventEmitter = function() {\n\t            function EventEmitter() {\n\t                this.ee = new deps_1.EE2();\n\t            }\n\t            EventEmitter.prototype.emit = function(eventName) {\n\t                var args = [];\n\t                for (var _i = 1; _i < arguments.length; _i++) {\n\t                    args[_i - 1] = arguments[_i];\n\t                }\n\t                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n\t                var _a;\n\t            };\n\t            EventEmitter.prototype.on = function(eventName, callback) {\n\t                return this.ee.on(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.off = function(eventName, callback) {\n\t                return this.ee.off(eventName, callback);\n\t            };\n\t            EventEmitter.prototype.subscribe = function(eventName, callback) {\n\t                var _this = this;\n\t                this.on(eventName, callback);\n\t                return function() {\n\t                    return _this.off(eventName, callback);\n\t                };\n\t            };\n\t            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n\t                this.ee.setMaxListeners(listenersCount);\n\t            };\n\t            EventEmitter.prototype.removeAllListeners = function(eventName) {\n\t                this.ee.removeAllListeners(eventName);\n\t            };\n\t            return EventEmitter;\n\t        }();\n\t        exports.EventEmitter = EventEmitter;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        var ChartWidget = function() {\n\t            function ChartWidget(chartState) {\n\t                this.unsubscribers = [];\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            ChartWidget.prototype.bindEvents = function() {};\n\t            ChartWidget.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartWidget.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartWidget.getDefaultOptions = function() {\n\t                return {\n\t                    enabled: true\n\t                };\n\t            };\n\t            ChartWidget.widgetName = \"\";\n\t            return ChartWidget;\n\t        }();\n\t        exports.ChartWidget = ChartWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Trend_1 = __webpack_require__(13);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var EVENTS = {\n\t            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n\t        };\n\t        var TrendsManager = function() {\n\t            function TrendsManager(state, initialState) {\n\t                this.trends = {};\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.chartState = state;\n\t                var trendsCalculatedOptions = {};\n\t                for (var trendName in initialState.trends) {\n\t                    var trend = this.createTrend(state, trendName, initialState);\n\t                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n\t                }\n\t                this.calculatedOptions = trendsCalculatedOptions;\n\t                this.bindEvents();\n\t            }\n\t            TrendsManager.prototype.getTrend = function(trendName) {\n\t                return this.trends[trendName];\n\t            };\n\t            TrendsManager.prototype.getEnabledTrends = function() {\n\t                var enabledTrends = [];\n\t                var allTrends = this.trends;\n\t                for (var trendName in allTrends) {\n\t                    var trend = allTrends[trendName];\n\t                    trend.getOptions().enabled && enabledTrends.push(trend);\n\t                }\n\t                return enabledTrends;\n\t            };\n\t            TrendsManager.prototype.getStartXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                return trends[0].getData()[0].xVal;\n\t            };\n\t            TrendsManager.prototype.getEndXVal = function() {\n\t                var trends = this.getEnabledTrends();\n\t                var firstTrendData = trends[0].getData();\n\t                return firstTrendData[firstTrendData.length - 1].xVal;\n\t            };\n\t            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n\t                var trends = this.getEnabledTrends();\n\t                var compareFn;\n\t                var result;\n\t                if (extremumIsMax) {\n\t                    result = -Infinity;\n\t                    compareFn = Math.max;\n\t                } else {\n\t                    result = Infinity;\n\t                    compareFn = Math.min;\n\t                }\n\t                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n\t                    var trend = trends_1[_i];\n\t                    var trendData = trend.getData(fromX, toX);\n\t                    var trendYValues = trendData.map(function(dataItem) {\n\t                        return dataItem.yVal;\n\t                    });\n\t                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n\t                }\n\t                if (result == Infinity || result == -Infinity) result = NaN;\n\t                return result;\n\t            };\n\t            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(true, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n\t                return this.getExtremumYVal(false, fromX, toX);\n\t            };\n\t            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n\t                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n\t            };\n\t            TrendsManager.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onInitialStateApplied(function() {\n\t                    return _this.onInitialStateAppliedHandler();\n\t                });\n\t            };\n\t            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n\t                var _this = this;\n\t                var _loop_1 = function(trendName) {\n\t                    this_1.trends[trendName].segmentsManager.onRebuild(function() {\n\t                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n\t                    });\n\t                };\n\t                var this_1 = this;\n\t                for (var trendName in this.trends) {\n\t                    _loop_1(trendName);\n\t                }\n\t            };\n\t            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n\t                var trend = new Trend_1.Trend(state, trendName, initialState);\n\t                this.trends[trendName] = trend;\n\t                return trend;\n\t            };\n\t            return TrendsManager;\n\t        }();\n\t        exports.TrendsManager = TrendsManager;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Vector3 = THREE.Vector3;\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var Screen = function() {\n\t            function Screen(chartState) {\n\t                this.options = {\n\t                    scrollXVal: 0,\n\t                    scrollX: 0,\n\t                    scrollYVal: 0,\n\t                    scrollY: 0,\n\t                    zoomX: 1,\n\t                    zoomY: 1\n\t                };\n\t                this.currentScrollX = {\n\t                    x: 0\n\t                };\n\t                this.currentScrollY = {\n\t                    y: 0\n\t                };\n\t                this.currentZoomX = {\n\t                    val: 1\n\t                };\n\t                this.currentZoomY = {\n\t                    val: 1\n\t                };\n\t                this.chartState = chartState;\n\t                var _a = chartState.data, w = _a.width, h = _a.height;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.transform({\n\t                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n\t                    zoomY: 1\n\t                });\n\t                this.bindEvents();\n\t            }\n\t            Screen.prototype.getCameraSettings = function() {\n\t                var _a = this.chartState.data, w = _a.width, h = _a.height;\n\t                var FOV = 75;\n\t                var vFOV = FOV * (Math.PI / 180);\n\t                return {\n\t                    FOV: FOV,\n\t                    aspect: w / h,\n\t                    near: .1,\n\t                    far: 5e3,\n\t                    z: h / (2 * Math.tan(vFOV / 2)),\n\t                    x: w / 2,\n\t                    y: h / 2\n\t                };\n\t            };\n\t            Screen.prototype.onZoomFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"zoomFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onScrollFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"scrollFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.onTransformationFrame = function(cb) {\n\t                var _this = this;\n\t                var eventName = \"transformationFrame\";\n\t                this.ee.on(eventName, cb);\n\t                return function() {\n\t                    _this.ee.off(eventName, cb);\n\t                };\n\t            };\n\t            Screen.prototype.cameraIsMoving = function() {\n\t                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n\t            };\n\t            Screen.prototype.transform = function(options, silent) {\n\t                if (silent === void 0) {\n\t                    silent = false;\n\t                }\n\t                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n\t                if (scrollX != void 0) this.options.scrollX = scrollX;\n\t                if (scrollY != void 0) this.options.scrollY = scrollY;\n\t                if (zoomX != void 0) this.options.zoomX = zoomX;\n\t                if (zoomY != void 0) this.options.zoomY = zoomY;\n\t                if (scrollX != void 0 || zoomX) {\n\t                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n\t                    this.options.scrollXVal = options.scrollXVal;\n\t                }\n\t                if (scrollY != void 0 || zoomY) {\n\t                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n\t                    this.options.scrollYVal = options.scrollYVal;\n\t                }\n\t                if (silent) return;\n\t                this.ee.emit(\"transformationFrame\", options);\n\t                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n\t                    this.ee.emit(\"scrollFrame\", options);\n\t                }\n\t                if (options.zoomX != void 0 || options.zoomY != void 0) {\n\t                    this.ee.emit(\"zoomFrame\", options);\n\t                }\n\t            };\n\t            Screen.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onChange(function(changedProps) {\n\t                    if (changedProps.xAxis && changedProps.xAxis.range) {\n\t                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n\t                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n\t                    }\n\t                    if (changedProps.yAxis && changedProps.yAxis.range) {\n\t                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n\t                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n\t                    }\n\t                });\n\t                state.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                });\n\t            };\n\t            Screen.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t                this.scrollXAnimation && this.scrollXAnimation.kill();\n\t                this.scrollYAnimation && this.scrollYAnimation.kill();\n\t                this.zoomXAnimation && this.zoomXAnimation.kill();\n\t                this.zoomYAnimation && this.zoomYAnimation.kill();\n\t            };\n\t            Screen.prototype.onScrollXHandler = function(changedProps) {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var isDragMode = state.data.cursor.dragMode;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled && !isDragMode;\n\t                var zoomXChanged = changedProps.xAxis.range.zoom;\n\t                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n\t                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n\t                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n\t                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n\t                var range = state.data.xAxis.range;\n\t                var targetX = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollX.x = this.options.scrollX;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollX: _this.currentScrollX.x\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n\t                        x: targetX,\n\t                        ease: ease\n\t                    });\n\t                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollX.x = targetX;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onScrollYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n\t                var range = state.data.yAxis.range;\n\t                var targetY = range.scroll * range.scaleFactor * range.zoom;\n\t                this.currentScrollY.y = this.options.scrollY;\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        scrollY: _this.currentScrollY.y\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n\t                        y: targetY,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentScrollY.y = targetY;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomXHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.xAxis.range.zoom;\n\t                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomX: _this.currentZoomX.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomX.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.onZoomYHandler = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                var animations = state.data.animations;\n\t                var canAnimate = animations.enabled;\n\t                var time = animations.zoomSpeed;\n\t                var targetZoom = state.data.yAxis.range.zoom;\n\t                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n\t                var cb = function() {\n\t                    _this.transform({\n\t                        zoomY: _this.currentZoomY.val\n\t                    });\n\t                };\n\t                if (canAnimate) {\n\t                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n\t                        val: targetZoom,\n\t                        ease: animations.zoomEase\n\t                    });\n\t                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.currentZoomY.val = targetZoom;\n\t                    cb();\n\t                }\n\t            };\n\t            Screen.prototype.getPointOnXAxis = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomX;\n\t                return (xVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnYAxis = function(yVal) {\n\t                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n\t                var zoom = this.options.zoomY;\n\t                return (yVal - zeroVal) * scaleFactor * zoom;\n\t            };\n\t            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n\t                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n\t            };\n\t            Screen.prototype.getValueOnXAxis = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.valueToPxByXAxis = function(xVal) {\n\t                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n\t            };\n\t            Screen.prototype.valueToPxByYAxis = function(yVal) {\n\t                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n\t            };\n\t            Screen.prototype.pxToValueByXAxis = function(xVal) {\n\t                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n\t            };\n\t            Screen.prototype.pxToValueByYAxis = function(yVal) {\n\t                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n\t            };\n\t            Screen.prototype.getValueByScreenX = function(x) {\n\t                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n\t            };\n\t            Screen.prototype.getValueByScreenY = function(y) {\n\t                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n\t            };\n\t            Screen.prototype.getScreenXByValue = function(xVal) {\n\t                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n\t                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n\t            };\n\t            Screen.prototype.getScreenXByPoint = function(xVal) {\n\t                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n\t            };\n\t            Screen.prototype.getPointByScreenX = function(screenX) {\n\t                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n\t            };\n\t            Screen.prototype.getPointByScreenY = function(screenY) {\n\t                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n\t            };\n\t            Screen.prototype.getTop = function() {\n\t                return this.getPointByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottom = function() {\n\t                return this.getPointByScreenY(0);\n\t            };\n\t            Screen.prototype.getLeft = function() {\n\t                return this.getPointByScreenX(0);\n\t            };\n\t            Screen.prototype.getScreenRightVal = function() {\n\t                return this.getValueByScreenX(this.chartState.data.width);\n\t            };\n\t            Screen.prototype.getTopVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height);\n\t            };\n\t            Screen.prototype.getBottomVal = function() {\n\t                return this.getValueByScreenY(0);\n\t            };\n\t            Screen.prototype.getCenterYVal = function() {\n\t                return this.getValueByScreenY(this.chartState.data.height / 2);\n\t            };\n\t            return Screen;\n\t        }();\n\t        exports.Screen = Screen;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        var AXIS_MARK_DEFAULT_OPTIONS = {\n\t            type: \"simple\",\n\t            lineWidth: 1,\n\t            value: 0,\n\t            showValue: false,\n\t            stickToEdges: false,\n\t            lineColor: \"#FFFFFF\",\n\t            title: \"\"\n\t        };\n\t        var AxisMarks = function() {\n\t            function AxisMarks(chartState, axisType) {\n\t                this.items = {};\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.axisType = axisType;\n\t                var marks = this.items;\n\t                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n\t                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n\t                    var options = axisMarksOptions_1[_i];\n\t                    var axisMark = void 0;\n\t                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n\t                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n\t                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n\t                    if (options.type == \"timeleft\") {\n\t                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n\t                    } else {\n\t                        axisMark = new AxisMark(chartState, axisType, options);\n\t                    }\n\t                    marks[options.name] = axisMark;\n\t                }\n\t                this.bindEvents();\n\t            }\n\t            AxisMarks.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, newData);\n\t                });\n\t                this.chartState.onDestroy(function() {\n\t                    return _this.ee.removeAllListeners();\n\t                });\n\t            };\n\t            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n\t                if (!newData) return;\n\t                var startVal = newData[0].xVal;\n\t                var endVal = newData[newData.length - 1].xVal;\n\t                var marks = this.items;\n\t                for (var markName in marks) {\n\t                    var mark = marks[markName];\n\t                    var markVal = mark.options.value;\n\t                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n\t                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n\t                }\n\t            };\n\t            AxisMarks.prototype.getItems = function() {\n\t                return this.items;\n\t            };\n\t            AxisMarks.prototype.getItem = function(markName) {\n\t                return this.items[markName];\n\t            };\n\t            return AxisMarks;\n\t        }();\n\t        exports.AxisMarks = AxisMarks;\n\t        var AxisMark = function() {\n\t            function AxisMark(chartState, axisType, options) {\n\t                this.renderOnTrendsChange = false;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.options = options;\n\t                this.axisType = axisType;\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            AxisMark.prototype.bindEvents = function() {};\n\t            AxisMark.prototype.setOptions = function(newOptions) {\n\t                var value = this.options.value;\n\t                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n\t                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisMark.prototype.getDisplayedVal = function() {\n\t                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n\t                return String(displayedValue !== void 0 ? displayedValue : value);\n\t            };\n\t            AxisMark.prototype.onMarkCrossed = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"markCrossed\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"markCrossed\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"valueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"valueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n\t                var _this = this;\n\t                this.ee.on(\"onDisplayedValueChange\", cb);\n\t                return function() {\n\t                    _this.ee.off(\"onDisplayedValueChange\", cb);\n\t                };\n\t            };\n\t            AxisMark.typeName = \"simple\";\n\t            return AxisMark;\n\t        }();\n\t        exports.AxisMark = AxisMark;\n\t        var AxisTimeleftMark = function(_super) {\n\t            __extends(AxisTimeleftMark, _super);\n\t            function AxisTimeleftMark() {\n\t                _super.apply(this, arguments);\n\t                this.renderOnTrendsChange = true;\n\t            }\n\t            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n\t                var markVal = this.options.value;\n\t                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n\t                var time = markVal - maxXVal;\n\t                if (time < 0) time = 0;\n\t                return Utils_1.Utils.msToTimeString(time);\n\t            };\n\t            AxisTimeleftMark.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.chartState.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t            };\n\t            AxisTimeleftMark.prototype.onTrendsChange = function() {\n\t                this.ee.emit(\"onDisplayedValueChange\");\n\t            };\n\t            AxisTimeleftMark.typeName = \"timeleft\";\n\t            return AxisTimeleftMark;\n\t        }(AxisMark);\n\t        exports.AxisTimeleftMark = AxisTimeleftMark;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        (function(AXIS_RANGE_TYPE) {\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n\t            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n\t        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n\t        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n\t        (function(AXIS_TYPE) {\n\t            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n\t            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n\t        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n\t        var AXIS_TYPE = exports.AXIS_TYPE;\n\t        (function(AXIS_DATA_TYPE) {\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n\t            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n\t        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n\t        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Mesh = THREE.Mesh;\n\t        var Object3D = THREE.Object3D;\n\t        var Widget_1 = __webpack_require__(17);\n\t        var GridWidget_1 = __webpack_require__(23);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var AxisWidget = function(_super) {\n\t            __extends(AxisWidget, _super);\n\t            function AxisWidget(state) {\n\t                var _this = this;\n\t                _super.call(this, state);\n\t                this.isDestroyed = false;\n\t                this.object3D = new Object3D();\n\t                this.axisXObject = new Object3D();\n\t                this.axisYObject = new Object3D();\n\t                this.object3D.add(this.axisXObject);\n\t                this.object3D.add(this.axisYObject);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }, 1e3);\n\t                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n\t            }\n\t            AxisWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n\t                    _this.onScrollChange(options.scrollX, options.scrollY);\n\t                }), state.screen.onZoomFrame(function(options) {\n\t                    _this.onZoomFrame(options);\n\t                }), state.onDestroy(function() {\n\t                    return _this.onDestroy();\n\t                }), state.onResize(function() {\n\t                    return _this.onResize();\n\t                }));\n\t            };\n\t            AxisWidget.prototype.onDestroy = function() {\n\t                this.isDestroyed = true;\n\t                this.unbindEvents();\n\t            };\n\t            AxisWidget.prototype.onScrollChange = function(x, y) {\n\t                if (y != void 0) {\n\t                    this.axisYObject.position.y = y;\n\t                    this.axisXObject.position.y = y;\n\t                }\n\t                if (x != void 0) {\n\t                    this.axisYObject.position.x = x;\n\t                    this.updateAxisXRequest();\n\t                }\n\t            };\n\t            AxisWidget.prototype.onResize = function() {\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n\t                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n\t            };\n\t            AxisWidget.prototype.setupAxis = function(orientation) {\n\t                var _this = this;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var canvasWidth = 0, canvasHeight = 0;\n\t                if (isXAxis) {\n\t                    this.axisXObject.traverse(function(obj) {\n\t                        return _this.axisXObject.remove(obj);\n\t                    });\n\t                    canvasWidth = visibleWidth * 3;\n\t                    canvasHeight = 50;\n\t                } else {\n\t                    this.axisYObject.traverse(function(obj) {\n\t                        return _this.axisYObject.remove(obj);\n\t                    });\n\t                    canvasWidth = 50;\n\t                    canvasHeight = visibleHeight * 3;\n\t                }\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n\t                if (isXAxis) {\n\t                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisXObject.add(axisMesh);\n\t                } else {\n\t                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n\t                    this.axisYObject.add(axisMesh);\n\t                }\n\t                this.updateAxis(orientation);\n\t            };\n\t            AxisWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisWidget.prototype.updateAxis = function(orientation) {\n\t                if (this.isDestroyed) return;\n\t                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n\t                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n\t                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n\t                var axisOptions;\n\t                var axisMesh;\n\t                var axisGridParams;\n\t                if (isXAxis) {\n\t                    axisMesh = this.axisXObject.children[0];\n\t                    axisOptions = this.chartState.data.xAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n\t                } else {\n\t                    axisMesh = this.axisYObject.children[0];\n\t                    axisOptions = this.chartState.data.yAxis;\n\t                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n\t                }\n\t                var geometry = axisMesh.geometry;\n\t                var canvasWidth = geometry.parameters.width;\n\t                var canvasHeight = geometry.parameters.height;\n\t                var texture = axisMesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\t                if (isXAxis) {\n\t                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n\t                }\n\t                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n\t                var startVal = axisGridParams.start - edgeOffset;\n\t                var endVal = axisGridParams.end + edgeOffset;\n\t                ctx.beginPath();\n\t                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n\t                    var displayedValue = \"\";\n\t                    if (isXAxis) {\n\t                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n\t                        ctx.textAlign = \"center\";\n\t                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n\t                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n\t                        } else {\n\t                            displayedValue = Number(val.toFixed(14)).toString();\n\t                        }\n\t                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n\t                    } else {\n\t                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n\t                        ctx.textAlign = \"right\";\n\t                        displayedValue = Number(val.toFixed(14)).toString();\n\t                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n\t                    }\n\t                    ctx.stroke();\n\t                }\n\t                ctx.stroke();\n\t                ctx.closePath();\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisWidget.prototype.onZoomFrame = function(options) {\n\t                if (options.zoomX) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n\t                }\n\t                if (options.zoomY) {\n\t                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n\t                }\n\t            };\n\t            AxisWidget.getDateStr = function(timestamp, gridParams) {\n\t                var sec = 1e3;\n\t                var min = sec * 60;\n\t                var hour = min * 60;\n\t                var day = hour * 60;\n\t                var step = gridParams.step;\n\t                var d = new Date(timestamp);\n\t                var tf = function(num) {\n\t                    return Utils_1.Utils.toFixed(num, 2);\n\t                };\n\t                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n\t            };\n\t            AxisWidget.widgetName = \"Axis\";\n\t            return AxisWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisWidget = AxisWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Vector3 = THREE.Vector3;\n\t        var Widget_1 = __webpack_require__(17);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var GridWidget = function(_super) {\n\t            __extends(GridWidget, _super);\n\t            function GridWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.isDestroyed = false;\n\t                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n\t                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n\t                this.initGrid();\n\t                this.updateGrid();\n\t            }\n\t            GridWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n\t                    return _this.updateGrid();\n\t                }, 1e3);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return updateGridThrottled();\n\t                }), this.chartState.screen.onZoomFrame(function(options) {\n\t                    updateGridThrottled();\n\t                    _this.onZoomFrame(options);\n\t                }), this.chartState.onDestroy(function() {\n\t                    _this.isDestroyed = true;\n\t                    _this.unbindEvents();\n\t                }), this.chartState.onResize(function() {\n\t                    _this.updateGrid();\n\t                }));\n\t            };\n\t            GridWidget.prototype.initGrid = function() {\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: .1,\n\t                    transparent: true\n\t                });\n\t                var xLinesCount = this.gridSizeH;\n\t                var yLinesCount = this.gridSizeV;\n\t                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t                this.lineSegments.position.setZ(-1);\n\t                this.lineSegments.frustumCulled = false;\n\t            };\n\t            GridWidget.prototype.updateGrid = function() {\n\t                if (this.isDestroyed) return;\n\t                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n\t                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n\t                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n\t                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n\t                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n\t                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n\t                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n\t                var startXVal = axisXGrid.start + gridScrollXVal;\n\t                var startYVal = axisYGrid.start + gridScrollYVal;\n\t                var geometry = this.lineSegments.geometry;\n\t                var vertices = geometry.vertices;\n\t                var lineInd = 0;\n\t                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n\t                    var value = startXVal + i * axisXGrid.step;\n\t                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n\t                    var value = startYVal + i * axisYGrid.step;\n\t                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n\t                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n\t                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n\t                    lineInd++;\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n\t            };\n\t            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n\t                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n\t                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n\t                var chartState = this.chartState;\n\t                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n\t                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n\t                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n\t            };\n\t            GridWidget.prototype.onZoomFrame = function(options) {\n\t                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n\t                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n\t                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n\t            };\n\t            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n\t                var axisRange = axisOptions.range;\n\t                var from = axisRange.from;\n\t                var to = axisRange.to;\n\t                var axisLength = to - from;\n\t                var gridStep = 0;\n\t                var gridStepInPixels = 0;\n\t                var minGridStepInPixels = axisOptions.gridMinSize;\n\t                var axisLengthStr = String(axisLength);\n\t                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n\t                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n\t                var gridStepFound = false;\n\t                var digitPos = 0;\n\t                while (!gridStepFound) {\n\t                    var power = intPartLength - digitPos - 1;\n\t                    var multiplier = Math.pow(10, power) || 1;\n\t                    var dividers = [ 1, 2, 5 ];\n\t                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n\t                        var nextGridStep = multiplier / dividers[dividerInd];\n\t                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n\t                        if (nextGridStepInPixels >= minGridStepInPixels) {\n\t                            gridStep = nextGridStep;\n\t                            gridStepInPixels = nextGridStepInPixels;\n\t                        } else {\n\t                            gridStepFound = true;\n\t                            if (gridStep === 0) {\n\t                                gridStep = nextGridStep;\n\t                                gridStepInPixels = nextGridStepInPixels;\n\t                            }\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (!gridStepFound) digitPos++;\n\t                }\n\t                var gridStart = Math.floor(from / gridStep) * gridStep;\n\t                var gridEnd = Math.floor(to / gridStep) * gridStep;\n\t                return {\n\t                    start: gridStart,\n\t                    end: gridEnd,\n\t                    step: gridStep,\n\t                    stepInPx: gridStepInPixels,\n\t                    length: gridEnd - gridStart,\n\t                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n\t                };\n\t            };\n\t            GridWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            GridWidget.widgetName = \"Grid\";\n\t            return GridWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.GridWidget = GridWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Geometry = THREE.Geometry;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Color_1 = __webpack_require__(26);\n\t        var TrendsGradientWidget = function(_super) {\n\t            __extends(TrendsGradientWidget, _super);\n\t            function TrendsGradientWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsGradientWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendGradient;\n\t            };\n\t            TrendsGradientWidget.widgetName = \"TrendsGradient\";\n\t            return TrendsGradientWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsGradientWidget = TrendsGradientWidget;\n\t        var TrendGradient = function(_super) {\n\t            __extends(TrendGradient, _super);\n\t            function TrendGradient(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.visibleSegmentsCnt = 0;\n\t                this.trend = chartState.trendsManager.getTrend(trendName);\n\t                this.segmentsIds = new Uint16Array(chartState.data.maxVisibleSegments);\n\t                this.initGradient();\n\t                this.updateSegments();\n\t            }\n\t            TrendGradient.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasBackground;\n\t            };\n\t            TrendGradient.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n\t                    _this.updateSegments();\n\t                }));\n\t                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n\t                    _this.updateSegments();\n\t                }));\n\t                this.bindEvent(this.chartState.onZoom(function() {\n\t                    _this.updateSegments();\n\t                }));\n\t            };\n\t            TrendGradient.prototype.getObject3D = function() {\n\t                return this.gradient;\n\t            };\n\t            TrendGradient.prototype.initGradient = function() {\n\t                var geometry = new Geometry();\n\t                for (var i = 0; i < this.segmentsIds.length; i++) {\n\t                    geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\n\t                    var ind = i * 4;\n\t                    geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\n\t                }\n\t                var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\n\t                this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n\t                    color: color.value,\n\t                    transparent: true,\n\t                    opacity: color.a\n\t                }));\n\t                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.gradient.frustumCulled = false;\n\t            };\n\t            TrendGradient.prototype.onZoomFrame = function(options) {\n\t                var state = this.chartState.data;\n\t                var scaleXFactor = state.xAxis.range.scaleFactor;\n\t                var scaleYFactor = state.yAxis.range.scaleFactor;\n\t                var currentScale = this.gradient.scale;\n\t                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t            };\n\t            TrendGradient.prototype.onSegmentsAnimate = function(trendSegmentsManager) {\n\t                var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n\t                for (var i = 0; i < this.visibleSegmentsCnt; i++) {\n\t                    var segmentId = this.segmentsIds[i];\n\t                    if (!animatedSegmentsIds.includes(segmentId)) continue;\n\t                    this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n\t                }\n\t                this.gradient.geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendGradient.prototype.updateSegments = function() {\n\t                var geometry = this.gradient.geometry;\n\t                var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\n\t                var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n\t                this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n\t                var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n\t                if (segmentsToProcessCnt > this.segmentsIds.length) {\n\t                    Utils_1.Utils.error(TrendsGradientWidget.widgetName + \": MAX_SEGMENTS reached\");\n\t                }\n\t                for (var i = 0; i <= segmentsToProcessCnt; i++) {\n\t                    if (segmentInd <= lastDisplayedSegmentInd) {\n\t                        var segment = trendSegments[segmentInd];\n\t                        this.setupSegmentVertices(i, segment.currentAnimationState);\n\t                        this.segmentsIds[i] = segment.id;\n\t                        segmentInd++;\n\t                    } else {\n\t                        this.setupSegmentVertices(i);\n\t                    }\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendGradient.prototype.setupSegmentVertices = function(segmentInd, segmentState) {\n\t                var gradientSegmentInd = segmentInd * 4;\n\t                var vertices = this.gradient.geometry.vertices;\n\t                var topLeft = vertices[gradientSegmentInd];\n\t                var bottomLeft = vertices[gradientSegmentInd + 1];\n\t                var bottomRight = vertices[gradientSegmentInd + 2];\n\t                var topRight = vertices[gradientSegmentInd + 3];\n\t                var screenHeightVal = Math.max(this.chartState.pxToValueByYAxis(this.chartState.data.height), this.chartState.screen.pxToValueByYAxis(this.chartState.data.height));\n\t                if (segmentState) {\n\t                    var startX = this.toLocalX(segmentState.startXVal);\n\t                    var startY = this.toLocalY(segmentState.startYVal);\n\t                    var endX = this.toLocalX(segmentState.endXVal);\n\t                    var endY = this.toLocalY(segmentState.endYVal);\n\t                    topLeft.set(startX, startY, 0);\n\t                    topRight.set(endX, endY, 0);\n\t                    bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n\t                    bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n\t                } else {\n\t                    topLeft.set(0, 0, 0);\n\t                    topRight.set(0, 0, 0);\n\t                    bottomLeft.set(0, 0, 0);\n\t                    bottomRight.set(0, 0, 0);\n\t                }\n\t            };\n\t            TrendGradient.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendGradient.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            return TrendGradient;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendGradient = TrendGradient;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(17);\n\t        var Object3D = THREE.Object3D;\n\t        var TrendsWidget = function(_super) {\n\t            __extends(TrendsWidget, _super);\n\t            function TrendsWidget(state) {\n\t                _super.call(this, state);\n\t                this.widgets = {};\n\t                this.object3D = new Object3D();\n\t                this.onTrendsChange();\n\t            }\n\t            TrendsWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                var state = this.chartState;\n\t                state.onTrendsChange(function() {\n\t                    return _this.onTrendsChange();\n\t                });\n\t                state.onTrendChange(function(trendName, changedOptions, newData) {\n\t                    _this.onTrendChange(trendName, changedOptions, newData);\n\t                });\n\t            };\n\t            TrendsWidget.prototype.onTrendsChange = function() {\n\t                var trendsOptions = this.chartState.data.trends;\n\t                var TrendWidgetClass = this.getTrendWidgetClass();\n\t                for (var trendName in trendsOptions) {\n\t                    var trendOptions = trendsOptions[trendName];\n\t                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n\t                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n\t                        this.createTrendWidget(trendName);\n\t                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n\t                        this.destroyTrendWidget(trendName);\n\t                    }\n\t                }\n\t            };\n\t            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n\t                var widget = this.widgets[trendName];\n\t                if (!widget) return;\n\t                widget.onTrendChange(changedOptions);\n\t                if (newData) {\n\t                    var data = this.chartState.getTrend(trendName).getData();\n\t                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n\t                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n\t                }\n\t            };\n\t            TrendsWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n\t                var WidgetConstructor = this.getTrendWidgetClass();\n\t                var widget = new WidgetConstructor(this.chartState, trendName);\n\t                this.widgets[trendName] = widget;\n\t                var widgetObject = widget.getObject3D();\n\t                widgetObject.name = trendName;\n\t                this.object3D.add(widget.getObject3D());\n\t            };\n\t            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n\t                this.widgets[trendName].onDestroy();\n\t                delete this.widgets[trendName];\n\t                var widgetObject = this.object3D.getObjectByName(trendName);\n\t                this.object3D.remove(widgetObject);\n\t            };\n\t            return TrendsWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.TrendsWidget = TrendsWidget;\n\t        var TrendWidget = function() {\n\t            function TrendWidget(chartState, trendName) {\n\t                this.chartState = chartState;\n\t                this.trendName = trendName;\n\t                this.unsubscribers = [];\n\t                this.trend = chartState.trendsManager.getTrend(trendName);\n\t                this.chartState = chartState;\n\t                this.bindEvents();\n\t            }\n\t            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled;\n\t            };\n\t            TrendWidget.prototype.appendData = function(newData) {};\n\t            TrendWidget.prototype.prependData = function(newData) {};\n\t            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n\t            TrendWidget.prototype.onDestroy = function() {\n\t                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n\t                    var unsubscriber = _a[_i];\n\t                    unsubscriber();\n\t                }\n\t            };\n\t            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n\t            TrendWidget.prototype.onZoomFrame = function(options) {};\n\t            TrendWidget.prototype.onTransformationFrame = function(options) {};\n\t            TrendWidget.prototype.onZoom = function() {};\n\t            TrendWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function(trendPoints) {\n\t                    return _this.onSegmentsAnimate(trendPoints);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n\t                    return _this.onTransformationFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n\t                    return _this.onZoomFrame(options);\n\t                }));\n\t                this.bindEvent(this.chartState.onZoom(function() {\n\t                    return _this.onZoom();\n\t                }));\n\t            };\n\t            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n\t                this.unsubscribers.push(unsubscriber);\n\t            };\n\t            return TrendWidget;\n\t        }();\n\t        exports.TrendWidget = TrendWidget;\n\t    }, function(module, exports) {\n\t        \"use strict\";\n\t        var ChartColor = function() {\n\t            function ChartColor(color) {\n\t                this.set(color);\n\t            }\n\t            /**!\r\n\t\t     * @preserve $.parseColor\r\n\t\t     * Copyright 2011 THEtheChad Elliott\r\n\t\t     * Released under the MIT and GPL licenses.\r\n\t\t     */\n\t            ChartColor.parseColor = function(color) {\n\t                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n\t                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4] ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by parseColor\");\n\t                isNaN(cache[3]) && (cache[3] = 1);\n\t                return cache;\n\t            };\n\t            ChartColor.prototype.set = function(color) {\n\t                if (typeof color == \"number\") color = \"#\" + color.toString(16);\n\t                var colorStr = color;\n\t                var rgba = ChartColor.parseColor(colorStr);\n\t                this.r = rgba[0];\n\t                this.g = rgba[1];\n\t                this.b = rgba[2];\n\t                this.a = rgba[3];\n\t                this.value = (rgba[0] << 8 * 2) + (rgba[1] << 8) + rgba[2];\n\t                this.hexStr = \"#\" + this.value.toString(16);\n\t                this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\n\t            };\n\t            return ChartColor;\n\t        }();\n\t        exports.ChartColor = ChartColor;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(13);\n\t        var TrendsLoadingWidget = function(_super) {\n\t            __extends(TrendsLoadingWidget, _super);\n\t            function TrendsLoadingWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLoading;\n\t            };\n\t            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n\t            return TrendsLoadingWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n\t        var TrendLoading = function(_super) {\n\t            __extends(TrendLoading, _super);\n\t            function TrendLoading(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.isActive = false;\n\t                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendLoading.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                this.deactivate();\n\t            }\n\t            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n\t                return trendOptions.enabled && chartState.data.animations.enabled;\n\t            };\n\t            TrendLoading.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendLoading.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.onPrependRequest(function() {\n\t                    return _this.activate();\n\t                }));\n\t            };\n\t            TrendLoading.prototype.prependData = function() {\n\t                this.deactivate();\n\t            };\n\t            TrendLoading.prototype.activate = function() {\n\t                var mesh = this.mesh;\n\t                mesh.material.opacity = 1;\n\t                mesh.rotation.z = 0;\n\t                var animation = TweenLite.to(this.mesh.rotation, .5, {\n\t                    z: Math.PI * 2\n\t                });\n\t                animation.eventCallback(\"onComplete\", function() {\n\t                    animation.restart();\n\t                });\n\t                this.animation = animation;\n\t                this.isActive = true;\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.deactivate = function() {\n\t                this.animation && this.animation.kill();\n\t                this.mesh.material.opacity = 0;\n\t                this.isActive = false;\n\t            };\n\t            TrendLoading.createTexture = function() {\n\t                var h = 64, w = 64;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                    ctx.lineWidth = 5;\n\t                    var center = h / 2;\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n\t                    ctx.stroke();\n\t                    ctx.beginPath();\n\t                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n\t                    ctx.stroke();\n\t                });\n\t            };\n\t            TrendLoading.prototype.onZoomFrame = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendLoading.prototype.updatePosition = function() {\n\t                if (!this.isActive) return;\n\t                var trend = this.trend;\n\t                var segment = trend.segmentsManager.getStartSegment();\n\t                var x, y;\n\t                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    x = segment.currentAnimationState.startXVal;\n\t                    y = segment.currentAnimationState.startYVal;\n\t                } else {\n\t                    x = segment.currentAnimationState.xVal - segment.maxLength;\n\t                    y = segment.currentAnimationState.yVal;\n\t                }\n\t                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n\t                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n\t            };\n\t            return TrendLoading;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLoading = TrendLoading;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(17);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Line = THREE.Line;\n\t        var Mesh = THREE.Mesh;\n\t        var interfaces_1 = __webpack_require__(21);\n\t        var Color_1 = __webpack_require__(26);\n\t        var AxisMarksWidget = function(_super) {\n\t            __extends(AxisMarksWidget, _super);\n\t            function AxisMarksWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                this.axisMarksWidgets = [];\n\t                this.object3D = new Object3D();\n\t                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n\t                var items = xAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t                items = yAxisMarks.getItems();\n\t                for (var markName in items) {\n\t                    this.createAxisMark(items[markName]);\n\t                }\n\t            }\n\t            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n\t                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n\t                this.axisMarksWidgets.push(axisMarkWidget);\n\t                this.object3D.add(axisMarkWidget.getObject3D());\n\t            };\n\t            AxisMarksWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n\t                    return _this.updateMarksPositions();\n\t                }), this.chartState.onResize(function() {\n\t                    return _this.updateMarksPositions();\n\t                }));\n\t            };\n\t            AxisMarksWidget.prototype.updateMarksPositions = function() {\n\t                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n\t                    var widget = _a[_i];\n\t                    widget.updatePosition();\n\t                }\n\t            };\n\t            AxisMarksWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarksWidget.widgetName = \"AxisMarks\";\n\t            return AxisMarksWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.AxisMarksWidget = AxisMarksWidget;\n\t        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n\t            var axisMark = axisMarkWidget.axisMark;\n\t            ctx.fillStyle = axisMark.options.lineColor;\n\t            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n\t            var xCoord = 15;\n\t            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n\t                ctx.textAlign = \"end\";\n\t                xCoord = axisMarkWidget.indicatorWidth;\n\t            }\n\t            ctx.fillText(axisMark.options.title, xCoord, 20);\n\t            if (!axisMark.options.showValue) return;\n\t            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n\t            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n\t        };\n\t        var INDICATOR_POS_Z = .1;\n\t        var AxisMarkWidget = function() {\n\t            function AxisMarkWidget(chartState, axisMark) {\n\t                this.indicatorWidth = 128;\n\t                this.indicatorHeight = 64;\n\t                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n\t                this.chartState = chartState;\n\t                this.axisMark = axisMark;\n\t                this.axisType = axisMark.axisType;\n\t                this.frameValue = axisMark.options.value;\n\t                this.object3D = new Object3D();\n\t                this.object3D.position.setZ(-.1);\n\t                this.line = this.createLine();\n\t                this.object3D.add(this.line);\n\t                this.indicator = this.createIndicator();\n\t                this.object3D.add(this.indicator);\n\t                this.renderIndicator();\n\t                this.updatePosition();\n\t                this.bindEvents();\n\t            }\n\t            AxisMarkWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            AxisMarkWidget.prototype.createLine = function() {\n\t                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n\t                var lineGeometry = new Geometry();\n\t                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n\t                return new Line(lineGeometry, new LineBasicMaterial({\n\t                    color: new Color_1.ChartColor(lineColor).value,\n\t                    linewidth: lineWidth\n\t                }));\n\t            };\n\t            AxisMarkWidget.prototype.createIndicator = function() {\n\t                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"10px Arial\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n\t            };\n\t            AxisMarkWidget.prototype.renderIndicator = function() {\n\t                var texture = this.indicator.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n\t                texture.needsUpdate = true;\n\t            };\n\t            AxisMarkWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                this.axisMark.onDisplayedValueChange(function() {\n\t                    return _this.renderIndicator();\n\t                });\n\t                this.axisMark.onValueChange(function() {\n\t                    return _this.onValueChangeHandler();\n\t                });\n\t            };\n\t            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n\t                var _this = this;\n\t                if (this.moveAnimation) this.moveAnimation.kill();\n\t                var animations = this.chartState.data.animations;\n\t                var targetValue = this.axisMark.options.value;\n\t                var cb = function() {\n\t                    _this.updatePosition();\n\t                };\n\t                if (animations.enabled) {\n\t                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n\t                        frameValue: targetValue,\n\t                        ease: animations.trendChangeEase\n\t                    });\n\t                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n\t                } else {\n\t                    this.frameValue = targetValue;\n\t                    cb();\n\t                }\n\t            };\n\t            AxisMarkWidget.prototype.updatePosition = function() {\n\t                var chartState = this.chartState;\n\t                var screen = chartState.screen;\n\t                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n\t                var lineGeometry = this.line.geometry;\n\t                var hasStickMode = this.axisMark.options.stickToEdges;\n\t                var _a = this.chartState.data, width = _a.width, height = _a.height;\n\t                if (isXAxis) {\n\t                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n\t                    this.object3D.position.y = screen.getBottom();\n\t                    lineGeometry.vertices[1].setY(height);\n\t                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n\t                } else {\n\t                    var val = this.frameValue;\n\t                    var bottomVal = screen.getBottomVal();\n\t                    var topVal = screen.getTopVal();\n\t                    var needToStickOnTop = hasStickMode && val > topVal;\n\t                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n\t                    var centerYVal = screen.getCenterYVal();\n\t                    this.object3D.position.x = screen.getLeft();\n\t                    if (needToStickOnTop) {\n\t                        this.object3D.position.y = screen.getTop();\n\t                    } else if (needToStickOnBottom) {\n\t                        this.object3D.position.y = screen.getBottom();\n\t                    } else {\n\t                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n\t                    }\n\t                    lineGeometry.vertices[1].setX(width);\n\t                    var indicatorPosY = val > centerYVal ? -35 : 10;\n\t                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n\t                }\n\t                lineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            AxisMarkWidget.typeName = \"simple\";\n\t            return AxisMarkWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Widget_1 = __webpack_require__(17);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Vector3 = THREE.Vector3;\n\t        var BorderWidget = function(_super) {\n\t            __extends(BorderWidget, _super);\n\t            function BorderWidget(chartState) {\n\t                _super.call(this, chartState);\n\t                var _a = chartState.data, width = _a.width, height = _a.height;\n\t                var geometry = new THREE.Geometry();\n\t                var material = new THREE.LineBasicMaterial({\n\t                    linewidth: 1,\n\t                    opacity: 0,\n\t                    transparent: true\n\t                });\n\t                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n\t                this.lineSegments = new LineSegments(geometry, material);\n\t            }\n\t            BorderWidget.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            BorderWidget.widgetName = \"Border\";\n\t            return BorderWidget;\n\t        }(Widget_1.ChartWidget);\n\t        exports.BorderWidget = BorderWidget;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Color_1 = __webpack_require__(26);\n\t        var CANVAS_WIDTH = 128;\n\t        var CANVAS_HEIGHT = 64;\n\t        var OFFSET_X = 15;\n\t        var TrendsIndicatorWidget = function(_super) {\n\t            __extends(TrendsIndicatorWidget, _super);\n\t            function TrendsIndicatorWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendIndicator;\n\t            };\n\t            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n\t            return TrendsIndicatorWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n\t        var TrendIndicator = function(_super) {\n\t            __extends(TrendIndicator, _super);\n\t            function TrendIndicator(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                this.onTrendChange();\n\t            }\n\t            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasIndicator;\n\t            };\n\t            TrendIndicator.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendIndicator.prototype.onTrendChange = function() {\n\t                var trendData = this.trend.getData();\n\t                var lastItem = trendData[trendData.length - 1];\n\t                var texture = this.mesh.material.map;\n\t                var ctx = texture.image.getContext(\"2d\");\n\t                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n\t                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n\t                texture.needsUpdate = true;\n\t            };\n\t            TrendIndicator.prototype.initObject = function() {\n\t                var color = new Color_1.ChartColor(this.trend.getOptions().lineColor);\n\t                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.font = \"15px Arial\";\n\t                    ctx.fillStyle = color.rgbaStr;\n\t                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n\t                });\n\t                var material = new THREE.MeshBasicMaterial({\n\t                    map: texture,\n\t                    side: THREE.FrontSide\n\t                });\n\t                material.transparent = true;\n\t                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n\t            };\n\t            TrendIndicator.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segmentsManager.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n\t                this.segment = segments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendIndicator.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n\t                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x + OFFSET_X;\n\t                var y = endPointVector.y;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n\t                if (indicatorIsOutOfScreen) {\n\t                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n\t                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n\t                    y -= 25;\n\t                }\n\t                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n\t            };\n\t            return TrendIndicator;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendIndicator = TrendIndicator;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Geometry = THREE.Geometry;\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Vector3 = THREE.Vector3;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var LineSegments = THREE.LineSegments;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var Utils_1 = __webpack_require__(14);\n\t        var TrendsLineWidget = function(_super) {\n\t            __extends(TrendsLineWidget, _super);\n\t            function TrendsLineWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendLine;\n\t            };\n\t            TrendsLineWidget.widgetName = \"TrendsLine\";\n\t            return TrendsLineWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsLineWidget = TrendsLineWidget;\n\t        var TrendLine = function(_super) {\n\t            __extends(TrendLine, _super);\n\t            function TrendLine(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeSegmentsInds = [];\n\t                this.displayedSegments = {};\n\t                var options = this.trend.getOptions();\n\t                this.material = new LineBasicMaterial({\n\t                    color: options.lineColor,\n\t                    linewidth: options.lineWidth\n\t                });\n\t                this.initLine();\n\t            }\n\t            TrendLine.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendLine.prototype.getObject3D = function() {\n\t                return this.lineSegments;\n\t            };\n\t            TrendLine.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n\t                    _this.destroySegments();\n\t                    _this.setupSegments();\n\t                }));\n\t                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n\t                    _this.setupSegments();\n\t                }));\n\t            };\n\t            TrendLine.prototype.initLine = function() {\n\t                var geometry = new Geometry();\n\t                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.lineSegments = new LineSegments(geometry, this.material);\n\t                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.lineSegments.frustumCulled = false;\n\t                for (var i = 0; i < this.chartState.data.maxVisibleSegments; i++) {\n\t                    geometry.vertices.push(new Vector3(), new Vector3());\n\t                    this.freeSegmentsInds.push(i);\n\t                }\n\t                this.vertices = geometry.vertices;\n\t                this.setupSegments();\n\t            };\n\t            TrendLine.prototype.setupSegments = function() {\n\t                var geometry = this.lineSegments.geometry;\n\t                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.displayedSegments) {\n\t                    var lineSegment = this.displayedSegments[segmentId];\n\t                    var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupSegment(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                if (!lineSegment) {\n\t                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n\t                    var ind = this.freeSegmentsInds.pop();\n\t                    lineSegment = this.displayedSegments[segmentId] = {\n\t                        segmentId: segmentId,\n\t                        ind: ind\n\t                    };\n\t                }\n\t                var segmentInd = lineSegment.ind;\n\t                var lineStartVertex = this.vertices[segmentInd * 2];\n\t                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n\t                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n\t                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n\t            };\n\t            TrendLine.prototype.destroySegments = function() {\n\t                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n\t            };\n\t            TrendLine.prototype.destroySegment = function(segmentId) {\n\t                var lineSegment = this.displayedSegments[segmentId];\n\t                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n\t                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n\t                lineStartVertex.set(0, 0, 0);\n\t                lineEndVertex.set(0, 0, 0);\n\t                delete this.displayedSegments[segmentId];\n\t                this.freeSegmentsInds.push(lineSegment.ind);\n\t            };\n\t            TrendLine.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.lineSegments.scale;\n\t                var state = this.chartState.data;\n\t                var scaleXFactor = state.xAxis.range.scaleFactor;\n\t                var scaleYFactor = state.yAxis.range.scaleFactor;\n\t                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n\t            };\n\t            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                var geometry = this.lineSegments.geometry;\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.displayedSegments[segmentId]) continue;\n\t                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n\t                }\n\t                geometry.verticesNeedUpdate = true;\n\t            };\n\t            TrendLine.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendLine.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendLine;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendLine = TrendLine;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Object3D = THREE.Object3D;\n\t        var Geometry = THREE.Geometry;\n\t        var Vector3 = THREE.Vector3;\n\t        var Mesh = THREE.Mesh;\n\t        var Line = THREE.Line;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var PlaneGeometry = THREE.PlaneGeometry;\n\t        var Trend_1 = __webpack_require__(13);\n\t        var LineBasicMaterial = THREE.LineBasicMaterial;\n\t        var Utils_1 = __webpack_require__(14);\n\t        var RISE_COLOR = 2927680;\n\t        var FALL_COLOR = 15619379;\n\t        var MARGIN_PERCENT = .3;\n\t        var MAX_CANDLES = 100;\n\t        var TrendsCandlesWidget = function(_super) {\n\t            __extends(TrendsCandlesWidget, _super);\n\t            function TrendsCandlesWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendCandlesWidget;\n\t            };\n\t            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n\t            return TrendsCandlesWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n\t        var TrendCandlesWidget = function(_super) {\n\t            __extends(TrendCandlesWidget, _super);\n\t            function TrendCandlesWidget(chartState, trendName) {\n\t                _super.call(this, chartState, trendName);\n\t                this.freeCandlesInds = [];\n\t                this.candlesPool = [];\n\t                this.candles = {};\n\t                this.initObject();\n\t            }\n\t            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n\t            };\n\t            TrendCandlesWidget.prototype.getObject3D = function() {\n\t                return this.object3D;\n\t            };\n\t            TrendCandlesWidget.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n\t                    _this.destroyCandles();\n\t                    _this.setupCandles();\n\t                }));\n\t                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n\t                    _this.setupCandles();\n\t                }));\n\t            };\n\t            TrendCandlesWidget.prototype.initObject = function() {\n\t                var stateData = this.chartState.data;\n\t                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n\t                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n\t                this.scaleXFactor = scaleXFactor;\n\t                this.scaleYFactor = scaleYFactor;\n\t                this.object3D = new Object3D();\n\t                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n\t                this.object3D.frustumCulled = false;\n\t                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n\t                this.setupCandles();\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandles = function() {\n\t                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n\t                for (var segmentId in this.candles) {\n\t                    var segment_1 = this.candles[segmentId].segment;\n\t                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n\t                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n\t                }\n\t                var segment = firstDisplayedSegment;\n\t                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n\t                    this.setupCandle(segment.id, segment.currentAnimationState);\n\t                    segment = segment.getNext();\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandles = function() {\n\t                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n\t            };\n\t            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n\t                var candle = this.candles[segmentId];\n\t                this.object3D.remove(candle.getObject3D());\n\t                delete this.candles[segmentId];\n\t            };\n\t            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n\t                var currentScale = this.object3D.scale;\n\t                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n\t                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n\t            };\n\t            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n\t                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n\t                    var segmentId = _a[_i];\n\t                    if (!this.candles[segmentId]) continue;\n\t                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n\t                    this.setupCandle(segmentId, segmentState);\n\t                }\n\t            };\n\t            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n\t                var candleInd = candleId % MAX_CANDLES;\n\t                var candle = this.candlesPool[candleInd];\n\t                if (!candle) {\n\t                    candle = this.candlesPool[candleInd] = new CandleWidget();\n\t                }\n\t                if (!this.candles[candleId]) {\n\t                    this.candles[candleId] = candle;\n\t                    this.object3D.add(candle.getObject3D());\n\t                }\n\t                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n\t                candle.setSegment(segmentState);\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n\t                return xVal - this.chartState.data.xAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n\t                return yVal - this.chartState.data.yAxis.range.zeroVal;\n\t            };\n\t            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n\t                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n\t            };\n\t            return TrendCandlesWidget;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendCandlesWidget = TrendCandlesWidget;\n\t        var CandleWidget = function() {\n\t            function CandleWidget() {\n\t                this.initObject();\n\t            }\n\t            CandleWidget.prototype.getObject3D = function() {\n\t                return this.rect;\n\t            };\n\t            CandleWidget.prototype.setSegment = function(segment) {\n\t                this.segment = segment;\n\t                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n\t                var geometry = this.rect.geometry;\n\t                var material = this.rect.material;\n\t                var width = segment.endXVal - segment.startXVal;\n\t                width -= width * MARGIN_PERCENT;\n\t                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n\t                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n\t                leftTop.set(-width / 2, height / 2, 0);\n\t                rightTop.set(width / 2, height / 2, 0);\n\t                leftBottom.set(-width / 2, -height / 2, 0);\n\t                rightBottom.set(width / 2, -height / 2, 0);\n\t                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n\t                    leftBottom.setY(leftBottom.y + 1);\n\t                    rightBottom.setY(rightBottom.y + 1);\n\t                }\n\t                material.color.set(color);\n\t                geometry.verticesNeedUpdate = true;\n\t                var vLineGeometry = this.vLine.geometry;\n\t                var vLineMaterial = this.vLine.material;\n\t                var lineTop = segment.maxYVal - segment.yVal;\n\t                var lineBottom = segment.minYVal - segment.yVal;\n\t                vLineGeometry.vertices[0].set(0, lineTop, 0);\n\t                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n\t                vLineMaterial.color.set(color);\n\t                vLineGeometry.verticesNeedUpdate = true;\n\t                var hLineGeometry = this.hLine.geometry;\n\t                var hLineMaterial = this.hLine.material;\n\t                var lineLeft = -width / 2;\n\t                var lineRight = width / 2;\n\t                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n\t                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n\t                hLineMaterial.color.set(color);\n\t                hLineGeometry.verticesNeedUpdate = true;\n\t            };\n\t            CandleWidget.prototype.initObject = function() {\n\t                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n\t                var vLineGeometry = new Geometry();\n\t                var hLineGeometry = new Geometry();\n\t                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n\t                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n\t                    linewidth: 1\n\t                }));\n\t                this.rect.add(this.vLine);\n\t                this.rect.add(this.hLine);\n\t            };\n\t            return CandleWidget;\n\t        }();\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var __extends = this && this.__extends || function(d, b) {\n\t            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t            function __() {\n\t                this.constructor = d;\n\t            }\n\t            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t        };\n\t        var Utils_1 = __webpack_require__(14);\n\t        var Mesh = THREE.Mesh;\n\t        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n\t        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n\t        var TrendsWidget_1 = __webpack_require__(25);\n\t        var Trend_1 = __webpack_require__(13);\n\t        var TrendsBeaconWidget = function(_super) {\n\t            __extends(TrendsBeaconWidget, _super);\n\t            function TrendsBeaconWidget() {\n\t                _super.apply(this, arguments);\n\t            }\n\t            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n\t                return TrendBeacon;\n\t            };\n\t            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n\t            return TrendsBeaconWidget;\n\t        }(TrendsWidget_1.TrendsWidget);\n\t        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n\t        var TrendBeacon = function(_super) {\n\t            __extends(TrendBeacon, _super);\n\t            function TrendBeacon(state, trendName) {\n\t                _super.call(this, state, trendName);\n\t                this.initObject();\n\t                if (state.data.animations.enabled) {\n\t                    this.animate();\n\t                }\n\t                this.updatePosition();\n\t            }\n\t            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n\t                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n\t            };\n\t            TrendBeacon.prototype.getObject3D = function() {\n\t                return this.mesh;\n\t            };\n\t            TrendBeacon.prototype.onTrendChange = function() {\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.bindEvents = function() {\n\t                var _this = this;\n\t                _super.prototype.bindEvents.call(this);\n\t                this.bindEvent(this.chartState.onScroll(function() {\n\t                    return _this.updatePosition();\n\t                }));\n\t                this.bindEvent(this.chartState.onChange(function(changedProps) {\n\t                    return _this.onStateChange(changedProps);\n\t                }));\n\t                this.bindEvent(this.chartState.onDestroy(function() {\n\t                    return _this.stopAnimation();\n\t                }));\n\t            };\n\t            TrendBeacon.prototype.initObject = function() {\n\t                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture(),\n\t                    transparent: true\n\t                }));\n\t                light.scale.set(.2, .2, 1);\n\t                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n\t                    map: TrendBeacon.createTexture()\n\t                })));\n\t                this.segment = this.trend.segmentsManager.getEndSegment();\n\t            };\n\t            TrendBeacon.prototype.animate = function() {\n\t                var _this = this;\n\t                this.animated = true;\n\t                var object = this.mesh;\n\t                var animationObject = {\n\t                    scale: object.scale.x,\n\t                    opacity: object.material.opacity\n\t                };\n\t                this.mesh.scale.set(.1, .1, 1);\n\t                setTimeout(function() {\n\t                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n\t                        scale: 1,\n\t                        opacity: 0\n\t                    });\n\t                    animation.eventCallback(\"onUpdate\", function() {\n\t                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n\t                        object.material.opacity = animationObject.opacity;\n\t                    }).eventCallback(\"onComplete\", function() {\n\t                        _this.animation && animation.restart();\n\t                    });\n\t                }, 500);\n\t            };\n\t            TrendBeacon.prototype.stopAnimation = function() {\n\t                this.animated = false;\n\t                this.animation && this.animation.kill();\n\t                this.animation = null;\n\t            };\n\t            TrendBeacon.createTexture = function() {\n\t                var h = 32, w = 32;\n\t                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n\t                    ctx.beginPath();\n\t                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n\t                    ctx.fillStyle = \"white\";\n\t                    ctx.fill();\n\t                });\n\t            };\n\t            TrendBeacon.prototype.onTransformationFrame = function() {\n\t                this.segment = this.trend.segmentsManager.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n\t                this.segment = trendsSegments.getEndSegment();\n\t                this.updatePosition();\n\t            };\n\t            TrendBeacon.prototype.onStateChange = function(changedProps) {\n\t                if (!changedProps.animations) return;\n\t                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n\t                if (changedProps.animations.enabled) {\n\t                    this.animate();\n\t                } else {\n\t                    this.stopAnimation();\n\t                }\n\t            };\n\t            TrendBeacon.prototype.updatePosition = function() {\n\t                var state = this.chartState;\n\t                var xVal, yVal;\n\t                var currentAnimationState = this.segment.currentAnimationState;\n\t                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n\t                    xVal = currentAnimationState.endXVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                } else {\n\t                    xVal = currentAnimationState.xVal;\n\t                    yVal = currentAnimationState.endYVal;\n\t                }\n\t                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n\t                var screenWidth = state.data.width;\n\t                var x = endPointVector.x;\n\t                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n\t                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n\t                this.mesh.position.set(x, endPointVector.y, .1);\n\t            };\n\t            return TrendBeacon;\n\t        }(TrendsWidget_1.TrendWidget);\n\t        exports.TrendBeacon = TrendBeacon;\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        function __export(m) {\n\t            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n\t        }\n\t        __export(__webpack_require__(3));\n\t    }, function(module, exports, __webpack_require__) {\n\t        \"use strict\";\n\t        var Utils_1 = __webpack_require__(14);\n\t        var EventEmmiter_1 = __webpack_require__(16);\n\t        exports.DEFAULT_CONFIG = {\n\t            installPluginWidgets: true\n\t        };\n\t        var ChartPlugin = function() {\n\t            function ChartPlugin(options, config) {\n\t                if (config === void 0) {\n\t                    config = {};\n\t                }\n\t                this.unsubscribers = [];\n\t                this.initialState = options;\n\t                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n\t                this.name = this.constructor.NAME;\n\t                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n\t            }\n\t            ChartPlugin.prototype.setupChartState = function(chartState) {\n\t                var _this = this;\n\t                this.chartState = chartState;\n\t                this.ee = new EventEmmiter_1.EventEmitter();\n\t                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n\t                    return _this.onInitialStateAppliedHandler(initialState);\n\t                }), this.chartState.onReady(function() {\n\t                    return _this.onChartReadyHandler();\n\t                }), this.chartState.onDestroy(function() {\n\t                    return _this.onDestroyHandler();\n\t                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n\t                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n\t                }));\n\t            };\n\t            ChartPlugin.prototype.getOptions = function() {\n\t                return this.chartState.data.pluginsState[this.name];\n\t            };\n\t            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n\t            ChartPlugin.prototype.onChartReadyHandler = function() {};\n\t            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n\t            ChartPlugin.prototype.onDestroyHandler = function() {\n\t                this.ee.removeAllListeners();\n\t            };\n\t            ChartPlugin.prototype.bindEvent = function() {\n\t                var args = [];\n\t                for (var _i = 0; _i < arguments.length; _i++) {\n\t                    args[_i - 0] = arguments[_i];\n\t                }\n\t                var unsubscribers = [];\n\t                if (!Array.isArray(args[0])) {\n\t                    unsubscribers.push(args[0]);\n\t                } else {\n\t                    unsubscribers.push.apply(unsubscribers, args);\n\t                }\n\t                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n\t                var _a;\n\t            };\n\t            ChartPlugin.prototype.unbindEvents = function() {\n\t                this.unsubscribers.forEach(function(unsubscriber) {\n\t                    return unsubscriber();\n\t                });\n\t                this.unsubscribers.length = 0;\n\t            };\n\t            ChartPlugin.NAME = \"\";\n\t            ChartPlugin.pluginWidgets = [];\n\t            return ChartPlugin;\n\t        }();\n\t        exports.ChartPlugin = ChartPlugin;\n\t    } ]);\n\t});\n\t\n\t\n\t//# sourceMappingURL=ThreeChart.js.map\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** plugins/src/TrendsBeaconWidget/TrendsBeaconWidget.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap a25ded0145b4fbb3778e\n **/","export * from './TrendsBeaconWidget';\n\n\n/** WEBPACK FOOTER **\n ** ./plugins/src/TrendsBeaconWidget/index.ts\n **/","import Object3D = THREE.Object3D;\nimport Mesh = THREE.Mesh;\nimport PlaneBufferGeometry = THREE.PlaneBufferGeometry;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport Vector3 = THREE.Vector3;\n\nimport {\n\tUtils,\n\tChartState,\n\tIChartState,\n\tTrendsWidget,\n\tTrendWidget,\n\tTrendSegment,\n\tTrendSegmentsManager,\n\tITrendOptions,\n\tTREND_TYPE\n} from 'three-charts';\n\n/**\n * widget adds blinking beacon on trends end\n * activated when trend.hasBeacon = true\n */\nexport class TrendsBeaconWidget extends TrendsWidget<TrendBeacon> {\n\tstatic widgetName = 'TrendsBeacon';\n\n\tprotected getTrendWidgetClass() {\n\t\treturn TrendBeacon;\n\t}\n}\n\nexport class TrendBeacon extends TrendWidget {\n\tprivate mesh: Mesh;\n\tprivate animated: boolean;\n\tprivate segment: TrendSegment;\n\tprivate animation: TweenLite;\n\n\tstatic widgetIsEnabled(trendOptions: ITrendOptions) {\n\t\treturn trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == TREND_TYPE.LINE;\n\t}\n\n\tconstructor(state: ChartState, trendName: string) {\n\t\tsuper(state, trendName);\n\n\t\tthis.initObject();\n\t\tif (state.data.animations.enabled) {\n\t\t\tthis.animate();\n\t\t}\n\t\tthis.updatePosition();\n\t}\n\n\tgetObject3D() {\n\t\treturn this.mesh;\n\t}\n\n\tonTrendChange() {\n\t\tthis.updatePosition();\n\t}\n\n\tprotected bindEvents() {\n\t\tsuper.bindEvents();\n\t\tthis.bindEvent(this.chartState.onScroll(() => this.updatePosition()));\n\t\tthis.bindEvent(this.chartState.onChange(changedProps => this.onStateChange(changedProps)));\n\t\tthis.bindEvent(this.chartState.onDestroy(() => this.stopAnimation()));\n\t}\n\n\tprivate initObject() {\n\n\t\t// add beacon\n\t\tlet light = this.mesh = new Mesh(\n\t\t\tnew PlaneBufferGeometry(32, 32),\n\t\t\tnew MeshBasicMaterial({map: TrendBeacon.createTexture(), transparent: true})\n\t\t);\n\n\n\t\tlight.scale.set(0.2, 0.2, 1);\n\n\t\t// add dot\n\t\tlight.add(new Mesh(\n\t\t\tnew PlaneBufferGeometry(5, 5),\n\t\t\tnew MeshBasicMaterial({map: TrendBeacon.createTexture()})\n\t\t));\n\n\t\tthis.segment = this.trend.segmentsManager.getEndSegment();\n\t}\n\n\tprivate animate() {\n\t\tthis.animated = true;\n\t\tvar object = this.mesh;\n\t\tvar animationObject = {\n\t\t\tscale: object.scale.x,\n\t\t\topacity: object.material.opacity\n\t\t};\n\n\n\t\tthis.mesh.scale.set(0.1, 0.1, 1);\n\n\t\tsetTimeout(() => {\n\t\t\tvar animation = this.animation = TweenLite.to(\n\t\t\t\tanimationObject,\n\t\t\t\t1,\n\t\t\t\t{scale: 1, opacity: 0}\n\t\t\t);\n\t\t\tanimation.eventCallback('onUpdate', () => {\n\t\t\t\tobject.scale.set(animationObject.scale, animationObject.scale, 1);\n\t\t\t\tobject.material.opacity = animationObject.opacity\n\t\t\t}).eventCallback('onComplete', () => {\n\t\t\t\tthis.animation && animation.restart();\n\t\t\t});\n\t\t}, 500);\n\n\t}\n\n\tprivate stopAnimation() {\n\t\tthis.animated = false;\n\t\tthis.animation && this.animation.kill();\n\t\tthis.animation = null;\n\t}\n\n\tprivate static createTexture() {\n\t\tvar h = 32, w = 32;\n\t\treturn Utils.createTexture(h, w, (ctx: CanvasRenderingContext2D) => {\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n\t\t\tctx.fillStyle = 'white';\n\t\t\tctx.fill();\n\t\t});\n\t}\n\n\tprotected onTransformationFrame() {\n\t\tthis.segment = this.trend.segmentsManager.getEndSegment();\n\t\tthis.updatePosition();\n\t}\n\n\tprotected onSegmentsAnimate(trendsSegments: TrendSegmentsManager) {\n\t\tthis.segment = trendsSegments.getEndSegment();\n\t\tthis.updatePosition();\n\t}\n\n\tprivate onStateChange(changedProps: IChartState) {\n\t\tif (!changedProps.animations) return;\n\t\tif (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n\t\tif (changedProps.animations.enabled) {\n\t\t\tthis.animate();\n\t\t} else {\n\t\t\tthis.stopAnimation();\n\t\t}\n\t}\n\n\tprivate updatePosition() {\n\t\tvar state = this.chartState;\n\t\tvar xVal: number, yVal: number;\n\t\tvar currentAnimationState = this.segment.currentAnimationState;\n\t\tif (this.trend.getOptions().type == TREND_TYPE.LINE) {\n\t\t\txVal = currentAnimationState.endXVal;\n\t\t\tyVal = currentAnimationState.endYVal;\n\t\t} else {\n\t\t\txVal = currentAnimationState.xVal;\n\t\t\tyVal = currentAnimationState.endYVal;\n\t\t}\n\t\tvar endPointVector = state.screen.getPointOnChart(xVal, yVal);\n\t\tvar screenWidth = state.data.width;\n\t\tvar x = endPointVector.x;\n\t\tvar screenX = state.screen.getScreenXByPoint(endPointVector.x);\n\t\tif (screenX < 0) x = state.screen.getPointByScreenX(0);\n\t\tif (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n\t\tthis.mesh.position.set(x, endPointVector.y, 0.1);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./plugins/src/TrendsBeaconWidget/TrendsBeaconWidget.ts\n **/","module.exports = require(\"./ThreeChart\")\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-charts/build/index.js\n ** module id = 2\n ** module chunks = 0 2 3\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n    if (typeof exports === \"object\" && typeof module === \"object\") module.exports = factory(); else if (typeof define === \"function\" && define.amd) define([], factory); else if (typeof exports === \"object\") exports[\"THREE_CHARTS\"] = factory(); else root[\"THREE_CHARTS\"] = factory();\n})(this, function() {\n    return function(modules) {\n        var installedModules = {};\n        function __webpack_require__(moduleId) {\n            if (installedModules[moduleId]) return installedModules[moduleId].exports;\n            var module = installedModules[moduleId] = {\n                exports: {},\n                id: moduleId,\n                loaded: false\n            };\n            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n            module.loaded = true;\n            return module.exports;\n        }\n        __webpack_require__.m = modules;\n        __webpack_require__.c = installedModules;\n        __webpack_require__.p = \"\";\n        return __webpack_require__(0);\n    }([ function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(1));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(2));\n        __export(__webpack_require__(21));\n        __export(__webpack_require__(20));\n        __export(__webpack_require__(19));\n        __export(__webpack_require__(12));\n        __export(__webpack_require__(13));\n        __export(__webpack_require__(15));\n        __export(__webpack_require__(18));\n        __export(__webpack_require__(14));\n        __export(__webpack_require__(17));\n        __export(__webpack_require__(35));\n        __export(__webpack_require__(25));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        __webpack_require__(3);\n        var PerspectiveCamera = THREE.PerspectiveCamera;\n        var State_1 = __webpack_require__(12);\n        var Utils_1 = __webpack_require__(14);\n        var AxisWidget_1 = __webpack_require__(22);\n        var GridWidget_1 = __webpack_require__(23);\n        var TrendsGradientWidget_1 = __webpack_require__(24);\n        var TrendsLoadingWidget_1 = __webpack_require__(27);\n        var AxisMarksWidget_1 = __webpack_require__(28);\n        var BorderWidget_1 = __webpack_require__(29);\n        var TrendsIndicatorWidget_1 = __webpack_require__(30);\n        var TrendsLineWidget_1 = __webpack_require__(31);\n        var TrendsCandleWidget_1 = __webpack_require__(32);\n        var TrendsBeaconWidget_1 = __webpack_require__(33);\n        var deps_1 = __webpack_require__(34);\n        var Chart = function() {\n            function Chart(state, $container, plugins) {\n                var _this = this;\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.widgets = [];\n                if (!THREE || !THREE.REVISION) Utils_1.Utils.error(\"three.js not found\");\n                if (!$container) {\n                    Utils_1.Utils.error(\"$el must be set\");\n                }\n                var style = getComputedStyle($container);\n                state.width = parseInt(style.width);\n                state.height = parseInt(style.height);\n                this.state = new State_1.ChartState(state, Chart.installedWidgets, plugins);\n                this.zoomThrottled = Utils_1.Utils.throttle(function(zoomValue, origin) {\n                    return _this.zoom(zoomValue, origin);\n                }, 200);\n                this.$container = $container;\n                this.init($container);\n            }\n            Chart.installWidget = function(Widget) {\n                if (!Widget.widgetName) {\n                    Utils_1.Utils.error(\"unnamed widget\");\n                }\n                this.installedWidgets[Widget.widgetName] = Widget;\n            };\n            Chart.prototype.init = function($container) {\n                var state = this.state;\n                var _a = state.data, w = _a.width, h = _a.height, showStats = _a.showStats, autoRender = _a.autoRender;\n                this.scene = new THREE.Scene();\n                this.isStopped = !autoRender.enabled;\n                var renderer = this.renderer = new Chart.renderers[this.state.data.renderer]({\n                    antialias: true,\n                    alpha: true\n                });\n                renderer.setPixelRatio(Chart.devicePixelRatio);\n                renderer.setClearColor(state.data.backgroundColor, state.data.backgroundOpacity);\n                renderer.setSize(w, h);\n                $container.appendChild(renderer.domElement);\n                this.$el = renderer.domElement;\n                this.$el.style.display = \"block\";\n                if (showStats) {\n                    this.stats = new Stats();\n                    $container.appendChild(this.stats.domElement);\n                }\n                this.setupCamera();\n                var widgetsClasses = this.state.widgetsClasses;\n                for (var widgetName in widgetsClasses) {\n                    var widgetOptions = this.state.data.widgets[widgetName];\n                    if (!widgetOptions.enabled) continue;\n                    var WidgetConstructor = widgetsClasses[widgetName];\n                    var widget = new WidgetConstructor(this.state);\n                    this.scene.add(widget.getObject3D());\n                    this.widgets.push(widget);\n                }\n                this.bindEvents();\n                this.renderLoop();\n            };\n            Chart.prototype.renderLoop = function() {\n                var _this = this;\n                if (this.isDestroyed) return;\n                this.stats && this.stats.begin();\n                this.render();\n                if (this.isStopped) return;\n                var fpsLimit = this.state.data.autoRender.fps;\n                if (fpsLimit) {\n                    var delay_1 = 1e3 / fpsLimit;\n                    setTimeout(function() {\n                        return requestAnimationFrame(function() {\n                            return _this.renderLoop();\n                        });\n                    }, delay_1);\n                } else {\n                    requestAnimationFrame(function() {\n                        return _this.renderLoop();\n                    });\n                }\n                this.stats && this.stats.end();\n            };\n            Chart.prototype.render = function() {\n                this.renderer.render(this.scene, this.camera);\n            };\n            Chart.prototype.stop = function() {\n                this.isStopped = true;\n            };\n            Chart.prototype.run = function() {\n                this.isStopped = false;\n                this.renderLoop();\n            };\n            Chart.prototype.destroy = function() {\n                this.isDestroyed = true;\n                this.stop();\n                this.state.destroy();\n                this.unbindEvents();\n                try {\n                    this.renderer.forceContextLoss();\n                } catch (wtf) {}\n                this.renderer.context = null;\n                this.renderer.domElement = null;\n                this.renderer = null;\n            };\n            Chart.prototype.getState = function() {\n                return this.state.data;\n            };\n            Chart.prototype.getTrend = function(trendName) {\n                return this.state.getTrend(trendName);\n            };\n            Chart.prototype.setState = function(state) {\n                return this.state.setState(state);\n            };\n            Chart.prototype.bindEvents = function() {\n                var _this = this;\n                var $el = this.$el;\n                if (this.state.data.controls.enabled) {\n                    $el.addEventListener(\"mousewheel\", function(ev) {\n                        _this.onMouseWheel(ev);\n                    });\n                    $el.addEventListener(\"mousemove\", function(ev) {\n                        _this.onMouseMove(ev);\n                    });\n                    $el.addEventListener(\"mousedown\", function(ev) {\n                        return _this.onMouseDown(ev);\n                    });\n                    $el.addEventListener(\"mouseup\", function(ev) {\n                        return _this.onMouseUp(ev);\n                    });\n                    $el.addEventListener(\"touchmove\", function(ev) {\n                        _this.onTouchMove(ev);\n                    });\n                    $el.addEventListener(\"touchend\", function(ev) {\n                        _this.onTouchEnd(ev);\n                    });\n                }\n                if (this.state.data.autoResize) {\n                    this.resizeSensor = new deps_1.ResizeSensor(this.$container, function() {\n                        _this.onChartContainerResizeHandler(_this.$container.clientWidth, _this.$container.clientHeight);\n                    });\n                }\n                this.unsubscribers = [ this.state.onTrendsChange(function() {\n                    return _this.autoscroll();\n                }), this.state.screen.onTransformationFrame(function(options) {\n                    return _this.onScreenTransformHandler(options);\n                }), this.state.onResize(function(options) {\n                    return _this.onChartResize();\n                }) ];\n            };\n            Chart.prototype.unbindEvents = function() {\n                try {\n                    this.resizeSensor && this.resizeSensor.detach();\n                } catch (e) {}\n                this.$el.remove();\n                this.unsubscribers.forEach(function(unsubscribe) {\n                    return unsubscribe();\n                });\n            };\n            Chart.prototype.setupCamera = function() {\n                var camSettings = this.state.screen.getCameraSettings();\n                if (!this.camera) {\n                    this.camera = new PerspectiveCamera(camSettings.FOV, camSettings.aspect, camSettings.near, camSettings.far);\n                    this.scene.add(this.camera);\n                } else {\n                    this.camera.fov = camSettings.FOV;\n                    this.camera.aspect = camSettings.aspect;\n                    this.camera.far = camSettings.far;\n                    this.camera.near = camSettings.near;\n                    this.camera.updateProjectionMatrix();\n                }\n                this.camera.position.set(camSettings.x, camSettings.y, camSettings.z);\n                this.cameraInitialPosition = this.camera.position.clone();\n                this.onScreenTransformHandler(this.state.screen.options);\n            };\n            Chart.prototype.onScreenTransformHandler = function(options) {\n                if (options.scrollX != void 0) {\n                    var scrollX_1 = this.cameraInitialPosition.x + options.scrollX;\n                    this.camera.position.setX(scrollX_1);\n                }\n                if (options.scrollY != void 0) {\n                    var scrollY_1 = this.cameraInitialPosition.y + options.scrollY;\n                    this.camera.position.setY(scrollY_1);\n                }\n            };\n            Chart.prototype.autoscroll = function() {\n                var state = this.state;\n                if (!state.data.autoScroll) return;\n                var oldTrendsMaxX = state.data.prevState.computedData.trends.maxXVal;\n                var trendsMaxXDelta = state.data.computedData.trends.maxXVal - oldTrendsMaxX;\n                if (trendsMaxXDelta > 0) {\n                    var maxVisibleX = this.state.screen.getScreenRightVal();\n                    var paddingRightX = this.state.getPaddingRight();\n                    var currentScroll = state.data.xAxis.range.scroll;\n                    if (oldTrendsMaxX < paddingRightX || oldTrendsMaxX > maxVisibleX) {\n                        return;\n                    }\n                    var scrollDelta = trendsMaxXDelta;\n                    this.setState({\n                        xAxis: {\n                            range: {\n                                scroll: currentScroll + scrollDelta\n                            }\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onScrollStop = function() {};\n            Chart.prototype.onMouseDown = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.clientX,\n                        y: ev.clientY\n                    }\n                });\n            };\n            Chart.prototype.onMouseUp = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onMouseMove = function(ev) {\n                if (this.state.data.cursor.dragMode) {\n                    this.setState({\n                        cursor: {\n                            dragMode: true,\n                            x: ev.clientX,\n                            y: ev.clientY\n                        }\n                    });\n                }\n            };\n            Chart.prototype.onMouseWheel = function(ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n                var zoomOrigin = ev.layerX / this.state.data.width;\n                var zoomValue = 1 + ev.wheelDeltaY * .001;\n                this.zoom(zoomValue, zoomOrigin);\n            };\n            Chart.prototype.onTouchMove = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: true,\n                        x: ev.touches[0].clientX,\n                        y: ev.touches[0].clientY\n                    }\n                });\n            };\n            Chart.prototype.onTouchEnd = function(ev) {\n                this.setState({\n                    cursor: {\n                        dragMode: false\n                    }\n                });\n            };\n            Chart.prototype.onChartContainerResizeHandler = function(width, height) {\n                this.setState({\n                    width: width,\n                    height: height\n                });\n            };\n            Chart.prototype.onChartResize = function() {\n                var _a = this.state.data, width = _a.width, height = _a.height;\n                this.renderer.setSize(width, height);\n                this.setupCamera();\n            };\n            Chart.prototype.zoom = function(zoomValue, zoomOrigin) {\n                var _this = this;\n                var MAX_ZOOM_VALUE = 1.5;\n                var MIN_ZOOM_VALUE = .7;\n                zoomValue = Math.min(zoomValue, MAX_ZOOM_VALUE);\n                zoomValue = Math.max(zoomValue, MIN_ZOOM_VALUE);\n                var autoScrollIsEnabled = this.state.data.autoScroll;\n                if (autoScrollIsEnabled) this.state.setState({\n                    autoScroll: false\n                });\n                this.state.zoom(zoomValue, zoomOrigin).then(function() {\n                    if (autoScrollIsEnabled) _this.setState({\n                        autoScroll: true\n                    });\n                });\n            };\n            Chart.createPreviewChart = function(userOptions, $el) {\n                var previewChartOptions = {\n                    animations: {\n                        enabled: false\n                    },\n                    widgets: {\n                        Grid: {\n                            enabled: false\n                        },\n                        Axis: {\n                            enabled: false\n                        },\n                        TrendsGradient: {\n                            enabled: false\n                        }\n                    }\n                };\n                var options = Utils_1.Utils.deepMerge(userOptions, previewChartOptions);\n                return new Chart(options, $el);\n            };\n            Chart.devicePixelRatio = window.devicePixelRatio;\n            Chart.installedWidgets = {};\n            Chart.renderers = {\n                CanvasRenderer: THREE.CanvasRenderer,\n                WebGLRenderer: THREE.WebGLRenderer\n            };\n            return Chart;\n        }();\n        exports.Chart = Chart;\n        Chart.installWidget(TrendsLineWidget_1.TrendsLineWidget);\n        Chart.installWidget(TrendsCandleWidget_1.TrendsCandlesWidget);\n        Chart.installWidget(AxisWidget_1.AxisWidget);\n        Chart.installWidget(GridWidget_1.GridWidget);\n        Chart.installWidget(TrendsBeaconWidget_1.TrendsBeaconWidget);\n        Chart.installWidget(TrendsIndicatorWidget_1.TrendsIndicatorWidget);\n        Chart.installWidget(TrendsGradientWidget_1.TrendsGradientWidget);\n        Chart.installWidget(TrendsLoadingWidget_1.TrendsLoadingWidget);\n        Chart.installWidget(AxisMarksWidget_1.AxisMarksWidget);\n        Chart.installWidget(BorderWidget_1.BorderWidget);\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        window.TweenLite = TweenMax;\n        window.Stats = __webpack_require__(4);\n        __webpack_require__(5);\n        __webpack_require__(6);\n        exports.isPlainObject = __webpack_require__(7);\n        exports.EE2 = __webpack_require__(9);\n        var es6_promise_1 = __webpack_require__(10);\n        exports.Promise = es6_promise_1.Promise;\n        exports.ResizeSensor = __webpack_require__(11);\n    }, function(module, exports) {\n        var Stats = function() {\n            function h(a) {\n                c.appendChild(a.dom);\n                return a;\n            }\n            function k(a) {\n                for (var d = 0; d < c.children.length; d++) c.children[d].style.display = d === a ? \"block\" : \"none\";\n                l = a;\n            }\n            var l = 0, c = document.createElement(\"div\");\n            c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n            c.addEventListener(\"click\", function(a) {\n                a.preventDefault();\n                k(++l % c.children.length);\n            }, !1);\n            var g = (performance || Date).now(), e = g, a = 0, r = h(new Stats.Panel(\"FPS\", \"#0ff\", \"#002\")), f = h(new Stats.Panel(\"MS\", \"#0f0\", \"#020\"));\n            if (self.performance && self.performance.memory) var t = h(new Stats.Panel(\"MB\", \"#f08\", \"#201\"));\n            k(0);\n            return {\n                REVISION: 16,\n                dom: c,\n                addPanel: h,\n                showPanel: k,\n                begin: function() {\n                    g = (performance || Date).now();\n                },\n                end: function() {\n                    a++;\n                    var c = (performance || Date).now();\n                    f.update(c - g, 200);\n                    if (c > e + 1e3 && (r.update(1e3 * a / (c - e), 100), e = c, a = 0, t)) {\n                        var d = performance.memory;\n                        t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                    }\n                    return c;\n                },\n                update: function() {\n                    g = this.end();\n                },\n                domElement: c,\n                setMode: k\n            };\n        };\n        Stats.Panel = function(h, k, l) {\n            var c = Infinity, g = 0, e = Math.round, a = e(window.devicePixelRatio || 1), r = 80 * a, f = 48 * a, t = 3 * a, u = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n            q.width = r;\n            q.height = f;\n            q.style.cssText = \"width:80px;height:48px\";\n            var b = q.getContext(\"2d\");\n            b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n            b.textBaseline = \"top\";\n            b.fillStyle = l;\n            b.fillRect(0, 0, r, f);\n            b.fillStyle = k;\n            b.fillText(h, t, u);\n            b.fillRect(d, m, n, p);\n            b.fillStyle = l;\n            b.globalAlpha = .9;\n            b.fillRect(d, m, n, p);\n            return {\n                dom: q,\n                update: function(f, v) {\n                    c = Math.min(c, f);\n                    g = Math.max(g, f);\n                    b.fillStyle = l;\n                    b.globalAlpha = 1;\n                    b.fillRect(0, 0, r, m);\n                    b.fillStyle = k;\n                    b.fillText(e(f) + \" \" + h + \" (\" + e(c) + \"-\" + e(g) + \")\", t, u);\n                    b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                    b.fillRect(d + n - a, m, a, p);\n                    b.fillStyle = l;\n                    b.globalAlpha = .9;\n                    b.fillRect(d + n - a, m, a, e((1 - f / v) * p));\n                }\n            };\n        };\n        \"object\" === typeof module && (module.exports = Stats);\n    }, function(module, exports) {\n        THREE.SpriteCanvasMaterial = function(parameters) {\n            THREE.Material.call(this);\n            this.type = \"SpriteCanvasMaterial\";\n            this.color = new THREE.Color(16777215);\n            this.program = function(context, color) {};\n            this.setValues(parameters);\n        };\n        THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n        THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n        THREE.SpriteCanvasMaterial.prototype.clone = function() {\n            var material = new THREE.SpriteCanvasMaterial();\n            material.copy(this);\n            material.color.copy(this.color);\n            material.program = this.program;\n            return material;\n        };\n        THREE.CanvasRenderer = function(parameters) {\n            console.log(\"THREE.CanvasRenderer\", THREE.REVISION);\n            parameters = parameters || {};\n            var _this = this, _renderData, _elements, _lights, _projector = new THREE.Projector(), _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement(\"canvas\"), _canvasWidth = _canvas.width, _canvasHeight = _canvas.height, _canvasWidthHalf = Math.floor(_canvasWidth / 2), _canvasHeightHalf = Math.floor(_canvasHeight / 2), _viewportX = 0, _viewportY = 0, _viewportWidth = _canvasWidth, _viewportHeight = _canvasHeight, _pixelRatio = 1, _context = _canvas.getContext(\"2d\", {\n                alpha: parameters.alpha === true\n            }), _clearColor = new THREE.Color(0), _clearAlpha = parameters.alpha === true ? 0 : 1, _contextGlobalAlpha = 1, _contextGlobalCompositeOperation = 0, _contextStrokeStyle = null, _contextFillStyle = null, _contextLineWidth = null, _contextLineCap = null, _contextLineJoin = null, _contextLineDash = [], _camera, _v1, _v2, _v3, _v4, _v5 = new THREE.RenderableVertex(), _v6 = new THREE.RenderableVertex(), _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _v4x, _v4y, _v5x, _v5y, _v6x, _v6y, _color = new THREE.Color(), _color1 = new THREE.Color(), _color2 = new THREE.Color(), _color3 = new THREE.Color(), _color4 = new THREE.Color(), _diffuseColor = new THREE.Color(), _emissiveColor = new THREE.Color(), _lightColor = new THREE.Color(), _patterns = {}, _image, _uvs, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, _clipBox = new THREE.Box2(), _clearBox = new THREE.Box2(), _elemBox = new THREE.Box2(), _ambientLight = new THREE.Color(), _directionalLights = new THREE.Color(), _pointLights = new THREE.Color(), _vector3 = new THREE.Vector3(), _centroid = new THREE.Vector3(), _normal = new THREE.Vector3(), _normalViewMatrix = new THREE.Matrix3();\n            if (_context.setLineDash === undefined) {\n                _context.setLineDash = function() {};\n            }\n            this.domElement = _canvas;\n            this.autoClear = true;\n            this.sortObjects = true;\n            this.sortElements = true;\n            this.info = {\n                render: {\n                    vertices: 0,\n                    faces: 0\n                }\n            };\n            this.supportsVertexTextures = function() {};\n            this.setFaceCulling = function() {};\n            this.getContext = function() {\n                return _context;\n            };\n            this.getContextAttributes = function() {\n                return _context.getContextAttributes();\n            };\n            this.getPixelRatio = function() {\n                return _pixelRatio;\n            };\n            this.setPixelRatio = function(value) {\n                if (value !== undefined) _pixelRatio = value;\n            };\n            this.setSize = function(width, height, updateStyle) {\n                _canvasWidth = width * _pixelRatio;\n                _canvasHeight = height * _pixelRatio;\n                _canvas.width = _canvasWidth;\n                _canvas.height = _canvasHeight;\n                _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n                _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n                if (updateStyle !== false) {\n                    _canvas.style.width = width + \"px\";\n                    _canvas.style.height = height + \"px\";\n                }\n                _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n                _contextGlobalAlpha = 1;\n                _contextGlobalCompositeOperation = 0;\n                _contextStrokeStyle = null;\n                _contextFillStyle = null;\n                _contextLineWidth = null;\n                _contextLineCap = null;\n                _contextLineJoin = null;\n                this.setViewport(0, 0, width, height);\n            };\n            this.setViewport = function(x, y, width, height) {\n                _viewportX = x * _pixelRatio;\n                _viewportY = y * _pixelRatio;\n                _viewportWidth = width * _pixelRatio;\n                _viewportHeight = height * _pixelRatio;\n            };\n            this.setScissor = function() {};\n            this.setScissorTest = function() {};\n            this.setClearColor = function(color, alpha) {\n                _clearColor.set(color);\n                _clearAlpha = alpha !== undefined ? alpha : 1;\n                _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n                _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n            };\n            this.setClearColorHex = function(hex, alpha) {\n                console.warn(\"THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.\");\n                this.setClearColor(hex, alpha);\n            };\n            this.getClearColor = function() {\n                return _clearColor;\n            };\n            this.getClearAlpha = function() {\n                return _clearAlpha;\n            };\n            this.getMaxAnisotropy = function() {\n                return 0;\n            };\n            this.clear = function() {\n                if (_clearBox.isEmpty() === false) {\n                    _clearBox.intersect(_clipBox);\n                    _clearBox.expandByScalar(2);\n                    _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n                    _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf;\n                    _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n                    _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf;\n                    if (_clearAlpha < 1) {\n                        _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    if (_clearAlpha > 0) {\n                        setBlending(THREE.NormalBlending);\n                        setOpacity(1);\n                        setFillStyle(\"rgba(\" + Math.floor(_clearColor.r * 255) + \",\" + Math.floor(_clearColor.g * 255) + \",\" + Math.floor(_clearColor.b * 255) + \",\" + _clearAlpha + \")\");\n                        _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n                    }\n                    _clearBox.makeEmpty();\n                }\n            };\n            this.clearColor = function() {};\n            this.clearDepth = function() {};\n            this.clearStencil = function() {};\n            this.render = function(scene, camera) {\n                if (camera instanceof THREE.Camera === false) {\n                    console.error(\"THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.\");\n                    return;\n                }\n                if (this.autoClear === true) this.clear();\n                _this.info.render.vertices = 0;\n                _this.info.render.faces = 0;\n                _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n                _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n                _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n                _elements = _renderData.elements;\n                _lights = _renderData.lights;\n                _camera = camera;\n                _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n                calculateLights();\n                for (var e = 0, el = _elements.length; e < el; e++) {\n                    var element = _elements[e];\n                    var material = element.material;\n                    if (material === undefined || material.opacity === 0) continue;\n                    _elemBox.makeEmpty();\n                    if (element instanceof THREE.RenderableSprite) {\n                        _v1 = element;\n                        _v1.x *= _canvasWidthHalf;\n                        _v1.y *= _canvasHeightHalf;\n                        renderSprite(_v1, element, material);\n                    } else if (element instanceof THREE.RenderableLine) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderLine(_v1, _v2, element, material);\n                        }\n                    } else if (element instanceof THREE.RenderableFace) {\n                        _v1 = element.v1;\n                        _v2 = element.v2;\n                        _v3 = element.v3;\n                        if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n                        if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n                        if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n                        _v1.positionScreen.x *= _canvasWidthHalf;\n                        _v1.positionScreen.y *= _canvasHeightHalf;\n                        _v2.positionScreen.x *= _canvasWidthHalf;\n                        _v2.positionScreen.y *= _canvasHeightHalf;\n                        _v3.positionScreen.x *= _canvasWidthHalf;\n                        _v3.positionScreen.y *= _canvasHeightHalf;\n                        if (material.overdraw > 0) {\n                            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n                            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n                            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n                        }\n                        _elemBox.setFromPoints([ _v1.positionScreen, _v2.positionScreen, _v3.positionScreen ]);\n                        if (_clipBox.intersectsBox(_elemBox) === true) {\n                            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n                        }\n                    }\n                    _clearBox.union(_elemBox);\n                }\n                _context.setTransform(1, 0, 0, 1, 0, 0);\n            };\n            function calculateLights() {\n                _ambientLight.setRGB(0, 0, 0);\n                _directionalLights.setRGB(0, 0, 0);\n                _pointLights.setRGB(0, 0, 0);\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    var lightColor = light.color;\n                    if (light instanceof THREE.AmbientLight) {\n                        _ambientLight.add(lightColor);\n                    } else if (light instanceof THREE.DirectionalLight) {\n                        _directionalLights.add(lightColor);\n                    } else if (light instanceof THREE.PointLight) {\n                        _pointLights.add(lightColor);\n                    }\n                }\n            }\n            function calculateLight(position, normal, color) {\n                for (var l = 0, ll = _lights.length; l < ll; l++) {\n                    var light = _lights[l];\n                    _lightColor.copy(light.color);\n                    if (light instanceof THREE.DirectionalLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n                        var amount = normal.dot(lightPosition);\n                        if (amount <= 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    } else if (light instanceof THREE.PointLight) {\n                        var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n                        var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n                        if (amount <= 0) continue;\n                        amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n                        if (amount == 0) continue;\n                        amount *= light.intensity;\n                        color.add(_lightColor.multiplyScalar(amount));\n                    }\n                }\n            }\n            function renderSprite(v1, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                var scaleX = element.scale.x * _canvasWidthHalf;\n                var scaleY = element.scale.y * _canvasHeightHalf;\n                var dist = .5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY);\n                _elemBox.min.set(v1.x - dist, v1.y - dist);\n                _elemBox.max.set(v1.x + dist, v1.y + dist);\n                if (material instanceof THREE.SpriteMaterial) {\n                    var texture = material.map;\n                    if (texture !== null) {\n                        var pattern = _patterns[texture.id];\n                        if (pattern === undefined || pattern.version !== texture.version) {\n                            pattern = textureToPattern(texture);\n                            _patterns[texture.id] = pattern;\n                        }\n                        if (pattern.canvas !== undefined) {\n                            setFillStyle(pattern.canvas);\n                            var bitmap = texture.image;\n                            var ox = bitmap.width * texture.offset.x;\n                            var oy = bitmap.height * texture.offset.y;\n                            var sx = bitmap.width * texture.repeat.x;\n                            var sy = bitmap.height * texture.repeat.y;\n                            var cx = scaleX / sx;\n                            var cy = scaleY / sy;\n                            _context.save();\n                            _context.translate(v1.x, v1.y);\n                            if (material.rotation !== 0) _context.rotate(material.rotation);\n                            _context.translate(-scaleX / 2, -scaleY / 2);\n                            _context.scale(cx, cy);\n                            _context.translate(-ox, -oy);\n                            _context.fillRect(ox, oy, sx, sy);\n                            _context.restore();\n                        }\n                    } else {\n                        setFillStyle(material.color.getStyle());\n                        _context.save();\n                        _context.translate(v1.x, v1.y);\n                        if (material.rotation !== 0) _context.rotate(material.rotation);\n                        _context.scale(scaleX, -scaleY);\n                        _context.fillRect(-.5, -.5, 1, 1);\n                        _context.restore();\n                    }\n                } else if (material instanceof THREE.SpriteCanvasMaterial) {\n                    setStrokeStyle(material.color.getStyle());\n                    setFillStyle(material.color.getStyle());\n                    _context.save();\n                    _context.translate(v1.x, v1.y);\n                    if (material.rotation !== 0) _context.rotate(material.rotation);\n                    _context.scale(scaleX, scaleY);\n                    material.program(_context);\n                    _context.restore();\n                }\n            }\n            function renderLine(v1, v2, element, material) {\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _context.beginPath();\n                _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n                _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n                if (material instanceof THREE.LineBasicMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    if (material.vertexColors !== THREE.VertexColors) {\n                        setStrokeStyle(material.color.getStyle());\n                    } else {\n                        var colorStyle1 = element.vertexColors[0].getStyle();\n                        var colorStyle2 = element.vertexColors[1].getStyle();\n                        if (colorStyle1 === colorStyle2) {\n                            setStrokeStyle(colorStyle1);\n                        } else {\n                            try {\n                                var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n                                grad.addColorStop(0, colorStyle1);\n                                grad.addColorStop(1, colorStyle2);\n                            } catch (exception) {\n                                grad = colorStyle1;\n                            }\n                            setStrokeStyle(grad);\n                        }\n                    }\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                } else if (material instanceof THREE.LineDashedMaterial) {\n                    setLineWidth(material.linewidth);\n                    setLineCap(material.linecap);\n                    setLineJoin(material.linejoin);\n                    setStrokeStyle(material.color.getStyle());\n                    setLineDash([ material.dashSize, material.gapSize ]);\n                    _context.stroke();\n                    _elemBox.expandByScalar(material.linewidth * 2);\n                    setLineDash([]);\n                }\n            }\n            function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n                _this.info.render.vertices += 3;\n                _this.info.render.faces++;\n                setOpacity(material.opacity);\n                setBlending(material.blending);\n                _v1x = v1.positionScreen.x;\n                _v1y = v1.positionScreen.y;\n                _v2x = v2.positionScreen.x;\n                _v2y = v2.positionScreen.y;\n                _v3x = v3.positionScreen.x;\n                _v3y = v3.positionScreen.y;\n                drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n                if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n                    _diffuseColor.copy(material.color);\n                    _emissiveColor.copy(material.emissive);\n                    if (material.vertexColors === THREE.FaceColors) {\n                        _diffuseColor.multiply(element.color);\n                    }\n                    _color.copy(_ambientLight);\n                    _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n                    calculateLight(_centroid, element.normalModel, _color);\n                    _color.multiply(_diffuseColor).add(_emissiveColor);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n                    if (material.map !== null) {\n                        var mapping = material.map.mapping;\n                        if (mapping === THREE.UVMapping) {\n                            _uvs = element.uvs;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n                        }\n                    } else if (material.envMap !== null) {\n                        if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n                            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n                            _uv1x = .5 * _normal.x + .5;\n                            _uv1y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n                            _uv2x = .5 * _normal.x + .5;\n                            _uv2y = .5 * _normal.y + .5;\n                            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n                            _uv3x = .5 * _normal.x + .5;\n                            _uv3y = .5 * _normal.y + .5;\n                            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n                        }\n                    } else {\n                        _color.copy(material.color);\n                        if (material.vertexColors === THREE.FaceColors) {\n                            _color.multiply(element.color);\n                        }\n                        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                    }\n                } else if (material instanceof THREE.MeshNormalMaterial) {\n                    _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n                    _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(.5).addScalar(.5);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                } else {\n                    _color.setRGB(1, 1, 1);\n                    material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n                }\n            }\n            function drawTriangle(x0, y0, x1, y1, x2, y2) {\n                _context.beginPath();\n                _context.moveTo(x0, y0);\n                _context.lineTo(x1, y1);\n                _context.lineTo(x2, y2);\n                _context.closePath();\n            }\n            function strokePath(color, linewidth, linecap, linejoin) {\n                setLineWidth(linewidth);\n                setLineCap(linecap);\n                setLineJoin(linejoin);\n                setStrokeStyle(color.getStyle());\n                _context.stroke();\n                _elemBox.expandByScalar(linewidth * 2);\n            }\n            function fillPath(color) {\n                setFillStyle(color.getStyle());\n                _context.fill();\n            }\n            function textureToPattern(texture) {\n                if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n                    return {\n                        canvas: undefined,\n                        version: texture.version\n                    };\n                }\n                var image = texture.image;\n                if (image.complete === false) {\n                    return {\n                        canvas: undefined,\n                        version: 0\n                    };\n                }\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                var context = canvas.getContext(\"2d\");\n                context.setTransform(1, 0, 0, -1, 0, image.height);\n                context.drawImage(image, 0, 0);\n                var repeatX = texture.wrapS === THREE.RepeatWrapping;\n                var repeatY = texture.wrapT === THREE.RepeatWrapping;\n                var repeat = \"no-repeat\";\n                if (repeatX === true && repeatY === true) {\n                    repeat = \"repeat\";\n                } else if (repeatX === true) {\n                    repeat = \"repeat-x\";\n                } else if (repeatY === true) {\n                    repeat = \"repeat-y\";\n                }\n                var pattern = _context.createPattern(canvas, repeat);\n                if (texture.onUpdate) texture.onUpdate(texture);\n                return {\n                    canvas: pattern,\n                    version: texture.version\n                };\n            }\n            function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n                var pattern = _patterns[texture.id];\n                if (pattern === undefined || pattern.version !== texture.version) {\n                    pattern = textureToPattern(texture);\n                    _patterns[texture.id] = pattern;\n                }\n                if (pattern.canvas !== undefined) {\n                    setFillStyle(pattern.canvas);\n                } else {\n                    setFillStyle(\"rgba( 0, 0, 0, 1)\");\n                    _context.fill();\n                    return;\n                }\n                var a, b, c, d, e, f, det, idet, offsetX = texture.offset.x / texture.repeat.x, offsetY = texture.offset.y / texture.repeat.y, width = texture.image.width * texture.repeat.x, height = texture.image.height * texture.repeat.y;\n                u0 = (u0 + offsetX) * width;\n                v0 = (v0 + offsetY) * height;\n                u1 = (u1 + offsetX) * width;\n                v1 = (v1 + offsetY) * height;\n                u2 = (u2 + offsetX) * width;\n                v2 = (v2 + offsetY) * height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                if (det === 0) return;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.fill();\n                _context.restore();\n            }\n            function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n                var a, b, c, d, e, f, det, idet, width = image.width - 1, height = image.height - 1;\n                u0 *= width;\n                v0 *= height;\n                u1 *= width;\n                v1 *= height;\n                u2 *= width;\n                v2 *= height;\n                x1 -= x0;\n                y1 -= y0;\n                x2 -= x0;\n                y2 -= y0;\n                u1 -= u0;\n                v1 -= v0;\n                u2 -= u0;\n                v2 -= v0;\n                det = u1 * v2 - u2 * v1;\n                idet = 1 / det;\n                a = (v2 * x1 - v1 * x2) * idet;\n                b = (v2 * y1 - v1 * y2) * idet;\n                c = (u1 * x2 - u2 * x1) * idet;\n                d = (u1 * y2 - u2 * y1) * idet;\n                e = x0 - a * u0 - c * v0;\n                f = y0 - b * u0 - d * v0;\n                _context.save();\n                _context.transform(a, b, c, d, e, f);\n                _context.clip();\n                _context.drawImage(image, 0, 0);\n                _context.restore();\n            }\n            function expand(v1, v2, pixels) {\n                var x = v2.x - v1.x, y = v2.y - v1.y, det = x * x + y * y, idet;\n                if (det === 0) return;\n                idet = pixels / Math.sqrt(det);\n                x *= idet;\n                y *= idet;\n                v2.x += x;\n                v2.y += y;\n                v1.x -= x;\n                v1.y -= y;\n            }\n            function setOpacity(value) {\n                if (_contextGlobalAlpha !== value) {\n                    _context.globalAlpha = value;\n                    _contextGlobalAlpha = value;\n                }\n            }\n            function setBlending(value) {\n                if (_contextGlobalCompositeOperation !== value) {\n                    if (value === THREE.NormalBlending) {\n                        _context.globalCompositeOperation = \"source-over\";\n                    } else if (value === THREE.AdditiveBlending) {\n                        _context.globalCompositeOperation = \"lighter\";\n                    } else if (value === THREE.SubtractiveBlending) {\n                        _context.globalCompositeOperation = \"darker\";\n                    } else if (value === THREE.MultiplyBlending) {\n                        _context.globalCompositeOperation = \"multiply\";\n                    }\n                    _contextGlobalCompositeOperation = value;\n                }\n            }\n            function setLineWidth(value) {\n                if (_contextLineWidth !== value) {\n                    _context.lineWidth = value;\n                    _contextLineWidth = value;\n                }\n            }\n            function setLineCap(value) {\n                if (_contextLineCap !== value) {\n                    _context.lineCap = value;\n                    _contextLineCap = value;\n                }\n            }\n            function setLineJoin(value) {\n                if (_contextLineJoin !== value) {\n                    _context.lineJoin = value;\n                    _contextLineJoin = value;\n                }\n            }\n            function setStrokeStyle(value) {\n                if (_contextStrokeStyle !== value) {\n                    _context.strokeStyle = value;\n                    _contextStrokeStyle = value;\n                }\n            }\n            function setFillStyle(value) {\n                if (_contextFillStyle !== value) {\n                    _context.fillStyle = value;\n                    _contextFillStyle = value;\n                }\n            }\n            function setLineDash(value) {\n                if (_contextLineDash.length !== value.length) {\n                    _context.setLineDash(value);\n                    _contextLineDash = value;\n                }\n            }\n        };\n    }, function(module, exports) {\n        THREE.RenderableObject = function() {\n            this.id = 0;\n            this.object = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableFace = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.v3 = new THREE.RenderableVertex();\n            this.normalModel = new THREE.Vector3();\n            this.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n            this.vertexNormalsLength = 0;\n            this.color = new THREE.Color();\n            this.material = null;\n            this.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableVertex = function() {\n            this.position = new THREE.Vector3();\n            this.positionWorld = new THREE.Vector3();\n            this.positionScreen = new THREE.Vector4();\n            this.visible = true;\n        };\n        THREE.RenderableVertex.prototype.copy = function(vertex) {\n            this.positionWorld.copy(vertex.positionWorld);\n            this.positionScreen.copy(vertex.positionScreen);\n        };\n        THREE.RenderableLine = function() {\n            this.id = 0;\n            this.v1 = new THREE.RenderableVertex();\n            this.v2 = new THREE.RenderableVertex();\n            this.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n            this.material = null;\n            this.z = 0;\n            this.renderOrder = 0;\n        };\n        THREE.RenderableSprite = function() {\n            this.id = 0;\n            this.object = null;\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.rotation = 0;\n            this.scale = new THREE.Vector2();\n            this.material = null;\n            this.renderOrder = 0;\n        };\n        THREE.Projector = function() {\n            var _object, _objectCount, _objectPool = [], _objectPoolLength = 0, _vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0, _face, _faceCount, _facePool = [], _facePoolLength = 0, _line, _lineCount, _linePool = [], _linePoolLength = 0, _sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0, _renderData = {\n                objects: [],\n                lights: [],\n                elements: []\n            }, _vector3 = new THREE.Vector3(), _vector4 = new THREE.Vector4(), _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)), _boundingBox = new THREE.Box3(), _points3 = new Array(3), _points4 = new Array(4), _viewMatrix = new THREE.Matrix4(), _viewProjectionMatrix = new THREE.Matrix4(), _modelMatrix, _modelViewProjectionMatrix = new THREE.Matrix4(), _normalMatrix = new THREE.Matrix3(), _frustum = new THREE.Frustum(), _clippedVertex1PositionScreen = new THREE.Vector4(), _clippedVertex2PositionScreen = new THREE.Vector4();\n            this.projectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .projectVector() is now vector.project().\");\n                vector.project(camera);\n            };\n            this.unprojectVector = function(vector, camera) {\n                console.warn(\"THREE.Projector: .unprojectVector() is now vector.unproject().\");\n                vector.unproject(camera);\n            };\n            this.pickingRay = function(vector, camera) {\n                console.error(\"THREE.Projector: .pickingRay() is now raycaster.setFromCamera().\");\n            };\n            var RenderList = function() {\n                var normals = [];\n                var uvs = [];\n                var object = null;\n                var material = null;\n                var normalMatrix = new THREE.Matrix3();\n                function setObject(value) {\n                    object = value;\n                    material = object.material;\n                    normalMatrix.getNormalMatrix(object.matrixWorld);\n                    normals.length = 0;\n                    uvs.length = 0;\n                }\n                function projectVertex(vertex) {\n                    var position = vertex.position;\n                    var positionWorld = vertex.positionWorld;\n                    var positionScreen = vertex.positionScreen;\n                    positionWorld.copy(position).applyMatrix4(_modelMatrix);\n                    positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n                    var invW = 1 / positionScreen.w;\n                    positionScreen.x *= invW;\n                    positionScreen.y *= invW;\n                    positionScreen.z *= invW;\n                    vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n                }\n                function pushVertex(x, y, z) {\n                    _vertex = getNextVertexInPool();\n                    _vertex.position.set(x, y, z);\n                    projectVertex(_vertex);\n                }\n                function pushNormal(x, y, z) {\n                    normals.push(x, y, z);\n                }\n                function pushUv(x, y) {\n                    uvs.push(x, y);\n                }\n                function checkTriangleVisibility(v1, v2, v3) {\n                    if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n                    _points3[0] = v1.positionScreen;\n                    _points3[1] = v2.positionScreen;\n                    _points3[2] = v3.positionScreen;\n                    return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n                }\n                function checkBackfaceCulling(v1, v2, v3) {\n                    return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n                }\n                function pushLine(a, b) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    _line = getNextLineInPool();\n                    _line.id = object.id;\n                    _line.v1.copy(v1);\n                    _line.v2.copy(v2);\n                    _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n                    _line.renderOrder = object.renderOrder;\n                    _line.material = object.material;\n                    _renderData.elements.push(_line);\n                }\n                function pushTriangle(a, b, c) {\n                    var v1 = _vertexPool[a];\n                    var v2 = _vertexPool[b];\n                    var v3 = _vertexPool[c];\n                    if (checkTriangleVisibility(v1, v2, v3) === false) return;\n                    if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n                        _face = getNextFaceInPool();\n                        _face.id = object.id;\n                        _face.v1.copy(v1);\n                        _face.v2.copy(v2);\n                        _face.v3.copy(v3);\n                        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                        _face.renderOrder = object.renderOrder;\n                        _face.normalModel.fromArray(normals, a * 3);\n                        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n                        for (var i = 0; i < 3; i++) {\n                            var normal = _face.vertexNormalsModel[i];\n                            normal.fromArray(normals, arguments[i] * 3);\n                            normal.applyMatrix3(normalMatrix).normalize();\n                            var uv = _face.uvs[i];\n                            uv.fromArray(uvs, arguments[i] * 2);\n                        }\n                        _face.vertexNormalsLength = 3;\n                        _face.material = object.material;\n                        _renderData.elements.push(_face);\n                    }\n                }\n                return {\n                    setObject: setObject,\n                    projectVertex: projectVertex,\n                    checkTriangleVisibility: checkTriangleVisibility,\n                    checkBackfaceCulling: checkBackfaceCulling,\n                    pushVertex: pushVertex,\n                    pushNormal: pushNormal,\n                    pushUv: pushUv,\n                    pushLine: pushLine,\n                    pushTriangle: pushTriangle\n                };\n            };\n            var renderList = new RenderList();\n            this.projectScene = function(scene, camera, sortObjects, sortElements) {\n                _faceCount = 0;\n                _lineCount = 0;\n                _spriteCount = 0;\n                _renderData.elements.length = 0;\n                if (scene.autoUpdate === true) scene.updateMatrixWorld();\n                if (camera.parent === null) camera.updateMatrixWorld();\n                _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n                _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n                _frustum.setFromMatrix(_viewProjectionMatrix);\n                _objectCount = 0;\n                _renderData.objects.length = 0;\n                _renderData.lights.length = 0;\n                function addObject(object) {\n                    _object = getNextObjectInPool();\n                    _object.id = object.id;\n                    _object.object = object;\n                    _vector3.setFromMatrixPosition(object.matrixWorld);\n                    _vector3.applyProjection(_viewProjectionMatrix);\n                    _object.z = _vector3.z;\n                    _object.renderOrder = object.renderOrder;\n                    _renderData.objects.push(_object);\n                }\n                scene.traverseVisible(function(object) {\n                    if (object instanceof THREE.Light) {\n                        _renderData.lights.push(object);\n                    } else if (object instanceof THREE.Mesh || object instanceof THREE.Line) {\n                        if (object.material.visible === false) return;\n                        if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n                        addObject(object);\n                    } else if (object instanceof THREE.Sprite) {\n                        if (object.material.visible === false) return;\n                        if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n                        addObject(object);\n                    }\n                });\n                if (sortObjects === true) {\n                    _renderData.objects.sort(painterSort);\n                }\n                for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n                    var object = _renderData.objects[o].object;\n                    var geometry = object.geometry;\n                    renderList.setObject(object);\n                    _modelMatrix = object.matrixWorld;\n                    _vertexCount = 0;\n                    if (object instanceof THREE.Mesh) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            var groups = geometry.groups;\n                            if (attributes.position === undefined) continue;\n                            var positions = attributes.position.array;\n                            for (var i = 0, l = positions.length; i < l; i += 3) {\n                                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                            }\n                            if (attributes.normal !== undefined) {\n                                var normals = attributes.normal.array;\n                                for (var i = 0, l = normals.length; i < l; i += 3) {\n                                    renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n                                }\n                            }\n                            if (attributes.uv !== undefined) {\n                                var uvs = attributes.uv.array;\n                                for (var i = 0, l = uvs.length; i < l; i += 2) {\n                                    renderList.pushUv(uvs[i], uvs[i + 1]);\n                                }\n                            }\n                            if (geometry.index !== null) {\n                                var indices = geometry.index.array;\n                                if (groups.length > 0) {\n                                    for (var o = 0; o < groups.length; o++) {\n                                        var group = groups[o];\n                                        for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                                            renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                        }\n                                    }\n                                } else {\n                                    for (var i = 0, l = indices.length; i < l; i += 3) {\n                                        renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                                    }\n                                }\n                            } else {\n                                for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                                    renderList.pushTriangle(i, i + 1, i + 2);\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            var vertices = geometry.vertices;\n                            var faces = geometry.faces;\n                            var faceVertexUvs = geometry.faceVertexUvs[0];\n                            _normalMatrix.getNormalMatrix(_modelMatrix);\n                            var material = object.material;\n                            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n                            var objectMaterials = isFaceMaterial === true ? object.material : null;\n                            for (var v = 0, vl = vertices.length; v < vl; v++) {\n                                var vertex = vertices[v];\n                                _vector3.copy(vertex);\n                                if (material.morphTargets === true) {\n                                    var morphTargets = geometry.morphTargets;\n                                    var morphInfluences = object.morphTargetInfluences;\n                                    for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                                        var influence = morphInfluences[t];\n                                        if (influence === 0) continue;\n                                        var target = morphTargets[t];\n                                        var targetVertex = target.vertices[v];\n                                        _vector3.x += (targetVertex.x - vertex.x) * influence;\n                                        _vector3.y += (targetVertex.y - vertex.y) * influence;\n                                        _vector3.z += (targetVertex.z - vertex.z) * influence;\n                                    }\n                                }\n                                renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n                            }\n                            for (var f = 0, fl = faces.length; f < fl; f++) {\n                                var face = faces[f];\n                                material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n                                if (material === undefined) continue;\n                                var side = material.side;\n                                var v1 = _vertexPool[face.a];\n                                var v2 = _vertexPool[face.b];\n                                var v3 = _vertexPool[face.c];\n                                if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n                                var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n                                if (side !== THREE.DoubleSide) {\n                                    if (side === THREE.FrontSide && visible === false) continue;\n                                    if (side === THREE.BackSide && visible === true) continue;\n                                }\n                                _face = getNextFaceInPool();\n                                _face.id = object.id;\n                                _face.v1.copy(v1);\n                                _face.v2.copy(v2);\n                                _face.v3.copy(v3);\n                                _face.normalModel.copy(face.normal);\n                                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                    _face.normalModel.negate();\n                                }\n                                _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n                                var faceVertexNormals = face.vertexNormals;\n                                for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n                                    var normalModel = _face.vertexNormalsModel[n];\n                                    normalModel.copy(faceVertexNormals[n]);\n                                    if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                                        normalModel.negate();\n                                    }\n                                    normalModel.applyMatrix3(_normalMatrix).normalize();\n                                }\n                                _face.vertexNormalsLength = faceVertexNormals.length;\n                                var vertexUvs = faceVertexUvs[f];\n                                if (vertexUvs !== undefined) {\n                                    for (var u = 0; u < 3; u++) {\n                                        _face.uvs[u].copy(vertexUvs[u]);\n                                    }\n                                }\n                                _face.color = face.color;\n                                _face.material = material;\n                                _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n                                _face.renderOrder = object.renderOrder;\n                                _renderData.elements.push(_face);\n                            }\n                        }\n                    } else if (object instanceof THREE.Line) {\n                        if (geometry instanceof THREE.BufferGeometry) {\n                            var attributes = geometry.attributes;\n                            if (attributes.position !== undefined) {\n                                var positions = attributes.position.array;\n                                for (var i = 0, l = positions.length; i < l; i += 3) {\n                                    renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n                                }\n                                if (geometry.index !== null) {\n                                    var indices = geometry.index.array;\n                                    for (var i = 0, l = indices.length; i < l; i += 2) {\n                                        renderList.pushLine(indices[i], indices[i + 1]);\n                                    }\n                                } else {\n                                    var step = object instanceof THREE.LineSegments ? 2 : 1;\n                                    for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                                        renderList.pushLine(i, i + 1);\n                                    }\n                                }\n                            }\n                        } else if (geometry instanceof THREE.Geometry) {\n                            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n                            var vertices = object.geometry.vertices;\n                            if (vertices.length === 0) continue;\n                            v1 = getNextVertexInPool();\n                            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n                            var step = object instanceof THREE.LineSegments ? 2 : 1;\n                            for (var v = 1, vl = vertices.length; v < vl; v++) {\n                                v1 = getNextVertexInPool();\n                                v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n                                if ((v + 1) % step > 0) continue;\n                                v2 = _vertexPool[_vertexCount - 2];\n                                _clippedVertex1PositionScreen.copy(v1.positionScreen);\n                                _clippedVertex2PositionScreen.copy(v2.positionScreen);\n                                if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n                                    _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n                                    _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n                                    _line = getNextLineInPool();\n                                    _line.id = object.id;\n                                    _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n                                    _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n                                    _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n                                    _line.renderOrder = object.renderOrder;\n                                    _line.material = object.material;\n                                    if (object.material.vertexColors === THREE.VertexColors) {\n                                        _line.vertexColors[0].copy(object.geometry.colors[v]);\n                                        _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                                    }\n                                    _renderData.elements.push(_line);\n                                }\n                            }\n                        }\n                    } else if (object instanceof THREE.Sprite) {\n                        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n                        _vector4.applyMatrix4(_viewProjectionMatrix);\n                        var invW = 1 / _vector4.w;\n                        _vector4.z *= invW;\n                        if (_vector4.z >= -1 && _vector4.z <= 1) {\n                            _sprite = getNextSpriteInPool();\n                            _sprite.id = object.id;\n                            _sprite.x = _vector4.x * invW;\n                            _sprite.y = _vector4.y * invW;\n                            _sprite.z = _vector4.z;\n                            _sprite.renderOrder = object.renderOrder;\n                            _sprite.object = object;\n                            _sprite.rotation = object.rotation;\n                            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n                            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n                            _sprite.material = object.material;\n                            _renderData.elements.push(_sprite);\n                        }\n                    }\n                }\n                if (sortElements === true) {\n                    _renderData.elements.sort(painterSort);\n                }\n                return _renderData;\n            };\n            function getNextObjectInPool() {\n                if (_objectCount === _objectPoolLength) {\n                    var object = new THREE.RenderableObject();\n                    _objectPool.push(object);\n                    _objectPoolLength++;\n                    _objectCount++;\n                    return object;\n                }\n                return _objectPool[_objectCount++];\n            }\n            function getNextVertexInPool() {\n                if (_vertexCount === _vertexPoolLength) {\n                    var vertex = new THREE.RenderableVertex();\n                    _vertexPool.push(vertex);\n                    _vertexPoolLength++;\n                    _vertexCount++;\n                    return vertex;\n                }\n                return _vertexPool[_vertexCount++];\n            }\n            function getNextFaceInPool() {\n                if (_faceCount === _facePoolLength) {\n                    var face = new THREE.RenderableFace();\n                    _facePool.push(face);\n                    _facePoolLength++;\n                    _faceCount++;\n                    return face;\n                }\n                return _facePool[_faceCount++];\n            }\n            function getNextLineInPool() {\n                if (_lineCount === _linePoolLength) {\n                    var line = new THREE.RenderableLine();\n                    _linePool.push(line);\n                    _linePoolLength++;\n                    _lineCount++;\n                    return line;\n                }\n                return _linePool[_lineCount++];\n            }\n            function getNextSpriteInPool() {\n                if (_spriteCount === _spritePoolLength) {\n                    var sprite = new THREE.RenderableSprite();\n                    _spritePool.push(sprite);\n                    _spritePoolLength++;\n                    _spriteCount++;\n                    return sprite;\n                }\n                return _spritePool[_spriteCount++];\n            }\n            function painterSort(a, b) {\n                if (a.renderOrder !== b.renderOrder) {\n                    return a.renderOrder - b.renderOrder;\n                } else if (a.z !== b.z) {\n                    return b.z - a.z;\n                } else if (a.id !== b.id) {\n                    return a.id - b.id;\n                } else {\n                    return 0;\n                }\n            }\n            function clipLine(s1, s2) {\n                var alpha1 = 0, alpha2 = 1, bc1near = s1.z + s1.w, bc2near = s2.z + s2.w, bc1far = -s1.z + s1.w, bc2far = -s2.z + s2.w;\n                if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n                    return true;\n                } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n                    return false;\n                } else {\n                    if (bc1near < 0) {\n                        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n                    } else if (bc2near < 0) {\n                        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n                    }\n                    if (bc1far < 0) {\n                        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n                    } else if (bc2far < 0) {\n                        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n                    }\n                    if (alpha2 < alpha1) {\n                        return false;\n                    } else {\n                        s1.lerp(s2, alpha1);\n                        s2.lerp(s1, 1 - alpha2);\n                        return true;\n                    }\n                }\n            }\n        };\n    }, function(module, exports, __webpack_require__) {\n        /*!\n\t * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        var isObject = __webpack_require__(8);\n        function isObjectObject(o) {\n            return isObject(o) === true && Object.prototype.toString.call(o) === \"[object Object]\";\n        }\n        module.exports = function isPlainObject(o) {\n            var ctor, prot;\n            if (isObjectObject(o) === false) return false;\n            ctor = o.constructor;\n            if (typeof ctor !== \"function\") return false;\n            prot = ctor.prototype;\n            if (isObjectObject(prot) === false) return false;\n            if (prot.hasOwnProperty(\"isPrototypeOf\") === false) {\n                return false;\n            }\n            return true;\n        };\n    }, function(module, exports) {\n        /*!\n\t * isobject <https://github.com/jonschlinkert/isobject>\n\t *\n\t * Copyright (c) 2014-2015, Jon Schlinkert.\n\t * Licensed under the MIT License.\n\t */\n        \"use strict\";\n        module.exports = function isObject(val) {\n            return val != null && typeof val === \"object\" && !Array.isArray(val);\n        };\n    }, function(module, exports, __webpack_require__) {\n        var __WEBPACK_AMD_DEFINE_RESULT__;\n        !function(undefined) {\n            var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n                return Object.prototype.toString.call(obj) === \"[object Array]\";\n            };\n            var defaultMaxListeners = 10;\n            function init() {\n                this._events = {};\n                if (this._conf) {\n                    configure.call(this, this._conf);\n                }\n            }\n            function configure(conf) {\n                if (conf) {\n                    this._conf = conf;\n                    conf.delimiter && (this.delimiter = conf.delimiter);\n                    conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n                    conf.wildcard && (this.wildcard = conf.wildcard);\n                    conf.newListener && (this.newListener = conf.newListener);\n                    if (this.wildcard) {\n                        this.listenerTree = {};\n                    }\n                }\n            }\n            function EventEmitter(conf) {\n                this._events = {};\n                this.newListener = false;\n                configure.call(this, conf);\n            }\n            function searchListenerTree(handlers, type, tree, i) {\n                if (!tree) {\n                    return [];\n                }\n                var listeners = [], leaf, len, branch, xTree, xxTree, isolatedBranch, endReached, typeLength = type.length, currentType = type[i], nextType = type[i + 1];\n                if (i === typeLength && tree._listeners) {\n                    if (typeof tree._listeners === \"function\") {\n                        handlers && handlers.push(tree._listeners);\n                        return [ tree ];\n                    } else {\n                        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n                            handlers && handlers.push(tree._listeners[leaf]);\n                        }\n                        return [ tree ];\n                    }\n                }\n                if (currentType === \"*\" || currentType === \"**\" || tree[currentType]) {\n                    if (currentType === \"*\") {\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n                            }\n                        }\n                        return listeners;\n                    } else if (currentType === \"**\") {\n                        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === \"*\";\n                        if (endReached && tree._listeners) {\n                            listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n                        }\n                        for (branch in tree) {\n                            if (branch !== \"_listeners\" && tree.hasOwnProperty(branch)) {\n                                if (branch === \"*\" || branch === \"**\") {\n                                    if (tree[branch]._listeners && !endReached) {\n                                        listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n                                    }\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                } else if (branch === nextType) {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n                                } else {\n                                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n                                }\n                            }\n                        }\n                        return listeners;\n                    }\n                    listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n                }\n                xTree = tree[\"*\"];\n                if (xTree) {\n                    searchListenerTree(handlers, type, xTree, i + 1);\n                }\n                xxTree = tree[\"**\"];\n                if (xxTree) {\n                    if (i < typeLength) {\n                        if (xxTree._listeners) {\n                            searchListenerTree(handlers, type, xxTree, typeLength);\n                        }\n                        for (branch in xxTree) {\n                            if (branch !== \"_listeners\" && xxTree.hasOwnProperty(branch)) {\n                                if (branch === nextType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 2);\n                                } else if (branch === currentType) {\n                                    searchListenerTree(handlers, type, xxTree[branch], i + 1);\n                                } else {\n                                    isolatedBranch = {};\n                                    isolatedBranch[branch] = xxTree[branch];\n                                    searchListenerTree(handlers, type, {\n                                        \"**\": isolatedBranch\n                                    }, i + 1);\n                                }\n                            }\n                        }\n                    } else if (xxTree._listeners) {\n                        searchListenerTree(handlers, type, xxTree, typeLength);\n                    } else if (xxTree[\"*\"] && xxTree[\"*\"]._listeners) {\n                        searchListenerTree(handlers, type, xxTree[\"*\"], typeLength);\n                    }\n                }\n                return listeners;\n            }\n            function growListenerTree(type, listener) {\n                type = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                for (var i = 0, len = type.length; i + 1 < len; i++) {\n                    if (type[i] === \"**\" && type[i + 1] === \"**\") {\n                        return;\n                    }\n                }\n                var tree = this.listenerTree;\n                var name = type.shift();\n                while (name) {\n                    if (!tree[name]) {\n                        tree[name] = {};\n                    }\n                    tree = tree[name];\n                    if (type.length === 0) {\n                        if (!tree._listeners) {\n                            tree._listeners = listener;\n                        } else if (typeof tree._listeners === \"function\") {\n                            tree._listeners = [ tree._listeners, listener ];\n                        } else if (isArray(tree._listeners)) {\n                            tree._listeners.push(listener);\n                            if (!tree._listeners.warned) {\n                                var m = defaultMaxListeners;\n                                if (typeof this._events.maxListeners !== \"undefined\") {\n                                    m = this._events.maxListeners;\n                                }\n                                if (m > 0 && tree._listeners.length > m) {\n                                    tree._listeners.warned = true;\n                                    console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", tree._listeners.length);\n                                    console.trace();\n                                }\n                            }\n                        }\n                        return true;\n                    }\n                    name = type.shift();\n                }\n                return true;\n            }\n            EventEmitter.prototype.delimiter = \".\";\n            EventEmitter.prototype.setMaxListeners = function(n) {\n                this._events || init.call(this);\n                this._events.maxListeners = n;\n                if (!this._conf) this._conf = {};\n                this._conf.maxListeners = n;\n            };\n            EventEmitter.prototype.event = \"\";\n            EventEmitter.prototype.once = function(event, fn) {\n                this.many(event, 1, fn);\n                return this;\n            };\n            EventEmitter.prototype.many = function(event, ttl, fn) {\n                var self = this;\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"many only accepts instances of Function\");\n                }\n                function listener() {\n                    if (--ttl === 0) {\n                        self.off(event, listener);\n                    }\n                    fn.apply(this, arguments);\n                }\n                listener._origin = fn;\n                this.on(event, listener);\n                return self;\n            };\n            EventEmitter.prototype.emit = function() {\n                this._events || init.call(this);\n                var type = arguments[0];\n                if (type === \"newListener\" && !this.newListener) {\n                    if (!this._events.newListener) {\n                        return false;\n                    }\n                }\n                if (this._all) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    for (i = 0, l = this._all.length; i < l; i++) {\n                        this.event = type;\n                        this._all[i].apply(this, args);\n                    }\n                }\n                if (type === \"error\") {\n                    if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n                        if (arguments[1] instanceof Error) {\n                            throw arguments[1];\n                        } else {\n                            throw new Error(\"Uncaught, unspecified 'error' event.\");\n                        }\n                        return false;\n                    }\n                }\n                var handler;\n                if (this.wildcard) {\n                    handler = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n                } else {\n                    handler = this._events[type];\n                }\n                if (typeof handler === \"function\") {\n                    this.event = type;\n                    if (arguments.length === 1) {\n                        handler.call(this);\n                    } else if (arguments.length > 1) switch (arguments.length) {\n                      case 2:\n                        handler.call(this, arguments[1]);\n                        break;\n\n                      case 3:\n                        handler.call(this, arguments[1], arguments[2]);\n                        break;\n\n                      default:\n                        var l = arguments.length;\n                        var args = new Array(l - 1);\n                        for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                        handler.apply(this, args);\n                    }\n                    return true;\n                } else if (handler) {\n                    var l = arguments.length;\n                    var args = new Array(l - 1);\n                    for (var i = 1; i < l; i++) args[i - 1] = arguments[i];\n                    var listeners = handler.slice();\n                    for (var i = 0, l = listeners.length; i < l; i++) {\n                        this.event = type;\n                        listeners[i].apply(this, args);\n                    }\n                    return listeners.length > 0 || !!this._all;\n                } else {\n                    return !!this._all;\n                }\n            };\n            EventEmitter.prototype.on = function(type, listener) {\n                if (typeof type === \"function\") {\n                    this.onAny(type);\n                    return this;\n                }\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"on only accepts instances of Function\");\n                }\n                this._events || init.call(this);\n                this.emit(\"newListener\", type, listener);\n                if (this.wildcard) {\n                    growListenerTree.call(this, type, listener);\n                    return this;\n                }\n                if (!this._events[type]) {\n                    this._events[type] = listener;\n                } else if (typeof this._events[type] === \"function\") {\n                    this._events[type] = [ this._events[type], listener ];\n                } else if (isArray(this._events[type])) {\n                    this._events[type].push(listener);\n                    if (!this._events[type].warned) {\n                        var m = defaultMaxListeners;\n                        if (typeof this._events.maxListeners !== \"undefined\") {\n                            m = this._events.maxListeners;\n                        }\n                        if (m > 0 && this._events[type].length > m) {\n                            this._events[type].warned = true;\n                            console.error(\"(node) warning: possible EventEmitter memory \" + \"leak detected. %d listeners added. \" + \"Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\n                            console.trace();\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.onAny = function(fn) {\n                if (typeof fn !== \"function\") {\n                    throw new Error(\"onAny only accepts instances of Function\");\n                }\n                if (!this._all) {\n                    this._all = [];\n                }\n                this._all.push(fn);\n                return this;\n            };\n            EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n            EventEmitter.prototype.off = function(type, listener) {\n                if (typeof listener !== \"function\") {\n                    throw new Error(\"removeListener only takes instances of Function\");\n                }\n                var handlers, leafs = [];\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                } else {\n                    if (!this._events[type]) return this;\n                    handlers = this._events[type];\n                    leafs.push({\n                        _listeners: handlers\n                    });\n                }\n                for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                    var leaf = leafs[iLeaf];\n                    handlers = leaf._listeners;\n                    if (isArray(handlers)) {\n                        var position = -1;\n                        for (var i = 0, length = handlers.length; i < length; i++) {\n                            if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n                                position = i;\n                                break;\n                            }\n                        }\n                        if (position < 0) {\n                            continue;\n                        }\n                        if (this.wildcard) {\n                            leaf._listeners.splice(position, 1);\n                        } else {\n                            this._events[type].splice(position, 1);\n                        }\n                        if (handlers.length === 0) {\n                            if (this.wildcard) {\n                                delete leaf._listeners;\n                            } else {\n                                delete this._events[type];\n                            }\n                        }\n                        return this;\n                    } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n                        if (this.wildcard) {\n                            delete leaf._listeners;\n                        } else {\n                            delete this._events[type];\n                        }\n                    }\n                }\n                return this;\n            };\n            EventEmitter.prototype.offAny = function(fn) {\n                var i = 0, l = 0, fns;\n                if (fn && this._all && this._all.length > 0) {\n                    fns = this._all;\n                    for (i = 0, l = fns.length; i < l; i++) {\n                        if (fn === fns[i]) {\n                            fns.splice(i, 1);\n                            return this;\n                        }\n                    }\n                } else {\n                    this._all = [];\n                }\n                return this;\n            };\n            EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n            EventEmitter.prototype.removeAllListeners = function(type) {\n                if (arguments.length === 0) {\n                    !this._events || init.call(this);\n                    return this;\n                }\n                if (this.wildcard) {\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n                    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n                        var leaf = leafs[iLeaf];\n                        leaf._listeners = null;\n                    }\n                } else {\n                    if (!this._events[type]) return this;\n                    this._events[type] = null;\n                }\n                return this;\n            };\n            EventEmitter.prototype.listeners = function(type) {\n                if (this.wildcard) {\n                    var handlers = [];\n                    var ns = typeof type === \"string\" ? type.split(this.delimiter) : type.slice();\n                    searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n                    return handlers;\n                }\n                this._events || init.call(this);\n                if (!this._events[type]) this._events[type] = [];\n                if (!isArray(this._events[type])) {\n                    this._events[type] = [ this._events[type] ];\n                }\n                return this._events[type];\n            };\n            EventEmitter.prototype.listenersAny = function() {\n                if (this._all) {\n                    return this._all;\n                } else {\n                    return [];\n                }\n            };\n            if (true) {\n                !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n                    return EventEmitter;\n                }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n            } else if (typeof exports === \"object\") {\n                exports.EventEmitter2 = EventEmitter;\n            } else {\n                window.EventEmitter2 = EventEmitter;\n            }\n        }();\n    }, function(module, exports) {\n        module.exports = {\n            Promise: window[\"Promise\"]\n        };\n    }, function(module, exports) {\n        (function() {\n            var ResizeSensor = function(element, callback) {\n                function EventQueue() {\n                    this.q = [];\n                    this.add = function(ev) {\n                        this.q.push(ev);\n                    };\n                    var i, j;\n                    this.call = function() {\n                        for (i = 0, j = this.q.length; i < j; i++) {\n                            this.q[i].call();\n                        }\n                    };\n                }\n                function getComputedStyle(element, prop) {\n                    if (element.currentStyle) {\n                        return element.currentStyle[prop];\n                    } else if (window.getComputedStyle) {\n                        return window.getComputedStyle(element, null).getPropertyValue(prop);\n                    } else {\n                        return element.style[prop];\n                    }\n                }\n                function attachResizeEvent(element, resized) {\n                    if (!element.resizedAttached) {\n                        element.resizedAttached = new EventQueue();\n                        element.resizedAttached.add(resized);\n                    } else if (element.resizedAttached) {\n                        element.resizedAttached.add(resized);\n                        return;\n                    }\n                    element.resizeSensor = document.createElement(\"div\");\n                    element.resizeSensor.className = \"resize-sensor\";\n                    var style = \"position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;\";\n                    var styleChild = \"position: absolute; left: 0; top: 0; transition: 0s;\";\n                    element.resizeSensor.style.cssText = style;\n                    element.resizeSensor.innerHTML = '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' + '<div style=\"' + styleChild + '\"></div>' + \"</div>\" + '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' + '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' + \"</div>\";\n                    element.appendChild(element.resizeSensor);\n                    if (!{\n                        fixed: 1,\n                        absolute: 1\n                    }[getComputedStyle(element, \"position\")]) {\n                        element.style.position = \"relative\";\n                    }\n                    var expand = element.resizeSensor.childNodes[0];\n                    var expandChild = expand.childNodes[0];\n                    var shrink = element.resizeSensor.childNodes[1];\n                    var shrinkChild = shrink.childNodes[0];\n                    var lastWidth, lastHeight;\n                    var reset = function() {\n                        expandChild.style.width = expand.offsetWidth + 10 + \"px\";\n                        expandChild.style.height = expand.offsetHeight + 10 + \"px\";\n                        expand.scrollLeft = expand.scrollWidth;\n                        expand.scrollTop = expand.scrollHeight;\n                        shrink.scrollLeft = shrink.scrollWidth;\n                        shrink.scrollTop = shrink.scrollHeight;\n                        lastWidth = element.offsetWidth;\n                        lastHeight = element.offsetHeight;\n                    };\n                    reset();\n                    var changed = function() {\n                        if (element.resizedAttached) {\n                            element.resizedAttached.call();\n                        }\n                    };\n                    var addEvent = function(el, name, cb) {\n                        if (el.attachEvent) {\n                            el.attachEvent(\"on\" + name, cb);\n                        } else {\n                            el.addEventListener(name, cb);\n                        }\n                    };\n                    var onScroll = function() {\n                        if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\n                            changed();\n                        }\n                        reset();\n                    };\n                    addEvent(expand, \"scroll\", onScroll);\n                    addEvent(shrink, \"scroll\", onScroll);\n                }\n                var elementType = Object.prototype.toString.call(element);\n                var isCollectionTyped = \"[object Array]\" === elementType || \"[object NodeList]\" === elementType || \"[object HTMLCollection]\" === elementType || \"undefined\" !== typeof jQuery && element instanceof jQuery || \"undefined\" !== typeof Elements && element instanceof Elements;\n                if (isCollectionTyped) {\n                    var i = 0, j = element.length;\n                    for (;i < j; i++) {\n                        attachResizeEvent(element[i], callback);\n                    }\n                } else {\n                    attachResizeEvent(element, callback);\n                }\n                this.detach = function() {\n                    if (isCollectionTyped) {\n                        var i = 0, j = element.length;\n                        for (;i < j; i++) {\n                            ResizeSensor.detach(element[i]);\n                        }\n                    } else {\n                        ResizeSensor.detach(element);\n                    }\n                };\n            };\n            ResizeSensor.detach = function(element) {\n                if (element.resizeSensor) {\n                    element.removeChild(element.resizeSensor);\n                    delete element.resizeSensor;\n                    delete element.resizedAttached;\n                }\n            };\n            if (typeof module !== \"undefined\" && typeof module.exports !== \"undefined\") {\n                module.exports = ResizeSensor;\n            } else {\n                window.ResizeSensor = ResizeSensor;\n            }\n        })();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var Trend_1 = __webpack_require__(13);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var Utils_1 = __webpack_require__(14);\n        var Widget_1 = __webpack_require__(17);\n        var TrendsManager_1 = __webpack_require__(18);\n        var Screen_1 = __webpack_require__(19);\n        var AxisMarks_1 = __webpack_require__(20);\n        var interfaces_1 = __webpack_require__(21);\n        var deps_1 = __webpack_require__(3);\n        var CHART_STATE_EVENTS = {\n            INITIAL_STATE_APPLIED: \"initialStateApplied\",\n            READY: \"ready\",\n            DESTROY: \"destroy\",\n            CHANGE: \"change\",\n            TREND_CHANGE: \"trendChange\",\n            TRENDS_CHANGE: \"trendsChange\",\n            ZOOM: \"zoom\",\n            RESIZE: \"resize\",\n            SCROLL: \"scroll\",\n            SCROLL_STOP: \"scrollStop\",\n            PLUGINS_STATE_CHANGED: \"pluginsStateChanged\"\n        };\n        var ChartState = function() {\n            function ChartState(initialState, widgetsClasses, plugins) {\n                if (widgetsClasses === void 0) {\n                    widgetsClasses = {};\n                }\n                if (plugins === void 0) {\n                    plugins = [];\n                }\n                this.data = {\n                    prevState: {},\n                    $el: null,\n                    zoom: 0,\n                    xAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.ALL,\n                            from: 0,\n                            to: 0,\n                            scroll: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 0,\n                                end: 5\n                            },\n                            margin: {\n                                start: 0,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 100,\n                        autoScroll: true,\n                        marks: []\n                    },\n                    yAxis: {\n                        range: {\n                            type: interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END,\n                            from: 0,\n                            to: 0,\n                            zoom: 1,\n                            padding: {\n                                start: 5,\n                                end: 5\n                            },\n                            margin: {\n                                start: 5,\n                                end: 5\n                            }\n                        },\n                        dataType: interfaces_1.AXIS_DATA_TYPE.NUMBER,\n                        gridMinSize: 50,\n                        marks: []\n                    },\n                    animations: {\n                        enabled: true,\n                        trendChangeSpeed: .5,\n                        trendChangeEase: void 0,\n                        zoomSpeed: .25,\n                        zoomEase: void 0,\n                        scrollSpeed: .5,\n                        scrollEase: Linear.easeNone,\n                        autoScrollSpeed: 1,\n                        autoScrollEase: Linear.easeNone\n                    },\n                    autoRender: {\n                        enabled: true,\n                        fps: 0\n                    },\n                    autoResize: true,\n                    renderer: \"WebGLRenderer\",\n                    autoScroll: true,\n                    controls: {\n                        enabled: true\n                    },\n                    trendDefaultState: {\n                        enabled: true,\n                        type: Trend_1.TREND_TYPE.LINE,\n                        data: [],\n                        maxSegmentLength: 1e3,\n                        lineWidth: 2,\n                        lineColor: 16777215,\n                        hasBackground: false,\n                        backgroundColor: \"rgba(#5273BD, 0.15)\",\n                        hasBeacon: false,\n                        settingsForTypes: {\n                            CANDLE: {\n                                minSegmentLengthInPx: 20,\n                                maxSegmentLengthInPx: 40\n                            },\n                            LINE: {\n                                minSegmentLengthInPx: 2,\n                                maxSegmentLengthInPx: 10\n                            }\n                        }\n                    },\n                    cursor: {\n                        dragMode: false,\n                        x: 0,\n                        y: 0\n                    },\n                    backgroundColor: 0,\n                    backgroundOpacity: 1,\n                    showStats: false,\n                    pluginsState: {},\n                    eventEmitterMaxListeners: 20,\n                    maxVisibleSegments: 1280\n                };\n                this.widgetsClasses = {};\n                this.plugins = {};\n                this.isReady = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.ee.setMaxListeners(initialState.eventEmitterMaxListeners || this.data.eventEmitterMaxListeners);\n                this.widgetsClasses = widgetsClasses;\n                this.trendsManager = new TrendsManager_1.TrendsManager(this, initialState);\n                initialState.trends = this.trendsManager.calculatedOptions;\n                initialState = this.installPlugins(plugins, initialState);\n                this.setState(initialState);\n                this.setState({\n                    computedData: this.getComputedData()\n                });\n                this.savePrevState();\n                this.screen = new Screen_1.Screen(this);\n                this.xAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.X);\n                this.yAxisMarks = new AxisMarks_1.AxisMarks(this, interfaces_1.AXIS_TYPE.Y);\n                this.initListeners();\n                this.ee.emit(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, initialState);\n                this.isReady = true;\n                this.ee.emit(CHART_STATE_EVENTS.READY, initialState);\n            }\n            ChartState.prototype.destroy = function() {\n                this.ee.emit(CHART_STATE_EVENTS.DESTROY);\n                this.ee.removeAllListeners();\n                this.data = {};\n            };\n            ChartState.prototype.onDestroy = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.DESTROY, cb);\n            };\n            ChartState.prototype.onInitialStateApplied = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.INITIAL_STATE_APPLIED, cb);\n            };\n            ChartState.prototype.onReady = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.READY, cb);\n            };\n            ChartState.prototype.onChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.CHANGE, cb);\n            };\n            ChartState.prototype.onTrendChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TREND_CHANGE, cb);\n            };\n            ChartState.prototype.onTrendsChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.TRENDS_CHANGE, cb);\n            };\n            ChartState.prototype.onScrollStop = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL_STOP, cb);\n            };\n            ChartState.prototype.onScroll = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.SCROLL, cb);\n            };\n            ChartState.prototype.onZoom = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.ZOOM, cb);\n            };\n            ChartState.prototype.onResize = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.RESIZE, cb);\n            };\n            ChartState.prototype.onPluginsStateChange = function(cb) {\n                return this.ee.subscribe(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, cb);\n            };\n            ChartState.prototype.getTrend = function(trendName) {\n                return this.trendsManager.getTrend(trendName);\n            };\n            ChartState.prototype.setState = function(newState, eventData, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var stateData = this.data;\n                var changedProps = {};\n                for (var key in newState) {\n                    if (stateData[key] !== newState[key]) {\n                        changedProps[key] = newState[key];\n                    }\n                }\n                this.savePrevState(changedProps);\n                var trendsData = {};\n                if (newState.trends) for (var trendName in newState.trends) {\n                    var trendOptions = newState.trends[trendName];\n                    if (trendOptions.data) trendsData[trendName] = trendOptions.data;\n                    delete trendOptions.data;\n                }\n                var newStateContainsData = Object.keys(trendsData).length > 0;\n                this.data = Utils_1.Utils.deepMerge(this.data, newState, false);\n                if (newStateContainsData) for (var trendName in trendsData) {\n                    this.data.trends[trendName].data = trendsData[trendName];\n                }\n                if (silent) return;\n                var recalculateResult = this.recalculateState(changedProps);\n                changedProps = recalculateResult.changedProps;\n                this.emitChangedStateEvents(changedProps, eventData);\n            };\n            ChartState.prototype.recalculateState = function(changedProps) {\n                var data = this.data;\n                var patch = {};\n                var actualData = Utils_1.Utils.deepMerge({}, data);\n                if (changedProps.widgets || !data.widgets) {\n                    patch.widgets = {};\n                    var widgetsOptions = data.widgets || {};\n                    for (var widgetName in this.widgetsClasses) {\n                        var WidgetClass = this.widgetsClasses[widgetName];\n                        var userOptions = widgetsOptions[widgetName] || {};\n                        var defaultOptions = WidgetClass.getDefaultOptions() || Widget_1.ChartWidget.getDefaultOptions();\n                        patch.widgets[widgetName] = Utils_1.Utils.deepMerge(defaultOptions, userOptions);\n                    }\n                }\n                var cursorOptions = changedProps.cursor;\n                var isMouseDrag = cursorOptions && data.cursor.dragMode && data.prevState.cursor.dragMode;\n                if (isMouseDrag) {\n                    var oldX = data.prevState.cursor.x;\n                    var currentX = cursorOptions.x;\n                    var currentScroll = data.xAxis.range.scroll;\n                    var deltaXVal = this.pxToValueByXAxis(oldX - currentX);\n                    patch.xAxis = {\n                        range: {\n                            scroll: currentScroll + deltaXVal\n                        }\n                    };\n                    actualData = Utils_1.Utils.deepMerge(actualData, {\n                        xAxis: patch.xAxis\n                    });\n                }\n                var chartWasResized = changedProps.width != void 0 || changedProps.height != void 0;\n                var scrollXChanged = false;\n                var needToRecalculateXAxis = isMouseDrag || chartWasResized || changedProps.xAxis && changedProps.xAxis.range || this.data.xAxis.range.zeroVal == void 0;\n                if (needToRecalculateXAxis) {\n                    var xAxisPatch = this.recalculateXAxis(actualData, changedProps);\n                    if (xAxisPatch) {\n                        scrollXChanged = true;\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            xAxis: xAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            xAxis: xAxisPatch\n                        });\n                    }\n                }\n                var needToRecalculateYAxis = chartWasResized || (data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END || data.yAxis.range.type === interfaces_1.AXIS_RANGE_TYPE.AUTO || data.yAxis.range.isMirrorMode) && (scrollXChanged || changedProps.trends || changedProps.yAxis) || this.data.yAxis.range.zeroVal == void 0;\n                if (needToRecalculateYAxis) {\n                    var yAxisPatch = this.recalculateYAxis(actualData);\n                    if (yAxisPatch) {\n                        patch = Utils_1.Utils.deepMerge(patch, {\n                            yAxis: yAxisPatch\n                        });\n                        actualData = Utils_1.Utils.deepMerge(actualData, {\n                            yAxis: yAxisPatch\n                        });\n                    }\n                }\n                this.savePrevState(patch);\n                var allChangedProps = Utils_1.Utils.deepMerge(changedProps, patch);\n                patch.computedData = this.getComputedData(allChangedProps);\n                this.savePrevState(patch);\n                this.data = Utils_1.Utils.deepMerge(this.data, patch);\n                return {\n                    changedProps: allChangedProps,\n                    patch: patch\n                };\n            };\n            ChartState.prototype.getComputedData = function(changedProps) {\n                var computeAll = !changedProps;\n                var computedData = {};\n                if (computeAll || changedProps.trends && this.trendsManager) {\n                    computedData.trends = {\n                        maxXVal: this.trendsManager.getEndXVal(),\n                        minXVal: this.trendsManager.getStartXVal()\n                    };\n                }\n                return computedData;\n            };\n            ChartState.prototype.savePrevState = function(changedProps) {\n                if (!changedProps) changedProps = this.data;\n                var prevState = this.data.prevState;\n                Utils_1.Utils.copyProps(this.data, prevState, changedProps, [ \"trends\" ]);\n            };\n            ChartState.prototype.emitChangedStateEvents = function(changedProps, eventData) {\n                var prevState = this.data.prevState;\n                this.ee.emit(CHART_STATE_EVENTS.CHANGE, changedProps, eventData);\n                for (var key in changedProps) {\n                    this.ee.emit(key + \"Change\", changedProps[key], eventData);\n                }\n                if (!this.isReady) return;\n                var scrollStopEventNeeded = changedProps.cursor && changedProps.cursor.dragMode === false && prevState.cursor.dragMode === true;\n                scrollStopEventNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL_STOP, changedProps);\n                var scrollChangeEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.scroll !== void 0;\n                scrollChangeEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.SCROLL, changedProps);\n                var zoomEventsNeeded = changedProps.xAxis && changedProps.xAxis.range && changedProps.xAxis.range.zoom || changedProps.yAxis && changedProps.yAxis.range && changedProps.yAxis.range.zoom;\n                zoomEventsNeeded && this.ee.emit(CHART_STATE_EVENTS.ZOOM, changedProps);\n                var resizeEventNeeded = changedProps.width || changedProps.height;\n                resizeEventNeeded && this.ee.emit(CHART_STATE_EVENTS.RESIZE, changedProps);\n                var pluginStateChangedEventNeeded = !!changedProps.pluginsState;\n                pluginStateChangedEventNeeded && this.ee.emit(CHART_STATE_EVENTS.PLUGINS_STATE_CHANGED, changedProps.pluginsState);\n            };\n            ChartState.prototype.installPlugins = function(plugins, initialState) {\n                var _this = this;\n                initialState.pluginsState = {};\n                plugins.forEach(function(plugin) {\n                    var PluginClass = plugin.constructor;\n                    var pluginName = PluginClass.NAME;\n                    PluginClass.pluginWidgets.forEach(function(PluginWidget) {\n                        return _this.widgetsClasses[PluginWidget.widgetName] = PluginWidget;\n                    });\n                    initialState.pluginsState[pluginName] = Utils_1.Utils.deepMerge({}, plugin.initialState);\n                    _this.plugins[pluginName] = plugin;\n                    plugin.setupChartState(_this);\n                });\n                return initialState;\n            };\n            ChartState.prototype.getPlugin = function(pluginName) {\n                return this.plugins[pluginName];\n            };\n            ChartState.prototype.initListeners = function() {\n                var _this = this;\n                this.ee.on(CHART_STATE_EVENTS.TRENDS_CHANGE, function(changedTrends, newData) {\n                    _this.handleTrendsChange(changedTrends, newData);\n                });\n            };\n            ChartState.prototype.handleTrendsChange = function(changedTrends, newData) {\n                for (var trendName in changedTrends) {\n                    this.ee.emit(CHART_STATE_EVENTS.TREND_CHANGE, trendName, changedTrends[trendName], newData);\n                }\n            };\n            ChartState.prototype.recalculateXAxis = function(actualData, changedProps) {\n                var axisRange = actualData.xAxis.range;\n                var patch = {\n                    range: {}\n                };\n                var isInitialize = axisRange.zeroVal == void 0;\n                var zeroVal, scaleFactor;\n                var zoom = axisRange.zoom;\n                if (axisRange.isMirrorMode) {\n                    Utils_1.Utils.error(\"range.isMirrorMode available only for yAxis.range\");\n                }\n                if (isInitialize) {\n                    zeroVal = axisRange.from;\n                    scaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                } else {\n                    zeroVal = axisRange.zeroVal;\n                    scaleFactor = axisRange.scaleFactor;\n                    if (changedProps.xAxis && (changedProps.xAxis.range.from != void 0 || changedProps.xAxis.range.to)) {\n                        if (changedProps.xAxis.range.zoom) {\n                            Utils_1.Utils.error('Impossible to change \"range.zoom\" then \"range.from\" or \"range.to\" present');\n                        }\n                        var currentScaleFactor = actualData.width / (axisRange.to - axisRange.from);\n                        patch.range.scroll = axisRange.from - zeroVal;\n                        patch.range.zoom = currentScaleFactor / scaleFactor;\n                        return patch;\n                    }\n                }\n                do {\n                    var from = zeroVal + axisRange.scroll;\n                    var to = from + actualData.width / (scaleFactor * zoom);\n                    var rangeLength = to - from;\n                    var needToRecalculateZoom = false;\n                    var rangeMoreThenMaxValue = axisRange.maxLength && rangeLength > axisRange.maxLength;\n                    var rangeLessThenMinValue = axisRange.minLength && rangeLength < axisRange.minLength;\n                    needToRecalculateZoom = rangeMoreThenMaxValue || rangeLessThenMinValue;\n                    if (needToRecalculateZoom) {\n                        var fixScale = rangeLength > axisRange.maxLength ? rangeLength / axisRange.maxLength : rangeLength / axisRange.minLength;\n                        var zoom = zoom * fixScale;\n                        patch.range.zoom = zoom;\n                    }\n                } while (needToRecalculateZoom);\n                patch.range.from = from;\n                patch.range.to = to;\n                return patch;\n            };\n            ChartState.prototype.recalculateYAxis = function(actualData) {\n                var patch = {\n                    range: {}\n                };\n                var yAxisRange = actualData.yAxis.range;\n                var isInitialize = yAxisRange.scaleFactor == void 0;\n                var trends = this.trendsManager;\n                var trendsEndXVal = trends.getEndXVal();\n                var trendsStartXVal = trends.getStartXVal();\n                var xRange = actualData.xAxis.range;\n                var xFrom = xRange.from, xTo = xRange.to;\n                var xRangeLength = xTo - xFrom;\n                var zeroVal, scaleFactor, scroll, zoom, needToZoom;\n                if (xTo > trendsEndXVal) {\n                    xTo = trendsEndXVal;\n                    xFrom = xTo - xRangeLength;\n                } else if (xFrom < trendsStartXVal) {\n                    xFrom = trendsStartXVal;\n                    xTo = xFrom + xRangeLength;\n                }\n                var maxY = trends.getMaxYVal(xFrom, xTo);\n                var minY = trends.getMinYVal(xFrom, xTo);\n                var trendLastY = trends.getMaxYVal(trendsEndXVal, trendsEndXVal);\n                if (yAxisRange.type == interfaces_1.AXIS_RANGE_TYPE.RELATIVE_END) {\n                    if (trendLastY > maxY) maxY = trendLastY;\n                    if (trendLastY < minY) minY = trendLastY;\n                }\n                if (yAxisRange.isMirrorMode) {\n                    if (yAxisRange.zeroVal == void 0) Utils_1.Utils.error(\"range.zeroVal must be set when range.isMirrorMode\");\n                    var distanceFromZeroValForMaxY = Math.abs(yAxisRange.zeroVal - maxY);\n                    var distanceFromZeroValForMinY = Math.abs(yAxisRange.zeroVal - minY);\n                    var maxDistanceFromZeroVal = Math.max(distanceFromZeroValForMaxY, distanceFromZeroValForMinY);\n                    maxY = yAxisRange.zeroVal + maxDistanceFromZeroVal;\n                    minY = yAxisRange.zeroVal - maxDistanceFromZeroVal;\n                }\n                var margin = yAxisRange.margin;\n                var padding = {\n                    start: yAxisRange.padding.start + margin.start,\n                    end: yAxisRange.padding.end + margin.end\n                };\n                if (padding.end + padding.start >= actualData.height) {\n                    Utils_1.Utils.warn(\"Sum of padding and margins of yAxi more then available chart height. Trends can be rendered incorrectly\");\n                }\n                var rangeLength = maxY - minY;\n                var paddingTopInPercents = padding.end / actualData.height;\n                var paddingBottomInPercents = padding.start / actualData.height;\n                var rangeLengthInPercents = 1 - paddingTopInPercents - paddingBottomInPercents;\n                var visibleRangeLength = rangeLength / rangeLengthInPercents;\n                var fromVal = minY - visibleRangeLength * paddingBottomInPercents;\n                var toVal = maxY + visibleRangeLength * paddingTopInPercents;\n                if (isInitialize) {\n                    zeroVal = yAxisRange.zeroVal != void 0 ? yAxisRange.zeroVal : fromVal;\n                    scaleFactor = actualData.height / (toVal - fromVal);\n                    patch = {\n                        range: {\n                            zeroVal: zeroVal,\n                            scaleFactor: scaleFactor\n                        }\n                    };\n                    needToZoom = true;\n                } else {\n                    scaleFactor = yAxisRange.scaleFactor;\n                    zeroVal = yAxisRange.zeroVal;\n                    var maxScreenY = Math.round(this.getScreenYByValue(maxY));\n                    var minScreenY = Math.round(this.getScreenYByValue(minY));\n                    needToZoom = maxScreenY > actualData.height - margin.end || maxScreenY < actualData.height - padding.end || minScreenY < margin.start || minScreenY > padding.start;\n                }\n                if (!needToZoom) return null;\n                scroll = fromVal - zeroVal;\n                zoom = actualData.height / (toVal - fromVal) / scaleFactor;\n                var currentAxisRange = this.data.yAxis.range;\n                if (currentAxisRange.from !== fromVal) patch.range.from = fromVal;\n                if (currentAxisRange.to !== toVal) patch.range.to = toVal;\n                if (currentAxisRange.scroll !== scroll) patch.range.scroll = scroll;\n                if (currentAxisRange.zoom !== zoom) patch.range.zoom = zoom;\n                return patch;\n            };\n            ChartState.prototype.zoom = function(zoomValue, origin) {\n                var _this = this;\n                if (origin === void 0) {\n                    origin = .5;\n                }\n                var _a = this.data.xAxis.range, zoom = _a.zoom, scroll = _a.scroll, scaleFactor = _a.scaleFactor;\n                var newZoom = zoom * zoomValue;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                var nextRange = this.data.width / (scaleFactor * newZoom);\n                var newScroll = scroll + (currentRange - nextRange) * origin;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            zoom: newZoom,\n                            scroll: newScroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.zoomSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.zoomToRange = function(range, origin) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom;\n                var currentRange = this.data.width / (scaleFactor * zoom);\n                return this.zoom(currentRange / range, origin);\n            };\n            ChartState.prototype.scrollToEnd = function() {\n                var _this = this;\n                var state = this.data;\n                var endXVal = this.trendsManager.getEndXVal();\n                var range = state.xAxis.range;\n                var scroll = endXVal - this.pxToValueByXAxis(state.width) + this.pxToValueByXAxis(range.padding.end) - range.zeroVal;\n                this.setState({\n                    xAxis: {\n                        range: {\n                            scroll: scroll\n                        }\n                    }\n                });\n                return new deps_1.Promise(function(resolve) {\n                    var animationTime = _this.data.animations.enabled ? _this.data.animations.scrollSpeed : 0;\n                    setTimeout(resolve, animationTime * 1e3);\n                });\n            };\n            ChartState.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.data.xAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.data.yAxis.range, scaleFactor = _a.scaleFactor, zoom = _a.zoom, zeroVal = _a.zeroVal;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            ChartState.prototype.getValueOnXAxis = function(x) {\n                return this.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.data.xAxis.range.scaleFactor * this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.data.yAxis.range.scaleFactor * this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.data.xAxis.range.scaleFactor / this.data.xAxis.range.zoom;\n            };\n            ChartState.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.data.yAxis.range.scaleFactor / this.data.yAxis.range.zoom;\n            };\n            ChartState.prototype.getValueByScreenX = function(x) {\n                var _a = this.data.xAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByXAxis(x);\n            };\n            ChartState.prototype.getValueByScreenY = function(y) {\n                var _a = this.data.yAxis.range, zeroVal = _a.zeroVal, scroll = _a.scroll;\n                return zeroVal + scroll + this.pxToValueByYAxis(y);\n            };\n            ChartState.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenYByValue = function(yVal) {\n                var _a = this.data.yAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByYAxis(yVal - zeroVal - scroll);\n            };\n            ChartState.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            ChartState.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            ChartState.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            ChartState.prototype.getScreenLeftVal = function() {\n                return this.getValueByScreenX(0);\n            };\n            ChartState.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.data.width);\n            };\n            ChartState.prototype.getPaddingRight = function() {\n                return this.getValueByScreenX(this.data.width - this.data.xAxis.range.padding.end);\n            };\n            return ChartState;\n        }();\n        exports.ChartState = ChartState;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var TrendSegmentsManager_1 = __webpack_require__(15);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var deps_1 = __webpack_require__(3);\n        var EVENTS = {\n            CHANGE: \"Change\",\n            PREPEND_REQUEST: \"prependRequest\"\n        };\n        (function(TREND_TYPE) {\n            TREND_TYPE[TREND_TYPE[\"LINE\"] = 0] = \"LINE\";\n            TREND_TYPE[TREND_TYPE[\"CANDLE\"] = 1] = \"CANDLE\";\n        })(exports.TREND_TYPE || (exports.TREND_TYPE = {}));\n        var TREND_TYPE = exports.TREND_TYPE;\n        var Trend = function() {\n            function Trend(chartState, trendName, initialState) {\n                this.minXVal = Infinity;\n                this.minYVal = Infinity;\n                this.maxXVal = -Infinity;\n                this.maxYVal = -Infinity;\n                var options = initialState.trends[trendName];\n                this.name = trendName;\n                this.chartState = chartState;\n                this.calculatedOptions = Utils_1.Utils.deepMerge(this.chartState.data.trendDefaultState, options);\n                this.calculatedOptions.name = trendName;\n                if (options.dataset) this.calculatedOptions.data = Trend.prepareData(options.dataset);\n                this.calculatedOptions.dataset = [];\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvents();\n            }\n            Trend.prototype.onInitialStateApplied = function() {\n                this.segmentsManager = new TrendSegmentsManager_1.TrendSegmentsManager(this.chartState, this);\n            };\n            Trend.prototype.bindEvents = function() {\n                var _this = this;\n                var chartState = this.chartState;\n                chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateApplied();\n                });\n                chartState.onScrollStop(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onZoom(function() {\n                    return _this.checkForPrependRequest();\n                });\n                chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    return _this.ee.emit(EVENTS.CHANGE, changedOptions, newData);\n                });\n                chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            Trend.prototype.getCalculatedOptions = function() {\n                return this.calculatedOptions;\n            };\n            Trend.prototype.appendData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData());\n                var updatedTrendData = options.data.concat(newData);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.prependData = function(rawData) {\n                var options = this.getOptions();\n                var newData = Trend.prepareData(rawData, this.getData(), true);\n                var updatedTrendData = newData.concat(options.data);\n                this.changeData(updatedTrendData, newData);\n            };\n            Trend.prototype.changeData = function(allData, newData) {\n                for (var _i = 0, newData_1 = newData; _i < newData_1.length; _i++) {\n                    var item = newData_1[_i];\n                    if (item.xVal < this.minXVal) this.minXVal = item.xVal;\n                    if (item.xVal > this.maxXVal) this.maxXVal = item.xVal;\n                    if (item.yVal < this.minYVal) this.minYVal = item.yVal;\n                    if (item.yVal > this.maxYVal) this.maxYVal = item.yVal;\n                }\n                var options = this.getOptions();\n                var statePatch = {\n                    trends: (_a = {}, _a[options.name] = {\n                        data: allData\n                    }, _a)\n                };\n                this.chartState.setState(statePatch, newData);\n                var _a;\n            };\n            Trend.prototype.getData = function(fromX, toX) {\n                var data = this.getOptions().data;\n                if (fromX == void 0 && toX == void 0) return data;\n                fromX = fromX !== void 0 ? fromX : data[0].xVal;\n                toX = toX !== void 0 ? toX : data[data.length].xVal;\n                var filteredData = [];\n                for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                    var item = data_1[_i];\n                    if (item.xVal < fromX) continue;\n                    if (item.xVal > toX) break;\n                    filteredData.push(item);\n                }\n                return filteredData;\n            };\n            Trend.prototype.getFirstItem = function() {\n                return this.getOptions().data[0];\n            };\n            Trend.prototype.getLastItem = function() {\n                var data = this.getOptions().data;\n                return data[data.length - 1];\n            };\n            Trend.prototype.getOptions = function() {\n                return this.chartState.data.trends[this.name];\n            };\n            Trend.prototype.setOptions = function(options) {\n                this.chartState.setState({\n                    trends: (_a = {}, _a[this.name] = options, _a)\n                });\n                var _a;\n            };\n            Trend.prototype.onPrependRequest = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.PREPEND_REQUEST, cb);\n                return function() {\n                    _this.ee.off(EVENTS.PREPEND_REQUEST, cb);\n                };\n            };\n            Trend.prototype.onChange = function(cb) {\n                var _this = this;\n                this.ee.on(EVENTS.CHANGE, cb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, cb);\n                };\n            };\n            Trend.prototype.onDataChange = function(cb) {\n                var _this = this;\n                var onChangeCb = function(changedOptions, newData) {\n                    if (newData) cb(newData);\n                };\n                this.ee.on(EVENTS.CHANGE, onChangeCb);\n                return function() {\n                    _this.ee.off(EVENTS.CHANGE, onChangeCb);\n                };\n            };\n            Trend.prototype.checkForPrependRequest = function() {\n                var _this = this;\n                if (this.prependRequest) return;\n                var chartState = this.chartState;\n                var minXVal = chartState.data.computedData.trends.minXVal;\n                var minScreenX = chartState.getScreenXByValue(minXVal);\n                var needToRequest = minScreenX > 0;\n                var _a = chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var requestedDataLength = to - from;\n                if (!needToRequest) return;\n                this.prependRequest = new deps_1.Promise(function(resolve, reject) {\n                    _this.ee.emit(EVENTS.PREPEND_REQUEST, requestedDataLength, resolve, reject);\n                });\n                this.prependRequest.then(function(newData) {\n                    _this.prependData(newData);\n                    _this.prependRequest = null;\n                }, function() {\n                    _this.prependRequest = null;\n                });\n            };\n            Trend.prepareData = function(newData, currentData, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var data = [];\n                if (typeof newData[0] == \"number\") {\n                    currentData = currentData || [];\n                    var initialItem = void 0;\n                    var xVal = void 0;\n                    if (isPrepend) {\n                        initialItem = currentData[0];\n                        xVal = initialItem.xVal - newData.length;\n                    } else {\n                        initialItem = currentData[currentData.length - 1];\n                        xVal = initialItem ? initialItem.xVal + 1 : 0;\n                    }\n                    for (var _i = 0, _a = newData; _i < _a.length; _i++) {\n                        var yVal = _a[_i];\n                        data.push({\n                            xVal: xVal,\n                            yVal: yVal,\n                            id: Utils_1.Utils.getUid()\n                        });\n                        xVal++;\n                    }\n                } else {\n                    data = newData;\n                }\n                return data;\n            };\n            return Trend;\n        }();\n        exports.Trend = Trend;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        function deepmerge(target, src, mergeArrays) {\n            if (mergeArrays === void 0) {\n                mergeArrays = true;\n            }\n            var array = Array.isArray(src);\n            var dst = array && [] || {};\n            if (array) {\n                target = target || [];\n                if (mergeArrays) {\n                    dst = dst.concat(target);\n                }\n                src.forEach(function(e, i) {\n                    if (typeof dst[i] === \"undefined\") {\n                        dst[i] = e;\n                    } else if (typeof e === \"object\") {\n                        dst[i] = deepmerge(target[i], e, mergeArrays);\n                    } else {\n                        if (target.indexOf(e) === -1) {\n                            dst.push(e);\n                        }\n                    }\n                });\n            } else {\n                if (target && typeof target === \"object\") {\n                    Object.keys(target).forEach(function(key) {\n                        dst[key] = target[key];\n                    });\n                }\n                Object.keys(src).forEach(function(key) {\n                    if (typeof src[key] !== \"object\" || !src[key]) {\n                        dst[key] = src[key];\n                    } else {\n                        if (!target[key]) {\n                            dst[key] = src[key];\n                        } else {\n                            dst[key] = deepmerge(target[key], src[key], mergeArrays);\n                        }\n                    }\n                });\n            }\n            return dst;\n        }\n        var Utils = function() {\n            function Utils() {}\n            Utils.deepMerge = function(obj1, obj2, mergeArrays) {\n                return deepmerge(obj1, obj2, mergeArrays);\n            };\n            Utils.deepCopy = function(obj) {\n                return JSON.parse(JSON.stringify(obj));\n            };\n            Utils.toFixed = function(num, digitsCount) {\n                var maxDigits = 15;\n                var result = \"\";\n                var intVal = Math.floor(num);\n                var intStr = intVal.toString();\n                var lengthDiff = digitsCount - intStr.length;\n                if (lengthDiff > 0) {\n                    result = \"0\".repeat(lengthDiff) + intStr;\n                } else {\n                    result = intStr;\n                }\n                var afterPointDigitsCount = maxDigits - intStr.length;\n                var afterPointStr = num.toString().split(\".\")[1];\n                if (afterPointStr) {\n                    result += \".\" + afterPointStr.substr(0, afterPointDigitsCount);\n                }\n                return result;\n            };\n            Utils.bindEvent = function() {};\n            Utils.createTexture = function(width, height, fn) {\n                var canvas = document.createElement(\"canvas\");\n                canvas.width = width;\n                canvas.height = height;\n                var ctx = canvas.getContext(\"2d\");\n                fn(ctx);\n                var texture = new THREE.Texture(canvas);\n                texture.needsUpdate = true;\n                return texture;\n            };\n            Utils.createPixelPerfectTexture = function(width, height, fn) {\n                var texture = this.createTexture(width, height, fn);\n                texture.minFilter = THREE.NearestFilter;\n                return texture;\n            };\n            Utils.error = function(msg) {\n                console.error(\"Chart error: \" + msg);\n                throw \"Chart: \" + msg;\n            };\n            Utils.warn = function(msg) {\n                console.warn(\"Chart warning: \" + msg);\n            };\n            Utils.getUid = function() {\n                return this.currentId++;\n            };\n            Utils.getDistance = function(num1, num2) {\n                return Math.max(num1, num2) - Math.min(num1, num2);\n            };\n            Utils.binarySearchClosestInd = function(arr, num, key) {\n                var mid;\n                var lo = 0;\n                var hi = arr.length - 1;\n                while (hi - lo > 1) {\n                    mid = Math.floor((lo + hi) / 2);\n                    if (arr[mid][key] < num) {\n                        lo = mid;\n                    } else {\n                        hi = mid;\n                    }\n                }\n                if (num - arr[lo][key] <= arr[hi][key] - num) {\n                    return lo;\n                }\n                return hi;\n            };\n            Utils.binarySearchClosest = function(arr, num, key) {\n                var ind = this.binarySearchClosestInd(arr, num, key);\n                return arr[ind];\n            };\n            Utils.rectsIntersect = function(r1, r2) {\n                var left1 = r1[0], top1 = r1[1], width1 = r1[2], height1 = r1[3];\n                var left2 = r2[0], top2 = r2[1], width2 = r2[2], height2 = r2[3];\n                var _a = [ left1 + width1, left2 + width2, top1 + height1, top2 + height2 ], right1 = _a[0], right2 = _a[1], bottom1 = _a[2], bottom2 = _a[3];\n                return !(left2 > right1 || right2 < left1 || top2 > bottom1 || bottom2 < top1);\n            };\n            Utils.throttle = function(func, ms) {\n                var isThrottled = false, savedArgs, savedThis;\n                function wrapper() {\n                    if (isThrottled) {\n                        savedArgs = arguments;\n                        savedThis = this;\n                        return;\n                    }\n                    func.apply(this, arguments);\n                    isThrottled = true;\n                    setTimeout(function() {\n                        isThrottled = false;\n                        if (savedArgs) {\n                            wrapper.apply(savedThis, savedArgs);\n                            savedArgs = savedThis = null;\n                        }\n                    }, ms);\n                }\n                return wrapper;\n            };\n            Utils.msToTimeString = function(timestamp) {\n                var h = Math.floor(timestamp / 36e4);\n                var m = Math.floor(timestamp / 6e4);\n                var s = Math.floor(timestamp / 1e3);\n                return h + \":\" + m + \":\" + s;\n            };\n            Utils.getRandomItem = function(arr) {\n                var ind = Math.floor(Math.random() * arr.length);\n                return arr[ind];\n            };\n            Utils.copyProps = function(srcObject, dstObject, props, excludeProps) {\n                if (excludeProps === void 0) {\n                    excludeProps = [];\n                }\n                for (var key in props) {\n                    if (excludeProps.indexOf(key) !== -1) continue;\n                    if (srcObject[key] == void 0) continue;\n                    if (deps_1.isPlainObject(props[key]) && dstObject[key] !== void 0) {\n                        this.copyProps(srcObject[key], dstObject[key], props[key]);\n                    } else {\n                        dstObject[key] = this.deepCopy(srcObject[key]);\n                    }\n                }\n            };\n            Utils.currentId = 1;\n            return Utils;\n        }();\n        exports.Utils = Utils;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var EventEmmiter_1 = __webpack_require__(16);\n        var Vector3 = THREE.Vector3;\n        var Trend_1 = __webpack_require__(13);\n        var Utils_1 = __webpack_require__(14);\n        var MAX_ANIMATED_SEGMENTS = 100;\n        var EVENTS = {\n            REBUILD: \"rebuild\",\n            DISLPAYED_RANGE_CHANGED: \"displayedRangeChanged\",\n            ANIMATION_FRAME: \"animationFrame\"\n        };\n        var TrendSegmentsManager = function() {\n            function TrendSegmentsManager(chartState, trend) {\n                this.segmentsById = {};\n                this.segments = [];\n                this.animatedSegmentsIds = [];\n                this.segmentsLength = 0;\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForPrepend = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.trend = trend;\n                this.maxSegmentLength = trend.getOptions().maxSegmentLength;\n                this.tryToRebuildSegments();\n                this.bindEvents();\n            }\n            TrendSegmentsManager.prototype.bindEvents = function() {\n                var _this = this;\n                this.trend.onChange(function(changedOptions, newData) {\n                    return _this.onTrendChangeHandler(changedOptions, newData);\n                });\n                this.chartState.onZoom(function() {\n                    return _this.onZoomHandler();\n                });\n                this.chartState.onScroll(function() {\n                    return _this.recalculateDisplayedRange();\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            TrendSegmentsManager.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.appendAnimation && this.appendAnimation.kill();\n                this.prependAnimation && this.prependAnimation.kill();\n            };\n            TrendSegmentsManager.prototype.onZoomHandler = function() {\n                var segmentsRebuilded = this.tryToRebuildSegments();\n                if (!segmentsRebuilded) {\n                    this.recalculateDisplayedRange();\n                }\n            };\n            TrendSegmentsManager.prototype.onTrendChangeHandler = function(changedOptions, newData) {\n                var needToRebuildSegments = changedOptions.type != void 0 || changedOptions.maxSegmentLength != void 0;\n                if (needToRebuildSegments) {\n                    this.tryToRebuildSegments(true);\n                    return;\n                }\n                if (!newData) return;\n                var data = this.trend.getData();\n                var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                isAppend ? this.appendData(newData) : this.prependData(newData);\n                this.recalculateDisplayedRange();\n            };\n            TrendSegmentsManager.prototype.getSegment = function(id) {\n                return this.segmentsById[id];\n            };\n            TrendSegmentsManager.prototype.getEndSegment = function() {\n                return this.segmentsById[this.endSegmentId];\n            };\n            TrendSegmentsManager.prototype.getStartSegment = function() {\n                return this.segmentsById[this.startSegmentId];\n            };\n            TrendSegmentsManager.prototype.tryToRebuildSegments = function(force) {\n                if (force === void 0) {\n                    force = false;\n                }\n                var options = this.trend.getOptions();\n                var trendTypeName = Trend_1.TREND_TYPE[options.type];\n                var trendTypesSettings = options.settingsForTypes;\n                var trendTypeSettings = trendTypesSettings[trendTypeName];\n                var minSegmentLengthInPx = trendTypeSettings.minSegmentLengthInPx, maxSegmentLengthInPx = trendTypeSettings.maxSegmentLengthInPx;\n                var needToRebuild = this.segments.length === 0 || force;\n                var segmentLength = this.maxSegmentLength;\n                var currentSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(segmentLength).toFixed(2));\n                var currentMaxSegmentLengthInPx = Number(this.chartState.valueToPxByXAxis(this.maxSegmentLength).toFixed(2));\n                if (currentSegmentLengthInPx < minSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = Math.ceil(this.chartState.pxToValueByXAxis(maxSegmentLengthInPx));\n                } else if (currentMaxSegmentLengthInPx > maxSegmentLengthInPx) {\n                    needToRebuild = true;\n                    segmentLength = this.chartState.pxToValueByXAxis(minSegmentLengthInPx);\n                }\n                if (!needToRebuild) return false;\n                this.maxSegmentLength = segmentLength;\n                this.segmentsById = {};\n                this.segments = [];\n                this.nextEmptyId = 0;\n                this.startSegmentId = 0;\n                this.endSegmentId = 0;\n                this.segmentsLength = 0;\n                this.stopAllAnimations();\n                this.appendData(null, true);\n                this.recalculateDisplayedRange(true);\n                this.ee.emit(EVENTS.REBUILD);\n            };\n            TrendSegmentsManager.prototype.stopAllAnimations = function() {\n                this.animatedSegmentsIds = [];\n                this.animatedSegmentsForAppend = [];\n                this.animatedSegmentsForAppend = [];\n                if (this.prependAnimation) this.prependAnimation.kill();\n                if (this.appendAnimation) this.appendAnimation.kill();\n            };\n            TrendSegmentsManager.prototype.recalculateDisplayedRange = function(segmentsAreRebuilded) {\n                if (segmentsAreRebuilded === void 0) {\n                    segmentsAreRebuilded = false;\n                }\n                var _a = this.chartState.data.xAxis.range, from = _a.from, to = _a.to;\n                var _b = this, firstDisplayedSegment = _b.firstDisplayedSegment, lastDisplayedSegment = _b.lastDisplayedSegment;\n                var displayedRange = to - from;\n                this.firstDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, from - displayedRange, \"startXVal\");\n                this.firstDisplayedSegment = this.segments[this.firstDisplayedSegmentInd];\n                this.lastDisplayedSegmentInd = Utils_1.Utils.binarySearchClosestInd(this.segments, to + displayedRange, \"endXVal\");\n                this.lastDisplayedSegment = this.segments[this.lastDisplayedSegmentInd];\n                if (segmentsAreRebuilded) return;\n                var displayedRangeChanged = firstDisplayedSegment.id !== this.firstDisplayedSegment.id || lastDisplayedSegment.id !== this.lastDisplayedSegment.id;\n                if (displayedRangeChanged) this.ee.emit(EVENTS.DISLPAYED_RANGE_CHANGED);\n            };\n            TrendSegmentsManager.prototype.getSegmentsForXValues = function(values) {\n                var valueInd = 0;\n                var value = values[valueInd];\n                var lastValueInd = values.length - 1;\n                var results = [];\n                var segment = this.getStartSegment();\n                if (!segment.hasValue) return [];\n                while (segment) {\n                    while (value < segment.startXVal) {\n                        results.push(void 0);\n                        value = values[++valueInd];\n                    }\n                    while (value > segment.endXVal) {\n                        segment = segment.getNext();\n                        if (!segment) break;\n                    }\n                    var valueInPoint = segment.startXVal == value || segment.endXVal == value || segment.startXVal < value && segment.endXVal > value;\n                    if (valueInPoint) {\n                        results.push(segment);\n                        value = values[++valueInd];\n                    }\n                    if (valueInd > lastValueInd) break;\n                }\n                return results;\n            };\n            TrendSegmentsManager.prototype.onAnimationFrame = function(cb) {\n                return this.ee.subscribe(EVENTS.ANIMATION_FRAME, cb);\n            };\n            TrendSegmentsManager.prototype.onRebuild = function(cb) {\n                return this.ee.subscribe(EVENTS.REBUILD, cb);\n            };\n            TrendSegmentsManager.prototype.onDisplayedRangeChanged = function(cb) {\n                return this.ee.subscribe(EVENTS.DISLPAYED_RANGE_CHANGED, cb);\n            };\n            TrendSegmentsManager.prototype.allocateNextSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var prevSegment = this.segmentsById[this.endSegmentId];\n                if (prevSegment && prevSegment.hasValue) {\n                    prevSegment.nextId = id;\n                    segment.prevId = prevSegment.id;\n                }\n                this.endSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.push(segment);\n                return segment;\n            };\n            TrendSegmentsManager.prototype.allocatePrevSegment = function() {\n                var id = this.nextEmptyId++;\n                var segment = new TrendSegment(this, id);\n                var nextSegment = this.segmentsById[this.startSegmentId];\n                if (nextSegment && nextSegment.hasValue) {\n                    nextSegment.prevId = id;\n                    segment.nextId = nextSegment.id;\n                }\n                this.startSegmentId = id;\n                this.segmentsLength++;\n                this.segmentsById[id] = segment;\n                this.segments.unshift(segment);\n                return segment;\n            };\n            TrendSegmentsManager.prototype.appendData = function(newData, needRebuildSegments) {\n                if (needRebuildSegments === void 0) {\n                    needRebuildSegments = false;\n                }\n                var trendData = this.trend.getData();\n                if (needRebuildSegments) {\n                    newData = trendData;\n                    this.animatedSegmentsForAppend = [];\n                }\n                var startItemInd = trendData.length - newData.length;\n                var segment = this.getEndSegment() || this.allocateNextSegment();\n                var initialSegment = segment.hasValue ? segment : null;\n                var initialAnimationState = segment.createAnimationState();\n                var itemInd = 0;\n                while (itemInd < newData.length) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.appendItem(item);\n                    var isLastItem = itemInd == newData.length - 1;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd++;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForAppend.length > 0) {\n                            segment.initialAnimationState.startXVal = initialAnimationState.endXVal;\n                            segment.initialAnimationState.startYVal = initialAnimationState.endYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForAppend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocateNextSegment();\n                    var prevItem = trendData[startItemInd + itemInd - 1];\n                    segment.appendItem(prevItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (needRebuildSegments) {\n                    for (var _i = 0, _a = this.animatedSegmentsForAppend; _i < _a.length; _i++) {\n                        var segmentId = _a[_i];\n                        var segment_1 = this.segmentsById[segmentId];\n                        segment_1.currentAnimationState = segment_1.createAnimationState();\n                    }\n                    this.animatedSegmentsForAppend = [];\n                    return;\n                }\n                if (this.animatedSegmentsForAppend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time);\n            };\n            TrendSegmentsManager.prototype.prependData = function(newData) {\n                var trendData = this.trend.getData();\n                var segment = this.getStartSegment() || this.segmentsById[0];\n                var initialSegment = segment.hasValue ? segment : null;\n                var itemInd = newData.length - 1;\n                var initialAnimationState = segment.createAnimationState();\n                while (itemInd >= 0) {\n                    var item = newData[itemInd];\n                    var itemIsInserted = segment.prependItem(item);\n                    var isLastItem = itemInd == 0;\n                    if (itemIsInserted) {\n                        if (!isLastItem) itemInd--;\n                    } else {\n                        if (!segment.isCompleted) segment.complete();\n                    }\n                    if (isLastItem && itemIsInserted) {\n                        segment.recalculateItems();\n                    }\n                    var segmentIsReadyForAnimate = segment.isCompleted || isLastItem && itemIsInserted;\n                    if (segmentIsReadyForAnimate) {\n                        var id = segment.id;\n                        if (!initialSegment) initialSegment = segment;\n                        if (!initialAnimationState) initialAnimationState = initialSegment.createAnimationState();\n                        segment.initialAnimationState = Utils_1.Utils.deepMerge({}, initialAnimationState);\n                        if (this.animatedSegmentsForPrepend.length > 0) {\n                            segment.initialAnimationState.endXVal = initialAnimationState.startXVal;\n                            segment.initialAnimationState.endYVal = initialAnimationState.startYVal;\n                        }\n                        segment.targetAnimationState = segment.createAnimationState();\n                        this.animatedSegmentsForPrepend.push(id);\n                    }\n                    if (isLastItem && itemIsInserted) break;\n                    if (!segment.isCompleted) continue;\n                    segment = this.allocatePrevSegment();\n                    var nextItem = trendData[itemInd + 1];\n                    segment.prependItem(nextItem);\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var time = animationsOptions.enabled ? animationsOptions.trendChangeSpeed : 0;\n                if (this.animatedSegmentsForPrepend.length > MAX_ANIMATED_SEGMENTS) time = 0;\n                this.animate(time, true);\n            };\n            TrendSegmentsManager.prototype.animate = function(time, isPrepend) {\n                var _this = this;\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                var animation = isPrepend ? this.prependAnimation : this.appendAnimation;\n                if (animation && animation.isActive() || time == 0) {\n                    if (animation) animation.kill();\n                    this.onAnimationFrameHandler(1, isPrepend);\n                    animatedSegmentsIds.length = 0;\n                    return;\n                }\n                var animationsOptions = this.chartState.data.animations;\n                var ease = animationsOptions.trendChangeEase;\n                var objectToAnimate = {\n                    animationValue: 0\n                };\n                animation = TweenLite.to(objectToAnimate, time, {\n                    animationValue: 1,\n                    ease: ease\n                });\n                animation.eventCallback(\"onUpdate\", function() {\n                    return _this.onAnimationFrameHandler(objectToAnimate.animationValue, isPrepend);\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animatedSegmentsIds.length = 0;\n                    _this.appendAnimation = null;\n                });\n                if (isPrepend) {\n                    this.prependAnimation = animation;\n                } else {\n                    this.appendAnimation = animation;\n                }\n            };\n            TrendSegmentsManager.prototype.onAnimationFrameHandler = function(coefficient, isPrepend) {\n                if (isPrepend === void 0) {\n                    isPrepend = false;\n                }\n                var animatedSegmentsIds = isPrepend ? this.animatedSegmentsForPrepend : this.animatedSegmentsForAppend;\n                for (var _i = 0, animatedSegmentsIds_1 = animatedSegmentsIds; _i < animatedSegmentsIds_1.length; _i++) {\n                    var segmentId = animatedSegmentsIds_1[_i];\n                    var segment = this.segmentsById[segmentId];\n                    for (var key in segment.targetAnimationState) {\n                        var targetValue = segment.targetAnimationState[key];\n                        var initialValue = segment.initialAnimationState[key];\n                        var currentValue = initialValue + (targetValue - initialValue) * coefficient;\n                        segment.currentAnimationState[key] = currentValue;\n                    }\n                }\n                this.animatedSegmentsIds = this.animatedSegmentsForAppend.concat(this.animatedSegmentsForPrepend);\n                this.ee.emit(EVENTS.ANIMATION_FRAME, this);\n            };\n            return TrendSegmentsManager;\n        }();\n        exports.TrendSegmentsManager = TrendSegmentsManager;\n        var TrendSegment = function() {\n            function TrendSegment(trendPoints, id) {\n                this.isCompleted = false;\n                this.items = [];\n                this.initialAnimationState = {};\n                this.targetAnimationState = {};\n                this.currentAnimationState = {};\n                this.trendSegments = trendPoints;\n                this.id = id;\n                this.maxLength = trendPoints.maxSegmentLength;\n            }\n            TrendSegment.prototype.createAnimationState = function() {\n                var _a = this, xVal = _a.xVal, yVal = _a.yVal, startXVal = _a.startXVal, startYVal = _a.startYVal, endXVal = _a.endXVal, endYVal = _a.endYVal, maxYVal = _a.maxYVal, minYVal = _a.minYVal, maxLength = _a.maxLength;\n                return {\n                    xVal: xVal,\n                    yVal: yVal,\n                    startXVal: startXVal,\n                    startYVal: startYVal,\n                    endXVal: endXVal,\n                    endYVal: endYVal,\n                    maxYVal: maxYVal,\n                    minYVal: minYVal,\n                    maxLength: maxLength\n                };\n            };\n            TrendSegment.prototype.appendItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.push(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var startXVal = items[0].xVal;\n                if (item.xVal - startXVal > this.maxLength) return false;\n                items.push(item);\n                return true;\n            };\n            TrendSegment.prototype.prependItem = function(item) {\n                if (this.isCompleted) return false;\n                var items = this.items;\n                if (items.length < 2) {\n                    this.items.unshift(item);\n                    this.hasValue = true;\n                    return true;\n                }\n                var endXVal = items[items.length - 1].xVal;\n                if (endXVal - item.xVal > this.maxLength) return false;\n                items.unshift(item);\n                return true;\n            };\n            TrendSegment.prototype.complete = function() {\n                this.isCompleted = true;\n                this.recalculateItems();\n                this.items = [];\n            };\n            TrendSegment.prototype.recalculateItems = function() {\n                var items = this.items;\n                var itemsLength = items.length;\n                if (itemsLength === 0) Utils_1.Utils.error(\"Unable to create TrendSegment without TrendItems\");\n                var endItem = items[itemsLength - 1];\n                var endXVal = endItem.xVal, endYVal = endItem.yVal;\n                var startXVal, startYVal;\n                var startItem = items[0];\n                startXVal = startItem.xVal;\n                startYVal = startItem.yVal;\n                var minX = Math.min(startXVal, endXVal);\n                var maxX = Math.max(startXVal, endXVal);\n                var middleXVal = minX + (maxX - minX) / 2;\n                var minY = Math.min(startYVal, endYVal);\n                var maxY = Math.max(startYVal, endYVal);\n                var middleYVal = minY + (maxY - minY) / 2;\n                var yVals = items.map(function(item) {\n                    return item.yVal;\n                });\n                this.startXVal = startXVal;\n                this.startYVal = startYVal;\n                this.endXVal = endXVal;\n                this.endYVal = endYVal;\n                this.xVal = middleXVal;\n                this.yVal = middleYVal;\n                this.maxYVal = Math.max.apply(Math, yVals);\n                this.minYVal = Math.min.apply(Math, yVals);\n                if (!this.currentAnimationState) this.currentAnimationState = this.createAnimationState();\n            };\n            TrendSegment.prototype.getNext = function() {\n                var nextPoint = this.trendSegments.segmentsById[this.nextId];\n                return nextPoint && nextPoint.hasValue ? nextPoint : null;\n            };\n            TrendSegment.prototype.getPrev = function() {\n                var prevPoint = this.trendSegments.segmentsById[this.prevId];\n                return prevPoint && prevPoint.hasValue ? prevPoint : null;\n            };\n            TrendSegment.prototype.getFrameVal = function() {\n                var _a = this.createAnimationState(), xVal = _a.xVal, yVal = _a.yVal;\n                return new Vector3(xVal, yVal, 0);\n            };\n            TrendSegment.prototype.getFramePoint = function() {\n                var frameVal = this.getFrameVal();\n                return this.trendSegments.chartState.screen.getPointOnChart(frameVal.x, frameVal.y);\n            };\n            return TrendSegment;\n        }();\n        exports.TrendSegment = TrendSegment;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var deps_1 = __webpack_require__(3);\n        var EventEmitter = function() {\n            function EventEmitter() {\n                this.ee = new deps_1.EE2();\n            }\n            EventEmitter.prototype.emit = function(eventName) {\n                var args = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    args[_i - 1] = arguments[_i];\n                }\n                (_a = this.ee).emit.apply(_a, [ eventName ].concat(args));\n                var _a;\n            };\n            EventEmitter.prototype.on = function(eventName, callback) {\n                return this.ee.on(eventName, callback);\n            };\n            EventEmitter.prototype.off = function(eventName, callback) {\n                return this.ee.off(eventName, callback);\n            };\n            EventEmitter.prototype.subscribe = function(eventName, callback) {\n                var _this = this;\n                this.on(eventName, callback);\n                return function() {\n                    return _this.off(eventName, callback);\n                };\n            };\n            EventEmitter.prototype.setMaxListeners = function(listenersCount) {\n                this.ee.setMaxListeners(listenersCount);\n            };\n            EventEmitter.prototype.removeAllListeners = function(eventName) {\n                this.ee.removeAllListeners(eventName);\n            };\n            return EventEmitter;\n        }();\n        exports.EventEmitter = EventEmitter;\n    }, function(module, exports) {\n        \"use strict\";\n        var ChartWidget = function() {\n            function ChartWidget(chartState) {\n                this.unsubscribers = [];\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            ChartWidget.prototype.bindEvents = function() {};\n            ChartWidget.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartWidget.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartWidget.getDefaultOptions = function() {\n                return {\n                    enabled: true\n                };\n            };\n            ChartWidget.widgetName = \"\";\n            return ChartWidget;\n        }();\n        exports.ChartWidget = ChartWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Trend_1 = __webpack_require__(13);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var EVENTS = {\n            SEGMENTS_REBUILDED: \"segmentsRebuilded\"\n        };\n        var TrendsManager = function() {\n            function TrendsManager(state, initialState) {\n                this.trends = {};\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.chartState = state;\n                var trendsCalculatedOptions = {};\n                for (var trendName in initialState.trends) {\n                    var trend = this.createTrend(state, trendName, initialState);\n                    trendsCalculatedOptions[trendName] = trend.getCalculatedOptions();\n                }\n                this.calculatedOptions = trendsCalculatedOptions;\n                this.bindEvents();\n            }\n            TrendsManager.prototype.getTrend = function(trendName) {\n                return this.trends[trendName];\n            };\n            TrendsManager.prototype.getEnabledTrends = function() {\n                var enabledTrends = [];\n                var allTrends = this.trends;\n                for (var trendName in allTrends) {\n                    var trend = allTrends[trendName];\n                    trend.getOptions().enabled && enabledTrends.push(trend);\n                }\n                return enabledTrends;\n            };\n            TrendsManager.prototype.getStartXVal = function() {\n                var trends = this.getEnabledTrends();\n                return trends[0].getData()[0].xVal;\n            };\n            TrendsManager.prototype.getEndXVal = function() {\n                var trends = this.getEnabledTrends();\n                var firstTrendData = trends[0].getData();\n                return firstTrendData[firstTrendData.length - 1].xVal;\n            };\n            TrendsManager.prototype.getExtremumYVal = function(extremumIsMax, fromX, toX) {\n                var trends = this.getEnabledTrends();\n                var compareFn;\n                var result;\n                if (extremumIsMax) {\n                    result = -Infinity;\n                    compareFn = Math.max;\n                } else {\n                    result = Infinity;\n                    compareFn = Math.min;\n                }\n                for (var _i = 0, trends_1 = trends; _i < trends_1.length; _i++) {\n                    var trend = trends_1[_i];\n                    var trendData = trend.getData(fromX, toX);\n                    var trendYValues = trendData.map(function(dataItem) {\n                        return dataItem.yVal;\n                    });\n                    result = compareFn.apply(void 0, [ result ].concat(trendYValues));\n                }\n                if (result == Infinity || result == -Infinity) result = NaN;\n                return result;\n            };\n            TrendsManager.prototype.getMaxYVal = function(fromX, toX) {\n                return this.getExtremumYVal(true, fromX, toX);\n            };\n            TrendsManager.prototype.getMinYVal = function(fromX, toX) {\n                return this.getExtremumYVal(false, fromX, toX);\n            };\n            TrendsManager.prototype.onSegmentsRebuilded = function(cb) {\n                return this.ee.subscribe(EVENTS.SEGMENTS_REBUILDED, cb);\n            };\n            TrendsManager.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onInitialStateApplied(function() {\n                    return _this.onInitialStateAppliedHandler();\n                });\n            };\n            TrendsManager.prototype.onInitialStateAppliedHandler = function() {\n                var _this = this;\n                var _loop_1 = function(trendName) {\n                    this_1.trends[trendName].segmentsManager.onRebuild(function() {\n                        return _this.ee.emit(EVENTS.SEGMENTS_REBUILDED, trendName);\n                    });\n                };\n                var this_1 = this;\n                for (var trendName in this.trends) {\n                    _loop_1(trendName);\n                }\n            };\n            TrendsManager.prototype.createTrend = function(state, trendName, initialState) {\n                var trend = new Trend_1.Trend(state, trendName, initialState);\n                this.trends[trendName] = trend;\n                return trend;\n            };\n            return TrendsManager;\n        }();\n        exports.TrendsManager = TrendsManager;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Vector3 = THREE.Vector3;\n        var EventEmmiter_1 = __webpack_require__(16);\n        var Screen = function() {\n            function Screen(chartState) {\n                this.options = {\n                    scrollXVal: 0,\n                    scrollX: 0,\n                    scrollYVal: 0,\n                    scrollY: 0,\n                    zoomX: 1,\n                    zoomY: 1\n                };\n                this.currentScrollX = {\n                    x: 0\n                };\n                this.currentScrollY = {\n                    y: 0\n                };\n                this.currentZoomX = {\n                    val: 1\n                };\n                this.currentZoomY = {\n                    val: 1\n                };\n                this.chartState = chartState;\n                var _a = chartState.data, w = _a.width, h = _a.height;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.transform({\n                    scrollY: this.valueToPxByYAxis(this.chartState.data.yAxis.range.scroll),\n                    zoomY: 1\n                });\n                this.bindEvents();\n            }\n            Screen.prototype.getCameraSettings = function() {\n                var _a = this.chartState.data, w = _a.width, h = _a.height;\n                var FOV = 75;\n                var vFOV = FOV * (Math.PI / 180);\n                return {\n                    FOV: FOV,\n                    aspect: w / h,\n                    near: .1,\n                    far: 5e3,\n                    z: h / (2 * Math.tan(vFOV / 2)),\n                    x: w / 2,\n                    y: h / 2\n                };\n            };\n            Screen.prototype.onZoomFrame = function(cb) {\n                var _this = this;\n                var eventName = \"zoomFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onScrollFrame = function(cb) {\n                var _this = this;\n                var eventName = \"scrollFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.onTransformationFrame = function(cb) {\n                var _this = this;\n                var eventName = \"transformationFrame\";\n                this.ee.on(eventName, cb);\n                return function() {\n                    _this.ee.off(eventName, cb);\n                };\n            };\n            Screen.prototype.cameraIsMoving = function() {\n                return !!(this.scrollXAnimation && this.scrollXAnimation.isActive() || this.zoomXAnimation && this.zoomXAnimation.isActive());\n            };\n            Screen.prototype.transform = function(options, silent) {\n                if (silent === void 0) {\n                    silent = false;\n                }\n                var scrollX = options.scrollX, scrollY = options.scrollY, zoomX = options.zoomX, zoomY = options.zoomY;\n                if (scrollX != void 0) this.options.scrollX = scrollX;\n                if (scrollY != void 0) this.options.scrollY = scrollY;\n                if (zoomX != void 0) this.options.zoomX = zoomX;\n                if (zoomY != void 0) this.options.zoomY = zoomY;\n                if (scrollX != void 0 || zoomX) {\n                    options.scrollXVal = this.pxToValueByXAxis(scrollX != void 0 ? scrollX : this.options.scrollX);\n                    this.options.scrollXVal = options.scrollXVal;\n                }\n                if (scrollY != void 0 || zoomY) {\n                    options.scrollYVal = this.pxToValueByYAxis(scrollY != void 0 ? scrollY : this.options.scrollY);\n                    this.options.scrollYVal = options.scrollYVal;\n                }\n                if (silent) return;\n                this.ee.emit(\"transformationFrame\", options);\n                if (options.scrollXVal != void 0 || options.scrollYVal != void 0) {\n                    this.ee.emit(\"scrollFrame\", options);\n                }\n                if (options.zoomX != void 0 || options.zoomY != void 0) {\n                    this.ee.emit(\"zoomFrame\", options);\n                }\n            };\n            Screen.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onChange(function(changedProps) {\n                    if (changedProps.xAxis && changedProps.xAxis.range) {\n                        if (changedProps.xAxis.range.scroll != void 0) _this.onScrollXHandler(changedProps);\n                        if (changedProps.xAxis.range.zoom) _this.onZoomXHandler();\n                    }\n                    if (changedProps.yAxis && changedProps.yAxis.range) {\n                        if (changedProps.yAxis.range.scroll != void 0) _this.onScrollYHandler();\n                        if (changedProps.yAxis.range.zoom) _this.onZoomYHandler();\n                    }\n                });\n                state.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                });\n            };\n            Screen.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n                this.scrollXAnimation && this.scrollXAnimation.kill();\n                this.scrollYAnimation && this.scrollYAnimation.kill();\n                this.zoomXAnimation && this.zoomXAnimation.kill();\n                this.zoomYAnimation && this.zoomYAnimation.kill();\n            };\n            Screen.prototype.onScrollXHandler = function(changedProps) {\n                var _this = this;\n                var state = this.chartState;\n                var isDragMode = state.data.cursor.dragMode;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled && !isDragMode;\n                var zoomXChanged = changedProps.xAxis.range.zoom;\n                var isAutoscroll = state.data.autoScroll && !isDragMode && !zoomXChanged;\n                var time = isAutoscroll ? animations.autoScrollSpeed : animations.zoomSpeed;\n                var ease = isAutoscroll ? animations.autoScrollEase : animations.zoomEase;\n                if (this.scrollXAnimation) this.scrollXAnimation.pause();\n                var range = state.data.xAxis.range;\n                var targetX = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollX.x = this.options.scrollX;\n                var cb = function() {\n                    _this.transform({\n                        scrollX: _this.currentScrollX.x\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollXAnimation = TweenLite.to(this.currentScrollX, time, {\n                        x: targetX,\n                        ease: ease\n                    });\n                    this.scrollXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollX.x = targetX;\n                    cb();\n                }\n            };\n            Screen.prototype.onScrollYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                if (this.scrollYAnimation) this.scrollYAnimation.pause();\n                var range = state.data.yAxis.range;\n                var targetY = range.scroll * range.scaleFactor * range.zoom;\n                this.currentScrollY.y = this.options.scrollY;\n                var cb = function() {\n                    _this.transform({\n                        scrollY: _this.currentScrollY.y\n                    });\n                };\n                if (canAnimate) {\n                    this.scrollYAnimation = TweenLite.to(this.currentScrollY, time, {\n                        y: targetY,\n                        ease: animations.zoomEase\n                    });\n                    this.scrollYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentScrollY.y = targetY;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomXHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.xAxis.range.zoom;\n                if (this.zoomXAnimation) this.zoomXAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomX: _this.currentZoomX.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomXAnimation = TweenLite.to(this.currentZoomX, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomXAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomX.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.onZoomYHandler = function() {\n                var _this = this;\n                var state = this.chartState;\n                var animations = state.data.animations;\n                var canAnimate = animations.enabled;\n                var time = animations.zoomSpeed;\n                var targetZoom = state.data.yAxis.range.zoom;\n                if (this.zoomYAnimation) this.zoomYAnimation.pause();\n                var cb = function() {\n                    _this.transform({\n                        zoomY: _this.currentZoomY.val\n                    });\n                };\n                if (canAnimate) {\n                    this.zoomYAnimation = TweenLite.to(this.currentZoomY, time, {\n                        val: targetZoom,\n                        ease: animations.zoomEase\n                    });\n                    this.zoomYAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.currentZoomY.val = targetZoom;\n                    cb();\n                }\n            };\n            Screen.prototype.getPointOnXAxis = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomX;\n                return (xVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnYAxis = function(yVal) {\n                var _a = this.chartState.data.yAxis.range, scaleFactor = _a.scaleFactor, zeroVal = _a.zeroVal;\n                var zoom = this.options.zoomY;\n                return (yVal - zeroVal) * scaleFactor * zoom;\n            };\n            Screen.prototype.getPointOnChart = function(xVal, yVal) {\n                return new Vector3(this.getPointOnXAxis(xVal), this.getPointOnYAxis(yVal), 0);\n            };\n            Screen.prototype.getValueOnXAxis = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.valueToPxByXAxis = function(xVal) {\n                return xVal * this.chartState.data.xAxis.range.scaleFactor * this.options.zoomX;\n            };\n            Screen.prototype.valueToPxByYAxis = function(yVal) {\n                return yVal * this.chartState.data.yAxis.range.scaleFactor * this.options.zoomY;\n            };\n            Screen.prototype.pxToValueByXAxis = function(xVal) {\n                return xVal / this.chartState.data.xAxis.range.scaleFactor / this.options.zoomX;\n            };\n            Screen.prototype.pxToValueByYAxis = function(yVal) {\n                return yVal / this.chartState.data.yAxis.range.scaleFactor / this.options.zoomY;\n            };\n            Screen.prototype.getValueByScreenX = function(x) {\n                return this.chartState.data.xAxis.range.zeroVal + this.options.scrollXVal + this.pxToValueByXAxis(x);\n            };\n            Screen.prototype.getValueByScreenY = function(y) {\n                return this.chartState.data.yAxis.range.zeroVal + this.options.scrollYVal + this.pxToValueByYAxis(y);\n            };\n            Screen.prototype.getScreenXByValue = function(xVal) {\n                var _a = this.chartState.data.xAxis.range, scroll = _a.scroll, zeroVal = _a.zeroVal;\n                return this.valueToPxByXAxis(xVal - zeroVal - scroll);\n            };\n            Screen.prototype.getScreenXByPoint = function(xVal) {\n                return this.getScreenXByValue(this.getValueOnXAxis(xVal));\n            };\n            Screen.prototype.getPointByScreenX = function(screenX) {\n                return this.getPointOnXAxis(this.getValueByScreenX(screenX));\n            };\n            Screen.prototype.getPointByScreenY = function(screenY) {\n                return this.getPointOnYAxis(this.getValueByScreenY(screenY));\n            };\n            Screen.prototype.getTop = function() {\n                return this.getPointByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottom = function() {\n                return this.getPointByScreenY(0);\n            };\n            Screen.prototype.getLeft = function() {\n                return this.getPointByScreenX(0);\n            };\n            Screen.prototype.getScreenRightVal = function() {\n                return this.getValueByScreenX(this.chartState.data.width);\n            };\n            Screen.prototype.getTopVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height);\n            };\n            Screen.prototype.getBottomVal = function() {\n                return this.getValueByScreenY(0);\n            };\n            Screen.prototype.getCenterYVal = function() {\n                return this.getValueByScreenY(this.chartState.data.height / 2);\n            };\n            return Screen;\n        }();\n        exports.Screen = Screen;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var EventEmmiter_1 = __webpack_require__(16);\n        var AXIS_MARK_DEFAULT_OPTIONS = {\n            type: \"simple\",\n            lineWidth: 1,\n            value: 0,\n            showValue: false,\n            stickToEdges: false,\n            lineColor: \"#FFFFFF\",\n            title: \"\"\n        };\n        var AxisMarks = function() {\n            function AxisMarks(chartState, axisType) {\n                this.items = {};\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.axisType = axisType;\n                var marks = this.items;\n                var axisMarksOptions = axisType == interfaces_1.AXIS_TYPE.X ? chartState.data.xAxis.marks : chartState.data.yAxis.marks;\n                for (var _i = 0, axisMarksOptions_1 = axisMarksOptions; _i < axisMarksOptions_1.length; _i++) {\n                    var options = axisMarksOptions_1[_i];\n                    var axisMark = void 0;\n                    options = Utils_1.Utils.deepMerge(AXIS_MARK_DEFAULT_OPTIONS, options);\n                    if (!options.name) options.name = Utils_1.Utils.getUid().toString();\n                    if (marks[options.name]) Utils_1.Utils.error(\"duplicated mark name \" + options.name);\n                    if (options.type == \"timeleft\") {\n                        axisMark = new AxisTimeleftMark(chartState, axisType, options);\n                    } else {\n                        axisMark = new AxisMark(chartState, axisType, options);\n                    }\n                    marks[options.name] = axisMark;\n                }\n                this.bindEvents();\n            }\n            AxisMarks.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, newData);\n                });\n                this.chartState.onDestroy(function() {\n                    return _this.ee.removeAllListeners();\n                });\n            };\n            AxisMarks.prototype.onTrendChange = function(trendName, newData) {\n                if (!newData) return;\n                var startVal = newData[0].xVal;\n                var endVal = newData[newData.length - 1].xVal;\n                var marks = this.items;\n                for (var markName in marks) {\n                    var mark = marks[markName];\n                    var markVal = mark.options.value;\n                    var markWasCrossed = startVal == markVal || endVal == markVal || startVal < markVal && endVal > markVal;\n                    if (markWasCrossed) this.ee.emit(\"markCrossed\", trendName, newData);\n                }\n            };\n            AxisMarks.prototype.getItems = function() {\n                return this.items;\n            };\n            AxisMarks.prototype.getItem = function(markName) {\n                return this.items[markName];\n            };\n            return AxisMarks;\n        }();\n        exports.AxisMarks = AxisMarks;\n        var AxisMark = function() {\n            function AxisMark(chartState, axisType, options) {\n                this.renderOnTrendsChange = false;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.options = options;\n                this.axisType = axisType;\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            AxisMark.prototype.bindEvents = function() {};\n            AxisMark.prototype.setOptions = function(newOptions) {\n                var value = this.options.value;\n                this.options = Utils_1.Utils.deepMerge(this.options, newOptions);\n                if (this.options.value !== value) this.ee.emit(\"valueChange\");\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisMark.prototype.getDisplayedVal = function() {\n                var _a = this.options, value = _a.value, displayedValue = _a.displayedValue;\n                return String(displayedValue !== void 0 ? displayedValue : value);\n            };\n            AxisMark.prototype.onMarkCrossed = function(cb) {\n                var _this = this;\n                this.ee.on(\"markCrossed\", cb);\n                return function() {\n                    _this.ee.off(\"markCrossed\", cb);\n                };\n            };\n            AxisMark.prototype.onValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"valueChange\", cb);\n                return function() {\n                    _this.ee.off(\"valueChange\", cb);\n                };\n            };\n            AxisMark.prototype.onDisplayedValueChange = function(cb) {\n                var _this = this;\n                this.ee.on(\"onDisplayedValueChange\", cb);\n                return function() {\n                    _this.ee.off(\"onDisplayedValueChange\", cb);\n                };\n            };\n            AxisMark.typeName = \"simple\";\n            return AxisMark;\n        }();\n        exports.AxisMark = AxisMark;\n        var AxisTimeleftMark = function(_super) {\n            __extends(AxisTimeleftMark, _super);\n            function AxisTimeleftMark() {\n                _super.apply(this, arguments);\n                this.renderOnTrendsChange = true;\n            }\n            AxisTimeleftMark.prototype.getDisplayedVal = function() {\n                var markVal = this.options.value;\n                var maxXVal = this.chartState.data.computedData.trends.maxXVal;\n                var time = markVal - maxXVal;\n                if (time < 0) time = 0;\n                return Utils_1.Utils.msToTimeString(time);\n            };\n            AxisTimeleftMark.prototype.bindEvents = function() {\n                var _this = this;\n                this.chartState.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n            };\n            AxisTimeleftMark.prototype.onTrendsChange = function() {\n                this.ee.emit(\"onDisplayedValueChange\");\n            };\n            AxisTimeleftMark.typeName = \"timeleft\";\n            return AxisTimeleftMark;\n        }(AxisMark);\n        exports.AxisTimeleftMark = AxisTimeleftMark;\n    }, function(module, exports) {\n        \"use strict\";\n        (function(AXIS_RANGE_TYPE) {\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"FIXED\"] = 0] = \"FIXED\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"RELATIVE_END\"] = 1] = \"RELATIVE_END\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"AUTO\"] = 2] = \"AUTO\";\n            AXIS_RANGE_TYPE[AXIS_RANGE_TYPE[\"ALL\"] = 3] = \"ALL\";\n        })(exports.AXIS_RANGE_TYPE || (exports.AXIS_RANGE_TYPE = {}));\n        var AXIS_RANGE_TYPE = exports.AXIS_RANGE_TYPE;\n        (function(AXIS_TYPE) {\n            AXIS_TYPE[AXIS_TYPE[\"X\"] = 0] = \"X\";\n            AXIS_TYPE[AXIS_TYPE[\"Y\"] = 1] = \"Y\";\n        })(exports.AXIS_TYPE || (exports.AXIS_TYPE = {}));\n        var AXIS_TYPE = exports.AXIS_TYPE;\n        (function(AXIS_DATA_TYPE) {\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"NUMBER\"] = 0] = \"NUMBER\";\n            AXIS_DATA_TYPE[AXIS_DATA_TYPE[\"DATE\"] = 1] = \"DATE\";\n        })(exports.AXIS_DATA_TYPE || (exports.AXIS_DATA_TYPE = {}));\n        var AXIS_DATA_TYPE = exports.AXIS_DATA_TYPE;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Mesh = THREE.Mesh;\n        var Object3D = THREE.Object3D;\n        var Widget_1 = __webpack_require__(17);\n        var GridWidget_1 = __webpack_require__(23);\n        var Utils_1 = __webpack_require__(14);\n        var interfaces_1 = __webpack_require__(21);\n        var AxisWidget = function(_super) {\n            __extends(AxisWidget, _super);\n            function AxisWidget(state) {\n                var _this = this;\n                _super.call(this, state);\n                this.isDestroyed = false;\n                this.object3D = new Object3D();\n                this.axisXObject = new Object3D();\n                this.axisYObject = new Object3D();\n                this.object3D.add(this.axisXObject);\n                this.object3D.add(this.axisYObject);\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n                this.updateAxisXRequest = Utils_1.Utils.throttle(function() {\n                    return _this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }, 1e3);\n                this.onScrollChange(state.screen.options.scrollX, state.screen.options.scrollY);\n            }\n            AxisWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                this.bindEvent(state.screen.onTransformationFrame(function(options) {\n                    _this.onScrollChange(options.scrollX, options.scrollY);\n                }), state.screen.onZoomFrame(function(options) {\n                    _this.onZoomFrame(options);\n                }), state.onDestroy(function() {\n                    return _this.onDestroy();\n                }), state.onResize(function() {\n                    return _this.onResize();\n                }));\n            };\n            AxisWidget.prototype.onDestroy = function() {\n                this.isDestroyed = true;\n                this.unbindEvents();\n            };\n            AxisWidget.prototype.onScrollChange = function(x, y) {\n                if (y != void 0) {\n                    this.axisYObject.position.y = y;\n                    this.axisXObject.position.y = y;\n                }\n                if (x != void 0) {\n                    this.axisYObject.position.x = x;\n                    this.updateAxisXRequest();\n                }\n            };\n            AxisWidget.prototype.onResize = function() {\n                this.setupAxis(interfaces_1.AXIS_TYPE.X);\n                this.setupAxis(interfaces_1.AXIS_TYPE.Y);\n            };\n            AxisWidget.prototype.setupAxis = function(orientation) {\n                var _this = this;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var canvasWidth = 0, canvasHeight = 0;\n                if (isXAxis) {\n                    this.axisXObject.traverse(function(obj) {\n                        return _this.axisXObject.remove(obj);\n                    });\n                    canvasWidth = visibleWidth * 3;\n                    canvasHeight = 50;\n                } else {\n                    this.axisYObject.traverse(function(obj) {\n                        return _this.axisYObject.remove(obj);\n                    });\n                    canvasWidth = 50;\n                    canvasHeight = visibleHeight * 3;\n                }\n                var texture = Utils_1.Utils.createPixelPerfectTexture(canvasWidth, canvasHeight, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                    ctx.fillStyle = \"rgba(255,255,255,0.5)\";\n                    ctx.strokeStyle = \"rgba(255,255,255,0.1)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                var axisMesh = new Mesh(new THREE.PlaneGeometry(canvasWidth, canvasHeight), material);\n                if (isXAxis) {\n                    axisMesh.position.set(canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisXObject.add(axisMesh);\n                } else {\n                    axisMesh.position.set(visibleWidth - canvasWidth / 2, canvasHeight / 2, 0);\n                    this.axisYObject.add(axisMesh);\n                }\n                this.updateAxis(orientation);\n            };\n            AxisWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisWidget.prototype.updateAxis = function(orientation) {\n                if (this.isDestroyed) return;\n                var isXAxis = orientation == interfaces_1.AXIS_TYPE.X;\n                var _a = this.chartState.data, visibleWidth = _a.width, visibleHeight = _a.height;\n                var _b = this.chartState.screen.options, scrollX = _b.scrollX, scrollY = _b.scrollY, zoomX = _b.zoomX, zoomY = _b.zoomY;\n                var axisOptions;\n                var axisMesh;\n                var axisGridParams;\n                if (isXAxis) {\n                    axisMesh = this.axisXObject.children[0];\n                    axisOptions = this.chartState.data.xAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleWidth, zoomX);\n                } else {\n                    axisMesh = this.axisYObject.children[0];\n                    axisOptions = this.chartState.data.yAxis;\n                    axisGridParams = GridWidget_1.GridWidget.getGridParamsForAxis(axisOptions, visibleHeight, zoomY);\n                }\n                var geometry = axisMesh.geometry;\n                var canvasWidth = geometry.parameters.width;\n                var canvasHeight = geometry.parameters.height;\n                var texture = axisMesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                if (isXAxis) {\n                    axisMesh.position.x = canvasWidth / 2 - visibleWidth + scrollX;\n                }\n                var edgeOffset = axisGridParams.segmentsCount * axisGridParams.step;\n                var startVal = axisGridParams.start - edgeOffset;\n                var endVal = axisGridParams.end + edgeOffset;\n                ctx.beginPath();\n                for (var val = startVal; val <= endVal; val += axisGridParams.step) {\n                    var displayedValue = \"\";\n                    if (isXAxis) {\n                        var pxVal = this.chartState.screen.getPointOnXAxis(val) - scrollX + visibleWidth;\n                        ctx.textAlign = \"center\";\n                        if (axisOptions.dataType == interfaces_1.AXIS_DATA_TYPE.DATE) {\n                            displayedValue = AxisWidget.getDateStr(val, axisGridParams);\n                        } else {\n                            displayedValue = Number(val.toFixed(14)).toString();\n                        }\n                        ctx.fillText(displayedValue, pxVal, canvasHeight - 10);\n                    } else {\n                        var pxVal = canvasHeight - this.chartState.screen.getPointOnYAxis(val) + scrollY;\n                        ctx.textAlign = \"right\";\n                        displayedValue = Number(val.toFixed(14)).toString();\n                        ctx.fillText(displayedValue, canvasWidth - 15, pxVal + 3);\n                    }\n                    ctx.stroke();\n                }\n                ctx.stroke();\n                ctx.closePath();\n                texture.needsUpdate = true;\n            };\n            AxisWidget.prototype.onZoomFrame = function(options) {\n                if (options.zoomX) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.X);\n                }\n                if (options.zoomY) {\n                    this.updateAxis(interfaces_1.AXIS_TYPE.Y);\n                }\n            };\n            AxisWidget.getDateStr = function(timestamp, gridParams) {\n                var sec = 1e3;\n                var min = sec * 60;\n                var hour = min * 60;\n                var day = hour * 60;\n                var step = gridParams.step;\n                var d = new Date(timestamp);\n                var tf = function(num) {\n                    return Utils_1.Utils.toFixed(num, 2);\n                };\n                return tf(d.getHours()) + \":\" + tf(d.getMinutes()) + \":\" + tf(d.getSeconds());\n            };\n            AxisWidget.widgetName = \"Axis\";\n            return AxisWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisWidget = AxisWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Vector3 = THREE.Vector3;\n        var Widget_1 = __webpack_require__(17);\n        var LineSegments = THREE.LineSegments;\n        var Utils_1 = __webpack_require__(14);\n        var GridWidget = function(_super) {\n            __extends(GridWidget, _super);\n            function GridWidget(chartState) {\n                _super.call(this, chartState);\n                this.isDestroyed = false;\n                var _a = chartState.data, width = _a.width, height = _a.height, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                this.gridSizeH = Math.floor(width / xAxis.gridMinSize) * 3;\n                this.gridSizeV = Math.floor(height / yAxis.gridMinSize) * 3;\n                this.initGrid();\n                this.updateGrid();\n            }\n            GridWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var updateGridThrottled = Utils_1.Utils.throttle(function() {\n                    return _this.updateGrid();\n                }, 1e3);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return updateGridThrottled();\n                }), this.chartState.screen.onZoomFrame(function(options) {\n                    updateGridThrottled();\n                    _this.onZoomFrame(options);\n                }), this.chartState.onDestroy(function() {\n                    _this.isDestroyed = true;\n                    _this.unbindEvents();\n                }), this.chartState.onResize(function() {\n                    _this.updateGrid();\n                }));\n            };\n            GridWidget.prototype.initGrid = function() {\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: .1,\n                    transparent: true\n                });\n                var xLinesCount = this.gridSizeH;\n                var yLinesCount = this.gridSizeV;\n                while (xLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                while (yLinesCount--) geometry.vertices.push(new Vector3(), new Vector3());\n                this.lineSegments = new LineSegments(geometry, material);\n                this.lineSegments.position.setZ(-1);\n                this.lineSegments.frustumCulled = false;\n            };\n            GridWidget.prototype.updateGrid = function() {\n                if (this.isDestroyed) return;\n                var _a = this.chartState.data, yAxis = _a.yAxis, xAxis = _a.xAxis, width = _a.width, height = _a.height;\n                var axisXGrid = GridWidget.getGridParamsForAxis(xAxis, width, xAxis.range.zoom);\n                var axisYGrid = GridWidget.getGridParamsForAxis(yAxis, height, yAxis.range.zoom);\n                var scrollXInSegments = Math.ceil(xAxis.range.scroll / axisXGrid.step);\n                var scrollYInSegments = Math.ceil(yAxis.range.scroll / axisYGrid.step);\n                var gridScrollXVal = scrollXInSegments * axisXGrid.step;\n                var gridScrollYVal = scrollYInSegments * axisYGrid.step;\n                var startXVal = axisXGrid.start + gridScrollXVal;\n                var startYVal = axisYGrid.start + gridScrollYVal;\n                var geometry = this.lineSegments.geometry;\n                var vertices = geometry.vertices;\n                var lineInd = 0;\n                for (var i = -this.gridSizeH / 3; i < this.gridSizeH * 2 / 3; i++) {\n                    var value = startXVal + i * axisXGrid.step;\n                    var lineSegment = this.getVerticalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                for (var i = -this.gridSizeV / 3; i < this.gridSizeV * 2 / 3; i++) {\n                    var value = startYVal + i * axisYGrid.step;\n                    var lineSegment = this.getHorizontalLineSegment(value, gridScrollXVal, gridScrollYVal);\n                    vertices[lineInd * 2].set(lineSegment[0].x, lineSegment[0].y, 0);\n                    vertices[lineInd * 2 + 1].set(lineSegment[1].x, lineSegment[1].y, 0);\n                    lineInd++;\n                }\n                geometry.verticesNeedUpdate = true;\n                this.lineSegments.scale.set(xAxis.range.scaleFactor * xAxis.range.zoom, yAxis.range.scaleFactor * yAxis.range.zoom, 1);\n            };\n            GridWidget.prototype.getHorizontalLineSegment = function(yVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localYVal = yVal - chartState.data.yAxis.range.zeroVal - scrollYVal;\n                var widthVal = chartState.pxToValueByXAxis(chartState.data.width);\n                return [ new THREE.Vector3(widthVal * 2 + scrollXVal, localYVal, 0), new THREE.Vector3(-widthVal + scrollXVal, localYVal, 0) ];\n            };\n            GridWidget.prototype.getVerticalLineSegment = function(xVal, scrollXVal, scrollYVal) {\n                var chartState = this.chartState;\n                var localXVal = xVal - chartState.data.xAxis.range.zeroVal - scrollXVal;\n                var heightVal = chartState.pxToValueByYAxis(chartState.data.height);\n                return [ new THREE.Vector3(localXVal, heightVal * 2 + scrollYVal, 0), new THREE.Vector3(localXVal, -heightVal + scrollYVal, 0) ];\n            };\n            GridWidget.prototype.onZoomFrame = function(options) {\n                var _a = this.chartState.data, xAxis = _a.xAxis, yAxis = _a.yAxis;\n                if (options.zoomX) this.lineSegments.scale.setX(xAxis.range.scaleFactor * options.zoomX);\n                if (options.zoomY) this.lineSegments.scale.setY(yAxis.range.scaleFactor * options.zoomY);\n            };\n            GridWidget.getGridParamsForAxis = function(axisOptions, axisWidth, zoom) {\n                var axisRange = axisOptions.range;\n                var from = axisRange.from;\n                var to = axisRange.to;\n                var axisLength = to - from;\n                var gridStep = 0;\n                var gridStepInPixels = 0;\n                var minGridStepInPixels = axisOptions.gridMinSize;\n                var axisLengthStr = String(axisLength);\n                var axisLengthPointPosition = axisLengthStr.indexOf(\".\");\n                var intPartLength = axisLengthPointPosition !== -1 ? axisLengthPointPosition : axisLengthStr.length;\n                var gridStepFound = false;\n                var digitPos = 0;\n                while (!gridStepFound) {\n                    var power = intPartLength - digitPos - 1;\n                    var multiplier = Math.pow(10, power) || 1;\n                    var dividers = [ 1, 2, 5 ];\n                    for (var dividerInd = 0; dividerInd < dividers.length; dividerInd++) {\n                        var nextGridStep = multiplier / dividers[dividerInd];\n                        var nextGridStepInPixels = nextGridStep / axisLength * axisWidth;\n                        if (nextGridStepInPixels >= minGridStepInPixels) {\n                            gridStep = nextGridStep;\n                            gridStepInPixels = nextGridStepInPixels;\n                        } else {\n                            gridStepFound = true;\n                            if (gridStep === 0) {\n                                gridStep = nextGridStep;\n                                gridStepInPixels = nextGridStepInPixels;\n                            }\n                            break;\n                        }\n                    }\n                    if (!gridStepFound) digitPos++;\n                }\n                var gridStart = Math.floor(from / gridStep) * gridStep;\n                var gridEnd = Math.floor(to / gridStep) * gridStep;\n                return {\n                    start: gridStart,\n                    end: gridEnd,\n                    step: gridStep,\n                    stepInPx: gridStepInPixels,\n                    length: gridEnd - gridStart,\n                    segmentsCount: Math.round((gridEnd - gridStart) / gridStep)\n                };\n            };\n            GridWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            GridWidget.widgetName = \"Grid\";\n            return GridWidget;\n        }(Widget_1.ChartWidget);\n        exports.GridWidget = GridWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Geometry = THREE.Geometry;\n        var Utils_1 = __webpack_require__(14);\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Color_1 = __webpack_require__(26);\n        var TrendsGradientWidget = function(_super) {\n            __extends(TrendsGradientWidget, _super);\n            function TrendsGradientWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsGradientWidget.prototype.getTrendWidgetClass = function() {\n                return TrendGradient;\n            };\n            TrendsGradientWidget.widgetName = \"TrendsGradient\";\n            return TrendsGradientWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsGradientWidget = TrendsGradientWidget;\n        var TrendGradient = function(_super) {\n            __extends(TrendGradient, _super);\n            function TrendGradient(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.visibleSegmentsCnt = 0;\n                this.trend = chartState.trendsManager.getTrend(trendName);\n                this.segmentsIds = new Uint16Array(chartState.data.maxVisibleSegments);\n                this.initGradient();\n                this.updateSegments();\n            }\n            TrendGradient.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasBackground;\n            };\n            TrendGradient.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n                    _this.updateSegments();\n                }));\n                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n                    _this.updateSegments();\n                }));\n                this.bindEvent(this.chartState.onZoom(function() {\n                    _this.updateSegments();\n                }));\n            };\n            TrendGradient.prototype.getObject3D = function() {\n                return this.gradient;\n            };\n            TrendGradient.prototype.initGradient = function() {\n                var geometry = new Geometry();\n                for (var i = 0; i < this.segmentsIds.length; i++) {\n                    geometry.vertices.push(new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3());\n                    var ind = i * 4;\n                    geometry.faces.push(new THREE.Face3(ind, ind + 1, ind + 2), new THREE.Face3(ind + 3, ind, ind + 2));\n                }\n                var color = new Color_1.ChartColor(this.trend.getOptions().backgroundColor);\n                this.gradient = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({\n                    color: color.value,\n                    transparent: true,\n                    opacity: color.a\n                }));\n                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.gradient.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.gradient.frustumCulled = false;\n            };\n            TrendGradient.prototype.onZoomFrame = function(options) {\n                var state = this.chartState.data;\n                var scaleXFactor = state.xAxis.range.scaleFactor;\n                var scaleYFactor = state.yAxis.range.scaleFactor;\n                var currentScale = this.gradient.scale;\n                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n            };\n            TrendGradient.prototype.onSegmentsAnimate = function(trendSegmentsManager) {\n                var animatedSegmentsIds = trendSegmentsManager.animatedSegmentsIds;\n                for (var i = 0; i < this.visibleSegmentsCnt; i++) {\n                    var segmentId = this.segmentsIds[i];\n                    if (!animatedSegmentsIds.includes(segmentId)) continue;\n                    this.setupSegmentVertices(i, trendSegmentsManager.getSegment(segmentId).currentAnimationState);\n                }\n                this.gradient.geometry.verticesNeedUpdate = true;\n            };\n            TrendGradient.prototype.updateSegments = function() {\n                var geometry = this.gradient.geometry;\n                var _a = this.trend.segmentsManager, trendSegments = _a.segments, segmentInd = _a.firstDisplayedSegmentInd, lastDisplayedSegmentInd = _a.lastDisplayedSegmentInd;\n                var prevVisibleSegmentsCnt = this.visibleSegmentsCnt;\n                this.visibleSegmentsCnt = lastDisplayedSegmentInd - segmentInd + 1;\n                var segmentsToProcessCnt = Math.max(prevVisibleSegmentsCnt, this.visibleSegmentsCnt);\n                if (segmentsToProcessCnt > this.segmentsIds.length) {\n                    Utils_1.Utils.error(TrendsGradientWidget.widgetName + \": MAX_SEGMENTS reached\");\n                }\n                for (var i = 0; i <= segmentsToProcessCnt; i++) {\n                    if (segmentInd <= lastDisplayedSegmentInd) {\n                        var segment = trendSegments[segmentInd];\n                        this.setupSegmentVertices(i, segment.currentAnimationState);\n                        this.segmentsIds[i] = segment.id;\n                        segmentInd++;\n                    } else {\n                        this.setupSegmentVertices(i);\n                    }\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendGradient.prototype.setupSegmentVertices = function(segmentInd, segmentState) {\n                var gradientSegmentInd = segmentInd * 4;\n                var vertices = this.gradient.geometry.vertices;\n                var topLeft = vertices[gradientSegmentInd];\n                var bottomLeft = vertices[gradientSegmentInd + 1];\n                var bottomRight = vertices[gradientSegmentInd + 2];\n                var topRight = vertices[gradientSegmentInd + 3];\n                var screenHeightVal = Math.max(this.chartState.pxToValueByYAxis(this.chartState.data.height), this.chartState.screen.pxToValueByYAxis(this.chartState.data.height));\n                if (segmentState) {\n                    var startX = this.toLocalX(segmentState.startXVal);\n                    var startY = this.toLocalY(segmentState.startYVal);\n                    var endX = this.toLocalX(segmentState.endXVal);\n                    var endY = this.toLocalY(segmentState.endYVal);\n                    topLeft.set(startX, startY, 0);\n                    topRight.set(endX, endY, 0);\n                    bottomLeft.set(topLeft.x, topLeft.y - screenHeightVal, 0);\n                    bottomRight.set(topRight.x, topRight.y - screenHeightVal, 0);\n                } else {\n                    topLeft.set(0, 0, 0);\n                    topRight.set(0, 0, 0);\n                    bottomLeft.set(0, 0, 0);\n                    bottomRight.set(0, 0, 0);\n                }\n            };\n            TrendGradient.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendGradient.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            return TrendGradient;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendGradient = TrendGradient;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(17);\n        var Object3D = THREE.Object3D;\n        var TrendsWidget = function(_super) {\n            __extends(TrendsWidget, _super);\n            function TrendsWidget(state) {\n                _super.call(this, state);\n                this.widgets = {};\n                this.object3D = new Object3D();\n                this.onTrendsChange();\n            }\n            TrendsWidget.prototype.bindEvents = function() {\n                var _this = this;\n                var state = this.chartState;\n                state.onTrendsChange(function() {\n                    return _this.onTrendsChange();\n                });\n                state.onTrendChange(function(trendName, changedOptions, newData) {\n                    _this.onTrendChange(trendName, changedOptions, newData);\n                });\n            };\n            TrendsWidget.prototype.onTrendsChange = function() {\n                var trendsOptions = this.chartState.data.trends;\n                var TrendWidgetClass = this.getTrendWidgetClass();\n                for (var trendName in trendsOptions) {\n                    var trendOptions = trendsOptions[trendName];\n                    var widgetCanBeEnabled = TrendWidgetClass.widgetIsEnabled(trendOptions, this.chartState);\n                    if (widgetCanBeEnabled && !this.widgets[trendName]) {\n                        this.createTrendWidget(trendName);\n                    } else if (!widgetCanBeEnabled && this.widgets[trendName]) {\n                        this.destroyTrendWidget(trendName);\n                    }\n                }\n            };\n            TrendsWidget.prototype.onTrendChange = function(trendName, changedOptions, newData) {\n                var widget = this.widgets[trendName];\n                if (!widget) return;\n                widget.onTrendChange(changedOptions);\n                if (newData) {\n                    var data = this.chartState.getTrend(trendName).getData();\n                    var isAppend = !data.length || data[0].xVal < newData[0].xVal;\n                    isAppend ? widget.appendData(newData) : widget.prependData(newData);\n                }\n            };\n            TrendsWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendsWidget.prototype.createTrendWidget = function(trendName) {\n                var WidgetConstructor = this.getTrendWidgetClass();\n                var widget = new WidgetConstructor(this.chartState, trendName);\n                this.widgets[trendName] = widget;\n                var widgetObject = widget.getObject3D();\n                widgetObject.name = trendName;\n                this.object3D.add(widget.getObject3D());\n            };\n            TrendsWidget.prototype.destroyTrendWidget = function(trendName) {\n                this.widgets[trendName].onDestroy();\n                delete this.widgets[trendName];\n                var widgetObject = this.object3D.getObjectByName(trendName);\n                this.object3D.remove(widgetObject);\n            };\n            return TrendsWidget;\n        }(Widget_1.ChartWidget);\n        exports.TrendsWidget = TrendsWidget;\n        var TrendWidget = function() {\n            function TrendWidget(chartState, trendName) {\n                this.chartState = chartState;\n                this.trendName = trendName;\n                this.unsubscribers = [];\n                this.trend = chartState.trendsManager.getTrend(trendName);\n                this.chartState = chartState;\n                this.bindEvents();\n            }\n            TrendWidget.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled;\n            };\n            TrendWidget.prototype.appendData = function(newData) {};\n            TrendWidget.prototype.prependData = function(newData) {};\n            TrendWidget.prototype.onTrendChange = function(changedOptions) {};\n            TrendWidget.prototype.onDestroy = function() {\n                for (var _i = 0, _a = this.unsubscribers; _i < _a.length; _i++) {\n                    var unsubscriber = _a[_i];\n                    unsubscriber();\n                }\n            };\n            TrendWidget.prototype.onSegmentsAnimate = function(segments) {};\n            TrendWidget.prototype.onZoomFrame = function(options) {};\n            TrendWidget.prototype.onTransformationFrame = function(options) {};\n            TrendWidget.prototype.onZoom = function() {};\n            TrendWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.trend.segmentsManager.onAnimationFrame(function(trendPoints) {\n                    return _this.onSegmentsAnimate(trendPoints);\n                }));\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function(options) {\n                    return _this.onTransformationFrame(options);\n                }));\n                this.bindEvent(this.chartState.screen.onZoomFrame(function(options) {\n                    return _this.onZoomFrame(options);\n                }));\n                this.bindEvent(this.chartState.onZoom(function() {\n                    return _this.onZoom();\n                }));\n            };\n            TrendWidget.prototype.bindEvent = function(unsubscriber) {\n                this.unsubscribers.push(unsubscriber);\n            };\n            return TrendWidget;\n        }();\n        exports.TrendWidget = TrendWidget;\n    }, function(module, exports) {\n        \"use strict\";\n        var ChartColor = function() {\n            function ChartColor(color) {\n                this.set(color);\n            }\n            /**!\r\n\t     * @preserve $.parseColor\r\n\t     * Copyright 2011 THEtheChad Elliott\r\n\t     * Released under the MIT and GPL licenses.\r\n\t     */\n            ChartColor.parseColor = function(color) {\n                var cache, p = parseInt, color = color.replace(/\\s\\s*/g, \"\");\n                if (cache = /^#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16) ]; else if (cache = /^#([\\da-fA-F])([\\da-fA-F])([\\da-fA-F])/.exec(color)) cache = [ p(cache[1], 16) * 17, p(cache[2], 16) * 17, p(cache[3], 16) * 17 ]; else if (cache = /^rgba\\(#([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2}),(([0-9]*[.])?[0-9]+)/.exec(color)) cache = [ p(cache[1], 16), p(cache[2], 16), p(cache[3], 16), +cache[4] ]; else if (cache = /^rgba\\(([\\d]+),([\\d]+),([\\d]+),([\\d]+|[\\d]*.[\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3], +cache[4] ]; else if (cache = /^rgb\\(([\\d]+),([\\d]+),([\\d]+)\\)/.exec(color)) cache = [ +cache[1], +cache[2], +cache[3] ]; else throw Error(color + \" is not supported by parseColor\");\n                isNaN(cache[3]) && (cache[3] = 1);\n                return cache;\n            };\n            ChartColor.prototype.set = function(color) {\n                if (typeof color == \"number\") color = \"#\" + color.toString(16);\n                var colorStr = color;\n                var rgba = ChartColor.parseColor(colorStr);\n                this.r = rgba[0];\n                this.g = rgba[1];\n                this.b = rgba[2];\n                this.a = rgba[3];\n                this.value = (rgba[0] << 8 * 2) + (rgba[1] << 8) + rgba[2];\n                this.hexStr = \"#\" + this.value.toString(16);\n                this.rgbaStr = \"rgba(\" + this.r + \", \" + this.g + \", \" + this.b + \", \" + this.a + \")\";\n            };\n            return ChartColor;\n        }();\n        exports.ChartColor = ChartColor;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(13);\n        var TrendsLoadingWidget = function(_super) {\n            __extends(TrendsLoadingWidget, _super);\n            function TrendsLoadingWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLoadingWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLoading;\n            };\n            TrendsLoadingWidget.widgetName = \"TrendsLoading\";\n            return TrendsLoadingWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLoadingWidget = TrendsLoadingWidget;\n        var TrendLoading = function(_super) {\n            __extends(TrendLoading, _super);\n            function TrendLoading(state, trendName) {\n                _super.call(this, state, trendName);\n                this.isActive = false;\n                this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendLoading.createTexture(),\n                    transparent: true\n                }));\n                this.deactivate();\n            }\n            TrendLoading.widgetIsEnabled = function(trendOptions, chartState) {\n                return trendOptions.enabled && chartState.data.animations.enabled;\n            };\n            TrendLoading.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendLoading.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.onPrependRequest(function() {\n                    return _this.activate();\n                }));\n            };\n            TrendLoading.prototype.prependData = function() {\n                this.deactivate();\n            };\n            TrendLoading.prototype.activate = function() {\n                var mesh = this.mesh;\n                mesh.material.opacity = 1;\n                mesh.rotation.z = 0;\n                var animation = TweenLite.to(this.mesh.rotation, .5, {\n                    z: Math.PI * 2\n                });\n                animation.eventCallback(\"onComplete\", function() {\n                    animation.restart();\n                });\n                this.animation = animation;\n                this.isActive = true;\n                this.updatePosition();\n            };\n            TrendLoading.prototype.deactivate = function() {\n                this.animation && this.animation.kill();\n                this.mesh.material.opacity = 0;\n                this.isActive = false;\n            };\n            TrendLoading.createTexture = function() {\n                var h = 64, w = 64;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                    ctx.lineWidth = 5;\n                    var center = h / 2;\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, 0, Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 22, Math.PI, Math.PI + Math.PI / 2);\n                    ctx.stroke();\n                    ctx.beginPath();\n                    ctx.arc(center, center, 3, 0, Math.PI * 2);\n                    ctx.stroke();\n                });\n            };\n            TrendLoading.prototype.onZoomFrame = function() {\n                this.updatePosition();\n            };\n            TrendLoading.prototype.updatePosition = function() {\n                if (!this.isActive) return;\n                var trend = this.trend;\n                var segment = trend.segmentsManager.getStartSegment();\n                var x, y;\n                if (trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    x = segment.currentAnimationState.startXVal;\n                    y = segment.currentAnimationState.startYVal;\n                } else {\n                    x = segment.currentAnimationState.xVal - segment.maxLength;\n                    y = segment.currentAnimationState.yVal;\n                }\n                var pointVector = this.chartState.screen.getPointOnChart(x, y);\n                this.mesh.position.set(pointVector.x, pointVector.y, 0);\n            };\n            return TrendLoading;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLoading = TrendLoading;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(17);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var Utils_1 = __webpack_require__(14);\n        var Line = THREE.Line;\n        var Mesh = THREE.Mesh;\n        var interfaces_1 = __webpack_require__(21);\n        var Color_1 = __webpack_require__(26);\n        var AxisMarksWidget = function(_super) {\n            __extends(AxisMarksWidget, _super);\n            function AxisMarksWidget(chartState) {\n                _super.call(this, chartState);\n                this.axisMarksWidgets = [];\n                this.object3D = new Object3D();\n                var xAxisMarks = chartState.xAxisMarks, yAxisMarks = chartState.yAxisMarks;\n                var items = xAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n                items = yAxisMarks.getItems();\n                for (var markName in items) {\n                    this.createAxisMark(items[markName]);\n                }\n            }\n            AxisMarksWidget.prototype.createAxisMark = function(axisMark) {\n                var axisMarkWidget = new AxisMarkWidget(this.chartState, axisMark);\n                this.axisMarksWidgets.push(axisMarkWidget);\n                this.object3D.add(axisMarkWidget.getObject3D());\n            };\n            AxisMarksWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.bindEvent(this.chartState.screen.onTransformationFrame(function() {\n                    return _this.updateMarksPositions();\n                }), this.chartState.onResize(function() {\n                    return _this.updateMarksPositions();\n                }));\n            };\n            AxisMarksWidget.prototype.updateMarksPositions = function() {\n                for (var _i = 0, _a = this.axisMarksWidgets; _i < _a.length; _i++) {\n                    var widget = _a[_i];\n                    widget.updatePosition();\n                }\n            };\n            AxisMarksWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarksWidget.widgetName = \"AxisMarks\";\n            return AxisMarksWidget;\n        }(Widget_1.ChartWidget);\n        exports.AxisMarksWidget = AxisMarksWidget;\n        var DEFAULT_INDICATOR_RENDER_FUNCTION = function(axisMarkWidget, ctx) {\n            var axisMark = axisMarkWidget.axisMark;\n            ctx.fillStyle = axisMark.options.lineColor;\n            ctx.clearRect(0, 0, axisMarkWidget.indicatorWidth, axisMarkWidget.indicatorHeight);\n            var xCoord = 15;\n            if (axisMark.axisType == interfaces_1.AXIS_TYPE.Y) {\n                ctx.textAlign = \"end\";\n                xCoord = axisMarkWidget.indicatorWidth;\n            }\n            ctx.fillText(axisMark.options.title, xCoord, 20);\n            if (!axisMark.options.showValue) return;\n            ctx.fillStyle = \"rgba(255, 255, 255, 0.7)\";\n            ctx.fillText(axisMark.getDisplayedVal(), 16, 34);\n        };\n        var INDICATOR_POS_Z = .1;\n        var AxisMarkWidget = function() {\n            function AxisMarkWidget(chartState, axisMark) {\n                this.indicatorWidth = 128;\n                this.indicatorHeight = 64;\n                this.indicatorRenderFunction = DEFAULT_INDICATOR_RENDER_FUNCTION;\n                this.chartState = chartState;\n                this.axisMark = axisMark;\n                this.axisType = axisMark.axisType;\n                this.frameValue = axisMark.options.value;\n                this.object3D = new Object3D();\n                this.object3D.position.setZ(-.1);\n                this.line = this.createLine();\n                this.object3D.add(this.line);\n                this.indicator = this.createIndicator();\n                this.object3D.add(this.indicator);\n                this.renderIndicator();\n                this.updatePosition();\n                this.bindEvents();\n            }\n            AxisMarkWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            AxisMarkWidget.prototype.createLine = function() {\n                var _a = this.axisMark.options, lineWidth = _a.lineWidth, lineColor = _a.lineColor;\n                var lineGeometry = new Geometry();\n                lineGeometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n                return new Line(lineGeometry, new LineBasicMaterial({\n                    color: new Color_1.ChartColor(lineColor).value,\n                    linewidth: lineWidth\n                }));\n            };\n            AxisMarkWidget.prototype.createIndicator = function() {\n                var _a = this, width = _a.indicatorWidth, height = _a.indicatorHeight;\n                var texture = Utils_1.Utils.createPixelPerfectTexture(width, height, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"10px Arial\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                return new Mesh(new THREE.PlaneGeometry(width, height), material);\n            };\n            AxisMarkWidget.prototype.renderIndicator = function() {\n                var texture = this.indicator.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                DEFAULT_INDICATOR_RENDER_FUNCTION(this, ctx);\n                texture.needsUpdate = true;\n            };\n            AxisMarkWidget.prototype.bindEvents = function() {\n                var _this = this;\n                this.axisMark.onDisplayedValueChange(function() {\n                    return _this.renderIndicator();\n                });\n                this.axisMark.onValueChange(function() {\n                    return _this.onValueChangeHandler();\n                });\n            };\n            AxisMarkWidget.prototype.onValueChangeHandler = function() {\n                var _this = this;\n                if (this.moveAnimation) this.moveAnimation.kill();\n                var animations = this.chartState.data.animations;\n                var targetValue = this.axisMark.options.value;\n                var cb = function() {\n                    _this.updatePosition();\n                };\n                if (animations.enabled) {\n                    this.moveAnimation = TweenLite.to(this, animations.trendChangeSpeed, {\n                        frameValue: targetValue,\n                        ease: animations.trendChangeEase\n                    });\n                    this.moveAnimation.eventCallback(\"onUpdate\", cb);\n                } else {\n                    this.frameValue = targetValue;\n                    cb();\n                }\n            };\n            AxisMarkWidget.prototype.updatePosition = function() {\n                var chartState = this.chartState;\n                var screen = chartState.screen;\n                var isXAxis = this.axisType == interfaces_1.AXIS_TYPE.X;\n                var lineGeometry = this.line.geometry;\n                var hasStickMode = this.axisMark.options.stickToEdges;\n                var _a = this.chartState.data, width = _a.width, height = _a.height;\n                if (isXAxis) {\n                    this.object3D.position.x = screen.getPointOnXAxis(this.frameValue);\n                    this.object3D.position.y = screen.getBottom();\n                    lineGeometry.vertices[1].setY(height);\n                    this.indicator.position.set(this.indicatorWidth / 2, chartState.data.height - this.indicatorHeight / 2, INDICATOR_POS_Z);\n                } else {\n                    var val = this.frameValue;\n                    var bottomVal = screen.getBottomVal();\n                    var topVal = screen.getTopVal();\n                    var needToStickOnTop = hasStickMode && val > topVal;\n                    var needToStickOnBottom = hasStickMode && val < bottomVal;\n                    var centerYVal = screen.getCenterYVal();\n                    this.object3D.position.x = screen.getLeft();\n                    if (needToStickOnTop) {\n                        this.object3D.position.y = screen.getTop();\n                    } else if (needToStickOnBottom) {\n                        this.object3D.position.y = screen.getBottom();\n                    } else {\n                        this.object3D.position.y = screen.getPointOnYAxis(this.frameValue);\n                    }\n                    lineGeometry.vertices[1].setX(width);\n                    var indicatorPosY = val > centerYVal ? -35 : 10;\n                    this.indicator.position.set(width - this.indicatorWidth / 2 - 50, indicatorPosY, INDICATOR_POS_Z);\n                }\n                lineGeometry.verticesNeedUpdate = true;\n            };\n            AxisMarkWidget.typeName = \"simple\";\n            return AxisMarkWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Widget_1 = __webpack_require__(17);\n        var LineSegments = THREE.LineSegments;\n        var Vector3 = THREE.Vector3;\n        var BorderWidget = function(_super) {\n            __extends(BorderWidget, _super);\n            function BorderWidget(chartState) {\n                _super.call(this, chartState);\n                var _a = chartState.data, width = _a.width, height = _a.height;\n                var geometry = new THREE.Geometry();\n                var material = new THREE.LineBasicMaterial({\n                    linewidth: 1,\n                    opacity: 0,\n                    transparent: true\n                });\n                geometry.vertices.push(new Vector3(0, 0, 0), new Vector3(0, height, 0), new Vector3(0, height, 0), new Vector3(width, height, 0), new Vector3(width, height, 0), new Vector3(width, 0, 0), new Vector3(width, 0, 0), new Vector3(0, 0, 0), new Vector3(width / 2, height, 0), new Vector3(width / 2, 0, 0));\n                this.lineSegments = new LineSegments(geometry, material);\n            }\n            BorderWidget.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            BorderWidget.widgetName = \"Border\";\n            return BorderWidget;\n        }(Widget_1.ChartWidget);\n        exports.BorderWidget = BorderWidget;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Color_1 = __webpack_require__(26);\n        var CANVAS_WIDTH = 128;\n        var CANVAS_HEIGHT = 64;\n        var OFFSET_X = 15;\n        var TrendsIndicatorWidget = function(_super) {\n            __extends(TrendsIndicatorWidget, _super);\n            function TrendsIndicatorWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsIndicatorWidget.prototype.getTrendWidgetClass = function() {\n                return TrendIndicator;\n            };\n            TrendsIndicatorWidget.widgetName = \"TrendsIndicator\";\n            return TrendsIndicatorWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsIndicatorWidget = TrendsIndicatorWidget;\n        var TrendIndicator = function(_super) {\n            __extends(TrendIndicator, _super);\n            function TrendIndicator(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                this.onTrendChange();\n            }\n            TrendIndicator.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasIndicator;\n            };\n            TrendIndicator.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendIndicator.prototype.onTrendChange = function() {\n                var trendData = this.trend.getData();\n                var lastItem = trendData[trendData.length - 1];\n                var texture = this.mesh.material.map;\n                var ctx = texture.image.getContext(\"2d\");\n                ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\n                ctx.fillText(lastItem.yVal.toFixed(4), 0, 15);\n                texture.needsUpdate = true;\n            };\n            TrendIndicator.prototype.initObject = function() {\n                var color = new Color_1.ChartColor(this.trend.getOptions().lineColor);\n                var texture = Utils_1.Utils.createPixelPerfectTexture(CANVAS_WIDTH, CANVAS_HEIGHT, function(ctx) {\n                    ctx.beginPath();\n                    ctx.font = \"15px Arial\";\n                    ctx.fillStyle = color.rgbaStr;\n                    ctx.strokeStyle = \"rgba(255,255,255,0.95)\";\n                });\n                var material = new THREE.MeshBasicMaterial({\n                    map: texture,\n                    side: THREE.FrontSide\n                });\n                material.transparent = true;\n                this.mesh = new Mesh(new THREE.PlaneGeometry(CANVAS_WIDTH, CANVAS_HEIGHT), material);\n            };\n            TrendIndicator.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segmentsManager.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.onSegmentsAnimate = function(segments) {\n                this.segment = segments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendIndicator.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var _a = this.segment.currentAnimationState, segmentEndXVal = _a.endXVal, segmentEndYVal = _a.endYVal;\n                var endPointVector = state.screen.getPointOnChart(segmentEndXVal, segmentEndYVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x + OFFSET_X;\n                var y = endPointVector.y;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                var indicatorIsOutOfScreen = screenX < 0 || screenX > screenWidth;\n                if (indicatorIsOutOfScreen) {\n                    if (screenX < 0) x = state.screen.getPointByScreenX(0) + 20;\n                    if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth) - CANVAS_WIDTH / 2 - 10;\n                    y -= 25;\n                }\n                this.mesh.position.set(x + CANVAS_WIDTH / 2, y + CANVAS_HEIGHT / 2 - 30, .1);\n            };\n            return TrendIndicator;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendIndicator = TrendIndicator;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Geometry = THREE.Geometry;\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Vector3 = THREE.Vector3;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var LineSegments = THREE.LineSegments;\n        var Trend_1 = __webpack_require__(13);\n        var Utils_1 = __webpack_require__(14);\n        var TrendsLineWidget = function(_super) {\n            __extends(TrendsLineWidget, _super);\n            function TrendsLineWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsLineWidget.prototype.getTrendWidgetClass = function() {\n                return TrendLine;\n            };\n            TrendsLineWidget.widgetName = \"TrendsLine\";\n            return TrendsLineWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsLineWidget = TrendsLineWidget;\n        var TrendLine = function(_super) {\n            __extends(TrendLine, _super);\n            function TrendLine(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeSegmentsInds = [];\n                this.displayedSegments = {};\n                var options = this.trend.getOptions();\n                this.material = new LineBasicMaterial({\n                    color: options.lineColor,\n                    linewidth: options.lineWidth\n                });\n                this.initLine();\n            }\n            TrendLine.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendLine.prototype.getObject3D = function() {\n                return this.lineSegments;\n            };\n            TrendLine.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n                    _this.destroySegments();\n                    _this.setupSegments();\n                }));\n                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n                    _this.setupSegments();\n                }));\n            };\n            TrendLine.prototype.initLine = function() {\n                var geometry = new Geometry();\n                var _a = this.chartState.data.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = this.chartState.data.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.lineSegments = new LineSegments(geometry, this.material);\n                this.lineSegments.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.lineSegments.frustumCulled = false;\n                for (var i = 0; i < this.chartState.data.maxVisibleSegments; i++) {\n                    geometry.vertices.push(new Vector3(), new Vector3());\n                    this.freeSegmentsInds.push(i);\n                }\n                this.vertices = geometry.vertices;\n                this.setupSegments();\n            };\n            TrendLine.prototype.setupSegments = function() {\n                var geometry = this.lineSegments.geometry;\n                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.displayedSegments) {\n                    var lineSegment = this.displayedSegments[segmentId];\n                    var segment_1 = this.trend.segmentsManager.segments[lineSegment.segmentId];\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroySegment(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupSegment(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.setupSegment = function(segmentId, segmentState) {\n                var lineSegment = this.displayedSegments[segmentId];\n                if (!lineSegment) {\n                    if (this.freeSegmentsInds.length == 0) Utils_1.Utils.error(\"Max allocated segments reached\");\n                    var ind = this.freeSegmentsInds.pop();\n                    lineSegment = this.displayedSegments[segmentId] = {\n                        segmentId: segmentId,\n                        ind: ind\n                    };\n                }\n                var segmentInd = lineSegment.ind;\n                var lineStartVertex = this.vertices[segmentInd * 2];\n                var lineEndVertex = this.vertices[segmentInd * 2 + 1];\n                lineStartVertex.set(this.toLocalX(segmentState.startXVal), this.toLocalY(segmentState.startYVal), 0);\n                lineEndVertex.set(this.toLocalX(segmentState.endXVal), this.toLocalY(segmentState.endYVal), 0);\n            };\n            TrendLine.prototype.destroySegments = function() {\n                for (var segmentId in this.displayedSegments) this.destroySegment(Number(segmentId));\n            };\n            TrendLine.prototype.destroySegment = function(segmentId) {\n                var lineSegment = this.displayedSegments[segmentId];\n                var lineStartVertex = this.vertices[lineSegment.ind * 2];\n                var lineEndVertex = this.vertices[lineSegment.ind * 2 + 1];\n                lineStartVertex.set(0, 0, 0);\n                lineEndVertex.set(0, 0, 0);\n                delete this.displayedSegments[segmentId];\n                this.freeSegmentsInds.push(lineSegment.ind);\n            };\n            TrendLine.prototype.onZoomFrame = function(options) {\n                var currentScale = this.lineSegments.scale;\n                var state = this.chartState.data;\n                var scaleXFactor = state.xAxis.range.scaleFactor;\n                var scaleYFactor = state.yAxis.range.scaleFactor;\n                if (options.zoomX) currentScale.setX(scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(scaleYFactor * options.zoomY);\n            };\n            TrendLine.prototype.onSegmentsAnimate = function(trendSegments) {\n                var geometry = this.lineSegments.geometry;\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.displayedSegments[segmentId]) continue;\n                    this.setupSegment(segmentId, trendSegments.segmentsById[segmentId].currentAnimationState);\n                }\n                geometry.verticesNeedUpdate = true;\n            };\n            TrendLine.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendLine.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendLine;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendLine = TrendLine;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Object3D = THREE.Object3D;\n        var Geometry = THREE.Geometry;\n        var Vector3 = THREE.Vector3;\n        var Mesh = THREE.Mesh;\n        var Line = THREE.Line;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var PlaneGeometry = THREE.PlaneGeometry;\n        var Trend_1 = __webpack_require__(13);\n        var LineBasicMaterial = THREE.LineBasicMaterial;\n        var Utils_1 = __webpack_require__(14);\n        var RISE_COLOR = 2927680;\n        var FALL_COLOR = 15619379;\n        var MARGIN_PERCENT = .3;\n        var MAX_CANDLES = 100;\n        var TrendsCandlesWidget = function(_super) {\n            __extends(TrendsCandlesWidget, _super);\n            function TrendsCandlesWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsCandlesWidget.prototype.getTrendWidgetClass = function() {\n                return TrendCandlesWidget;\n            };\n            TrendsCandlesWidget.widgetName = \"TrendsCandles\";\n            return TrendsCandlesWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsCandlesWidget = TrendsCandlesWidget;\n        var TrendCandlesWidget = function(_super) {\n            __extends(TrendCandlesWidget, _super);\n            function TrendCandlesWidget(chartState, trendName) {\n                _super.call(this, chartState, trendName);\n                this.freeCandlesInds = [];\n                this.candlesPool = [];\n                this.candles = {};\n                this.initObject();\n            }\n            TrendCandlesWidget.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.type == Trend_1.TREND_TYPE.CANDLE;\n            };\n            TrendCandlesWidget.prototype.getObject3D = function() {\n                return this.object3D;\n            };\n            TrendCandlesWidget.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.trend.segmentsManager.onRebuild(function() {\n                    _this.destroyCandles();\n                    _this.setupCandles();\n                }));\n                this.bindEvent(this.trend.segmentsManager.onDisplayedRangeChanged(function() {\n                    _this.setupCandles();\n                }));\n            };\n            TrendCandlesWidget.prototype.initObject = function() {\n                var stateData = this.chartState.data;\n                var _a = stateData.xAxis.range, scaleXFactor = _a.scaleFactor, zoomX = _a.zoom;\n                var _b = stateData.yAxis.range, scaleYFactor = _b.scaleFactor, zoomY = _b.zoom;\n                this.scaleXFactor = scaleXFactor;\n                this.scaleYFactor = scaleYFactor;\n                this.object3D = new Object3D();\n                this.object3D.scale.set(scaleXFactor * zoomX, scaleYFactor * zoomY, 1);\n                this.object3D.frustumCulled = false;\n                for (var i = 0; i < MAX_CANDLES; i++) this.freeCandlesInds.push(i);\n                this.setupCandles();\n            };\n            TrendCandlesWidget.prototype.setupCandles = function() {\n                var _a = this.trend.segmentsManager, firstDisplayedSegment = _a.firstDisplayedSegment, lastDisplayedSegment = _a.lastDisplayedSegment;\n                for (var segmentId in this.candles) {\n                    var segment_1 = this.candles[segmentId].segment;\n                    var segmentIsNotDisplayed = segment_1.startXVal < firstDisplayedSegment.startXVal || segment_1.endXVal > lastDisplayedSegment.endXVal;\n                    if (segmentIsNotDisplayed) this.destroyCandle(Number(segmentId));\n                }\n                var segment = firstDisplayedSegment;\n                while (segment && segment.xVal <= lastDisplayedSegment.xVal) {\n                    this.setupCandle(segment.id, segment.currentAnimationState);\n                    segment = segment.getNext();\n                }\n            };\n            TrendCandlesWidget.prototype.destroyCandles = function() {\n                for (var segmentId in this.candles) this.destroyCandle(Number(segmentId));\n            };\n            TrendCandlesWidget.prototype.destroyCandle = function(segmentId) {\n                var candle = this.candles[segmentId];\n                this.object3D.remove(candle.getObject3D());\n                delete this.candles[segmentId];\n            };\n            TrendCandlesWidget.prototype.onZoomFrame = function(options) {\n                var currentScale = this.object3D.scale;\n                if (options.zoomX) currentScale.setX(this.scaleXFactor * options.zoomX);\n                if (options.zoomY) currentScale.setY(this.scaleYFactor * options.zoomY);\n            };\n            TrendCandlesWidget.prototype.onSegmentsAnimate = function(trendSegments) {\n                for (var _i = 0, _a = trendSegments.animatedSegmentsIds; _i < _a.length; _i++) {\n                    var segmentId = _a[_i];\n                    if (!this.candles[segmentId]) continue;\n                    var segmentState = trendSegments.segmentsById[segmentId].currentAnimationState;\n                    this.setupCandle(segmentId, segmentState);\n                }\n            };\n            TrendCandlesWidget.prototype.setupCandle = function(candleId, segmentState) {\n                var candleInd = candleId % MAX_CANDLES;\n                var candle = this.candlesPool[candleInd];\n                if (!candle) {\n                    candle = this.candlesPool[candleInd] = new CandleWidget();\n                }\n                if (!this.candles[candleId]) {\n                    this.candles[candleId] = candle;\n                    this.object3D.add(candle.getObject3D());\n                }\n                candle.getObject3D().position.set(this.toLocalX(segmentState.xVal), this.toLocalY(segmentState.yVal), 0);\n                candle.setSegment(segmentState);\n            };\n            TrendCandlesWidget.prototype.toLocalX = function(xVal) {\n                return xVal - this.chartState.data.xAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalY = function(yVal) {\n                return yVal - this.chartState.data.yAxis.range.zeroVal;\n            };\n            TrendCandlesWidget.prototype.toLocalVec = function(vec) {\n                return new Vector3(this.toLocalX(vec.x), this.toLocalY(vec.y), 0);\n            };\n            return TrendCandlesWidget;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendCandlesWidget = TrendCandlesWidget;\n        var CandleWidget = function() {\n            function CandleWidget() {\n                this.initObject();\n            }\n            CandleWidget.prototype.getObject3D = function() {\n                return this.rect;\n            };\n            CandleWidget.prototype.setSegment = function(segment) {\n                this.segment = segment;\n                var color = segment.endYVal < segment.startYVal ? FALL_COLOR : RISE_COLOR;\n                var geometry = this.rect.geometry;\n                var material = this.rect.material;\n                var width = segment.endXVal - segment.startXVal;\n                width -= width * MARGIN_PERCENT;\n                var height = Math.max(segment.startYVal, segment.endYVal) - Math.min(segment.startYVal, segment.endYVal);\n                var _a = geometry.vertices, leftTop = _a[0], rightTop = _a[1], leftBottom = _a[2], rightBottom = _a[3];\n                leftTop.set(-width / 2, height / 2, 0);\n                rightTop.set(width / 2, height / 2, 0);\n                leftBottom.set(-width / 2, -height / 2, 0);\n                rightBottom.set(width / 2, -height / 2, 0);\n                if (Utils_1.Utils.getDistance(leftTop.y, leftBottom.y) < 1) {\n                    leftBottom.setY(leftBottom.y + 1);\n                    rightBottom.setY(rightBottom.y + 1);\n                }\n                material.color.set(color);\n                geometry.verticesNeedUpdate = true;\n                var vLineGeometry = this.vLine.geometry;\n                var vLineMaterial = this.vLine.material;\n                var lineTop = segment.maxYVal - segment.yVal;\n                var lineBottom = segment.minYVal - segment.yVal;\n                vLineGeometry.vertices[0].set(0, lineTop, 0);\n                vLineGeometry.vertices[1].set(0, lineBottom, 0);\n                vLineMaterial.color.set(color);\n                vLineGeometry.verticesNeedUpdate = true;\n                var hLineGeometry = this.hLine.geometry;\n                var hLineMaterial = this.hLine.material;\n                var lineLeft = -width / 2;\n                var lineRight = width / 2;\n                hLineGeometry.vertices[0].set(lineLeft, 0, 0);\n                hLineGeometry.vertices[1].set(lineRight, 0, 0);\n                hLineMaterial.color.set(color);\n                hLineGeometry.verticesNeedUpdate = true;\n            };\n            CandleWidget.prototype.initObject = function() {\n                this.rect = new Mesh(new PlaneGeometry(1, 1), new MeshBasicMaterial());\n                var vLineGeometry = new Geometry();\n                var hLineGeometry = new Geometry();\n                vLineGeometry.vertices.push(new Vector3(), new Vector3());\n                hLineGeometry.vertices.push(new Vector3(), new Vector3());\n                this.vLine = new Line(vLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.hLine = new Line(hLineGeometry, new LineBasicMaterial({\n                    linewidth: 1\n                }));\n                this.rect.add(this.vLine);\n                this.rect.add(this.hLine);\n            };\n            return CandleWidget;\n        }();\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var __extends = this && this.__extends || function(d, b) {\n            for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n            function __() {\n                this.constructor = d;\n            }\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        var Utils_1 = __webpack_require__(14);\n        var Mesh = THREE.Mesh;\n        var PlaneBufferGeometry = THREE.PlaneBufferGeometry;\n        var MeshBasicMaterial = THREE.MeshBasicMaterial;\n        var TrendsWidget_1 = __webpack_require__(25);\n        var Trend_1 = __webpack_require__(13);\n        var TrendsBeaconWidget = function(_super) {\n            __extends(TrendsBeaconWidget, _super);\n            function TrendsBeaconWidget() {\n                _super.apply(this, arguments);\n            }\n            TrendsBeaconWidget.prototype.getTrendWidgetClass = function() {\n                return TrendBeacon;\n            };\n            TrendsBeaconWidget.widgetName = \"TrendsBeacon\";\n            return TrendsBeaconWidget;\n        }(TrendsWidget_1.TrendsWidget);\n        exports.TrendsBeaconWidget = TrendsBeaconWidget;\n        var TrendBeacon = function(_super) {\n            __extends(TrendBeacon, _super);\n            function TrendBeacon(state, trendName) {\n                _super.call(this, state, trendName);\n                this.initObject();\n                if (state.data.animations.enabled) {\n                    this.animate();\n                }\n                this.updatePosition();\n            }\n            TrendBeacon.widgetIsEnabled = function(trendOptions) {\n                return trendOptions.enabled && trendOptions.hasBeacon && trendOptions.type == Trend_1.TREND_TYPE.LINE;\n            };\n            TrendBeacon.prototype.getObject3D = function() {\n                return this.mesh;\n            };\n            TrendBeacon.prototype.onTrendChange = function() {\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.bindEvents = function() {\n                var _this = this;\n                _super.prototype.bindEvents.call(this);\n                this.bindEvent(this.chartState.onScroll(function() {\n                    return _this.updatePosition();\n                }));\n                this.bindEvent(this.chartState.onChange(function(changedProps) {\n                    return _this.onStateChange(changedProps);\n                }));\n                this.bindEvent(this.chartState.onDestroy(function() {\n                    return _this.stopAnimation();\n                }));\n            };\n            TrendBeacon.prototype.initObject = function() {\n                var light = this.mesh = new Mesh(new PlaneBufferGeometry(32, 32), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture(),\n                    transparent: true\n                }));\n                light.scale.set(.2, .2, 1);\n                light.add(new Mesh(new PlaneBufferGeometry(5, 5), new MeshBasicMaterial({\n                    map: TrendBeacon.createTexture()\n                })));\n                this.segment = this.trend.segmentsManager.getEndSegment();\n            };\n            TrendBeacon.prototype.animate = function() {\n                var _this = this;\n                this.animated = true;\n                var object = this.mesh;\n                var animationObject = {\n                    scale: object.scale.x,\n                    opacity: object.material.opacity\n                };\n                this.mesh.scale.set(.1, .1, 1);\n                setTimeout(function() {\n                    var animation = _this.animation = TweenLite.to(animationObject, 1, {\n                        scale: 1,\n                        opacity: 0\n                    });\n                    animation.eventCallback(\"onUpdate\", function() {\n                        object.scale.set(animationObject.scale, animationObject.scale, 1);\n                        object.material.opacity = animationObject.opacity;\n                    }).eventCallback(\"onComplete\", function() {\n                        _this.animation && animation.restart();\n                    });\n                }, 500);\n            };\n            TrendBeacon.prototype.stopAnimation = function() {\n                this.animated = false;\n                this.animation && this.animation.kill();\n                this.animation = null;\n            };\n            TrendBeacon.createTexture = function() {\n                var h = 32, w = 32;\n                return Utils_1.Utils.createTexture(h, w, function(ctx) {\n                    ctx.beginPath();\n                    ctx.arc(w / 2, h / 2, w / 2, 0, 2 * Math.PI, false);\n                    ctx.fillStyle = \"white\";\n                    ctx.fill();\n                });\n            };\n            TrendBeacon.prototype.onTransformationFrame = function() {\n                this.segment = this.trend.segmentsManager.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onSegmentsAnimate = function(trendsSegments) {\n                this.segment = trendsSegments.getEndSegment();\n                this.updatePosition();\n            };\n            TrendBeacon.prototype.onStateChange = function(changedProps) {\n                if (!changedProps.animations) return;\n                if (changedProps.animations.enabled == void 0 || changedProps.animations.enabled == this.animated) return;\n                if (changedProps.animations.enabled) {\n                    this.animate();\n                } else {\n                    this.stopAnimation();\n                }\n            };\n            TrendBeacon.prototype.updatePosition = function() {\n                var state = this.chartState;\n                var xVal, yVal;\n                var currentAnimationState = this.segment.currentAnimationState;\n                if (this.trend.getOptions().type == Trend_1.TREND_TYPE.LINE) {\n                    xVal = currentAnimationState.endXVal;\n                    yVal = currentAnimationState.endYVal;\n                } else {\n                    xVal = currentAnimationState.xVal;\n                    yVal = currentAnimationState.endYVal;\n                }\n                var endPointVector = state.screen.getPointOnChart(xVal, yVal);\n                var screenWidth = state.data.width;\n                var x = endPointVector.x;\n                var screenX = state.screen.getScreenXByPoint(endPointVector.x);\n                if (screenX < 0) x = state.screen.getPointByScreenX(0);\n                if (screenX > screenWidth) x = state.screen.getPointByScreenX(screenWidth);\n                this.mesh.position.set(x, endPointVector.y, .1);\n            };\n            return TrendBeacon;\n        }(TrendsWidget_1.TrendWidget);\n        exports.TrendBeacon = TrendBeacon;\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        function __export(m) {\n            for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n        }\n        __export(__webpack_require__(3));\n    }, function(module, exports, __webpack_require__) {\n        \"use strict\";\n        var Utils_1 = __webpack_require__(14);\n        var EventEmmiter_1 = __webpack_require__(16);\n        exports.DEFAULT_CONFIG = {\n            installPluginWidgets: true\n        };\n        var ChartPlugin = function() {\n            function ChartPlugin(options, config) {\n                if (config === void 0) {\n                    config = {};\n                }\n                this.unsubscribers = [];\n                this.initialState = options;\n                this.config = Utils_1.Utils.deepMerge(exports.DEFAULT_CONFIG, config);\n                this.name = this.constructor.NAME;\n                if (!this.name) Utils_1.Utils.error(\"Unnamed plugin detected\");\n            }\n            ChartPlugin.prototype.setupChartState = function(chartState) {\n                var _this = this;\n                this.chartState = chartState;\n                this.ee = new EventEmmiter_1.EventEmitter();\n                this.bindEvent(this.chartState.onInitialStateApplied(function(initialState) {\n                    return _this.onInitialStateAppliedHandler(initialState);\n                }), this.chartState.onReady(function() {\n                    return _this.onChartReadyHandler();\n                }), this.chartState.onDestroy(function() {\n                    return _this.onDestroyHandler();\n                }), this.chartState.onPluginsStateChange(function(changedPluginsStates) {\n                    return changedPluginsStates[_this.name] && _this.onStateChanged(changedPluginsStates[_this.name]);\n                }));\n            };\n            ChartPlugin.prototype.getOptions = function() {\n                return this.chartState.data.pluginsState[this.name];\n            };\n            ChartPlugin.prototype.onInitialStateAppliedHandler = function(initialState) {};\n            ChartPlugin.prototype.onChartReadyHandler = function() {};\n            ChartPlugin.prototype.onStateChanged = function(changedState) {};\n            ChartPlugin.prototype.onDestroyHandler = function() {\n                this.ee.removeAllListeners();\n            };\n            ChartPlugin.prototype.bindEvent = function() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                var unsubscribers = [];\n                if (!Array.isArray(args[0])) {\n                    unsubscribers.push(args[0]);\n                } else {\n                    unsubscribers.push.apply(unsubscribers, args);\n                }\n                (_a = this.unsubscribers).push.apply(_a, unsubscribers);\n                var _a;\n            };\n            ChartPlugin.prototype.unbindEvents = function() {\n                this.unsubscribers.forEach(function(unsubscriber) {\n                    return unsubscriber();\n                });\n                this.unsubscribers.length = 0;\n            };\n            ChartPlugin.NAME = \"\";\n            ChartPlugin.pluginWidgets = [];\n            return ChartPlugin;\n        }();\n        exports.ChartPlugin = ChartPlugin;\n    } ]);\n});\n\n\n//# sourceMappingURL=ThreeChart.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three-charts/build/ThreeChart.js\n ** module id = 3\n ** module chunks = 0 2 3\n **/"],"sourceRoot":""}